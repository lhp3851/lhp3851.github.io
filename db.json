{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/book/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/book/source/css/book.scss","path":"css/book.scss","modified":0,"renderable":1},{"_id":"themes/book/source/js/book-menu.js","path":"js/book-menu.js","modified":0,"renderable":1},{"_id":"themes/book/source/js/book-post.js","path":"js/book-post.js","modified":0,"renderable":1},{"_id":"themes/book/source/js/book-toc.js","path":"js/book-toc.js","modified":0,"renderable":1},{"_id":"themes/book/source/js/book.js","path":"js/book.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/book/_config.yml","hash":"e11501937dde2a71e36b7a27e37a2da87a869ee8","modified":1614005288022},{"_id":"themes/book/LICENSE","hash":"03157c4b6e91d27f69508dbdc62c09bc38fd78fc","modified":1614005288021},{"_id":"themes/book/README.md","hash":"aeece538443aff02fedebace7a6057d30e93309a","modified":1614005288022},{"_id":"themes/book/layout/archive.ejs","hash":"dec48c24f9f94a2ddd733f70a96fba0886f563e5","modified":1614005288025},{"_id":"themes/book/layout/categories.ejs","hash":"e3e1aa97b9a21f5bd85c4f0c56d79e7096eda48c","modified":1614005288025},{"_id":"themes/book/layout/index.ejs","hash":"ce0892216ca0cd664796c873190d26f2430e4959","modified":1614005288026},{"_id":"themes/book/layout/layout.ejs","hash":"6b197a2edf59592f3061ea521fa216fef1a3b168","modified":1614005288026},{"_id":"themes/book/layout/page.ejs","hash":"2e53811dda487a8faf75b3c3372fc8b8726d1f55","modified":1614005288026},{"_id":"themes/book/scripts/merge-configs.js","hash":"73d4d9c35cedfe4ed99c849c73fcee4012738a1c","modified":1614005288027},{"_id":"themes/book/layout/post.ejs","hash":"37ea12159553023f07d1f99815a5a9b82a9c3ef7","modified":1614005288027},{"_id":"themes/book/scripts/render.js","hash":"70e9e26a16f8753ca23fe8e2b14fde7499bdad74","modified":1614006369772},{"_id":"themes/book/layout/tags.ejs","hash":"f2744252f6de3451c19d695f8f518c5a054f58b7","modified":1614005288027},{"_id":"themes/book/source/favicon.png","hash":"1214709f0131cc39ee30e0b44ad54fc0a74d3658","modified":1614005288033},{"_id":"themes/book/layout/_components/brand.ejs","hash":"a5272fbc584e7b89c0ccf205661e90f2c99354a1","modified":1614005288022},{"_id":"themes/book/layout/_components/menu.ejs","hash":"c2c0efd59fed898cb41ad6a0ec94c49aca3e7fea","modified":1614005288023},{"_id":"themes/book/layout/_components/post-meta.ejs","hash":"243532bf3d848291cb191331910e97b9a6b40bfa","modified":1614005288023},{"_id":"themes/book/layout/_components/sidebar-toggle.ejs","hash":"53d6fc0e8bfb8f36942d2d7afcbb306dd0f89c31","modified":1614005288023},{"_id":"themes/book/layout/_components/toc.ejs","hash":"92259942c0cbe60ede9db992f7142206e93431f2","modified":1614005288024},{"_id":"themes/book/source/css/_variables.scss","hash":"1e24fa7f2467f06be7ab6d034a47ff2438384d51","modified":1614005288033},{"_id":"themes/book/source/css/book.scss","hash":"cac0f32677c1e3ede2700a0dd02dec6aba6997cd","modified":1614005288033},{"_id":"themes/book/layout/_partials/head.ejs","hash":"7348521bef7ef79bfb4b3dbf005adfa4ba42ba17","modified":1614005288024},{"_id":"themes/book/layout/_partials/navbar.ejs","hash":"10eae8b5ed78e82a38b58d9525422f10b9be89cf","modified":1614005288025},{"_id":"themes/book/layout/_partials/post-info.ejs","hash":"d9ff5a91882a47ceb2144dcdccdd9b56191e4228","modified":1614005288025},{"_id":"themes/book/source/js/book-menu.js","hash":"deebd62833f484c84e08357291ccc797c7544eb6","modified":1614005288034},{"_id":"themes/book/source/js/book-post.js","hash":"d239e79163ceb5a37c9274c0c83010eea80554d8","modified":1614005288034},{"_id":"themes/book/source/js/book-toc.js","hash":"fcbf2a88d9bab50dbd1337150a5909e8b9eecd13","modified":1614005288035},{"_id":"themes/book/source/js/book.js","hash":"c150427c7397aea35ad83624f8db8f4b19846bb6","modified":1614005288035},{"_id":"themes/book/layout/_lib/comments.ejs","hash":"823afb4dcbee4e8b2258671aaf1332fed038774e","modified":1614005288024},{"_id":"themes/book/layout/_lib/zooming-image.ejs","hash":"c9b2c4772bac30ca2a8939e6e305c9c9397d9003","modified":1614005288024},{"_id":"themes/book/layout/_lib/google-analytics.ejs","hash":"8fac33b80001d1eba38ec7f35e9bd22d79705f43","modified":1614005288024},{"_id":"themes/book/source/css/_components/brand.scss","hash":"d6d944b2ce367bc67249dcb917c2a36df2c7d285","modified":1614005288028},{"_id":"themes/book/source/css/_components/comments.scss","hash":"1e5204db1a98e70ccb3027df8eb5a0fbfa3530c1","modified":1614005288029},{"_id":"themes/book/source/css/_components/menu.scss","hash":"0b9ba0d7f5df5f9a1a4321b9f5ede89fc92be0b4","modified":1614005288030},{"_id":"themes/book/source/css/_components/post-meta.scss","hash":"489673d51d470fc6c47c0c5e942fb027f6f9846b","modified":1614005288030},{"_id":"themes/book/source/css/_components/post.scss","hash":"ad6e61a4a7fa6259577dc34263be727a4afc8b03","modified":1614005288031},{"_id":"themes/book/source/css/_components/sidebar-toggle.scss","hash":"9f1d81d4e98c0c2f62a17512bbd7fbdff59d5bfc","modified":1614005288031},{"_id":"themes/book/source/css/_partials/book-content.scss","hash":"8e7a53eb11d87925d2bf940bb29ea5a9ea8a22f4","modified":1614005288032},{"_id":"themes/book/source/css/_components/toc.scss","hash":"30c6fa4a4d9ed70b43ac26bd869ac8f58e3e0214","modified":1614005288031},{"_id":"themes/book/source/css/_partials/book-navbar.scss","hash":"c7311a76fc29a262ed03091661b4dea30d53d4f7","modified":1614005288032},{"_id":"themes/book/source/css/_partials/book-archive.scss","hash":"c5ac27a8769860174af70d8111b2c2beee2921d6","modified":1614005288032},{"_id":"themes/book/source/css/_partials/book-sidebar.scss","hash":"3e4b1b06404b084df7cbc4a31cfaf7db3594e75c","modified":1614005288032},{"_id":"themes/book/source/css/_components/highlight/diff.scss","hash":"e1a087d44e499beb05d0906b8a64fff62a7ba01d","modified":1614005288029},{"_id":"themes/book/source/css/_components/highlight/highlight.scss","hash":"5d7851dec993537f0e32d0301bae70ac0ccbb52d","modified":1614005288029},{"_id":"themes/book/source/css/_components/highlight/theme.scss","hash":"ec78a76370e44d9f1978c6f4ec2f3d523286f23a","modified":1614005288030},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之Block.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553431461000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之GCD.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553431440000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之Xcode.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432258000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之iOS-SDK.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553431618000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之事件传递.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432211000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之代码管理.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432228000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之代码重构.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553431535000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之单元测试.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432274000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之多线程.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553431415000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之生态体系及结构.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432978000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之设计模式.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553431485000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之视频.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之音频.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之多媒体.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之安全.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553431485000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之持久化.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432483000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/Charles.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/OmniGraffle.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之操作系统/Unix.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553431485000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之操作系统/iOS之RunLoop.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553431485000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之操作系统/iOS之运行时.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之操作系统/Linux.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553431485000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之游戏/iOS之游戏.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之游戏/iOS游戏之Lua.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之游戏/iOS游戏之引擎.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS之交互体验.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS之动画.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/Jira.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/Tapd.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/禅道.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/Jenkins.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/AppleScript.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553431485000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/Java.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/MySQL.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/PHP.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/Pyhon.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之Objective-C.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之Swift.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/iOS编程语言之C++:C.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553433048000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/Flutter.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/JavaScript.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/React-Native.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/Vue.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553432185000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1614001509650},{"_id":"source/_posts/iOS学习笔记/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1614001519333},{"_id":"source/_drafts/学习计划.md","hash":"23c1c3c602c8680f1fc14dfa580e028ff9642442","modified":1611839314613},{"_id":"source/_drafts/近期目标.md","hash":"c94af9cacdceee835c417d9a29764591f41c8431","modified":1611839108074},{"_id":"source/_posts/iOS学习笔记/default.db.conf","hash":"8193a7df76e7f1dc5d99cb4e597803cc309b0094","modified":1573829983000},{"_id":"source/_posts/iOS学习笔记/iOS 查漏补缺.md","hash":"bafbc59b5e2a22f2ffd5c1f94e7039ffca469fa8","modified":1611839894961},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter 技术可行性调研.md","hash":"db0c6f6fd3531baa7c0b3ddb4d5ae24f4d83c5ed","modified":1567073611000},{"_id":"source/_posts/iOS学习笔记/Flutters/isolates.dart","hash":"9d33487133c944fd439124a4aaa9624b446036b4","modified":1564644880000},{"_id":"source/_posts/iOS学习笔记/.vscode/settings.json","hash":"2978e14530291b98156c1a339a673c6ebb7c8a76","modified":1611839042802},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter.md","hash":"bec74e83648d20a242dd863876c6ffe2b72e2043","modified":1564649832000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之AppleService.md","hash":"ccf31f5903d7baeb0f53c960e7df17ee741ac8c1","modified":1611839699775},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开发规范化.md","hash":"c7ce2785b73acac34b48328fd7c5d9ec3155fcf8","modified":1554012268000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之内存管理.md","hash":"c3a0c1aa201911945845b4423029495b6af9dbc8","modified":1611839835462},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开源库.md","hash":"4e37c6ad43826427c3744c6c509bf4eba9de221b","modified":1553431910000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之学习笔记.md","hash":"c438cc48460146607e466153d1996762cbbe1e27","modified":1553437037000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之异常处理.md","hash":"5a0ef27228d3f34f995e4a67b412e3611b8d577c","modified":1553700782000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之架构·框架.md","hash":"bb648307ee1ff048a411fa99035a6e572a4fa8c6","modified":1553759758000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之组件化.md","hash":"2e336a509cf501d7e7f0f5e80752928da0daf0a2","modified":1555139245000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Flutter_Framework.png","hash":"ec6e8c964e1e0668e7559f2e7ebffbc549538dd4","modified":1564195558000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Flutter_Frameworks.png","hash":"b5dca9eb8afaf9416f23281990e67e3c3f678bd8","modified":1564456368000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Flutter_iOS_Android.png","hash":"98ffd3b697dc442f1c3f675fa31f045c09a2c036","modified":1564368306000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Memory_Manager_01.webp","hash":"cdb847954e6905453a7228adc54cd4ea8c5eca92","modified":1564471333000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Flutter_Render_Object.png","hash":"65cfd19cd2486a32191c096cf15a608a056e09f1","modified":1564195496000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Launch_flow_ios.webp","hash":"ef2a43e957cde6e50b02686215b25cdd42d77472","modified":1564456572000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Memory_Manager_02.webp","hash":"20c2775fd7398e6e7165c2f7852acaa61900d8eb","modified":1564471375000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Rendering_pipeline.png","hash":"dd6c572e6e5b47bb8d1f5cd42d9044631cdd7452","modified":1564367562000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Render_flow.webp","hash":"873ddcafb6c1ea7a8706ece78e3f464c95f70edf","modified":1564233926000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Widget_update.png","hash":"f697ec1645a57163a7d424131e78a5e3e9fc5bff","modified":1564367596000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/iOS_Render_flow.webp","hash":"995b43e8e9728f536b540db7a1e85397ecf9dd0b","modified":1564372126000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Widgets.png","hash":"b30a2c8bce0df0b107c9fdc65ba78380c7c6c5e2","modified":1564367610000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之图片.md","hash":"39eeaea293bb7113ac7f67c7d45d2256d0b8f718","modified":1553433864000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/WWDC/WWDC2019.md","hash":"5c93ae36fab36a3ec95d30265cd1a4d7cff3e9c4","modified":1564802694000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之性能优化/KSCrash 简明教程.md","hash":"71f7f5bd63395260c9c90f6f7e356ce23f4459b1","modified":1563846520000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之dyld环境变量介绍.md","hash":"a5483f463977de86a7b39e144e15d406e3773bfd","modified":1562668406000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之性能优化/dyld.txt","hash":"e9abecac3e2ead430d0f188e20c801ba8ff81a5d","modified":1562663518000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之启动优化-GCC attribute.md","hash":"ce8438982452a1231562078f1ca9ef2e51e37c3f","modified":1562668409000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之性能优化.md","hash":"2a2a73ff5e74a2b6d113499e6587a39383bd452c","modified":1562664166000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之启动优化.md","hash":"1db32cce3ea8dd8b3419d81a4c3f93ea538ad314","modified":1562668403000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之协议.md","hash":"9dc57bd856db018ed13b8e84aae5d71c41d83610","modified":1556332726000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之数据库及其管理.md","hash":"09955fc7521e7a0fa3aa2c08b1e2fb0605928f06","modified":1553432168000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之网络.md","hash":"508da652fe336c28b7015c014c52976c1a0734d1","modified":1553692268000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之算法.md","hash":"b757ea2265f75a9360956597ba7523e09ec95188","modified":1553673739000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之日志系统.md","hash":"37550b94e4c6c675b2a995f6ac357d45ef418d49","modified":1553694812000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/LLDB","hash":"8da1caa2f967a71c42665f63bd51f8770be6a012","modified":1560503977000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/Git提交代码规范.md","hash":"a40859d4a04b4d81a57efe2811112e2f74dc53d3","modified":1555117275000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/LLDB.md","hash":"8da1caa2f967a71c42665f63bd51f8770be6a012","modified":1560502769000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/_iOS之逆向.md","hash":"4bb68b979ea0ce2c5c0250e26e7eb095e012937a","modified":1614006020587},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/cocoapod 库.md","hash":"e002ff9d4b654f38da105a45cd6b658ef7a86c98","modified":1560853266000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/cocoapod.md","hash":"bb4b8a25e3ead1289eb87197f10168ec975562da","modified":1554987803000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/iOS之开发工具.md","hash":"03eac607928d64da148d04c432436f64eb1a2c0b","modified":1614006014621},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之操作系统/i18n_hk","hash":"ccb9e3269c2fdb1e63d059098fdb05af8ea07a0e","modified":1561105758000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之操作系统/i18n_original","hash":"db9ee2d1b41dcd2708b758fe0351b69fb509c1a1","modified":1561101151000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/监控插件库.md","hash":"2bb5df79cfaab7f9f9e06ce70a805cb39550b2df","modified":1561005664000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之操作系统/shell 配置文件","hash":"15a91d21bb2bc8fd2eb9efe97d1887ea46de2398","modified":1560848972000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之文档/jazzy.yaml","hash":"c1c7cd35cf89ecd74e0d93c07c3a0de9b395e75a","modified":1557831879000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS排版之CoreText.md","hash":"12c4bc430c626a381baf06b5a72e57cb599017ec","modified":1553511693000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS之界面显示.md","hash":"bc3eaf09daee49dda8331a6921db351f5c6a899e","modified":1553437034000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS排版之TextKit.md","hash":"a26c2d2e72e47bb6160a674323b28c9a917bcaf4","modified":1553441852000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之文档/文档生成.md","hash":"f7f0f2adbaaae3603406d75d02c35a51809dbb1e","modified":1557893162000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS自动布局.md","hash":"59ec63aa8570db8a9e289e814e185fcd421462f6","modified":1553511685000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS排版之WebKit.md","hash":"1392b9d1311c0637f3264dae9f0f3e43f60fef66","modified":1553752160000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/iOS之CI集成.md","hash":"1d7848a1a5354cf4047668c4685c8e722aab6ba2","modified":1553432137000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/fastlane.sh","hash":"eac80d31d38d750f15578a4bdaecd857e4435286","modified":1566122009000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/iOS自动化编译打包.md","hash":"3226d5c5110bacd09ea7b3b741d196765a87dbb9","modified":1557893150000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/iOS项目管理之杂项.md","hash":"6771bd25854fc5467223607e3ab88816f148d99f","modified":1556001542000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/Assemble.md","hash":"7d7a4c536224e80b51a25ea5169c7ce8ad03a3b5","modified":1553666810000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/_Shell.md","hash":"040e0deacf23e4d412bd3141f6fa573987a10036","modified":1614005950281},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/Swift 构造器.md","hash":"85229d2e628e3b1e50bf282d200c6859c8ffde6f","modified":1551087625000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/OC-Class.png","hash":"793cd3d4c3e61baff1b6d00ed0c336a82fa47ca1","modified":1562860488000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/objc_runtime_type.md","hash":"df728f5ffcc85194af67e85e473248f0c9439cbc","modified":1562842021000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/大前端/Flutter.md","hash":"31e5f67b53818dc056464db7673eb40a5dbad8d2","modified":1564445885000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/resource/HTTP.png","hash":"719ea5db5519afd1755fe2e80200345eafc92efe","modified":1554534270000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/resource/Ethernet.png","hash":"fa101d484986507ff8fec409538e6345f7c91d2e","modified":1554534535000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/resource/NetLayer.jpg","hash":"d843f4d6632ab41b36fd614df844f3cee412fe56","modified":1556325908000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/resource/TCP.gif","hash":"9c5db8ec14506d4fc7274bc3e2c65acf30782068","modified":1554534294000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/resource/stream.png","hash":"32505642d82a40259daba7cee56c7d60a54d14bb","modified":1554534349000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/resource/protocols.png","hash":"592a706b8f37aec9f6f5ddb746e97e2de7d24335","modified":1554534446000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/resources/text_glpy_info.gif","hash":"21fad40ffdf116a7655f7f3385c52e4c99dfc1cf","modified":1553442091000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/resource/stream2.jpg","hash":"b69d70c0dce95e5664a6861e5f152c1cbf24442a","modified":1554535956000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/resources/autolayout_hugging.png","hash":"ada86b34e6e810076b33a99283ea6495eed907ea","modified":1553482499000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/resources/ctframe.png","hash":"51b576625be2458f4674686b66dce1baa01f2bd5","modified":1553442372000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/resources/textkit_archtecture.png","hash":"79fb1eecfc1814847ceb496eebcfa74a9ceacb92","modified":1553441460000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/resources/text_glpy_info_1.gif","hash":"21997f431ef1983d6fdd9e4da44e62eee640ea60","modified":1553442178000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/resources/crash-log/.DS_Store","hash":"0d8f9d9aa3898492335a9cef49dfbd7121c881da","modified":1601536523167},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/C Catalog.md","hash":"0f7e227ccdcb0394d98eb70686eca2e68b15307e","modified":1564714787000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/Size_t","hash":"d39db2d0a816728ed57a802ae17c82c3b6205f02","modified":1564728460000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/boost-b2.md","hash":"5bb9109173fb4b8f4c850174896421a0d95126f4","modified":1565751478000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/Size_t.c","hash":"f3cd48d82e372ad6ab2a0ebf1d03880b6fac668a","modified":1564728207000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/大前端/Flutter/Flutter_Framework.png","hash":"ec6e8c964e1e0668e7559f2e7ebffbc549538dd4","modified":1564195558000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/大前端/Flutter/Render_flow.webp","hash":"873ddcafb6c1ea7a8706ece78e3f464c95f70edf","modified":1564233926000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/大前端/Flutter/Flutter_Render_Object.png","hash":"65cfd19cd2486a32191c096cf15a608a056e09f1","modified":1564195496000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/g++.md","hash":"7be7ddb641b17651a693c8375309416c0050291b","modified":1565686575000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/大前端/Flutter/Flutter_iOS_Android.png","hash":"98ffd3b697dc442f1c3f675fa31f045c09a2c036","modified":1564368307000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/大前端/Flutter/Widget_update.png","hash":"f697ec1645a57163a7d424131e78a5e3e9fc5bff","modified":1564367596000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/大前端/Flutter/iOS_Render_flow.webp","hash":"995b43e8e9728f536b540db7a1e85397ecf9dd0b","modified":1564372126000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/大前端/Flutter/Rendering_pipeline.png","hash":"dd6c572e6e5b47bb8d1f5cd42d9044631cdd7452","modified":1564367563000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/resources/charicteristics.gif","hash":"8122438ad1cd5d92e100ed52936a0c53aac1d5ea","modified":1556432255000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/大前端/Flutter/Widgets.png","hash":"b30a2c8bce0df0b107c9fdc65ba78380c7c6c5e2","modified":1564367611000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/resources/crash-log/sd_doctor_ios.app.dSYM/Contents/Info.plist","hash":"e72eb6d7c67ededd19ef0a7d4f6e550874ad5ac1","modified":1613951893262},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Rendering_pipe.png","hash":"18dd57b8110ae1be02fe637faed066cd5b0774a3","modified":1564367582000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/20160712110935064.png","hash":"7b585200bb64048c738af838d70f34ded726954f","modified":1553784775000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/resource/IP.png","hash":"d1e2d3d8913024b6e04273dbd265d67c31f6da82","modified":1554535264000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/resource/IP1.png","hash":"9b2dd2e9a330e97ed7347890e4ee5fd7fe9b2a8a","modified":1554535220000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/resource/UDP.jpeg","hash":"8ed5d7dc77203f9c76e9a3d86955e12c2acf598d","modified":1554534409000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/resource/falkHead.jpg","hash":"3f8d4dd0627ad5d0798d6a6dd40328a9f88e5ab1","modified":1556328203000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/resource/stream1.png","hash":"45a1969058909965cb4c7f47e802f16c7a45837b","modified":1554534387000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/resources/crash-log/sd_doctor_ios  2019-3-26, 7-02 PM.crash","hash":"84c28c21349ba4870f91676cc600c9737a1ef40f","modified":1553598216000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/大前端/Flutter/Rendering_pipe.png","hash":"18dd57b8110ae1be02fe637faed066cd5b0774a3","modified":1564367582000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/resources/universal_link.png","hash":"e845749355e15e5cc48bbe5fa55ef2e261234577","modified":1553527184000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/大前端/Flutter/Dart.png","hash":"489b2a968c93125bed2c2ad34231a96ea4a75655","modified":1564196745000},{"_id":"source/_posts/iOS学习笔记/Flutters/Flutter/Dart.png","hash":"489b2a968c93125bed2c2ad34231a96ea4a75655","modified":1564196744000},{"_id":"source/_posts/iOS学习笔记/iOS_study.png","hash":"f063e0e8c518d3b0ad964bfe6bc74edbf3974fc5","modified":1562659776000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/assemble.pdf","hash":"ce3ce2c52d734de42cdf924fdafd78116e06bdc1","modified":1553666005000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/Screen Shot 2019-05-19 at 4.20.37 PM.png","hash":"c55e40684bed6756b4e3a2b92299528e908f93b4","modified":1558254042000},{"_id":"source/_posts/iOS学习笔记/Android屏幕适配.pptx","hash":"0a5dbf1f95a6f65e28264e6b892083ae1b2edd06","modified":1562918713000},{"_id":"source/_posts/iOS学习笔记/iOS系统学习/resources/crash-log/sd_doctor_ios.app.dSYM/Contents/Resources/DWARF/sd_doctor_ios","hash":"8adb8f885cf7463ef6192d22e4e56615c3e4a1c7","modified":1613951896175},{"_id":"public/2019/08/29/iOS学习笔记/Flutters/Flutter 技术可行性调研/index.html","hash":"58b655b9b519d2db4741921ae1f7e2d32980dd97","modified":1614006627032},{"_id":"public/2019/08/03/iOS学习笔记/iOS系统学习/WWDC/WWDC2019/index.html","hash":"20e4a0691e8b6b5b254c17bec4358f86bc9faa16","modified":1614006627032},{"_id":"public/2019/08/02/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/C Catalog/index.html","hash":"cbb37696342c08313fdf8d21e0d7ba1926fa7cde","modified":1614006627032},{"_id":"public/2019/07/23/iOS学习笔记/iOS系统学习/iOS之性能优化/KSCrash 简明教程/index.html","hash":"18731f51977fd6363eb2fa45b061a0f59dd75401","modified":1614006627032},{"_id":"public/2019/07/18/iOS学习笔记/iOS 查漏补缺/index.html","hash":"c375c9f4ba31e093d41e9c0b4ac603773ca99127","modified":1614006627032},{"_id":"public/2019/07/11/iOS学习笔记/iOS系统学习/iOS之编程语言/objc_runtime_type/index.html","hash":"7630394d298cc78b688989c061dc450d63b9e5a9","modified":1614006627032},{"_id":"public/2019/07/09/iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之启动优化-GCC attribute/index.html","hash":"c65f4f9781d28e544b3d1be574cf4a6312612df3","modified":1614006627032},{"_id":"public/2019/07/09/iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之dyld环境变量介绍/index.html","hash":"e7f82fed7f54e1c60abab37ec9c8fee0c37f9bb1","modified":1614006627032},{"_id":"public/2019/07/09/iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之启动优化/index.html","hash":"f138e310e070f27446a4fa8107f467baabc074e8","modified":1614006627032},{"_id":"public/2019/06/20/iOS学习笔记/iOS系统学习/iOS之开发工具/监控插件库/index.html","hash":"fec1b37e8fe381df463ce682a4d600c3c3ddb230","modified":1614006627032},{"_id":"public/2019/06/14/iOS学习笔记/iOS系统学习/iOS之开发工具/LLDB/index.html","hash":"bf8e9102f6fd14fb30be0af393453c387579004f","modified":1614006627032},{"_id":"public/2019/05/15/iOS学习笔记/iOS系统学习/iOS之项目管理/iOS自动化编译打包/index.html","hash":"7c6ba3be8407c0cffe6144dd45f9424a0c4238b3","modified":1614006627032},{"_id":"public/2019/05/15/iOS学习笔记/iOS系统学习/iOS之开发工具/cocoapod 库/index.html","hash":"704465e001fc8e83589762b7badfabaa5b83a7fc","modified":1614006627032},{"_id":"public/2019/05/14/iOS学习笔记/iOS系统学习/iOS之文档/jazzy/index.html","hash":"36b7aabb57bbbec831e7e290fd2f3488de1cb8d4","modified":1614006627032},{"_id":"public/2019/05/13/iOS学习笔记/iOS系统学习/iOS之文档/文档生成/index.html","hash":"13184be7d3a968ac73feaf18d5be9e0d6f454a5b","modified":1614006627032},{"_id":"public/2019/04/13/iOS学习笔记/iOS系统学习/iOS之开发工具/Git提交代码规范/index.html","hash":"b977f97337a1b36d2bf645add58ebfe5fba90058","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/iOS编程语言之C++:C/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之生态体系及结构/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之持久化/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之组件化/index.html","hash":"1644895e25536c5693d6f876b6374be00bc3a9aa","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之日志系统/index.html","hash":"d19eba21fc002374030c0f318a497c533845dd05","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之开发工具/cocoapod/index.html","hash":"d7b158c67b61a3be366e40a11bb6320d158773ab","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之开发工具/iOS之开发工具/index.html","hash":"a2093de1cb50f57652b8875e35e701069a0c2c80","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS排版之CoreText/index.html","hash":"0c93e3fcb87f6997b22af7ef5c58b0fff6776b55","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/Assemble/index.html","hash":"6f984ceaa255f84b6b0445629aca51033a5a2417","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之AppleService/index.html","hash":"83dd9653b5f38328bfc44557715d8b41a2bc0013","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之架构·框架/index.html","hash":"f7698844dc0ae1b771c1bb23fc42c4bd926d3bcd","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之单元测试/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之Xcode/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之代码管理/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之事件传递/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之多媒体/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之视频/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之音频/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之开发工具/Charles/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之开发工具/OmniGraffle/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之操作系统/iOS之运行时/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之游戏/iOS之游戏/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之游戏/iOS游戏之引擎/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之游戏/iOS游戏之Lua/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS之交互体验/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS之动画/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之项目管理/Jira/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之项目管理/Tapd/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之项目管理/禅道/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之项目管理/Jenkins/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/Java/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/MySQL/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/PHP/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/Pyhon/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之Objective-C/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之Swift/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/Flutter/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/JavaScript/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/React-Native/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/Vue/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之学习笔记/index.html","hash":"4e2cd9ba041005a03265b731c6ed5bd8dbdc20ed","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之图片/index.html","hash":"94ea0323361b554578c8dd9e0c7c02191f84436f","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之项目管理/iOS项目管理之杂项/index.html","hash":"d55d56847d5c0a73a3a5105154c28cf826fefb29","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之项目管理/iOS之CI集成/index.html","hash":"37e82e7e65cd8d64fe6a47a83df07890b2b9467d","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之开源库/index.html","hash":"d1e25478c3fc85e4a781c048f7409deba2279523","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之iOS-SDK/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之性能优化/index.html","hash":"6ab2a9b50cf43b41e95cc81fc35e518dc6ef96bf","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之代码重构/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之设计模式/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之安全/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之操作系统/Unix/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之操作系统/iOS之RunLoop/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之操作系统/Linux/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之编程语言/AppleScript/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之算法/index.html","hash":"ea41fe86e871fad60207856cba829b2d80c503fb","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之网络/index.html","hash":"c507123cc804b36f819d23a7ba30b748211b067e","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS排版之TextKit/index.html","hash":"0323f8ff91c12e31502b99a39ef443590a2c73cc","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之Block/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之GCD/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS自动布局/index.html","hash":"98fcd79793faae47d8903ca0f9dd149692aedb80","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之多线程/index.html","hash":"17659866822052fee66fdf1f248d05666bb398a4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之内存管理/index.html","hash":"4397f4414cceafd5ceb59f1b9068857e6eddd6a3","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS之界面显示/index.html","hash":"3e28d5f0b81e5a35f6ed76349b74afb1362cd05a","modified":1614006627032},{"_id":"public/2019/02/25/iOS学习笔记/iOS系统学习/iOS之编程语言/Swift 构造器/index.html","hash":"d22a1f05d7d946864ca715e38e840432b3a90cfb","modified":1614006627032},{"_id":"public/2018/03/09/iOS学习笔记/iOS系统学习/iOS之开发规范化/index.html","hash":"033fa0bc891f735fec1cad6bd45eb38df5f155b1","modified":1614006627032},{"_id":"public/index.html","hash":"1d0620eaa1bb0d8a595402b07c8e5f2e0b7eebbc","modified":1614006627032},{"_id":"public/page/2/index.html","hash":"1d0620eaa1bb0d8a595402b07c8e5f2e0b7eebbc","modified":1614006627032},{"_id":"public/page/3/index.html","hash":"1d0620eaa1bb0d8a595402b07c8e5f2e0b7eebbc","modified":1614006627032},{"_id":"public/page/4/index.html","hash":"1d0620eaa1bb0d8a595402b07c8e5f2e0b7eebbc","modified":1614006627032},{"_id":"public/page/5/index.html","hash":"1d0620eaa1bb0d8a595402b07c8e5f2e0b7eebbc","modified":1614006627032},{"_id":"public/page/6/index.html","hash":"1d0620eaa1bb0d8a595402b07c8e5f2e0b7eebbc","modified":1614006627032},{"_id":"public/page/7/index.html","hash":"1d0620eaa1bb0d8a595402b07c8e5f2e0b7eebbc","modified":1614006627032},{"_id":"public/page/8/index.html","hash":"1d0620eaa1bb0d8a595402b07c8e5f2e0b7eebbc","modified":1614006627032},{"_id":"public/page/9/index.html","hash":"1d0620eaa1bb0d8a595402b07c8e5f2e0b7eebbc","modified":1614006627032},{"_id":"public/2019/08/14/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/boost-b2/index.html","hash":"b0665b3916d0d920e6c463c89aeddf7621dc0298","modified":1614006627032},{"_id":"public/2019/08/13/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/g++/index.html","hash":"f6262c5b9019e67377f5fc6f8230578bb29b0fa0","modified":1614006627032},{"_id":"public/2019/07/30/iOS学习笔记/Flutters/Flutter/index.html","hash":"212c8c3c34308b070de4b795fd9ca2aa0e618a1a","modified":1614006627032},{"_id":"public/2019/07/27/iOS学习笔记/iOS系统学习/大前端/Flutter/index.html","hash":"198cfef08863ea91326a25daf0b76381d9493fd4","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS排版之WebKit/index.html","hash":"3174ef9dccffae8b69cbf1c830ba874d495c688b","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之数据库及其管理/index.html","hash":"e7598e7ccf30aea749f8d967d42f9c858204141d","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之异常处理/index.html","hash":"6624b9347ce28a27446b4d2ccd8ad1ac7f1c639a","modified":1614006627032},{"_id":"public/2019/03/24/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之协议/index.html","hash":"ba9f180777cfd5514687b717d7e3d895b51157de","modified":1614006627032},{"_id":"public/archives/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/page/2/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/page/3/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/page/4/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/page/5/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/page/6/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/page/7/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/page/8/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/page/9/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2018/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2018/03/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/page/2/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/page/3/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/page/4/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/page/5/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/page/6/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/page/7/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/page/8/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/page/9/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/02/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/03/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/03/page/2/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/03/page/3/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/03/page/4/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/03/page/5/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/03/page/6/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/04/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/03/page/7/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/05/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/06/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/07/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/archives/2019/08/index.html","hash":"0e0d5ab17ddf9b2db15ee4c2e952672e4b579330","modified":1614007009559},{"_id":"public/favicon.png","hash":"1214709f0131cc39ee30e0b44ad54fc0a74d3658","modified":1614006627032},{"_id":"public/js/book-menu.js","hash":"deebd62833f484c84e08357291ccc797c7544eb6","modified":1614006627032},{"_id":"public/js/book-post.js","hash":"d239e79163ceb5a37c9274c0c83010eea80554d8","modified":1614006627032},{"_id":"public/js/book-toc.js","hash":"fcbf2a88d9bab50dbd1337150a5909e8b9eecd13","modified":1614006627032},{"_id":"public/js/book.js","hash":"c150427c7397aea35ad83624f8db8f4b19846bb6","modified":1614006627032},{"_id":"public/css/book.css","hash":"830b2744ef880e196df56d0a530538e61521d30a","modified":1614006627032},{"_id":"source/_posts/iOS 查漏补缺.md","hash":"bafbc59b5e2a22f2ffd5c1f94e7039ffca469fa8","modified":1611839894961},{"_id":"public/2019/07/18/iOS 查漏补缺/index.html","hash":"c375c9f4ba31e093d41e9c0b4ac603773ca99127","modified":1614007009559}],"Category":[],"Data":[],"Page":[{"_content":"* [Home](/hexo-theme-book-demo)\n* [Changelog](/hexo-theme-book-demo/changelog)\n\n# Test\n\n## hexo-unit-test\n\n* [Categories](/hexo-theme-book-demo/test/hexo-unit-test/categories)\n* [Elements](/hexo-theme-book-demo/test/hexo-unit-test/elements)\n* [Excerpts](/hexo-theme-book-demo/test/hexo-unit-test/excerpts)\n* [Gallery Post](/hexo-theme-book-demo/test/hexo-unit-test/gallery-post)\n* [Hello World](/hexo-theme-book-demo/test/hexo-unit-test/hello-world)\n* [Images](/hexo-theme-book-demo/test/hexo-unit-test/images)\n* [Untitled](/hexo-theme-book-demo/test/hexo-unit-test/link-post-without-title)\n* [Link Post](/hexo-theme-book-demo/test/hexo-unit-test/link-post)\n* [Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam justo turpis, tincidunt ac convallis id.](/hexo-theme-book-demo/test/hexo-unit-test/long-title)\n* [Untitled](/hexo-theme-book-demo/test/hexo-unit-test/no-title)\n* [Tag Plugins](/hexo-theme-book-demo/test/hexo-unit-test/tag-plugins)\n* [Tags](/hexo-theme-book-demo/test/hexo-unit-test/tags)\n* [Videos](/hexo-theme-book-demo/test/hexo-unit-test/videos)\n* [中文測試](/hexo-theme-book-demo/test/hexo-unit-test/中文測試)\n* [日本語テスト](/hexo-theme-book-demo/test/hexo-unit-test/日本語テスト)\n\n## bugfix\n\n* [list test](/hexo-theme-book-demo/test/bugfix/list-test)\n* [blockquote position](/hexo-theme-book-demo/test/bugfix/blockquote-position)\n* [checkbox list](/hexo-theme-book-demo/test/bugfix/checkbox-list)\n\n## lots of post in submenu \n\n* .\n* Fix bug:\n* .\n* The default setting of spectre.css's accordion \n* is `max-height: 50rem`\n* .\n* Override the value to `max-height: unset` in this theme\n* .\n* Fix in [ce5be1d](https://github.com/kaiiiz/hexo-theme-book/commit/ce5be1d7500722b8bcdc367fc79186c0cfe8ac56)\n* .\n* Test 11\n* Test 12\n* Test 13\n* Test 14\n* Test 15\n* Test 16\n* Test 17\n* Test 18\n* Test 19\n* Test 20\n* Test 21\n* Test 22\n* Test 23\n* Test 24\n* Test 25\n* Test 26\n* Test 27\n* Test 28\n* Test 29\n* Test 30\n* Test 31\n* Test 32\n* Test 33\n* Test 34\n* Test 35\n\n# Demo\n\n* [Menu Realtime Demo](/hexo-theme-book-demo/demo/menu-realtime)\n\n## Render\n\n* [markdown-it demo](/hexo-theme-book-demo/demo/render/markdown-it-demo)\n* [katex demo](/hexo-theme-book-demo/demo/render/katex-demo)\n* [footnotes demo](/hexo-theme-book-demo/demo/render/footnotes-demo)\n* [markdown-container](/hexo-theme-book-demo/demo/render/md-container)\n\n## Lorem Ipsum\n\n* [English](/hexo-theme-book-demo/demo/lorem-ipsum/en-demo)\n* [Japanese](/hexo-theme-book-demo/demo/lorem-ipsum/jp-demo)\n* [Korean](/hexo-theme-book-demo/demo/lorem-ipsum/kr-demo)\n* [Traditional Chinese](/hexo-theme-book-demo/demo/lorem-ipsum/tc-demo)\n* [Simplified Chinese](/hexo-theme-book-demo/demo/lorem-ipsum/sc-demo)\n","source":"menu.md","raw":"* [Home](/hexo-theme-book-demo)\n* [Changelog](/hexo-theme-book-demo/changelog)\n\n# Test\n\n## hexo-unit-test\n\n* [Categories](/hexo-theme-book-demo/test/hexo-unit-test/categories)\n* [Elements](/hexo-theme-book-demo/test/hexo-unit-test/elements)\n* [Excerpts](/hexo-theme-book-demo/test/hexo-unit-test/excerpts)\n* [Gallery Post](/hexo-theme-book-demo/test/hexo-unit-test/gallery-post)\n* [Hello World](/hexo-theme-book-demo/test/hexo-unit-test/hello-world)\n* [Images](/hexo-theme-book-demo/test/hexo-unit-test/images)\n* [Untitled](/hexo-theme-book-demo/test/hexo-unit-test/link-post-without-title)\n* [Link Post](/hexo-theme-book-demo/test/hexo-unit-test/link-post)\n* [Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam justo turpis, tincidunt ac convallis id.](/hexo-theme-book-demo/test/hexo-unit-test/long-title)\n* [Untitled](/hexo-theme-book-demo/test/hexo-unit-test/no-title)\n* [Tag Plugins](/hexo-theme-book-demo/test/hexo-unit-test/tag-plugins)\n* [Tags](/hexo-theme-book-demo/test/hexo-unit-test/tags)\n* [Videos](/hexo-theme-book-demo/test/hexo-unit-test/videos)\n* [中文測試](/hexo-theme-book-demo/test/hexo-unit-test/中文測試)\n* [日本語テスト](/hexo-theme-book-demo/test/hexo-unit-test/日本語テスト)\n\n## bugfix\n\n* [list test](/hexo-theme-book-demo/test/bugfix/list-test)\n* [blockquote position](/hexo-theme-book-demo/test/bugfix/blockquote-position)\n* [checkbox list](/hexo-theme-book-demo/test/bugfix/checkbox-list)\n\n## lots of post in submenu \n\n* .\n* Fix bug:\n* .\n* The default setting of spectre.css's accordion \n* is `max-height: 50rem`\n* .\n* Override the value to `max-height: unset` in this theme\n* .\n* Fix in [ce5be1d](https://github.com/kaiiiz/hexo-theme-book/commit/ce5be1d7500722b8bcdc367fc79186c0cfe8ac56)\n* .\n* Test 11\n* Test 12\n* Test 13\n* Test 14\n* Test 15\n* Test 16\n* Test 17\n* Test 18\n* Test 19\n* Test 20\n* Test 21\n* Test 22\n* Test 23\n* Test 24\n* Test 25\n* Test 26\n* Test 27\n* Test 28\n* Test 29\n* Test 30\n* Test 31\n* Test 32\n* Test 33\n* Test 34\n* Test 35\n\n# Demo\n\n* [Menu Realtime Demo](/hexo-theme-book-demo/demo/menu-realtime)\n\n## Render\n\n* [markdown-it demo](/hexo-theme-book-demo/demo/render/markdown-it-demo)\n* [katex demo](/hexo-theme-book-demo/demo/render/katex-demo)\n* [footnotes demo](/hexo-theme-book-demo/demo/render/footnotes-demo)\n* [markdown-container](/hexo-theme-book-demo/demo/render/md-container)\n\n## Lorem Ipsum\n\n* [English](/hexo-theme-book-demo/demo/lorem-ipsum/en-demo)\n* [Japanese](/hexo-theme-book-demo/demo/lorem-ipsum/jp-demo)\n* [Korean](/hexo-theme-book-demo/demo/lorem-ipsum/kr-demo)\n* [Traditional Chinese](/hexo-theme-book-demo/demo/lorem-ipsum/tc-demo)\n* [Simplified Chinese](/hexo-theme-book-demo/demo/lorem-ipsum/sc-demo)\n","date":"2021-02-22T15:38:38.652Z","updated":"2021-02-22T15:25:25.385Z","path":"menu.html","title":"","comments":1,"layout":"page","_id":"cklgqvpem0000gh7ua4g6aw17","content":"<ul>\n<li><a href=\"/hexo-theme-book-demo\">Home</a></li>\n<li><a href=\"/hexo-theme-book-demo/changelog\">Changelog</a></li>\n</ul>\n<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1><h2 id=\"hexo-unit-test\"><a href=\"#hexo-unit-test\" class=\"headerlink\" title=\"hexo-unit-test\"></a>hexo-unit-test</h2><ul>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/categories\">Categories</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/elements\">Elements</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/excerpts\">Excerpts</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/gallery-post\">Gallery Post</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/hello-world\">Hello World</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/images\">Images</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/link-post-without-title\">Untitled</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/link-post\">Link Post</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/long-title\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam justo turpis, tincidunt ac convallis id.</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/no-title\">Untitled</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/tag-plugins\">Tag Plugins</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/tags\">Tags</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/videos\">Videos</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/%E4%B8%AD%E6%96%87%E6%B8%AC%E8%A9%A6\">中文測試</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%86%E3%82%B9%E3%83%88\">日本語テスト</a></li>\n</ul>\n<h2 id=\"bugfix\"><a href=\"#bugfix\" class=\"headerlink\" title=\"bugfix\"></a>bugfix</h2><ul>\n<li><a href=\"/hexo-theme-book-demo/test/bugfix/list-test\">list test</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/bugfix/blockquote-position\">blockquote position</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/bugfix/checkbox-list\">checkbox list</a></li>\n</ul>\n<h2 id=\"lots-of-post-in-submenu\"><a href=\"#lots-of-post-in-submenu\" class=\"headerlink\" title=\"lots of post in submenu\"></a>lots of post in submenu</h2><ul>\n<li>.</li>\n<li>Fix bug:</li>\n<li>.</li>\n<li>The default setting of spectre.css’s accordion </li>\n<li>is <code>max-height: 50rem</code></li>\n<li>.</li>\n<li>Override the value to <code>max-height: unset</code> in this theme</li>\n<li>.</li>\n<li>Fix in <a href=\"https://github.com/kaiiiz/hexo-theme-book/commit/ce5be1d7500722b8bcdc367fc79186c0cfe8ac56\">ce5be1d</a></li>\n<li>.</li>\n<li>Test 11</li>\n<li>Test 12</li>\n<li>Test 13</li>\n<li>Test 14</li>\n<li>Test 15</li>\n<li>Test 16</li>\n<li>Test 17</li>\n<li>Test 18</li>\n<li>Test 19</li>\n<li>Test 20</li>\n<li>Test 21</li>\n<li>Test 22</li>\n<li>Test 23</li>\n<li>Test 24</li>\n<li>Test 25</li>\n<li>Test 26</li>\n<li>Test 27</li>\n<li>Test 28</li>\n<li>Test 29</li>\n<li>Test 30</li>\n<li>Test 31</li>\n<li>Test 32</li>\n<li>Test 33</li>\n<li>Test 34</li>\n<li>Test 35</li>\n</ul>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><ul>\n<li><a href=\"/hexo-theme-book-demo/demo/menu-realtime\">Menu Realtime Demo</a></li>\n</ul>\n<h2 id=\"Render\"><a href=\"#Render\" class=\"headerlink\" title=\"Render\"></a>Render</h2><ul>\n<li><a href=\"/hexo-theme-book-demo/demo/render/markdown-it-demo\">markdown-it demo</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/render/katex-demo\">katex demo</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/render/footnotes-demo\">footnotes demo</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/render/md-container\">markdown-container</a></li>\n</ul>\n<h2 id=\"Lorem-Ipsum\"><a href=\"#Lorem-Ipsum\" class=\"headerlink\" title=\"Lorem Ipsum\"></a>Lorem Ipsum</h2><ul>\n<li><a href=\"/hexo-theme-book-demo/demo/lorem-ipsum/en-demo\">English</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/lorem-ipsum/jp-demo\">Japanese</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/lorem-ipsum/kr-demo\">Korean</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/lorem-ipsum/tc-demo\">Traditional Chinese</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/lorem-ipsum/sc-demo\">Simplified Chinese</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/hexo-theme-book-demo\">Home</a></li>\n<li><a href=\"/hexo-theme-book-demo/changelog\">Changelog</a></li>\n</ul>\n<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test\"></a>Test</h1><h2 id=\"hexo-unit-test\"><a href=\"#hexo-unit-test\" class=\"headerlink\" title=\"hexo-unit-test\"></a>hexo-unit-test</h2><ul>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/categories\">Categories</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/elements\">Elements</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/excerpts\">Excerpts</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/gallery-post\">Gallery Post</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/hello-world\">Hello World</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/images\">Images</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/link-post-without-title\">Untitled</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/link-post\">Link Post</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/long-title\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam justo turpis, tincidunt ac convallis id.</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/no-title\">Untitled</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/tag-plugins\">Tag Plugins</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/tags\">Tags</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/videos\">Videos</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/%E4%B8%AD%E6%96%87%E6%B8%AC%E8%A9%A6\">中文測試</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/hexo-unit-test/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%86%E3%82%B9%E3%83%88\">日本語テスト</a></li>\n</ul>\n<h2 id=\"bugfix\"><a href=\"#bugfix\" class=\"headerlink\" title=\"bugfix\"></a>bugfix</h2><ul>\n<li><a href=\"/hexo-theme-book-demo/test/bugfix/list-test\">list test</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/bugfix/blockquote-position\">blockquote position</a></li>\n<li><a href=\"/hexo-theme-book-demo/test/bugfix/checkbox-list\">checkbox list</a></li>\n</ul>\n<h2 id=\"lots-of-post-in-submenu\"><a href=\"#lots-of-post-in-submenu\" class=\"headerlink\" title=\"lots of post in submenu\"></a>lots of post in submenu</h2><ul>\n<li>.</li>\n<li>Fix bug:</li>\n<li>.</li>\n<li>The default setting of spectre.css’s accordion </li>\n<li>is <code>max-height: 50rem</code></li>\n<li>.</li>\n<li>Override the value to <code>max-height: unset</code> in this theme</li>\n<li>.</li>\n<li>Fix in <a href=\"https://github.com/kaiiiz/hexo-theme-book/commit/ce5be1d7500722b8bcdc367fc79186c0cfe8ac56\">ce5be1d</a></li>\n<li>.</li>\n<li>Test 11</li>\n<li>Test 12</li>\n<li>Test 13</li>\n<li>Test 14</li>\n<li>Test 15</li>\n<li>Test 16</li>\n<li>Test 17</li>\n<li>Test 18</li>\n<li>Test 19</li>\n<li>Test 20</li>\n<li>Test 21</li>\n<li>Test 22</li>\n<li>Test 23</li>\n<li>Test 24</li>\n<li>Test 25</li>\n<li>Test 26</li>\n<li>Test 27</li>\n<li>Test 28</li>\n<li>Test 29</li>\n<li>Test 30</li>\n<li>Test 31</li>\n<li>Test 32</li>\n<li>Test 33</li>\n<li>Test 34</li>\n<li>Test 35</li>\n</ul>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><ul>\n<li><a href=\"/hexo-theme-book-demo/demo/menu-realtime\">Menu Realtime Demo</a></li>\n</ul>\n<h2 id=\"Render\"><a href=\"#Render\" class=\"headerlink\" title=\"Render\"></a>Render</h2><ul>\n<li><a href=\"/hexo-theme-book-demo/demo/render/markdown-it-demo\">markdown-it demo</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/render/katex-demo\">katex demo</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/render/footnotes-demo\">footnotes demo</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/render/md-container\">markdown-container</a></li>\n</ul>\n<h2 id=\"Lorem-Ipsum\"><a href=\"#Lorem-Ipsum\" class=\"headerlink\" title=\"Lorem Ipsum\"></a>Lorem Ipsum</h2><ul>\n<li><a href=\"/hexo-theme-book-demo/demo/lorem-ipsum/en-demo\">English</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/lorem-ipsum/jp-demo\">Japanese</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/lorem-ipsum/kr-demo\">Korean</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/lorem-ipsum/tc-demo\">Traditional Chinese</a></li>\n<li><a href=\"/hexo-theme-book-demo/demo/lorem-ipsum/sc-demo\">Simplified Chinese</a></li>\n</ul>\n"}],"Post":[{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之Block.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之Block","published":1,"date":"2019-03-24T12:44:21.000Z","updated":"2019-03-24T12:44:21.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvghq00008n7u93khgqp9","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之GCD.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之GCD","published":1,"date":"2019-03-24T12:44:00.000Z","updated":"2019-03-24T12:44:00.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvghw00018n7u06yhazcl","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之Xcode.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之Xcode","published":1,"date":"2019-03-24T12:57:38.000Z","updated":"2019-03-24T12:57:38.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvghy00028n7uhvrs7ks1","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之事件传递.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之事件传递","published":1,"date":"2019-03-24T12:56:51.000Z","updated":"2019-03-24T12:56:51.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvghz00038n7ug30nfn8s","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之iOS-SDK.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之iOS-SDK","published":1,"date":"2019-03-24T12:46:58.000Z","updated":"2019-03-24T12:46:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgi000048n7u1dzv76ob","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之代码管理.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之代码管理","published":1,"date":"2019-03-24T12:57:08.000Z","updated":"2019-03-24T12:57:08.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgi000058n7uhhkc7cgw","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之代码重构.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之代码重构","published":1,"date":"2019-03-24T12:45:35.000Z","updated":"2019-03-24T12:45:35.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgi100068n7u45c4ekel","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之单元测试.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之单元测试","published":1,"date":"2019-03-24T12:57:54.000Z","updated":"2019-03-24T12:57:54.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgi200078n7ufb1a6qj6","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之多线程.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之多线程","published":1,"date":"2019-03-24T12:43:35.000Z","updated":"2019-03-24T12:43:35.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgi300088n7u90zx0z3e","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之生态体系及结构.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之生态体系及结构","published":1,"date":"2019-03-24T13:09:38.000Z","updated":"2019-03-24T13:09:38.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgi400098n7u6a6r2p1f","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之设计模式.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之设计模式","published":1,"date":"2019-03-24T12:44:45.000Z","updated":"2019-03-24T12:44:45.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgi4000a8n7u1ckiafmv","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之多媒体.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之多媒体","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgi6000b8n7u9fqidh2z","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之视频.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之视频","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgi7000c8n7u4q1127qq","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之音频.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之音频","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgi8000d8n7ue74mgtys","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之安全.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之安全","published":1,"date":"2019-03-24T12:44:45.000Z","updated":"2019-03-24T12:44:45.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgi8000e8n7u8vljd7by","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之持久化.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之持久化","published":1,"date":"2019-03-24T13:01:23.000Z","updated":"2019-03-24T13:01:23.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgi9000f8n7udoap8x6y","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/Charles.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之开发工具/Charles","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgib000g8n7uatab9mva","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/OmniGraffle.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之开发工具/OmniGraffle","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgic000h8n7u62728fsk","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之操作系统/Unix.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之操作系统/Unix","published":1,"date":"2019-03-24T12:44:45.000Z","updated":"2019-03-24T12:44:45.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgid000i8n7uceiwfc4i","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之操作系统/iOS之RunLoop.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之操作系统/iOS之RunLoop","published":1,"date":"2019-03-24T12:44:45.000Z","updated":"2019-03-24T12:44:45.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgid000j8n7uerede75s","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之操作系统/iOS之运行时.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之操作系统/iOS之运行时","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgie000k8n7uauoe8svp","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之操作系统/Linux.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之操作系统/Linux","published":1,"date":"2019-03-24T12:44:45.000Z","updated":"2019-03-24T12:44:45.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgif000l8n7u21v415le","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之游戏/iOS之游戏.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之游戏/iOS之游戏","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgif000m8n7ubuid4p0m","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之游戏/iOS游戏之引擎.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之游戏/iOS游戏之引擎","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgig000n8n7ue8ykbgc9","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之游戏/iOS游戏之Lua.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之游戏/iOS游戏之Lua","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgig000o8n7u8tu0cmle","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS之交互体验.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之界面显示/iOS之交互体验","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgih000p8n7ufydd3m45","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS之动画.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之界面显示/iOS之动画","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgii000q8n7ueblxg88o","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/Jira.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之项目管理/Jira","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgii000r8n7u2vkc095a","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/Tapd.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之项目管理/Tapd","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgij000s8n7u52uwb3uo","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/禅道.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之项目管理/禅道","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgij000t8n7u4xl5d86k","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/Jenkins.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之项目管理/Jenkins","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgim000u8n7uaadu18d9","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/AppleScript.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/AppleScript","published":1,"date":"2019-03-24T12:44:45.000Z","updated":"2019-03-24T12:44:45.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgio000v8n7u1pib6cl3","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/Java.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/Java","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgip000w8n7ufmhfe116","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/MySQL.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/MySQL","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgip000x8n7u35udbzbk","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/PHP.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/PHP","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgiq000y8n7uhvq6gdwa","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/Pyhon.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/Pyhon","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgir000z8n7u94q11sq8","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之Objective-C.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之Objective-C","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgis00108n7u4a6la2pg","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之Swift.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之Swift","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgis00118n7u8mt32zli","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/iOS编程语言之C++:C.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/iOS编程语言之C++:C","published":1,"date":"2019-03-24T13:10:48.000Z","updated":"2019-03-24T13:10:48.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgit00128n7ub3n981lg","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/Flutter.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/Flutter","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgiu00138n7uhyvm983x","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/JavaScript.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/JavaScript","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgiu00148n7uhj0h2hzq","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/React-Native.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/React-Native","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgiv00158n7u315ucf6n","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/Vue.md","raw":"","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/iOS编程语言之大前端/Vue","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T12:56:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgiv00168n7u74r10fa6","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"# 学习计划\n\n## 一、学习\n\n1、大前端\n\n    React-Native\n    小程序\n    flutter\n\n2、性能优化\n\n    2.1 界面性能，GPU——YYKit 介绍的框架\n    2.2 CPU性能，Allen介绍的多态及编译原理\n\n3、组件化（模块化）\n\n        3.1 URL-Block\n        \n        3.2 Protocol-Class\n        \n        3.3 中间件（casa）\n        \n        3.4 微服务\n\n4、设计模式（精通）\n\n    4.1 代码重构 （从哪些方面重构，依据什么）\n    \n    4.2 程序原则：\n        何时何地，由谁（类？？对象）做何事\n\n5、导航栏的梗，转场动画\n\n6、 ~~layoutSubView，sizeThatFit 等~~\n\n7、读第三方库\n\n    7.1 使用原则——先封装\n    7.2 项目中使用的第三方库\n\n8、swift 语言精华\n\n    8.1 init 链\n    8.2 高阶函数\n    8.3 泛型\n    8.4 协议\n    8.5 拓展\n    8.6 swift 语言开源库及计划\n\n9、macOS、iOS 系统\n\n    9.1 越狱iOS学习\n    9.2 反编译\n    9.3 代码混淆（iOS）\n\n10、富文本\n\n    10.1 CoreText\n    10.2 TextKit:NSAttributeString等\n    10.3 WebKit\n\n11、电子签名\n\n12、HTTP(S)、TCP、UDP(kcp)等 协议\n\n13、UPnP\n\n14、Frp\n\n15、WoL(远程唤醒)\n\n16、~~（小明）域名认证~~\n\n17、~~香港服务器~~\n\n18、多线程\n\n* [Threaded Programming](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i)\n\n* [Run Loops](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16)\n\n19、汇编\n\n20、C/C++\n\n    20.1 boost\n    20.2 Qt\n    20.3 Xcode\n    20.4 Visual Studio\n\n21、音视频播放器源码\n\n    21.1 FFmpeg\n    21.2 IJKPlayer\n    21.3 AliPlayer\n    21.4 封装播放器\n        原生的【AVFoundation】\n        第三方 源码解读\n    21.5 音频\n        语音识别——Sphinx\n        性能优化——编解码、压缩\n\n* [语音识别--openears](https://www.politepix.com/openears/tutorial/)\n\n22、OpenGL、OpenCV。。。\n\n23、Linux 使用及系统原理学习\n\n24、深度学习——TensorFlow\n\n25、数据结构及算法（安全）\n\n26、爬虫（Python）\n\n27、Go\n\n28、shell编程\n\n29、CI自动化集成\n\n    Jenkins\n    XcodeSever\n\n30、架构师资格证【考】\n\n31、英语——托福证【考】\n\n32、开发信息系统化整理——按专题\n\n    32.1 iOS\n    32.2 web\n    32.3 Java——服务器、Android......一本书\n    32.4 Chrome 书签整理\n    32.5 百度网盘整理\n\n33、适配方案——iOS、web\n\n34、微信阅读\n\n    34.1 剑桥中国史\n    \n    34.2 摩根财团\n\n35、思维管理——系统化思维\n\n    35.1 产品思维\n    35.2 Boss思维\n    35.3 网络思维\n    35.n 思维[网络]联系所有物质\n\n36、人脉资源管理\n\n    36.1 人情\n    36.2 朋友\n    36.3 敌人\n    36.4 其他\n        熟人、陌生人、偶像、领导、同事、下属。。。。。。\n\n37、生活\n\n    37.1 规律\n    37.2 原则\n    37.3 效率\n    37.4 品质\n    37.5 追求\n\n38、简历特点\n\n    1、主导过用户量数十万级别《明星空间》项目，掌握项目架构，直播前沿技 术，精通客户端程序设计\n    2、熟悉iOS内核运行机制\n    3、熟悉OpenGL ES、FFmpeg、Cocos2D-x\n    4、熟练使用Xcode 上的性能工具Instrument以及代码管理工具Git，SVN等 \n    5、熟悉Socket 与 Web socket，熟悉UDP、TCP、IP、rtmp、HTTPS、HTTP、 xmpp协议等\n    6、有带领团队和项目管理经验，也有项目架构设计和重构经验 \n    7、熟悉编程语言:c/c++，objective-C，swift，PHP，Python，Java，H5 \n    8、熟悉单元测试及代码性能优化 \n    9、熟悉Java\n\n## 二、健身\n\n## 三、知识体系\n\n1、操作系统原理\n\n2、程序设计——语言\n\n3、数据结构与算法\n\n4、网络及协议\n\n* [Alamofire/Alamofire](https://github.com/Alamofire/Alamofire)\n* [AlamofireObjectMapper](https://github.com/tristanhimmelman/AlamofireObjectMapper)\n\n5、硬件的使用及结构、原理\n\n    5.1 CPU\n    5.2 GPU\n  \n6、服务化\n\n    Frp\n    WordPress\n    VPN\n    Gitlab\n    Web\n    ...\n\n7、信息传输原理\n\n## 四、目标\n\n1、做事\n\n2、赚钱\n\n3、学习\n\n4、不能虚度时光\n\n## 杂项\n\n1、动画库：\n\n* [facebook/pop](https://github.com/facebook/pop)\n* [airbnb/lottie-ios](https://github.com/airbnb/lottie-ios)\n\n2、[iOS 官方文档：](https://developer.apple.com/documentation)\n","source":"_drafts/学习计划.md","raw":"# 学习计划\n\n## 一、学习\n\n1、大前端\n\n    React-Native\n    小程序\n    flutter\n\n2、性能优化\n\n    2.1 界面性能，GPU——YYKit 介绍的框架\n    2.2 CPU性能，Allen介绍的多态及编译原理\n\n3、组件化（模块化）\n\n        3.1 URL-Block\n        \n        3.2 Protocol-Class\n        \n        3.3 中间件（casa）\n        \n        3.4 微服务\n\n4、设计模式（精通）\n\n    4.1 代码重构 （从哪些方面重构，依据什么）\n    \n    4.2 程序原则：\n        何时何地，由谁（类？？对象）做何事\n\n5、导航栏的梗，转场动画\n\n6、 ~~layoutSubView，sizeThatFit 等~~\n\n7、读第三方库\n\n    7.1 使用原则——先封装\n    7.2 项目中使用的第三方库\n\n8、swift 语言精华\n\n    8.1 init 链\n    8.2 高阶函数\n    8.3 泛型\n    8.4 协议\n    8.5 拓展\n    8.6 swift 语言开源库及计划\n\n9、macOS、iOS 系统\n\n    9.1 越狱iOS学习\n    9.2 反编译\n    9.3 代码混淆（iOS）\n\n10、富文本\n\n    10.1 CoreText\n    10.2 TextKit:NSAttributeString等\n    10.3 WebKit\n\n11、电子签名\n\n12、HTTP(S)、TCP、UDP(kcp)等 协议\n\n13、UPnP\n\n14、Frp\n\n15、WoL(远程唤醒)\n\n16、~~（小明）域名认证~~\n\n17、~~香港服务器~~\n\n18、多线程\n\n* [Threaded Programming](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i)\n\n* [Run Loops](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16)\n\n19、汇编\n\n20、C/C++\n\n    20.1 boost\n    20.2 Qt\n    20.3 Xcode\n    20.4 Visual Studio\n\n21、音视频播放器源码\n\n    21.1 FFmpeg\n    21.2 IJKPlayer\n    21.3 AliPlayer\n    21.4 封装播放器\n        原生的【AVFoundation】\n        第三方 源码解读\n    21.5 音频\n        语音识别——Sphinx\n        性能优化——编解码、压缩\n\n* [语音识别--openears](https://www.politepix.com/openears/tutorial/)\n\n22、OpenGL、OpenCV。。。\n\n23、Linux 使用及系统原理学习\n\n24、深度学习——TensorFlow\n\n25、数据结构及算法（安全）\n\n26、爬虫（Python）\n\n27、Go\n\n28、shell编程\n\n29、CI自动化集成\n\n    Jenkins\n    XcodeSever\n\n30、架构师资格证【考】\n\n31、英语——托福证【考】\n\n32、开发信息系统化整理——按专题\n\n    32.1 iOS\n    32.2 web\n    32.3 Java——服务器、Android......一本书\n    32.4 Chrome 书签整理\n    32.5 百度网盘整理\n\n33、适配方案——iOS、web\n\n34、微信阅读\n\n    34.1 剑桥中国史\n    \n    34.2 摩根财团\n\n35、思维管理——系统化思维\n\n    35.1 产品思维\n    35.2 Boss思维\n    35.3 网络思维\n    35.n 思维[网络]联系所有物质\n\n36、人脉资源管理\n\n    36.1 人情\n    36.2 朋友\n    36.3 敌人\n    36.4 其他\n        熟人、陌生人、偶像、领导、同事、下属。。。。。。\n\n37、生活\n\n    37.1 规律\n    37.2 原则\n    37.3 效率\n    37.4 品质\n    37.5 追求\n\n38、简历特点\n\n    1、主导过用户量数十万级别《明星空间》项目，掌握项目架构，直播前沿技 术，精通客户端程序设计\n    2、熟悉iOS内核运行机制\n    3、熟悉OpenGL ES、FFmpeg、Cocos2D-x\n    4、熟练使用Xcode 上的性能工具Instrument以及代码管理工具Git，SVN等 \n    5、熟悉Socket 与 Web socket，熟悉UDP、TCP、IP、rtmp、HTTPS、HTTP、 xmpp协议等\n    6、有带领团队和项目管理经验，也有项目架构设计和重构经验 \n    7、熟悉编程语言:c/c++，objective-C，swift，PHP，Python，Java，H5 \n    8、熟悉单元测试及代码性能优化 \n    9、熟悉Java\n\n## 二、健身\n\n## 三、知识体系\n\n1、操作系统原理\n\n2、程序设计——语言\n\n3、数据结构与算法\n\n4、网络及协议\n\n* [Alamofire/Alamofire](https://github.com/Alamofire/Alamofire)\n* [AlamofireObjectMapper](https://github.com/tristanhimmelman/AlamofireObjectMapper)\n\n5、硬件的使用及结构、原理\n\n    5.1 CPU\n    5.2 GPU\n  \n6、服务化\n\n    Frp\n    WordPress\n    VPN\n    Gitlab\n    Web\n    ...\n\n7、信息传输原理\n\n## 四、目标\n\n1、做事\n\n2、赚钱\n\n3、学习\n\n4、不能虚度时光\n\n## 杂项\n\n1、动画库：\n\n* [facebook/pop](https://github.com/facebook/pop)\n* [airbnb/lottie-ios](https://github.com/airbnb/lottie-ios)\n\n2、[iOS 官方文档：](https://developer.apple.com/documentation)\n","slug":"学习计划","published":0,"date":"2019-02-28T02:11:35.000Z","updated":"2021-01-28T13:08:34.613Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj200178n7u64b2acm8","content":"<h1 id=\"学习计划\"><a href=\"#学习计划\" class=\"headerlink\" title=\"学习计划\"></a>学习计划</h1><h2 id=\"一、学习\"><a href=\"#一、学习\" class=\"headerlink\" title=\"一、学习\"></a>一、学习</h2><p>1、大前端</p>\n<pre><code>React-Native\n小程序\nflutter\n</code></pre>\n<p>2、性能优化</p>\n<pre><code>2.1 界面性能，GPU——YYKit 介绍的框架\n2.2 CPU性能，Allen介绍的多态及编译原理\n</code></pre>\n<p>3、组件化（模块化）</p>\n<pre><code>    3.1 URL-Block\n    \n    3.2 Protocol-Class\n    \n    3.3 中间件（casa）\n    \n    3.4 微服务\n</code></pre>\n<p>4、设计模式（精通）</p>\n<pre><code>4.1 代码重构 （从哪些方面重构，依据什么）\n\n4.2 程序原则：\n    何时何地，由谁（类？？对象）做何事\n</code></pre>\n<p>5、导航栏的梗，转场动画</p>\n<p>6、 <del>layoutSubView，sizeThatFit 等</del></p>\n<p>7、读第三方库</p>\n<pre><code>7.1 使用原则——先封装\n7.2 项目中使用的第三方库\n</code></pre>\n<p>8、swift 语言精华</p>\n<pre><code>8.1 init 链\n8.2 高阶函数\n8.3 泛型\n8.4 协议\n8.5 拓展\n8.6 swift 语言开源库及计划\n</code></pre>\n<p>9、macOS、iOS 系统</p>\n<pre><code>9.1 越狱iOS学习\n9.2 反编译\n9.3 代码混淆（iOS）\n</code></pre>\n<p>10、富文本</p>\n<pre><code>10.1 CoreText\n10.2 TextKit:NSAttributeString等\n10.3 WebKit\n</code></pre>\n<p>11、电子签名</p>\n<p>12、HTTP(S)、TCP、UDP(kcp)等 协议</p>\n<p>13、UPnP</p>\n<p>14、Frp</p>\n<p>15、WoL(远程唤醒)</p>\n<p>16、<del>（小明）域名认证</del></p>\n<p>17、<del>香港服务器</del></p>\n<p>18、多线程</p>\n<ul>\n<li><p><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i\">Threaded Programming</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16\">Run Loops</a></p>\n</li>\n</ul>\n<p>19、汇编</p>\n<p>20、C/C++</p>\n<pre><code>20.1 boost\n20.2 Qt\n20.3 Xcode\n20.4 Visual Studio\n</code></pre>\n<p>21、音视频播放器源码</p>\n<pre><code>21.1 FFmpeg\n21.2 IJKPlayer\n21.3 AliPlayer\n21.4 封装播放器\n    原生的【AVFoundation】\n    第三方 源码解读\n21.5 音频\n    语音识别——Sphinx\n    性能优化——编解码、压缩\n</code></pre>\n<ul>\n<li><a href=\"https://www.politepix.com/openears/tutorial/\">语音识别–openears</a></li>\n</ul>\n<p>22、OpenGL、OpenCV。。。</p>\n<p>23、Linux 使用及系统原理学习</p>\n<p>24、深度学习——TensorFlow</p>\n<p>25、数据结构及算法（安全）</p>\n<p>26、爬虫（Python）</p>\n<p>27、Go</p>\n<p>28、shell编程</p>\n<p>29、CI自动化集成</p>\n<pre><code>Jenkins\nXcodeSever\n</code></pre>\n<p>30、架构师资格证【考】</p>\n<p>31、英语——托福证【考】</p>\n<p>32、开发信息系统化整理——按专题</p>\n<pre><code>32.1 iOS\n32.2 web\n32.3 Java——服务器、Android......一本书\n32.4 Chrome 书签整理\n32.5 百度网盘整理\n</code></pre>\n<p>33、适配方案——iOS、web</p>\n<p>34、微信阅读</p>\n<pre><code>34.1 剑桥中国史\n\n34.2 摩根财团\n</code></pre>\n<p>35、思维管理——系统化思维</p>\n<pre><code>35.1 产品思维\n35.2 Boss思维\n35.3 网络思维\n35.n 思维[网络]联系所有物质\n</code></pre>\n<p>36、人脉资源管理</p>\n<pre><code>36.1 人情\n36.2 朋友\n36.3 敌人\n36.4 其他\n    熟人、陌生人、偶像、领导、同事、下属。。。。。。\n</code></pre>\n<p>37、生活</p>\n<pre><code>37.1 规律\n37.2 原则\n37.3 效率\n37.4 品质\n37.5 追求\n</code></pre>\n<p>38、简历特点</p>\n<pre><code>1、主导过用户量数十万级别《明星空间》项目，掌握项目架构，直播前沿技 术，精通客户端程序设计\n2、熟悉iOS内核运行机制\n3、熟悉OpenGL ES、FFmpeg、Cocos2D-x\n4、熟练使用Xcode 上的性能工具Instrument以及代码管理工具Git，SVN等 \n5、熟悉Socket 与 Web socket，熟悉UDP、TCP、IP、rtmp、HTTPS、HTTP、 xmpp协议等\n6、有带领团队和项目管理经验，也有项目架构设计和重构经验 \n7、熟悉编程语言:c/c++，objective-C，swift，PHP，Python，Java，H5 \n8、熟悉单元测试及代码性能优化 \n9、熟悉Java\n</code></pre>\n<h2 id=\"二、健身\"><a href=\"#二、健身\" class=\"headerlink\" title=\"二、健身\"></a>二、健身</h2><h2 id=\"三、知识体系\"><a href=\"#三、知识体系\" class=\"headerlink\" title=\"三、知识体系\"></a>三、知识体系</h2><p>1、操作系统原理</p>\n<p>2、程序设计——语言</p>\n<p>3、数据结构与算法</p>\n<p>4、网络及协议</p>\n<ul>\n<li><a href=\"https://github.com/Alamofire/Alamofire\">Alamofire/Alamofire</a></li>\n<li><a href=\"https://github.com/tristanhimmelman/AlamofireObjectMapper\">AlamofireObjectMapper</a></li>\n</ul>\n<p>5、硬件的使用及结构、原理</p>\n<pre><code>5.1 CPU\n5.2 GPU\n</code></pre>\n<p>6、服务化</p>\n<pre><code>Frp\nWordPress\nVPN\nGitlab\nWeb\n...\n</code></pre>\n<p>7、信息传输原理</p>\n<h2 id=\"四、目标\"><a href=\"#四、目标\" class=\"headerlink\" title=\"四、目标\"></a>四、目标</h2><p>1、做事</p>\n<p>2、赚钱</p>\n<p>3、学习</p>\n<p>4、不能虚度时光</p>\n<h2 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2><p>1、动画库：</p>\n<ul>\n<li><a href=\"https://github.com/facebook/pop\">facebook/pop</a></li>\n<li><a href=\"https://github.com/airbnb/lottie-ios\">airbnb/lottie-ios</a></li>\n</ul>\n<p>2、<a href=\"https://developer.apple.com/documentation\">iOS 官方文档：</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"学习计划\"><a href=\"#学习计划\" class=\"headerlink\" title=\"学习计划\"></a>学习计划</h1><h2 id=\"一、学习\"><a href=\"#一、学习\" class=\"headerlink\" title=\"一、学习\"></a>一、学习</h2><p>1、大前端</p>\n<pre><code>React-Native\n小程序\nflutter\n</code></pre>\n<p>2、性能优化</p>\n<pre><code>2.1 界面性能，GPU——YYKit 介绍的框架\n2.2 CPU性能，Allen介绍的多态及编译原理\n</code></pre>\n<p>3、组件化（模块化）</p>\n<pre><code>    3.1 URL-Block\n    \n    3.2 Protocol-Class\n    \n    3.3 中间件（casa）\n    \n    3.4 微服务\n</code></pre>\n<p>4、设计模式（精通）</p>\n<pre><code>4.1 代码重构 （从哪些方面重构，依据什么）\n\n4.2 程序原则：\n    何时何地，由谁（类？？对象）做何事\n</code></pre>\n<p>5、导航栏的梗，转场动画</p>\n<p>6、 <del>layoutSubView，sizeThatFit 等</del></p>\n<p>7、读第三方库</p>\n<pre><code>7.1 使用原则——先封装\n7.2 项目中使用的第三方库\n</code></pre>\n<p>8、swift 语言精华</p>\n<pre><code>8.1 init 链\n8.2 高阶函数\n8.3 泛型\n8.4 协议\n8.5 拓展\n8.6 swift 语言开源库及计划\n</code></pre>\n<p>9、macOS、iOS 系统</p>\n<pre><code>9.1 越狱iOS学习\n9.2 反编译\n9.3 代码混淆（iOS）\n</code></pre>\n<p>10、富文本</p>\n<pre><code>10.1 CoreText\n10.2 TextKit:NSAttributeString等\n10.3 WebKit\n</code></pre>\n<p>11、电子签名</p>\n<p>12、HTTP(S)、TCP、UDP(kcp)等 协议</p>\n<p>13、UPnP</p>\n<p>14、Frp</p>\n<p>15、WoL(远程唤醒)</p>\n<p>16、<del>（小明）域名认证</del></p>\n<p>17、<del>香港服务器</del></p>\n<p>18、多线程</p>\n<ul>\n<li><p><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i\">Threaded Programming</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16\">Run Loops</a></p>\n</li>\n</ul>\n<p>19、汇编</p>\n<p>20、C/C++</p>\n<pre><code>20.1 boost\n20.2 Qt\n20.3 Xcode\n20.4 Visual Studio\n</code></pre>\n<p>21、音视频播放器源码</p>\n<pre><code>21.1 FFmpeg\n21.2 IJKPlayer\n21.3 AliPlayer\n21.4 封装播放器\n    原生的【AVFoundation】\n    第三方 源码解读\n21.5 音频\n    语音识别——Sphinx\n    性能优化——编解码、压缩\n</code></pre>\n<ul>\n<li><a href=\"https://www.politepix.com/openears/tutorial/\">语音识别–openears</a></li>\n</ul>\n<p>22、OpenGL、OpenCV。。。</p>\n<p>23、Linux 使用及系统原理学习</p>\n<p>24、深度学习——TensorFlow</p>\n<p>25、数据结构及算法（安全）</p>\n<p>26、爬虫（Python）</p>\n<p>27、Go</p>\n<p>28、shell编程</p>\n<p>29、CI自动化集成</p>\n<pre><code>Jenkins\nXcodeSever\n</code></pre>\n<p>30、架构师资格证【考】</p>\n<p>31、英语——托福证【考】</p>\n<p>32、开发信息系统化整理——按专题</p>\n<pre><code>32.1 iOS\n32.2 web\n32.3 Java——服务器、Android......一本书\n32.4 Chrome 书签整理\n32.5 百度网盘整理\n</code></pre>\n<p>33、适配方案——iOS、web</p>\n<p>34、微信阅读</p>\n<pre><code>34.1 剑桥中国史\n\n34.2 摩根财团\n</code></pre>\n<p>35、思维管理——系统化思维</p>\n<pre><code>35.1 产品思维\n35.2 Boss思维\n35.3 网络思维\n35.n 思维[网络]联系所有物质\n</code></pre>\n<p>36、人脉资源管理</p>\n<pre><code>36.1 人情\n36.2 朋友\n36.3 敌人\n36.4 其他\n    熟人、陌生人、偶像、领导、同事、下属。。。。。。\n</code></pre>\n<p>37、生活</p>\n<pre><code>37.1 规律\n37.2 原则\n37.3 效率\n37.4 品质\n37.5 追求\n</code></pre>\n<p>38、简历特点</p>\n<pre><code>1、主导过用户量数十万级别《明星空间》项目，掌握项目架构，直播前沿技 术，精通客户端程序设计\n2、熟悉iOS内核运行机制\n3、熟悉OpenGL ES、FFmpeg、Cocos2D-x\n4、熟练使用Xcode 上的性能工具Instrument以及代码管理工具Git，SVN等 \n5、熟悉Socket 与 Web socket，熟悉UDP、TCP、IP、rtmp、HTTPS、HTTP、 xmpp协议等\n6、有带领团队和项目管理经验，也有项目架构设计和重构经验 \n7、熟悉编程语言:c/c++，objective-C，swift，PHP，Python，Java，H5 \n8、熟悉单元测试及代码性能优化 \n9、熟悉Java\n</code></pre>\n<h2 id=\"二、健身\"><a href=\"#二、健身\" class=\"headerlink\" title=\"二、健身\"></a>二、健身</h2><h2 id=\"三、知识体系\"><a href=\"#三、知识体系\" class=\"headerlink\" title=\"三、知识体系\"></a>三、知识体系</h2><p>1、操作系统原理</p>\n<p>2、程序设计——语言</p>\n<p>3、数据结构与算法</p>\n<p>4、网络及协议</p>\n<ul>\n<li><a href=\"https://github.com/Alamofire/Alamofire\">Alamofire/Alamofire</a></li>\n<li><a href=\"https://github.com/tristanhimmelman/AlamofireObjectMapper\">AlamofireObjectMapper</a></li>\n</ul>\n<p>5、硬件的使用及结构、原理</p>\n<pre><code>5.1 CPU\n5.2 GPU\n</code></pre>\n<p>6、服务化</p>\n<pre><code>Frp\nWordPress\nVPN\nGitlab\nWeb\n...\n</code></pre>\n<p>7、信息传输原理</p>\n<h2 id=\"四、目标\"><a href=\"#四、目标\" class=\"headerlink\" title=\"四、目标\"></a>四、目标</h2><p>1、做事</p>\n<p>2、赚钱</p>\n<p>3、学习</p>\n<p>4、不能虚度时光</p>\n<h2 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2><p>1、动画库：</p>\n<ul>\n<li><a href=\"https://github.com/facebook/pop\">facebook/pop</a></li>\n<li><a href=\"https://github.com/airbnb/lottie-ios\">airbnb/lottie-ios</a></li>\n</ul>\n<p>2、<a href=\"https://developer.apple.com/documentation\">iOS 官方文档：</a></p>\n"},{"_content":"# 近期目标\n\n1、腾讯、网易等互联网公司；\n\n1.1 能力\n\n1. 技术\n    专业性：图形图像【ImageMagic】、音视频【直播、点播】、IM、OpenCV、OpenGL、Metal、FFmpeg、GPUImage\n2. 思维\n    计算机基础：OS、C++、网络、数据库、数据结构【算法、安全】、shell、Python？\n\n2、考证\n\n1. 架构师\n2. 公务员<党员>\n3. 教师资格证\n\n3、生活\n\n* 走出生活\n* 享受生活\n* 生活品质\n* 回归家庭\n* 自主时间\n* 房、车、家\n\n4、读书（修生养性）\n\n1. 史\n2. 论\n3. 科技\n\n5、职业规划\n\n1. iOS\n    swift、swiftUI、响应式、WWDC[2019]、性能优化、内存管理、运行时、函数调用【栈、转发】、汇编、逆向、LLDB、LLVM、GCC、自动化、大前端【React-Native、Flutter】、\n\n    1.1、 C++ 方向\n\n2. 服务器\n    Java、Swift\n\n3. 架构师\n    移动/前端、服务器、小程序等、项目管理、团队管理、产品、市场、运营\n\n4. 大数据\n    深度学习、人工智能、机器学习\n","source":"_drafts/近期目标.md","raw":"# 近期目标\n\n1、腾讯、网易等互联网公司；\n\n1.1 能力\n\n1. 技术\n    专业性：图形图像【ImageMagic】、音视频【直播、点播】、IM、OpenCV、OpenGL、Metal、FFmpeg、GPUImage\n2. 思维\n    计算机基础：OS、C++、网络、数据库、数据结构【算法、安全】、shell、Python？\n\n2、考证\n\n1. 架构师\n2. 公务员<党员>\n3. 教师资格证\n\n3、生活\n\n* 走出生活\n* 享受生活\n* 生活品质\n* 回归家庭\n* 自主时间\n* 房、车、家\n\n4、读书（修生养性）\n\n1. 史\n2. 论\n3. 科技\n\n5、职业规划\n\n1. iOS\n    swift、swiftUI、响应式、WWDC[2019]、性能优化、内存管理、运行时、函数调用【栈、转发】、汇编、逆向、LLDB、LLVM、GCC、自动化、大前端【React-Native、Flutter】、\n\n    1.1、 C++ 方向\n\n2. 服务器\n    Java、Swift\n\n3. 架构师\n    移动/前端、服务器、小程序等、项目管理、团队管理、产品、市场、运营\n\n4. 大数据\n    深度学习、人工智能、机器学习\n","slug":"近期目标","published":0,"date":"2019-03-24T14:33:33.000Z","updated":"2021-01-28T13:05:08.074Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj300188n7u2mmk8l20","content":"<h1 id=\"近期目标\"><a href=\"#近期目标\" class=\"headerlink\" title=\"近期目标\"></a>近期目标</h1><p>1、腾讯、网易等互联网公司；</p>\n<p>1.1 能力</p>\n<ol>\n<li>技术<br> 专业性：图形图像【ImageMagic】、音视频【直播、点播】、IM、OpenCV、OpenGL、Metal、FFmpeg、GPUImage</li>\n<li>思维<br> 计算机基础：OS、C++、网络、数据库、数据结构【算法、安全】、shell、Python？</li>\n</ol>\n<p>2、考证</p>\n<ol>\n<li>架构师</li>\n<li>公务员&lt;党员&gt;</li>\n<li>教师资格证</li>\n</ol>\n<p>3、生活</p>\n<ul>\n<li>走出生活</li>\n<li>享受生活</li>\n<li>生活品质</li>\n<li>回归家庭</li>\n<li>自主时间</li>\n<li>房、车、家</li>\n</ul>\n<p>4、读书（修生养性）</p>\n<ol>\n<li>史</li>\n<li>论</li>\n<li>科技</li>\n</ol>\n<p>5、职业规划</p>\n<ol>\n<li><p>iOS<br> swift、swiftUI、响应式、WWDC[2019]、性能优化、内存管理、运行时、函数调用【栈、转发】、汇编、逆向、LLDB、LLVM、GCC、自动化、大前端【React-Native、Flutter】、</p>\n<p> 1.1、 C++ 方向</p>\n</li>\n<li><p>服务器<br> Java、Swift</p>\n</li>\n<li><p>架构师<br> 移动/前端、服务器、小程序等、项目管理、团队管理、产品、市场、运营</p>\n</li>\n<li><p>大数据<br> 深度学习、人工智能、机器学习</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"近期目标\"><a href=\"#近期目标\" class=\"headerlink\" title=\"近期目标\"></a>近期目标</h1><p>1、腾讯、网易等互联网公司；</p>\n<p>1.1 能力</p>\n<ol>\n<li>技术<br> 专业性：图形图像【ImageMagic】、音视频【直播、点播】、IM、OpenCV、OpenGL、Metal、FFmpeg、GPUImage</li>\n<li>思维<br> 计算机基础：OS、C++、网络、数据库、数据结构【算法、安全】、shell、Python？</li>\n</ol>\n<p>2、考证</p>\n<ol>\n<li>架构师</li>\n<li>公务员&lt;党员&gt;</li>\n<li>教师资格证</li>\n</ol>\n<p>3、生活</p>\n<ul>\n<li>走出生活</li>\n<li>享受生活</li>\n<li>生活品质</li>\n<li>回归家庭</li>\n<li>自主时间</li>\n<li>房、车、家</li>\n</ul>\n<p>4、读书（修生养性）</p>\n<ol>\n<li>史</li>\n<li>论</li>\n<li>科技</li>\n</ol>\n<p>5、职业规划</p>\n<ol>\n<li><p>iOS<br> swift、swiftUI、响应式、WWDC[2019]、性能优化、内存管理、运行时、函数调用【栈、转发】、汇编、逆向、LLDB、LLVM、GCC、自动化、大前端【React-Native、Flutter】、</p>\n<p> 1.1、 C++ 方向</p>\n</li>\n<li><p>服务器<br> Java、Swift</p>\n</li>\n<li><p>架构师<br> 移动/前端、服务器、小程序等、项目管理、团队管理、产品、市场、运营</p>\n</li>\n<li><p>大数据<br> 深度学习、人工智能、机器学习</p>\n</li>\n</ol>\n"},{"_content":"# 查漏补缺\n\n1、Runloop\nhttps://blog.ibireme.com/2015/05/18/runloop/\n\n[Runloop](https://v.youku.com/v_show/id_XODgxODkzODI0.html)\n\n2、Facebook\nhttps://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/\n\nhttps://github.com/facebook/FBMemoryProfiler\n\n3、插件日志\nhttps://github.com/meitu\n\n4、程序员网站\nhttps://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting\n\n5、Runtime\nhttps://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension\n\nhttps://juejin.im/post/5d1c11c9e51d45590a445b8e\n\nhttps://juejin.im/post/5d2bf32f6fb9a07ee063476a\n\nhttps://juejin.im/post/5d215b8df265da1b7b31ac8f\n\n6、crash\nhttps://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md\n\nhttps://github.com/Tencent/matrix\n\n7、target\nhttps://www.jianshu.com/p/18db54655246\n\n8、pod\nhttps://www.jianshu.com/p/fb5083f2c0d2\n","source":"_posts/iOS学习笔记/iOS 查漏补缺.md","raw":"# 查漏补缺\n\n1、Runloop\nhttps://blog.ibireme.com/2015/05/18/runloop/\n\n[Runloop](https://v.youku.com/v_show/id_XODgxODkzODI0.html)\n\n2、Facebook\nhttps://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/\n\nhttps://github.com/facebook/FBMemoryProfiler\n\n3、插件日志\nhttps://github.com/meitu\n\n4、程序员网站\nhttps://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting\n\n5、Runtime\nhttps://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension\n\nhttps://juejin.im/post/5d1c11c9e51d45590a445b8e\n\nhttps://juejin.im/post/5d2bf32f6fb9a07ee063476a\n\nhttps://juejin.im/post/5d215b8df265da1b7b31ac8f\n\n6、crash\nhttps://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md\n\nhttps://github.com/Tencent/matrix\n\n7、target\nhttps://www.jianshu.com/p/18db54655246\n\n8、pod\nhttps://www.jianshu.com/p/fb5083f2c0d2\n","slug":"iOS学习笔记/iOS 查漏补缺","published":1,"date":"2019-07-18T10:56:18.000Z","updated":"2021-01-28T13:18:14.961Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj300198n7ud2tf2rc4","content":"<h1 id=\"查漏补缺\"><a href=\"#查漏补缺\" class=\"headerlink\" title=\"查漏补缺\"></a>查漏补缺</h1><p>1、Runloop<br><a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">https://blog.ibireme.com/2015/05/18/runloop/</a></p>\n<p><a href=\"https://v.youku.com/v_show/id_XODgxODkzODI0.html\">Runloop</a></p>\n<p>2、Facebook<br><a href=\"https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/\">https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/</a></p>\n<p><a href=\"https://github.com/facebook/FBMemoryProfiler\">https://github.com/facebook/FBMemoryProfiler</a></p>\n<p>3、插件日志<br><a href=\"https://github.com/meitu\">https://github.com/meitu</a></p>\n<p>4、程序员网站<br><a href=\"https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting\">https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting</a></p>\n<p>5、Runtime<br><a href=\"https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension\">https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension</a></p>\n<p><a href=\"https://juejin.im/post/5d1c11c9e51d45590a445b8e\">https://juejin.im/post/5d1c11c9e51d45590a445b8e</a></p>\n<p><a href=\"https://juejin.im/post/5d2bf32f6fb9a07ee063476a\">https://juejin.im/post/5d2bf32f6fb9a07ee063476a</a></p>\n<p><a href=\"https://juejin.im/post/5d215b8df265da1b7b31ac8f\">https://juejin.im/post/5d215b8df265da1b7b31ac8f</a></p>\n<p>6、crash<br><a href=\"https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md\">https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md</a></p>\n<p><a href=\"https://github.com/Tencent/matrix\">https://github.com/Tencent/matrix</a></p>\n<p>7、target<br><a href=\"https://www.jianshu.com/p/18db54655246\">https://www.jianshu.com/p/18db54655246</a></p>\n<p>8、pod<br><a href=\"https://www.jianshu.com/p/fb5083f2c0d2\">https://www.jianshu.com/p/fb5083f2c0d2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"查漏补缺\"><a href=\"#查漏补缺\" class=\"headerlink\" title=\"查漏补缺\"></a>查漏补缺</h1><p>1、Runloop<br><a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">https://blog.ibireme.com/2015/05/18/runloop/</a></p>\n<p><a href=\"https://v.youku.com/v_show/id_XODgxODkzODI0.html\">Runloop</a></p>\n<p>2、Facebook<br><a href=\"https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/\">https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/</a></p>\n<p><a href=\"https://github.com/facebook/FBMemoryProfiler\">https://github.com/facebook/FBMemoryProfiler</a></p>\n<p>3、插件日志<br><a href=\"https://github.com/meitu\">https://github.com/meitu</a></p>\n<p>4、程序员网站<br><a href=\"https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting\">https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting</a></p>\n<p>5、Runtime<br><a href=\"https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension\">https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension</a></p>\n<p><a href=\"https://juejin.im/post/5d1c11c9e51d45590a445b8e\">https://juejin.im/post/5d1c11c9e51d45590a445b8e</a></p>\n<p><a href=\"https://juejin.im/post/5d2bf32f6fb9a07ee063476a\">https://juejin.im/post/5d2bf32f6fb9a07ee063476a</a></p>\n<p><a href=\"https://juejin.im/post/5d215b8df265da1b7b31ac8f\">https://juejin.im/post/5d215b8df265da1b7b31ac8f</a></p>\n<p>6、crash<br><a href=\"https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md\">https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md</a></p>\n<p><a href=\"https://github.com/Tencent/matrix\">https://github.com/Tencent/matrix</a></p>\n<p>7、target<br><a href=\"https://www.jianshu.com/p/18db54655246\">https://www.jianshu.com/p/18db54655246</a></p>\n<p>8、pod<br><a href=\"https://www.jianshu.com/p/fb5083f2c0d2\">https://www.jianshu.com/p/fb5083f2c0d2</a></p>\n"},{"_content":"\n# Flutter 技术可行性调研\n\n界面：\n1、适配；\n2、项目视图组件；\n3、音视频播放；\n4、导航栏；\n5、动画；\n\n数据：\n1、数据库；\n2、数据序列化[json]；\n3、异步；\n4、埋点；\n\nAPP：\n1、webview：[用户协议，]事件，https证书认证；\n2、网络 http[s] 方法delete等；\n3、第三方app交互；\n4、后台任务；\n\n工程：\n1、图片等资源；\n2、国际化；\n3、性能监控：日志上报与及时处理；\n\n原生交互：\n1、编解码器；\n2、原生通道；\n3、原生第三方服务：客服、推送等；\n4、渠道分发包；\n\n*跨端\n1、iOS；\n2、Android；\n3、Web；\n\n*跨语言\n1、Dart；\n2、Swift；\n3、Kotlin；\n4、C++；\n\n*框架\n1、Flutter；\n2、Swift UI，cocoa Touch等诸多框架；\n3、Android 诸多框架；\n\n*设计模式层面\n1、设计模式；\n2、工程分层设计：\n\n    网络层\n    数据层\n    UI层\n    原生[通道层]\n\n*组件化层面\n1、功能组件化；\n2、业务模块化；\n\n小问题：\n1、分块列表；\n2、退出登录点击无反应；\n3、弹窗；\n","source":"_posts/iOS学习笔记/Flutters/Flutter 技术可行性调研.md","raw":"\n# Flutter 技术可行性调研\n\n界面：\n1、适配；\n2、项目视图组件；\n3、音视频播放；\n4、导航栏；\n5、动画；\n\n数据：\n1、数据库；\n2、数据序列化[json]；\n3、异步；\n4、埋点；\n\nAPP：\n1、webview：[用户协议，]事件，https证书认证；\n2、网络 http[s] 方法delete等；\n3、第三方app交互；\n4、后台任务；\n\n工程：\n1、图片等资源；\n2、国际化；\n3、性能监控：日志上报与及时处理；\n\n原生交互：\n1、编解码器；\n2、原生通道；\n3、原生第三方服务：客服、推送等；\n4、渠道分发包；\n\n*跨端\n1、iOS；\n2、Android；\n3、Web；\n\n*跨语言\n1、Dart；\n2、Swift；\n3、Kotlin；\n4、C++；\n\n*框架\n1、Flutter；\n2、Swift UI，cocoa Touch等诸多框架；\n3、Android 诸多框架；\n\n*设计模式层面\n1、设计模式；\n2、工程分层设计：\n\n    网络层\n    数据层\n    UI层\n    原生[通道层]\n\n*组件化层面\n1、功能组件化；\n2、业务模块化；\n\n小问题：\n1、分块列表；\n2、退出登录点击无反应；\n3、弹窗；\n","slug":"iOS学习笔记/Flutters/Flutter 技术可行性调研","published":1,"date":"2019-08-29T02:36:19.000Z","updated":"2019-08-29T10:13:31.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj4001a8n7u0ch54zg2","content":"<h1 id=\"Flutter-技术可行性调研\"><a href=\"#Flutter-技术可行性调研\" class=\"headerlink\" title=\"Flutter 技术可行性调研\"></a>Flutter 技术可行性调研</h1><p>界面：<br>1、适配；<br>2、项目视图组件；<br>3、音视频播放；<br>4、导航栏；<br>5、动画；</p>\n<p>数据：<br>1、数据库；<br>2、数据序列化[json]；<br>3、异步；<br>4、埋点；</p>\n<p>APP：<br>1、webview：[用户协议，]事件，https证书认证；<br>2、网络 http[s] 方法delete等；<br>3、第三方app交互；<br>4、后台任务；</p>\n<p>工程：<br>1、图片等资源；<br>2、国际化；<br>3、性能监控：日志上报与及时处理；</p>\n<p>原生交互：<br>1、编解码器；<br>2、原生通道；<br>3、原生第三方服务：客服、推送等；<br>4、渠道分发包；</p>\n<p>*跨端<br>1、iOS；<br>2、Android；<br>3、Web；</p>\n<p>*跨语言<br>1、Dart；<br>2、Swift；<br>3、Kotlin；<br>4、C++；</p>\n<p>*框架<br>1、Flutter；<br>2、Swift UI，cocoa Touch等诸多框架；<br>3、Android 诸多框架；</p>\n<p>*设计模式层面<br>1、设计模式；<br>2、工程分层设计：</p>\n<pre><code>网络层\n数据层\nUI层\n原生[通道层]\n</code></pre>\n<p>*组件化层面<br>1、功能组件化；<br>2、业务模块化；</p>\n<p>小问题：<br>1、分块列表；<br>2、退出登录点击无反应；<br>3、弹窗；</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Flutter-技术可行性调研\"><a href=\"#Flutter-技术可行性调研\" class=\"headerlink\" title=\"Flutter 技术可行性调研\"></a>Flutter 技术可行性调研</h1><p>界面：<br>1、适配；<br>2、项目视图组件；<br>3、音视频播放；<br>4、导航栏；<br>5、动画；</p>\n<p>数据：<br>1、数据库；<br>2、数据序列化[json]；<br>3、异步；<br>4、埋点；</p>\n<p>APP：<br>1、webview：[用户协议，]事件，https证书认证；<br>2、网络 http[s] 方法delete等；<br>3、第三方app交互；<br>4、后台任务；</p>\n<p>工程：<br>1、图片等资源；<br>2、国际化；<br>3、性能监控：日志上报与及时处理；</p>\n<p>原生交互：<br>1、编解码器；<br>2、原生通道；<br>3、原生第三方服务：客服、推送等；<br>4、渠道分发包；</p>\n<p>*跨端<br>1、iOS；<br>2、Android；<br>3、Web；</p>\n<p>*跨语言<br>1、Dart；<br>2、Swift；<br>3、Kotlin；<br>4、C++；</p>\n<p>*框架<br>1、Flutter；<br>2、Swift UI，cocoa Touch等诸多框架；<br>3、Android 诸多框架；</p>\n<p>*设计模式层面<br>1、设计模式；<br>2、工程分层设计：</p>\n<pre><code>网络层\n数据层\nUI层\n原生[通道层]\n</code></pre>\n<p>*组件化层面<br>1、功能组件化；<br>2、业务模块化；</p>\n<p>小问题：<br>1、分块列表；<br>2、退出登录点击无反应；<br>3、弹窗；</p>\n"},{"_content":"APNS\n\nKeyChain\n\n[UniversalLink](https://www.cnblogs.com/fshmjl/p/5859781.html)\n\n    有一个注册的域名\n    通过 SSL 访问域名\n    支持上传一个 JSON 文件到你的域名\n\n1.添加域名到 Capabilities\n2.上传 apple-app-site-association 文件\n\n``` json\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": {\n      \"TBEJCS6FFP.com.domain.App\": {\n        \"paths\":[ \"*\" ]\n      }\n    }\n  }\n}\n```\n\n3.在 APP 里处理通用链接\n\n![通用链接流程](resources/universal_link.png)\n\nExtension\n\n    iMessage\n    Sticker\n    3D Touch\n    生物识别\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之AppleService.md","raw":"APNS\n\nKeyChain\n\n[UniversalLink](https://www.cnblogs.com/fshmjl/p/5859781.html)\n\n    有一个注册的域名\n    通过 SSL 访问域名\n    支持上传一个 JSON 文件到你的域名\n\n1.添加域名到 Capabilities\n2.上传 apple-app-site-association 文件\n\n``` json\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": {\n      \"TBEJCS6FFP.com.domain.App\": {\n        \"paths\":[ \"*\" ]\n      }\n    }\n  }\n}\n```\n\n3.在 APP 里处理通用链接\n\n![通用链接流程](resources/universal_link.png)\n\nExtension\n\n    iMessage\n    Sticker\n    3D Touch\n    生物识别\n","slug":"iOS学习笔记/iOS系统学习/iOS之AppleService","published":1,"date":"2019-03-24T12:58:53.000Z","updated":"2021-01-28T13:14:59.775Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj4001b8n7u50bqgyll","content":"<p>APNS</p>\n<p>KeyChain</p>\n<p><a href=\"https://www.cnblogs.com/fshmjl/p/5859781.html\">UniversalLink</a></p>\n<pre><code>有一个注册的域名\n通过 SSL 访问域名\n支持上传一个 JSON 文件到你的域名\n</code></pre>\n<p>1.添加域名到 Capabilities<br>2.上传 apple-app-site-association 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;applinks&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;apps&quot;</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">&quot;details&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;TBEJCS6FFP.com.domain.App&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;paths&quot;</span>:[ <span class=\"string\">&quot;*&quot;</span> ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.在 APP 里处理通用链接</p>\n<p><img src=\"resources/universal_link.png\" alt=\"通用链接流程\"></p>\n<p>Extension</p>\n<pre><code>iMessage\nSticker\n3D Touch\n生物识别\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>APNS</p>\n<p>KeyChain</p>\n<p><a href=\"https://www.cnblogs.com/fshmjl/p/5859781.html\">UniversalLink</a></p>\n<pre><code>有一个注册的域名\n通过 SSL 访问域名\n支持上传一个 JSON 文件到你的域名\n</code></pre>\n<p>1.添加域名到 Capabilities<br>2.上传 apple-app-site-association 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;applinks&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;apps&quot;</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">&quot;details&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;TBEJCS6FFP.com.domain.App&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;paths&quot;</span>:[ <span class=\"string\">&quot;*&quot;</span> ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.在 APP 里处理通用链接</p>\n<p><img src=\"resources/universal_link.png\" alt=\"通用链接流程\"></p>\n<p>Extension</p>\n<pre><code>iMessage\nSticker\n3D Touch\n生物识别\n</code></pre>\n"},{"_content":"\n内存管理原则\n\n1、自己生成的对象，自己持有\n\n    alloc\n    new\n    copy\n    mutablecopy\n\n2、非自己生成的对象，自己也能持有\n\n    [NSMutableArray array];\n    等等\n\n3、不再需要自己持有的对象要释放\n4、非自己持有的对象无法释放\n\n实现方式\n\n    alloc/retain/release/dealloc\n    autorelease\n\nARC\n\n原则\n\n    同非ARC原则\n\n方式：\n\n    __strong\n    __weak\n    __unsafe-unretain\n    __autorelease\n\n规则\n\n    不能使用retain/release/retainCount/autorelease\n    不能使用NSAllocateObject/NSDeallocateObject\n    遵循内存管理命名规则\n    dealloc\n    使用@autoreleasePool代替NSAutoreleasePool\n    不能使用NSZone\n    对象形变量不能作为C语言结构体成员\n    显示转换id 和 （void *）\n\n属性\n\n    assign\n    strong\n    copy\n    retain\n    unsafe_unretained\n    weak \n    \n数组\n\n    动态数组 id __strong *array = [NSMutableArray array]\n    释放\n    \n实现方式：\n\n    __strong：自动注册到autoreleasePool中\n    __weak：自动注册到autoreleasePool中，是否可weak，weak变量释放流程\n    __autorelease：autorelease的方式\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之内存管理.md","raw":"\n内存管理原则\n\n1、自己生成的对象，自己持有\n\n    alloc\n    new\n    copy\n    mutablecopy\n\n2、非自己生成的对象，自己也能持有\n\n    [NSMutableArray array];\n    等等\n\n3、不再需要自己持有的对象要释放\n4、非自己持有的对象无法释放\n\n实现方式\n\n    alloc/retain/release/dealloc\n    autorelease\n\nARC\n\n原则\n\n    同非ARC原则\n\n方式：\n\n    __strong\n    __weak\n    __unsafe-unretain\n    __autorelease\n\n规则\n\n    不能使用retain/release/retainCount/autorelease\n    不能使用NSAllocateObject/NSDeallocateObject\n    遵循内存管理命名规则\n    dealloc\n    使用@autoreleasePool代替NSAutoreleasePool\n    不能使用NSZone\n    对象形变量不能作为C语言结构体成员\n    显示转换id 和 （void *）\n\n属性\n\n    assign\n    strong\n    copy\n    retain\n    unsafe_unretained\n    weak \n    \n数组\n\n    动态数组 id __strong *array = [NSMutableArray array]\n    释放\n    \n实现方式：\n\n    __strong：自动注册到autoreleasePool中\n    __weak：自动注册到autoreleasePool中，是否可weak，weak变量释放流程\n    __autorelease：autorelease的方式\n","slug":"iOS学习笔记/iOS系统学习/iOS之内存管理","published":1,"date":"2019-03-24T12:42:52.000Z","updated":"2021-01-28T13:17:15.462Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj5001c8n7u1zwm5evb","content":"<p>内存管理原则</p>\n<p>1、自己生成的对象，自己持有</p>\n<pre><code>alloc\nnew\ncopy\nmutablecopy\n</code></pre>\n<p>2、非自己生成的对象，自己也能持有</p>\n<pre><code>[NSMutableArray array];\n等等\n</code></pre>\n<p>3、不再需要自己持有的对象要释放<br>4、非自己持有的对象无法释放</p>\n<p>实现方式</p>\n<pre><code>alloc/retain/release/dealloc\nautorelease\n</code></pre>\n<p>ARC</p>\n<p>原则</p>\n<pre><code>同非ARC原则\n</code></pre>\n<p>方式：</p>\n<pre><code>__strong\n__weak\n__unsafe-unretain\n__autorelease\n</code></pre>\n<p>规则</p>\n<pre><code>不能使用retain/release/retainCount/autorelease\n不能使用NSAllocateObject/NSDeallocateObject\n遵循内存管理命名规则\ndealloc\n使用@autoreleasePool代替NSAutoreleasePool\n不能使用NSZone\n对象形变量不能作为C语言结构体成员\n显示转换id 和 （void *）\n</code></pre>\n<p>属性</p>\n<pre><code>assign\nstrong\ncopy\nretain\nunsafe_unretained\nweak \n</code></pre>\n<p>数组</p>\n<pre><code>动态数组 id __strong *array = [NSMutableArray array]\n释放\n</code></pre>\n<p>实现方式：</p>\n<pre><code>__strong：自动注册到autoreleasePool中\n__weak：自动注册到autoreleasePool中，是否可weak，weak变量释放流程\n__autorelease：autorelease的方式\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>内存管理原则</p>\n<p>1、自己生成的对象，自己持有</p>\n<pre><code>alloc\nnew\ncopy\nmutablecopy\n</code></pre>\n<p>2、非自己生成的对象，自己也能持有</p>\n<pre><code>[NSMutableArray array];\n等等\n</code></pre>\n<p>3、不再需要自己持有的对象要释放<br>4、非自己持有的对象无法释放</p>\n<p>实现方式</p>\n<pre><code>alloc/retain/release/dealloc\nautorelease\n</code></pre>\n<p>ARC</p>\n<p>原则</p>\n<pre><code>同非ARC原则\n</code></pre>\n<p>方式：</p>\n<pre><code>__strong\n__weak\n__unsafe-unretain\n__autorelease\n</code></pre>\n<p>规则</p>\n<pre><code>不能使用retain/release/retainCount/autorelease\n不能使用NSAllocateObject/NSDeallocateObject\n遵循内存管理命名规则\ndealloc\n使用@autoreleasePool代替NSAutoreleasePool\n不能使用NSZone\n对象形变量不能作为C语言结构体成员\n显示转换id 和 （void *）\n</code></pre>\n<p>属性</p>\n<pre><code>assign\nstrong\ncopy\nretain\nunsafe_unretained\nweak \n</code></pre>\n<p>数组</p>\n<pre><code>动态数组 id __strong *array = [NSMutableArray array]\n释放\n</code></pre>\n<p>实现方式：</p>\n<pre><code>__strong：自动注册到autoreleasePool中\n__weak：自动注册到autoreleasePool中，是否可weak，weak变量释放流程\n__autorelease：autorelease的方式\n</code></pre>\n"},{"_content":"[开发规范]()\n\n[多媒体]()\n\n[开发工具]()\n\n[操作系统]()\n\n[数据及安全]()\n\n[游戏]()\n\n[界面显示](iOS之界面显示/iOS之界面显示.md)\n\n[编程语言]()\n\n[项目管理]()\n\n[AppleService]()\n\n[Block]()\n\n[GCD]()\n\n[iOS-SDK]()\n\n[Xcode]()\n\n[操作事件]()\n\n[代码管理]()\n\n[内存管理]()\n\n[单元测试]()\n\n[多线程]()\n\n[开源库]()\n\n[异常处理]()\n\n[性能优化]()\n\n[架构·框架]()\n\n[生态体系及结构]()\n\n[组件化]()\n\n[设计模式]()\n\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之学习笔记.md","raw":"[开发规范]()\n\n[多媒体]()\n\n[开发工具]()\n\n[操作系统]()\n\n[数据及安全]()\n\n[游戏]()\n\n[界面显示](iOS之界面显示/iOS之界面显示.md)\n\n[编程语言]()\n\n[项目管理]()\n\n[AppleService]()\n\n[Block]()\n\n[GCD]()\n\n[iOS-SDK]()\n\n[Xcode]()\n\n[操作事件]()\n\n[代码管理]()\n\n[内存管理]()\n\n[单元测试]()\n\n[多线程]()\n\n[开源库]()\n\n[异常处理]()\n\n[性能优化]()\n\n[架构·框架]()\n\n[生态体系及结构]()\n\n[组件化]()\n\n[设计模式]()\n\n","slug":"iOS学习笔记/iOS系统学习/iOS之学习笔记","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T14:17:17.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj5001d8n7u1yn0asbu","content":"<p><a href=\"\">开发规范</a></p>\n<p><a href=\"\">多媒体</a></p>\n<p><a href=\"\">开发工具</a></p>\n<p><a href=\"\">操作系统</a></p>\n<p><a href=\"\">数据及安全</a></p>\n<p><a href=\"\">游戏</a></p>\n<p><a href=\"iOS%E4%B9%8B%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA/iOS%E4%B9%8B%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA.md\">界面显示</a></p>\n<p><a href=\"\">编程语言</a></p>\n<p><a href=\"\">项目管理</a></p>\n<p><a href=\"\">AppleService</a></p>\n<p><a href=\"\">Block</a></p>\n<p><a href=\"\">GCD</a></p>\n<p><a href=\"\">iOS-SDK</a></p>\n<p><a href=\"\">Xcode</a></p>\n<p><a href=\"\">操作事件</a></p>\n<p><a href=\"\">代码管理</a></p>\n<p><a href=\"\">内存管理</a></p>\n<p><a href=\"\">单元测试</a></p>\n<p><a href=\"\">多线程</a></p>\n<p><a href=\"\">开源库</a></p>\n<p><a href=\"\">异常处理</a></p>\n<p><a href=\"\">性能优化</a></p>\n<p><a href=\"\">架构·框架</a></p>\n<p><a href=\"\">生态体系及结构</a></p>\n<p><a href=\"\">组件化</a></p>\n<p><a href=\"\">设计模式</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"\">开发规范</a></p>\n<p><a href=\"\">多媒体</a></p>\n<p><a href=\"\">开发工具</a></p>\n<p><a href=\"\">操作系统</a></p>\n<p><a href=\"\">数据及安全</a></p>\n<p><a href=\"\">游戏</a></p>\n<p><a href=\"iOS%E4%B9%8B%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA/iOS%E4%B9%8B%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA.md\">界面显示</a></p>\n<p><a href=\"\">编程语言</a></p>\n<p><a href=\"\">项目管理</a></p>\n<p><a href=\"\">AppleService</a></p>\n<p><a href=\"\">Block</a></p>\n<p><a href=\"\">GCD</a></p>\n<p><a href=\"\">iOS-SDK</a></p>\n<p><a href=\"\">Xcode</a></p>\n<p><a href=\"\">操作事件</a></p>\n<p><a href=\"\">代码管理</a></p>\n<p><a href=\"\">内存管理</a></p>\n<p><a href=\"\">单元测试</a></p>\n<p><a href=\"\">多线程</a></p>\n<p><a href=\"\">开源库</a></p>\n<p><a href=\"\">异常处理</a></p>\n<p><a href=\"\">性能优化</a></p>\n<p><a href=\"\">架构·框架</a></p>\n<p><a href=\"\">生态体系及结构</a></p>\n<p><a href=\"\">组件化</a></p>\n<p><a href=\"\">设计模式</a></p>\n"},{"_content":"\n##一、命名规范\n\n###1、基本规则\n\n*  清晰，又清晰又简洁是最好的了，但简洁不如清晰重要。总的讲不要使用单词的简写，除了非常常用的简写以外，尽量使用单词全称。\n\n*  一致性，命名代表意思与所做事情的一致性，命名与通常使用的名字的一致性，比如setStringValue，setTabBarColor等\n\t\n###2、类命名\n\n* 大驼峰命名法、功能+类型 例如LoginViewController\n\t\n###3、类别扩展命名(Category和Extension)\n* 类别(Category)命名：类名+功能 例如 UIView+Frame\n\n* 扩展(Extension)命名：类名+Extension 例如UIView+Extension\n \t\n###4、变量命名\n\n* 小驼峰命名法\n\n* 使用修饰+类型的方式，比如titleLabel\n* 命名尽量以清晰为主，变量名尽量可以推测其用途\n\t\n###5、宏及常量命名\n* 常量、宏(swift中没有宏，使用常量定义)，前面带小写字母k作为常量标识，其余部分采取大写，单词以英文下划线”_“分割。\n\n* 通用的常量使用宏#define来定义，单独类中使用的常量使用static定义\n* 宏尽量少用，编译耗时，影响程序的启动，尽量用常量来代替，之前iOS工程默认有预编译文件的，后来iOS把这个默认文件去掉了，倡导用常量代替\n\t\n###6、图片文件命名\n* 采用模块_功能形式\n\n* 尽量采用单词全拼或者公认的无歧义缩写(如nav，bg，btn等)\n\t\n###7、通知协议代理命名\n* 通知命名：[触发通知的类名] + [Did | Will] + [动作] + Notification，例如：TextFieldDidChangeNotification等\n\n* 代理命名：作用类+should will did等关键字+作用 比如：@objc optional  func sureBtnDidTouch:(UIButton*)sureBtn\n* 协议命名：前缀+作用+ing 与类名区分 比如：NSCopying\n\t\n###8、Bundle Identifier命名\n* 采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名根据应用进行命名。\n                 \n##二、代码规范\n###1、删除多余空格\n* 所有方法与方法之间空一行\n\n* 代码块之间空一行\n\n###2、删除多余的注释\n* 删除注释掉的代码\n\n* 删除无意义的代码\n\n###3、删除多余方法\n* 没有使用到的方法删除掉\n\n* 如果方法没有执行任何业务逻辑，但需要放着，给予一定的注释\n\n###4、删除未被使用的资源文件\n\n###5、添加必要的注释\n* .h文件的property需要注释(swift中参与业务逻辑的对象需要注释)\n\n* 自定义的方法需要注释\n* 大的代码块需要注释\n* 宏枚举需要有一定的注释\n* 复杂的逻辑代码需要给予一定的注释\n\n###6、整体代码风格尽量统一\n* 逻辑运算符与代码之间空一格\n\n* 逻辑或方法结尾的}需要占用一格\n* 代理、逻辑业务方法等模块区分使用“//MARK: - ”，且与代码之间不要空格\n* 在方法命名时-和()之间需要有空格（objective-C）\n* 定义对象时 *号属于类型的一部分 放在对象前 与类型空格 例如：NSArray *dataArray\t\n\n###7、[raywenderlich/swift-style-guide：](https://github.com/raywenderlich/swift-style-guide)Swift 代码编程规范\n\n\t\t\n##三、项目管理\n\n###1、模块管理\n\n* 采取MVC设计架构  \n\n* 采取模块化开发，公用或者常使用到的一些模块单独抽离封装到公用类，减少团队操作，提高开发效率\n* 大体上市按照业务模块、三方库、项目资源、公用类划分\n* \n·\n·\n·\n###2、代码管理\n\n* 采用git多分支管理，平时开发在development分支进行\n*  <mark>引入第三方库时需要经过团队讨论，参照使用方便性，学习成本，性能，项目影响覆盖等因素再决定引入，不要随意引入\n*  <mark>公用的模块划分出来可以提供团队参考使用\n* 每天至少上班前更新一次代码，下班提交一次代码，以免多人工作不同步\n* 个人测试代码不要提交，以免影响同伴开发\n* 修改配置文件等共享文件前，一定要更新，修改完验证之后要马上提交，避免冲突\n* \n·\n·\n·\n###3、团队交流\n\n* 工作上碰到的问题鼓励邮件沟通，方便分散式管理，也可避免长时间后不记得了\n* 对于工作问题，一定要谨慎、仔细，今天能完成和要完成的问题最好不要拖拉\n* 如果觉得某些功能实现有困难，要提出来探讨折中实现方式，不要敷衍行事\n* 工作职责一定要明确、能够对应相应负责人员处理解决，包括对接产品、设计、服务器、Android等同事，积极沟通处理\n* 有一些好的想法，方便项目开发或者能够方便团队协作的方式，积极提出，这也是一种刺激主动学习的方式\n* 平时如果觉得有什么好的学习资源、技巧，鼓励积极分享，共同成长\n*  <mark>多写学习体验、鼓励钻研新技术，分享，到时候在git上建个公共文件夹（同步管理），大家平时可以在上面公开写，收集进来也可以，到时候统一整理，专题列在第五条里面，尽量用Markdown，查看方便。比如有名的三方库文件源码解读\n（AFNetWorking、SDWebImage等，培养读源码的兴趣，对知识了解也较为彻底）、Git/SVN等工具的基本使用、Vim的\n基本使用等\n* \n·\n·\n·\n\n\n###5、iOS 研究方向（技术类）\n\n[#逆向工程专题](\"\")\n\n[#混合开发（如：React-Native）专题](\"\")\n\n[#单元测试系统化、自动化专题](\"\")\n\n[#持续集成化专题](\"\")\n\n[#动画专题](\"\")\n\n[#音视频专题（FFMpeg）、图片处理（OpenGL、GPUimage、OpenCV）](\"\")\n\n[#设计模式专题](\"\")\n\n[#iOS框架专题](\"\")\n\n[#性能研究专题](\"\")\n\n[#算法专题](\"\")\n\n[#网络及网络协议专题](\"\")\n\n[#操作系统（Linux、Unix）专题](\"\")\n\n[#编程语言专题](\"\")\n\n[#重构专题](\"\")\n\n[···](\"\")\n\n###6、业余讨论（非技术类）\n\n[#运动](\"\")\n\n[#游戏娱乐](\"\")\n\n[#理财](\"\")\n\n[#项目管理](\"\")\n\n[#学习方法，专业思维的培养](\"\")\n\n[···](\"\")\n\t","source":"_posts/iOS学习笔记/iOS系统学习/iOS之开发规范化.md","raw":"\n##一、命名规范\n\n###1、基本规则\n\n*  清晰，又清晰又简洁是最好的了，但简洁不如清晰重要。总的讲不要使用单词的简写，除了非常常用的简写以外，尽量使用单词全称。\n\n*  一致性，命名代表意思与所做事情的一致性，命名与通常使用的名字的一致性，比如setStringValue，setTabBarColor等\n\t\n###2、类命名\n\n* 大驼峰命名法、功能+类型 例如LoginViewController\n\t\n###3、类别扩展命名(Category和Extension)\n* 类别(Category)命名：类名+功能 例如 UIView+Frame\n\n* 扩展(Extension)命名：类名+Extension 例如UIView+Extension\n \t\n###4、变量命名\n\n* 小驼峰命名法\n\n* 使用修饰+类型的方式，比如titleLabel\n* 命名尽量以清晰为主，变量名尽量可以推测其用途\n\t\n###5、宏及常量命名\n* 常量、宏(swift中没有宏，使用常量定义)，前面带小写字母k作为常量标识，其余部分采取大写，单词以英文下划线”_“分割。\n\n* 通用的常量使用宏#define来定义，单独类中使用的常量使用static定义\n* 宏尽量少用，编译耗时，影响程序的启动，尽量用常量来代替，之前iOS工程默认有预编译文件的，后来iOS把这个默认文件去掉了，倡导用常量代替\n\t\n###6、图片文件命名\n* 采用模块_功能形式\n\n* 尽量采用单词全拼或者公认的无歧义缩写(如nav，bg，btn等)\n\t\n###7、通知协议代理命名\n* 通知命名：[触发通知的类名] + [Did | Will] + [动作] + Notification，例如：TextFieldDidChangeNotification等\n\n* 代理命名：作用类+should will did等关键字+作用 比如：@objc optional  func sureBtnDidTouch:(UIButton*)sureBtn\n* 协议命名：前缀+作用+ing 与类名区分 比如：NSCopying\n\t\n###8、Bundle Identifier命名\n* 采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名根据应用进行命名。\n                 \n##二、代码规范\n###1、删除多余空格\n* 所有方法与方法之间空一行\n\n* 代码块之间空一行\n\n###2、删除多余的注释\n* 删除注释掉的代码\n\n* 删除无意义的代码\n\n###3、删除多余方法\n* 没有使用到的方法删除掉\n\n* 如果方法没有执行任何业务逻辑，但需要放着，给予一定的注释\n\n###4、删除未被使用的资源文件\n\n###5、添加必要的注释\n* .h文件的property需要注释(swift中参与业务逻辑的对象需要注释)\n\n* 自定义的方法需要注释\n* 大的代码块需要注释\n* 宏枚举需要有一定的注释\n* 复杂的逻辑代码需要给予一定的注释\n\n###6、整体代码风格尽量统一\n* 逻辑运算符与代码之间空一格\n\n* 逻辑或方法结尾的}需要占用一格\n* 代理、逻辑业务方法等模块区分使用“//MARK: - ”，且与代码之间不要空格\n* 在方法命名时-和()之间需要有空格（objective-C）\n* 定义对象时 *号属于类型的一部分 放在对象前 与类型空格 例如：NSArray *dataArray\t\n\n###7、[raywenderlich/swift-style-guide：](https://github.com/raywenderlich/swift-style-guide)Swift 代码编程规范\n\n\t\t\n##三、项目管理\n\n###1、模块管理\n\n* 采取MVC设计架构  \n\n* 采取模块化开发，公用或者常使用到的一些模块单独抽离封装到公用类，减少团队操作，提高开发效率\n* 大体上市按照业务模块、三方库、项目资源、公用类划分\n* \n·\n·\n·\n###2、代码管理\n\n* 采用git多分支管理，平时开发在development分支进行\n*  <mark>引入第三方库时需要经过团队讨论，参照使用方便性，学习成本，性能，项目影响覆盖等因素再决定引入，不要随意引入\n*  <mark>公用的模块划分出来可以提供团队参考使用\n* 每天至少上班前更新一次代码，下班提交一次代码，以免多人工作不同步\n* 个人测试代码不要提交，以免影响同伴开发\n* 修改配置文件等共享文件前，一定要更新，修改完验证之后要马上提交，避免冲突\n* \n·\n·\n·\n###3、团队交流\n\n* 工作上碰到的问题鼓励邮件沟通，方便分散式管理，也可避免长时间后不记得了\n* 对于工作问题，一定要谨慎、仔细，今天能完成和要完成的问题最好不要拖拉\n* 如果觉得某些功能实现有困难，要提出来探讨折中实现方式，不要敷衍行事\n* 工作职责一定要明确、能够对应相应负责人员处理解决，包括对接产品、设计、服务器、Android等同事，积极沟通处理\n* 有一些好的想法，方便项目开发或者能够方便团队协作的方式，积极提出，这也是一种刺激主动学习的方式\n* 平时如果觉得有什么好的学习资源、技巧，鼓励积极分享，共同成长\n*  <mark>多写学习体验、鼓励钻研新技术，分享，到时候在git上建个公共文件夹（同步管理），大家平时可以在上面公开写，收集进来也可以，到时候统一整理，专题列在第五条里面，尽量用Markdown，查看方便。比如有名的三方库文件源码解读\n（AFNetWorking、SDWebImage等，培养读源码的兴趣，对知识了解也较为彻底）、Git/SVN等工具的基本使用、Vim的\n基本使用等\n* \n·\n·\n·\n\n\n###5、iOS 研究方向（技术类）\n\n[#逆向工程专题](\"\")\n\n[#混合开发（如：React-Native）专题](\"\")\n\n[#单元测试系统化、自动化专题](\"\")\n\n[#持续集成化专题](\"\")\n\n[#动画专题](\"\")\n\n[#音视频专题（FFMpeg）、图片处理（OpenGL、GPUimage、OpenCV）](\"\")\n\n[#设计模式专题](\"\")\n\n[#iOS框架专题](\"\")\n\n[#性能研究专题](\"\")\n\n[#算法专题](\"\")\n\n[#网络及网络协议专题](\"\")\n\n[#操作系统（Linux、Unix）专题](\"\")\n\n[#编程语言专题](\"\")\n\n[#重构专题](\"\")\n\n[···](\"\")\n\n###6、业余讨论（非技术类）\n\n[#运动](\"\")\n\n[#游戏娱乐](\"\")\n\n[#理财](\"\")\n\n[#项目管理](\"\")\n\n[#学习方法，专业思维的培养](\"\")\n\n[···](\"\")\n\t","slug":"iOS学习笔记/iOS系统学习/iOS之开发规范化","published":1,"date":"2018-03-09T07:04:52.000Z","updated":"2019-03-31T06:04:28.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj6001e8n7u4vc3g8sg","content":"<p>##一、命名规范</p>\n<p>###1、基本规则</p>\n<ul>\n<li><p> 清晰，又清晰又简洁是最好的了，但简洁不如清晰重要。总的讲不要使用单词的简写，除了非常常用的简写以外，尽量使用单词全称。</p>\n</li>\n<li><p>一致性，命名代表意思与所做事情的一致性，命名与通常使用的名字的一致性，比如setStringValue，setTabBarColor等</p>\n<p>###2、类命名</p>\n</li>\n<li><p>大驼峰命名法、功能+类型 例如LoginViewController</p>\n<p>###3、类别扩展命名(Category和Extension)</p>\n</li>\n<li><p>类别(Category)命名：类名+功能 例如 UIView+Frame</p>\n</li>\n<li><p>扩展(Extension)命名：类名+Extension 例如UIView+Extension</p>\n<p>###4、变量命名</p>\n</li>\n<li><p>小驼峰命名法</p>\n</li>\n<li><p>使用修饰+类型的方式，比如titleLabel</p>\n</li>\n<li><p>命名尽量以清晰为主，变量名尽量可以推测其用途</p>\n<p>###5、宏及常量命名</p>\n</li>\n<li><p>常量、宏(swift中没有宏，使用常量定义)，前面带小写字母k作为常量标识，其余部分采取大写，单词以英文下划线”_“分割。</p>\n</li>\n<li><p>通用的常量使用宏#define来定义，单独类中使用的常量使用static定义</p>\n</li>\n<li><p>宏尽量少用，编译耗时，影响程序的启动，尽量用常量来代替，之前iOS工程默认有预编译文件的，后来iOS把这个默认文件去掉了，倡导用常量代替</p>\n<p>###6、图片文件命名</p>\n</li>\n<li><p>采用模块_功能形式</p>\n</li>\n<li><p>尽量采用单词全拼或者公认的无歧义缩写(如nav，bg，btn等)</p>\n<p>###7、通知协议代理命名</p>\n</li>\n<li><p>通知命名：[触发通知的类名] + [Did | Will] + [动作] + Notification，例如：TextFieldDidChangeNotification等</p>\n</li>\n<li><p>代理命名：作用类+should will did等关键字+作用 比如：@objc optional  func sureBtnDidTouch:(UIButton*)sureBtn</p>\n</li>\n<li><p>协议命名：前缀+作用+ing 与类名区分 比如：NSCopying</p>\n<p>###8、Bundle Identifier命名</p>\n</li>\n<li><p>采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名根据应用进行命名。</p>\n<p>##二、代码规范<br>###1、删除多余空格</p>\n</li>\n<li><p>所有方法与方法之间空一行</p>\n</li>\n<li><p>代码块之间空一行</p>\n</li>\n</ul>\n<p>###2、删除多余的注释</p>\n<ul>\n<li><p>删除注释掉的代码</p>\n</li>\n<li><p>删除无意义的代码</p>\n</li>\n</ul>\n<p>###3、删除多余方法</p>\n<ul>\n<li><p>没有使用到的方法删除掉</p>\n</li>\n<li><p>如果方法没有执行任何业务逻辑，但需要放着，给予一定的注释</p>\n</li>\n</ul>\n<p>###4、删除未被使用的资源文件</p>\n<p>###5、添加必要的注释</p>\n<ul>\n<li><p>.h文件的property需要注释(swift中参与业务逻辑的对象需要注释)</p>\n</li>\n<li><p>自定义的方法需要注释</p>\n</li>\n<li><p>大的代码块需要注释</p>\n</li>\n<li><p>宏枚举需要有一定的注释</p>\n</li>\n<li><p>复杂的逻辑代码需要给予一定的注释</p>\n</li>\n</ul>\n<p>###6、整体代码风格尽量统一</p>\n<ul>\n<li><p>逻辑运算符与代码之间空一格</p>\n</li>\n<li><p>逻辑或方法结尾的}需要占用一格</p>\n</li>\n<li><p>代理、逻辑业务方法等模块区分使用“//MARK: - ”，且与代码之间不要空格</p>\n</li>\n<li><p>在方法命名时-和()之间需要有空格（objective-C）</p>\n</li>\n<li><p>定义对象时 *号属于类型的一部分 放在对象前 与类型空格 例如：NSArray *dataArray    </p>\n</li>\n</ul>\n<p>###7、<a href=\"https://github.com/raywenderlich/swift-style-guide\">raywenderlich/swift-style-guide：</a>Swift 代码编程规范</p>\n<p>##三、项目管理</p>\n<p>###1、模块管理</p>\n<ul>\n<li><p>采取MVC设计架构  </p>\n</li>\n<li><p>采取模块化开发，公用或者常使用到的一些模块单独抽离封装到公用类，减少团队操作，提高开发效率</p>\n</li>\n<li><p>大体上市按照业务模块、三方库、项目资源、公用类划分</p>\n</li>\n<li><p>·<br>·<br>·<br>###2、代码管理</p>\n</li>\n<li><p>采用git多分支管理，平时开发在development分支进行</p>\n</li>\n<li><p> <mark>引入第三方库时需要经过团队讨论，参照使用方便性，学习成本，性能，项目影响覆盖等因素再决定引入，不要随意引入</p>\n</li>\n<li><p> <mark>公用的模块划分出来可以提供团队参考使用</p>\n</li>\n<li><p>每天至少上班前更新一次代码，下班提交一次代码，以免多人工作不同步</p>\n</li>\n<li><p>个人测试代码不要提交，以免影响同伴开发</p>\n</li>\n<li><p>修改配置文件等共享文件前，一定要更新，修改完验证之后要马上提交，避免冲突</p>\n</li>\n<li><p>·<br>·<br>·<br>###3、团队交流</p>\n</li>\n<li><p>工作上碰到的问题鼓励邮件沟通，方便分散式管理，也可避免长时间后不记得了</p>\n</li>\n<li><p>对于工作问题，一定要谨慎、仔细，今天能完成和要完成的问题最好不要拖拉</p>\n</li>\n<li><p>如果觉得某些功能实现有困难，要提出来探讨折中实现方式，不要敷衍行事</p>\n</li>\n<li><p>工作职责一定要明确、能够对应相应负责人员处理解决，包括对接产品、设计、服务器、Android等同事，积极沟通处理</p>\n</li>\n<li><p>有一些好的想法，方便项目开发或者能够方便团队协作的方式，积极提出，这也是一种刺激主动学习的方式</p>\n</li>\n<li><p>平时如果觉得有什么好的学习资源、技巧，鼓励积极分享，共同成长</p>\n</li>\n<li><p> <mark>多写学习体验、鼓励钻研新技术，分享，到时候在git上建个公共文件夹（同步管理），大家平时可以在上面公开写，收集进来也可以，到时候统一整理，专题列在第五条里面，尽量用Markdown，查看方便。比如有名的三方库文件源码解读<br>（AFNetWorking、SDWebImage等，培养读源码的兴趣，对知识了解也较为彻底）、Git/SVN等工具的基本使用、Vim的<br>基本使用等</p>\n</li>\n<li><p>·<br>·<br>·</p>\n</li>\n</ul>\n<p>###5、iOS 研究方向（技术类）</p>\n<p><a href=\"%22%22\">#逆向工程专题</a></p>\n<p><a href=\"%22%22\">#混合开发（如：React-Native）专题</a></p>\n<p><a href=\"%22%22\">#单元测试系统化、自动化专题</a></p>\n<p><a href=\"%22%22\">#持续集成化专题</a></p>\n<p><a href=\"%22%22\">#动画专题</a></p>\n<p><a href=\"%22%22\">#音视频专题（FFMpeg）、图片处理（OpenGL、GPUimage、OpenCV）</a></p>\n<p><a href=\"%22%22\">#设计模式专题</a></p>\n<p><a href=\"%22%22\">#iOS框架专题</a></p>\n<p><a href=\"%22%22\">#性能研究专题</a></p>\n<p><a href=\"%22%22\">#算法专题</a></p>\n<p><a href=\"%22%22\">#网络及网络协议专题</a></p>\n<p><a href=\"%22%22\">#操作系统（Linux、Unix）专题</a></p>\n<p><a href=\"%22%22\">#编程语言专题</a></p>\n<p><a href=\"%22%22\">#重构专题</a></p>\n<p><a href=\"%22%22\">···</a></p>\n<p>###6、业余讨论（非技术类）</p>\n<p><a href=\"%22%22\">#运动</a></p>\n<p><a href=\"%22%22\">#游戏娱乐</a></p>\n<p><a href=\"%22%22\">#理财</a></p>\n<p><a href=\"%22%22\">#项目管理</a></p>\n<p><a href=\"%22%22\">#学习方法，专业思维的培养</a></p>\n<p><a href=\"%22%22\">···</a>\n    </p>\n","site":{"data":{}},"excerpt":"","more":"<p>##一、命名规范</p>\n<p>###1、基本规则</p>\n<ul>\n<li><p> 清晰，又清晰又简洁是最好的了，但简洁不如清晰重要。总的讲不要使用单词的简写，除了非常常用的简写以外，尽量使用单词全称。</p>\n</li>\n<li><p>一致性，命名代表意思与所做事情的一致性，命名与通常使用的名字的一致性，比如setStringValue，setTabBarColor等</p>\n<p>###2、类命名</p>\n</li>\n<li><p>大驼峰命名法、功能+类型 例如LoginViewController</p>\n<p>###3、类别扩展命名(Category和Extension)</p>\n</li>\n<li><p>类别(Category)命名：类名+功能 例如 UIView+Frame</p>\n</li>\n<li><p>扩展(Extension)命名：类名+Extension 例如UIView+Extension</p>\n<p>###4、变量命名</p>\n</li>\n<li><p>小驼峰命名法</p>\n</li>\n<li><p>使用修饰+类型的方式，比如titleLabel</p>\n</li>\n<li><p>命名尽量以清晰为主，变量名尽量可以推测其用途</p>\n<p>###5、宏及常量命名</p>\n</li>\n<li><p>常量、宏(swift中没有宏，使用常量定义)，前面带小写字母k作为常量标识，其余部分采取大写，单词以英文下划线”_“分割。</p>\n</li>\n<li><p>通用的常量使用宏#define来定义，单独类中使用的常量使用static定义</p>\n</li>\n<li><p>宏尽量少用，编译耗时，影响程序的启动，尽量用常量来代替，之前iOS工程默认有预编译文件的，后来iOS把这个默认文件去掉了，倡导用常量代替</p>\n<p>###6、图片文件命名</p>\n</li>\n<li><p>采用模块_功能形式</p>\n</li>\n<li><p>尽量采用单词全拼或者公认的无歧义缩写(如nav，bg，btn等)</p>\n<p>###7、通知协议代理命名</p>\n</li>\n<li><p>通知命名：[触发通知的类名] + [Did | Will] + [动作] + Notification，例如：TextFieldDidChangeNotification等</p>\n</li>\n<li><p>代理命名：作用类+should will did等关键字+作用 比如：@objc optional  func sureBtnDidTouch:(UIButton*)sureBtn</p>\n</li>\n<li><p>协议命名：前缀+作用+ing 与类名区分 比如：NSCopying</p>\n<p>###8、Bundle Identifier命名</p>\n</li>\n<li><p>采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名根据应用进行命名。</p>\n<p>##二、代码规范<br>###1、删除多余空格</p>\n</li>\n<li><p>所有方法与方法之间空一行</p>\n</li>\n<li><p>代码块之间空一行</p>\n</li>\n</ul>\n<p>###2、删除多余的注释</p>\n<ul>\n<li><p>删除注释掉的代码</p>\n</li>\n<li><p>删除无意义的代码</p>\n</li>\n</ul>\n<p>###3、删除多余方法</p>\n<ul>\n<li><p>没有使用到的方法删除掉</p>\n</li>\n<li><p>如果方法没有执行任何业务逻辑，但需要放着，给予一定的注释</p>\n</li>\n</ul>\n<p>###4、删除未被使用的资源文件</p>\n<p>###5、添加必要的注释</p>\n<ul>\n<li><p>.h文件的property需要注释(swift中参与业务逻辑的对象需要注释)</p>\n</li>\n<li><p>自定义的方法需要注释</p>\n</li>\n<li><p>大的代码块需要注释</p>\n</li>\n<li><p>宏枚举需要有一定的注释</p>\n</li>\n<li><p>复杂的逻辑代码需要给予一定的注释</p>\n</li>\n</ul>\n<p>###6、整体代码风格尽量统一</p>\n<ul>\n<li><p>逻辑运算符与代码之间空一格</p>\n</li>\n<li><p>逻辑或方法结尾的}需要占用一格</p>\n</li>\n<li><p>代理、逻辑业务方法等模块区分使用“//MARK: - ”，且与代码之间不要空格</p>\n</li>\n<li><p>在方法命名时-和()之间需要有空格（objective-C）</p>\n</li>\n<li><p>定义对象时 *号属于类型的一部分 放在对象前 与类型空格 例如：NSArray *dataArray    </p>\n</li>\n</ul>\n<p>###7、<a href=\"https://github.com/raywenderlich/swift-style-guide\">raywenderlich/swift-style-guide：</a>Swift 代码编程规范</p>\n<p>##三、项目管理</p>\n<p>###1、模块管理</p>\n<ul>\n<li><p>采取MVC设计架构  </p>\n</li>\n<li><p>采取模块化开发，公用或者常使用到的一些模块单独抽离封装到公用类，减少团队操作，提高开发效率</p>\n</li>\n<li><p>大体上市按照业务模块、三方库、项目资源、公用类划分</p>\n</li>\n<li><p>·<br>·<br>·<br>###2、代码管理</p>\n</li>\n<li><p>采用git多分支管理，平时开发在development分支进行</p>\n</li>\n<li><p> <mark>引入第三方库时需要经过团队讨论，参照使用方便性，学习成本，性能，项目影响覆盖等因素再决定引入，不要随意引入</p>\n</li>\n<li><p> <mark>公用的模块划分出来可以提供团队参考使用</p>\n</li>\n<li><p>每天至少上班前更新一次代码，下班提交一次代码，以免多人工作不同步</p>\n</li>\n<li><p>个人测试代码不要提交，以免影响同伴开发</p>\n</li>\n<li><p>修改配置文件等共享文件前，一定要更新，修改完验证之后要马上提交，避免冲突</p>\n</li>\n<li><p>·<br>·<br>·<br>###3、团队交流</p>\n</li>\n<li><p>工作上碰到的问题鼓励邮件沟通，方便分散式管理，也可避免长时间后不记得了</p>\n</li>\n<li><p>对于工作问题，一定要谨慎、仔细，今天能完成和要完成的问题最好不要拖拉</p>\n</li>\n<li><p>如果觉得某些功能实现有困难，要提出来探讨折中实现方式，不要敷衍行事</p>\n</li>\n<li><p>工作职责一定要明确、能够对应相应负责人员处理解决，包括对接产品、设计、服务器、Android等同事，积极沟通处理</p>\n</li>\n<li><p>有一些好的想法，方便项目开发或者能够方便团队协作的方式，积极提出，这也是一种刺激主动学习的方式</p>\n</li>\n<li><p>平时如果觉得有什么好的学习资源、技巧，鼓励积极分享，共同成长</p>\n</li>\n<li><p> <mark>多写学习体验、鼓励钻研新技术，分享，到时候在git上建个公共文件夹（同步管理），大家平时可以在上面公开写，收集进来也可以，到时候统一整理，专题列在第五条里面，尽量用Markdown，查看方便。比如有名的三方库文件源码解读<br>（AFNetWorking、SDWebImage等，培养读源码的兴趣，对知识了解也较为彻底）、Git/SVN等工具的基本使用、Vim的<br>基本使用等</p>\n</li>\n<li><p>·<br>·<br>·</p>\n</li>\n</ul>\n<p>###5、iOS 研究方向（技术类）</p>\n<p><a href=\"%22%22\">#逆向工程专题</a></p>\n<p><a href=\"%22%22\">#混合开发（如：React-Native）专题</a></p>\n<p><a href=\"%22%22\">#单元测试系统化、自动化专题</a></p>\n<p><a href=\"%22%22\">#持续集成化专题</a></p>\n<p><a href=\"%22%22\">#动画专题</a></p>\n<p><a href=\"%22%22\">#音视频专题（FFMpeg）、图片处理（OpenGL、GPUimage、OpenCV）</a></p>\n<p><a href=\"%22%22\">#设计模式专题</a></p>\n<p><a href=\"%22%22\">#iOS框架专题</a></p>\n<p><a href=\"%22%22\">#性能研究专题</a></p>\n<p><a href=\"%22%22\">#算法专题</a></p>\n<p><a href=\"%22%22\">#网络及网络协议专题</a></p>\n<p><a href=\"%22%22\">#操作系统（Linux、Unix）专题</a></p>\n<p><a href=\"%22%22\">#编程语言专题</a></p>\n<p><a href=\"%22%22\">#重构专题</a></p>\n<p><a href=\"%22%22\">···</a></p>\n<p>###6、业余讨论（非技术类）</p>\n<p><a href=\"%22%22\">#运动</a></p>\n<p><a href=\"%22%22\">#游戏娱乐</a></p>\n<p><a href=\"%22%22\">#理财</a></p>\n<p><a href=\"%22%22\">#项目管理</a></p>\n<p><a href=\"%22%22\">#学习方法，专业思维的培养</a></p>\n<p><a href=\"%22%22\">···</a>\n    </p>\n"},{"_content":"自定义库并发布\n\n自制pod库\n\ncocoaPod 管理\n\n动态库\n静态库\n\n\t加载方式，原理","source":"_posts/iOS学习笔记/iOS系统学习/iOS之开源库.md","raw":"自定义库并发布\n\n自制pod库\n\ncocoaPod 管理\n\n动态库\n静态库\n\n\t加载方式，原理","slug":"iOS学习笔记/iOS系统学习/iOS之开源库","published":1,"date":"2019-03-24T12:47:48.000Z","updated":"2019-03-24T12:51:50.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj6001f8n7u7u3ud711","content":"<p>自定义库并发布</p>\n<p>自制pod库</p>\n<p>cocoaPod 管理</p>\n<p>动态库<br>静态库</p>\n<pre><code>加载方式，原理\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>自定义库并发布</p>\n<p>自制pod库</p>\n<p>cocoaPod 管理</p>\n<p>动态库<br>静态库</p>\n<pre><code>加载方式，原理\n</code></pre>\n"},{"_content":"\n    \n1、异常日志收集\n\n*    Xcode、App Store\n*   第三方 \n*   自己收集\n        跟踪异常产生的时机并捕捉、处理：上报之类\n        [iOS Swift Crash的捕获](http://www.cocoachina.com/ios/20170816/20270.html)\n        [漫谈iOS Crash收集框架](https://nianxi.net/ios/ios-crash-reporter.html)\n        [dSYMTools](https://blog.csdn.net/wiseuc_jianghai/article/details/78031638)\n        [DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)[DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)\n        \n2、异常日志分析\n\n一、.dSYM\n\n.dSYM(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的DWARF（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：\n    \n    .xcarchive\n    --dSYMs\n      |--Your.app.dSYM\n        |--Contents\n          |--Resources\n            |--DWARF\n            \n\n二、确定符号表和崩溃日志的一致性\n\n有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。\n\n1、从崩溃日志中获取UUID\n\n崩溃日志比较靠下的位置有个Binary Images模块，其第一行内容如下：\n```\nBinary Images:\n0x1f000 - 0x906fff sd_doctor_ios armv7  <eef4e325f9d6393f93e87b7ee327a5ea> /var/containers/Bundle/Application/8BEEC659-8263-4092-A2DC-EF48060BB142/sd_doctor_ios.app/sd_doctor_ios\n```\n\n从中可以看到关于你应用的若干信息：\n\n代码段的起终地址为：0x1f000 - 0x906fff\n\n运行你应用的CPU指令集为：armv7\n\n应用的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（不区分大小写）\n\n2、从符号表中获取UUID\n\n执行以下命令从符号表中提取UUID：\n    \n    dwarfdump --uuid Your.app.dSYM\n    dwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your\n由此得到armv7指令集的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。\n\n三、计算崩溃符号表地址\n以下面的崩溃堆栈为例：\n\n    Thread 0:\n    0   libobjc.A.dylib                   0x33f10f60 0x33efe000 + 77664\n    1   Foundation                        0x273526ac 0x2734a000 + 34476\n    2   Foundation                        0x27355c3e 0x2734a000 + 48190\n    3   UIKit                             0x29ef9d1c 0x29bbc000 + 3398940\n    4   UIKit                             0x29ef9c9a 0x29bbc000 + 3398810\n    5   UIKit                             0x29ef954c 0x29bbc000 + 3396940\n    6   UIKit                             0x29c3a16a 0x29bbc000 + 516458\n    7   UIKit                             0x29e4b8e6 0x29bbc000 + 2685158\n    8   UIKit                             0x29c3a128 0x29bbc000 + 516392\n    9   Your                              0x000f0846 0xa2000 + 321606\n    10  UIKit                             0x29e90fb2 0x29bbc000 + 2969522\n    11  UIKit                             0x29e91076 0x29bbc000 + 2969718\n    12  UIKit                             0x29e867cc 0x29bbc000 + 2926540\n    13  UIKit                             0x29c9e8ea 0x29bbc000 + 927978\n    14  UIKit                             0x29bc8a6a 0x29bbc000 + 51818\n    15  QuartzCore                        0x295f0a08 0x295e4000 + 51720\n    16  QuartzCore                        0x295ec3e0 0x295e4000 + 33760\n    17  QuartzCore                        0x295ec268 0x295e4000 + 33384\n    18  QuartzCore                        0x295ebc4c 0x295e4000 + 31820\n    19  QuartzCore                        0x295eba50 0x295e4000 + 31312\n    20  QuartzCore                        0x295e5928 0x295e4000 + 6440\n    21  CoreFoundation                    0x266d0d92 0x26604000 + 839058\n    22  CoreFoundation                    0x266ce44e 0x26604000 + 828494\n    23  CoreFoundation                    0x266ce856 0x26604000 + 829526\n    24  CoreFoundation                    0x2661c3bc 0x26604000 + 99260\n    25  CoreFoundation                    0x2661c1ce 0x26604000 + 98766\n    26  GraphicsServices                  0x2da1a0a4 0x2da11000 + 37028\n    27  UIKit                             0x29c2a7ac 0x29bbc000 + 452524\n    28  Your                              0x0024643a 0xa2000 + 1721402\n    29  libdyld.dylib                     0x34484aac 0x34483000 + 6828\n\n1、 符号表堆栈地址计算方式\n\n要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址0x000f0846，该进程的运行时起始地址是0xa2000，崩溃处距离进程起始地址的偏移量为十进制的321606(对应十六进制为0x4E846)。三者对应关系：\n\n    0x000f0846 = 0xa2000 + 0x4E846\n    \n对应的公式为：\n\n    运行时堆栈地址 = 运行时起始地址 + 偏移量\n    \n崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：\n    \n    符号表堆栈地址 = 符号表起始地址 + 偏移量\n    \n2、获取符号表中的TEXT段起始地址\n\n符号表中TEXT段的起始地址可以通过以下命令获得：\n\n    $otool -l Your.app.dSYM/Contents/Resources/DWARF/Your\n\n运行结果中的片段如下：\n\n    Load command 3\n          cmd LC_SEGMENT\n      cmdsize 736\n      segname __TEXT\n       vmaddr 0x00004000\n       vmsize 0x00700000\n      fileoff 0\n     filesize 0\n      maxprot 0x00000005\n     initprot 0x00000005\n       nsects 10\n        flags 0x0\n        \n其中的vmaddr 0x00004000字段即为TEXT段的起始地址。\n\n3、计算符号表地址\n\n由公式：\n\n    符号表堆栈地址 = 符号表起始地址 + 偏移量\n可得：\n\n    0x52846 = 0x4E846 + 0x4000\n    \n即符号表中的崩溃地址为0x52846，接下来就可以根据这个地址解析出崩溃位置了。\n\n四、崩溃信息还原\n\n有了符号表的崩溃地址，有以下几种方式解析崩溃信息：\n\n1、dwarfdump\n\n命令如下：\n\n    $dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep 'Line table'\n    \n需要注意的是：    \n    \n    这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集\n\n比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。\n\n—lookup后面跟的一定是经过准确计算的符号表中的崩溃地址\n\n使用dwarfdump解析的结果较杂乱，因此使用grep命令抓取其中关键点展示出来\n\n\n运行结果如下：\n\n    Line table dir : '/data/.../Src/OBDConnectSetting/Controller'\n    Line table file: 'OBDFirstConnectViewController.m' line 882, column 5 with start address 0x000000000052768\n    \n其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。\n\n2、atos\n\natos是另一种更加简洁的崩溃日志解析方法，使用方式如下：\n\n     $atos -o LuBao -arch armv7 0x52846\n其执行结果如下：\n\n    -[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n相对dwarfdump命令的解析结果，更加简洁直观的指出了崩溃发生的位置。\n\n3、无需符号表崩溃地址的解析方式\n\n实际上，atos还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：\n\n    $atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846\n其中-l选项指定了二进制文件在运行时的起始地址0xa2000（获取方式见Binary Images相关内容）,后面跟的是崩溃发生的运行时地址0x000f0846，解析结果和使用计算得到的符号表中崩溃地址一致：\n\n\n    -[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n五、参考文档\n\n* [How to Match a Crash Report to a Build](https://developer.apple.com/library/mac/qa/qa1765/_index.html)\n \n* [CrashReporter](https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html)\n \n* [Understanding and Analyzing iOS Application Crash Reports](https://developer.apple.com/library/ios/technotes/tn2151/_index.html)\n \n* [atos and dwarfdump won’t symbolicate my address](http://stackoverflow.com/a/12464678/2293677)\n\n**原文参考：**[手动解析CrashLog](http://www.cocoachina.com/ios/20150803/12806.html)\n \n3、异常处理\n4、异常规避\n\n* 内存地址分配\n* 日志源文件\n* 异常产生\n\nLinux系统中，支持两类信号\n\n1.POSIX标准的规则信号(regular signal，编号1－31)\n\n2.实时信号(real-time signal，编号32－63)\n\n对于regular signal来说，无论发送多少次，在接收进程处理之前，重复的信号会被合并为一个（每一种regular signal对应于系统进程表项中软中断字段的一个比特，因此不同的信号可以同时存在，同一信号仅能表示有或无而不能表示重复的次数)；\n\n而real-time signal发送多少次，就会在接收进程的信号队列中出现多少次。\nLinux在i386上的31个规则信号(regular signal)\n\n    kill -l\n\n| 编号\t| 信号名称\t | 缺省动作 | 说明 |\n| --- | --- | --- | ---|\n|1\t|SIGHUP\t|终止\t|终止控制终端或进程|\n|2|\tSIGINT\t|终止|\t键盘产生的中断(Ctrl-C)|\n|3\t|SIGQUIT\t|dump|\t键盘产生的退出|\n|4|\tSIGILL\t|dump|\t非法指令|\n|5|\tSIGTRAP\t|dump|\tdebug中断|\n|6\t|SIGABRT／SIGIOT|\tdump|\t异常中止|\n|7|\tSIGBUS／SIGEMT\t|dump|\t总线异常/EMT指令|\n|8|\tSIGFPE\t|dump|\t浮点运算溢出|\n|9\t|SIGKILL\t|终止|\t强制进程终止|\n|10|\tSIGUSR1\t|终止|\t用户信号,进程可自定义用途|\n|11|\tSIGSEGV\t|dump|\t非法内存地址引用|\n|12|\tSIGUSR2\t|终止|\t用户信号，进程可自定义用途|\n|13|\tSIGPIPE\t|终止|\t向某个没有读取的管道中写入数据|\n|14|\tSIGALRM\t|终止|\t时钟中断(闹钟)|\n|15|\tSIGTERM\t|终止|\t进程终止|\n|16|\tSIGSTKFLT\t|终止|\t协处理器栈错误|\n|17|\tSIGCHLD\t|忽略|\t子进程退出或中断|\n|18|\tSIGCONT\t|继续|\t如进程停止状态则开始运行|\n|19|\tSIGSTOP\t|停止|\t停止进程运行|\n|20|\tSIGSTP\t|停止|\t键盘产生的停止|\n|21|\tSIGTTIN\t|停止|\t后台进程请求输入|\n|22|\tSIGTTOU\t|停止|\t后台进程请求输出|\n|23|\tSIGURG\t|忽略\t|socket发生紧急情况|\n|24|\tSIGXCPU\t|dump|\tCPU时间限制被打破|\n|25|\tSIGXFSZ\t|dump|\t文件大小限制被打破|\n|26|\tSIGVTALRM|\t终止|\t虚拟定时时钟|\n|27|\tSIGPROF\t|终止|\tprofile timer clock|\n|28|\tSIGWINCH\t|忽略|\t窗口尺寸调整|\n|29|\tSIGIO/SIGPOLL|\t终止|\tI/O可用|\n|30|\tSIGPWR\t|终止|\t电源异常|\n|31|\tSIGSYS／SYSUNUSED|\tdump| 系统调用异常|\n\n在不同系统中同一数值可能会代表不同的信号，因此，最好使用信号名而不是信号值。\n\n信号的数值越小，则优先级越高。当进程收到多个待处理信号时，总是先处理优先级别高的信号。\n\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之异常处理.md","raw":"\n    \n1、异常日志收集\n\n*    Xcode、App Store\n*   第三方 \n*   自己收集\n        跟踪异常产生的时机并捕捉、处理：上报之类\n        [iOS Swift Crash的捕获](http://www.cocoachina.com/ios/20170816/20270.html)\n        [漫谈iOS Crash收集框架](https://nianxi.net/ios/ios-crash-reporter.html)\n        [dSYMTools](https://blog.csdn.net/wiseuc_jianghai/article/details/78031638)\n        [DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)[DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)\n        \n2、异常日志分析\n\n一、.dSYM\n\n.dSYM(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的DWARF（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：\n    \n    .xcarchive\n    --dSYMs\n      |--Your.app.dSYM\n        |--Contents\n          |--Resources\n            |--DWARF\n            \n\n二、确定符号表和崩溃日志的一致性\n\n有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。\n\n1、从崩溃日志中获取UUID\n\n崩溃日志比较靠下的位置有个Binary Images模块，其第一行内容如下：\n```\nBinary Images:\n0x1f000 - 0x906fff sd_doctor_ios armv7  <eef4e325f9d6393f93e87b7ee327a5ea> /var/containers/Bundle/Application/8BEEC659-8263-4092-A2DC-EF48060BB142/sd_doctor_ios.app/sd_doctor_ios\n```\n\n从中可以看到关于你应用的若干信息：\n\n代码段的起终地址为：0x1f000 - 0x906fff\n\n运行你应用的CPU指令集为：armv7\n\n应用的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（不区分大小写）\n\n2、从符号表中获取UUID\n\n执行以下命令从符号表中提取UUID：\n    \n    dwarfdump --uuid Your.app.dSYM\n    dwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your\n由此得到armv7指令集的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。\n\n三、计算崩溃符号表地址\n以下面的崩溃堆栈为例：\n\n    Thread 0:\n    0   libobjc.A.dylib                   0x33f10f60 0x33efe000 + 77664\n    1   Foundation                        0x273526ac 0x2734a000 + 34476\n    2   Foundation                        0x27355c3e 0x2734a000 + 48190\n    3   UIKit                             0x29ef9d1c 0x29bbc000 + 3398940\n    4   UIKit                             0x29ef9c9a 0x29bbc000 + 3398810\n    5   UIKit                             0x29ef954c 0x29bbc000 + 3396940\n    6   UIKit                             0x29c3a16a 0x29bbc000 + 516458\n    7   UIKit                             0x29e4b8e6 0x29bbc000 + 2685158\n    8   UIKit                             0x29c3a128 0x29bbc000 + 516392\n    9   Your                              0x000f0846 0xa2000 + 321606\n    10  UIKit                             0x29e90fb2 0x29bbc000 + 2969522\n    11  UIKit                             0x29e91076 0x29bbc000 + 2969718\n    12  UIKit                             0x29e867cc 0x29bbc000 + 2926540\n    13  UIKit                             0x29c9e8ea 0x29bbc000 + 927978\n    14  UIKit                             0x29bc8a6a 0x29bbc000 + 51818\n    15  QuartzCore                        0x295f0a08 0x295e4000 + 51720\n    16  QuartzCore                        0x295ec3e0 0x295e4000 + 33760\n    17  QuartzCore                        0x295ec268 0x295e4000 + 33384\n    18  QuartzCore                        0x295ebc4c 0x295e4000 + 31820\n    19  QuartzCore                        0x295eba50 0x295e4000 + 31312\n    20  QuartzCore                        0x295e5928 0x295e4000 + 6440\n    21  CoreFoundation                    0x266d0d92 0x26604000 + 839058\n    22  CoreFoundation                    0x266ce44e 0x26604000 + 828494\n    23  CoreFoundation                    0x266ce856 0x26604000 + 829526\n    24  CoreFoundation                    0x2661c3bc 0x26604000 + 99260\n    25  CoreFoundation                    0x2661c1ce 0x26604000 + 98766\n    26  GraphicsServices                  0x2da1a0a4 0x2da11000 + 37028\n    27  UIKit                             0x29c2a7ac 0x29bbc000 + 452524\n    28  Your                              0x0024643a 0xa2000 + 1721402\n    29  libdyld.dylib                     0x34484aac 0x34483000 + 6828\n\n1、 符号表堆栈地址计算方式\n\n要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址0x000f0846，该进程的运行时起始地址是0xa2000，崩溃处距离进程起始地址的偏移量为十进制的321606(对应十六进制为0x4E846)。三者对应关系：\n\n    0x000f0846 = 0xa2000 + 0x4E846\n    \n对应的公式为：\n\n    运行时堆栈地址 = 运行时起始地址 + 偏移量\n    \n崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：\n    \n    符号表堆栈地址 = 符号表起始地址 + 偏移量\n    \n2、获取符号表中的TEXT段起始地址\n\n符号表中TEXT段的起始地址可以通过以下命令获得：\n\n    $otool -l Your.app.dSYM/Contents/Resources/DWARF/Your\n\n运行结果中的片段如下：\n\n    Load command 3\n          cmd LC_SEGMENT\n      cmdsize 736\n      segname __TEXT\n       vmaddr 0x00004000\n       vmsize 0x00700000\n      fileoff 0\n     filesize 0\n      maxprot 0x00000005\n     initprot 0x00000005\n       nsects 10\n        flags 0x0\n        \n其中的vmaddr 0x00004000字段即为TEXT段的起始地址。\n\n3、计算符号表地址\n\n由公式：\n\n    符号表堆栈地址 = 符号表起始地址 + 偏移量\n可得：\n\n    0x52846 = 0x4E846 + 0x4000\n    \n即符号表中的崩溃地址为0x52846，接下来就可以根据这个地址解析出崩溃位置了。\n\n四、崩溃信息还原\n\n有了符号表的崩溃地址，有以下几种方式解析崩溃信息：\n\n1、dwarfdump\n\n命令如下：\n\n    $dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep 'Line table'\n    \n需要注意的是：    \n    \n    这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集\n\n比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。\n\n—lookup后面跟的一定是经过准确计算的符号表中的崩溃地址\n\n使用dwarfdump解析的结果较杂乱，因此使用grep命令抓取其中关键点展示出来\n\n\n运行结果如下：\n\n    Line table dir : '/data/.../Src/OBDConnectSetting/Controller'\n    Line table file: 'OBDFirstConnectViewController.m' line 882, column 5 with start address 0x000000000052768\n    \n其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。\n\n2、atos\n\natos是另一种更加简洁的崩溃日志解析方法，使用方式如下：\n\n     $atos -o LuBao -arch armv7 0x52846\n其执行结果如下：\n\n    -[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n相对dwarfdump命令的解析结果，更加简洁直观的指出了崩溃发生的位置。\n\n3、无需符号表崩溃地址的解析方式\n\n实际上，atos还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：\n\n    $atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846\n其中-l选项指定了二进制文件在运行时的起始地址0xa2000（获取方式见Binary Images相关内容）,后面跟的是崩溃发生的运行时地址0x000f0846，解析结果和使用计算得到的符号表中崩溃地址一致：\n\n\n    -[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n五、参考文档\n\n* [How to Match a Crash Report to a Build](https://developer.apple.com/library/mac/qa/qa1765/_index.html)\n \n* [CrashReporter](https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html)\n \n* [Understanding and Analyzing iOS Application Crash Reports](https://developer.apple.com/library/ios/technotes/tn2151/_index.html)\n \n* [atos and dwarfdump won’t symbolicate my address](http://stackoverflow.com/a/12464678/2293677)\n\n**原文参考：**[手动解析CrashLog](http://www.cocoachina.com/ios/20150803/12806.html)\n \n3、异常处理\n4、异常规避\n\n* 内存地址分配\n* 日志源文件\n* 异常产生\n\nLinux系统中，支持两类信号\n\n1.POSIX标准的规则信号(regular signal，编号1－31)\n\n2.实时信号(real-time signal，编号32－63)\n\n对于regular signal来说，无论发送多少次，在接收进程处理之前，重复的信号会被合并为一个（每一种regular signal对应于系统进程表项中软中断字段的一个比特，因此不同的信号可以同时存在，同一信号仅能表示有或无而不能表示重复的次数)；\n\n而real-time signal发送多少次，就会在接收进程的信号队列中出现多少次。\nLinux在i386上的31个规则信号(regular signal)\n\n    kill -l\n\n| 编号\t| 信号名称\t | 缺省动作 | 说明 |\n| --- | --- | --- | ---|\n|1\t|SIGHUP\t|终止\t|终止控制终端或进程|\n|2|\tSIGINT\t|终止|\t键盘产生的中断(Ctrl-C)|\n|3\t|SIGQUIT\t|dump|\t键盘产生的退出|\n|4|\tSIGILL\t|dump|\t非法指令|\n|5|\tSIGTRAP\t|dump|\tdebug中断|\n|6\t|SIGABRT／SIGIOT|\tdump|\t异常中止|\n|7|\tSIGBUS／SIGEMT\t|dump|\t总线异常/EMT指令|\n|8|\tSIGFPE\t|dump|\t浮点运算溢出|\n|9\t|SIGKILL\t|终止|\t强制进程终止|\n|10|\tSIGUSR1\t|终止|\t用户信号,进程可自定义用途|\n|11|\tSIGSEGV\t|dump|\t非法内存地址引用|\n|12|\tSIGUSR2\t|终止|\t用户信号，进程可自定义用途|\n|13|\tSIGPIPE\t|终止|\t向某个没有读取的管道中写入数据|\n|14|\tSIGALRM\t|终止|\t时钟中断(闹钟)|\n|15|\tSIGTERM\t|终止|\t进程终止|\n|16|\tSIGSTKFLT\t|终止|\t协处理器栈错误|\n|17|\tSIGCHLD\t|忽略|\t子进程退出或中断|\n|18|\tSIGCONT\t|继续|\t如进程停止状态则开始运行|\n|19|\tSIGSTOP\t|停止|\t停止进程运行|\n|20|\tSIGSTP\t|停止|\t键盘产生的停止|\n|21|\tSIGTTIN\t|停止|\t后台进程请求输入|\n|22|\tSIGTTOU\t|停止|\t后台进程请求输出|\n|23|\tSIGURG\t|忽略\t|socket发生紧急情况|\n|24|\tSIGXCPU\t|dump|\tCPU时间限制被打破|\n|25|\tSIGXFSZ\t|dump|\t文件大小限制被打破|\n|26|\tSIGVTALRM|\t终止|\t虚拟定时时钟|\n|27|\tSIGPROF\t|终止|\tprofile timer clock|\n|28|\tSIGWINCH\t|忽略|\t窗口尺寸调整|\n|29|\tSIGIO/SIGPOLL|\t终止|\tI/O可用|\n|30|\tSIGPWR\t|终止|\t电源异常|\n|31|\tSIGSYS／SYSUNUSED|\tdump| 系统调用异常|\n\n在不同系统中同一数值可能会代表不同的信号，因此，最好使用信号名而不是信号值。\n\n信号的数值越小，则优先级越高。当进程收到多个待处理信号时，总是先处理优先级别高的信号。\n\n","slug":"iOS学习笔记/iOS系统学习/iOS之异常处理","published":1,"date":"2019-03-24T12:45:58.000Z","updated":"2019-03-27T15:33:02.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj7001g8n7u7k11dliy","content":"<p>1、异常日志收集</p>\n<ul>\n<li>   Xcode、App Store</li>\n<li>  第三方 </li>\n<li>自己收集<pre><code>  跟踪异常产生的时机并捕捉、处理：上报之类\n  [iOS Swift Crash的捕获](http://www.cocoachina.com/ios/20170816/20270.html)\n  [漫谈iOS Crash收集框架](https://nianxi.net/ios/ios-crash-reporter.html)\n  [dSYMTools](https://blog.csdn.net/wiseuc_jianghai/article/details/78031638)\n  [DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)[DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)\n  \n</code></pre>\n2、异常日志分析</li>\n</ul>\n<p>一、.dSYM</p>\n<p>.dSYM(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的DWARF（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：</p>\n<pre><code>.xcarchive\n--dSYMs\n  |--Your.app.dSYM\n    |--Contents\n      |--Resources\n        |--DWARF\n        \n</code></pre>\n<p>二、确定符号表和崩溃日志的一致性</p>\n<p>有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。</p>\n<p>1、从崩溃日志中获取UUID</p>\n<p>崩溃日志比较靠下的位置有个Binary Images模块，其第一行内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Binary Images:</span><br><span class=\"line\">0x1f000 - 0x906fff sd_doctor_ios armv7  &lt;eef4e325f9d6393f93e87b7ee327a5ea&gt; &#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;8BEEC659-8263-4092-A2DC-EF48060BB142&#x2F;sd_doctor_ios.app&#x2F;sd_doctor_ios</span><br></pre></td></tr></table></figure>\n\n<p>从中可以看到关于你应用的若干信息：</p>\n<p>代码段的起终地址为：0x1f000 - 0x906fff</p>\n<p>运行你应用的CPU指令集为：armv7</p>\n<p>应用的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（不区分大小写）</p>\n<p>2、从符号表中获取UUID</p>\n<p>执行以下命令从符号表中提取UUID：</p>\n<pre><code>dwarfdump --uuid Your.app.dSYM\ndwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your\n</code></pre>\n<p>由此得到armv7指令集的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。</p>\n<p>三、计算崩溃符号表地址<br>以下面的崩溃堆栈为例：</p>\n<pre><code>Thread 0:\n0   libobjc.A.dylib                   0x33f10f60 0x33efe000 + 77664\n1   Foundation                        0x273526ac 0x2734a000 + 34476\n2   Foundation                        0x27355c3e 0x2734a000 + 48190\n3   UIKit                             0x29ef9d1c 0x29bbc000 + 3398940\n4   UIKit                             0x29ef9c9a 0x29bbc000 + 3398810\n5   UIKit                             0x29ef954c 0x29bbc000 + 3396940\n6   UIKit                             0x29c3a16a 0x29bbc000 + 516458\n7   UIKit                             0x29e4b8e6 0x29bbc000 + 2685158\n8   UIKit                             0x29c3a128 0x29bbc000 + 516392\n9   Your                              0x000f0846 0xa2000 + 321606\n10  UIKit                             0x29e90fb2 0x29bbc000 + 2969522\n11  UIKit                             0x29e91076 0x29bbc000 + 2969718\n12  UIKit                             0x29e867cc 0x29bbc000 + 2926540\n13  UIKit                             0x29c9e8ea 0x29bbc000 + 927978\n14  UIKit                             0x29bc8a6a 0x29bbc000 + 51818\n15  QuartzCore                        0x295f0a08 0x295e4000 + 51720\n16  QuartzCore                        0x295ec3e0 0x295e4000 + 33760\n17  QuartzCore                        0x295ec268 0x295e4000 + 33384\n18  QuartzCore                        0x295ebc4c 0x295e4000 + 31820\n19  QuartzCore                        0x295eba50 0x295e4000 + 31312\n20  QuartzCore                        0x295e5928 0x295e4000 + 6440\n21  CoreFoundation                    0x266d0d92 0x26604000 + 839058\n22  CoreFoundation                    0x266ce44e 0x26604000 + 828494\n23  CoreFoundation                    0x266ce856 0x26604000 + 829526\n24  CoreFoundation                    0x2661c3bc 0x26604000 + 99260\n25  CoreFoundation                    0x2661c1ce 0x26604000 + 98766\n26  GraphicsServices                  0x2da1a0a4 0x2da11000 + 37028\n27  UIKit                             0x29c2a7ac 0x29bbc000 + 452524\n28  Your                              0x0024643a 0xa2000 + 1721402\n29  libdyld.dylib                     0x34484aac 0x34483000 + 6828\n</code></pre>\n<p>1、 符号表堆栈地址计算方式</p>\n<p>要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址0x000f0846，该进程的运行时起始地址是0xa2000，崩溃处距离进程起始地址的偏移量为十进制的321606(对应十六进制为0x4E846)。三者对应关系：</p>\n<pre><code>0x000f0846 = 0xa2000 + 0x4E846\n</code></pre>\n<p>对应的公式为：</p>\n<pre><code>运行时堆栈地址 = 运行时起始地址 + 偏移量\n</code></pre>\n<p>崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：</p>\n<pre><code>符号表堆栈地址 = 符号表起始地址 + 偏移量\n</code></pre>\n<p>2、获取符号表中的TEXT段起始地址</p>\n<p>符号表中TEXT段的起始地址可以通过以下命令获得：</p>\n<pre><code>$otool -l Your.app.dSYM/Contents/Resources/DWARF/Your\n</code></pre>\n<p>运行结果中的片段如下：</p>\n<pre><code>Load command 3\n      cmd LC_SEGMENT\n  cmdsize 736\n  segname __TEXT\n   vmaddr 0x00004000\n   vmsize 0x00700000\n  fileoff 0\n filesize 0\n  maxprot 0x00000005\n initprot 0x00000005\n   nsects 10\n    flags 0x0\n    \n</code></pre>\n<p>其中的vmaddr 0x00004000字段即为TEXT段的起始地址。</p>\n<p>3、计算符号表地址</p>\n<p>由公式：</p>\n<pre><code>符号表堆栈地址 = 符号表起始地址 + 偏移量\n</code></pre>\n<p>可得：</p>\n<pre><code>0x52846 = 0x4E846 + 0x4000\n</code></pre>\n<p>即符号表中的崩溃地址为0x52846，接下来就可以根据这个地址解析出崩溃位置了。</p>\n<p>四、崩溃信息还原</p>\n<p>有了符号表的崩溃地址，有以下几种方式解析崩溃信息：</p>\n<p>1、dwarfdump</p>\n<p>命令如下：</p>\n<pre><code>$dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep &#39;Line table&#39;\n</code></pre>\n<p>需要注意的是：    </p>\n<pre><code>这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集\n</code></pre>\n<p>比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。</p>\n<p>—lookup后面跟的一定是经过准确计算的符号表中的崩溃地址</p>\n<p>使用dwarfdump解析的结果较杂乱，因此使用grep命令抓取其中关键点展示出来</p>\n<p>运行结果如下：</p>\n<pre><code>Line table dir : &#39;/data/.../Src/OBDConnectSetting/Controller&#39;\nLine table file: &#39;OBDFirstConnectViewController.m&#39; line 882, column 5 with start address 0x000000000052768\n</code></pre>\n<p>其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。</p>\n<p>2、atos</p>\n<p>atos是另一种更加简洁的崩溃日志解析方法，使用方式如下：</p>\n<pre><code> $atos -o LuBao -arch armv7 0x52846\n</code></pre>\n<p>其执行结果如下：</p>\n<pre><code>-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n</code></pre>\n<p>相对dwarfdump命令的解析结果，更加简洁直观的指出了崩溃发生的位置。</p>\n<p>3、无需符号表崩溃地址的解析方式</p>\n<p>实际上，atos还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：</p>\n<pre><code>$atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846\n</code></pre>\n<p>其中-l选项指定了二进制文件在运行时的起始地址0xa2000（获取方式见Binary Images相关内容）,后面跟的是崩溃发生的运行时地址0x000f0846，解析结果和使用计算得到的符号表中崩溃地址一致：</p>\n<pre><code>-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n</code></pre>\n<p>五、参考文档</p>\n<ul>\n<li><p><a href=\"https://developer.apple.com/library/mac/qa/qa1765/_index.html\">How to Match a Crash Report to a Build</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html\">CrashReporter</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/ios/technotes/tn2151/_index.html\">Understanding and Analyzing iOS Application Crash Reports</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/a/12464678/2293677\">atos and dwarfdump won’t symbolicate my address</a></p>\n</li>\n</ul>\n<p><strong>原文参考：</strong><a href=\"http://www.cocoachina.com/ios/20150803/12806.html\">手动解析CrashLog</a></p>\n<p>3、异常处理<br>4、异常规避</p>\n<ul>\n<li>内存地址分配</li>\n<li>日志源文件</li>\n<li>异常产生</li>\n</ul>\n<p>Linux系统中，支持两类信号</p>\n<p>1.POSIX标准的规则信号(regular signal，编号1－31)</p>\n<p>2.实时信号(real-time signal，编号32－63)</p>\n<p>对于regular signal来说，无论发送多少次，在接收进程处理之前，重复的信号会被合并为一个（每一种regular signal对应于系统进程表项中软中断字段的一个比特，因此不同的信号可以同时存在，同一信号仅能表示有或无而不能表示重复的次数)；</p>\n<p>而real-time signal发送多少次，就会在接收进程的信号队列中出现多少次。<br>Linux在i386上的31个规则信号(regular signal)</p>\n<pre><code>kill -l\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>编号</th>\n<th>信号名称</th>\n<th>缺省动作</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>SIGHUP</td>\n<td>终止</td>\n<td>终止控制终端或进程</td>\n</tr>\n<tr>\n<td>2</td>\n<td>SIGINT</td>\n<td>终止</td>\n<td>键盘产生的中断(Ctrl-C)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>SIGQUIT</td>\n<td>dump</td>\n<td>键盘产生的退出</td>\n</tr>\n<tr>\n<td>4</td>\n<td>SIGILL</td>\n<td>dump</td>\n<td>非法指令</td>\n</tr>\n<tr>\n<td>5</td>\n<td>SIGTRAP</td>\n<td>dump</td>\n<td>debug中断</td>\n</tr>\n<tr>\n<td>6</td>\n<td>SIGABRT／SIGIOT</td>\n<td>dump</td>\n<td>异常中止</td>\n</tr>\n<tr>\n<td>7</td>\n<td>SIGBUS／SIGEMT</td>\n<td>dump</td>\n<td>总线异常/EMT指令</td>\n</tr>\n<tr>\n<td>8</td>\n<td>SIGFPE</td>\n<td>dump</td>\n<td>浮点运算溢出</td>\n</tr>\n<tr>\n<td>9</td>\n<td>SIGKILL</td>\n<td>终止</td>\n<td>强制进程终止</td>\n</tr>\n<tr>\n<td>10</td>\n<td>SIGUSR1</td>\n<td>终止</td>\n<td>用户信号,进程可自定义用途</td>\n</tr>\n<tr>\n<td>11</td>\n<td>SIGSEGV</td>\n<td>dump</td>\n<td>非法内存地址引用</td>\n</tr>\n<tr>\n<td>12</td>\n<td>SIGUSR2</td>\n<td>终止</td>\n<td>用户信号，进程可自定义用途</td>\n</tr>\n<tr>\n<td>13</td>\n<td>SIGPIPE</td>\n<td>终止</td>\n<td>向某个没有读取的管道中写入数据</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SIGALRM</td>\n<td>终止</td>\n<td>时钟中断(闹钟)</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SIGTERM</td>\n<td>终止</td>\n<td>进程终止</td>\n</tr>\n<tr>\n<td>16</td>\n<td>SIGSTKFLT</td>\n<td>终止</td>\n<td>协处理器栈错误</td>\n</tr>\n<tr>\n<td>17</td>\n<td>SIGCHLD</td>\n<td>忽略</td>\n<td>子进程退出或中断</td>\n</tr>\n<tr>\n<td>18</td>\n<td>SIGCONT</td>\n<td>继续</td>\n<td>如进程停止状态则开始运行</td>\n</tr>\n<tr>\n<td>19</td>\n<td>SIGSTOP</td>\n<td>停止</td>\n<td>停止进程运行</td>\n</tr>\n<tr>\n<td>20</td>\n<td>SIGSTP</td>\n<td>停止</td>\n<td>键盘产生的停止</td>\n</tr>\n<tr>\n<td>21</td>\n<td>SIGTTIN</td>\n<td>停止</td>\n<td>后台进程请求输入</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SIGTTOU</td>\n<td>停止</td>\n<td>后台进程请求输出</td>\n</tr>\n<tr>\n<td>23</td>\n<td>SIGURG</td>\n<td>忽略</td>\n<td>socket发生紧急情况</td>\n</tr>\n<tr>\n<td>24</td>\n<td>SIGXCPU</td>\n<td>dump</td>\n<td>CPU时间限制被打破</td>\n</tr>\n<tr>\n<td>25</td>\n<td>SIGXFSZ</td>\n<td>dump</td>\n<td>文件大小限制被打破</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SIGVTALRM</td>\n<td>终止</td>\n<td>虚拟定时时钟</td>\n</tr>\n<tr>\n<td>27</td>\n<td>SIGPROF</td>\n<td>终止</td>\n<td>profile timer clock</td>\n</tr>\n<tr>\n<td>28</td>\n<td>SIGWINCH</td>\n<td>忽略</td>\n<td>窗口尺寸调整</td>\n</tr>\n<tr>\n<td>29</td>\n<td>SIGIO/SIGPOLL</td>\n<td>终止</td>\n<td>I/O可用</td>\n</tr>\n<tr>\n<td>30</td>\n<td>SIGPWR</td>\n<td>终止</td>\n<td>电源异常</td>\n</tr>\n<tr>\n<td>31</td>\n<td>SIGSYS／SYSUNUSED</td>\n<td>dump</td>\n<td>系统调用异常</td>\n</tr>\n</tbody></table>\n<p>在不同系统中同一数值可能会代表不同的信号，因此，最好使用信号名而不是信号值。</p>\n<p>信号的数值越小，则优先级越高。当进程收到多个待处理信号时，总是先处理优先级别高的信号。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、异常日志收集</p>\n<ul>\n<li>   Xcode、App Store</li>\n<li>  第三方 </li>\n<li>自己收集<pre><code>  跟踪异常产生的时机并捕捉、处理：上报之类\n  [iOS Swift Crash的捕获](http://www.cocoachina.com/ios/20170816/20270.html)\n  [漫谈iOS Crash收集框架](https://nianxi.net/ios/ios-crash-reporter.html)\n  [dSYMTools](https://blog.csdn.net/wiseuc_jianghai/article/details/78031638)\n  [DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)[DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)\n  \n</code></pre>\n2、异常日志分析</li>\n</ul>\n<p>一、.dSYM</p>\n<p>.dSYM(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的DWARF（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：</p>\n<pre><code>.xcarchive\n--dSYMs\n  |--Your.app.dSYM\n    |--Contents\n      |--Resources\n        |--DWARF\n        \n</code></pre>\n<p>二、确定符号表和崩溃日志的一致性</p>\n<p>有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。</p>\n<p>1、从崩溃日志中获取UUID</p>\n<p>崩溃日志比较靠下的位置有个Binary Images模块，其第一行内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Binary Images:</span><br><span class=\"line\">0x1f000 - 0x906fff sd_doctor_ios armv7  &lt;eef4e325f9d6393f93e87b7ee327a5ea&gt; &#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;8BEEC659-8263-4092-A2DC-EF48060BB142&#x2F;sd_doctor_ios.app&#x2F;sd_doctor_ios</span><br></pre></td></tr></table></figure>\n\n<p>从中可以看到关于你应用的若干信息：</p>\n<p>代码段的起终地址为：0x1f000 - 0x906fff</p>\n<p>运行你应用的CPU指令集为：armv7</p>\n<p>应用的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（不区分大小写）</p>\n<p>2、从符号表中获取UUID</p>\n<p>执行以下命令从符号表中提取UUID：</p>\n<pre><code>dwarfdump --uuid Your.app.dSYM\ndwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your\n</code></pre>\n<p>由此得到armv7指令集的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。</p>\n<p>三、计算崩溃符号表地址<br>以下面的崩溃堆栈为例：</p>\n<pre><code>Thread 0:\n0   libobjc.A.dylib                   0x33f10f60 0x33efe000 + 77664\n1   Foundation                        0x273526ac 0x2734a000 + 34476\n2   Foundation                        0x27355c3e 0x2734a000 + 48190\n3   UIKit                             0x29ef9d1c 0x29bbc000 + 3398940\n4   UIKit                             0x29ef9c9a 0x29bbc000 + 3398810\n5   UIKit                             0x29ef954c 0x29bbc000 + 3396940\n6   UIKit                             0x29c3a16a 0x29bbc000 + 516458\n7   UIKit                             0x29e4b8e6 0x29bbc000 + 2685158\n8   UIKit                             0x29c3a128 0x29bbc000 + 516392\n9   Your                              0x000f0846 0xa2000 + 321606\n10  UIKit                             0x29e90fb2 0x29bbc000 + 2969522\n11  UIKit                             0x29e91076 0x29bbc000 + 2969718\n12  UIKit                             0x29e867cc 0x29bbc000 + 2926540\n13  UIKit                             0x29c9e8ea 0x29bbc000 + 927978\n14  UIKit                             0x29bc8a6a 0x29bbc000 + 51818\n15  QuartzCore                        0x295f0a08 0x295e4000 + 51720\n16  QuartzCore                        0x295ec3e0 0x295e4000 + 33760\n17  QuartzCore                        0x295ec268 0x295e4000 + 33384\n18  QuartzCore                        0x295ebc4c 0x295e4000 + 31820\n19  QuartzCore                        0x295eba50 0x295e4000 + 31312\n20  QuartzCore                        0x295e5928 0x295e4000 + 6440\n21  CoreFoundation                    0x266d0d92 0x26604000 + 839058\n22  CoreFoundation                    0x266ce44e 0x26604000 + 828494\n23  CoreFoundation                    0x266ce856 0x26604000 + 829526\n24  CoreFoundation                    0x2661c3bc 0x26604000 + 99260\n25  CoreFoundation                    0x2661c1ce 0x26604000 + 98766\n26  GraphicsServices                  0x2da1a0a4 0x2da11000 + 37028\n27  UIKit                             0x29c2a7ac 0x29bbc000 + 452524\n28  Your                              0x0024643a 0xa2000 + 1721402\n29  libdyld.dylib                     0x34484aac 0x34483000 + 6828\n</code></pre>\n<p>1、 符号表堆栈地址计算方式</p>\n<p>要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址0x000f0846，该进程的运行时起始地址是0xa2000，崩溃处距离进程起始地址的偏移量为十进制的321606(对应十六进制为0x4E846)。三者对应关系：</p>\n<pre><code>0x000f0846 = 0xa2000 + 0x4E846\n</code></pre>\n<p>对应的公式为：</p>\n<pre><code>运行时堆栈地址 = 运行时起始地址 + 偏移量\n</code></pre>\n<p>崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：</p>\n<pre><code>符号表堆栈地址 = 符号表起始地址 + 偏移量\n</code></pre>\n<p>2、获取符号表中的TEXT段起始地址</p>\n<p>符号表中TEXT段的起始地址可以通过以下命令获得：</p>\n<pre><code>$otool -l Your.app.dSYM/Contents/Resources/DWARF/Your\n</code></pre>\n<p>运行结果中的片段如下：</p>\n<pre><code>Load command 3\n      cmd LC_SEGMENT\n  cmdsize 736\n  segname __TEXT\n   vmaddr 0x00004000\n   vmsize 0x00700000\n  fileoff 0\n filesize 0\n  maxprot 0x00000005\n initprot 0x00000005\n   nsects 10\n    flags 0x0\n    \n</code></pre>\n<p>其中的vmaddr 0x00004000字段即为TEXT段的起始地址。</p>\n<p>3、计算符号表地址</p>\n<p>由公式：</p>\n<pre><code>符号表堆栈地址 = 符号表起始地址 + 偏移量\n</code></pre>\n<p>可得：</p>\n<pre><code>0x52846 = 0x4E846 + 0x4000\n</code></pre>\n<p>即符号表中的崩溃地址为0x52846，接下来就可以根据这个地址解析出崩溃位置了。</p>\n<p>四、崩溃信息还原</p>\n<p>有了符号表的崩溃地址，有以下几种方式解析崩溃信息：</p>\n<p>1、dwarfdump</p>\n<p>命令如下：</p>\n<pre><code>$dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep &#39;Line table&#39;\n</code></pre>\n<p>需要注意的是：    </p>\n<pre><code>这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集\n</code></pre>\n<p>比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。</p>\n<p>—lookup后面跟的一定是经过准确计算的符号表中的崩溃地址</p>\n<p>使用dwarfdump解析的结果较杂乱，因此使用grep命令抓取其中关键点展示出来</p>\n<p>运行结果如下：</p>\n<pre><code>Line table dir : &#39;/data/.../Src/OBDConnectSetting/Controller&#39;\nLine table file: &#39;OBDFirstConnectViewController.m&#39; line 882, column 5 with start address 0x000000000052768\n</code></pre>\n<p>其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。</p>\n<p>2、atos</p>\n<p>atos是另一种更加简洁的崩溃日志解析方法，使用方式如下：</p>\n<pre><code> $atos -o LuBao -arch armv7 0x52846\n</code></pre>\n<p>其执行结果如下：</p>\n<pre><code>-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n</code></pre>\n<p>相对dwarfdump命令的解析结果，更加简洁直观的指出了崩溃发生的位置。</p>\n<p>3、无需符号表崩溃地址的解析方式</p>\n<p>实际上，atos还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：</p>\n<pre><code>$atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846\n</code></pre>\n<p>其中-l选项指定了二进制文件在运行时的起始地址0xa2000（获取方式见Binary Images相关内容）,后面跟的是崩溃发生的运行时地址0x000f0846，解析结果和使用计算得到的符号表中崩溃地址一致：</p>\n<pre><code>-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n</code></pre>\n<p>五、参考文档</p>\n<ul>\n<li><p><a href=\"https://developer.apple.com/library/mac/qa/qa1765/_index.html\">How to Match a Crash Report to a Build</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html\">CrashReporter</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/ios/technotes/tn2151/_index.html\">Understanding and Analyzing iOS Application Crash Reports</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/a/12464678/2293677\">atos and dwarfdump won’t symbolicate my address</a></p>\n</li>\n</ul>\n<p><strong>原文参考：</strong><a href=\"http://www.cocoachina.com/ios/20150803/12806.html\">手动解析CrashLog</a></p>\n<p>3、异常处理<br>4、异常规避</p>\n<ul>\n<li>内存地址分配</li>\n<li>日志源文件</li>\n<li>异常产生</li>\n</ul>\n<p>Linux系统中，支持两类信号</p>\n<p>1.POSIX标准的规则信号(regular signal，编号1－31)</p>\n<p>2.实时信号(real-time signal，编号32－63)</p>\n<p>对于regular signal来说，无论发送多少次，在接收进程处理之前，重复的信号会被合并为一个（每一种regular signal对应于系统进程表项中软中断字段的一个比特，因此不同的信号可以同时存在，同一信号仅能表示有或无而不能表示重复的次数)；</p>\n<p>而real-time signal发送多少次，就会在接收进程的信号队列中出现多少次。<br>Linux在i386上的31个规则信号(regular signal)</p>\n<pre><code>kill -l\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>编号</th>\n<th>信号名称</th>\n<th>缺省动作</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>SIGHUP</td>\n<td>终止</td>\n<td>终止控制终端或进程</td>\n</tr>\n<tr>\n<td>2</td>\n<td>SIGINT</td>\n<td>终止</td>\n<td>键盘产生的中断(Ctrl-C)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>SIGQUIT</td>\n<td>dump</td>\n<td>键盘产生的退出</td>\n</tr>\n<tr>\n<td>4</td>\n<td>SIGILL</td>\n<td>dump</td>\n<td>非法指令</td>\n</tr>\n<tr>\n<td>5</td>\n<td>SIGTRAP</td>\n<td>dump</td>\n<td>debug中断</td>\n</tr>\n<tr>\n<td>6</td>\n<td>SIGABRT／SIGIOT</td>\n<td>dump</td>\n<td>异常中止</td>\n</tr>\n<tr>\n<td>7</td>\n<td>SIGBUS／SIGEMT</td>\n<td>dump</td>\n<td>总线异常/EMT指令</td>\n</tr>\n<tr>\n<td>8</td>\n<td>SIGFPE</td>\n<td>dump</td>\n<td>浮点运算溢出</td>\n</tr>\n<tr>\n<td>9</td>\n<td>SIGKILL</td>\n<td>终止</td>\n<td>强制进程终止</td>\n</tr>\n<tr>\n<td>10</td>\n<td>SIGUSR1</td>\n<td>终止</td>\n<td>用户信号,进程可自定义用途</td>\n</tr>\n<tr>\n<td>11</td>\n<td>SIGSEGV</td>\n<td>dump</td>\n<td>非法内存地址引用</td>\n</tr>\n<tr>\n<td>12</td>\n<td>SIGUSR2</td>\n<td>终止</td>\n<td>用户信号，进程可自定义用途</td>\n</tr>\n<tr>\n<td>13</td>\n<td>SIGPIPE</td>\n<td>终止</td>\n<td>向某个没有读取的管道中写入数据</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SIGALRM</td>\n<td>终止</td>\n<td>时钟中断(闹钟)</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SIGTERM</td>\n<td>终止</td>\n<td>进程终止</td>\n</tr>\n<tr>\n<td>16</td>\n<td>SIGSTKFLT</td>\n<td>终止</td>\n<td>协处理器栈错误</td>\n</tr>\n<tr>\n<td>17</td>\n<td>SIGCHLD</td>\n<td>忽略</td>\n<td>子进程退出或中断</td>\n</tr>\n<tr>\n<td>18</td>\n<td>SIGCONT</td>\n<td>继续</td>\n<td>如进程停止状态则开始运行</td>\n</tr>\n<tr>\n<td>19</td>\n<td>SIGSTOP</td>\n<td>停止</td>\n<td>停止进程运行</td>\n</tr>\n<tr>\n<td>20</td>\n<td>SIGSTP</td>\n<td>停止</td>\n<td>键盘产生的停止</td>\n</tr>\n<tr>\n<td>21</td>\n<td>SIGTTIN</td>\n<td>停止</td>\n<td>后台进程请求输入</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SIGTTOU</td>\n<td>停止</td>\n<td>后台进程请求输出</td>\n</tr>\n<tr>\n<td>23</td>\n<td>SIGURG</td>\n<td>忽略</td>\n<td>socket发生紧急情况</td>\n</tr>\n<tr>\n<td>24</td>\n<td>SIGXCPU</td>\n<td>dump</td>\n<td>CPU时间限制被打破</td>\n</tr>\n<tr>\n<td>25</td>\n<td>SIGXFSZ</td>\n<td>dump</td>\n<td>文件大小限制被打破</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SIGVTALRM</td>\n<td>终止</td>\n<td>虚拟定时时钟</td>\n</tr>\n<tr>\n<td>27</td>\n<td>SIGPROF</td>\n<td>终止</td>\n<td>profile timer clock</td>\n</tr>\n<tr>\n<td>28</td>\n<td>SIGWINCH</td>\n<td>忽略</td>\n<td>窗口尺寸调整</td>\n</tr>\n<tr>\n<td>29</td>\n<td>SIGIO/SIGPOLL</td>\n<td>终止</td>\n<td>I/O可用</td>\n</tr>\n<tr>\n<td>30</td>\n<td>SIGPWR</td>\n<td>终止</td>\n<td>电源异常</td>\n</tr>\n<tr>\n<td>31</td>\n<td>SIGSYS／SYSUNUSED</td>\n<td>dump</td>\n<td>系统调用异常</td>\n</tr>\n</tbody></table>\n<p>在不同系统中同一数值可能会代表不同的信号，因此，最好使用信号名而不是信号值。</p>\n<p>信号的数值越小，则优先级越高。当进程收到多个待处理信号时，总是先处理优先级别高的信号。</p>\n"},{"_content":"MVC\n\nMV-VM\n\nRxFeedback\n\nReactorKit\n\n[软件架构入门](http://www.ruanyifeng.com/blog/2016/09/software-architecture.html)","source":"_posts/iOS学习笔记/iOS系统学习/iOS之架构·框架.md","raw":"MVC\n\nMV-VM\n\nRxFeedback\n\nReactorKit\n\n[软件架构入门](http://www.ruanyifeng.com/blog/2016/09/software-architecture.html)","slug":"iOS学习笔记/iOS系统学习/iOS之架构·框架","published":1,"date":"2019-03-24T12:58:17.000Z","updated":"2019-03-28T07:55:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj8001h8n7u9lph5yf1","content":"<p>MVC</p>\n<p>MV-VM</p>\n<p>RxFeedback</p>\n<p>ReactorKit</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/09/software-architecture.html\">软件架构入门</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>MVC</p>\n<p>MV-VM</p>\n<p>RxFeedback</p>\n<p>ReactorKit</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/09/software-architecture.html\">软件架构入门</a></p>\n"},{"_content":"1、[CocoaPod](./iOS之开发工具/cocoapod.md)","source":"_posts/iOS学习笔记/iOS系统学习/iOS之组件化.md","raw":"1、[CocoaPod](./iOS之开发工具/cocoapod.md)","slug":"iOS学习笔记/iOS系统学习/iOS之组件化","published":1,"date":"2019-03-24T13:01:23.000Z","updated":"2019-04-13T07:07:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj8001i8n7u20utau0c","content":"<p>1、<a href=\"./iOS%E4%B9%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/cocoapod.md\">CocoaPod</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、<a href=\"./iOS%E4%B9%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/cocoapod.md\">CocoaPod</a></p>\n"},{"_content":"OpenGL\n\nGPUimage\n\nOpenCV","source":"_posts/iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之图片.md","raw":"OpenGL\n\nGPUimage\n\nOpenCV","slug":"iOS学习笔记/iOS系统学习/iOS之多媒体/iOS之图片","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-03-24T13:24:24.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgj9001j8n7u93yydhn6","content":"<p>OpenGL</p>\n<p>GPUimage</p>\n<p>OpenCV</p>\n","site":{"data":{}},"excerpt":"","more":"<p>OpenGL</p>\n<p>GPUimage</p>\n<p>OpenCV</p>\n"},{"_content":"Bundle Resources\n\nSwift UI\n\nPencilKit\n\nRealityKit\n\nBackgroundTasks\n\nCombine\n\nQuickLookThumbnailing\n\nCore Audio Types\n\nCore Haptics\n\nSoundAnalysis\n\nVisionKit\n\nMaps Web Snapshots\n\nLinkPresentation\n\nAPPle CryptoKit\n\nIOUSBHost\n\nLogging\n\nMetricKit\n\nNetWorkingDriveKit\n\nDriveKit\n\nOSLog\n\nEndpointSecurity\n\nExecutionPolicy\n\nSystemExtensions\n\nUSBDriverKit\n\nHIDDriverKit\n","source":"_posts/iOS学习笔记/iOS系统学习/WWDC/WWDC2019.md","raw":"Bundle Resources\n\nSwift UI\n\nPencilKit\n\nRealityKit\n\nBackgroundTasks\n\nCombine\n\nQuickLookThumbnailing\n\nCore Audio Types\n\nCore Haptics\n\nSoundAnalysis\n\nVisionKit\n\nMaps Web Snapshots\n\nLinkPresentation\n\nAPPle CryptoKit\n\nIOUSBHost\n\nLogging\n\nMetricKit\n\nNetWorkingDriveKit\n\nDriveKit\n\nOSLog\n\nEndpointSecurity\n\nExecutionPolicy\n\nSystemExtensions\n\nUSBDriverKit\n\nHIDDriverKit\n","slug":"iOS学习笔记/iOS系统学习/WWDC/WWDC2019","published":1,"date":"2019-08-03T03:24:52.000Z","updated":"2019-08-03T03:24:54.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjb001k8n7ugkvv5jvj","content":"<p>Bundle Resources</p>\n<p>Swift UI</p>\n<p>PencilKit</p>\n<p>RealityKit</p>\n<p>BackgroundTasks</p>\n<p>Combine</p>\n<p>QuickLookThumbnailing</p>\n<p>Core Audio Types</p>\n<p>Core Haptics</p>\n<p>SoundAnalysis</p>\n<p>VisionKit</p>\n<p>Maps Web Snapshots</p>\n<p>LinkPresentation</p>\n<p>APPle CryptoKit</p>\n<p>IOUSBHost</p>\n<p>Logging</p>\n<p>MetricKit</p>\n<p>NetWorkingDriveKit</p>\n<p>DriveKit</p>\n<p>OSLog</p>\n<p>EndpointSecurity</p>\n<p>ExecutionPolicy</p>\n<p>SystemExtensions</p>\n<p>USBDriverKit</p>\n<p>HIDDriverKit</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Bundle Resources</p>\n<p>Swift UI</p>\n<p>PencilKit</p>\n<p>RealityKit</p>\n<p>BackgroundTasks</p>\n<p>Combine</p>\n<p>QuickLookThumbnailing</p>\n<p>Core Audio Types</p>\n<p>Core Haptics</p>\n<p>SoundAnalysis</p>\n<p>VisionKit</p>\n<p>Maps Web Snapshots</p>\n<p>LinkPresentation</p>\n<p>APPle CryptoKit</p>\n<p>IOUSBHost</p>\n<p>Logging</p>\n<p>MetricKit</p>\n<p>NetWorkingDriveKit</p>\n<p>DriveKit</p>\n<p>OSLog</p>\n<p>EndpointSecurity</p>\n<p>ExecutionPolicy</p>\n<p>SystemExtensions</p>\n<p>USBDriverKit</p>\n<p>HIDDriverKit</p>\n"},{"_content":"1、KSCrash 简明教程\nA Brief Tour of the KSCrash Code and Architecture\n\n\nKSCrash used to be simple enough that a quick perusal of the source code would be enough to understand how it worked, but it's gotten big enough now that there should be some guideposts to help readers along. This document introduces you to the main code areas of KSCrash.\n\nThe Heart of KSCrash\nThe heart of KSCrash lives in KSCrashC.c\n\nThis file contains all of the most important access points to the KSCrash system.\n\nKSCrashC.c functions are also Objective-C/Swift wrapped in KSCrash.m\n\nThese are the main parts of KSCrashC.c:\n\nInstallation\nkscrash_install() installs and prepares the KSCrash system to handle crashes. You can configure KSCrash using the various configuration functions in this file (kscrash_setMonitoring() and such) before or after install.\n\nConfiguration\nAll of the main configuration settings are set via kscrash_setXYZ().\n\nApp State\nApple operating environments offer a number of notifications that tell you the current app state. These are hooked into various kscrash_notifyXYZ() functions.\n\nCrash Entry Point\nThe function onCrash is the main function called after a crash is reported. It handles examining the application state, writing the JSON crash report, and then allowing the crash to take its natural course.\n\nReport Management\nThis file also contains the low level primitive functions for managing crash reports: kscrash_getReportCount(), kscrash_getReportIDs(), kscrash_readReport(), kscrash_deleteReportWithID()\n\nEnabling / Disabling KSCrash\nYou can use kscrash_setMonitoring() to effectively enable or disable crash reporting at runtime.\n\nDetecting Crashes\nCrashes are detected via one of the monitors, which set up the data in a consistent way before passing control to the function onCrash(). These files are a bit tricky because some of them have to jump through a few hoops to get around OS differences, system idiosyncrasies, and just plain bugs.\n\nRecording Crashes\nCrashes are recorded to a JSON file via kscrashreport_writeStandardReport() in KSCrashReport.c. It makes use of a number of tools to accomplish this.\n\nReport Management\nReport management is primarily done in KSCrashReportStore.c\n\nReporting\nReporting is done using a probably-overcomplicated system of filters and sinks. Generally, to adapt KSCrash to your needs, you'd create your own sink.\n\nInstallations\nThe installation system was an attempt to make the user API a little easier by hiding most of the filter/sink stuff behind a simpler interface. Its success is debatable...\n\nNo code depends on the installation code, and KSCrash can actually work just fine without it.\n\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之性能优化/KSCrash 简明教程.md","raw":"1、KSCrash 简明教程\nA Brief Tour of the KSCrash Code and Architecture\n\n\nKSCrash used to be simple enough that a quick perusal of the source code would be enough to understand how it worked, but it's gotten big enough now that there should be some guideposts to help readers along. This document introduces you to the main code areas of KSCrash.\n\nThe Heart of KSCrash\nThe heart of KSCrash lives in KSCrashC.c\n\nThis file contains all of the most important access points to the KSCrash system.\n\nKSCrashC.c functions are also Objective-C/Swift wrapped in KSCrash.m\n\nThese are the main parts of KSCrashC.c:\n\nInstallation\nkscrash_install() installs and prepares the KSCrash system to handle crashes. You can configure KSCrash using the various configuration functions in this file (kscrash_setMonitoring() and such) before or after install.\n\nConfiguration\nAll of the main configuration settings are set via kscrash_setXYZ().\n\nApp State\nApple operating environments offer a number of notifications that tell you the current app state. These are hooked into various kscrash_notifyXYZ() functions.\n\nCrash Entry Point\nThe function onCrash is the main function called after a crash is reported. It handles examining the application state, writing the JSON crash report, and then allowing the crash to take its natural course.\n\nReport Management\nThis file also contains the low level primitive functions for managing crash reports: kscrash_getReportCount(), kscrash_getReportIDs(), kscrash_readReport(), kscrash_deleteReportWithID()\n\nEnabling / Disabling KSCrash\nYou can use kscrash_setMonitoring() to effectively enable or disable crash reporting at runtime.\n\nDetecting Crashes\nCrashes are detected via one of the monitors, which set up the data in a consistent way before passing control to the function onCrash(). These files are a bit tricky because some of them have to jump through a few hoops to get around OS differences, system idiosyncrasies, and just plain bugs.\n\nRecording Crashes\nCrashes are recorded to a JSON file via kscrashreport_writeStandardReport() in KSCrashReport.c. It makes use of a number of tools to accomplish this.\n\nReport Management\nReport management is primarily done in KSCrashReportStore.c\n\nReporting\nReporting is done using a probably-overcomplicated system of filters and sinks. Generally, to adapt KSCrash to your needs, you'd create your own sink.\n\nInstallations\nThe installation system was an attempt to make the user API a little easier by hiding most of the filter/sink stuff behind a simpler interface. Its success is debatable...\n\nNo code depends on the installation code, and KSCrash can actually work just fine without it.\n\n","slug":"iOS学习笔记/iOS系统学习/iOS之性能优化/KSCrash 简明教程","published":1,"date":"2019-07-23T01:48:40.000Z","updated":"2019-07-23T01:48:40.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjb001l8n7u8mve1q2t","content":"<p>1、KSCrash 简明教程<br>A Brief Tour of the KSCrash Code and Architecture</p>\n<p>KSCrash used to be simple enough that a quick perusal of the source code would be enough to understand how it worked, but it’s gotten big enough now that there should be some guideposts to help readers along. This document introduces you to the main code areas of KSCrash.</p>\n<p>The Heart of KSCrash<br>The heart of KSCrash lives in KSCrashC.c</p>\n<p>This file contains all of the most important access points to the KSCrash system.</p>\n<p>KSCrashC.c functions are also Objective-C/Swift wrapped in KSCrash.m</p>\n<p>These are the main parts of KSCrashC.c:</p>\n<p>Installation<br>kscrash_install() installs and prepares the KSCrash system to handle crashes. You can configure KSCrash using the various configuration functions in this file (kscrash_setMonitoring() and such) before or after install.</p>\n<p>Configuration<br>All of the main configuration settings are set via kscrash_setXYZ().</p>\n<p>App State<br>Apple operating environments offer a number of notifications that tell you the current app state. These are hooked into various kscrash_notifyXYZ() functions.</p>\n<p>Crash Entry Point<br>The function onCrash is the main function called after a crash is reported. It handles examining the application state, writing the JSON crash report, and then allowing the crash to take its natural course.</p>\n<p>Report Management<br>This file also contains the low level primitive functions for managing crash reports: kscrash_getReportCount(), kscrash_getReportIDs(), kscrash_readReport(), kscrash_deleteReportWithID()</p>\n<p>Enabling / Disabling KSCrash<br>You can use kscrash_setMonitoring() to effectively enable or disable crash reporting at runtime.</p>\n<p>Detecting Crashes<br>Crashes are detected via one of the monitors, which set up the data in a consistent way before passing control to the function onCrash(). These files are a bit tricky because some of them have to jump through a few hoops to get around OS differences, system idiosyncrasies, and just plain bugs.</p>\n<p>Recording Crashes<br>Crashes are recorded to a JSON file via kscrashreport_writeStandardReport() in KSCrashReport.c. It makes use of a number of tools to accomplish this.</p>\n<p>Report Management<br>Report management is primarily done in KSCrashReportStore.c</p>\n<p>Reporting<br>Reporting is done using a probably-overcomplicated system of filters and sinks. Generally, to adapt KSCrash to your needs, you’d create your own sink.</p>\n<p>Installations<br>The installation system was an attempt to make the user API a little easier by hiding most of the filter/sink stuff behind a simpler interface. Its success is debatable…</p>\n<p>No code depends on the installation code, and KSCrash can actually work just fine without it.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、KSCrash 简明教程<br>A Brief Tour of the KSCrash Code and Architecture</p>\n<p>KSCrash used to be simple enough that a quick perusal of the source code would be enough to understand how it worked, but it’s gotten big enough now that there should be some guideposts to help readers along. This document introduces you to the main code areas of KSCrash.</p>\n<p>The Heart of KSCrash<br>The heart of KSCrash lives in KSCrashC.c</p>\n<p>This file contains all of the most important access points to the KSCrash system.</p>\n<p>KSCrashC.c functions are also Objective-C/Swift wrapped in KSCrash.m</p>\n<p>These are the main parts of KSCrashC.c:</p>\n<p>Installation<br>kscrash_install() installs and prepares the KSCrash system to handle crashes. You can configure KSCrash using the various configuration functions in this file (kscrash_setMonitoring() and such) before or after install.</p>\n<p>Configuration<br>All of the main configuration settings are set via kscrash_setXYZ().</p>\n<p>App State<br>Apple operating environments offer a number of notifications that tell you the current app state. These are hooked into various kscrash_notifyXYZ() functions.</p>\n<p>Crash Entry Point<br>The function onCrash is the main function called after a crash is reported. It handles examining the application state, writing the JSON crash report, and then allowing the crash to take its natural course.</p>\n<p>Report Management<br>This file also contains the low level primitive functions for managing crash reports: kscrash_getReportCount(), kscrash_getReportIDs(), kscrash_readReport(), kscrash_deleteReportWithID()</p>\n<p>Enabling / Disabling KSCrash<br>You can use kscrash_setMonitoring() to effectively enable or disable crash reporting at runtime.</p>\n<p>Detecting Crashes<br>Crashes are detected via one of the monitors, which set up the data in a consistent way before passing control to the function onCrash(). These files are a bit tricky because some of them have to jump through a few hoops to get around OS differences, system idiosyncrasies, and just plain bugs.</p>\n<p>Recording Crashes<br>Crashes are recorded to a JSON file via kscrashreport_writeStandardReport() in KSCrashReport.c. It makes use of a number of tools to accomplish this.</p>\n<p>Report Management<br>Report management is primarily done in KSCrashReportStore.c</p>\n<p>Reporting<br>Reporting is done using a probably-overcomplicated system of filters and sinks. Generally, to adapt KSCrash to your needs, you’d create your own sink.</p>\n<p>Installations<br>The installation system was an attempt to make the user API a little easier by hiding most of the filter/sink stuff behind a simpler interface. Its success is debatable…</p>\n<p>No code depends on the installation code, and KSCrash can actually work just fine without it.</p>\n"},{"_content":"### [Xcode - 使用 dyld 环境变量进行调试](https://blog.csdn.net/lovechris00/article/details/82290773)\n\n一、使用 `DYLD_PRINT_STATISTICS` 获取启动时间\n\nedit scheme -> run -> arguments里面加入环境变量 DYLD_PRINT_STATISTICS = 1\n\n```\nTotal pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n```\n\n二、DYLD_PRINT 变量列表\n\n* 在终端通过命令：man dyld 可以列出所有的\n\n```\nDYLD_FRAMEWORK_PATH\nDYLD_FALLBACK_FRAMEWORK_PATH\nDYLD_VERSIONED_FRAMEWORK_PATH\nDYLD_LIBRARY_PATH\nDYLD_FALLBACK_LIBRARY_PATH\nDYLD_VERSIONED_LIBRARY_PATH\nDYLD_PRINT_TO_FILE\nDYLD_SHARED_REGION\nDYLD_INSERT_LIBRARIES\nDYLD_FORCE_FLAT_NAMESPACE\nDYLD_IMAGE_SUFFIX\nDYLD_PRINT_OPTS\nDYLD_PRINT_ENV\nDYLD_PRINT_LIBRARIES\nDYLD_BIND_AT_LAUNCH\nDYLD_DISABLE_DOFS\nDYLD_PRINT_APIS\nDYLD_PRINT_BINDINGS\nDYLD_PRINT_INITIALIZERS\nDYLD_PRINT_REBASINGS\nDYLD_PRINT_SEGMENTS\nDYLD_PRINT_STATISTICS\nDYLD_PRINT_DOFS\nDYLD_PRINT_RPATHS\nDYLD_SHARED_CACHE_DIR\nDYLD_SHARED_CACHE_DONT_VALIDATE\n```\n\n详情见：[dyld 命令简介](./dyld.txt)\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之dyld环境变量介绍.md","raw":"### [Xcode - 使用 dyld 环境变量进行调试](https://blog.csdn.net/lovechris00/article/details/82290773)\n\n一、使用 `DYLD_PRINT_STATISTICS` 获取启动时间\n\nedit scheme -> run -> arguments里面加入环境变量 DYLD_PRINT_STATISTICS = 1\n\n```\nTotal pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n```\n\n二、DYLD_PRINT 变量列表\n\n* 在终端通过命令：man dyld 可以列出所有的\n\n```\nDYLD_FRAMEWORK_PATH\nDYLD_FALLBACK_FRAMEWORK_PATH\nDYLD_VERSIONED_FRAMEWORK_PATH\nDYLD_LIBRARY_PATH\nDYLD_FALLBACK_LIBRARY_PATH\nDYLD_VERSIONED_LIBRARY_PATH\nDYLD_PRINT_TO_FILE\nDYLD_SHARED_REGION\nDYLD_INSERT_LIBRARIES\nDYLD_FORCE_FLAT_NAMESPACE\nDYLD_IMAGE_SUFFIX\nDYLD_PRINT_OPTS\nDYLD_PRINT_ENV\nDYLD_PRINT_LIBRARIES\nDYLD_BIND_AT_LAUNCH\nDYLD_DISABLE_DOFS\nDYLD_PRINT_APIS\nDYLD_PRINT_BINDINGS\nDYLD_PRINT_INITIALIZERS\nDYLD_PRINT_REBASINGS\nDYLD_PRINT_SEGMENTS\nDYLD_PRINT_STATISTICS\nDYLD_PRINT_DOFS\nDYLD_PRINT_RPATHS\nDYLD_SHARED_CACHE_DIR\nDYLD_SHARED_CACHE_DONT_VALIDATE\n```\n\n详情见：[dyld 命令简介](./dyld.txt)\n","slug":"iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之dyld环境变量介绍","published":1,"date":"2019-07-09T08:42:17.000Z","updated":"2019-07-09T10:33:26.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjc001m8n7u3u9e4p9q","content":"<h3 id=\"Xcode-使用-dyld-环境变量进行调试\"><a href=\"#Xcode-使用-dyld-环境变量进行调试\" class=\"headerlink\" title=\"Xcode - 使用 dyld 环境变量进行调试\"></a><a href=\"https://blog.csdn.net/lovechris00/article/details/82290773\">Xcode - 使用 dyld 环境变量进行调试</a></h3><p>一、使用 <code>DYLD_PRINT_STATISTICS</code> 获取启动时间</p>\n<p>edit scheme -&gt; run -&gt; arguments里面加入环境变量 DYLD_PRINT_STATISTICS = 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Total pre-main time: 1.3 seconds (100.0%)</span><br><span class=\"line\">             dylib loading time: 531.35 milliseconds (39.9%)</span><br><span class=\"line\">            rebase&#x2F;binding time:  46.17 milliseconds (3.4%)</span><br><span class=\"line\">                ObjC setup time: 178.40 milliseconds (13.4%)</span><br><span class=\"line\">               initializer time: 572.91 milliseconds (43.1%)</span><br><span class=\"line\">               slowest intializers :</span><br><span class=\"line\">                 libSystem.B.dylib :   8.27 milliseconds (0.6%)</span><br><span class=\"line\">        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)</span><br><span class=\"line\">              libglInterpose.dylib : 227.26 milliseconds (17.1%)</span><br><span class=\"line\">             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)</span><br><span class=\"line\">                     sd_doctor_ios : 402.81 milliseconds (30.3%)</span><br></pre></td></tr></table></figure>\n\n<p>二、DYLD_PRINT 变量列表</p>\n<ul>\n<li>在终端通过命令：man dyld 可以列出所有的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DYLD_FRAMEWORK_PATH</span><br><span class=\"line\">DYLD_FALLBACK_FRAMEWORK_PATH</span><br><span class=\"line\">DYLD_VERSIONED_FRAMEWORK_PATH</span><br><span class=\"line\">DYLD_LIBRARY_PATH</span><br><span class=\"line\">DYLD_FALLBACK_LIBRARY_PATH</span><br><span class=\"line\">DYLD_VERSIONED_LIBRARY_PATH</span><br><span class=\"line\">DYLD_PRINT_TO_FILE</span><br><span class=\"line\">DYLD_SHARED_REGION</span><br><span class=\"line\">DYLD_INSERT_LIBRARIES</span><br><span class=\"line\">DYLD_FORCE_FLAT_NAMESPACE</span><br><span class=\"line\">DYLD_IMAGE_SUFFIX</span><br><span class=\"line\">DYLD_PRINT_OPTS</span><br><span class=\"line\">DYLD_PRINT_ENV</span><br><span class=\"line\">DYLD_PRINT_LIBRARIES</span><br><span class=\"line\">DYLD_BIND_AT_LAUNCH</span><br><span class=\"line\">DYLD_DISABLE_DOFS</span><br><span class=\"line\">DYLD_PRINT_APIS</span><br><span class=\"line\">DYLD_PRINT_BINDINGS</span><br><span class=\"line\">DYLD_PRINT_INITIALIZERS</span><br><span class=\"line\">DYLD_PRINT_REBASINGS</span><br><span class=\"line\">DYLD_PRINT_SEGMENTS</span><br><span class=\"line\">DYLD_PRINT_STATISTICS</span><br><span class=\"line\">DYLD_PRINT_DOFS</span><br><span class=\"line\">DYLD_PRINT_RPATHS</span><br><span class=\"line\">DYLD_SHARED_CACHE_DIR</span><br><span class=\"line\">DYLD_SHARED_CACHE_DONT_VALIDATE</span><br></pre></td></tr></table></figure>\n\n<p>详情见：<a href=\"./dyld.txt\">dyld 命令简介</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Xcode-使用-dyld-环境变量进行调试\"><a href=\"#Xcode-使用-dyld-环境变量进行调试\" class=\"headerlink\" title=\"Xcode - 使用 dyld 环境变量进行调试\"></a><a href=\"https://blog.csdn.net/lovechris00/article/details/82290773\">Xcode - 使用 dyld 环境变量进行调试</a></h3><p>一、使用 <code>DYLD_PRINT_STATISTICS</code> 获取启动时间</p>\n<p>edit scheme -&gt; run -&gt; arguments里面加入环境变量 DYLD_PRINT_STATISTICS = 1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Total pre-main time: 1.3 seconds (100.0%)</span><br><span class=\"line\">             dylib loading time: 531.35 milliseconds (39.9%)</span><br><span class=\"line\">            rebase&#x2F;binding time:  46.17 milliseconds (3.4%)</span><br><span class=\"line\">                ObjC setup time: 178.40 milliseconds (13.4%)</span><br><span class=\"line\">               initializer time: 572.91 milliseconds (43.1%)</span><br><span class=\"line\">               slowest intializers :</span><br><span class=\"line\">                 libSystem.B.dylib :   8.27 milliseconds (0.6%)</span><br><span class=\"line\">        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)</span><br><span class=\"line\">              libglInterpose.dylib : 227.26 milliseconds (17.1%)</span><br><span class=\"line\">             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)</span><br><span class=\"line\">                     sd_doctor_ios : 402.81 milliseconds (30.3%)</span><br></pre></td></tr></table></figure>\n\n<p>二、DYLD_PRINT 变量列表</p>\n<ul>\n<li>在终端通过命令：man dyld 可以列出所有的</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DYLD_FRAMEWORK_PATH</span><br><span class=\"line\">DYLD_FALLBACK_FRAMEWORK_PATH</span><br><span class=\"line\">DYLD_VERSIONED_FRAMEWORK_PATH</span><br><span class=\"line\">DYLD_LIBRARY_PATH</span><br><span class=\"line\">DYLD_FALLBACK_LIBRARY_PATH</span><br><span class=\"line\">DYLD_VERSIONED_LIBRARY_PATH</span><br><span class=\"line\">DYLD_PRINT_TO_FILE</span><br><span class=\"line\">DYLD_SHARED_REGION</span><br><span class=\"line\">DYLD_INSERT_LIBRARIES</span><br><span class=\"line\">DYLD_FORCE_FLAT_NAMESPACE</span><br><span class=\"line\">DYLD_IMAGE_SUFFIX</span><br><span class=\"line\">DYLD_PRINT_OPTS</span><br><span class=\"line\">DYLD_PRINT_ENV</span><br><span class=\"line\">DYLD_PRINT_LIBRARIES</span><br><span class=\"line\">DYLD_BIND_AT_LAUNCH</span><br><span class=\"line\">DYLD_DISABLE_DOFS</span><br><span class=\"line\">DYLD_PRINT_APIS</span><br><span class=\"line\">DYLD_PRINT_BINDINGS</span><br><span class=\"line\">DYLD_PRINT_INITIALIZERS</span><br><span class=\"line\">DYLD_PRINT_REBASINGS</span><br><span class=\"line\">DYLD_PRINT_SEGMENTS</span><br><span class=\"line\">DYLD_PRINT_STATISTICS</span><br><span class=\"line\">DYLD_PRINT_DOFS</span><br><span class=\"line\">DYLD_PRINT_RPATHS</span><br><span class=\"line\">DYLD_SHARED_CACHE_DIR</span><br><span class=\"line\">DYLD_SHARED_CACHE_DONT_VALIDATE</span><br></pre></td></tr></table></figure>\n\n<p>详情见：<a href=\"./dyld.txt\">dyld 命令简介</a></p>\n"},{"_content":"### [Attribute Syntax](https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html)\n\n1、[OC 中的 __attribute__](https://www.jianshu.com/p/529dc0501bd3)\n\n2、[iOS __attribute__那点小事](https://www.jianshu.com/p/abeee47e82d8)","source":"_posts/iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之启动优化-GCC attribute.md","raw":"### [Attribute Syntax](https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html)\n\n1、[OC 中的 __attribute__](https://www.jianshu.com/p/529dc0501bd3)\n\n2、[iOS __attribute__那点小事](https://www.jianshu.com/p/abeee47e82d8)","slug":"iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之启动优化-GCC attribute","published":1,"date":"2019-07-09T09:18:25.000Z","updated":"2019-07-09T10:33:29.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjc001n8n7u1w3n34yz","content":"<h3 id=\"Attribute-Syntax\"><a href=\"#Attribute-Syntax\" class=\"headerlink\" title=\"Attribute Syntax\"></a><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html\">Attribute Syntax</a></h3><p>1、<a href=\"https://www.jianshu.com/p/529dc0501bd3\">OC 中的 <strong>attribute</strong></a></p>\n<p>2、<a href=\"https://www.jianshu.com/p/abeee47e82d8\">iOS __attribute__那点小事</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Attribute-Syntax\"><a href=\"#Attribute-Syntax\" class=\"headerlink\" title=\"Attribute Syntax\"></a><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html\">Attribute Syntax</a></h3><p>1、<a href=\"https://www.jianshu.com/p/529dc0501bd3\">OC 中的 <strong>attribute</strong></a></p>\n<p>2、<a href=\"https://www.jianshu.com/p/abeee47e82d8\">iOS __attribute__那点小事</a></p>\n"},{"_content":"### 启动优化\n\n1、启动优化\n\n冷启动是指， App 点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的情况。这是一次完整的启动过程。\n\n热启动是指 ，App 在冷启动后用户将 App 退后台，在 App 的进程还在系统里的情况下，用户重新启动进入 App 的过程，这个过程做的事情非常少。\n\n* main() 函数执行前；\n\n* main() 函数执行后；\n\n* 首屏渲染完成后。\n\n####1、main() 函数执行前\n要做启动优化，就首先要知道，APP在启动前做了些什么？iOS APP 启动的时候，会做下面几件事情：\n\n* 加载可执行文件（Mac-o、App 的.o文件）；\n* 加载动态链接库，进行rebase指针调整和bind符号绑定；\n* Objc 运行时的初始化处理，包括Objc相关类的注册、category注册、selector唯一性检查等；\n* 初始化，包括 +load 方法，attribute((constructor))修饰函数的调用、创建C++静态全局变量。\n\n相应的，可以做的优化工作包括：\n\n* 减少动态库加载。每个库本身都有依赖关系，苹果公司建议使用更少的动态库，并且建议在使用动态库的数量较多时，尽量将多个动态库进行合并。数量上，苹果公司最多可以支持 6 个非系统动态库合并为一个。\n\n* 减少加载启动后不会去使用的类或者方法。\n\n* +load() 方法里的内容可以放到首屏渲染完成后再执行，或使用 +initialize() 方法替换掉。因为，在一个 +load() 方法里，进行运行时方法替换操作会带来 4 毫秒的消耗。不要小看这 4 毫秒，积少成多，执行 +load() 方法对启动速度的影响会越来越大。\n\n* 控制 C++ 全局变量的数量。\n\n\n####2、main() 函数执行后\n\n这阶段，主要是指从main函数之后到AppDelegate 的 `didFinishLuachingWithOptions` 方法里首屏渲染相关方法执行完成。主要包括：\n\n* 首屏初始化所需配置文件的读写操作；\n* 首屏列表大数据的读取；\n* 首屏渲染的大量计算等；\n\n对于这部分，做好结合业务和性能考虑，合理安排初始化。尽量不要阻塞主线程。\n\n####3、首屏渲染完成后\n这部分是指首屏渲染完成到`didFinishLuachingWithOptions`作用域结束。主要完成的是服务模块初始化、监听注册、配置文件读取等。这里分两种方式：功能级别和方法级别的启动优化。\n\n* 功能级别的优化的思路是： main() 函数开始执行后到首屏渲染完成前只处理首屏相关的业务，其他非首屏业务的初始 化、监听注册、配置文件读取等都放到首屏渲染完成后去做。\n\n* 在这之后，我们需要进一步做的，是检查首屏渲染完成前主线程上有哪些耗时方法，将没必要的耗时方法滞 后或者异步执行。通常情况下，耗时较长的方法主要发生在计算大量数据的情况下，具体的表现就是加载、 编辑、存储图片和文件等资源。\n\n目前来看，对App启动速度的监控，主要有两种手段。\n\n* 第一种方法是，定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时。Xcode 工具套件里自 带的 Time Profiler ，采用的就是这种方式。\n* 第二种方法是，对 objc_msgSend 方法进行 hook 来掌握所有方法的执行耗时。hook objc_msgSend 这种方式的优点是非常精确，而缺点是只能针对 Objective-C 的方法。当然，对于 c 方 法和 block 也不是没有办法，你可以使用 libffi 的 ffi_call 来达成 hook，但缺点就是编写维护相关工具门槛高。\n\n函数执行前(DYLD_PRINT_STATISTICS=1)，耗时：\n\n    Total pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n                    \n首屏出现时间——未登录： 0.4437880516052246\n首屏出现时间——已登录： 0.7114208936691284/0.6743890047073364\n                    end time：0.7480049133300781\n\n第一次优化：\n\n    show time: 0.2890850305557251\n    end time: 0.5157899856567383\n\n第二次优化：\n未登录：\n\n    show time: 0.27560102939605713\n    end time: 0.27729904651641846\n    mainAsynTime time: 0.3173290491104126\n    asynTime time: 0.7670600414276123\n    \n已登录：\n\n    show time: 0.3778949975967407\n    end time: 0.37808406352996826\n    mainAsynTime time: 0.7077310085296631\n    asynTime time: 0.8228110074996948\n\n冷启动加载时间：\n\n    Total pre-main time: 1.0 seconds (100.0%)\n             dylib loading time: 597.56 milliseconds (55.8%)\n            rebase/binding time:  48.35 milliseconds (4.5%)\n                ObjC setup time:  59.63 milliseconds (5.5%)\n               initializer time: 364.73 milliseconds (34.0%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.15 milliseconds (0.7%)\n        libMainThreadChecker.dylib :  34.38 milliseconds (3.2%)\n              libglInterpose.dylib :  80.59 milliseconds (7.5%)\n             libMTLInterpose.dylib :  21.72 milliseconds (2.0%)\n                     sd_doctor_ios : 320.42 milliseconds (29.9%)\n\n启动优化总结：\n\n    使用DYLD_PRINT_STATISTICS测试启动加载时间\n    减少自定义的动态库集成\n    精简原有的Objective-C类和代码\n    移除静态的初始化操作\n    使用更多的Swift代码","source":"_posts/iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之启动优化.md","raw":"### 启动优化\n\n1、启动优化\n\n冷启动是指， App 点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的情况。这是一次完整的启动过程。\n\n热启动是指 ，App 在冷启动后用户将 App 退后台，在 App 的进程还在系统里的情况下，用户重新启动进入 App 的过程，这个过程做的事情非常少。\n\n* main() 函数执行前；\n\n* main() 函数执行后；\n\n* 首屏渲染完成后。\n\n####1、main() 函数执行前\n要做启动优化，就首先要知道，APP在启动前做了些什么？iOS APP 启动的时候，会做下面几件事情：\n\n* 加载可执行文件（Mac-o、App 的.o文件）；\n* 加载动态链接库，进行rebase指针调整和bind符号绑定；\n* Objc 运行时的初始化处理，包括Objc相关类的注册、category注册、selector唯一性检查等；\n* 初始化，包括 +load 方法，attribute((constructor))修饰函数的调用、创建C++静态全局变量。\n\n相应的，可以做的优化工作包括：\n\n* 减少动态库加载。每个库本身都有依赖关系，苹果公司建议使用更少的动态库，并且建议在使用动态库的数量较多时，尽量将多个动态库进行合并。数量上，苹果公司最多可以支持 6 个非系统动态库合并为一个。\n\n* 减少加载启动后不会去使用的类或者方法。\n\n* +load() 方法里的内容可以放到首屏渲染完成后再执行，或使用 +initialize() 方法替换掉。因为，在一个 +load() 方法里，进行运行时方法替换操作会带来 4 毫秒的消耗。不要小看这 4 毫秒，积少成多，执行 +load() 方法对启动速度的影响会越来越大。\n\n* 控制 C++ 全局变量的数量。\n\n\n####2、main() 函数执行后\n\n这阶段，主要是指从main函数之后到AppDelegate 的 `didFinishLuachingWithOptions` 方法里首屏渲染相关方法执行完成。主要包括：\n\n* 首屏初始化所需配置文件的读写操作；\n* 首屏列表大数据的读取；\n* 首屏渲染的大量计算等；\n\n对于这部分，做好结合业务和性能考虑，合理安排初始化。尽量不要阻塞主线程。\n\n####3、首屏渲染完成后\n这部分是指首屏渲染完成到`didFinishLuachingWithOptions`作用域结束。主要完成的是服务模块初始化、监听注册、配置文件读取等。这里分两种方式：功能级别和方法级别的启动优化。\n\n* 功能级别的优化的思路是： main() 函数开始执行后到首屏渲染完成前只处理首屏相关的业务，其他非首屏业务的初始 化、监听注册、配置文件读取等都放到首屏渲染完成后去做。\n\n* 在这之后，我们需要进一步做的，是检查首屏渲染完成前主线程上有哪些耗时方法，将没必要的耗时方法滞 后或者异步执行。通常情况下，耗时较长的方法主要发生在计算大量数据的情况下，具体的表现就是加载、 编辑、存储图片和文件等资源。\n\n目前来看，对App启动速度的监控，主要有两种手段。\n\n* 第一种方法是，定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时。Xcode 工具套件里自 带的 Time Profiler ，采用的就是这种方式。\n* 第二种方法是，对 objc_msgSend 方法进行 hook 来掌握所有方法的执行耗时。hook objc_msgSend 这种方式的优点是非常精确，而缺点是只能针对 Objective-C 的方法。当然，对于 c 方 法和 block 也不是没有办法，你可以使用 libffi 的 ffi_call 来达成 hook，但缺点就是编写维护相关工具门槛高。\n\n函数执行前(DYLD_PRINT_STATISTICS=1)，耗时：\n\n    Total pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n                    \n首屏出现时间——未登录： 0.4437880516052246\n首屏出现时间——已登录： 0.7114208936691284/0.6743890047073364\n                    end time：0.7480049133300781\n\n第一次优化：\n\n    show time: 0.2890850305557251\n    end time: 0.5157899856567383\n\n第二次优化：\n未登录：\n\n    show time: 0.27560102939605713\n    end time: 0.27729904651641846\n    mainAsynTime time: 0.3173290491104126\n    asynTime time: 0.7670600414276123\n    \n已登录：\n\n    show time: 0.3778949975967407\n    end time: 0.37808406352996826\n    mainAsynTime time: 0.7077310085296631\n    asynTime time: 0.8228110074996948\n\n冷启动加载时间：\n\n    Total pre-main time: 1.0 seconds (100.0%)\n             dylib loading time: 597.56 milliseconds (55.8%)\n            rebase/binding time:  48.35 milliseconds (4.5%)\n                ObjC setup time:  59.63 milliseconds (5.5%)\n               initializer time: 364.73 milliseconds (34.0%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.15 milliseconds (0.7%)\n        libMainThreadChecker.dylib :  34.38 milliseconds (3.2%)\n              libglInterpose.dylib :  80.59 milliseconds (7.5%)\n             libMTLInterpose.dylib :  21.72 milliseconds (2.0%)\n                     sd_doctor_ios : 320.42 milliseconds (29.9%)\n\n启动优化总结：\n\n    使用DYLD_PRINT_STATISTICS测试启动加载时间\n    减少自定义的动态库集成\n    精简原有的Objective-C类和代码\n    移除静态的初始化操作\n    使用更多的Swift代码","slug":"iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之启动优化","published":1,"date":"2019-07-09T08:41:43.000Z","updated":"2019-07-09T10:33:23.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjd001o8n7ufwn6dh75","content":"<h3 id=\"启动优化\"><a href=\"#启动优化\" class=\"headerlink\" title=\"启动优化\"></a>启动优化</h3><p>1、启动优化</p>\n<p>冷启动是指， App 点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的情况。这是一次完整的启动过程。</p>\n<p>热启动是指 ，App 在冷启动后用户将 App 退后台，在 App 的进程还在系统里的情况下，用户重新启动进入 App 的过程，这个过程做的事情非常少。</p>\n<ul>\n<li><p>main() 函数执行前；</p>\n</li>\n<li><p>main() 函数执行后；</p>\n</li>\n<li><p>首屏渲染完成后。</p>\n</li>\n</ul>\n<p>####1、main() 函数执行前<br>要做启动优化，就首先要知道，APP在启动前做了些什么？iOS APP 启动的时候，会做下面几件事情：</p>\n<ul>\n<li>加载可执行文件（Mac-o、App 的.o文件）；</li>\n<li>加载动态链接库，进行rebase指针调整和bind符号绑定；</li>\n<li>Objc 运行时的初始化处理，包括Objc相关类的注册、category注册、selector唯一性检查等；</li>\n<li>初始化，包括 +load 方法，attribute((constructor))修饰函数的调用、创建C++静态全局变量。</li>\n</ul>\n<p>相应的，可以做的优化工作包括：</p>\n<ul>\n<li><p>减少动态库加载。每个库本身都有依赖关系，苹果公司建议使用更少的动态库，并且建议在使用动态库的数量较多时，尽量将多个动态库进行合并。数量上，苹果公司最多可以支持 6 个非系统动态库合并为一个。</p>\n</li>\n<li><p>减少加载启动后不会去使用的类或者方法。</p>\n</li>\n<li><p>+load() 方法里的内容可以放到首屏渲染完成后再执行，或使用 +initialize() 方法替换掉。因为，在一个 +load() 方法里，进行运行时方法替换操作会带来 4 毫秒的消耗。不要小看这 4 毫秒，积少成多，执行 +load() 方法对启动速度的影响会越来越大。</p>\n</li>\n<li><p>控制 C++ 全局变量的数量。</p>\n</li>\n</ul>\n<p>####2、main() 函数执行后</p>\n<p>这阶段，主要是指从main函数之后到AppDelegate 的 <code>didFinishLuachingWithOptions</code> 方法里首屏渲染相关方法执行完成。主要包括：</p>\n<ul>\n<li>首屏初始化所需配置文件的读写操作；</li>\n<li>首屏列表大数据的读取；</li>\n<li>首屏渲染的大量计算等；</li>\n</ul>\n<p>对于这部分，做好结合业务和性能考虑，合理安排初始化。尽量不要阻塞主线程。</p>\n<p>####3、首屏渲染完成后<br>这部分是指首屏渲染完成到<code>didFinishLuachingWithOptions</code>作用域结束。主要完成的是服务模块初始化、监听注册、配置文件读取等。这里分两种方式：功能级别和方法级别的启动优化。</p>\n<ul>\n<li><p>功能级别的优化的思路是： main() 函数开始执行后到首屏渲染完成前只处理首屏相关的业务，其他非首屏业务的初始 化、监听注册、配置文件读取等都放到首屏渲染完成后去做。</p>\n</li>\n<li><p>在这之后，我们需要进一步做的，是检查首屏渲染完成前主线程上有哪些耗时方法，将没必要的耗时方法滞 后或者异步执行。通常情况下，耗时较长的方法主要发生在计算大量数据的情况下，具体的表现就是加载、 编辑、存储图片和文件等资源。</p>\n</li>\n</ul>\n<p>目前来看，对App启动速度的监控，主要有两种手段。</p>\n<ul>\n<li>第一种方法是，定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时。Xcode 工具套件里自 带的 Time Profiler ，采用的就是这种方式。</li>\n<li>第二种方法是，对 objc_msgSend 方法进行 hook 来掌握所有方法的执行耗时。hook objc_msgSend 这种方式的优点是非常精确，而缺点是只能针对 Objective-C 的方法。当然，对于 c 方 法和 block 也不是没有办法，你可以使用 libffi 的 ffi_call 来达成 hook，但缺点就是编写维护相关工具门槛高。</li>\n</ul>\n<p>函数执行前(DYLD_PRINT_STATISTICS=1)，耗时：</p>\n<pre><code>Total pre-main time: 1.3 seconds (100.0%)\n         dylib loading time: 531.35 milliseconds (39.9%)\n        rebase/binding time:  46.17 milliseconds (3.4%)\n            ObjC setup time: 178.40 milliseconds (13.4%)\n           initializer time: 572.91 milliseconds (43.1%)\n           slowest intializers :\n             libSystem.B.dylib :   8.27 milliseconds (0.6%)\n    libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n          libglInterpose.dylib : 227.26 milliseconds (17.1%)\n         libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                 sd_doctor_ios : 402.81 milliseconds (30.3%)\n                \n</code></pre>\n<p>首屏出现时间——未登录： 0.4437880516052246<br>首屏出现时间——已登录： 0.7114208936691284/0.6743890047073364<br>                    end time：0.7480049133300781</p>\n<p>第一次优化：</p>\n<pre><code>show time: 0.2890850305557251\nend time: 0.5157899856567383\n</code></pre>\n<p>第二次优化：<br>未登录：</p>\n<pre><code>show time: 0.27560102939605713\nend time: 0.27729904651641846\nmainAsynTime time: 0.3173290491104126\nasynTime time: 0.7670600414276123\n</code></pre>\n<p>已登录：</p>\n<pre><code>show time: 0.3778949975967407\nend time: 0.37808406352996826\nmainAsynTime time: 0.7077310085296631\nasynTime time: 0.8228110074996948\n</code></pre>\n<p>冷启动加载时间：</p>\n<pre><code>Total pre-main time: 1.0 seconds (100.0%)\n         dylib loading time: 597.56 milliseconds (55.8%)\n        rebase/binding time:  48.35 milliseconds (4.5%)\n            ObjC setup time:  59.63 milliseconds (5.5%)\n           initializer time: 364.73 milliseconds (34.0%)\n           slowest intializers :\n             libSystem.B.dylib :   8.15 milliseconds (0.7%)\n    libMainThreadChecker.dylib :  34.38 milliseconds (3.2%)\n          libglInterpose.dylib :  80.59 milliseconds (7.5%)\n         libMTLInterpose.dylib :  21.72 milliseconds (2.0%)\n                 sd_doctor_ios : 320.42 milliseconds (29.9%)\n</code></pre>\n<p>启动优化总结：</p>\n<pre><code>使用DYLD_PRINT_STATISTICS测试启动加载时间\n减少自定义的动态库集成\n精简原有的Objective-C类和代码\n移除静态的初始化操作\n使用更多的Swift代码\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"启动优化\"><a href=\"#启动优化\" class=\"headerlink\" title=\"启动优化\"></a>启动优化</h3><p>1、启动优化</p>\n<p>冷启动是指， App 点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的情况。这是一次完整的启动过程。</p>\n<p>热启动是指 ，App 在冷启动后用户将 App 退后台，在 App 的进程还在系统里的情况下，用户重新启动进入 App 的过程，这个过程做的事情非常少。</p>\n<ul>\n<li><p>main() 函数执行前；</p>\n</li>\n<li><p>main() 函数执行后；</p>\n</li>\n<li><p>首屏渲染完成后。</p>\n</li>\n</ul>\n<p>####1、main() 函数执行前<br>要做启动优化，就首先要知道，APP在启动前做了些什么？iOS APP 启动的时候，会做下面几件事情：</p>\n<ul>\n<li>加载可执行文件（Mac-o、App 的.o文件）；</li>\n<li>加载动态链接库，进行rebase指针调整和bind符号绑定；</li>\n<li>Objc 运行时的初始化处理，包括Objc相关类的注册、category注册、selector唯一性检查等；</li>\n<li>初始化，包括 +load 方法，attribute((constructor))修饰函数的调用、创建C++静态全局变量。</li>\n</ul>\n<p>相应的，可以做的优化工作包括：</p>\n<ul>\n<li><p>减少动态库加载。每个库本身都有依赖关系，苹果公司建议使用更少的动态库，并且建议在使用动态库的数量较多时，尽量将多个动态库进行合并。数量上，苹果公司最多可以支持 6 个非系统动态库合并为一个。</p>\n</li>\n<li><p>减少加载启动后不会去使用的类或者方法。</p>\n</li>\n<li><p>+load() 方法里的内容可以放到首屏渲染完成后再执行，或使用 +initialize() 方法替换掉。因为，在一个 +load() 方法里，进行运行时方法替换操作会带来 4 毫秒的消耗。不要小看这 4 毫秒，积少成多，执行 +load() 方法对启动速度的影响会越来越大。</p>\n</li>\n<li><p>控制 C++ 全局变量的数量。</p>\n</li>\n</ul>\n<p>####2、main() 函数执行后</p>\n<p>这阶段，主要是指从main函数之后到AppDelegate 的 <code>didFinishLuachingWithOptions</code> 方法里首屏渲染相关方法执行完成。主要包括：</p>\n<ul>\n<li>首屏初始化所需配置文件的读写操作；</li>\n<li>首屏列表大数据的读取；</li>\n<li>首屏渲染的大量计算等；</li>\n</ul>\n<p>对于这部分，做好结合业务和性能考虑，合理安排初始化。尽量不要阻塞主线程。</p>\n<p>####3、首屏渲染完成后<br>这部分是指首屏渲染完成到<code>didFinishLuachingWithOptions</code>作用域结束。主要完成的是服务模块初始化、监听注册、配置文件读取等。这里分两种方式：功能级别和方法级别的启动优化。</p>\n<ul>\n<li><p>功能级别的优化的思路是： main() 函数开始执行后到首屏渲染完成前只处理首屏相关的业务，其他非首屏业务的初始 化、监听注册、配置文件读取等都放到首屏渲染完成后去做。</p>\n</li>\n<li><p>在这之后，我们需要进一步做的，是检查首屏渲染完成前主线程上有哪些耗时方法，将没必要的耗时方法滞 后或者异步执行。通常情况下，耗时较长的方法主要发生在计算大量数据的情况下，具体的表现就是加载、 编辑、存储图片和文件等资源。</p>\n</li>\n</ul>\n<p>目前来看，对App启动速度的监控，主要有两种手段。</p>\n<ul>\n<li>第一种方法是，定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时。Xcode 工具套件里自 带的 Time Profiler ，采用的就是这种方式。</li>\n<li>第二种方法是，对 objc_msgSend 方法进行 hook 来掌握所有方法的执行耗时。hook objc_msgSend 这种方式的优点是非常精确，而缺点是只能针对 Objective-C 的方法。当然，对于 c 方 法和 block 也不是没有办法，你可以使用 libffi 的 ffi_call 来达成 hook，但缺点就是编写维护相关工具门槛高。</li>\n</ul>\n<p>函数执行前(DYLD_PRINT_STATISTICS=1)，耗时：</p>\n<pre><code>Total pre-main time: 1.3 seconds (100.0%)\n         dylib loading time: 531.35 milliseconds (39.9%)\n        rebase/binding time:  46.17 milliseconds (3.4%)\n            ObjC setup time: 178.40 milliseconds (13.4%)\n           initializer time: 572.91 milliseconds (43.1%)\n           slowest intializers :\n             libSystem.B.dylib :   8.27 milliseconds (0.6%)\n    libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n          libglInterpose.dylib : 227.26 milliseconds (17.1%)\n         libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                 sd_doctor_ios : 402.81 milliseconds (30.3%)\n                \n</code></pre>\n<p>首屏出现时间——未登录： 0.4437880516052246<br>首屏出现时间——已登录： 0.7114208936691284/0.6743890047073364<br>                    end time：0.7480049133300781</p>\n<p>第一次优化：</p>\n<pre><code>show time: 0.2890850305557251\nend time: 0.5157899856567383\n</code></pre>\n<p>第二次优化：<br>未登录：</p>\n<pre><code>show time: 0.27560102939605713\nend time: 0.27729904651641846\nmainAsynTime time: 0.3173290491104126\nasynTime time: 0.7670600414276123\n</code></pre>\n<p>已登录：</p>\n<pre><code>show time: 0.3778949975967407\nend time: 0.37808406352996826\nmainAsynTime time: 0.7077310085296631\nasynTime time: 0.8228110074996948\n</code></pre>\n<p>冷启动加载时间：</p>\n<pre><code>Total pre-main time: 1.0 seconds (100.0%)\n         dylib loading time: 597.56 milliseconds (55.8%)\n        rebase/binding time:  48.35 milliseconds (4.5%)\n            ObjC setup time:  59.63 milliseconds (5.5%)\n           initializer time: 364.73 milliseconds (34.0%)\n           slowest intializers :\n             libSystem.B.dylib :   8.15 milliseconds (0.7%)\n    libMainThreadChecker.dylib :  34.38 milliseconds (3.2%)\n          libglInterpose.dylib :  80.59 milliseconds (7.5%)\n         libMTLInterpose.dylib :  21.72 milliseconds (2.0%)\n                 sd_doctor_ios : 320.42 milliseconds (29.9%)\n</code></pre>\n<p>启动优化总结：</p>\n<pre><code>使用DYLD_PRINT_STATISTICS测试启动加载时间\n减少自定义的动态库集成\n精简原有的Objective-C类和代码\n移除静态的初始化操作\n使用更多的Swift代码\n</code></pre>\n"},{"_content":"\n2、界面流畅性优化：\n* [facebookarchive/AsyncDisplayKit](https://github.com/facebookarchive/AsyncDisplayKit)\n* [TextureGroup/Texture](https://github.com/TextureGroup/Texture)\n\n3、webView加载优化：\n* [Tencent/VasSonic](https://github.com/Tencent/VasSonic)\n* 大前端？？webView\n\n工具：instrument -> Time Profiler\n\n\n\n\n[iOS性能优化总结](https://juejin.im/post/5ace078cf265da23994ee493)\n\n[WeRead团队博客](https://wereadteam.github.io/)\n\n[iOS性能优化](http://www.mengyueping.com/2018/08/19/iOS_optimization_all/)","source":"_posts/iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之性能优化.md","raw":"\n2、界面流畅性优化：\n* [facebookarchive/AsyncDisplayKit](https://github.com/facebookarchive/AsyncDisplayKit)\n* [TextureGroup/Texture](https://github.com/TextureGroup/Texture)\n\n3、webView加载优化：\n* [Tencent/VasSonic](https://github.com/Tencent/VasSonic)\n* 大前端？？webView\n\n工具：instrument -> Time Profiler\n\n\n\n\n[iOS性能优化总结](https://juejin.im/post/5ace078cf265da23994ee493)\n\n[WeRead团队博客](https://wereadteam.github.io/)\n\n[iOS性能优化](http://www.mengyueping.com/2018/08/19/iOS_optimization_all/)","slug":"iOS学习笔记/iOS系统学习/iOS之性能优化/iOS之性能优化","published":1,"date":"2019-03-24T12:46:20.000Z","updated":"2019-07-09T09:22:46.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgje001p8n7u27ah9i5u","content":"<p>2、界面流畅性优化：</p>\n<ul>\n<li><a href=\"https://github.com/facebookarchive/AsyncDisplayKit\">facebookarchive/AsyncDisplayKit</a></li>\n<li><a href=\"https://github.com/TextureGroup/Texture\">TextureGroup/Texture</a></li>\n</ul>\n<p>3、webView加载优化：</p>\n<ul>\n<li><a href=\"https://github.com/Tencent/VasSonic\">Tencent/VasSonic</a></li>\n<li>大前端？？webView</li>\n</ul>\n<p>工具：instrument -&gt; Time Profiler</p>\n<p><a href=\"https://juejin.im/post/5ace078cf265da23994ee493\">iOS性能优化总结</a></p>\n<p><a href=\"https://wereadteam.github.io/\">WeRead团队博客</a></p>\n<p><a href=\"http://www.mengyueping.com/2018/08/19/iOS_optimization_all/\">iOS性能优化</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>2、界面流畅性优化：</p>\n<ul>\n<li><a href=\"https://github.com/facebookarchive/AsyncDisplayKit\">facebookarchive/AsyncDisplayKit</a></li>\n<li><a href=\"https://github.com/TextureGroup/Texture\">TextureGroup/Texture</a></li>\n</ul>\n<p>3、webView加载优化：</p>\n<ul>\n<li><a href=\"https://github.com/Tencent/VasSonic\">Tencent/VasSonic</a></li>\n<li>大前端？？webView</li>\n</ul>\n<p>工具：instrument -&gt; Time Profiler</p>\n<p><a href=\"https://juejin.im/post/5ace078cf265da23994ee493\">iOS性能优化总结</a></p>\n<p><a href=\"https://wereadteam.github.io/\">WeRead团队博客</a></p>\n<p><a href=\"http://www.mengyueping.com/2018/08/19/iOS_optimization_all/\">iOS性能优化</a></p>\n"},{"_content":"* 协议簇、协议栈\n\n![流程](./resource/protocols.png)\n\n网络协议工作流程图：\n\n![流程](./resource/stream2.jpg)\n\n\n链路层 协议：\n![流程](./resource/Ethernet.png)\n\nIP协议：\n![流程](./resource/IP.png)\n\n* 版本: 占4位,指IP协议的版本.通信双方使用的IP协议版本必须一致.日前广泛使用的 IP协议版本号为 4 (即 IPv4).IPv6 目前还处于起步阶段.\n\n* 首部长度:占 4 位,可表示的最大十进制数值是15.请注意,这个字段所表示数的单位是32位字 (1个32位字长是4 字节),因此,当 IP 的首部长度为 1111 时 (即十进制的 15),首部长度就达到 60字节.当 IP 分组的首部长度不是4字节的整数倍时,必须利用最后的填充字段加以填充.因此数据部分永远在 4字节的整数倍开始,这样在实现 IP协议时较为方便.首部长度限制为 60字节的缺点是有时可能不够用.这样做的目的是希望用户尽量减少开销.最常用的首部长度就是 20 字节 (即首部长度为 0101),这时不使用任何选项.\n\n* 服务:占 8 位,用来获得更好的服务.这个字段在旧标准中叫做服务类型,但实际上一直没有被使用过.1998年IETF把这个字段改名为区分服务 DS(Differentiated Services).只有在使用区分服务时,这个字段才起作用.\n\n* 总长度:总长度指首都及数据之和的长度,单位为字节.因为总长度字段为 16位,所以数据报的最大长度为 216-1=65 535字节.在IP层下面的每一种数据链路层都有自己的帧格式,其中包括帧格式中的数据字段的最大长度,即最大传送单元 MTU (Maximum Transfer Unit).当一个数据报封装成链路层的帧时,此数据报的总长度 (即首部加上数据部分)一定不能超过下面的数据链路层的MTU值,否则要分片.\n\n* 标识 (Identification):占 16位.IP软件在存储器中维持一个计数器,每产生一个数据报,计数器就加 1,并将此值赋给标识字段.但这个\"标识\"并不是序号,因为 IP是无连接的服务,数据报不存在按序接收的问题.当数据报由于长度超过网络的 MTU 而必须分片时,这个标识字段的值就被复制到所有的数据报的标识字段中.相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报.\n\n* 标志 (Flag):占3 位,但目前只有2位有意义. 标志字段中的最低位记为 MF(More Fragment).MF=1即表示后面\"还有分片\"的数据报.MF=0表示这已是若干数据报片中的最后一个.标志字段中间的一位记为DF(Don't Fragment),意思是\"不能分片\",只有当 DF=0时才允许分片.\n\n* 片偏移:占 13位.较长的分组在分片后,某片在原分组中的相对位置.也就是说,相对用户数据字段的起点,该片从何处开始.片偏移以 8个字节为偏移单位,这就是说,每个分片的长度一定是 8字节(64位)的整数倍.\n\n* 生存时间:占 8位,生存时间字段常用的英文缩写是TTL(Time To Live),其表明数据报在网络中的寿命.由发出数据报的源点设置这个字段.其目的是防止无法交付的数据报无限制地在因特网中兜圈子,因而白白消耗网络资源.最初的设计是以秒作为 TTL的单位.每经过一个路由器时,就把TTL减去数据报在路由器消耗掉的一段时间.若数据报在路由器消耗的时间小于 1 秒,就把TTL值减 1.当 TTL值为 0时,就丢弃这个数据报.\n\n* 协议:占 8 位.协议字段指出此数据报携带的数据是使用何种协议,以便使目的主机的IP层知道应将数据部分上交给哪个处理过程.详细资料请看文章最后附录一[^附录一].\n* 首部检验和:占 16位.这个字段只检验数据报的首部,但不包括数据部分.这是因为数据报每经过一个路由器,都要重新计算一下首都检验和 (一些字段,如生存时间,标志,片偏移等都可能发生变化),不检验数据部分可减少计算的工作量.\n\n* 源地址:占32位.\n\n* 目的地址:占 32位.\n\n* IP数据报首部的可变部分\n\n> IP首部的可变部分就是一个可选字段.选项字段用来支持排错,测量以及安全等措施,内容很丰富.此字段的长度可变,从1个字节到40个字节不等,取决于所选择的项目.某些选项项目只需要1个字节,它只包括1个字节的选项代码.但还有些选项需要多个字节,这些选项一个个拼接起来,中间不需要有分隔符,最后用全0的填充字段补齐成为4字节的整数倍. \n\n> 增加首部的可变部分是为了增加IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的.这就增加了每一个路由器处理数据报的开销,实际上这些选项很少被使用.新的IP版本IPv6就将IP数据报的首部长度做成固定的.\n\t\n目前,这些任选项定义如下:\n1. 安全和处理限制(用于军事领域);\n2. 记录路径(让每个路由器都记下它的IP地址);\n3. 时间戳(Time Stamp)(让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间);\n4. 宽松的源站路由(Loose Source Route)(为数据报指定一系列必须经过的IP地址);\n5. 严格的源站路由(Strict Source Route)(与宽松的源站路由类似,但是要求只能经过指定的这些地址,不能经过其他的地址).\n这些选项很少被使用,并非所有主机和路由器都支持这些选项.\n\nTCP 协议：\n![流程](./resource/TCP.png)\n\n1、端口号：用来标识同一台计算机的不同的应用进程。\n\n1）源端口：源端口和IP地址的作用是标识报文的返回地址。\n\n2）目的端口：端口指明接收方计算机上的应用程序接口。\n\nTCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。\n\n2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。\n\n3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。\n\n4、保留：为将来定义新的用途保留，现在一般置0。\n\n5、控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。\n\n1）URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。\n\n2）ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。\n\n3）PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。\n\n4）RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。\n\n5）SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。\n\n6）FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。\n\n6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。\n\n7、校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。\n\n8、紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。\n\n9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。\n\n10、数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段\n\n```\nstruct tcphdr {\n    __be16 source;//  16位源端口号\n    __be16 dest; //16位目的端口号\n    __be32 seq; //序列号\n    __be32 ack_seq; //确认号\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u16   res1:4,//保留位\n            doff:4, //tcp报头长度\n            fin:1,\n            syn:1,\n            rst:1,\n            psh:1,\n            ack:1,\n            urg:1,\n            ece:1,//ECN回显（发送方接受到了一个更早的拥塞通告)\n            cwr:1;//拥塞窗口减（发送方降低它的发送速率)\n#elif defined(__BIG_ENDIAN_BITFIELD)\n    __u16   doff:4,\n            res1:4,\n            cwr:1,\n            ece:1,\n            urg:1,\n            ack:1,\n            psh:1,\n            rst:1,\n            syn:1,\n            fin:1;\n#else\n#error \"Adjust your <asm/byteorder.h> defines\"\n#endif\n    __be16 window;//窗口大小\n    __be16 check;//效验和\n    __be16 urg_ptr;//紧急指针\n};\n```\n\n\nUDP 协议：\nUDP协议是提供与IP一样的不可靠，无连接的交付服务，UDP报文可能出现丢失，重复或者乱序到达等现象。\n\nUDP协议在IP协议上增加了复用、分用和差错检测功能。UDP的特点：\n\n1. 是无连接的。相比于TCP协议，UDP协议在传送数据前不需要建立连接，当然也就没有释放连接。\n2. 是尽最大努力交付的。也就是说UDP协议无法保证数据能够准确的交付到目的主机。也不需要对接收到的UDP报文进行确认。\n3. 是面向报文的。也就是说UDP协议将应用层传输下来的数据封装在一个UDP包中，不进行拆分或合并。因此，运输层在收到对方的UDP包后，会去掉首部后，将数据原封不动的交给应用进程。\n4. 没有拥塞控制。因此UDP协议的发送速率不送网络的拥塞度影响。\n5. UDP支持一对一、一对多、多对一和多对多的交互通信。\n6. UDP的头部占用较小，只占用8个字节。\n\n![UPD协议](./resource/UDP.jpeg)\n\n* 源端口：源端口号。在需要对方回信时选用。不需要时可用全0。\n* 目的端口：目的端口号。这在终点交付报文时必须要使用到。\n* 长度： UDP用户数据报的长度，其最小值是8（仅有首部）。\n* 校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。\n\n```\ntypedef struct udphdr\n{\n    u_short uh_sport;//源端口地址\n    u_short uh_dport;//目的端口地址\n    u_short uh_ulen;//UD报文长度\n    u_short uh_sum;//16位校验和\n}UDP_HEADER;\n```\n\n\nKCP——可靠的UDP\n\nHTTP 协议：\n![HTTTP 协议](./resource/HTTP.png)\n\n**TCP/IP、UDP(KCP)、HTTPS、HTTP2.0**\n\n[HTTPS 升级指南](http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html)\n\n[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n[HTTP 协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html)\n\n[阮一峰网络日志](http://www.ruanyifeng.com/blog/)\n\nSocket(Web socket)、XMPP\n\nRTMP\n\nFRP、UPnP、VPN、WoL\n\nDNS、(N)ARP、令牌网络、ICMP\n\t\n\t\n\t\n附录一：\n\n[^附录一]:IP数据包的协议字段中，数值和所对应的协议\n\n```\n数值\t\t值描述 \n0 \t\t保留字段，用于IPv6(跳跃点到跳跃点选项) \n1 \t\tInternet控制消息 \n2\t\tInternet组管理 \n3 \t\t网关到网关 \n4 \t\tIP中的IP(封装) \n5 \t\t流 \n6 \t\t传输控制 \n7 \t\tCBT \n8 \t\t外部网关协议 \n9 \t\t任何私有内部网关(Cisco在它的IGRP实现中使用) \n10 \t\tBBNRCC监视 \n11 \t\t网络语音协议 \n12 \t\tPUP \n13 \t\tARGUS \n14 \t\tEMCON \n15 \t\t网络诊断工具 \n16 \t\t混乱(Chaos) \n17 \t\t用户数据报文 \n18 \t\t复用 \n19 \t\tDCN测量子系统 \n20 \t\t主机监视 \n21 \t\t包无线测量 \n22 \t\tXEROXNSIDP \n23 \t\tTrunk-1 \n24 \t\tTrunk-2 \n25 \t\tleaf-1 \n26 \t\tleaf-2 \n27 \t\t可靠的数据协议 \n28 \t\tInternet可靠交易 \n29 \t\tISO传输协议第四类 \n30 \t\t大块数据传输协议 \n31 \t\tMFE网络服务协议 \n32 \t\tMERIT节点之间协议 \n33 \t\t序列交换协议 \n34 \t\t第三方连接协议 \n35 \t\t域之间策略路由协议 \n36 \t\tXTP \n37 \t\t数据报文传递协议 \n38 \t\tIDPR控制消息传输协议 \n39 \t\tTP+ +传输协议 \n40 \t\tIL传输协议 \n41 \t\tIPv6 \n42 \t\t资源命令路由协议 \n43 \t\tIPv6的路由报头 \n44 \t\tIPv6的片报头 \n45 \t\t域之间路由协议 \n46 \t\t保留协议 \n47 \t\t通用路由封装 \n48 \t\t可移动主机路由协议 \n49 \t\tBNA \n50 \t\tIPv6封装安全有效负载 \n51 \t\tIPv6验证报头 \n52 \t\t集成的网络层安全TUBA \n53 \t\t带加密的IP \n54 \t\tNBMA地址解析协议 \n55 \t\tIP可移动性 \n56 \t\t使用Kryptonet钥匙管理的传输层安全协议 \n57 \t\tSKIP \n58 \t\tIPv6的ICMP \n59 \t\tIPv6的无下一个报头 \n60 \t\tIPv6的信宿选项 \n61 \t\t任何主机内部协议 \n62 \t\tCFTP \n63 \t\t任何本地网络 \n64 \t\tSATNET和BackroomEXPAK \n65 \t\tKryptolan \n66 \t\tMIT远程虚拟磁盘协议 \n67 \t\tInternet Pluribus包核心 \n68 \t\t任何分布式文件系统 \n69 \t\tSATNET监视 \n70 \t\tVISA协议 \n71 \t\tInternet包核心工具 \n72 \t\t计算机协议Network Executive \n73 \t\t计算机协议Heart Beat \n74 \t\tWang Span网络 \n75 \t\t包视频协议 \n76 \t\tBackroom SATNET监视 \n77 \t\tSUN ND PROTOCOL—临时 \n78 \t\tWIDEBAND监视 \n79 \t\tWIDEBAND EXPAK \n80 \t\tISO Internet协议 \n81 \t\tVMTP \n82 \t\tSECURE—VMTP(安全的VMTP) \n83 \t\tVINES \n84 \t\tTTP \n85 \t\tNSFNET—IGP \n86 \t\t不同网关协议 \n87 \t\tTCF \n88 \t\tEIGRP \n89 \t\tOSPFIGP \n90 \t\tSprite RPC协议 \n91 \t\tLocus地址解析协议 \n92 \t\t多播传输协议 \n93 \t\tAX.25帧 \n94 \t\tIP内部的IP封装协议 \n95 \t\t可移动网络互连控制协议 \n96 \t\t旗语通讯安全协议 \n97 \t\tIP中的以太封装 \n98 \t\t封装报头 \n99 \t\t任何私有加密方案 \n100\t\tGMTP \n101 \tIpsilon流量管理协议 \n102 \tPNNI over IP \n103 \t协议独立多播 \n104 \t\tARIS \n105 \t\tSCPS \n106 \t\tQNX \n107 \t\t活动网络 \n108 \t\tIP有效负载压缩协议 \n109 \t\tSitara网络协议 \n110 \t\tCompaq对等协议 \n111 \t\tIP中的IPX \n112 \t\t虚拟路由器冗余协议 \n113 \t\tPGM可靠传输协议 \n114 \t\t任何0跳跃协议 \n115 \t\t第二层隧道协议 \n116 \t\tD-II数据交换(DDX) \n117 \t\t交互式代理传输协议 \n118 \t\t日程计划传输协议 \n119 \t\tSpectraLink无线协议 \n120 \t\tUTI \n121 \t\t简单消息协议 \n122 \t\tSM \n123 \t\t性能透明性协议 \n124 \t\tISIS over IPv4 \n125 \t\tFIRE \n126 \t\tCombat无线传输协议 \n127 \t\tCombat无线用户数据报文 \n128 \t\tSSCOPMCE \n129 \t\tIPLT \n130 \t\t安全包防护 \n131 \t\tIP中的私有IP封装 \n132 \t\t流控制传输协议 \n133～254\t未分配 \n\n255 \t\t保留 \n```","source":"_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之协议.md","raw":"* 协议簇、协议栈\n\n![流程](./resource/protocols.png)\n\n网络协议工作流程图：\n\n![流程](./resource/stream2.jpg)\n\n\n链路层 协议：\n![流程](./resource/Ethernet.png)\n\nIP协议：\n![流程](./resource/IP.png)\n\n* 版本: 占4位,指IP协议的版本.通信双方使用的IP协议版本必须一致.日前广泛使用的 IP协议版本号为 4 (即 IPv4).IPv6 目前还处于起步阶段.\n\n* 首部长度:占 4 位,可表示的最大十进制数值是15.请注意,这个字段所表示数的单位是32位字 (1个32位字长是4 字节),因此,当 IP 的首部长度为 1111 时 (即十进制的 15),首部长度就达到 60字节.当 IP 分组的首部长度不是4字节的整数倍时,必须利用最后的填充字段加以填充.因此数据部分永远在 4字节的整数倍开始,这样在实现 IP协议时较为方便.首部长度限制为 60字节的缺点是有时可能不够用.这样做的目的是希望用户尽量减少开销.最常用的首部长度就是 20 字节 (即首部长度为 0101),这时不使用任何选项.\n\n* 服务:占 8 位,用来获得更好的服务.这个字段在旧标准中叫做服务类型,但实际上一直没有被使用过.1998年IETF把这个字段改名为区分服务 DS(Differentiated Services).只有在使用区分服务时,这个字段才起作用.\n\n* 总长度:总长度指首都及数据之和的长度,单位为字节.因为总长度字段为 16位,所以数据报的最大长度为 216-1=65 535字节.在IP层下面的每一种数据链路层都有自己的帧格式,其中包括帧格式中的数据字段的最大长度,即最大传送单元 MTU (Maximum Transfer Unit).当一个数据报封装成链路层的帧时,此数据报的总长度 (即首部加上数据部分)一定不能超过下面的数据链路层的MTU值,否则要分片.\n\n* 标识 (Identification):占 16位.IP软件在存储器中维持一个计数器,每产生一个数据报,计数器就加 1,并将此值赋给标识字段.但这个\"标识\"并不是序号,因为 IP是无连接的服务,数据报不存在按序接收的问题.当数据报由于长度超过网络的 MTU 而必须分片时,这个标识字段的值就被复制到所有的数据报的标识字段中.相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报.\n\n* 标志 (Flag):占3 位,但目前只有2位有意义. 标志字段中的最低位记为 MF(More Fragment).MF=1即表示后面\"还有分片\"的数据报.MF=0表示这已是若干数据报片中的最后一个.标志字段中间的一位记为DF(Don't Fragment),意思是\"不能分片\",只有当 DF=0时才允许分片.\n\n* 片偏移:占 13位.较长的分组在分片后,某片在原分组中的相对位置.也就是说,相对用户数据字段的起点,该片从何处开始.片偏移以 8个字节为偏移单位,这就是说,每个分片的长度一定是 8字节(64位)的整数倍.\n\n* 生存时间:占 8位,生存时间字段常用的英文缩写是TTL(Time To Live),其表明数据报在网络中的寿命.由发出数据报的源点设置这个字段.其目的是防止无法交付的数据报无限制地在因特网中兜圈子,因而白白消耗网络资源.最初的设计是以秒作为 TTL的单位.每经过一个路由器时,就把TTL减去数据报在路由器消耗掉的一段时间.若数据报在路由器消耗的时间小于 1 秒,就把TTL值减 1.当 TTL值为 0时,就丢弃这个数据报.\n\n* 协议:占 8 位.协议字段指出此数据报携带的数据是使用何种协议,以便使目的主机的IP层知道应将数据部分上交给哪个处理过程.详细资料请看文章最后附录一[^附录一].\n* 首部检验和:占 16位.这个字段只检验数据报的首部,但不包括数据部分.这是因为数据报每经过一个路由器,都要重新计算一下首都检验和 (一些字段,如生存时间,标志,片偏移等都可能发生变化),不检验数据部分可减少计算的工作量.\n\n* 源地址:占32位.\n\n* 目的地址:占 32位.\n\n* IP数据报首部的可变部分\n\n> IP首部的可变部分就是一个可选字段.选项字段用来支持排错,测量以及安全等措施,内容很丰富.此字段的长度可变,从1个字节到40个字节不等,取决于所选择的项目.某些选项项目只需要1个字节,它只包括1个字节的选项代码.但还有些选项需要多个字节,这些选项一个个拼接起来,中间不需要有分隔符,最后用全0的填充字段补齐成为4字节的整数倍. \n\n> 增加首部的可变部分是为了增加IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的.这就增加了每一个路由器处理数据报的开销,实际上这些选项很少被使用.新的IP版本IPv6就将IP数据报的首部长度做成固定的.\n\t\n目前,这些任选项定义如下:\n1. 安全和处理限制(用于军事领域);\n2. 记录路径(让每个路由器都记下它的IP地址);\n3. 时间戳(Time Stamp)(让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间);\n4. 宽松的源站路由(Loose Source Route)(为数据报指定一系列必须经过的IP地址);\n5. 严格的源站路由(Strict Source Route)(与宽松的源站路由类似,但是要求只能经过指定的这些地址,不能经过其他的地址).\n这些选项很少被使用,并非所有主机和路由器都支持这些选项.\n\nTCP 协议：\n![流程](./resource/TCP.png)\n\n1、端口号：用来标识同一台计算机的不同的应用进程。\n\n1）源端口：源端口和IP地址的作用是标识报文的返回地址。\n\n2）目的端口：端口指明接收方计算机上的应用程序接口。\n\nTCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。\n\n2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。\n\n3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。\n\n4、保留：为将来定义新的用途保留，现在一般置0。\n\n5、控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。\n\n1）URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。\n\n2）ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。\n\n3）PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。\n\n4）RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。\n\n5）SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。\n\n6）FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。\n\n6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。\n\n7、校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。\n\n8、紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。\n\n9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。\n\n10、数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段\n\n```\nstruct tcphdr {\n    __be16 source;//  16位源端口号\n    __be16 dest; //16位目的端口号\n    __be32 seq; //序列号\n    __be32 ack_seq; //确认号\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u16   res1:4,//保留位\n            doff:4, //tcp报头长度\n            fin:1,\n            syn:1,\n            rst:1,\n            psh:1,\n            ack:1,\n            urg:1,\n            ece:1,//ECN回显（发送方接受到了一个更早的拥塞通告)\n            cwr:1;//拥塞窗口减（发送方降低它的发送速率)\n#elif defined(__BIG_ENDIAN_BITFIELD)\n    __u16   doff:4,\n            res1:4,\n            cwr:1,\n            ece:1,\n            urg:1,\n            ack:1,\n            psh:1,\n            rst:1,\n            syn:1,\n            fin:1;\n#else\n#error \"Adjust your <asm/byteorder.h> defines\"\n#endif\n    __be16 window;//窗口大小\n    __be16 check;//效验和\n    __be16 urg_ptr;//紧急指针\n};\n```\n\n\nUDP 协议：\nUDP协议是提供与IP一样的不可靠，无连接的交付服务，UDP报文可能出现丢失，重复或者乱序到达等现象。\n\nUDP协议在IP协议上增加了复用、分用和差错检测功能。UDP的特点：\n\n1. 是无连接的。相比于TCP协议，UDP协议在传送数据前不需要建立连接，当然也就没有释放连接。\n2. 是尽最大努力交付的。也就是说UDP协议无法保证数据能够准确的交付到目的主机。也不需要对接收到的UDP报文进行确认。\n3. 是面向报文的。也就是说UDP协议将应用层传输下来的数据封装在一个UDP包中，不进行拆分或合并。因此，运输层在收到对方的UDP包后，会去掉首部后，将数据原封不动的交给应用进程。\n4. 没有拥塞控制。因此UDP协议的发送速率不送网络的拥塞度影响。\n5. UDP支持一对一、一对多、多对一和多对多的交互通信。\n6. UDP的头部占用较小，只占用8个字节。\n\n![UPD协议](./resource/UDP.jpeg)\n\n* 源端口：源端口号。在需要对方回信时选用。不需要时可用全0。\n* 目的端口：目的端口号。这在终点交付报文时必须要使用到。\n* 长度： UDP用户数据报的长度，其最小值是8（仅有首部）。\n* 校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。\n\n```\ntypedef struct udphdr\n{\n    u_short uh_sport;//源端口地址\n    u_short uh_dport;//目的端口地址\n    u_short uh_ulen;//UD报文长度\n    u_short uh_sum;//16位校验和\n}UDP_HEADER;\n```\n\n\nKCP——可靠的UDP\n\nHTTP 协议：\n![HTTTP 协议](./resource/HTTP.png)\n\n**TCP/IP、UDP(KCP)、HTTPS、HTTP2.0**\n\n[HTTPS 升级指南](http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html)\n\n[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n[HTTP 协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html)\n\n[阮一峰网络日志](http://www.ruanyifeng.com/blog/)\n\nSocket(Web socket)、XMPP\n\nRTMP\n\nFRP、UPnP、VPN、WoL\n\nDNS、(N)ARP、令牌网络、ICMP\n\t\n\t\n\t\n附录一：\n\n[^附录一]:IP数据包的协议字段中，数值和所对应的协议\n\n```\n数值\t\t值描述 \n0 \t\t保留字段，用于IPv6(跳跃点到跳跃点选项) \n1 \t\tInternet控制消息 \n2\t\tInternet组管理 \n3 \t\t网关到网关 \n4 \t\tIP中的IP(封装) \n5 \t\t流 \n6 \t\t传输控制 \n7 \t\tCBT \n8 \t\t外部网关协议 \n9 \t\t任何私有内部网关(Cisco在它的IGRP实现中使用) \n10 \t\tBBNRCC监视 \n11 \t\t网络语音协议 \n12 \t\tPUP \n13 \t\tARGUS \n14 \t\tEMCON \n15 \t\t网络诊断工具 \n16 \t\t混乱(Chaos) \n17 \t\t用户数据报文 \n18 \t\t复用 \n19 \t\tDCN测量子系统 \n20 \t\t主机监视 \n21 \t\t包无线测量 \n22 \t\tXEROXNSIDP \n23 \t\tTrunk-1 \n24 \t\tTrunk-2 \n25 \t\tleaf-1 \n26 \t\tleaf-2 \n27 \t\t可靠的数据协议 \n28 \t\tInternet可靠交易 \n29 \t\tISO传输协议第四类 \n30 \t\t大块数据传输协议 \n31 \t\tMFE网络服务协议 \n32 \t\tMERIT节点之间协议 \n33 \t\t序列交换协议 \n34 \t\t第三方连接协议 \n35 \t\t域之间策略路由协议 \n36 \t\tXTP \n37 \t\t数据报文传递协议 \n38 \t\tIDPR控制消息传输协议 \n39 \t\tTP+ +传输协议 \n40 \t\tIL传输协议 \n41 \t\tIPv6 \n42 \t\t资源命令路由协议 \n43 \t\tIPv6的路由报头 \n44 \t\tIPv6的片报头 \n45 \t\t域之间路由协议 \n46 \t\t保留协议 \n47 \t\t通用路由封装 \n48 \t\t可移动主机路由协议 \n49 \t\tBNA \n50 \t\tIPv6封装安全有效负载 \n51 \t\tIPv6验证报头 \n52 \t\t集成的网络层安全TUBA \n53 \t\t带加密的IP \n54 \t\tNBMA地址解析协议 \n55 \t\tIP可移动性 \n56 \t\t使用Kryptonet钥匙管理的传输层安全协议 \n57 \t\tSKIP \n58 \t\tIPv6的ICMP \n59 \t\tIPv6的无下一个报头 \n60 \t\tIPv6的信宿选项 \n61 \t\t任何主机内部协议 \n62 \t\tCFTP \n63 \t\t任何本地网络 \n64 \t\tSATNET和BackroomEXPAK \n65 \t\tKryptolan \n66 \t\tMIT远程虚拟磁盘协议 \n67 \t\tInternet Pluribus包核心 \n68 \t\t任何分布式文件系统 \n69 \t\tSATNET监视 \n70 \t\tVISA协议 \n71 \t\tInternet包核心工具 \n72 \t\t计算机协议Network Executive \n73 \t\t计算机协议Heart Beat \n74 \t\tWang Span网络 \n75 \t\t包视频协议 \n76 \t\tBackroom SATNET监视 \n77 \t\tSUN ND PROTOCOL—临时 \n78 \t\tWIDEBAND监视 \n79 \t\tWIDEBAND EXPAK \n80 \t\tISO Internet协议 \n81 \t\tVMTP \n82 \t\tSECURE—VMTP(安全的VMTP) \n83 \t\tVINES \n84 \t\tTTP \n85 \t\tNSFNET—IGP \n86 \t\t不同网关协议 \n87 \t\tTCF \n88 \t\tEIGRP \n89 \t\tOSPFIGP \n90 \t\tSprite RPC协议 \n91 \t\tLocus地址解析协议 \n92 \t\t多播传输协议 \n93 \t\tAX.25帧 \n94 \t\tIP内部的IP封装协议 \n95 \t\t可移动网络互连控制协议 \n96 \t\t旗语通讯安全协议 \n97 \t\tIP中的以太封装 \n98 \t\t封装报头 \n99 \t\t任何私有加密方案 \n100\t\tGMTP \n101 \tIpsilon流量管理协议 \n102 \tPNNI over IP \n103 \t协议独立多播 \n104 \t\tARIS \n105 \t\tSCPS \n106 \t\tQNX \n107 \t\t活动网络 \n108 \t\tIP有效负载压缩协议 \n109 \t\tSitara网络协议 \n110 \t\tCompaq对等协议 \n111 \t\tIP中的IPX \n112 \t\t虚拟路由器冗余协议 \n113 \t\tPGM可靠传输协议 \n114 \t\t任何0跳跃协议 \n115 \t\t第二层隧道协议 \n116 \t\tD-II数据交换(DDX) \n117 \t\t交互式代理传输协议 \n118 \t\t日程计划传输协议 \n119 \t\tSpectraLink无线协议 \n120 \t\tUTI \n121 \t\t简单消息协议 \n122 \t\tSM \n123 \t\t性能透明性协议 \n124 \t\tISIS over IPv4 \n125 \t\tFIRE \n126 \t\tCombat无线传输协议 \n127 \t\tCombat无线用户数据报文 \n128 \t\tSSCOPMCE \n129 \t\tIPLT \n130 \t\t安全包防护 \n131 \t\tIP中的私有IP封装 \n132 \t\t流控制传输协议 \n133～254\t未分配 \n\n255 \t\t保留 \n```","slug":"iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之协议","published":1,"date":"2019-03-24T12:44:45.000Z","updated":"2019-04-27T02:38:46.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgje001q8n7u8rfv5g7r","content":"<ul>\n<li>协议簇、协议栈</li>\n</ul>\n<p><img src=\"./resource/protocols.png\" alt=\"流程\"></p>\n<p>网络协议工作流程图：</p>\n<p><img src=\"./resource/stream2.jpg\" alt=\"流程\"></p>\n<p>链路层 协议：<br><img src=\"./resource/Ethernet.png\" alt=\"流程\"></p>\n<p>IP协议：<br><img src=\"./resource/IP.png\" alt=\"流程\"></p>\n<ul>\n<li><p>版本: 占4位,指IP协议的版本.通信双方使用的IP协议版本必须一致.日前广泛使用的 IP协议版本号为 4 (即 IPv4).IPv6 目前还处于起步阶段.</p>\n</li>\n<li><p>首部长度:占 4 位,可表示的最大十进制数值是15.请注意,这个字段所表示数的单位是32位字 (1个32位字长是4 字节),因此,当 IP 的首部长度为 1111 时 (即十进制的 15),首部长度就达到 60字节.当 IP 分组的首部长度不是4字节的整数倍时,必须利用最后的填充字段加以填充.因此数据部分永远在 4字节的整数倍开始,这样在实现 IP协议时较为方便.首部长度限制为 60字节的缺点是有时可能不够用.这样做的目的是希望用户尽量减少开销.最常用的首部长度就是 20 字节 (即首部长度为 0101),这时不使用任何选项.</p>\n</li>\n<li><p>服务:占 8 位,用来获得更好的服务.这个字段在旧标准中叫做服务类型,但实际上一直没有被使用过.1998年IETF把这个字段改名为区分服务 DS(Differentiated Services).只有在使用区分服务时,这个字段才起作用.</p>\n</li>\n<li><p>总长度:总长度指首都及数据之和的长度,单位为字节.因为总长度字段为 16位,所以数据报的最大长度为 216-1=65 535字节.在IP层下面的每一种数据链路层都有自己的帧格式,其中包括帧格式中的数据字段的最大长度,即最大传送单元 MTU (Maximum Transfer Unit).当一个数据报封装成链路层的帧时,此数据报的总长度 (即首部加上数据部分)一定不能超过下面的数据链路层的MTU值,否则要分片.</p>\n</li>\n<li><p>标识 (Identification):占 16位.IP软件在存储器中维持一个计数器,每产生一个数据报,计数器就加 1,并将此值赋给标识字段.但这个”标识”并不是序号,因为 IP是无连接的服务,数据报不存在按序接收的问题.当数据报由于长度超过网络的 MTU 而必须分片时,这个标识字段的值就被复制到所有的数据报的标识字段中.相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报.</p>\n</li>\n<li><p>标志 (Flag):占3 位,但目前只有2位有意义. 标志字段中的最低位记为 MF(More Fragment).MF=1即表示后面”还有分片”的数据报.MF=0表示这已是若干数据报片中的最后一个.标志字段中间的一位记为DF(Don’t Fragment),意思是”不能分片”,只有当 DF=0时才允许分片.</p>\n</li>\n<li><p>片偏移:占 13位.较长的分组在分片后,某片在原分组中的相对位置.也就是说,相对用户数据字段的起点,该片从何处开始.片偏移以 8个字节为偏移单位,这就是说,每个分片的长度一定是 8字节(64位)的整数倍.</p>\n</li>\n<li><p>生存时间:占 8位,生存时间字段常用的英文缩写是TTL(Time To Live),其表明数据报在网络中的寿命.由发出数据报的源点设置这个字段.其目的是防止无法交付的数据报无限制地在因特网中兜圈子,因而白白消耗网络资源.最初的设计是以秒作为 TTL的单位.每经过一个路由器时,就把TTL减去数据报在路由器消耗掉的一段时间.若数据报在路由器消耗的时间小于 1 秒,就把TTL值减 1.当 TTL值为 0时,就丢弃这个数据报.</p>\n</li>\n<li><p>协议:占 8 位.协议字段指出此数据报携带的数据是使用何种协议,以便使目的主机的IP层知道应将数据部分上交给哪个处理过程.详细资料请看文章最后附录一<a href=\"IP%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E5%8D%8F%E8%AE%AE%E5%AD%97%E6%AE%B5%E4%B8%AD%EF%BC%8C%E6%95%B0%E5%80%BC%E5%92%8C%E6%89%80%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8D%8F%E8%AE%AE\">^附录一</a>.</p>\n</li>\n<li><p>首部检验和:占 16位.这个字段只检验数据报的首部,但不包括数据部分.这是因为数据报每经过一个路由器,都要重新计算一下首都检验和 (一些字段,如生存时间,标志,片偏移等都可能发生变化),不检验数据部分可减少计算的工作量.</p>\n</li>\n<li><p>源地址:占32位.</p>\n</li>\n<li><p>目的地址:占 32位.</p>\n</li>\n<li><p>IP数据报首部的可变部分</p>\n</li>\n</ul>\n<blockquote>\n<p>IP首部的可变部分就是一个可选字段.选项字段用来支持排错,测量以及安全等措施,内容很丰富.此字段的长度可变,从1个字节到40个字节不等,取决于所选择的项目.某些选项项目只需要1个字节,它只包括1个字节的选项代码.但还有些选项需要多个字节,这些选项一个个拼接起来,中间不需要有分隔符,最后用全0的填充字段补齐成为4字节的整数倍. </p>\n</blockquote>\n<blockquote>\n<p>增加首部的可变部分是为了增加IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的.这就增加了每一个路由器处理数据报的开销,实际上这些选项很少被使用.新的IP版本IPv6就将IP数据报的首部长度做成固定的.</p>\n</blockquote>\n<p>目前,这些任选项定义如下:</p>\n<ol>\n<li>安全和处理限制(用于军事领域);</li>\n<li>记录路径(让每个路由器都记下它的IP地址);</li>\n<li>时间戳(Time Stamp)(让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间);</li>\n<li>宽松的源站路由(Loose Source Route)(为数据报指定一系列必须经过的IP地址);</li>\n<li>严格的源站路由(Strict Source Route)(与宽松的源站路由类似,但是要求只能经过指定的这些地址,不能经过其他的地址).<br>这些选项很少被使用,并非所有主机和路由器都支持这些选项.</li>\n</ol>\n<p>TCP 协议：<br><img src=\"./resource/TCP.png\" alt=\"流程\"></p>\n<p>1、端口号：用来标识同一台计算机的不同的应用进程。</p>\n<p>1）源端口：源端口和IP地址的作用是标识报文的返回地址。</p>\n<p>2）目的端口：端口指明接收方计算机上的应用程序接口。</p>\n<p>TCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。</p>\n<p>2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。</p>\n<p>3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。</p>\n<p>4、保留：为将来定义新的用途保留，现在一般置0。</p>\n<p>5、控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。</p>\n<p>1）URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。</p>\n<p>2）ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。</p>\n<p>3）PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。</p>\n<p>4）RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。</p>\n<p>5）SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。</p>\n<p>6）FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。</p>\n<p>6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。</p>\n<p>7、校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。</p>\n<p>8、紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p>\n<p>9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。</p>\n<p>10、数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct tcphdr &#123;</span><br><span class=\"line\">    __be16 source;&#x2F;&#x2F;  16位源端口号</span><br><span class=\"line\">    __be16 dest; &#x2F;&#x2F;16位目的端口号</span><br><span class=\"line\">    __be32 seq; &#x2F;&#x2F;序列号</span><br><span class=\"line\">    __be32 ack_seq; &#x2F;&#x2F;确认号</span><br><span class=\"line\">#if defined(__LITTLE_ENDIAN_BITFIELD)</span><br><span class=\"line\">    __u16   res1:4,&#x2F;&#x2F;保留位</span><br><span class=\"line\">            doff:4, &#x2F;&#x2F;tcp报头长度</span><br><span class=\"line\">            fin:1,</span><br><span class=\"line\">            syn:1,</span><br><span class=\"line\">            rst:1,</span><br><span class=\"line\">            psh:1,</span><br><span class=\"line\">            ack:1,</span><br><span class=\"line\">            urg:1,</span><br><span class=\"line\">            ece:1,&#x2F;&#x2F;ECN回显（发送方接受到了一个更早的拥塞通告)</span><br><span class=\"line\">            cwr:1;&#x2F;&#x2F;拥塞窗口减（发送方降低它的发送速率)</span><br><span class=\"line\">#elif defined(__BIG_ENDIAN_BITFIELD)</span><br><span class=\"line\">    __u16   doff:4,</span><br><span class=\"line\">            res1:4,</span><br><span class=\"line\">            cwr:1,</span><br><span class=\"line\">            ece:1,</span><br><span class=\"line\">            urg:1,</span><br><span class=\"line\">            ack:1,</span><br><span class=\"line\">            psh:1,</span><br><span class=\"line\">            rst:1,</span><br><span class=\"line\">            syn:1,</span><br><span class=\"line\">            fin:1;</span><br><span class=\"line\">#else</span><br><span class=\"line\">#error &quot;Adjust your &lt;asm&#x2F;byteorder.h&gt; defines&quot;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    __be16 window;&#x2F;&#x2F;窗口大小</span><br><span class=\"line\">    __be16 check;&#x2F;&#x2F;效验和</span><br><span class=\"line\">    __be16 urg_ptr;&#x2F;&#x2F;紧急指针</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<p>UDP 协议：<br>UDP协议是提供与IP一样的不可靠，无连接的交付服务，UDP报文可能出现丢失，重复或者乱序到达等现象。</p>\n<p>UDP协议在IP协议上增加了复用、分用和差错检测功能。UDP的特点：</p>\n<ol>\n<li>是无连接的。相比于TCP协议，UDP协议在传送数据前不需要建立连接，当然也就没有释放连接。</li>\n<li>是尽最大努力交付的。也就是说UDP协议无法保证数据能够准确的交付到目的主机。也不需要对接收到的UDP报文进行确认。</li>\n<li>是面向报文的。也就是说UDP协议将应用层传输下来的数据封装在一个UDP包中，不进行拆分或合并。因此，运输层在收到对方的UDP包后，会去掉首部后，将数据原封不动的交给应用进程。</li>\n<li>没有拥塞控制。因此UDP协议的发送速率不送网络的拥塞度影响。</li>\n<li>UDP支持一对一、一对多、多对一和多对多的交互通信。</li>\n<li>UDP的头部占用较小，只占用8个字节。</li>\n</ol>\n<p><img src=\"./resource/UDP.jpeg\" alt=\"UPD协议\"></p>\n<ul>\n<li>源端口：源端口号。在需要对方回信时选用。不需要时可用全0。</li>\n<li>目的端口：目的端口号。这在终点交付报文时必须要使用到。</li>\n<li>长度： UDP用户数据报的长度，其最小值是8（仅有首部）。</li>\n<li>校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct udphdr</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    u_short uh_sport;&#x2F;&#x2F;源端口地址</span><br><span class=\"line\">    u_short uh_dport;&#x2F;&#x2F;目的端口地址</span><br><span class=\"line\">    u_short uh_ulen;&#x2F;&#x2F;UD报文长度</span><br><span class=\"line\">    u_short uh_sum;&#x2F;&#x2F;16位校验和</span><br><span class=\"line\">&#125;UDP_HEADER;</span><br></pre></td></tr></table></figure>\n\n\n<p>KCP——可靠的UDP</p>\n<p>HTTP 协议：<br><img src=\"./resource/HTTP.png\" alt=\"HTTTP 协议\"></p>\n<p><strong>TCP/IP、UDP(KCP)、HTTPS、HTTP2.0</strong></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html\">HTTPS 升级指南</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\">SSL/TLS协议运行机制的概述</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\">HTTP 协议入门</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/\">阮一峰网络日志</a></p>\n<p>Socket(Web socket)、XMPP</p>\n<p>RTMP</p>\n<p>FRP、UPnP、VPN、WoL</p>\n<p>DNS、(N)ARP、令牌网络、ICMP</p>\n<p>附录一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数值\t\t值描述 </span><br><span class=\"line\">0 \t\t保留字段，用于IPv6(跳跃点到跳跃点选项) </span><br><span class=\"line\">1 \t\tInternet控制消息 </span><br><span class=\"line\">2\t\tInternet组管理 </span><br><span class=\"line\">3 \t\t网关到网关 </span><br><span class=\"line\">4 \t\tIP中的IP(封装) </span><br><span class=\"line\">5 \t\t流 </span><br><span class=\"line\">6 \t\t传输控制 </span><br><span class=\"line\">7 \t\tCBT </span><br><span class=\"line\">8 \t\t外部网关协议 </span><br><span class=\"line\">9 \t\t任何私有内部网关(Cisco在它的IGRP实现中使用) </span><br><span class=\"line\">10 \t\tBBNRCC监视 </span><br><span class=\"line\">11 \t\t网络语音协议 </span><br><span class=\"line\">12 \t\tPUP </span><br><span class=\"line\">13 \t\tARGUS </span><br><span class=\"line\">14 \t\tEMCON </span><br><span class=\"line\">15 \t\t网络诊断工具 </span><br><span class=\"line\">16 \t\t混乱(Chaos) </span><br><span class=\"line\">17 \t\t用户数据报文 </span><br><span class=\"line\">18 \t\t复用 </span><br><span class=\"line\">19 \t\tDCN测量子系统 </span><br><span class=\"line\">20 \t\t主机监视 </span><br><span class=\"line\">21 \t\t包无线测量 </span><br><span class=\"line\">22 \t\tXEROXNSIDP </span><br><span class=\"line\">23 \t\tTrunk-1 </span><br><span class=\"line\">24 \t\tTrunk-2 </span><br><span class=\"line\">25 \t\tleaf-1 </span><br><span class=\"line\">26 \t\tleaf-2 </span><br><span class=\"line\">27 \t\t可靠的数据协议 </span><br><span class=\"line\">28 \t\tInternet可靠交易 </span><br><span class=\"line\">29 \t\tISO传输协议第四类 </span><br><span class=\"line\">30 \t\t大块数据传输协议 </span><br><span class=\"line\">31 \t\tMFE网络服务协议 </span><br><span class=\"line\">32 \t\tMERIT节点之间协议 </span><br><span class=\"line\">33 \t\t序列交换协议 </span><br><span class=\"line\">34 \t\t第三方连接协议 </span><br><span class=\"line\">35 \t\t域之间策略路由协议 </span><br><span class=\"line\">36 \t\tXTP </span><br><span class=\"line\">37 \t\t数据报文传递协议 </span><br><span class=\"line\">38 \t\tIDPR控制消息传输协议 </span><br><span class=\"line\">39 \t\tTP+ +传输协议 </span><br><span class=\"line\">40 \t\tIL传输协议 </span><br><span class=\"line\">41 \t\tIPv6 </span><br><span class=\"line\">42 \t\t资源命令路由协议 </span><br><span class=\"line\">43 \t\tIPv6的路由报头 </span><br><span class=\"line\">44 \t\tIPv6的片报头 </span><br><span class=\"line\">45 \t\t域之间路由协议 </span><br><span class=\"line\">46 \t\t保留协议 </span><br><span class=\"line\">47 \t\t通用路由封装 </span><br><span class=\"line\">48 \t\t可移动主机路由协议 </span><br><span class=\"line\">49 \t\tBNA </span><br><span class=\"line\">50 \t\tIPv6封装安全有效负载 </span><br><span class=\"line\">51 \t\tIPv6验证报头 </span><br><span class=\"line\">52 \t\t集成的网络层安全TUBA </span><br><span class=\"line\">53 \t\t带加密的IP </span><br><span class=\"line\">54 \t\tNBMA地址解析协议 </span><br><span class=\"line\">55 \t\tIP可移动性 </span><br><span class=\"line\">56 \t\t使用Kryptonet钥匙管理的传输层安全协议 </span><br><span class=\"line\">57 \t\tSKIP </span><br><span class=\"line\">58 \t\tIPv6的ICMP </span><br><span class=\"line\">59 \t\tIPv6的无下一个报头 </span><br><span class=\"line\">60 \t\tIPv6的信宿选项 </span><br><span class=\"line\">61 \t\t任何主机内部协议 </span><br><span class=\"line\">62 \t\tCFTP </span><br><span class=\"line\">63 \t\t任何本地网络 </span><br><span class=\"line\">64 \t\tSATNET和BackroomEXPAK </span><br><span class=\"line\">65 \t\tKryptolan </span><br><span class=\"line\">66 \t\tMIT远程虚拟磁盘协议 </span><br><span class=\"line\">67 \t\tInternet Pluribus包核心 </span><br><span class=\"line\">68 \t\t任何分布式文件系统 </span><br><span class=\"line\">69 \t\tSATNET监视 </span><br><span class=\"line\">70 \t\tVISA协议 </span><br><span class=\"line\">71 \t\tInternet包核心工具 </span><br><span class=\"line\">72 \t\t计算机协议Network Executive </span><br><span class=\"line\">73 \t\t计算机协议Heart Beat </span><br><span class=\"line\">74 \t\tWang Span网络 </span><br><span class=\"line\">75 \t\t包视频协议 </span><br><span class=\"line\">76 \t\tBackroom SATNET监视 </span><br><span class=\"line\">77 \t\tSUN ND PROTOCOL—临时 </span><br><span class=\"line\">78 \t\tWIDEBAND监视 </span><br><span class=\"line\">79 \t\tWIDEBAND EXPAK </span><br><span class=\"line\">80 \t\tISO Internet协议 </span><br><span class=\"line\">81 \t\tVMTP </span><br><span class=\"line\">82 \t\tSECURE—VMTP(安全的VMTP) </span><br><span class=\"line\">83 \t\tVINES </span><br><span class=\"line\">84 \t\tTTP </span><br><span class=\"line\">85 \t\tNSFNET—IGP </span><br><span class=\"line\">86 \t\t不同网关协议 </span><br><span class=\"line\">87 \t\tTCF </span><br><span class=\"line\">88 \t\tEIGRP </span><br><span class=\"line\">89 \t\tOSPFIGP </span><br><span class=\"line\">90 \t\tSprite RPC协议 </span><br><span class=\"line\">91 \t\tLocus地址解析协议 </span><br><span class=\"line\">92 \t\t多播传输协议 </span><br><span class=\"line\">93 \t\tAX.25帧 </span><br><span class=\"line\">94 \t\tIP内部的IP封装协议 </span><br><span class=\"line\">95 \t\t可移动网络互连控制协议 </span><br><span class=\"line\">96 \t\t旗语通讯安全协议 </span><br><span class=\"line\">97 \t\tIP中的以太封装 </span><br><span class=\"line\">98 \t\t封装报头 </span><br><span class=\"line\">99 \t\t任何私有加密方案 </span><br><span class=\"line\">100\t\tGMTP </span><br><span class=\"line\">101 \tIpsilon流量管理协议 </span><br><span class=\"line\">102 \tPNNI over IP </span><br><span class=\"line\">103 \t协议独立多播 </span><br><span class=\"line\">104 \t\tARIS </span><br><span class=\"line\">105 \t\tSCPS </span><br><span class=\"line\">106 \t\tQNX </span><br><span class=\"line\">107 \t\t活动网络 </span><br><span class=\"line\">108 \t\tIP有效负载压缩协议 </span><br><span class=\"line\">109 \t\tSitara网络协议 </span><br><span class=\"line\">110 \t\tCompaq对等协议 </span><br><span class=\"line\">111 \t\tIP中的IPX </span><br><span class=\"line\">112 \t\t虚拟路由器冗余协议 </span><br><span class=\"line\">113 \t\tPGM可靠传输协议 </span><br><span class=\"line\">114 \t\t任何0跳跃协议 </span><br><span class=\"line\">115 \t\t第二层隧道协议 </span><br><span class=\"line\">116 \t\tD-II数据交换(DDX) </span><br><span class=\"line\">117 \t\t交互式代理传输协议 </span><br><span class=\"line\">118 \t\t日程计划传输协议 </span><br><span class=\"line\">119 \t\tSpectraLink无线协议 </span><br><span class=\"line\">120 \t\tUTI </span><br><span class=\"line\">121 \t\t简单消息协议 </span><br><span class=\"line\">122 \t\tSM </span><br><span class=\"line\">123 \t\t性能透明性协议 </span><br><span class=\"line\">124 \t\tISIS over IPv4 </span><br><span class=\"line\">125 \t\tFIRE </span><br><span class=\"line\">126 \t\tCombat无线传输协议 </span><br><span class=\"line\">127 \t\tCombat无线用户数据报文 </span><br><span class=\"line\">128 \t\tSSCOPMCE </span><br><span class=\"line\">129 \t\tIPLT </span><br><span class=\"line\">130 \t\t安全包防护 </span><br><span class=\"line\">131 \t\tIP中的私有IP封装 </span><br><span class=\"line\">132 \t\t流控制传输协议 </span><br><span class=\"line\">133～254\t未分配 </span><br><span class=\"line\"></span><br><span class=\"line\">255 \t\t保留 </span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>协议簇、协议栈</li>\n</ul>\n<p><img src=\"./resource/protocols.png\" alt=\"流程\"></p>\n<p>网络协议工作流程图：</p>\n<p><img src=\"./resource/stream2.jpg\" alt=\"流程\"></p>\n<p>链路层 协议：<br><img src=\"./resource/Ethernet.png\" alt=\"流程\"></p>\n<p>IP协议：<br><img src=\"./resource/IP.png\" alt=\"流程\"></p>\n<ul>\n<li><p>版本: 占4位,指IP协议的版本.通信双方使用的IP协议版本必须一致.日前广泛使用的 IP协议版本号为 4 (即 IPv4).IPv6 目前还处于起步阶段.</p>\n</li>\n<li><p>首部长度:占 4 位,可表示的最大十进制数值是15.请注意,这个字段所表示数的单位是32位字 (1个32位字长是4 字节),因此,当 IP 的首部长度为 1111 时 (即十进制的 15),首部长度就达到 60字节.当 IP 分组的首部长度不是4字节的整数倍时,必须利用最后的填充字段加以填充.因此数据部分永远在 4字节的整数倍开始,这样在实现 IP协议时较为方便.首部长度限制为 60字节的缺点是有时可能不够用.这样做的目的是希望用户尽量减少开销.最常用的首部长度就是 20 字节 (即首部长度为 0101),这时不使用任何选项.</p>\n</li>\n<li><p>服务:占 8 位,用来获得更好的服务.这个字段在旧标准中叫做服务类型,但实际上一直没有被使用过.1998年IETF把这个字段改名为区分服务 DS(Differentiated Services).只有在使用区分服务时,这个字段才起作用.</p>\n</li>\n<li><p>总长度:总长度指首都及数据之和的长度,单位为字节.因为总长度字段为 16位,所以数据报的最大长度为 216-1=65 535字节.在IP层下面的每一种数据链路层都有自己的帧格式,其中包括帧格式中的数据字段的最大长度,即最大传送单元 MTU (Maximum Transfer Unit).当一个数据报封装成链路层的帧时,此数据报的总长度 (即首部加上数据部分)一定不能超过下面的数据链路层的MTU值,否则要分片.</p>\n</li>\n<li><p>标识 (Identification):占 16位.IP软件在存储器中维持一个计数器,每产生一个数据报,计数器就加 1,并将此值赋给标识字段.但这个”标识”并不是序号,因为 IP是无连接的服务,数据报不存在按序接收的问题.当数据报由于长度超过网络的 MTU 而必须分片时,这个标识字段的值就被复制到所有的数据报的标识字段中.相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报.</p>\n</li>\n<li><p>标志 (Flag):占3 位,但目前只有2位有意义. 标志字段中的最低位记为 MF(More Fragment).MF=1即表示后面”还有分片”的数据报.MF=0表示这已是若干数据报片中的最后一个.标志字段中间的一位记为DF(Don’t Fragment),意思是”不能分片”,只有当 DF=0时才允许分片.</p>\n</li>\n<li><p>片偏移:占 13位.较长的分组在分片后,某片在原分组中的相对位置.也就是说,相对用户数据字段的起点,该片从何处开始.片偏移以 8个字节为偏移单位,这就是说,每个分片的长度一定是 8字节(64位)的整数倍.</p>\n</li>\n<li><p>生存时间:占 8位,生存时间字段常用的英文缩写是TTL(Time To Live),其表明数据报在网络中的寿命.由发出数据报的源点设置这个字段.其目的是防止无法交付的数据报无限制地在因特网中兜圈子,因而白白消耗网络资源.最初的设计是以秒作为 TTL的单位.每经过一个路由器时,就把TTL减去数据报在路由器消耗掉的一段时间.若数据报在路由器消耗的时间小于 1 秒,就把TTL值减 1.当 TTL值为 0时,就丢弃这个数据报.</p>\n</li>\n<li><p>协议:占 8 位.协议字段指出此数据报携带的数据是使用何种协议,以便使目的主机的IP层知道应将数据部分上交给哪个处理过程.详细资料请看文章最后附录一<a href=\"IP%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E5%8D%8F%E8%AE%AE%E5%AD%97%E6%AE%B5%E4%B8%AD%EF%BC%8C%E6%95%B0%E5%80%BC%E5%92%8C%E6%89%80%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8D%8F%E8%AE%AE\">^附录一</a>.</p>\n</li>\n<li><p>首部检验和:占 16位.这个字段只检验数据报的首部,但不包括数据部分.这是因为数据报每经过一个路由器,都要重新计算一下首都检验和 (一些字段,如生存时间,标志,片偏移等都可能发生变化),不检验数据部分可减少计算的工作量.</p>\n</li>\n<li><p>源地址:占32位.</p>\n</li>\n<li><p>目的地址:占 32位.</p>\n</li>\n<li><p>IP数据报首部的可变部分</p>\n</li>\n</ul>\n<blockquote>\n<p>IP首部的可变部分就是一个可选字段.选项字段用来支持排错,测量以及安全等措施,内容很丰富.此字段的长度可变,从1个字节到40个字节不等,取决于所选择的项目.某些选项项目只需要1个字节,它只包括1个字节的选项代码.但还有些选项需要多个字节,这些选项一个个拼接起来,中间不需要有分隔符,最后用全0的填充字段补齐成为4字节的整数倍. </p>\n</blockquote>\n<blockquote>\n<p>增加首部的可变部分是为了增加IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的.这就增加了每一个路由器处理数据报的开销,实际上这些选项很少被使用.新的IP版本IPv6就将IP数据报的首部长度做成固定的.</p>\n</blockquote>\n<p>目前,这些任选项定义如下:</p>\n<ol>\n<li>安全和处理限制(用于军事领域);</li>\n<li>记录路径(让每个路由器都记下它的IP地址);</li>\n<li>时间戳(Time Stamp)(让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间);</li>\n<li>宽松的源站路由(Loose Source Route)(为数据报指定一系列必须经过的IP地址);</li>\n<li>严格的源站路由(Strict Source Route)(与宽松的源站路由类似,但是要求只能经过指定的这些地址,不能经过其他的地址).<br>这些选项很少被使用,并非所有主机和路由器都支持这些选项.</li>\n</ol>\n<p>TCP 协议：<br><img src=\"./resource/TCP.png\" alt=\"流程\"></p>\n<p>1、端口号：用来标识同一台计算机的不同的应用进程。</p>\n<p>1）源端口：源端口和IP地址的作用是标识报文的返回地址。</p>\n<p>2）目的端口：端口指明接收方计算机上的应用程序接口。</p>\n<p>TCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。</p>\n<p>2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。</p>\n<p>3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。</p>\n<p>4、保留：为将来定义新的用途保留，现在一般置0。</p>\n<p>5、控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。</p>\n<p>1）URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。</p>\n<p>2）ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。</p>\n<p>3）PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。</p>\n<p>4）RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。</p>\n<p>5）SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。</p>\n<p>6）FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。</p>\n<p>6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。</p>\n<p>7、校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。</p>\n<p>8、紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p>\n<p>9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。</p>\n<p>10、数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct tcphdr &#123;</span><br><span class=\"line\">    __be16 source;&#x2F;&#x2F;  16位源端口号</span><br><span class=\"line\">    __be16 dest; &#x2F;&#x2F;16位目的端口号</span><br><span class=\"line\">    __be32 seq; &#x2F;&#x2F;序列号</span><br><span class=\"line\">    __be32 ack_seq; &#x2F;&#x2F;确认号</span><br><span class=\"line\">#if defined(__LITTLE_ENDIAN_BITFIELD)</span><br><span class=\"line\">    __u16   res1:4,&#x2F;&#x2F;保留位</span><br><span class=\"line\">            doff:4, &#x2F;&#x2F;tcp报头长度</span><br><span class=\"line\">            fin:1,</span><br><span class=\"line\">            syn:1,</span><br><span class=\"line\">            rst:1,</span><br><span class=\"line\">            psh:1,</span><br><span class=\"line\">            ack:1,</span><br><span class=\"line\">            urg:1,</span><br><span class=\"line\">            ece:1,&#x2F;&#x2F;ECN回显（发送方接受到了一个更早的拥塞通告)</span><br><span class=\"line\">            cwr:1;&#x2F;&#x2F;拥塞窗口减（发送方降低它的发送速率)</span><br><span class=\"line\">#elif defined(__BIG_ENDIAN_BITFIELD)</span><br><span class=\"line\">    __u16   doff:4,</span><br><span class=\"line\">            res1:4,</span><br><span class=\"line\">            cwr:1,</span><br><span class=\"line\">            ece:1,</span><br><span class=\"line\">            urg:1,</span><br><span class=\"line\">            ack:1,</span><br><span class=\"line\">            psh:1,</span><br><span class=\"line\">            rst:1,</span><br><span class=\"line\">            syn:1,</span><br><span class=\"line\">            fin:1;</span><br><span class=\"line\">#else</span><br><span class=\"line\">#error &quot;Adjust your &lt;asm&#x2F;byteorder.h&gt; defines&quot;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    __be16 window;&#x2F;&#x2F;窗口大小</span><br><span class=\"line\">    __be16 check;&#x2F;&#x2F;效验和</span><br><span class=\"line\">    __be16 urg_ptr;&#x2F;&#x2F;紧急指针</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<p>UDP 协议：<br>UDP协议是提供与IP一样的不可靠，无连接的交付服务，UDP报文可能出现丢失，重复或者乱序到达等现象。</p>\n<p>UDP协议在IP协议上增加了复用、分用和差错检测功能。UDP的特点：</p>\n<ol>\n<li>是无连接的。相比于TCP协议，UDP协议在传送数据前不需要建立连接，当然也就没有释放连接。</li>\n<li>是尽最大努力交付的。也就是说UDP协议无法保证数据能够准确的交付到目的主机。也不需要对接收到的UDP报文进行确认。</li>\n<li>是面向报文的。也就是说UDP协议将应用层传输下来的数据封装在一个UDP包中，不进行拆分或合并。因此，运输层在收到对方的UDP包后，会去掉首部后，将数据原封不动的交给应用进程。</li>\n<li>没有拥塞控制。因此UDP协议的发送速率不送网络的拥塞度影响。</li>\n<li>UDP支持一对一、一对多、多对一和多对多的交互通信。</li>\n<li>UDP的头部占用较小，只占用8个字节。</li>\n</ol>\n<p><img src=\"./resource/UDP.jpeg\" alt=\"UPD协议\"></p>\n<ul>\n<li>源端口：源端口号。在需要对方回信时选用。不需要时可用全0。</li>\n<li>目的端口：目的端口号。这在终点交付报文时必须要使用到。</li>\n<li>长度： UDP用户数据报的长度，其最小值是8（仅有首部）。</li>\n<li>校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct udphdr</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    u_short uh_sport;&#x2F;&#x2F;源端口地址</span><br><span class=\"line\">    u_short uh_dport;&#x2F;&#x2F;目的端口地址</span><br><span class=\"line\">    u_short uh_ulen;&#x2F;&#x2F;UD报文长度</span><br><span class=\"line\">    u_short uh_sum;&#x2F;&#x2F;16位校验和</span><br><span class=\"line\">&#125;UDP_HEADER;</span><br></pre></td></tr></table></figure>\n\n\n<p>KCP——可靠的UDP</p>\n<p>HTTP 协议：<br><img src=\"./resource/HTTP.png\" alt=\"HTTTP 协议\"></p>\n<p><strong>TCP/IP、UDP(KCP)、HTTPS、HTTP2.0</strong></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html\">HTTPS 升级指南</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\">SSL/TLS协议运行机制的概述</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\">HTTP 协议入门</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/\">阮一峰网络日志</a></p>\n<p>Socket(Web socket)、XMPP</p>\n<p>RTMP</p>\n<p>FRP、UPnP、VPN、WoL</p>\n<p>DNS、(N)ARP、令牌网络、ICMP</p>\n<p>附录一：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数值\t\t值描述 </span><br><span class=\"line\">0 \t\t保留字段，用于IPv6(跳跃点到跳跃点选项) </span><br><span class=\"line\">1 \t\tInternet控制消息 </span><br><span class=\"line\">2\t\tInternet组管理 </span><br><span class=\"line\">3 \t\t网关到网关 </span><br><span class=\"line\">4 \t\tIP中的IP(封装) </span><br><span class=\"line\">5 \t\t流 </span><br><span class=\"line\">6 \t\t传输控制 </span><br><span class=\"line\">7 \t\tCBT </span><br><span class=\"line\">8 \t\t外部网关协议 </span><br><span class=\"line\">9 \t\t任何私有内部网关(Cisco在它的IGRP实现中使用) </span><br><span class=\"line\">10 \t\tBBNRCC监视 </span><br><span class=\"line\">11 \t\t网络语音协议 </span><br><span class=\"line\">12 \t\tPUP </span><br><span class=\"line\">13 \t\tARGUS </span><br><span class=\"line\">14 \t\tEMCON </span><br><span class=\"line\">15 \t\t网络诊断工具 </span><br><span class=\"line\">16 \t\t混乱(Chaos) </span><br><span class=\"line\">17 \t\t用户数据报文 </span><br><span class=\"line\">18 \t\t复用 </span><br><span class=\"line\">19 \t\tDCN测量子系统 </span><br><span class=\"line\">20 \t\t主机监视 </span><br><span class=\"line\">21 \t\t包无线测量 </span><br><span class=\"line\">22 \t\tXEROXNSIDP </span><br><span class=\"line\">23 \t\tTrunk-1 </span><br><span class=\"line\">24 \t\tTrunk-2 </span><br><span class=\"line\">25 \t\tleaf-1 </span><br><span class=\"line\">26 \t\tleaf-2 </span><br><span class=\"line\">27 \t\t可靠的数据协议 </span><br><span class=\"line\">28 \t\tInternet可靠交易 </span><br><span class=\"line\">29 \t\tISO传输协议第四类 </span><br><span class=\"line\">30 \t\t大块数据传输协议 </span><br><span class=\"line\">31 \t\tMFE网络服务协议 </span><br><span class=\"line\">32 \t\tMERIT节点之间协议 </span><br><span class=\"line\">33 \t\t序列交换协议 </span><br><span class=\"line\">34 \t\t第三方连接协议 </span><br><span class=\"line\">35 \t\t域之间策略路由协议 </span><br><span class=\"line\">36 \t\tXTP </span><br><span class=\"line\">37 \t\t数据报文传递协议 </span><br><span class=\"line\">38 \t\tIDPR控制消息传输协议 </span><br><span class=\"line\">39 \t\tTP+ +传输协议 </span><br><span class=\"line\">40 \t\tIL传输协议 </span><br><span class=\"line\">41 \t\tIPv6 </span><br><span class=\"line\">42 \t\t资源命令路由协议 </span><br><span class=\"line\">43 \t\tIPv6的路由报头 </span><br><span class=\"line\">44 \t\tIPv6的片报头 </span><br><span class=\"line\">45 \t\t域之间路由协议 </span><br><span class=\"line\">46 \t\t保留协议 </span><br><span class=\"line\">47 \t\t通用路由封装 </span><br><span class=\"line\">48 \t\t可移动主机路由协议 </span><br><span class=\"line\">49 \t\tBNA </span><br><span class=\"line\">50 \t\tIPv6封装安全有效负载 </span><br><span class=\"line\">51 \t\tIPv6验证报头 </span><br><span class=\"line\">52 \t\t集成的网络层安全TUBA </span><br><span class=\"line\">53 \t\t带加密的IP </span><br><span class=\"line\">54 \t\tNBMA地址解析协议 </span><br><span class=\"line\">55 \t\tIP可移动性 </span><br><span class=\"line\">56 \t\t使用Kryptonet钥匙管理的传输层安全协议 </span><br><span class=\"line\">57 \t\tSKIP </span><br><span class=\"line\">58 \t\tIPv6的ICMP </span><br><span class=\"line\">59 \t\tIPv6的无下一个报头 </span><br><span class=\"line\">60 \t\tIPv6的信宿选项 </span><br><span class=\"line\">61 \t\t任何主机内部协议 </span><br><span class=\"line\">62 \t\tCFTP </span><br><span class=\"line\">63 \t\t任何本地网络 </span><br><span class=\"line\">64 \t\tSATNET和BackroomEXPAK </span><br><span class=\"line\">65 \t\tKryptolan </span><br><span class=\"line\">66 \t\tMIT远程虚拟磁盘协议 </span><br><span class=\"line\">67 \t\tInternet Pluribus包核心 </span><br><span class=\"line\">68 \t\t任何分布式文件系统 </span><br><span class=\"line\">69 \t\tSATNET监视 </span><br><span class=\"line\">70 \t\tVISA协议 </span><br><span class=\"line\">71 \t\tInternet包核心工具 </span><br><span class=\"line\">72 \t\t计算机协议Network Executive </span><br><span class=\"line\">73 \t\t计算机协议Heart Beat </span><br><span class=\"line\">74 \t\tWang Span网络 </span><br><span class=\"line\">75 \t\t包视频协议 </span><br><span class=\"line\">76 \t\tBackroom SATNET监视 </span><br><span class=\"line\">77 \t\tSUN ND PROTOCOL—临时 </span><br><span class=\"line\">78 \t\tWIDEBAND监视 </span><br><span class=\"line\">79 \t\tWIDEBAND EXPAK </span><br><span class=\"line\">80 \t\tISO Internet协议 </span><br><span class=\"line\">81 \t\tVMTP </span><br><span class=\"line\">82 \t\tSECURE—VMTP(安全的VMTP) </span><br><span class=\"line\">83 \t\tVINES </span><br><span class=\"line\">84 \t\tTTP </span><br><span class=\"line\">85 \t\tNSFNET—IGP </span><br><span class=\"line\">86 \t\t不同网关协议 </span><br><span class=\"line\">87 \t\tTCF </span><br><span class=\"line\">88 \t\tEIGRP </span><br><span class=\"line\">89 \t\tOSPFIGP </span><br><span class=\"line\">90 \t\tSprite RPC协议 </span><br><span class=\"line\">91 \t\tLocus地址解析协议 </span><br><span class=\"line\">92 \t\t多播传输协议 </span><br><span class=\"line\">93 \t\tAX.25帧 </span><br><span class=\"line\">94 \t\tIP内部的IP封装协议 </span><br><span class=\"line\">95 \t\t可移动网络互连控制协议 </span><br><span class=\"line\">96 \t\t旗语通讯安全协议 </span><br><span class=\"line\">97 \t\tIP中的以太封装 </span><br><span class=\"line\">98 \t\t封装报头 </span><br><span class=\"line\">99 \t\t任何私有加密方案 </span><br><span class=\"line\">100\t\tGMTP </span><br><span class=\"line\">101 \tIpsilon流量管理协议 </span><br><span class=\"line\">102 \tPNNI over IP </span><br><span class=\"line\">103 \t协议独立多播 </span><br><span class=\"line\">104 \t\tARIS </span><br><span class=\"line\">105 \t\tSCPS </span><br><span class=\"line\">106 \t\tQNX </span><br><span class=\"line\">107 \t\t活动网络 </span><br><span class=\"line\">108 \t\tIP有效负载压缩协议 </span><br><span class=\"line\">109 \t\tSitara网络协议 </span><br><span class=\"line\">110 \t\tCompaq对等协议 </span><br><span class=\"line\">111 \t\tIP中的IPX </span><br><span class=\"line\">112 \t\t虚拟路由器冗余协议 </span><br><span class=\"line\">113 \t\tPGM可靠传输协议 </span><br><span class=\"line\">114 \t\t任何0跳跃协议 </span><br><span class=\"line\">115 \t\t第二层隧道协议 </span><br><span class=\"line\">116 \t\tD-II数据交换(DDX) </span><br><span class=\"line\">117 \t\t交互式代理传输协议 </span><br><span class=\"line\">118 \t\t日程计划传输协议 </span><br><span class=\"line\">119 \t\tSpectraLink无线协议 </span><br><span class=\"line\">120 \t\tUTI </span><br><span class=\"line\">121 \t\t简单消息协议 </span><br><span class=\"line\">122 \t\tSM </span><br><span class=\"line\">123 \t\t性能透明性协议 </span><br><span class=\"line\">124 \t\tISIS over IPv4 </span><br><span class=\"line\">125 \t\tFIRE </span><br><span class=\"line\">126 \t\tCombat无线传输协议 </span><br><span class=\"line\">127 \t\tCombat无线用户数据报文 </span><br><span class=\"line\">128 \t\tSSCOPMCE </span><br><span class=\"line\">129 \t\tIPLT </span><br><span class=\"line\">130 \t\t安全包防护 </span><br><span class=\"line\">131 \t\tIP中的私有IP封装 </span><br><span class=\"line\">132 \t\t流控制传输协议 </span><br><span class=\"line\">133～254\t未分配 </span><br><span class=\"line\"></span><br><span class=\"line\">255 \t\t保留 </span><br></pre></td></tr></table></figure>"},{"_content":"# SQLite  \n\n## 1、终端命令\n\n```sql\n.auth ON|OFF           Show authorizer callbacks\n.backup ?DB? FILE      Backup DB (default \"main\") to FILE\n                         Add \"--append\" to open using appendvfs.\n.bail on|off           Stop after hitting an error.  Default OFF\n.binary on|off         Turn binary output on or off.  Default OFF\n.cd DIRECTORY          Change the working directory to DIRECTORY\n.changes on|off        Show number of rows changed by SQL\n.check GLOB            Fail if output since .testcase does not match\n.clone NEWDB           Clone data into NEWDB from the existing database\n.databases             List names and files of attached databases\n.dbconfig ?op? ?val?   List or change sqlite3_db_config() options\n.dbinfo ?DB?           Show status information about the database\n.dump ?TABLE? ...      Dump the database in an SQL text format\n                         If TABLE specified, only dump tables matching\n                         LIKE pattern TABLE.\n.echo on|off           Turn command echo on or off\n.eqp on|off|full       Enable or disable automatic EXPLAIN QUERY PLAN\n.excel                 Display the output of next command in a spreadsheet\n.exit                  Exit this program\n.expert                EXPERIMENTAL. Suggest indexes for specified queries\n.fullschema ?--indent? Show schema and the content of sqlite_stat tables\n.headers on|off        Turn display of headers on or off\n.help                  Show this message\n.import FILE TABLE     Import data from FILE into TABLE\n.imposter INDEX TABLE  Create imposter table TABLE on index INDEX\n.indexes ?TABLE?       Show names of all indexes\n                         If TABLE specified, only show indexes for tables\n                         matching LIKE pattern TABLE.\n.limit ?LIMIT? ?VAL?   Display or change the value of an SQLITE_LIMIT\n.lint OPTIONS          Report potential schema issues. Options:\n                         fkey-indexes     Find missing foreign key indexes\n.log FILE|off          Turn logging on or off.  FILE can be stderr/stdout\n.mode MODE ?TABLE?     Set output mode where MODE is one of:\n                         ascii    Columns/rows delimited by 0x1F and 0x1E\n                         csv      Comma-separated values\n                         column   Left-aligned columns.  (See .width)\n                         html     HTML <table> code\n                         insert   SQL insert statements for TABLE\n                         line     One value per line\n                         list     Values delimited by \"|\"\n                         quote    Escape answers as for SQL\n                         tabs     Tab-separated values\n                         tcl      TCL list elements\n.nullvalue STRING      Use STRING in place of NULL values\n.once (-e|-x|FILE)     Output for the next SQL command only to FILE\n                         or invoke system text editor (-e) or spreadsheet (-x)\n                         on the output.\n.open ?OPTIONS? ?FILE? Close existing database and reopen FILE\n                         The --new option starts with an empty file\n                         Other options: --readonly --append --zip\n.output ?FILE?         Send output to FILE or stdout\n.print STRING...       Print literal STRING\n.prompt MAIN CONTINUE  Replace the standard prompts\n.quit                  Exit this program\n.read FILENAME         Execute SQL in FILENAME\n.restore ?DB? FILE     Restore content of DB (default \"main\") from FILE\n.save FILE             Write in-memory database into FILE\n.scanstats on|off      Turn sqlite3_stmt_scanstatus() metrics on or off\n.schema ?PATTERN?      Show the CREATE statements matching PATTERN\n                          Add --indent for pretty-printing\n.selftest ?--init?     Run tests defined in the SELFTEST table\n.separator COL ?ROW?   Change the column separator and optionally the row\n                         separator for both the output mode and .import\n.session CMD ...       Create or control sessions\n.sha3sum ?OPTIONS...?  Compute a SHA3 hash of database content\n.shell CMD ARGS...     Run CMD ARGS... in a system shell\n.show                  Show the current values for various settings\n.stats ?on|off?        Show stats or turn stats on or off\n.system CMD ARGS...    Run CMD ARGS... in a system shell\n.tables ?TABLE?        List names of tables\n                         If TABLE specified, only list tables matching\n                         LIKE pattern TABLE.\n.testcase NAME         Begin redirecting output to 'testcase-out.txt'\n.timeout MS            Try opening locked tables for MS milliseconds\n.timer on|off          Turn SQL timer on or off\n.trace FILE|off        Output each SQL statement as it is run\n.vfsinfo ?AUX?         Information about the top-level VFS\n.vfslist               List all available VFSes\n.vfsname ?AUX?         Print the name of the VFS stack\n.width NUM1 NUM2 ...   Set column widths for \"column\" mode\n                         Negative values right-justify\n\n```\n\n## 2、程序\n\nSQLite 语句\n\n所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。\n\n2.1 SQLite ANALYZE 语句：\n\n``` sql\nANALYZE;\nor\nANALYZE database_name;\nor\nANALYZE database_name.table_name;\n```\n\n2.2 SQLite AND/OR 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION-1 {AND|OR} CONDITION-2;\n```\n\n2.3 SQLite ALTER TABLE 语句：\n\n``` sql\nALTER TABLE table_name ADD COLUMN column_def...;\n```\n\n2.4 SQLite ALTER TABLE 语句（Rename）：\n\n``` sql\nALTER TABLE table_name RENAME TO new_table_name;\n```\n\n2.5 SQLite ATTACH DATABASE 语句：\n\n``` sql\nATTACH DATABASE 'DatabaseName' As 'Alias-Name';\n```\n\n2.6 SQLite BEGIN TRANSACTION 语句：\n\n``` sql\nBEGIN;\nor\nBEGIN EXCLUSIVE TRANSACTION;\n```\n\n2.7 SQLite BETWEEN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name BETWEEN val-1 AND val-2;\n```\n\n2.8 SQLite COMMIT 语句：\n\n``` sql\nCOMMIT;\n```\n\n2.9 SQLite CREATE INDEX 语句：\n\n``` sql\nCREATE INDEX index_name\nON table_name ( column_name COLLATE NOCASE );\n```\n\n2.10 SQLite CREATE UNIQUE INDEX 语句：\n\n``` sql\nCREATE UNIQUE INDEX index_name\nON table_name ( column1, column2,...columnN);\n```\n\n2.11 SQLite CREATE TABLE 语句：\n\n``` sql\nCREATE TABLE table_name(\n   column1 datatype,\n   column2 datatype,\n   column3 datatype,\n   .....\n   columnN datatype,\n   PRIMARY KEY( one or more columns )\n);\n```\n\n2.12 SQLite CREATE TRIGGER 语句：\n\n``` sql\nCREATE TRIGGER database_name.trigger_name\nBEFORE INSERT ON table_name FOR EACH ROW\nBEGIN\n   stmt1;\n   stmt2;\n   ....\nEND;\n```\n\n2.13 SQLite CREATE VIEW 语句：\n\n``` sql\nCREATE VIEW database_name.view_name  AS\nSELECT statement....;\n```\n\n2.14 SQLite CREATE VIRTUAL TABLE 语句：\n\n``` sql\nCREATE VIRTUAL TABLE database_name.table_name USING weblog( access.log );\nor\nCREATE VIRTUAL TABLE database_name.table_name USING fts3( );\n```\n\n2.15 SQLite COMMIT TRANSACTION 语句：\n\n``` sql\nCOMMIT;\n```\n\n2.16 SQLite COUNT 子句：\n\n``` sql\nSELECT COUNT(column_name)\nFROM   table_name\nWHERE  CONDITION;\n```\n\n2.17 SQLite DELETE 语句：\n\n``` sql\nDELETE FROM table_name\nWHERE  {CONDITION};\n```\n\n2.18 SQLite DETACH DATABASE 语句：\n\n``` sql\nDETACH DATABASE 'Alias-Name';\n```\n\n2.19 SQLite DISTINCT 子句：\n\n``` sql\nSELECT DISTINCT column1, column2....columnN\nFROM   table_name;\n```\n\n2.20 SQLite DROP INDEX 语句：\n\n``` sql\nDROP INDEX database_name.index_name;\n```\n\n2.21 SQLite DROP TABLE 语句：\n\n``` sql\nDROP TABLE database_name.table_name;\n```\n\n2.22 SQLite DROP VIEW 语句：\n\n``` sql\nDROP VIEW view_name;\n```\n\n2.23 SQLite DROP TRIGGER 语句：\n\n``` sql\nDROP TRIGGER trigger_name\n```\n\n2.24 SQLite EXISTS 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name EXISTS (SELECT * FROM   table_name );\n```\n\n2.25 SQLite EXPLAIN 语句：\n\n``` sql\nEXPLAIN INSERT statement...;\nor\nEXPLAIN QUERY PLAN SELECT statement...;\n```\n\n2.26 SQLite GLOB 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name GLOB { PATTERN };\n```\n\n2.27 SQLite GROUP BY 子句：\n\n``` sql\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name;\n```\n\n2.28 SQLite HAVING 子句：\n\n``` sql\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name\nHAVING (arithematic function condition);\n```\n\n2.29 SQLite INSERT INTO 语句：\n\n``` sql\nINSERT INTO table_name( column1, column2....columnN)\nVALUES ( value1, value2....valueN);\n```\n\n2.30 SQLite IN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name IN (val-1, val-2,...val-N);\n```\n\n2.31 SQLite Like 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name LIKE { PATTERN };\n```\n\n2.32 SQLite NOT IN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name NOT IN (val-1, val-2,...val-N);\n```\n\n2.33 SQLite ORDER BY 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION\nORDER BY column_name {ASC|DESC};\n```\n\n2.34 SQLite PRAGMA 语句：\n\n``` sql\nPRAGMA pragma_name;\n\nFor example:\nPRAGMA page_size;\nPRAGMA cache_size = 1024;\nPRAGMA table_info(table_name);\n```\n\n2.35 SQLite RELEASE SAVEPOINT 语句：\n\n``` sql\nRELEASE savepoint_name;\n```\n\n2.36 SQLite REINDEX 语句：\n\n``` sql\nREINDEX collation_name;\nREINDEX database_name.index_name;\nREINDEX database_name.table_name;\n```\n\n2.37 SQLite ROLLBACK 语句：\n\n``` sql\nROLLBACK;\nor\nROLLBACK TO SAVEPOINT savepoint_name;\n```\n\n2.38 SQLite SAVEPOINT 语句：\n\n``` sql\nSAVEPOINT savepoint_name;\n```\n\n2.39 SQLite SELECT 语句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name;\n```\n\n2.40 SQLite UPDATE 语句：\n\n``` sql\nUPDATE table_name\nSET column1 = value1, column2 = value2....columnN=valueN\n[ WHERE  CONDITION ];\n```\n\n2.41 SQLite VACUUM 语句：\n\n``` sql\nVACUUM;\n```\n\n2.42 SQLite WHERE 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION;\n```\n\n## 3、常见专有名词\n\n事务\n游标\n触发器\n存储过程\n回滚\n约束\n索引\n视图\n\n## 4、常用操作\n\n数据同步\n导入、导出\nCRUD (Create/Retrieve/Update/Delete)\n\n## 5、建表原则\n\n数据范式\n\n## 6、事务特性\n\nACID\n\n## 7、数据库\n\n常见数据库：SQLite、MySQL、SQLServer、Oracle、MOngoDB\n\n7.1 分类：\n    关系型：Oracle和MySQL\n    非关系型：NoSQL(NoSQL = Not Only SQL )\n（1）键值存储数据库（key-value）\n\n键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。\n\n键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。\n\n典型产品：Memcached、Redis、MemcacheDB\n\n（2）列存储（Column-oriented）数据库\n\n列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。\n\n这种数据库通常用来应对分布式存储海量数据。\n\n典型产品：Cassandra、HBase\n\n（3）面向文档（Document-Oriented）数据库\n\n文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。\n\n面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。\n\n典型产品：MongoDB、CouchDB\n\n（4）图形数据库\n\n图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。\n\n典型产品：Neo4J、InforGrid\n\n7.2 数据库引擎：数据库引擎是用于存储、处理和保护数据的核心服务。\nMYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。\n\n你能用的数据库引擎取决于mysql在安装的时候是如何被编译的。要添加一个新的引擎，就必须重新编译MYSQL。在缺省情况下，MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。\n\n* ISAM\n  \n>ISAM是一个定义明确且历经时间考验的数据表格管理方法，它在设计之时就考虑到数据库被查询的次数要远大于更新的次数。因此，ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错：如果你的硬盘崩溃了，那么数据文件就无法恢复了。如果你正在把ISAM用在关键任务应用程序里，那就必须经常备份你所有的实时数据，通过其复制特性，MYSQL能够支持这样的备份应用程序。\n\n* MYISAM\n  \n>MYISAM是MYSQL的ISAM扩展格式和缺省的数据库引擎。除了提供ISAM里所没有的索引和字段管理的大量功能，MYISAM还使用一种表格锁定的机制，来优化多个并发的读写操作。其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。MYISAM还有一些有用的扩展，例如用来修复数据库文件的MYISAMCHK工具和用来恢复浪费空间的MYISAMPACK工具。\nMYISAM强调了快速读取操作，这可能就是为什么MYSQL受到了WEB开发如此青睐的主要原因：在WEB开发中你所进行的大量数据操作都是读取操作。所以，大多数虚拟主机提供商和INTERNET平台提供商只允许使用MYISAM格式。\n\n* HEAP\n\n>HEAP允许只驻留在内存里的临时表格。驻留在内存里让HEAP要比ISAM和MYISAM都快，但是它所管理的数据是不稳定的，而且如果在关机之前没有进行保存，那么所有的数据都会丢失。在数据行被删除的时候，HEAP也不会浪费大量的空间。HEAP表格在你需要使用SELECT表达式来选择和操控数据的时候非常有用。要记住，在用完表格之后就删除表格。\n\n* INNODB和BERKLEYDB\n\n>INNODB和BERKLEYDB（BDB）数据库引擎都是造就MYSQL灵活性的技术的直接产品，这项技术就是MYSQL++ API。在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MYISAM数据库引擎不支持事务处理也不支持外来键。尽管要比ISAM和MYISAM引擎慢很多，但是INNODB和BDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。如前所述，如果你的设计需要这些特性中的一者或者两者，那你就要被迫使用后两个引擎中的一个了。\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之数据库及其管理.md","raw":"# SQLite  \n\n## 1、终端命令\n\n```sql\n.auth ON|OFF           Show authorizer callbacks\n.backup ?DB? FILE      Backup DB (default \"main\") to FILE\n                         Add \"--append\" to open using appendvfs.\n.bail on|off           Stop after hitting an error.  Default OFF\n.binary on|off         Turn binary output on or off.  Default OFF\n.cd DIRECTORY          Change the working directory to DIRECTORY\n.changes on|off        Show number of rows changed by SQL\n.check GLOB            Fail if output since .testcase does not match\n.clone NEWDB           Clone data into NEWDB from the existing database\n.databases             List names and files of attached databases\n.dbconfig ?op? ?val?   List or change sqlite3_db_config() options\n.dbinfo ?DB?           Show status information about the database\n.dump ?TABLE? ...      Dump the database in an SQL text format\n                         If TABLE specified, only dump tables matching\n                         LIKE pattern TABLE.\n.echo on|off           Turn command echo on or off\n.eqp on|off|full       Enable or disable automatic EXPLAIN QUERY PLAN\n.excel                 Display the output of next command in a spreadsheet\n.exit                  Exit this program\n.expert                EXPERIMENTAL. Suggest indexes for specified queries\n.fullschema ?--indent? Show schema and the content of sqlite_stat tables\n.headers on|off        Turn display of headers on or off\n.help                  Show this message\n.import FILE TABLE     Import data from FILE into TABLE\n.imposter INDEX TABLE  Create imposter table TABLE on index INDEX\n.indexes ?TABLE?       Show names of all indexes\n                         If TABLE specified, only show indexes for tables\n                         matching LIKE pattern TABLE.\n.limit ?LIMIT? ?VAL?   Display or change the value of an SQLITE_LIMIT\n.lint OPTIONS          Report potential schema issues. Options:\n                         fkey-indexes     Find missing foreign key indexes\n.log FILE|off          Turn logging on or off.  FILE can be stderr/stdout\n.mode MODE ?TABLE?     Set output mode where MODE is one of:\n                         ascii    Columns/rows delimited by 0x1F and 0x1E\n                         csv      Comma-separated values\n                         column   Left-aligned columns.  (See .width)\n                         html     HTML <table> code\n                         insert   SQL insert statements for TABLE\n                         line     One value per line\n                         list     Values delimited by \"|\"\n                         quote    Escape answers as for SQL\n                         tabs     Tab-separated values\n                         tcl      TCL list elements\n.nullvalue STRING      Use STRING in place of NULL values\n.once (-e|-x|FILE)     Output for the next SQL command only to FILE\n                         or invoke system text editor (-e) or spreadsheet (-x)\n                         on the output.\n.open ?OPTIONS? ?FILE? Close existing database and reopen FILE\n                         The --new option starts with an empty file\n                         Other options: --readonly --append --zip\n.output ?FILE?         Send output to FILE or stdout\n.print STRING...       Print literal STRING\n.prompt MAIN CONTINUE  Replace the standard prompts\n.quit                  Exit this program\n.read FILENAME         Execute SQL in FILENAME\n.restore ?DB? FILE     Restore content of DB (default \"main\") from FILE\n.save FILE             Write in-memory database into FILE\n.scanstats on|off      Turn sqlite3_stmt_scanstatus() metrics on or off\n.schema ?PATTERN?      Show the CREATE statements matching PATTERN\n                          Add --indent for pretty-printing\n.selftest ?--init?     Run tests defined in the SELFTEST table\n.separator COL ?ROW?   Change the column separator and optionally the row\n                         separator for both the output mode and .import\n.session CMD ...       Create or control sessions\n.sha3sum ?OPTIONS...?  Compute a SHA3 hash of database content\n.shell CMD ARGS...     Run CMD ARGS... in a system shell\n.show                  Show the current values for various settings\n.stats ?on|off?        Show stats or turn stats on or off\n.system CMD ARGS...    Run CMD ARGS... in a system shell\n.tables ?TABLE?        List names of tables\n                         If TABLE specified, only list tables matching\n                         LIKE pattern TABLE.\n.testcase NAME         Begin redirecting output to 'testcase-out.txt'\n.timeout MS            Try opening locked tables for MS milliseconds\n.timer on|off          Turn SQL timer on or off\n.trace FILE|off        Output each SQL statement as it is run\n.vfsinfo ?AUX?         Information about the top-level VFS\n.vfslist               List all available VFSes\n.vfsname ?AUX?         Print the name of the VFS stack\n.width NUM1 NUM2 ...   Set column widths for \"column\" mode\n                         Negative values right-justify\n\n```\n\n## 2、程序\n\nSQLite 语句\n\n所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。\n\n2.1 SQLite ANALYZE 语句：\n\n``` sql\nANALYZE;\nor\nANALYZE database_name;\nor\nANALYZE database_name.table_name;\n```\n\n2.2 SQLite AND/OR 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION-1 {AND|OR} CONDITION-2;\n```\n\n2.3 SQLite ALTER TABLE 语句：\n\n``` sql\nALTER TABLE table_name ADD COLUMN column_def...;\n```\n\n2.4 SQLite ALTER TABLE 语句（Rename）：\n\n``` sql\nALTER TABLE table_name RENAME TO new_table_name;\n```\n\n2.5 SQLite ATTACH DATABASE 语句：\n\n``` sql\nATTACH DATABASE 'DatabaseName' As 'Alias-Name';\n```\n\n2.6 SQLite BEGIN TRANSACTION 语句：\n\n``` sql\nBEGIN;\nor\nBEGIN EXCLUSIVE TRANSACTION;\n```\n\n2.7 SQLite BETWEEN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name BETWEEN val-1 AND val-2;\n```\n\n2.8 SQLite COMMIT 语句：\n\n``` sql\nCOMMIT;\n```\n\n2.9 SQLite CREATE INDEX 语句：\n\n``` sql\nCREATE INDEX index_name\nON table_name ( column_name COLLATE NOCASE );\n```\n\n2.10 SQLite CREATE UNIQUE INDEX 语句：\n\n``` sql\nCREATE UNIQUE INDEX index_name\nON table_name ( column1, column2,...columnN);\n```\n\n2.11 SQLite CREATE TABLE 语句：\n\n``` sql\nCREATE TABLE table_name(\n   column1 datatype,\n   column2 datatype,\n   column3 datatype,\n   .....\n   columnN datatype,\n   PRIMARY KEY( one or more columns )\n);\n```\n\n2.12 SQLite CREATE TRIGGER 语句：\n\n``` sql\nCREATE TRIGGER database_name.trigger_name\nBEFORE INSERT ON table_name FOR EACH ROW\nBEGIN\n   stmt1;\n   stmt2;\n   ....\nEND;\n```\n\n2.13 SQLite CREATE VIEW 语句：\n\n``` sql\nCREATE VIEW database_name.view_name  AS\nSELECT statement....;\n```\n\n2.14 SQLite CREATE VIRTUAL TABLE 语句：\n\n``` sql\nCREATE VIRTUAL TABLE database_name.table_name USING weblog( access.log );\nor\nCREATE VIRTUAL TABLE database_name.table_name USING fts3( );\n```\n\n2.15 SQLite COMMIT TRANSACTION 语句：\n\n``` sql\nCOMMIT;\n```\n\n2.16 SQLite COUNT 子句：\n\n``` sql\nSELECT COUNT(column_name)\nFROM   table_name\nWHERE  CONDITION;\n```\n\n2.17 SQLite DELETE 语句：\n\n``` sql\nDELETE FROM table_name\nWHERE  {CONDITION};\n```\n\n2.18 SQLite DETACH DATABASE 语句：\n\n``` sql\nDETACH DATABASE 'Alias-Name';\n```\n\n2.19 SQLite DISTINCT 子句：\n\n``` sql\nSELECT DISTINCT column1, column2....columnN\nFROM   table_name;\n```\n\n2.20 SQLite DROP INDEX 语句：\n\n``` sql\nDROP INDEX database_name.index_name;\n```\n\n2.21 SQLite DROP TABLE 语句：\n\n``` sql\nDROP TABLE database_name.table_name;\n```\n\n2.22 SQLite DROP VIEW 语句：\n\n``` sql\nDROP VIEW view_name;\n```\n\n2.23 SQLite DROP TRIGGER 语句：\n\n``` sql\nDROP TRIGGER trigger_name\n```\n\n2.24 SQLite EXISTS 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name EXISTS (SELECT * FROM   table_name );\n```\n\n2.25 SQLite EXPLAIN 语句：\n\n``` sql\nEXPLAIN INSERT statement...;\nor\nEXPLAIN QUERY PLAN SELECT statement...;\n```\n\n2.26 SQLite GLOB 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name GLOB { PATTERN };\n```\n\n2.27 SQLite GROUP BY 子句：\n\n``` sql\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name;\n```\n\n2.28 SQLite HAVING 子句：\n\n``` sql\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name\nHAVING (arithematic function condition);\n```\n\n2.29 SQLite INSERT INTO 语句：\n\n``` sql\nINSERT INTO table_name( column1, column2....columnN)\nVALUES ( value1, value2....valueN);\n```\n\n2.30 SQLite IN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name IN (val-1, val-2,...val-N);\n```\n\n2.31 SQLite Like 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name LIKE { PATTERN };\n```\n\n2.32 SQLite NOT IN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name NOT IN (val-1, val-2,...val-N);\n```\n\n2.33 SQLite ORDER BY 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION\nORDER BY column_name {ASC|DESC};\n```\n\n2.34 SQLite PRAGMA 语句：\n\n``` sql\nPRAGMA pragma_name;\n\nFor example:\nPRAGMA page_size;\nPRAGMA cache_size = 1024;\nPRAGMA table_info(table_name);\n```\n\n2.35 SQLite RELEASE SAVEPOINT 语句：\n\n``` sql\nRELEASE savepoint_name;\n```\n\n2.36 SQLite REINDEX 语句：\n\n``` sql\nREINDEX collation_name;\nREINDEX database_name.index_name;\nREINDEX database_name.table_name;\n```\n\n2.37 SQLite ROLLBACK 语句：\n\n``` sql\nROLLBACK;\nor\nROLLBACK TO SAVEPOINT savepoint_name;\n```\n\n2.38 SQLite SAVEPOINT 语句：\n\n``` sql\nSAVEPOINT savepoint_name;\n```\n\n2.39 SQLite SELECT 语句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name;\n```\n\n2.40 SQLite UPDATE 语句：\n\n``` sql\nUPDATE table_name\nSET column1 = value1, column2 = value2....columnN=valueN\n[ WHERE  CONDITION ];\n```\n\n2.41 SQLite VACUUM 语句：\n\n``` sql\nVACUUM;\n```\n\n2.42 SQLite WHERE 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION;\n```\n\n## 3、常见专有名词\n\n事务\n游标\n触发器\n存储过程\n回滚\n约束\n索引\n视图\n\n## 4、常用操作\n\n数据同步\n导入、导出\nCRUD (Create/Retrieve/Update/Delete)\n\n## 5、建表原则\n\n数据范式\n\n## 6、事务特性\n\nACID\n\n## 7、数据库\n\n常见数据库：SQLite、MySQL、SQLServer、Oracle、MOngoDB\n\n7.1 分类：\n    关系型：Oracle和MySQL\n    非关系型：NoSQL(NoSQL = Not Only SQL )\n（1）键值存储数据库（key-value）\n\n键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。\n\n键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。\n\n典型产品：Memcached、Redis、MemcacheDB\n\n（2）列存储（Column-oriented）数据库\n\n列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。\n\n这种数据库通常用来应对分布式存储海量数据。\n\n典型产品：Cassandra、HBase\n\n（3）面向文档（Document-Oriented）数据库\n\n文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。\n\n面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。\n\n典型产品：MongoDB、CouchDB\n\n（4）图形数据库\n\n图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。\n\n典型产品：Neo4J、InforGrid\n\n7.2 数据库引擎：数据库引擎是用于存储、处理和保护数据的核心服务。\nMYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。\n\n你能用的数据库引擎取决于mysql在安装的时候是如何被编译的。要添加一个新的引擎，就必须重新编译MYSQL。在缺省情况下，MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。\n\n* ISAM\n  \n>ISAM是一个定义明确且历经时间考验的数据表格管理方法，它在设计之时就考虑到数据库被查询的次数要远大于更新的次数。因此，ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错：如果你的硬盘崩溃了，那么数据文件就无法恢复了。如果你正在把ISAM用在关键任务应用程序里，那就必须经常备份你所有的实时数据，通过其复制特性，MYSQL能够支持这样的备份应用程序。\n\n* MYISAM\n  \n>MYISAM是MYSQL的ISAM扩展格式和缺省的数据库引擎。除了提供ISAM里所没有的索引和字段管理的大量功能，MYISAM还使用一种表格锁定的机制，来优化多个并发的读写操作。其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。MYISAM还有一些有用的扩展，例如用来修复数据库文件的MYISAMCHK工具和用来恢复浪费空间的MYISAMPACK工具。\nMYISAM强调了快速读取操作，这可能就是为什么MYSQL受到了WEB开发如此青睐的主要原因：在WEB开发中你所进行的大量数据操作都是读取操作。所以，大多数虚拟主机提供商和INTERNET平台提供商只允许使用MYISAM格式。\n\n* HEAP\n\n>HEAP允许只驻留在内存里的临时表格。驻留在内存里让HEAP要比ISAM和MYISAM都快，但是它所管理的数据是不稳定的，而且如果在关机之前没有进行保存，那么所有的数据都会丢失。在数据行被删除的时候，HEAP也不会浪费大量的空间。HEAP表格在你需要使用SELECT表达式来选择和操控数据的时候非常有用。要记住，在用完表格之后就删除表格。\n\n* INNODB和BERKLEYDB\n\n>INNODB和BERKLEYDB（BDB）数据库引擎都是造就MYSQL灵活性的技术的直接产品，这项技术就是MYSQL++ API。在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MYISAM数据库引擎不支持事务处理也不支持外来键。尽管要比ISAM和MYISAM引擎慢很多，但是INNODB和BDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。如前所述，如果你的设计需要这些特性中的一者或者两者，那你就要被迫使用后两个引擎中的一个了。\n","slug":"iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之数据库及其管理","published":1,"date":"2019-03-24T12:56:08.000Z","updated":"2019-03-24T12:56:08.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjf001r8n7u0y11fgqf","content":"<h1 id=\"SQLite\"><a href=\"#SQLite\" class=\"headerlink\" title=\"SQLite\"></a>SQLite</h1><h2 id=\"1、终端命令\"><a href=\"#1、终端命令\" class=\"headerlink\" title=\"1、终端命令\"></a>1、终端命令</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.auth <span class=\"keyword\">ON</span><span class=\"operator\">|</span>OFF           <span class=\"keyword\">Show</span> authorizer callbacks</span><br><span class=\"line\">.backup ?DB? FILE      Backup DB (<span class=\"keyword\">default</span> &quot;main&quot;) <span class=\"keyword\">to</span> FILE</span><br><span class=\"line\">                         <span class=\"keyword\">Add</span> &quot;--append&quot; <span class=\"keyword\">to</span> <span class=\"keyword\">open</span> <span class=\"keyword\">using</span> appendvfs.</span><br><span class=\"line\">.bail <span class=\"keyword\">on</span><span class=\"operator\">|</span>off           Stop after hitting an error.  <span class=\"keyword\">Default</span> OFF</span><br><span class=\"line\">.<span class=\"type\">binary</span> <span class=\"keyword\">on</span><span class=\"operator\">|</span>off         Turn <span class=\"type\">binary</span> output <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off.  <span class=\"keyword\">Default</span> OFF</span><br><span class=\"line\">.cd DIRECTORY          Change the working directory <span class=\"keyword\">to</span> DIRECTORY</span><br><span class=\"line\">.changes <span class=\"keyword\">on</span><span class=\"operator\">|</span>off        <span class=\"keyword\">Show</span> number <span class=\"keyword\">of</span> <span class=\"keyword\">rows</span> changed <span class=\"keyword\">by</span> <span class=\"keyword\">SQL</span></span><br><span class=\"line\">.<span class=\"keyword\">check</span> GLOB            Fail if output since .testcase does <span class=\"keyword\">not</span> <span class=\"keyword\">match</span></span><br><span class=\"line\">.clone NEWDB           Clone data <span class=\"keyword\">into</span> NEWDB <span class=\"keyword\">from</span> the existing database</span><br><span class=\"line\">.databases             List names <span class=\"keyword\">and</span> files <span class=\"keyword\">of</span> attached databases</span><br><span class=\"line\">.dbconfig ?op? ?val?   List <span class=\"keyword\">or</span> change sqlite3_db_config() options</span><br><span class=\"line\">.dbinfo ?DB?           <span class=\"keyword\">Show</span> status information about the database</span><br><span class=\"line\">.dump ?<span class=\"keyword\">TABLE</span>? ...      Dump the database <span class=\"keyword\">in</span> an <span class=\"keyword\">SQL</span> text format</span><br><span class=\"line\">                         If <span class=\"keyword\">TABLE</span> specified, <span class=\"keyword\">only</span> dump tables matching</span><br><span class=\"line\">                         <span class=\"keyword\">LIKE</span> <span class=\"keyword\">pattern</span> TABLE.</span><br><span class=\"line\">.echo <span class=\"keyword\">on</span><span class=\"operator\">|</span>off           Turn command echo <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.eqp <span class=\"keyword\">on</span><span class=\"operator\">|</span>off<span class=\"operator\">|</span><span class=\"keyword\">full</span>       Enable <span class=\"keyword\">or</span> disable automatic EXPLAIN QUERY PLAN</span><br><span class=\"line\">.excel                 Display the output <span class=\"keyword\">of</span> next command <span class=\"keyword\">in</span> a spreadsheet</span><br><span class=\"line\">.exit                  Exit this program</span><br><span class=\"line\">.expert                EXPERIMENTAL. Suggest indexes <span class=\"keyword\">for</span> specified queries</span><br><span class=\"line\">.fullschema ?<span class=\"comment\">--indent? Show schema and the content of sqlite_stat tables</span></span><br><span class=\"line\">.headers <span class=\"keyword\">on</span><span class=\"operator\">|</span>off        Turn display <span class=\"keyword\">of</span> headers <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.help                  <span class=\"keyword\">Show</span> this message</span><br><span class=\"line\">.import FILE <span class=\"keyword\">TABLE</span>     Import data <span class=\"keyword\">from</span> FILE <span class=\"keyword\">into</span> <span class=\"keyword\">TABLE</span></span><br><span class=\"line\">.imposter INDEX <span class=\"keyword\">TABLE</span>  <span class=\"keyword\">Create</span> imposter <span class=\"keyword\">table</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">on</span> index INDEX</span><br><span class=\"line\">.indexes ?<span class=\"keyword\">TABLE</span>?       <span class=\"keyword\">Show</span> names <span class=\"keyword\">of</span> <span class=\"keyword\">all</span> indexes</span><br><span class=\"line\">                         If <span class=\"keyword\">TABLE</span> specified, <span class=\"keyword\">only</span> <span class=\"keyword\">show</span> indexes <span class=\"keyword\">for</span> tables</span><br><span class=\"line\">                         matching <span class=\"keyword\">LIKE</span> <span class=\"keyword\">pattern</span> TABLE.</span><br><span class=\"line\">.limit ?LIMIT? ?VAL?   Display <span class=\"keyword\">or</span> change the <span class=\"keyword\">value</span> <span class=\"keyword\">of</span> an SQLITE_LIMIT</span><br><span class=\"line\">.lint OPTIONS          Report potential schema issues. Options:</span><br><span class=\"line\">                         fkey<span class=\"operator\">-</span>indexes     Find missing <span class=\"keyword\">foreign</span> key indexes</span><br><span class=\"line\">.log FILE<span class=\"operator\">|</span>off          Turn logging <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off.  FILE can be stderr<span class=\"operator\">/</span>stdout</span><br><span class=\"line\">.mode MODE ?<span class=\"keyword\">TABLE</span>?     <span class=\"keyword\">Set</span> output mode <span class=\"keyword\">where</span> MODE <span class=\"keyword\">is</span> <span class=\"keyword\">one</span> <span class=\"keyword\">of</span>:</span><br><span class=\"line\">                         ascii    Columns<span class=\"operator\">/</span><span class=\"keyword\">rows</span> delimited <span class=\"keyword\">by</span> <span class=\"number\">0x1F</span> <span class=\"keyword\">and</span> <span class=\"number\">0x1E</span></span><br><span class=\"line\">                         csv      Comma<span class=\"operator\">-</span>separated <span class=\"keyword\">values</span></span><br><span class=\"line\">                         <span class=\"keyword\">column</span>   <span class=\"keyword\">Left</span><span class=\"operator\">-</span>aligned columns.  (See .width)</span><br><span class=\"line\">                         html     HTML <span class=\"operator\">&lt;</span><span class=\"keyword\">table</span><span class=\"operator\">&gt;</span> code</span><br><span class=\"line\">                         <span class=\"keyword\">insert</span>   <span class=\"keyword\">SQL</span> <span class=\"keyword\">insert</span> statements <span class=\"keyword\">for</span> <span class=\"keyword\">TABLE</span></span><br><span class=\"line\">                         line     <span class=\"keyword\">One</span> <span class=\"keyword\">value</span> <span class=\"keyword\">per</span> line</span><br><span class=\"line\">                         list     <span class=\"keyword\">Values</span> delimited <span class=\"keyword\">by</span> &quot;|&quot;</span><br><span class=\"line\">                         quote    <span class=\"keyword\">Escape</span> answers <span class=\"keyword\">as</span> <span class=\"keyword\">for</span> <span class=\"keyword\">SQL</span></span><br><span class=\"line\">                         tabs     Tab<span class=\"operator\">-</span>separated <span class=\"keyword\">values</span></span><br><span class=\"line\">                         tcl      TCL list elements</span><br><span class=\"line\">.nullvalue STRING      Use STRING <span class=\"keyword\">in</span> place <span class=\"keyword\">of</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">values</span></span><br><span class=\"line\">.once (<span class=\"operator\">-</span>e<span class=\"operator\">|</span><span class=\"operator\">-</span>x<span class=\"operator\">|</span>FILE)     Output <span class=\"keyword\">for</span> the next <span class=\"keyword\">SQL</span> command <span class=\"keyword\">only</span> <span class=\"keyword\">to</span> FILE</span><br><span class=\"line\">                         <span class=\"keyword\">or</span> invoke <span class=\"keyword\">system</span> text editor (<span class=\"operator\">-</span>e) <span class=\"keyword\">or</span> spreadsheet (<span class=\"operator\">-</span>x)</span><br><span class=\"line\">                         <span class=\"keyword\">on</span> the output.</span><br><span class=\"line\">.<span class=\"keyword\">open</span> ?OPTIONS? ?FILE? <span class=\"keyword\">Close</span> existing database <span class=\"keyword\">and</span> reopen FILE</span><br><span class=\"line\">                         The <span class=\"comment\">--new option starts with an empty file</span></span><br><span class=\"line\">                         Other options: <span class=\"comment\">--readonly --append --zip</span></span><br><span class=\"line\">.output ?FILE?         Send output <span class=\"keyword\">to</span> FILE <span class=\"keyword\">or</span> stdout</span><br><span class=\"line\">.print STRING...       Print literal STRING</span><br><span class=\"line\">.prompt MAIN CONTINUE  Replace the standard prompts</span><br><span class=\"line\">.quit                  Exit this program</span><br><span class=\"line\">.read FILENAME         <span class=\"keyword\">Execute</span> <span class=\"keyword\">SQL</span> <span class=\"keyword\">in</span> FILENAME</span><br><span class=\"line\">.restore ?DB? FILE     Restore content <span class=\"keyword\">of</span> DB (<span class=\"keyword\">default</span> &quot;main&quot;) <span class=\"keyword\">from</span> FILE</span><br><span class=\"line\">.save FILE             Write <span class=\"keyword\">in</span><span class=\"operator\">-</span>memory database <span class=\"keyword\">into</span> FILE</span><br><span class=\"line\">.scanstats <span class=\"keyword\">on</span><span class=\"operator\">|</span>off      Turn sqlite3_stmt_scanstatus() metrics <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.schema ?<span class=\"keyword\">PATTERN</span>?      <span class=\"keyword\">Show</span> the <span class=\"keyword\">CREATE</span> statements matching <span class=\"keyword\">PATTERN</span></span><br><span class=\"line\">                          <span class=\"keyword\">Add</span> <span class=\"comment\">--indent for pretty-printing</span></span><br><span class=\"line\">.selftest ?<span class=\"comment\">--init?     Run tests defined in the SELFTEST table</span></span><br><span class=\"line\">.separator COL ?<span class=\"type\">ROW</span>?   Change the <span class=\"keyword\">column</span> separator <span class=\"keyword\">and</span> optionally the <span class=\"type\">row</span></span><br><span class=\"line\">                         separator <span class=\"keyword\">for</span> <span class=\"keyword\">both</span> the output mode <span class=\"keyword\">and</span> .import</span><br><span class=\"line\">.session CMD ...       <span class=\"keyword\">Create</span> <span class=\"keyword\">or</span> control sessions</span><br><span class=\"line\">.sha3sum ?OPTIONS...?  Compute a SHA3 hash <span class=\"keyword\">of</span> database content</span><br><span class=\"line\">.shell CMD ARGS...     Run CMD ARGS... <span class=\"keyword\">in</span> a <span class=\"keyword\">system</span> shell</span><br><span class=\"line\">.<span class=\"keyword\">show</span>                  <span class=\"keyword\">Show</span> the <span class=\"keyword\">current</span> <span class=\"keyword\">values</span> <span class=\"keyword\">for</span> various settings</span><br><span class=\"line\">.stats ?<span class=\"keyword\">on</span><span class=\"operator\">|</span>off?        <span class=\"keyword\">Show</span> stats <span class=\"keyword\">or</span> turn stats <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.<span class=\"keyword\">system</span> CMD ARGS...    Run CMD ARGS... <span class=\"keyword\">in</span> a <span class=\"keyword\">system</span> shell</span><br><span class=\"line\">.tables ?<span class=\"keyword\">TABLE</span>?        List names <span class=\"keyword\">of</span> tables</span><br><span class=\"line\">                         If <span class=\"keyword\">TABLE</span> specified, <span class=\"keyword\">only</span> list tables matching</span><br><span class=\"line\">                         <span class=\"keyword\">LIKE</span> <span class=\"keyword\">pattern</span> TABLE.</span><br><span class=\"line\">.testcase NAME         <span class=\"keyword\">Begin</span> redirecting output <span class=\"keyword\">to</span> <span class=\"string\">&#x27;testcase-out.txt&#x27;</span></span><br><span class=\"line\">.timeout MS            Try opening locked tables <span class=\"keyword\">for</span> MS milliseconds</span><br><span class=\"line\">.timer <span class=\"keyword\">on</span><span class=\"operator\">|</span>off          Turn <span class=\"keyword\">SQL</span> timer <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.trace FILE<span class=\"operator\">|</span>off        Output <span class=\"keyword\">each</span> <span class=\"keyword\">SQL</span> statement <span class=\"keyword\">as</span> it <span class=\"keyword\">is</span> run</span><br><span class=\"line\">.vfsinfo ?AUX?         Information about the top<span class=\"operator\">-</span>level VFS</span><br><span class=\"line\">.vfslist               List <span class=\"keyword\">all</span> available VFSes</span><br><span class=\"line\">.vfsname ?AUX?         Print the name <span class=\"keyword\">of</span> the VFS stack</span><br><span class=\"line\">.width NUM1 NUM2 ...   <span class=\"keyword\">Set</span> <span class=\"keyword\">column</span> widths <span class=\"keyword\">for</span> &quot;column&quot; mode</span><br><span class=\"line\">                         Negative <span class=\"keyword\">values</span> <span class=\"keyword\">right</span><span class=\"operator\">-</span>justify</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、程序\"><a href=\"#2、程序\" class=\"headerlink\" title=\"2、程序\"></a>2、程序</h2><p>SQLite 语句</p>\n<p>所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。</p>\n<p>2.1 SQLite ANALYZE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANALYZE;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">ANALYZE database_name;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">ANALYZE database_name.table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.2 SQLite AND/OR 子句：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\">WHERE  CONDITION-1 &#123;AND|OR&#125; CONDITION-2;</span><br></pre></td></tr></table></figure>\n\n<p>2.3 SQLite ALTER TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> column_def...;</span><br></pre></td></tr></table></figure>\n\n<p>2.4 SQLite ALTER TABLE 语句（Rename）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name RENAME <span class=\"keyword\">TO</span> new_table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.5 SQLite ATTACH DATABASE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ATTACH DATABASE <span class=\"string\">&#x27;DatabaseName&#x27;</span> <span class=\"keyword\">As</span> <span class=\"string\">&#x27;Alias-Name&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.6 SQLite BEGIN TRANSACTION 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> EXCLUSIVE TRANSACTION;</span><br></pre></td></tr></table></figure>\n\n<p>2.7 SQLite BETWEEN 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">BETWEEN</span> val<span class=\"number\">-1</span> <span class=\"keyword\">AND</span> val<span class=\"number\">-2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.8 SQLite COMMIT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.9 SQLite CREATE INDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX index_name</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name ( column_name <span class=\"keyword\">COLLATE</span> NOCASE );</span><br></pre></td></tr></table></figure>\n\n<p>2.10 SQLite CREATE UNIQUE INDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX index_name</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name ( column1, column2,...columnN);</span><br></pre></td></tr></table></figure>\n\n<p>2.11 SQLite CREATE TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> table_name(</span><br><span class=\"line\">   column1 datatype,</span><br><span class=\"line\">   column2 datatype,</span><br><span class=\"line\">   column3 datatype,</span><br><span class=\"line\">   .....</span><br><span class=\"line\">   columnN datatype,</span><br><span class=\"line\">   <span class=\"keyword\">PRIMARY</span> KEY( <span class=\"keyword\">one</span> <span class=\"keyword\">or</span> more columns )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>2.12 SQLite CREATE TRIGGER 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> database_name.trigger_name</span><br><span class=\"line\">BEFORE <span class=\"keyword\">INSERT</span> <span class=\"keyword\">ON</span> table_name <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">   stmt1;</span><br><span class=\"line\">   stmt2;</span><br><span class=\"line\">   ....</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.13 SQLite CREATE VIEW 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> database_name.view_name  <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> statement....;</span><br></pre></td></tr></table></figure>\n\n<p>2.14 SQLite CREATE VIRTUAL TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> VIRTUAL <span class=\"keyword\">TABLE</span> database_name.table_name <span class=\"keyword\">USING</span> weblog( access.log );</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> VIRTUAL <span class=\"keyword\">TABLE</span> database_name.table_name <span class=\"keyword\">USING</span> fts3( );</span><br></pre></td></tr></table></figure>\n\n<p>2.15 SQLite COMMIT TRANSACTION 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.16 SQLite COUNT 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.17 SQLite DELETE 语句：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">WHERE  &#123;CONDITION&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.18 SQLite DETACH DATABASE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DETACH DATABASE <span class=\"string\">&#x27;Alias-Name&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.19 SQLite DISTINCT 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.20 SQLite DROP INDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX database_name.index_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.21 SQLite DROP TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> database_name.table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.22 SQLite DROP VIEW 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> view_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.23 SQLite DROP TRIGGER 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TRIGGER</span> trigger_name</span><br></pre></td></tr></table></figure>\n\n<p>2.24 SQLite EXISTS 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span>   table_name );</span><br></pre></td></tr></table></figure>\n\n<p>2.25 SQLite EXPLAIN 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">INSERT</span> statement...;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">EXPLAIN QUERY PLAN <span class=\"keyword\">SELECT</span> statement...;</span><br></pre></td></tr></table></figure>\n\n<p>2.26 SQLite GLOB 子句：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\">WHERE  column_name GLOB &#123; PATTERN &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.27 SQLite GROUP BY 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.28 SQLite HAVING 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> (arithematic <span class=\"keyword\">function</span> <span class=\"keyword\">condition</span>);</span><br></pre></td></tr></table></figure>\n\n<p>2.29 SQLite INSERT INTO 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name( column1, column2....columnN)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> ( value1, value2....valueN);</span><br></pre></td></tr></table></figure>\n\n<p>2.30 SQLite IN 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">IN</span> (val<span class=\"number\">-1</span>, val<span class=\"number\">-2</span>,...val<span class=\"operator\">-</span>N);</span><br></pre></td></tr></table></figure>\n\n<p>2.31 SQLite Like 子句：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\">WHERE  column_name LIKE &#123; PATTERN &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.32 SQLite NOT IN 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (val<span class=\"number\">-1</span>, val<span class=\"number\">-2</span>,...val<span class=\"operator\">-</span>N);</span><br></pre></td></tr></table></figure>\n\n<p>2.33 SQLite ORDER BY 子句：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span></span><br><span class=\"line\">ORDER BY column_name &#123;ASC|DESC&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.34 SQLite PRAGMA 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRAGMA pragma_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">For</span> example:</span><br><span class=\"line\">PRAGMA page_size;</span><br><span class=\"line\">PRAGMA cache_size <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">PRAGMA table_info(table_name);</span><br></pre></td></tr></table></figure>\n\n<p>2.35 SQLite RELEASE SAVEPOINT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RELEASE</span> savepoint_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.36 SQLite REINDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REINDEX collation_name;</span><br><span class=\"line\">REINDEX database_name.index_name;</span><br><span class=\"line\">REINDEX database_name.table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.37 SQLite ROLLBACK 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ROLLBACK</span>;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span> <span class=\"keyword\">TO</span> <span class=\"keyword\">SAVEPOINT</span> savepoint_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.38 SQLite SAVEPOINT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SAVEPOINT</span> savepoint_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.39 SQLite SELECT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.40 SQLite UPDATE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE table_name</span><br><span class=\"line\"><span class=\"keyword\">SET</span> column1 <span class=\"operator\">=</span> value1, column2 <span class=\"operator\">=</span> value2....columnN<span class=\"operator\">=</span>valueN</span><br><span class=\"line\">[ <span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span> ];</span><br></pre></td></tr></table></figure>\n\n<p>2.41 SQLite VACUUM 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VACUUM;</span><br></pre></td></tr></table></figure>\n\n<p>2.42 SQLite WHERE 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、常见专有名词\"><a href=\"#3、常见专有名词\" class=\"headerlink\" title=\"3、常见专有名词\"></a>3、常见专有名词</h2><p>事务<br>游标<br>触发器<br>存储过程<br>回滚<br>约束<br>索引<br>视图</p>\n<h2 id=\"4、常用操作\"><a href=\"#4、常用操作\" class=\"headerlink\" title=\"4、常用操作\"></a>4、常用操作</h2><p>数据同步<br>导入、导出<br>CRUD (Create/Retrieve/Update/Delete)</p>\n<h2 id=\"5、建表原则\"><a href=\"#5、建表原则\" class=\"headerlink\" title=\"5、建表原则\"></a>5、建表原则</h2><p>数据范式</p>\n<h2 id=\"6、事务特性\"><a href=\"#6、事务特性\" class=\"headerlink\" title=\"6、事务特性\"></a>6、事务特性</h2><p>ACID</p>\n<h2 id=\"7、数据库\"><a href=\"#7、数据库\" class=\"headerlink\" title=\"7、数据库\"></a>7、数据库</h2><p>常见数据库：SQLite、MySQL、SQLServer、Oracle、MOngoDB</p>\n<p>7.1 分类：<br>    关系型：Oracle和MySQL<br>    非关系型：NoSQL(NoSQL = Not Only SQL )<br>（1）键值存储数据库（key-value）</p>\n<p>键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。</p>\n<p>键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。</p>\n<p>典型产品：Memcached、Redis、MemcacheDB</p>\n<p>（2）列存储（Column-oriented）数据库</p>\n<p>列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。</p>\n<p>这种数据库通常用来应对分布式存储海量数据。</p>\n<p>典型产品：Cassandra、HBase</p>\n<p>（3）面向文档（Document-Oriented）数据库</p>\n<p>文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。</p>\n<p>面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。</p>\n<p>典型产品：MongoDB、CouchDB</p>\n<p>（4）图形数据库</p>\n<p>图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。</p>\n<p>典型产品：Neo4J、InforGrid</p>\n<p>7.2 数据库引擎：数据库引擎是用于存储、处理和保护数据的核心服务。<br>MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。</p>\n<p>你能用的数据库引擎取决于mysql在安装的时候是如何被编译的。要添加一个新的引擎，就必须重新编译MYSQL。在缺省情况下，MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。</p>\n<ul>\n<li><p>ISAM</p>\n<blockquote>\n<p>ISAM是一个定义明确且历经时间考验的数据表格管理方法，它在设计之时就考虑到数据库被查询的次数要远大于更新的次数。因此，ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错：如果你的硬盘崩溃了，那么数据文件就无法恢复了。如果你正在把ISAM用在关键任务应用程序里，那就必须经常备份你所有的实时数据，通过其复制特性，MYSQL能够支持这样的备份应用程序。</p>\n</blockquote>\n</li>\n<li><p>MYISAM</p>\n<blockquote>\n<p>MYISAM是MYSQL的ISAM扩展格式和缺省的数据库引擎。除了提供ISAM里所没有的索引和字段管理的大量功能，MYISAM还使用一种表格锁定的机制，来优化多个并发的读写操作。其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。MYISAM还有一些有用的扩展，例如用来修复数据库文件的MYISAMCHK工具和用来恢复浪费空间的MYISAMPACK工具。<br>MYISAM强调了快速读取操作，这可能就是为什么MYSQL受到了WEB开发如此青睐的主要原因：在WEB开发中你所进行的大量数据操作都是读取操作。所以，大多数虚拟主机提供商和INTERNET平台提供商只允许使用MYISAM格式。</p>\n</blockquote>\n</li>\n<li><p>HEAP</p>\n</li>\n</ul>\n<blockquote>\n<p>HEAP允许只驻留在内存里的临时表格。驻留在内存里让HEAP要比ISAM和MYISAM都快，但是它所管理的数据是不稳定的，而且如果在关机之前没有进行保存，那么所有的数据都会丢失。在数据行被删除的时候，HEAP也不会浪费大量的空间。HEAP表格在你需要使用SELECT表达式来选择和操控数据的时候非常有用。要记住，在用完表格之后就删除表格。</p>\n</blockquote>\n<ul>\n<li>INNODB和BERKLEYDB</li>\n</ul>\n<blockquote>\n<p>INNODB和BERKLEYDB（BDB）数据库引擎都是造就MYSQL灵活性的技术的直接产品，这项技术就是MYSQL++ API。在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MYISAM数据库引擎不支持事务处理也不支持外来键。尽管要比ISAM和MYISAM引擎慢很多，但是INNODB和BDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。如前所述，如果你的设计需要这些特性中的一者或者两者，那你就要被迫使用后两个引擎中的一个了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SQLite\"><a href=\"#SQLite\" class=\"headerlink\" title=\"SQLite\"></a>SQLite</h1><h2 id=\"1、终端命令\"><a href=\"#1、终端命令\" class=\"headerlink\" title=\"1、终端命令\"></a>1、终端命令</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.auth <span class=\"keyword\">ON</span><span class=\"operator\">|</span>OFF           <span class=\"keyword\">Show</span> authorizer callbacks</span><br><span class=\"line\">.backup ?DB? FILE      Backup DB (<span class=\"keyword\">default</span> &quot;main&quot;) <span class=\"keyword\">to</span> FILE</span><br><span class=\"line\">                         <span class=\"keyword\">Add</span> &quot;--append&quot; <span class=\"keyword\">to</span> <span class=\"keyword\">open</span> <span class=\"keyword\">using</span> appendvfs.</span><br><span class=\"line\">.bail <span class=\"keyword\">on</span><span class=\"operator\">|</span>off           Stop after hitting an error.  <span class=\"keyword\">Default</span> OFF</span><br><span class=\"line\">.<span class=\"type\">binary</span> <span class=\"keyword\">on</span><span class=\"operator\">|</span>off         Turn <span class=\"type\">binary</span> output <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off.  <span class=\"keyword\">Default</span> OFF</span><br><span class=\"line\">.cd DIRECTORY          Change the working directory <span class=\"keyword\">to</span> DIRECTORY</span><br><span class=\"line\">.changes <span class=\"keyword\">on</span><span class=\"operator\">|</span>off        <span class=\"keyword\">Show</span> number <span class=\"keyword\">of</span> <span class=\"keyword\">rows</span> changed <span class=\"keyword\">by</span> <span class=\"keyword\">SQL</span></span><br><span class=\"line\">.<span class=\"keyword\">check</span> GLOB            Fail if output since .testcase does <span class=\"keyword\">not</span> <span class=\"keyword\">match</span></span><br><span class=\"line\">.clone NEWDB           Clone data <span class=\"keyword\">into</span> NEWDB <span class=\"keyword\">from</span> the existing database</span><br><span class=\"line\">.databases             List names <span class=\"keyword\">and</span> files <span class=\"keyword\">of</span> attached databases</span><br><span class=\"line\">.dbconfig ?op? ?val?   List <span class=\"keyword\">or</span> change sqlite3_db_config() options</span><br><span class=\"line\">.dbinfo ?DB?           <span class=\"keyword\">Show</span> status information about the database</span><br><span class=\"line\">.dump ?<span class=\"keyword\">TABLE</span>? ...      Dump the database <span class=\"keyword\">in</span> an <span class=\"keyword\">SQL</span> text format</span><br><span class=\"line\">                         If <span class=\"keyword\">TABLE</span> specified, <span class=\"keyword\">only</span> dump tables matching</span><br><span class=\"line\">                         <span class=\"keyword\">LIKE</span> <span class=\"keyword\">pattern</span> TABLE.</span><br><span class=\"line\">.echo <span class=\"keyword\">on</span><span class=\"operator\">|</span>off           Turn command echo <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.eqp <span class=\"keyword\">on</span><span class=\"operator\">|</span>off<span class=\"operator\">|</span><span class=\"keyword\">full</span>       Enable <span class=\"keyword\">or</span> disable automatic EXPLAIN QUERY PLAN</span><br><span class=\"line\">.excel                 Display the output <span class=\"keyword\">of</span> next command <span class=\"keyword\">in</span> a spreadsheet</span><br><span class=\"line\">.exit                  Exit this program</span><br><span class=\"line\">.expert                EXPERIMENTAL. Suggest indexes <span class=\"keyword\">for</span> specified queries</span><br><span class=\"line\">.fullschema ?<span class=\"comment\">--indent? Show schema and the content of sqlite_stat tables</span></span><br><span class=\"line\">.headers <span class=\"keyword\">on</span><span class=\"operator\">|</span>off        Turn display <span class=\"keyword\">of</span> headers <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.help                  <span class=\"keyword\">Show</span> this message</span><br><span class=\"line\">.import FILE <span class=\"keyword\">TABLE</span>     Import data <span class=\"keyword\">from</span> FILE <span class=\"keyword\">into</span> <span class=\"keyword\">TABLE</span></span><br><span class=\"line\">.imposter INDEX <span class=\"keyword\">TABLE</span>  <span class=\"keyword\">Create</span> imposter <span class=\"keyword\">table</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">on</span> index INDEX</span><br><span class=\"line\">.indexes ?<span class=\"keyword\">TABLE</span>?       <span class=\"keyword\">Show</span> names <span class=\"keyword\">of</span> <span class=\"keyword\">all</span> indexes</span><br><span class=\"line\">                         If <span class=\"keyword\">TABLE</span> specified, <span class=\"keyword\">only</span> <span class=\"keyword\">show</span> indexes <span class=\"keyword\">for</span> tables</span><br><span class=\"line\">                         matching <span class=\"keyword\">LIKE</span> <span class=\"keyword\">pattern</span> TABLE.</span><br><span class=\"line\">.limit ?LIMIT? ?VAL?   Display <span class=\"keyword\">or</span> change the <span class=\"keyword\">value</span> <span class=\"keyword\">of</span> an SQLITE_LIMIT</span><br><span class=\"line\">.lint OPTIONS          Report potential schema issues. Options:</span><br><span class=\"line\">                         fkey<span class=\"operator\">-</span>indexes     Find missing <span class=\"keyword\">foreign</span> key indexes</span><br><span class=\"line\">.log FILE<span class=\"operator\">|</span>off          Turn logging <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off.  FILE can be stderr<span class=\"operator\">/</span>stdout</span><br><span class=\"line\">.mode MODE ?<span class=\"keyword\">TABLE</span>?     <span class=\"keyword\">Set</span> output mode <span class=\"keyword\">where</span> MODE <span class=\"keyword\">is</span> <span class=\"keyword\">one</span> <span class=\"keyword\">of</span>:</span><br><span class=\"line\">                         ascii    Columns<span class=\"operator\">/</span><span class=\"keyword\">rows</span> delimited <span class=\"keyword\">by</span> <span class=\"number\">0x1F</span> <span class=\"keyword\">and</span> <span class=\"number\">0x1E</span></span><br><span class=\"line\">                         csv      Comma<span class=\"operator\">-</span>separated <span class=\"keyword\">values</span></span><br><span class=\"line\">                         <span class=\"keyword\">column</span>   <span class=\"keyword\">Left</span><span class=\"operator\">-</span>aligned columns.  (See .width)</span><br><span class=\"line\">                         html     HTML <span class=\"operator\">&lt;</span><span class=\"keyword\">table</span><span class=\"operator\">&gt;</span> code</span><br><span class=\"line\">                         <span class=\"keyword\">insert</span>   <span class=\"keyword\">SQL</span> <span class=\"keyword\">insert</span> statements <span class=\"keyword\">for</span> <span class=\"keyword\">TABLE</span></span><br><span class=\"line\">                         line     <span class=\"keyword\">One</span> <span class=\"keyword\">value</span> <span class=\"keyword\">per</span> line</span><br><span class=\"line\">                         list     <span class=\"keyword\">Values</span> delimited <span class=\"keyword\">by</span> &quot;|&quot;</span><br><span class=\"line\">                         quote    <span class=\"keyword\">Escape</span> answers <span class=\"keyword\">as</span> <span class=\"keyword\">for</span> <span class=\"keyword\">SQL</span></span><br><span class=\"line\">                         tabs     Tab<span class=\"operator\">-</span>separated <span class=\"keyword\">values</span></span><br><span class=\"line\">                         tcl      TCL list elements</span><br><span class=\"line\">.nullvalue STRING      Use STRING <span class=\"keyword\">in</span> place <span class=\"keyword\">of</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">values</span></span><br><span class=\"line\">.once (<span class=\"operator\">-</span>e<span class=\"operator\">|</span><span class=\"operator\">-</span>x<span class=\"operator\">|</span>FILE)     Output <span class=\"keyword\">for</span> the next <span class=\"keyword\">SQL</span> command <span class=\"keyword\">only</span> <span class=\"keyword\">to</span> FILE</span><br><span class=\"line\">                         <span class=\"keyword\">or</span> invoke <span class=\"keyword\">system</span> text editor (<span class=\"operator\">-</span>e) <span class=\"keyword\">or</span> spreadsheet (<span class=\"operator\">-</span>x)</span><br><span class=\"line\">                         <span class=\"keyword\">on</span> the output.</span><br><span class=\"line\">.<span class=\"keyword\">open</span> ?OPTIONS? ?FILE? <span class=\"keyword\">Close</span> existing database <span class=\"keyword\">and</span> reopen FILE</span><br><span class=\"line\">                         The <span class=\"comment\">--new option starts with an empty file</span></span><br><span class=\"line\">                         Other options: <span class=\"comment\">--readonly --append --zip</span></span><br><span class=\"line\">.output ?FILE?         Send output <span class=\"keyword\">to</span> FILE <span class=\"keyword\">or</span> stdout</span><br><span class=\"line\">.print STRING...       Print literal STRING</span><br><span class=\"line\">.prompt MAIN CONTINUE  Replace the standard prompts</span><br><span class=\"line\">.quit                  Exit this program</span><br><span class=\"line\">.read FILENAME         <span class=\"keyword\">Execute</span> <span class=\"keyword\">SQL</span> <span class=\"keyword\">in</span> FILENAME</span><br><span class=\"line\">.restore ?DB? FILE     Restore content <span class=\"keyword\">of</span> DB (<span class=\"keyword\">default</span> &quot;main&quot;) <span class=\"keyword\">from</span> FILE</span><br><span class=\"line\">.save FILE             Write <span class=\"keyword\">in</span><span class=\"operator\">-</span>memory database <span class=\"keyword\">into</span> FILE</span><br><span class=\"line\">.scanstats <span class=\"keyword\">on</span><span class=\"operator\">|</span>off      Turn sqlite3_stmt_scanstatus() metrics <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.schema ?<span class=\"keyword\">PATTERN</span>?      <span class=\"keyword\">Show</span> the <span class=\"keyword\">CREATE</span> statements matching <span class=\"keyword\">PATTERN</span></span><br><span class=\"line\">                          <span class=\"keyword\">Add</span> <span class=\"comment\">--indent for pretty-printing</span></span><br><span class=\"line\">.selftest ?<span class=\"comment\">--init?     Run tests defined in the SELFTEST table</span></span><br><span class=\"line\">.separator COL ?<span class=\"type\">ROW</span>?   Change the <span class=\"keyword\">column</span> separator <span class=\"keyword\">and</span> optionally the <span class=\"type\">row</span></span><br><span class=\"line\">                         separator <span class=\"keyword\">for</span> <span class=\"keyword\">both</span> the output mode <span class=\"keyword\">and</span> .import</span><br><span class=\"line\">.session CMD ...       <span class=\"keyword\">Create</span> <span class=\"keyword\">or</span> control sessions</span><br><span class=\"line\">.sha3sum ?OPTIONS...?  Compute a SHA3 hash <span class=\"keyword\">of</span> database content</span><br><span class=\"line\">.shell CMD ARGS...     Run CMD ARGS... <span class=\"keyword\">in</span> a <span class=\"keyword\">system</span> shell</span><br><span class=\"line\">.<span class=\"keyword\">show</span>                  <span class=\"keyword\">Show</span> the <span class=\"keyword\">current</span> <span class=\"keyword\">values</span> <span class=\"keyword\">for</span> various settings</span><br><span class=\"line\">.stats ?<span class=\"keyword\">on</span><span class=\"operator\">|</span>off?        <span class=\"keyword\">Show</span> stats <span class=\"keyword\">or</span> turn stats <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.<span class=\"keyword\">system</span> CMD ARGS...    Run CMD ARGS... <span class=\"keyword\">in</span> a <span class=\"keyword\">system</span> shell</span><br><span class=\"line\">.tables ?<span class=\"keyword\">TABLE</span>?        List names <span class=\"keyword\">of</span> tables</span><br><span class=\"line\">                         If <span class=\"keyword\">TABLE</span> specified, <span class=\"keyword\">only</span> list tables matching</span><br><span class=\"line\">                         <span class=\"keyword\">LIKE</span> <span class=\"keyword\">pattern</span> TABLE.</span><br><span class=\"line\">.testcase NAME         <span class=\"keyword\">Begin</span> redirecting output <span class=\"keyword\">to</span> <span class=\"string\">&#x27;testcase-out.txt&#x27;</span></span><br><span class=\"line\">.timeout MS            Try opening locked tables <span class=\"keyword\">for</span> MS milliseconds</span><br><span class=\"line\">.timer <span class=\"keyword\">on</span><span class=\"operator\">|</span>off          Turn <span class=\"keyword\">SQL</span> timer <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.trace FILE<span class=\"operator\">|</span>off        Output <span class=\"keyword\">each</span> <span class=\"keyword\">SQL</span> statement <span class=\"keyword\">as</span> it <span class=\"keyword\">is</span> run</span><br><span class=\"line\">.vfsinfo ?AUX?         Information about the top<span class=\"operator\">-</span>level VFS</span><br><span class=\"line\">.vfslist               List <span class=\"keyword\">all</span> available VFSes</span><br><span class=\"line\">.vfsname ?AUX?         Print the name <span class=\"keyword\">of</span> the VFS stack</span><br><span class=\"line\">.width NUM1 NUM2 ...   <span class=\"keyword\">Set</span> <span class=\"keyword\">column</span> widths <span class=\"keyword\">for</span> &quot;column&quot; mode</span><br><span class=\"line\">                         Negative <span class=\"keyword\">values</span> <span class=\"keyword\">right</span><span class=\"operator\">-</span>justify</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、程序\"><a href=\"#2、程序\" class=\"headerlink\" title=\"2、程序\"></a>2、程序</h2><p>SQLite 语句</p>\n<p>所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。</p>\n<p>2.1 SQLite ANALYZE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANALYZE;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">ANALYZE database_name;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">ANALYZE database_name.table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.2 SQLite AND/OR 子句：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\">WHERE  CONDITION-1 &#123;AND|OR&#125; CONDITION-2;</span><br></pre></td></tr></table></figure>\n\n<p>2.3 SQLite ALTER TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> column_def...;</span><br></pre></td></tr></table></figure>\n\n<p>2.4 SQLite ALTER TABLE 语句（Rename）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name RENAME <span class=\"keyword\">TO</span> new_table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.5 SQLite ATTACH DATABASE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ATTACH DATABASE <span class=\"string\">&#x27;DatabaseName&#x27;</span> <span class=\"keyword\">As</span> <span class=\"string\">&#x27;Alias-Name&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.6 SQLite BEGIN TRANSACTION 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> EXCLUSIVE TRANSACTION;</span><br></pre></td></tr></table></figure>\n\n<p>2.7 SQLite BETWEEN 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">BETWEEN</span> val<span class=\"number\">-1</span> <span class=\"keyword\">AND</span> val<span class=\"number\">-2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.8 SQLite COMMIT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.9 SQLite CREATE INDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX index_name</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name ( column_name <span class=\"keyword\">COLLATE</span> NOCASE );</span><br></pre></td></tr></table></figure>\n\n<p>2.10 SQLite CREATE UNIQUE INDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX index_name</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name ( column1, column2,...columnN);</span><br></pre></td></tr></table></figure>\n\n<p>2.11 SQLite CREATE TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> table_name(</span><br><span class=\"line\">   column1 datatype,</span><br><span class=\"line\">   column2 datatype,</span><br><span class=\"line\">   column3 datatype,</span><br><span class=\"line\">   .....</span><br><span class=\"line\">   columnN datatype,</span><br><span class=\"line\">   <span class=\"keyword\">PRIMARY</span> KEY( <span class=\"keyword\">one</span> <span class=\"keyword\">or</span> more columns )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>2.12 SQLite CREATE TRIGGER 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> database_name.trigger_name</span><br><span class=\"line\">BEFORE <span class=\"keyword\">INSERT</span> <span class=\"keyword\">ON</span> table_name <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">   stmt1;</span><br><span class=\"line\">   stmt2;</span><br><span class=\"line\">   ....</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.13 SQLite CREATE VIEW 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> database_name.view_name  <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> statement....;</span><br></pre></td></tr></table></figure>\n\n<p>2.14 SQLite CREATE VIRTUAL TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> VIRTUAL <span class=\"keyword\">TABLE</span> database_name.table_name <span class=\"keyword\">USING</span> weblog( access.log );</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> VIRTUAL <span class=\"keyword\">TABLE</span> database_name.table_name <span class=\"keyword\">USING</span> fts3( );</span><br></pre></td></tr></table></figure>\n\n<p>2.15 SQLite COMMIT TRANSACTION 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.16 SQLite COUNT 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.17 SQLite DELETE 语句：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\">WHERE  &#123;CONDITION&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.18 SQLite DETACH DATABASE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DETACH DATABASE <span class=\"string\">&#x27;Alias-Name&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.19 SQLite DISTINCT 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.20 SQLite DROP INDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX database_name.index_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.21 SQLite DROP TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> database_name.table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.22 SQLite DROP VIEW 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> view_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.23 SQLite DROP TRIGGER 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TRIGGER</span> trigger_name</span><br></pre></td></tr></table></figure>\n\n<p>2.24 SQLite EXISTS 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span>   table_name );</span><br></pre></td></tr></table></figure>\n\n<p>2.25 SQLite EXPLAIN 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">INSERT</span> statement...;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">EXPLAIN QUERY PLAN <span class=\"keyword\">SELECT</span> statement...;</span><br></pre></td></tr></table></figure>\n\n<p>2.26 SQLite GLOB 子句：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\">WHERE  column_name GLOB &#123; PATTERN &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.27 SQLite GROUP BY 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.28 SQLite HAVING 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> (arithematic <span class=\"keyword\">function</span> <span class=\"keyword\">condition</span>);</span><br></pre></td></tr></table></figure>\n\n<p>2.29 SQLite INSERT INTO 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name( column1, column2....columnN)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> ( value1, value2....valueN);</span><br></pre></td></tr></table></figure>\n\n<p>2.30 SQLite IN 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">IN</span> (val<span class=\"number\">-1</span>, val<span class=\"number\">-2</span>,...val<span class=\"operator\">-</span>N);</span><br></pre></td></tr></table></figure>\n\n<p>2.31 SQLite Like 子句：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\">WHERE  column_name LIKE &#123; PATTERN &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.32 SQLite NOT IN 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (val<span class=\"number\">-1</span>, val<span class=\"number\">-2</span>,...val<span class=\"operator\">-</span>N);</span><br></pre></td></tr></table></figure>\n\n<p>2.33 SQLite ORDER BY 子句：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span></span><br><span class=\"line\">ORDER BY column_name &#123;ASC|DESC&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.34 SQLite PRAGMA 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRAGMA pragma_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">For</span> example:</span><br><span class=\"line\">PRAGMA page_size;</span><br><span class=\"line\">PRAGMA cache_size <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">PRAGMA table_info(table_name);</span><br></pre></td></tr></table></figure>\n\n<p>2.35 SQLite RELEASE SAVEPOINT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RELEASE</span> savepoint_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.36 SQLite REINDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REINDEX collation_name;</span><br><span class=\"line\">REINDEX database_name.index_name;</span><br><span class=\"line\">REINDEX database_name.table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.37 SQLite ROLLBACK 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ROLLBACK</span>;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span> <span class=\"keyword\">TO</span> <span class=\"keyword\">SAVEPOINT</span> savepoint_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.38 SQLite SAVEPOINT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SAVEPOINT</span> savepoint_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.39 SQLite SELECT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.40 SQLite UPDATE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE table_name</span><br><span class=\"line\"><span class=\"keyword\">SET</span> column1 <span class=\"operator\">=</span> value1, column2 <span class=\"operator\">=</span> value2....columnN<span class=\"operator\">=</span>valueN</span><br><span class=\"line\">[ <span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span> ];</span><br></pre></td></tr></table></figure>\n\n<p>2.41 SQLite VACUUM 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VACUUM;</span><br></pre></td></tr></table></figure>\n\n<p>2.42 SQLite WHERE 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、常见专有名词\"><a href=\"#3、常见专有名词\" class=\"headerlink\" title=\"3、常见专有名词\"></a>3、常见专有名词</h2><p>事务<br>游标<br>触发器<br>存储过程<br>回滚<br>约束<br>索引<br>视图</p>\n<h2 id=\"4、常用操作\"><a href=\"#4、常用操作\" class=\"headerlink\" title=\"4、常用操作\"></a>4、常用操作</h2><p>数据同步<br>导入、导出<br>CRUD (Create/Retrieve/Update/Delete)</p>\n<h2 id=\"5、建表原则\"><a href=\"#5、建表原则\" class=\"headerlink\" title=\"5、建表原则\"></a>5、建表原则</h2><p>数据范式</p>\n<h2 id=\"6、事务特性\"><a href=\"#6、事务特性\" class=\"headerlink\" title=\"6、事务特性\"></a>6、事务特性</h2><p>ACID</p>\n<h2 id=\"7、数据库\"><a href=\"#7、数据库\" class=\"headerlink\" title=\"7、数据库\"></a>7、数据库</h2><p>常见数据库：SQLite、MySQL、SQLServer、Oracle、MOngoDB</p>\n<p>7.1 分类：<br>    关系型：Oracle和MySQL<br>    非关系型：NoSQL(NoSQL = Not Only SQL )<br>（1）键值存储数据库（key-value）</p>\n<p>键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。</p>\n<p>键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。</p>\n<p>典型产品：Memcached、Redis、MemcacheDB</p>\n<p>（2）列存储（Column-oriented）数据库</p>\n<p>列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。</p>\n<p>这种数据库通常用来应对分布式存储海量数据。</p>\n<p>典型产品：Cassandra、HBase</p>\n<p>（3）面向文档（Document-Oriented）数据库</p>\n<p>文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。</p>\n<p>面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。</p>\n<p>典型产品：MongoDB、CouchDB</p>\n<p>（4）图形数据库</p>\n<p>图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。</p>\n<p>典型产品：Neo4J、InforGrid</p>\n<p>7.2 数据库引擎：数据库引擎是用于存储、处理和保护数据的核心服务。<br>MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。</p>\n<p>你能用的数据库引擎取决于mysql在安装的时候是如何被编译的。要添加一个新的引擎，就必须重新编译MYSQL。在缺省情况下，MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。</p>\n<ul>\n<li><p>ISAM</p>\n<blockquote>\n<p>ISAM是一个定义明确且历经时间考验的数据表格管理方法，它在设计之时就考虑到数据库被查询的次数要远大于更新的次数。因此，ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错：如果你的硬盘崩溃了，那么数据文件就无法恢复了。如果你正在把ISAM用在关键任务应用程序里，那就必须经常备份你所有的实时数据，通过其复制特性，MYSQL能够支持这样的备份应用程序。</p>\n</blockquote>\n</li>\n<li><p>MYISAM</p>\n<blockquote>\n<p>MYISAM是MYSQL的ISAM扩展格式和缺省的数据库引擎。除了提供ISAM里所没有的索引和字段管理的大量功能，MYISAM还使用一种表格锁定的机制，来优化多个并发的读写操作。其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。MYISAM还有一些有用的扩展，例如用来修复数据库文件的MYISAMCHK工具和用来恢复浪费空间的MYISAMPACK工具。<br>MYISAM强调了快速读取操作，这可能就是为什么MYSQL受到了WEB开发如此青睐的主要原因：在WEB开发中你所进行的大量数据操作都是读取操作。所以，大多数虚拟主机提供商和INTERNET平台提供商只允许使用MYISAM格式。</p>\n</blockquote>\n</li>\n<li><p>HEAP</p>\n</li>\n</ul>\n<blockquote>\n<p>HEAP允许只驻留在内存里的临时表格。驻留在内存里让HEAP要比ISAM和MYISAM都快，但是它所管理的数据是不稳定的，而且如果在关机之前没有进行保存，那么所有的数据都会丢失。在数据行被删除的时候，HEAP也不会浪费大量的空间。HEAP表格在你需要使用SELECT表达式来选择和操控数据的时候非常有用。要记住，在用完表格之后就删除表格。</p>\n</blockquote>\n<ul>\n<li>INNODB和BERKLEYDB</li>\n</ul>\n<blockquote>\n<p>INNODB和BERKLEYDB（BDB）数据库引擎都是造就MYSQL灵活性的技术的直接产品，这项技术就是MYSQL++ API。在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MYISAM数据库引擎不支持事务处理也不支持外来键。尽管要比ISAM和MYISAM引擎慢很多，但是INNODB和BDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。如前所述，如果你的设计需要这些特性中的一者或者两者，那你就要被迫使用后两个引擎中的一个了。</p>\n</blockquote>\n"},{"_content":"1、日志内容\n\n    时间|日志级别|类名_函数名_行数|分类|Log内容\n    \n获取类名：\n```\nextension NSObject {\n    var className: String {\n        return String(describing: type(of: self)).components(separatedBy: \".\").last!\n    }\n\n    class var className: String {\n        return String(describing: self).components(separatedBy: \".\").last!\n    }\n}\n```\n\n生成log函数：\n```\npublic func createLog(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  _ line: Int = #line, _ function: String = #function)\n-> String {\n    let lineStr = String.init(format: \"line:%d\", line)\n    let levelStr = levelToString(level: level)\n    let separator = \"|\"\n    let classSeparator = \"_\"\n    let log: String = Date().toString() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + \"\\n\"\n    print(log)\n    return log\n}\n```\n\n日志文件操作：\n```\npublic protocol LogStorageProtocol {\n\n    /// 获取日志缓存地址\n    ///\n    /// - Returns: String\n    func getCachePath() -> String\n\n    /// 删除文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Bool\n    func deleteFile(fileName: String) -> Bool\n\n    /// 清除全部日志缓存\n    ///\n    /// - Returns: Bool\n    func cleanCache() -> Bool\n\n    /// 读取日志文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Data\n    func readFile(fileName: String) -> Data?\n\n    /// 更新写入Log数据\n    ///\n    /// - Parameters:\n    ///   - fileName: String\n    ///   - data: Data\n    /// - Returns: Data\n    func updateFile(fileName: String, data: Data) -> Bool\n\n    /// 自动根据天数创建文件名\n    ///\n    /// - Returns: String\n    func createFileName() -> String\n}\n```\n\n策略：\n\n    而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，\n    根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省\n    资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数\n    组，容量是11个元素，还有一个充当哨兵\n    \n    \n* [**自主设计日志系统**](https://www.jianshu.com/p/74f121bfd9e9)","source":"_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之日志系统.md","raw":"1、日志内容\n\n    时间|日志级别|类名_函数名_行数|分类|Log内容\n    \n获取类名：\n```\nextension NSObject {\n    var className: String {\n        return String(describing: type(of: self)).components(separatedBy: \".\").last!\n    }\n\n    class var className: String {\n        return String(describing: self).components(separatedBy: \".\").last!\n    }\n}\n```\n\n生成log函数：\n```\npublic func createLog(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  _ line: Int = #line, _ function: String = #function)\n-> String {\n    let lineStr = String.init(format: \"line:%d\", line)\n    let levelStr = levelToString(level: level)\n    let separator = \"|\"\n    let classSeparator = \"_\"\n    let log: String = Date().toString() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + \"\\n\"\n    print(log)\n    return log\n}\n```\n\n日志文件操作：\n```\npublic protocol LogStorageProtocol {\n\n    /// 获取日志缓存地址\n    ///\n    /// - Returns: String\n    func getCachePath() -> String\n\n    /// 删除文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Bool\n    func deleteFile(fileName: String) -> Bool\n\n    /// 清除全部日志缓存\n    ///\n    /// - Returns: Bool\n    func cleanCache() -> Bool\n\n    /// 读取日志文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Data\n    func readFile(fileName: String) -> Data?\n\n    /// 更新写入Log数据\n    ///\n    /// - Parameters:\n    ///   - fileName: String\n    ///   - data: Data\n    /// - Returns: Data\n    func updateFile(fileName: String, data: Data) -> Bool\n\n    /// 自动根据天数创建文件名\n    ///\n    /// - Returns: String\n    func createFileName() -> String\n}\n```\n\n策略：\n\n    而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，\n    根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省\n    资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数\n    组，容量是11个元素，还有一个充当哨兵\n    \n    \n* [**自主设计日志系统**](https://www.jianshu.com/p/74f121bfd9e9)","slug":"iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之日志系统","published":1,"date":"2019-03-24T13:01:23.000Z","updated":"2019-03-27T13:53:32.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjf001s8n7ub91j5trq","content":"<p>1、日志内容</p>\n<pre><code>时间|日志级别|类名_函数名_行数|分类|Log内容\n</code></pre>\n<p>获取类名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension NSObject &#123;</span><br><span class=\"line\">    var className: String &#123;</span><br><span class=\"line\">        return String(describing: type(of: self)).components(separatedBy: &quot;.&quot;).last!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class var className: String &#123;</span><br><span class=\"line\">        return String(describing: self).components(separatedBy: &quot;.&quot;).last!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成log函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func createLog(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  _ line: Int &#x3D; #line, _ function: String &#x3D; #function)</span><br><span class=\"line\">-&gt; String &#123;</span><br><span class=\"line\">    let lineStr &#x3D; String.init(format: &quot;line:%d&quot;, line)</span><br><span class=\"line\">    let levelStr &#x3D; levelToString(level: level)</span><br><span class=\"line\">    let separator &#x3D; &quot;|&quot;</span><br><span class=\"line\">    let classSeparator &#x3D; &quot;_&quot;</span><br><span class=\"line\">    let log: String &#x3D; Date().toString() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + &quot;\\n&quot;</span><br><span class=\"line\">    print(log)</span><br><span class=\"line\">    return log</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>日志文件操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public protocol LogStorageProtocol &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 获取日志缓存地址</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Returns: String</span><br><span class=\"line\">    func getCachePath() -&gt; String</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 删除文件</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Parameter fileName: String</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Returns: Bool</span><br><span class=\"line\">    func deleteFile(fileName: String) -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 清除全部日志缓存</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Returns: Bool</span><br><span class=\"line\">    func cleanCache() -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 读取日志文件</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Parameter fileName: String</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Returns: Data</span><br><span class=\"line\">    func readFile(fileName: String) -&gt; Data?</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 更新写入Log数据</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Parameters:</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;   - fileName: String</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;   - data: Data</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Returns: Data</span><br><span class=\"line\">    func updateFile(fileName: String, data: Data) -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 自动根据天数创建文件名</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Returns: String</span><br><span class=\"line\">    func createFileName() -&gt; String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>策略：</p>\n<pre><code>而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，\n根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省\n资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数\n组，容量是11个元素，还有一个充当哨兵\n</code></pre>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/74f121bfd9e9\"><strong>自主设计日志系统</strong></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>1、日志内容</p>\n<pre><code>时间|日志级别|类名_函数名_行数|分类|Log内容\n</code></pre>\n<p>获取类名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension NSObject &#123;</span><br><span class=\"line\">    var className: String &#123;</span><br><span class=\"line\">        return String(describing: type(of: self)).components(separatedBy: &quot;.&quot;).last!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class var className: String &#123;</span><br><span class=\"line\">        return String(describing: self).components(separatedBy: &quot;.&quot;).last!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成log函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func createLog(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  _ line: Int &#x3D; #line, _ function: String &#x3D; #function)</span><br><span class=\"line\">-&gt; String &#123;</span><br><span class=\"line\">    let lineStr &#x3D; String.init(format: &quot;line:%d&quot;, line)</span><br><span class=\"line\">    let levelStr &#x3D; levelToString(level: level)</span><br><span class=\"line\">    let separator &#x3D; &quot;|&quot;</span><br><span class=\"line\">    let classSeparator &#x3D; &quot;_&quot;</span><br><span class=\"line\">    let log: String &#x3D; Date().toString() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + &quot;\\n&quot;</span><br><span class=\"line\">    print(log)</span><br><span class=\"line\">    return log</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>日志文件操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public protocol LogStorageProtocol &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 获取日志缓存地址</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Returns: String</span><br><span class=\"line\">    func getCachePath() -&gt; String</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 删除文件</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Parameter fileName: String</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Returns: Bool</span><br><span class=\"line\">    func deleteFile(fileName: String) -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 清除全部日志缓存</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Returns: Bool</span><br><span class=\"line\">    func cleanCache() -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 读取日志文件</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Parameter fileName: String</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Returns: Data</span><br><span class=\"line\">    func readFile(fileName: String) -&gt; Data?</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 更新写入Log数据</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Parameters:</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;   - fileName: String</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;   - data: Data</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Returns: Data</span><br><span class=\"line\">    func updateFile(fileName: String, data: Data) -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; 自动根据天数创建文件名</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F; - Returns: String</span><br><span class=\"line\">    func createFileName() -&gt; String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>策略：</p>\n<pre><code>而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，\n根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省\n资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数\n组，容量是11个元素，还有一个充当哨兵\n</code></pre>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/74f121bfd9e9\"><strong>自主设计日志系统</strong></a></li>\n</ul>\n"},{"_content":"**1、算法--Swift:** [raywenderlich/swift-algorithm-club](https://github.com/raywenderlich/swift-algorithm-club.git)\nAlgorithms and data structures in Swift, with explanations!\n\n**随机数：**\n\n|函数名\t|返回值|\t取值范围|\n|-----|----|----|\n|rand()\t|int|\t0～2147483647|\n|random()\t|long|\t0～2147483647|\n|arc4random()\t|uint32_t|\t0～4294967295|\n\n**随机数和伪随机数：**\n真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。\n\n而计算机中的随机数并不是真正的随机数，而是通过通过随机函数按照一定算法模拟产生的，其结果是确定可预见的，所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数。\n\n硬件方法是指采集某一种物理噪声，经过抽样、量化之后得到的随机数。例如大气噪声。此类噪声是由自然界中的布朗运动等现象产生的，因此可以看作真正的随机数生成器，只要是通过算法产生的随机数都是伪随机数。通过真实随机事件取得的随机数才是真随机数。\n\n**随机种子（Random Seed）：**\n一种以随机数作为对象的以真随机数（种子）为初始条件的随机数。计算机中的随机数都是伪随机数，以一个真随机数（种子）作为初始条件，然后用一定的算法不停迭代产生随机数。通俗来讲种子就是个序号，这个序号交给一个数列管理器，通过这个序号，你从管理器中取出一个数列，这个数列就是你通过那个序号得到的随机数。\n\n种子和随机数列是一一对应的。{An}=f(x), x 就是种子，F()是算法，{An}是数列，这个数列看上去是随机的，这是因为An的通项很复杂。\n\n种子的选择有规律吗？肯定是有！那么生成的随机数也一定是有规律的了。既然有规律，那肯定就是伪随机了，因为你不知道种子和随机数算法对你来说当然就是随机数。\n\n*原文链接： [iOS 随机数](https://www.jianshu.com/p/3e751235ecd0)\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之算法.md","raw":"**1、算法--Swift:** [raywenderlich/swift-algorithm-club](https://github.com/raywenderlich/swift-algorithm-club.git)\nAlgorithms and data structures in Swift, with explanations!\n\n**随机数：**\n\n|函数名\t|返回值|\t取值范围|\n|-----|----|----|\n|rand()\t|int|\t0～2147483647|\n|random()\t|long|\t0～2147483647|\n|arc4random()\t|uint32_t|\t0～4294967295|\n\n**随机数和伪随机数：**\n真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。\n\n而计算机中的随机数并不是真正的随机数，而是通过通过随机函数按照一定算法模拟产生的，其结果是确定可预见的，所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数。\n\n硬件方法是指采集某一种物理噪声，经过抽样、量化之后得到的随机数。例如大气噪声。此类噪声是由自然界中的布朗运动等现象产生的，因此可以看作真正的随机数生成器，只要是通过算法产生的随机数都是伪随机数。通过真实随机事件取得的随机数才是真随机数。\n\n**随机种子（Random Seed）：**\n一种以随机数作为对象的以真随机数（种子）为初始条件的随机数。计算机中的随机数都是伪随机数，以一个真随机数（种子）作为初始条件，然后用一定的算法不停迭代产生随机数。通俗来讲种子就是个序号，这个序号交给一个数列管理器，通过这个序号，你从管理器中取出一个数列，这个数列就是你通过那个序号得到的随机数。\n\n种子和随机数列是一一对应的。{An}=f(x), x 就是种子，F()是算法，{An}是数列，这个数列看上去是随机的，这是因为An的通项很复杂。\n\n种子的选择有规律吗？肯定是有！那么生成的随机数也一定是有规律的了。既然有规律，那肯定就是伪随机了，因为你不知道种子和随机数算法对你来说当然就是随机数。\n\n*原文链接： [iOS 随机数](https://www.jianshu.com/p/3e751235ecd0)\n","slug":"iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之算法","published":1,"date":"2019-03-24T12:44:45.000Z","updated":"2019-03-27T08:02:19.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjg001t8n7uap0ubh3z","content":"<p><strong>1、算法–Swift:</strong> <a href=\"https://github.com/raywenderlich/swift-algorithm-club.git\">raywenderlich/swift-algorithm-club</a><br>Algorithms and data structures in Swift, with explanations!</p>\n<p><strong>随机数：</strong></p>\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>返回值</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rand()</td>\n<td>int</td>\n<td>0～2147483647</td>\n</tr>\n<tr>\n<td>random()</td>\n<td>long</td>\n<td>0～2147483647</td>\n</tr>\n<tr>\n<td>arc4random()</td>\n<td>uint32_t</td>\n<td>0～4294967295</td>\n</tr>\n</tbody></table>\n<p><strong>随机数和伪随机数：</strong><br>真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。</p>\n<p>而计算机中的随机数并不是真正的随机数，而是通过通过随机函数按照一定算法模拟产生的，其结果是确定可预见的，所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数。</p>\n<p>硬件方法是指采集某一种物理噪声，经过抽样、量化之后得到的随机数。例如大气噪声。此类噪声是由自然界中的布朗运动等现象产生的，因此可以看作真正的随机数生成器，只要是通过算法产生的随机数都是伪随机数。通过真实随机事件取得的随机数才是真随机数。</p>\n<p><strong>随机种子（Random Seed）：</strong><br>一种以随机数作为对象的以真随机数（种子）为初始条件的随机数。计算机中的随机数都是伪随机数，以一个真随机数（种子）作为初始条件，然后用一定的算法不停迭代产生随机数。通俗来讲种子就是个序号，这个序号交给一个数列管理器，通过这个序号，你从管理器中取出一个数列，这个数列就是你通过那个序号得到的随机数。</p>\n<p>种子和随机数列是一一对应的。{An}=f(x), x 就是种子，F()是算法，{An}是数列，这个数列看上去是随机的，这是因为An的通项很复杂。</p>\n<p>种子的选择有规律吗？肯定是有！那么生成的随机数也一定是有规律的了。既然有规律，那肯定就是伪随机了，因为你不知道种子和随机数算法对你来说当然就是随机数。</p>\n<p>*原文链接： <a href=\"https://www.jianshu.com/p/3e751235ecd0\">iOS 随机数</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>1、算法–Swift:</strong> <a href=\"https://github.com/raywenderlich/swift-algorithm-club.git\">raywenderlich/swift-algorithm-club</a><br>Algorithms and data structures in Swift, with explanations!</p>\n<p><strong>随机数：</strong></p>\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>返回值</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rand()</td>\n<td>int</td>\n<td>0～2147483647</td>\n</tr>\n<tr>\n<td>random()</td>\n<td>long</td>\n<td>0～2147483647</td>\n</tr>\n<tr>\n<td>arc4random()</td>\n<td>uint32_t</td>\n<td>0～4294967295</td>\n</tr>\n</tbody></table>\n<p><strong>随机数和伪随机数：</strong><br>真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。</p>\n<p>而计算机中的随机数并不是真正的随机数，而是通过通过随机函数按照一定算法模拟产生的，其结果是确定可预见的，所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数。</p>\n<p>硬件方法是指采集某一种物理噪声，经过抽样、量化之后得到的随机数。例如大气噪声。此类噪声是由自然界中的布朗运动等现象产生的，因此可以看作真正的随机数生成器，只要是通过算法产生的随机数都是伪随机数。通过真实随机事件取得的随机数才是真随机数。</p>\n<p><strong>随机种子（Random Seed）：</strong><br>一种以随机数作为对象的以真随机数（种子）为初始条件的随机数。计算机中的随机数都是伪随机数，以一个真随机数（种子）作为初始条件，然后用一定的算法不停迭代产生随机数。通俗来讲种子就是个序号，这个序号交给一个数列管理器，通过这个序号，你从管理器中取出一个数列，这个数列就是你通过那个序号得到的随机数。</p>\n<p>种子和随机数列是一一对应的。{An}=f(x), x 就是种子，F()是算法，{An}是数列，这个数列看上去是随机的，这是因为An的通项很复杂。</p>\n<p>种子的选择有规律吗？肯定是有！那么生成的随机数也一定是有规律的了。既然有规律，那肯定就是伪随机了，因为你不知道种子和随机数算法对你来说当然就是随机数。</p>\n<p>*原文链接： <a href=\"https://www.jianshu.com/p/3e751235ecd0\">iOS 随机数</a></p>\n"},{"_content":"1、网络库\n\n2、原理及协议\n\n\tTCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\n\t\n\t协议簇、协议栈","source":"_posts/iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之网络.md","raw":"1、网络库\n\n2、原理及协议\n\n\tTCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\n\t\n\t协议簇、协议栈","slug":"iOS学习笔记/iOS系统学习/iOS之数据及安全/iOS之网络","published":1,"date":"2019-03-24T12:44:45.000Z","updated":"2019-03-27T13:11:08.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjg001u8n7u2msmgq43","content":"<p>1、网络库</p>\n<p>2、原理及协议</p>\n<pre><code>TCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\n\n协议簇、协议栈\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>1、网络库</p>\n<p>2、原理及协议</p>\n<pre><code>TCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\n\n协议簇、协议栈\n</code></pre>\n"},{"_content":"commit代码规范\n\n基本样式：[type] [module] : --bug=1000627 Message\n\n//空一行\n\ndetail\n\n//空一行\n\n说明：\n\n\n其中：\ntype, module 和 message 是必选。\ndetail 为可选。\n\ntype 用于说明 commit 的类别，使用下面标识：\n  bug-fix：修复bug\n\n  feature：新功能实现\n\n  optimize：重构，优化，工程配置等\n\n  merge: 用于替换自动生成合并分支log\n\n\nmodule 用于说明commit内容所属的业务模块（如果不属于任何模块，使用“通用”）\n\nmessage 修改的内容\n\ndetail 用于在该commit有多条内容的时候，加以说明\nbug-fix需要添加关键字：--bug=bugid\nfeature需要添加关键字：--story=storyid\n\n\n样例1、\n\n[fixbug] [咨询] : 修复会话页面在iOS10上显示异常的问题\n\n\n样例2、\n\n[fixbug] [咨询] [tapd id: 1009080,1090900] : 修复以下bug：\n\n\n1.修复会话页面在iOS10上显示异常的问题\n\n2.修复tabbarItem小红点显示逻辑不正确bug\n\n3.修复navigationbar高度不正确的问题\n\n\n样例3、\n\n[feature] [登陆] : 导入微信SDK，实现微信登陆\n\n\n样例4、\n\n[optimize] [工程配置] : 增加会话创建失败后的重连，降低失败概率\n\n\n样例5、\n\n[merge] : Merge branch 'releaseV0.2.0' into ‘develop’\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/Git提交代码规范.md","raw":"commit代码规范\n\n基本样式：[type] [module] : --bug=1000627 Message\n\n//空一行\n\ndetail\n\n//空一行\n\n说明：\n\n\n其中：\ntype, module 和 message 是必选。\ndetail 为可选。\n\ntype 用于说明 commit 的类别，使用下面标识：\n  bug-fix：修复bug\n\n  feature：新功能实现\n\n  optimize：重构，优化，工程配置等\n\n  merge: 用于替换自动生成合并分支log\n\n\nmodule 用于说明commit内容所属的业务模块（如果不属于任何模块，使用“通用”）\n\nmessage 修改的内容\n\ndetail 用于在该commit有多条内容的时候，加以说明\nbug-fix需要添加关键字：--bug=bugid\nfeature需要添加关键字：--story=storyid\n\n\n样例1、\n\n[fixbug] [咨询] : 修复会话页面在iOS10上显示异常的问题\n\n\n样例2、\n\n[fixbug] [咨询] [tapd id: 1009080,1090900] : 修复以下bug：\n\n\n1.修复会话页面在iOS10上显示异常的问题\n\n2.修复tabbarItem小红点显示逻辑不正确bug\n\n3.修复navigationbar高度不正确的问题\n\n\n样例3、\n\n[feature] [登陆] : 导入微信SDK，实现微信登陆\n\n\n样例4、\n\n[optimize] [工程配置] : 增加会话创建失败后的重连，降低失败概率\n\n\n样例5、\n\n[merge] : Merge branch 'releaseV0.2.0' into ‘develop’\n","slug":"iOS学习笔记/iOS系统学习/iOS之开发工具/Git提交代码规范","published":1,"date":"2019-04-13T01:01:15.000Z","updated":"2019-04-13T01:01:15.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjh001v8n7ufz0gcs06","content":"<p>commit代码规范</p>\n<p>基本样式：[type] [module] : –bug=1000627 Message</p>\n<p>//空一行</p>\n<p>detail</p>\n<p>//空一行</p>\n<p>说明：</p>\n<p>其中：<br>type, module 和 message 是必选。<br>detail 为可选。</p>\n<p>type 用于说明 commit 的类别，使用下面标识：<br>  bug-fix：修复bug</p>\n<p>  feature：新功能实现</p>\n<p>  optimize：重构，优化，工程配置等</p>\n<p>  merge: 用于替换自动生成合并分支log</p>\n<p>module 用于说明commit内容所属的业务模块（如果不属于任何模块，使用“通用”）</p>\n<p>message 修改的内容</p>\n<p>detail 用于在该commit有多条内容的时候，加以说明<br>bug-fix需要添加关键字：–bug=bugid<br>feature需要添加关键字：–story=storyid</p>\n<p>样例1、</p>\n<p>[fixbug] [咨询] : 修复会话页面在iOS10上显示异常的问题</p>\n<p>样例2、</p>\n<p>[fixbug] [咨询] [tapd id: 1009080,1090900] : 修复以下bug：</p>\n<p>1.修复会话页面在iOS10上显示异常的问题</p>\n<p>2.修复tabbarItem小红点显示逻辑不正确bug</p>\n<p>3.修复navigationbar高度不正确的问题</p>\n<p>样例3、</p>\n<p>[feature] [登陆] : 导入微信SDK，实现微信登陆</p>\n<p>样例4、</p>\n<p>[optimize] [工程配置] : 增加会话创建失败后的重连，降低失败概率</p>\n<p>样例5、</p>\n<p>[merge] : Merge branch ‘releaseV0.2.0’ into ‘develop’</p>\n","site":{"data":{}},"excerpt":"","more":"<p>commit代码规范</p>\n<p>基本样式：[type] [module] : –bug=1000627 Message</p>\n<p>//空一行</p>\n<p>detail</p>\n<p>//空一行</p>\n<p>说明：</p>\n<p>其中：<br>type, module 和 message 是必选。<br>detail 为可选。</p>\n<p>type 用于说明 commit 的类别，使用下面标识：<br>  bug-fix：修复bug</p>\n<p>  feature：新功能实现</p>\n<p>  optimize：重构，优化，工程配置等</p>\n<p>  merge: 用于替换自动生成合并分支log</p>\n<p>module 用于说明commit内容所属的业务模块（如果不属于任何模块，使用“通用”）</p>\n<p>message 修改的内容</p>\n<p>detail 用于在该commit有多条内容的时候，加以说明<br>bug-fix需要添加关键字：–bug=bugid<br>feature需要添加关键字：–story=storyid</p>\n<p>样例1、</p>\n<p>[fixbug] [咨询] : 修复会话页面在iOS10上显示异常的问题</p>\n<p>样例2、</p>\n<p>[fixbug] [咨询] [tapd id: 1009080,1090900] : 修复以下bug：</p>\n<p>1.修复会话页面在iOS10上显示异常的问题</p>\n<p>2.修复tabbarItem小红点显示逻辑不正确bug</p>\n<p>3.修复navigationbar高度不正确的问题</p>\n<p>样例3、</p>\n<p>[feature] [登陆] : 导入微信SDK，实现微信登陆</p>\n<p>样例4、</p>\n<p>[optimize] [工程配置] : 增加会话创建失败后的重连，降低失败概率</p>\n<p>样例5、</p>\n<p>[merge] : Merge branch ‘releaseV0.2.0’ into ‘develop’</p>\n"},{"_content":"Debugger commands:\n  apropos           -- List debugger commands related to a word or subject.\n  breakpoint        -- Commands for operating on breakpoints (see 'help b' for shorthand.)\n  bugreport         -- Commands for creating domain-specific bug reports.\n  command           -- Commands for managing custom LLDB commands.\n  disassemble       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  expression        -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  frame             -- Commands for selecting and examing the current thread's stack frames.\n  gdb-remote        -- Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.\n  gui               -- Switch into the curses based GUI mode.\n  help              -- Show a list of all debugger commands, or give details about a specific command.\n  kdp-remote        -- Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.\n  language          -- Commands specific to a source language.\n  log               -- Commands controlling LLDB internal logging.\n  memory            -- Commands for operating on memory in the current target process.\n  platform          -- Commands to manage and create platforms.\n  plugin            -- Commands for managing LLDB plugins.\n  process           -- Commands for interacting with processes on the current platform.\n  quit              -- Quit the LLDB debugger.\n  register          -- Commands to access registers for the current thread and stack frame.\n  script            -- Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.\n  settings          -- Commands for managing LLDB settings.\n  source            -- Commands for examining source code described by debug information for the current target process.\n  statistics        -- Print statistics about a debugging session\n  target            -- Commands for operating on debugger targets.\n  thread            -- Commands for operating on one or more threads in the current process.\n  type              -- Commands for operating on the type system.\n  version           -- Show the LLDB debugger version.\n  watchpoint        -- Commands for operating on watchpoints.\nCurrent command abbreviations (type 'help command alias' for more info):\n  add-dsym  -- Add a debug symbol file to one of the target's current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.\n  attach    -- Attach to process by ID or name.\n  b         -- Set a breakpoint using one of several shorthand formats.\n  bt        -- Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.\n  c         -- Continue execution of all threads in the current process.\n  call      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  continue  -- Continue execution of all threads in the current process.\n  detach    -- Detach from the current target process.\n  di        -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  dis       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  display   -- Evaluate an expression at every stop (see 'help target stop-hook'.)\n  down      -- Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  env       -- Shorthand for viewing and setting environment variables.\n  exit      -- Quit the LLDB debugger.\n  f         -- Select the current stack frame by index from within the current thread (see 'thread backtrace'.)\n  file      -- Create a target using the argument as the main executable.\n  finish    -- Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.\n  image     -- Commands for accessing information for one or more target modules.\n  j         -- Set the program counter to a new address.\n  jump      -- Set the program counter to a new address.\n  kill      -- Terminate the current target process.\n  l         -- List relevant source code using one of several shorthand formats.\n  list      -- List relevant source code using one of several shorthand formats.\n  n         -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  next      -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  nexti     -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  ni        -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  p         -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  parray    -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  po        -- Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type's author.\n  poarray   -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  print     -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  q         -- Quit the LLDB debugger.\n  r         -- Launch the executable in the debugger.\n  rbreak    -- Sets a breakpoint or set of breakpoints in the executable.\n  repl      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  run       -- Launch the executable in the debugger.\n  s         -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  si        -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  sif       -- Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.\n  step      -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  stepi     -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  t         -- Change the currently selected thread.\n  tbreak    -- Set a one-shot breakpoint using one of several shorthand formats.\n  undisplay -- Stop displaying expression at every stop (specified by stop-hook index.)\n  up        -- Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  v         -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  var       -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  vo        -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  x         -- Read from the memory of the current target process.\nFor more information on any command, type 'help <command-name>'.","source":"_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/LLDB.md","raw":"Debugger commands:\n  apropos           -- List debugger commands related to a word or subject.\n  breakpoint        -- Commands for operating on breakpoints (see 'help b' for shorthand.)\n  bugreport         -- Commands for creating domain-specific bug reports.\n  command           -- Commands for managing custom LLDB commands.\n  disassemble       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  expression        -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  frame             -- Commands for selecting and examing the current thread's stack frames.\n  gdb-remote        -- Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.\n  gui               -- Switch into the curses based GUI mode.\n  help              -- Show a list of all debugger commands, or give details about a specific command.\n  kdp-remote        -- Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.\n  language          -- Commands specific to a source language.\n  log               -- Commands controlling LLDB internal logging.\n  memory            -- Commands for operating on memory in the current target process.\n  platform          -- Commands to manage and create platforms.\n  plugin            -- Commands for managing LLDB plugins.\n  process           -- Commands for interacting with processes on the current platform.\n  quit              -- Quit the LLDB debugger.\n  register          -- Commands to access registers for the current thread and stack frame.\n  script            -- Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.\n  settings          -- Commands for managing LLDB settings.\n  source            -- Commands for examining source code described by debug information for the current target process.\n  statistics        -- Print statistics about a debugging session\n  target            -- Commands for operating on debugger targets.\n  thread            -- Commands for operating on one or more threads in the current process.\n  type              -- Commands for operating on the type system.\n  version           -- Show the LLDB debugger version.\n  watchpoint        -- Commands for operating on watchpoints.\nCurrent command abbreviations (type 'help command alias' for more info):\n  add-dsym  -- Add a debug symbol file to one of the target's current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.\n  attach    -- Attach to process by ID or name.\n  b         -- Set a breakpoint using one of several shorthand formats.\n  bt        -- Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.\n  c         -- Continue execution of all threads in the current process.\n  call      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  continue  -- Continue execution of all threads in the current process.\n  detach    -- Detach from the current target process.\n  di        -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  dis       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  display   -- Evaluate an expression at every stop (see 'help target stop-hook'.)\n  down      -- Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  env       -- Shorthand for viewing and setting environment variables.\n  exit      -- Quit the LLDB debugger.\n  f         -- Select the current stack frame by index from within the current thread (see 'thread backtrace'.)\n  file      -- Create a target using the argument as the main executable.\n  finish    -- Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.\n  image     -- Commands for accessing information for one or more target modules.\n  j         -- Set the program counter to a new address.\n  jump      -- Set the program counter to a new address.\n  kill      -- Terminate the current target process.\n  l         -- List relevant source code using one of several shorthand formats.\n  list      -- List relevant source code using one of several shorthand formats.\n  n         -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  next      -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  nexti     -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  ni        -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  p         -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  parray    -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  po        -- Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type's author.\n  poarray   -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  print     -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  q         -- Quit the LLDB debugger.\n  r         -- Launch the executable in the debugger.\n  rbreak    -- Sets a breakpoint or set of breakpoints in the executable.\n  repl      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  run       -- Launch the executable in the debugger.\n  s         -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  si        -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  sif       -- Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.\n  step      -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  stepi     -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  t         -- Change the currently selected thread.\n  tbreak    -- Set a one-shot breakpoint using one of several shorthand formats.\n  undisplay -- Stop displaying expression at every stop (specified by stop-hook index.)\n  up        -- Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  v         -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  var       -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  vo        -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  x         -- Read from the memory of the current target process.\nFor more information on any command, type 'help <command-name>'.","slug":"iOS学习笔记/iOS系统学习/iOS之开发工具/LLDB","published":1,"date":"2019-06-14T08:59:29.000Z","updated":"2019-06-14T08:59:29.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgji001w8n7u0liacgqf","content":"<p>Debugger commands:<br>  apropos           – List debugger commands related to a word or subject.<br>  breakpoint        – Commands for operating on breakpoints (see ‘help b’ for shorthand.)<br>  bugreport         – Commands for creating domain-specific bug reports.<br>  command           – Commands for managing custom LLDB commands.<br>  disassemble       – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br>  expression        – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  frame             – Commands for selecting and examing the current thread’s stack frames.<br>  gdb-remote        – Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.<br>  gui               – Switch into the curses based GUI mode.<br>  help              – Show a list of all debugger commands, or give details about a specific command.<br>  kdp-remote        – Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.<br>  language          – Commands specific to a source language.<br>  log               – Commands controlling LLDB internal logging.<br>  memory            – Commands for operating on memory in the current target process.<br>  platform          – Commands to manage and create platforms.<br>  plugin            – Commands for managing LLDB plugins.<br>  process           – Commands for interacting with processes on the current platform.<br>  quit              – Quit the LLDB debugger.<br>  register          – Commands to access registers for the current thread and stack frame.<br>  script            – Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.<br>  settings          – Commands for managing LLDB settings.<br>  source            – Commands for examining source code described by debug information for the current target process.<br>  statistics        – Print statistics about a debugging session<br>  target            – Commands for operating on debugger targets.<br>  thread            – Commands for operating on one or more threads in the current process.<br>  type              – Commands for operating on the type system.<br>  version           – Show the LLDB debugger version.<br>  watchpoint        – Commands for operating on watchpoints.<br>Current command abbreviations (type ‘help command alias’ for more info):<br>  add-dsym  – Add a debug symbol file to one of the target’s current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.<br>  attach    – Attach to process by ID or name.<br>  b         – Set a breakpoint using one of several shorthand formats.<br>  bt        – Show the current thread’s call stack.  Any numeric argument displays at most that many frames.  The argument ‘all’ displays all threads.<br>  c         – Continue execution of all threads in the current process.<br>  call      – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  continue  – Continue execution of all threads in the current process.<br>  detach    – Detach from the current target process.<br>  di        – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br>  dis       – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br>  display   – Evaluate an expression at every stop (see ‘help target stop-hook’.)<br>  down      – Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.<br>  env       – Shorthand for viewing and setting environment variables.<br>  exit      – Quit the LLDB debugger.<br>  f         – Select the current stack frame by index from within the current thread (see ‘thread backtrace’.)<br>  file      – Create a target using the argument as the main executable.<br>  finish    – Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.<br>  image     – Commands for accessing information for one or more target modules.<br>  j         – Set the program counter to a new address.<br>  jump      – Set the program counter to a new address.<br>  kill      – Terminate the current target process.<br>  l         – List relevant source code using one of several shorthand formats.<br>  list      – List relevant source code using one of several shorthand formats.<br>  n         – Source level single step, stepping over calls.  Defaults to current thread unless specified.<br>  next      – Source level single step, stepping over calls.  Defaults to current thread unless specified.<br>  nexti     – Instruction level single step, stepping over calls.  Defaults to current thread unless specified.<br>  ni        – Instruction level single step, stepping over calls.  Defaults to current thread unless specified.<br>  p         – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  parray    – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  po        – Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type’s author.<br>  poarray   – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  print     – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  q         – Quit the LLDB debugger.<br>  r         – Launch the executable in the debugger.<br>  rbreak    – Sets a breakpoint or set of breakpoints in the executable.<br>  repl      – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  run       – Launch the executable in the debugger.<br>  s         – Source level single step, stepping into calls.  Defaults to current thread unless specified.<br>  si        – Instruction level single step, stepping into calls.  Defaults to current thread unless specified.<br>  sif       – Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.<br>  step      – Source level single step, stepping into calls.  Defaults to current thread unless specified.<br>  stepi     – Instruction level single step, stepping into calls.  Defaults to current thread unless specified.<br>  t         – Change the currently selected thread.<br>  tbreak    – Set a one-shot breakpoint using one of several shorthand formats.<br>  undisplay – Stop displaying expression at every stop (specified by stop-hook index.)<br>  up        – Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.<br>  v         – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br>               ‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br>               instead.<br>               It is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br>               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br>  var       – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br>               ‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br>               instead.<br>               It is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br>               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br>  vo        – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br>               ‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br>               instead.<br>               It is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br>               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br>  x         – Read from the memory of the current target process.<br>For more information on any command, type ‘help <command-name>‘.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Debugger commands:<br>  apropos           – List debugger commands related to a word or subject.<br>  breakpoint        – Commands for operating on breakpoints (see ‘help b’ for shorthand.)<br>  bugreport         – Commands for creating domain-specific bug reports.<br>  command           – Commands for managing custom LLDB commands.<br>  disassemble       – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br>  expression        – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  frame             – Commands for selecting and examing the current thread’s stack frames.<br>  gdb-remote        – Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.<br>  gui               – Switch into the curses based GUI mode.<br>  help              – Show a list of all debugger commands, or give details about a specific command.<br>  kdp-remote        – Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.<br>  language          – Commands specific to a source language.<br>  log               – Commands controlling LLDB internal logging.<br>  memory            – Commands for operating on memory in the current target process.<br>  platform          – Commands to manage and create platforms.<br>  plugin            – Commands for managing LLDB plugins.<br>  process           – Commands for interacting with processes on the current platform.<br>  quit              – Quit the LLDB debugger.<br>  register          – Commands to access registers for the current thread and stack frame.<br>  script            – Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.<br>  settings          – Commands for managing LLDB settings.<br>  source            – Commands for examining source code described by debug information for the current target process.<br>  statistics        – Print statistics about a debugging session<br>  target            – Commands for operating on debugger targets.<br>  thread            – Commands for operating on one or more threads in the current process.<br>  type              – Commands for operating on the type system.<br>  version           – Show the LLDB debugger version.<br>  watchpoint        – Commands for operating on watchpoints.<br>Current command abbreviations (type ‘help command alias’ for more info):<br>  add-dsym  – Add a debug symbol file to one of the target’s current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.<br>  attach    – Attach to process by ID or name.<br>  b         – Set a breakpoint using one of several shorthand formats.<br>  bt        – Show the current thread’s call stack.  Any numeric argument displays at most that many frames.  The argument ‘all’ displays all threads.<br>  c         – Continue execution of all threads in the current process.<br>  call      – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  continue  – Continue execution of all threads in the current process.<br>  detach    – Detach from the current target process.<br>  di        – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br>  dis       – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br>  display   – Evaluate an expression at every stop (see ‘help target stop-hook’.)<br>  down      – Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.<br>  env       – Shorthand for viewing and setting environment variables.<br>  exit      – Quit the LLDB debugger.<br>  f         – Select the current stack frame by index from within the current thread (see ‘thread backtrace’.)<br>  file      – Create a target using the argument as the main executable.<br>  finish    – Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.<br>  image     – Commands for accessing information for one or more target modules.<br>  j         – Set the program counter to a new address.<br>  jump      – Set the program counter to a new address.<br>  kill      – Terminate the current target process.<br>  l         – List relevant source code using one of several shorthand formats.<br>  list      – List relevant source code using one of several shorthand formats.<br>  n         – Source level single step, stepping over calls.  Defaults to current thread unless specified.<br>  next      – Source level single step, stepping over calls.  Defaults to current thread unless specified.<br>  nexti     – Instruction level single step, stepping over calls.  Defaults to current thread unless specified.<br>  ni        – Instruction level single step, stepping over calls.  Defaults to current thread unless specified.<br>  p         – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  parray    – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  po        – Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type’s author.<br>  poarray   – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  print     – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  q         – Quit the LLDB debugger.<br>  r         – Launch the executable in the debugger.<br>  rbreak    – Sets a breakpoint or set of breakpoints in the executable.<br>  repl      – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  run       – Launch the executable in the debugger.<br>  s         – Source level single step, stepping into calls.  Defaults to current thread unless specified.<br>  si        – Instruction level single step, stepping into calls.  Defaults to current thread unless specified.<br>  sif       – Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.<br>  step      – Source level single step, stepping into calls.  Defaults to current thread unless specified.<br>  stepi     – Instruction level single step, stepping into calls.  Defaults to current thread unless specified.<br>  t         – Change the currently selected thread.<br>  tbreak    – Set a one-shot breakpoint using one of several shorthand formats.<br>  undisplay – Stop displaying expression at every stop (specified by stop-hook index.)<br>  up        – Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.<br>  v         – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br>               ‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br>               instead.<br>               It is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br>               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br>  var       – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br>               ‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br>               instead.<br>               It is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br>               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br>  vo        – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br>               ‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br>               instead.<br>               It is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br>               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br>  x         – Read from the memory of the current target process.<br>For more information on any command, type ‘help <command-name>‘.</p>\n"},{"_content":"pod 公开库\n1、添加、删除索引库\n  pod repo add WTSpecs https://coding.net/wtlucky/WTSpecs.git\n  pod repo remove WTSpecs\n\n2、创建pod库\n  pod lib create podTestLibrary\n  2.1 添加到远程\n    git add .\n    git commit -s -m \"Initial Commit of Library\"\n    git remote add origin git@coding.net:wtlucky/podTestLibrary.git\n    git push origin master\n  2.2 打tag\n    git tag -a 0.1.0 -m \"first release\"\n    git push --tags / git push origin tag 0.1.0\n\n3、修改podspec文件\n\n4、检验pod库、podspec\n  pod lib lint\n\n5、提交pod库\n  pod repo push WTSpecs PodTestLibrary.podspec  #前面是本地Repo名字 后面是podspec名字\n\n6、检索pod库\n  pod search PodTestLibrary\n\n7、使用pod库\n  pod 'PodTestLibrary', '~> 0.1.0'\n  \n私有库\n1、检验\n  pod lib lint --allow-warnings --sources=https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git\n\n2、远程检验\n  pod spec lint --allow-warnings --sources=https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git\n\n3、提交\n  pod repo push sumian sm_ios_base.podspec --allow-warnings --sources='http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs'\n\n\n# pod 命令\nUsage:\n\n    $ pod COMMAND\n\n      CocoaPods, the Cocoa library package manager.\n\nCommands:\n\n    + cache         Manipulate the CocoaPods cache\n    + deintegrate   Deintegrate CocoaPods from your project\n    + env           Display pod environment\n    + init          Generate a Podfile for the current directory\n    + install       Install project dependencies according to versions from a\n                    Podfile.lock\n    + ipc           Inter-process communication\n    + lib           Develop pods\n    + list          List pods\n    + outdated      Show outdated project dependencies\n    + package       Package a podspec into a static library.\n    + plugins       Show available CocoaPods plugins\n    + repo          Manage spec-repositories\n    + search        Search for pods\n    + setup         Setup the CocoaPods environment\n    + spec          Manage pod specs\n    + trunk         Interact with the CocoaPods API (e.g. publishing new specs)\n    + try           Try a Pod!\n    + update        Update outdated project dependencies and create new Podfile.lock\n\nOptions:\n\n    --silent        Show nothing\n    --version       Show the version of the tool\n    --verbose       Show more debugging information\n    --no-ansi       Show output without ANSI codes\n    --help          Show help banner of specified command\n\n# pod lib lint 命令\nUsage:\n\n    $ pod lib lint\n\n      Validates the Pod using the files in the working directory.\n\nOptions:\n\n    --quick                                           Lint skips checks that would\n                                                      require to download and build\n                                                      the spec\n    --allow-warnings                                  Lint validates even if warnings\n                                                      are present\n    --subspec=NAME                                    Lint validates only the given\n                                                      subspec\n    --no-subspecs                                     Lint skips validation of\n                                                      subspecs\n    --no-clean                                        Lint leaves the build directory\n                                                      intact for inspection\n    --fail-fast                                       Lint stops on the first failing\n                                                      platform or subspec\n    --use-libraries                                   Lint uses static libraries to\n                                                      install the spec\n    --use-modular-headers                             Lint uses modular headers during\n                                                      installation\n    --sources=https://github.com/artsy/Specs,master   The sources from which to pull\n                                                      dependent pods (defaults to\n                                                      https://github.com/CocoaPods/Specs.git).\n                                                      Multiple sources must be\n                                                      comma-delimited.\n    --platforms=ios,macos                             Lint against specific\n                                                      platforms(defaults to all\n                                                      platforms supported by the\n                                                      podspec).Multiple platforms must\n                                                      be comma-delimited\n    --private                                         Lint skips checks that apply\n                                                      only to public specs\n    --swift-version=VERSION                           The SWIFT_VERSION that should be\n                                                      used to lint the spec. This\n                                                      takes precedence over a\n                                                      .swift-version file.\n    --skip-import-validation                          Lint skips validating that the\n                                                      pod can be imported\n    --skip-tests                                      Lint skips building and running\n                                                      tests during validation\n    --silent                                          Show nothing\n    --verbose                                         Show more debugging information\n    --no-ansi                                         Show output without ANSI codes\n    --help                                            Show help banner of specified\n                                                      command\n\n\n  pod 修改工程配置\n  ```\n  post_install do |installer_representation|\n\n      installer_representation.pods_project.targets.each do |target|\n          target.build_configurations.each do |config|\n              #去警告\n              config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'\n              #判断scheme\n              if config.name.include?(\"SchemeAppTest_Release\")\n                  #添加scheme对应的预编译宏\n                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTRELEASE=3'\n              end\n              if config.name.include?(\"SchemeAppTest_Debug\")\n                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTDEBUG=2'\n                  #指定scheme的调试模式可见变量\n                  config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'\n                  #某些情况由于编译器不支持无法debug（可选）\n                  config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'\n              end\n           end\n      end    \n  end\n  ```\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/cocoapod 库.md","raw":"pod 公开库\n1、添加、删除索引库\n  pod repo add WTSpecs https://coding.net/wtlucky/WTSpecs.git\n  pod repo remove WTSpecs\n\n2、创建pod库\n  pod lib create podTestLibrary\n  2.1 添加到远程\n    git add .\n    git commit -s -m \"Initial Commit of Library\"\n    git remote add origin git@coding.net:wtlucky/podTestLibrary.git\n    git push origin master\n  2.2 打tag\n    git tag -a 0.1.0 -m \"first release\"\n    git push --tags / git push origin tag 0.1.0\n\n3、修改podspec文件\n\n4、检验pod库、podspec\n  pod lib lint\n\n5、提交pod库\n  pod repo push WTSpecs PodTestLibrary.podspec  #前面是本地Repo名字 后面是podspec名字\n\n6、检索pod库\n  pod search PodTestLibrary\n\n7、使用pod库\n  pod 'PodTestLibrary', '~> 0.1.0'\n  \n私有库\n1、检验\n  pod lib lint --allow-warnings --sources=https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git\n\n2、远程检验\n  pod spec lint --allow-warnings --sources=https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git\n\n3、提交\n  pod repo push sumian sm_ios_base.podspec --allow-warnings --sources='http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs'\n\n\n# pod 命令\nUsage:\n\n    $ pod COMMAND\n\n      CocoaPods, the Cocoa library package manager.\n\nCommands:\n\n    + cache         Manipulate the CocoaPods cache\n    + deintegrate   Deintegrate CocoaPods from your project\n    + env           Display pod environment\n    + init          Generate a Podfile for the current directory\n    + install       Install project dependencies according to versions from a\n                    Podfile.lock\n    + ipc           Inter-process communication\n    + lib           Develop pods\n    + list          List pods\n    + outdated      Show outdated project dependencies\n    + package       Package a podspec into a static library.\n    + plugins       Show available CocoaPods plugins\n    + repo          Manage spec-repositories\n    + search        Search for pods\n    + setup         Setup the CocoaPods environment\n    + spec          Manage pod specs\n    + trunk         Interact with the CocoaPods API (e.g. publishing new specs)\n    + try           Try a Pod!\n    + update        Update outdated project dependencies and create new Podfile.lock\n\nOptions:\n\n    --silent        Show nothing\n    --version       Show the version of the tool\n    --verbose       Show more debugging information\n    --no-ansi       Show output without ANSI codes\n    --help          Show help banner of specified command\n\n# pod lib lint 命令\nUsage:\n\n    $ pod lib lint\n\n      Validates the Pod using the files in the working directory.\n\nOptions:\n\n    --quick                                           Lint skips checks that would\n                                                      require to download and build\n                                                      the spec\n    --allow-warnings                                  Lint validates even if warnings\n                                                      are present\n    --subspec=NAME                                    Lint validates only the given\n                                                      subspec\n    --no-subspecs                                     Lint skips validation of\n                                                      subspecs\n    --no-clean                                        Lint leaves the build directory\n                                                      intact for inspection\n    --fail-fast                                       Lint stops on the first failing\n                                                      platform or subspec\n    --use-libraries                                   Lint uses static libraries to\n                                                      install the spec\n    --use-modular-headers                             Lint uses modular headers during\n                                                      installation\n    --sources=https://github.com/artsy/Specs,master   The sources from which to pull\n                                                      dependent pods (defaults to\n                                                      https://github.com/CocoaPods/Specs.git).\n                                                      Multiple sources must be\n                                                      comma-delimited.\n    --platforms=ios,macos                             Lint against specific\n                                                      platforms(defaults to all\n                                                      platforms supported by the\n                                                      podspec).Multiple platforms must\n                                                      be comma-delimited\n    --private                                         Lint skips checks that apply\n                                                      only to public specs\n    --swift-version=VERSION                           The SWIFT_VERSION that should be\n                                                      used to lint the spec. This\n                                                      takes precedence over a\n                                                      .swift-version file.\n    --skip-import-validation                          Lint skips validating that the\n                                                      pod can be imported\n    --skip-tests                                      Lint skips building and running\n                                                      tests during validation\n    --silent                                          Show nothing\n    --verbose                                         Show more debugging information\n    --no-ansi                                         Show output without ANSI codes\n    --help                                            Show help banner of specified\n                                                      command\n\n\n  pod 修改工程配置\n  ```\n  post_install do |installer_representation|\n\n      installer_representation.pods_project.targets.each do |target|\n          target.build_configurations.each do |config|\n              #去警告\n              config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'\n              #判断scheme\n              if config.name.include?(\"SchemeAppTest_Release\")\n                  #添加scheme对应的预编译宏\n                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTRELEASE=3'\n              end\n              if config.name.include?(\"SchemeAppTest_Debug\")\n                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTDEBUG=2'\n                  #指定scheme的调试模式可见变量\n                  config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'\n                  #某些情况由于编译器不支持无法debug（可选）\n                  config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'\n              end\n           end\n      end    \n  end\n  ```\n","slug":"iOS学习笔记/iOS系统学习/iOS之开发工具/cocoapod 库","published":1,"date":"2019-05-15T04:04:41.000Z","updated":"2019-06-18T10:21:06.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgji001x8n7ufkqigz5f","content":"<p>pod 公开库<br>1、添加、删除索引库<br>  pod repo add WTSpecs <a href=\"https://coding.net/wtlucky/WTSpecs.git\">https://coding.net/wtlucky/WTSpecs.git</a><br>  pod repo remove WTSpecs</p>\n<p>2、创建pod库<br>  pod lib create podTestLibrary<br>  2.1 添加到远程<br>    git add .<br>    git commit -s -m “Initial Commit of Library”<br>    git remote add origin <a href=\"mailto:&#103;&#105;&#116;&#x40;&#99;&#x6f;&#100;&#105;&#110;&#x67;&#46;&#x6e;&#x65;&#116;\">&#103;&#105;&#116;&#x40;&#99;&#x6f;&#100;&#105;&#110;&#x67;&#46;&#x6e;&#x65;&#116;</a>:wtlucky/podTestLibrary.git<br>    git push origin master<br>  2.2 打tag<br>    git tag -a 0.1.0 -m “first release”<br>    git push –tags / git push origin tag 0.1.0</p>\n<p>3、修改podspec文件</p>\n<p>4、检验pod库、podspec<br>  pod lib lint</p>\n<p>5、提交pod库<br>  pod repo push WTSpecs PodTestLibrary.podspec  #前面是本地Repo名字 后面是podspec名字</p>\n<p>6、检索pod库<br>  pod search PodTestLibrary</p>\n<p>7、使用pod库<br>  pod ‘PodTestLibrary’, ‘~&gt; 0.1.0’</p>\n<p>私有库<br>1、检验<br>  pod lib lint –allow-warnings –sources=<a href=\"https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git\">https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git</a></p>\n<p>2、远程检验<br>  pod spec lint –allow-warnings –sources=<a href=\"https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git\">https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git</a></p>\n<p>3、提交<br>  pod repo push sumian sm_ios_base.podspec –allow-warnings –sources=’<a href=\"http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs&#39;\">http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs&#39;</a></p>\n<h1 id=\"pod-命令\"><a href=\"#pod-命令\" class=\"headerlink\" title=\"pod 命令\"></a>pod 命令</h1><p>Usage:</p>\n<pre><code>$ pod COMMAND\n\n  CocoaPods, the Cocoa library package manager.\n</code></pre>\n<p>Commands:</p>\n<pre><code>+ cache         Manipulate the CocoaPods cache\n+ deintegrate   Deintegrate CocoaPods from your project\n+ env           Display pod environment\n+ init          Generate a Podfile for the current directory\n+ install       Install project dependencies according to versions from a\n                Podfile.lock\n+ ipc           Inter-process communication\n+ lib           Develop pods\n+ list          List pods\n+ outdated      Show outdated project dependencies\n+ package       Package a podspec into a static library.\n+ plugins       Show available CocoaPods plugins\n+ repo          Manage spec-repositories\n+ search        Search for pods\n+ setup         Setup the CocoaPods environment\n+ spec          Manage pod specs\n+ trunk         Interact with the CocoaPods API (e.g. publishing new specs)\n+ try           Try a Pod!\n+ update        Update outdated project dependencies and create new Podfile.lock\n</code></pre>\n<p>Options:</p>\n<pre><code>--silent        Show nothing\n--version       Show the version of the tool\n--verbose       Show more debugging information\n--no-ansi       Show output without ANSI codes\n--help          Show help banner of specified command\n</code></pre>\n<h1 id=\"pod-lib-lint-命令\"><a href=\"#pod-lib-lint-命令\" class=\"headerlink\" title=\"pod lib lint 命令\"></a>pod lib lint 命令</h1><p>Usage:</p>\n<pre><code>$ pod lib lint\n\n  Validates the Pod using the files in the working directory.\n</code></pre>\n<p>Options:</p>\n<pre><code>--quick                                           Lint skips checks that would\n                                                  require to download and build\n                                                  the spec\n--allow-warnings                                  Lint validates even if warnings\n                                                  are present\n--subspec=NAME                                    Lint validates only the given\n                                                  subspec\n--no-subspecs                                     Lint skips validation of\n                                                  subspecs\n--no-clean                                        Lint leaves the build directory\n                                                  intact for inspection\n--fail-fast                                       Lint stops on the first failing\n                                                  platform or subspec\n--use-libraries                                   Lint uses static libraries to\n                                                  install the spec\n--use-modular-headers                             Lint uses modular headers during\n                                                  installation\n--sources=https://github.com/artsy/Specs,master   The sources from which to pull\n                                                  dependent pods (defaults to\n                                                  https://github.com/CocoaPods/Specs.git).\n                                                  Multiple sources must be\n                                                  comma-delimited.\n--platforms=ios,macos                             Lint against specific\n                                                  platforms(defaults to all\n                                                  platforms supported by the\n                                                  podspec).Multiple platforms must\n                                                  be comma-delimited\n--private                                         Lint skips checks that apply\n                                                  only to public specs\n--swift-version=VERSION                           The SWIFT_VERSION that should be\n                                                  used to lint the spec. This\n                                                  takes precedence over a\n                                                  .swift-version file.\n--skip-import-validation                          Lint skips validating that the\n                                                  pod can be imported\n--skip-tests                                      Lint skips building and running\n                                                  tests during validation\n--silent                                          Show nothing\n--verbose                                         Show more debugging information\n--no-ansi                                         Show output without ANSI codes\n--help                                            Show help banner of specified\n                                                  command\n</code></pre>\n<p>  pod 修改工程配置<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install do |installer_representation|</span><br><span class=\"line\"></span><br><span class=\"line\">    installer_representation.pods_project.targets.each do |target|</span><br><span class=\"line\">        target.build_configurations.each do |config|</span><br><span class=\"line\">            #去警告</span><br><span class=\"line\">            config.build_settings[&#39;GCC_WARN_INHIBIT_ALL_WARNINGS&#39;] &#x3D; &#39;YES&#39;</span><br><span class=\"line\">            #判断scheme</span><br><span class=\"line\">            if config.name.include?(&quot;SchemeAppTest_Release&quot;)</span><br><span class=\"line\">                #添加scheme对应的预编译宏</span><br><span class=\"line\">                config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] ||&#x3D; [&#39;$(inherited)&#39;]</span><br><span class=\"line\">                config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] &lt;&lt; &#39;SCHEMEAPPTESTRELEASE&#x3D;3&#39;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            if config.name.include?(&quot;SchemeAppTest_Debug&quot;)</span><br><span class=\"line\">                config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] ||&#x3D; [&#39;$(inherited)&#39;]</span><br><span class=\"line\">                config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] &lt;&lt; &#39;SCHEMEAPPTESTDEBUG&#x3D;2&#39;</span><br><span class=\"line\">                #指定scheme的调试模式可见变量</span><br><span class=\"line\">                config.build_settings[&#39;GCC_OPTIMIZATION_LEVEL&#39;] &#x3D; &#39;0&#39;</span><br><span class=\"line\">                #某些情况由于编译器不支持无法debug（可选）</span><br><span class=\"line\">                config.build_settings[&#39;ONLY_ACTIVE_ARCH&#39;] &#x3D; &#39;YES&#39;</span><br><span class=\"line\">            end</span><br><span class=\"line\">         end</span><br><span class=\"line\">    end    </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>pod 公开库<br>1、添加、删除索引库<br>  pod repo add WTSpecs <a href=\"https://coding.net/wtlucky/WTSpecs.git\">https://coding.net/wtlucky/WTSpecs.git</a><br>  pod repo remove WTSpecs</p>\n<p>2、创建pod库<br>  pod lib create podTestLibrary<br>  2.1 添加到远程<br>    git add .<br>    git commit -s -m “Initial Commit of Library”<br>    git remote add origin <a href=\"mailto:&#103;&#105;&#116;&#x40;&#99;&#x6f;&#100;&#105;&#110;&#x67;&#46;&#x6e;&#x65;&#116;\">&#103;&#105;&#116;&#x40;&#99;&#x6f;&#100;&#105;&#110;&#x67;&#46;&#x6e;&#x65;&#116;</a>:wtlucky/podTestLibrary.git<br>    git push origin master<br>  2.2 打tag<br>    git tag -a 0.1.0 -m “first release”<br>    git push –tags / git push origin tag 0.1.0</p>\n<p>3、修改podspec文件</p>\n<p>4、检验pod库、podspec<br>  pod lib lint</p>\n<p>5、提交pod库<br>  pod repo push WTSpecs PodTestLibrary.podspec  #前面是本地Repo名字 后面是podspec名字</p>\n<p>6、检索pod库<br>  pod search PodTestLibrary</p>\n<p>7、使用pod库<br>  pod ‘PodTestLibrary’, ‘~&gt; 0.1.0’</p>\n<p>私有库<br>1、检验<br>  pod lib lint –allow-warnings –sources=<a href=\"https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git\">https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git</a></p>\n<p>2、远程检验<br>  pod spec lint –allow-warnings –sources=<a href=\"https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git\">https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git</a></p>\n<p>3、提交<br>  pod repo push sumian sm_ios_base.podspec –allow-warnings –sources=’<a href=\"http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs&#39;\">http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs&#39;</a></p>\n<h1 id=\"pod-命令\"><a href=\"#pod-命令\" class=\"headerlink\" title=\"pod 命令\"></a>pod 命令</h1><p>Usage:</p>\n<pre><code>$ pod COMMAND\n\n  CocoaPods, the Cocoa library package manager.\n</code></pre>\n<p>Commands:</p>\n<pre><code>+ cache         Manipulate the CocoaPods cache\n+ deintegrate   Deintegrate CocoaPods from your project\n+ env           Display pod environment\n+ init          Generate a Podfile for the current directory\n+ install       Install project dependencies according to versions from a\n                Podfile.lock\n+ ipc           Inter-process communication\n+ lib           Develop pods\n+ list          List pods\n+ outdated      Show outdated project dependencies\n+ package       Package a podspec into a static library.\n+ plugins       Show available CocoaPods plugins\n+ repo          Manage spec-repositories\n+ search        Search for pods\n+ setup         Setup the CocoaPods environment\n+ spec          Manage pod specs\n+ trunk         Interact with the CocoaPods API (e.g. publishing new specs)\n+ try           Try a Pod!\n+ update        Update outdated project dependencies and create new Podfile.lock\n</code></pre>\n<p>Options:</p>\n<pre><code>--silent        Show nothing\n--version       Show the version of the tool\n--verbose       Show more debugging information\n--no-ansi       Show output without ANSI codes\n--help          Show help banner of specified command\n</code></pre>\n<h1 id=\"pod-lib-lint-命令\"><a href=\"#pod-lib-lint-命令\" class=\"headerlink\" title=\"pod lib lint 命令\"></a>pod lib lint 命令</h1><p>Usage:</p>\n<pre><code>$ pod lib lint\n\n  Validates the Pod using the files in the working directory.\n</code></pre>\n<p>Options:</p>\n<pre><code>--quick                                           Lint skips checks that would\n                                                  require to download and build\n                                                  the spec\n--allow-warnings                                  Lint validates even if warnings\n                                                  are present\n--subspec=NAME                                    Lint validates only the given\n                                                  subspec\n--no-subspecs                                     Lint skips validation of\n                                                  subspecs\n--no-clean                                        Lint leaves the build directory\n                                                  intact for inspection\n--fail-fast                                       Lint stops on the first failing\n                                                  platform or subspec\n--use-libraries                                   Lint uses static libraries to\n                                                  install the spec\n--use-modular-headers                             Lint uses modular headers during\n                                                  installation\n--sources=https://github.com/artsy/Specs,master   The sources from which to pull\n                                                  dependent pods (defaults to\n                                                  https://github.com/CocoaPods/Specs.git).\n                                                  Multiple sources must be\n                                                  comma-delimited.\n--platforms=ios,macos                             Lint against specific\n                                                  platforms(defaults to all\n                                                  platforms supported by the\n                                                  podspec).Multiple platforms must\n                                                  be comma-delimited\n--private                                         Lint skips checks that apply\n                                                  only to public specs\n--swift-version=VERSION                           The SWIFT_VERSION that should be\n                                                  used to lint the spec. This\n                                                  takes precedence over a\n                                                  .swift-version file.\n--skip-import-validation                          Lint skips validating that the\n                                                  pod can be imported\n--skip-tests                                      Lint skips building and running\n                                                  tests during validation\n--silent                                          Show nothing\n--verbose                                         Show more debugging information\n--no-ansi                                         Show output without ANSI codes\n--help                                            Show help banner of specified\n                                                  command\n</code></pre>\n<p>  pod 修改工程配置<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install do |installer_representation|</span><br><span class=\"line\"></span><br><span class=\"line\">    installer_representation.pods_project.targets.each do |target|</span><br><span class=\"line\">        target.build_configurations.each do |config|</span><br><span class=\"line\">            #去警告</span><br><span class=\"line\">            config.build_settings[&#39;GCC_WARN_INHIBIT_ALL_WARNINGS&#39;] &#x3D; &#39;YES&#39;</span><br><span class=\"line\">            #判断scheme</span><br><span class=\"line\">            if config.name.include?(&quot;SchemeAppTest_Release&quot;)</span><br><span class=\"line\">                #添加scheme对应的预编译宏</span><br><span class=\"line\">                config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] ||&#x3D; [&#39;$(inherited)&#39;]</span><br><span class=\"line\">                config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] &lt;&lt; &#39;SCHEMEAPPTESTRELEASE&#x3D;3&#39;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            if config.name.include?(&quot;SchemeAppTest_Debug&quot;)</span><br><span class=\"line\">                config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] ||&#x3D; [&#39;$(inherited)&#39;]</span><br><span class=\"line\">                config.build_settings[&#39;GCC_PREPROCESSOR_DEFINITIONS&#39;] &lt;&lt; &#39;SCHEMEAPPTESTDEBUG&#x3D;2&#39;</span><br><span class=\"line\">                #指定scheme的调试模式可见变量</span><br><span class=\"line\">                config.build_settings[&#39;GCC_OPTIMIZATION_LEVEL&#39;] &#x3D; &#39;0&#39;</span><br><span class=\"line\">                #某些情况由于编译器不支持无法debug（可选）</span><br><span class=\"line\">                config.build_settings[&#39;ONLY_ACTIVE_ARCH&#39;] &#x3D; &#39;YES&#39;</span><br><span class=\"line\">            end</span><br><span class=\"line\">         end</span><br><span class=\"line\">    end    </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n"},{"_content":"[cocoapod 官网](https://guides.cocoapods.org/)\n\n1、cocoapod 之私有化仓库\n\n[iOS 私有化 pod](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)\n\n[Swift创建CocoaPod【转】](https://my.oschina.net/are1OfBlog/blog/488939)\n[Swift创建CocoaPod](https://www.raywenderlich.com/5823-how-to-create-a-cocoapod-in-swift)\n\n[Swift 如何建立自己的 CocoaPod 库](https://www.jianshu.com/p/777b0755480c)\n\n[模块化之路（cocoapod VS framework）](https://www.jianshu.com/p/9d49216682f4)\n\n2、cocoapod 之开源仓库","source":"_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/cocoapod.md","raw":"[cocoapod 官网](https://guides.cocoapods.org/)\n\n1、cocoapod 之私有化仓库\n\n[iOS 私有化 pod](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)\n\n[Swift创建CocoaPod【转】](https://my.oschina.net/are1OfBlog/blog/488939)\n[Swift创建CocoaPod](https://www.raywenderlich.com/5823-how-to-create-a-cocoapod-in-swift)\n\n[Swift 如何建立自己的 CocoaPod 库](https://www.jianshu.com/p/777b0755480c)\n\n[模块化之路（cocoapod VS framework）](https://www.jianshu.com/p/9d49216682f4)\n\n2、cocoapod 之开源仓库","slug":"iOS学习笔记/iOS系统学习/iOS之开发工具/cocoapod","published":1,"date":"2019-03-24T13:01:23.000Z","updated":"2019-04-11T13:03:23.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjj001y8n7u0oso8yst","content":"<p><a href=\"https://guides.cocoapods.org/\">cocoapod 官网</a></p>\n<p>1、cocoapod 之私有化仓库</p>\n<p><a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\">iOS 私有化 pod</a></p>\n<p><a href=\"https://my.oschina.net/are1OfBlog/blog/488939\">Swift创建CocoaPod【转】</a><br><a href=\"https://www.raywenderlich.com/5823-how-to-create-a-cocoapod-in-swift\">Swift创建CocoaPod</a></p>\n<p><a href=\"https://www.jianshu.com/p/777b0755480c\">Swift 如何建立自己的 CocoaPod 库</a></p>\n<p><a href=\"https://www.jianshu.com/p/9d49216682f4\">模块化之路（cocoapod VS framework）</a></p>\n<p>2、cocoapod 之开源仓库</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://guides.cocoapods.org/\">cocoapod 官网</a></p>\n<p>1、cocoapod 之私有化仓库</p>\n<p><a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\">iOS 私有化 pod</a></p>\n<p><a href=\"https://my.oschina.net/are1OfBlog/blog/488939\">Swift创建CocoaPod【转】</a><br><a href=\"https://www.raywenderlich.com/5823-how-to-create-a-cocoapod-in-swift\">Swift创建CocoaPod</a></p>\n<p><a href=\"https://www.jianshu.com/p/777b0755480c\">Swift 如何建立自己的 CocoaPod 库</a></p>\n<p><a href=\"https://www.jianshu.com/p/9d49216682f4\">模块化之路（cocoapod VS framework）</a></p>\n<p>2、cocoapod 之开源仓库</p>\n"},{"_content":"# 1、开发工具\n\n* 抓包工具：Charles\n* 快捷键工具：cheatsheet\n* 流程图工具：OmniGraffle\n* IPA安装工具：iTools\n* Applescript 编辑器：ScriptDebug\n* 翻墙工具：Lantern\n* 命令行工具：Terminal（平时要多用）\n* MarkDown编辑器：MacDown (免费的)\n* 代码编辑器：Sublime（收费）、Atom（开源免费）\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/iOS之开发工具.md","raw":"# 1、开发工具\n\n* 抓包工具：Charles\n* 快捷键工具：cheatsheet\n* 流程图工具：OmniGraffle\n* IPA安装工具：iTools\n* Applescript 编辑器：ScriptDebug\n* 翻墙工具：Lantern\n* 命令行工具：Terminal（平时要多用）\n* MarkDown编辑器：MacDown (免费的)\n* 代码编辑器：Sublime（收费）、Atom（开源免费）\n","slug":"iOS学习笔记/iOS系统学习/iOS之开发工具/iOS之开发工具","published":1,"date":"2019-03-24T13:01:23.000Z","updated":"2021-02-22T15:00:14.621Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjj001z8n7ueonjce3i","content":"<h1 id=\"1、开发工具\"><a href=\"#1、开发工具\" class=\"headerlink\" title=\"1、开发工具\"></a>1、开发工具</h1><ul>\n<li>抓包工具：Charles</li>\n<li>快捷键工具：cheatsheet</li>\n<li>流程图工具：OmniGraffle</li>\n<li>IPA安装工具：iTools</li>\n<li>Applescript 编辑器：ScriptDebug</li>\n<li>翻墙工具：Lantern</li>\n<li>命令行工具：Terminal（平时要多用）</li>\n<li>MarkDown编辑器：MacDown (免费的)</li>\n<li>代码编辑器：Sublime（收费）、Atom（开源免费）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1、开发工具\"><a href=\"#1、开发工具\" class=\"headerlink\" title=\"1、开发工具\"></a>1、开发工具</h1><ul>\n<li>抓包工具：Charles</li>\n<li>快捷键工具：cheatsheet</li>\n<li>流程图工具：OmniGraffle</li>\n<li>IPA安装工具：iTools</li>\n<li>Applescript 编辑器：ScriptDebug</li>\n<li>翻墙工具：Lantern</li>\n<li>命令行工具：Terminal（平时要多用）</li>\n<li>MarkDown编辑器：MacDown (免费的)</li>\n<li>代码编辑器：Sublime（收费）、Atom（开源免费）</li>\n</ul>\n"},{"_content":"监控插件库：\n\n1、CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】\n\n2、结构：core 层【必要功能】，base层【插件管理等】，应用层【APP】\n\n3、日志记录和显示模块\n\t日志级别【debug、info、warn、error】：（富文本呈现）\n\t模块日志【蓝牙、Moya、APP】\n\t启动/函数调用耗时等\n\t日志截获并传递给显示组件\n\n4、APP信息：\n\t环境，版本等\n\n5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）\n\t“小程序”（小进程，线程形式，尽量不阻塞业务功能）\n\t转场动画\n\n\n\n\n---------------------------------------------\n\na、权限集中管理；\n\nb、自动化【fastlane】\n\nc、pod管理【七鱼】\n\n\n---------------------------------------------\n\na、苹果登录；\n\nb、加解密；\n\nc、swiftUI；\n\nd、响应式：combine，RxSwift，PromiseKit·······\n\ne、服务器；\n\nf、Metal；\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之开发工具/监控插件库.md","raw":"监控插件库：\n\n1、CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】\n\n2、结构：core 层【必要功能】，base层【插件管理等】，应用层【APP】\n\n3、日志记录和显示模块\n\t日志级别【debug、info、warn、error】：（富文本呈现）\n\t模块日志【蓝牙、Moya、APP】\n\t启动/函数调用耗时等\n\t日志截获并传递给显示组件\n\n4、APP信息：\n\t环境，版本等\n\n5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）\n\t“小程序”（小进程，线程形式，尽量不阻塞业务功能）\n\t转场动画\n\n\n\n\n---------------------------------------------\n\na、权限集中管理；\n\nb、自动化【fastlane】\n\nc、pod管理【七鱼】\n\n\n---------------------------------------------\n\na、苹果登录；\n\nb、加解密；\n\nc、swiftUI；\n\nd、响应式：combine，RxSwift，PromiseKit·······\n\ne、服务器；\n\nf、Metal；\n","slug":"iOS学习笔记/iOS系统学习/iOS之开发工具/监控插件库","published":1,"date":"2019-06-20T04:41:04.000Z","updated":"2019-06-20T04:41:04.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjk00208n7u1tc3g34r","content":"<p>监控插件库：</p>\n<p>1、CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】</p>\n<p>2、结构：core 层【必要功能】，base层【插件管理等】，应用层【APP】</p>\n<p>3、日志记录和显示模块<br>    日志级别【debug、info、warn、error】：（富文本呈现）<br>    模块日志【蓝牙、Moya、APP】<br>    启动/函数调用耗时等<br>    日志截获并传递给显示组件</p>\n<p>4、APP信息：<br>    环境，版本等</p>\n<p>5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）<br>    “小程序”（小进程，线程形式，尽量不阻塞业务功能）<br>    转场动画</p>\n<hr>\n<p>a、权限集中管理；</p>\n<p>b、自动化【fastlane】</p>\n<p>c、pod管理【七鱼】</p>\n<hr>\n<p>a、苹果登录；</p>\n<p>b、加解密；</p>\n<p>c、swiftUI；</p>\n<p>d、响应式：combine，RxSwift，PromiseKit·······</p>\n<p>e、服务器；</p>\n<p>f、Metal；</p>\n","site":{"data":{}},"excerpt":"","more":"<p>监控插件库：</p>\n<p>1、CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】</p>\n<p>2、结构：core 层【必要功能】，base层【插件管理等】，应用层【APP】</p>\n<p>3、日志记录和显示模块<br>    日志级别【debug、info、warn、error】：（富文本呈现）<br>    模块日志【蓝牙、Moya、APP】<br>    启动/函数调用耗时等<br>    日志截获并传递给显示组件</p>\n<p>4、APP信息：<br>    环境，版本等</p>\n<p>5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）<br>    “小程序”（小进程，线程形式，尽量不阻塞业务功能）<br>    转场动画</p>\n<hr>\n<p>a、权限集中管理；</p>\n<p>b、自动化【fastlane】</p>\n<p>c、pod管理【七鱼】</p>\n<hr>\n<p>a、苹果登录；</p>\n<p>b、加解密；</p>\n<p>c、swiftUI；</p>\n<p>d、响应式：combine，RxSwift，PromiseKit·······</p>\n<p>e、服务器；</p>\n<p>f、Metal；</p>\n"},{"_content":"clean:\nmin_acl: internal\nauthor: sumian\nreadme: docs/README.md\nmodule: sd_ios_base\ngithub_url: http://192.168.1.229/hepeng.l/sm_ios_repo_base.git\nxcodebuild_arguments:\n  - workspace: sm_ios_base.xcworkspace\n  - scheme: sm_ios_base-Example\n  - configuration: Debug\n  - UseModernBuildSystem: NO\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之文档/jazzy.yaml","raw":"clean:\nmin_acl: internal\nauthor: sumian\nreadme: docs/README.md\nmodule: sd_ios_base\ngithub_url: http://192.168.1.229/hepeng.l/sm_ios_repo_base.git\nxcodebuild_arguments:\n  - workspace: sm_ios_base.xcworkspace\n  - scheme: sm_ios_base-Example\n  - configuration: Debug\n  - UseModernBuildSystem: NO\n","slug":"iOS学习笔记/iOS系统学习/iOS之文档/jazzy","published":1,"date":"2019-05-14T10:31:40.000Z","updated":"2019-05-14T11:04:39.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjk00218n7u0g9afbwy","content":"{\"clean\":null,\"min_acl\":\"internal\",\"author\":\"sumian\",\"readme\":\"docs/README.md\",\"module\":\"sd_ios_base\",\"github_url\":\"http://192.168.1.229/hepeng.l/sm_ios_repo_base.git\",\"xcodebuild_arguments\":[{\"workspace\":\"sm_ios_base.xcworkspace\"},{\"scheme\":\"sm_ios_base-Example\"},{\"configuration\":\"Debug\"},{\"UseModernBuildSystem\":\"NO\"}]}","site":{"data":{}},"excerpt":"","more":"{\"clean\":null,\"min_acl\":\"internal\",\"author\":\"sumian\",\"readme\":\"docs/README.md\",\"module\":\"sd_ios_base\",\"github_url\":\"http://192.168.1.229/hepeng.l/sm_ios_repo_base.git\",\"xcodebuild_arguments\":[{\"workspace\":\"sm_ios_base.xcworkspace\"},{\"scheme\":\"sm_ios_base-Example\"},{\"configuration\":\"Debug\"},{\"UseModernBuildSystem\":\"NO\"}]}"},{"_content":"\n文档生成：\nDoxygen、appledoc、HeaderDoc\n\n一、iOS 文档生成：appledoc、HeaderDoc\n1、objective——C\n  #appledoc Xcode script\n  # Start constants\n  company=\"gosuncn\";\n  companyID=\"com.gosuncn\";\n  companyURL=\"http://www.gosuncn.com/\";\n  target=\"iphoneos\";\n  #target=\"macosx\";\n  outputPath=\"${PROJECT_DIR}\";\n  # End constants\n  /usr/local/bin/appledoc \\\n  --project-name \"doc\" \\\n  --project-company \"${company}\" \\\n  --company-id \"${companyID}\" \\\n  --no-create-docset  \\\n  --output \"${outputPath}\" \\\n  --logformat xcode \\\n  --keep-intermediate-files \\\n  --no-repeat-first-par \\\n  --no-warn-invalid-crossref \\\n  --exit-threshold 2 \\\n  \"${PROJECT_DIR}\"\n\n2、swift\njazzy \\\n  --clean \\\n  --author Sumian \\\n  --author_url http://sumian.com/ \\\n  --github_url http://192.168.1.229/hepeng.l/sm_ios_repo_base \\\n  --github-file-prefix http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1 \\\n  --module-version 0.0.1 \\\n  --xcodebuild-arguments -scheme,sd_sdk_ios \\\n  --module sd_sdk_ios \\\n  --root-url ~/ \\\n  --output docs/swift_output \\\n  --theme docs/themes\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之文档/文档生成.md","raw":"\n文档生成：\nDoxygen、appledoc、HeaderDoc\n\n一、iOS 文档生成：appledoc、HeaderDoc\n1、objective——C\n  #appledoc Xcode script\n  # Start constants\n  company=\"gosuncn\";\n  companyID=\"com.gosuncn\";\n  companyURL=\"http://www.gosuncn.com/\";\n  target=\"iphoneos\";\n  #target=\"macosx\";\n  outputPath=\"${PROJECT_DIR}\";\n  # End constants\n  /usr/local/bin/appledoc \\\n  --project-name \"doc\" \\\n  --project-company \"${company}\" \\\n  --company-id \"${companyID}\" \\\n  --no-create-docset  \\\n  --output \"${outputPath}\" \\\n  --logformat xcode \\\n  --keep-intermediate-files \\\n  --no-repeat-first-par \\\n  --no-warn-invalid-crossref \\\n  --exit-threshold 2 \\\n  \"${PROJECT_DIR}\"\n\n2、swift\njazzy \\\n  --clean \\\n  --author Sumian \\\n  --author_url http://sumian.com/ \\\n  --github_url http://192.168.1.229/hepeng.l/sm_ios_repo_base \\\n  --github-file-prefix http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1 \\\n  --module-version 0.0.1 \\\n  --xcodebuild-arguments -scheme,sd_sdk_ios \\\n  --module sd_sdk_ios \\\n  --root-url ~/ \\\n  --output docs/swift_output \\\n  --theme docs/themes\n","slug":"iOS学习笔记/iOS系统学习/iOS之文档/文档生成","published":1,"date":"2019-05-13T03:32:29.000Z","updated":"2019-05-15T04:06:02.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjl00228n7u897r91iz","content":"<p>文档生成：<br>Doxygen、appledoc、HeaderDoc</p>\n<p>一、iOS 文档生成：appledoc、HeaderDoc<br>1、objective——C<br>  #appledoc Xcode script</p>\n<h1 id=\"Start-constants\"><a href=\"#Start-constants\" class=\"headerlink\" title=\"Start constants\"></a>Start constants</h1><p>  company=”gosuncn”;<br>  companyID=”com.gosuncn”;<br>  companyURL=”<a href=\"http://www.gosuncn.com/&quot;\">http://www.gosuncn.com/&quot;</a>;<br>  target=”iphoneos”;<br>  #target=”macosx”;<br>  outputPath=”${PROJECT_DIR}”;</p>\n<h1 id=\"End-constants\"><a href=\"#End-constants\" class=\"headerlink\" title=\"End constants\"></a>End constants</h1><p>  /usr/local/bin/appledoc <br>  –project-name “doc” <br>  –project-company “${company}” <br>  –company-id “${companyID}” <br>  –no-create-docset  <br>  –output “${outputPath}” <br>  –logformat xcode <br>  –keep-intermediate-files <br>  –no-repeat-first-par <br>  –no-warn-invalid-crossref <br>  –exit-threshold 2 <br>  “${PROJECT_DIR}”</p>\n<p>2、swift<br>jazzy <br>  –clean <br>  –author Sumian <br>  –author_url <a href=\"http://sumian.com/\">http://sumian.com/</a> <br>  –github_url <a href=\"http://192.168.1.229/hepeng.l/sm_ios_repo_base\">http://192.168.1.229/hepeng.l/sm_ios_repo_base</a> <br>  –github-file-prefix <a href=\"http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1\">http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1</a> <br>  –module-version 0.0.1 <br>  –xcodebuild-arguments -scheme,sd_sdk_ios <br>  –module sd_sdk_ios <br>  –root-url ~/ <br>  –output docs/swift_output <br>  –theme docs/themes</p>\n","site":{"data":{}},"excerpt":"","more":"<p>文档生成：<br>Doxygen、appledoc、HeaderDoc</p>\n<p>一、iOS 文档生成：appledoc、HeaderDoc<br>1、objective——C<br>  #appledoc Xcode script</p>\n<h1 id=\"Start-constants\"><a href=\"#Start-constants\" class=\"headerlink\" title=\"Start constants\"></a>Start constants</h1><p>  company=”gosuncn”;<br>  companyID=”com.gosuncn”;<br>  companyURL=”<a href=\"http://www.gosuncn.com/&quot;\">http://www.gosuncn.com/&quot;</a>;<br>  target=”iphoneos”;<br>  #target=”macosx”;<br>  outputPath=”${PROJECT_DIR}”;</p>\n<h1 id=\"End-constants\"><a href=\"#End-constants\" class=\"headerlink\" title=\"End constants\"></a>End constants</h1><p>  /usr/local/bin/appledoc <br>  –project-name “doc” <br>  –project-company “${company}” <br>  –company-id “${companyID}” <br>  –no-create-docset  <br>  –output “${outputPath}” <br>  –logformat xcode <br>  –keep-intermediate-files <br>  –no-repeat-first-par <br>  –no-warn-invalid-crossref <br>  –exit-threshold 2 <br>  “${PROJECT_DIR}”</p>\n<p>2、swift<br>jazzy <br>  –clean <br>  –author Sumian <br>  –author_url <a href=\"http://sumian.com/\">http://sumian.com/</a> <br>  –github_url <a href=\"http://192.168.1.229/hepeng.l/sm_ios_repo_base\">http://192.168.1.229/hepeng.l/sm_ios_repo_base</a> <br>  –github-file-prefix <a href=\"http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1\">http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1</a> <br>  –module-version 0.0.1 <br>  –xcodebuild-arguments -scheme,sd_sdk_ios <br>  –module sd_sdk_ios <br>  –root-url ~/ <br>  –output docs/swift_output <br>  –theme docs/themes</p>\n"},{"_content":"TextKit\n\nCoreText\n\nWebKit\n\n文字渲染\n\n\tPDF\n\t\nCoreGraphic\n\nQuartZ\n\t\n\n\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS之界面显示.md","raw":"TextKit\n\nCoreText\n\nWebKit\n\n文字渲染\n\n\tPDF\n\t\nCoreGraphic\n\nQuartZ\n\t\n\n\n","slug":"iOS学习笔记/iOS系统学习/iOS之界面显示/iOS之界面显示","published":1,"date":"2019-03-24T12:35:17.000Z","updated":"2019-03-24T14:17:14.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjp00238n7u27fo2l26","content":"<p>TextKit</p>\n<p>CoreText</p>\n<p>WebKit</p>\n<p>文字渲染</p>\n<pre><code>PDF\n</code></pre>\n<p>CoreGraphic</p>\n<p>QuartZ</p>\n","site":{"data":{}},"excerpt":"","more":"<p>TextKit</p>\n<p>CoreText</p>\n<p>WebKit</p>\n<p>文字渲染</p>\n<pre><code>PDF\n</code></pre>\n<p>CoreGraphic</p>\n<p>QuartZ</p>\n"},{"_content":"###iOS 排版——Coretext\n\n**1、概念：**在操作之前，先了解一下 CoreText 概念，以便理解。\n\n1.1、[CoreText](https://developer.apple.com/documentation/coretext) 框架中最常用的几个类：\n\n```\nCTFont\nCTFontCollection\nCTFontDescriptor\nCTFrame\nCTFramesetter\nCTGlyphInfo\nCTLine\nCTParagraphStyle\nCTRun\nCTTextTab\nCTTypesett\n```\n\n下面是该框架的结构图\n![CTFrame](resources/ctframe.png)\nCTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。\n注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。\n通常处理步聚：\n1.使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－>attributedString －> 生成 CTFramesetter -> 得到CTFrame -> 绘制（CTFrameDraw）\n其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。\n\n2.绘制只是显示，点击事件就需要一个判断了。\nCTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。\n\n**1.2 字体的基本知识**\n\n**字体(Font):**是一系列字号、样式和磅值相同的字符(例如:10磅黑体Palatino)。现多被视为字样的同义词\n\n**字面(Face):**是所有字号的磅值和格式的综合\n\n**字体集(Font family):**是一组相关字体(例如:Franklin family包括Franklin Gothic、Fran-klinHeavy和Franklin Compressed)\n\n**磅值(Weight):**用于描述字体粗度。典型的磅值,从最粗到最细,有极细、细、book、中等、半粗、粗、较粗、极粗\n\n**样式(Style):**字形有三种形式:Roman type是直体;oblique type是斜体;utakuc type是斜体兼曲线(比Roman type更像书法体)。\n\n**x高度(X height):**指小写字母的平均高度(以x为基准)。磅值相同的两字母,x高度越大的字母看起来比x高度小的字母要大\n\n**Cap高度(Cap height):**与x高度相似。指大写字母的平均高度(以C为基准)\n\n**下行字母(Descender):**例如在字母q中,基线以下的字母部分叫下伸部分\n\n**上行字母(Ascender):**x高度以上的部分(比如字母b)叫做上伸部分\n\n**基线(Baseline):**通常在x、v、b、m下的那条线\n\n**描边(Stroke):**组成字符的线或曲线。可以加粗或改变字符形状\n\n**衬线(Serif):**用来使字符更可视的一条水平线。如字母左上角和下部的水平线。\n\n**无衬线(Sans Serif):**可以让排字员不使用衬线装饰。\n\n**方形字(Block):**这种字体的笔画使字符看起来比无衬线字更显眼,但还不到常见的衬线字的程度。例如Lubalin Graph就是方形字,这种字看起来好像是木头块刻的一样\n\n**手写体脚本(Calligraphic script):**是一种仿效手写体的字体。例如Murray Hill或者Fraktur字体\n\n**艺术字(Decorative):**像绘画般的字体\n\n**Pi符号(Pisymbol):**非标准的字母数字字符的特殊符号。例如Wingdings和Mathematical Pi\n\n**连写(Ligature):**是一系列连写字母如fi、fl、ffi或ffl。由于字些字母形状的原因经常被连写,故排字员已习惯将它们连写。\n\n读完了上面这些概念，可以参考一下下面的图片，看看具体的位置\n![CTFrame](resources/text_glpy_info.gif)\n\n![CTFrame](resources/text_glpy_info_1.gif)\n\n* **引用原文：**[CoreText 基础概念](https://www.jianshu.com/p/9553fcbbaab1)\n\n**2、操作：**这里有两篇文章对于操作讲解的还是比较详细的\n\n1、[基于 CoreText 的排版引擎：基础](http://blog.devtang.com/2015/06/27/using-coretext-1/)\n\n2、[基于 CoreText 的排版引擎：进阶](基于 CoreText 的排版引擎：进阶)\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS排版之CoreText.md","raw":"###iOS 排版——Coretext\n\n**1、概念：**在操作之前，先了解一下 CoreText 概念，以便理解。\n\n1.1、[CoreText](https://developer.apple.com/documentation/coretext) 框架中最常用的几个类：\n\n```\nCTFont\nCTFontCollection\nCTFontDescriptor\nCTFrame\nCTFramesetter\nCTGlyphInfo\nCTLine\nCTParagraphStyle\nCTRun\nCTTextTab\nCTTypesett\n```\n\n下面是该框架的结构图\n![CTFrame](resources/ctframe.png)\nCTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。\n注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。\n通常处理步聚：\n1.使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－>attributedString －> 生成 CTFramesetter -> 得到CTFrame -> 绘制（CTFrameDraw）\n其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。\n\n2.绘制只是显示，点击事件就需要一个判断了。\nCTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。\n\n**1.2 字体的基本知识**\n\n**字体(Font):**是一系列字号、样式和磅值相同的字符(例如:10磅黑体Palatino)。现多被视为字样的同义词\n\n**字面(Face):**是所有字号的磅值和格式的综合\n\n**字体集(Font family):**是一组相关字体(例如:Franklin family包括Franklin Gothic、Fran-klinHeavy和Franklin Compressed)\n\n**磅值(Weight):**用于描述字体粗度。典型的磅值,从最粗到最细,有极细、细、book、中等、半粗、粗、较粗、极粗\n\n**样式(Style):**字形有三种形式:Roman type是直体;oblique type是斜体;utakuc type是斜体兼曲线(比Roman type更像书法体)。\n\n**x高度(X height):**指小写字母的平均高度(以x为基准)。磅值相同的两字母,x高度越大的字母看起来比x高度小的字母要大\n\n**Cap高度(Cap height):**与x高度相似。指大写字母的平均高度(以C为基准)\n\n**下行字母(Descender):**例如在字母q中,基线以下的字母部分叫下伸部分\n\n**上行字母(Ascender):**x高度以上的部分(比如字母b)叫做上伸部分\n\n**基线(Baseline):**通常在x、v、b、m下的那条线\n\n**描边(Stroke):**组成字符的线或曲线。可以加粗或改变字符形状\n\n**衬线(Serif):**用来使字符更可视的一条水平线。如字母左上角和下部的水平线。\n\n**无衬线(Sans Serif):**可以让排字员不使用衬线装饰。\n\n**方形字(Block):**这种字体的笔画使字符看起来比无衬线字更显眼,但还不到常见的衬线字的程度。例如Lubalin Graph就是方形字,这种字看起来好像是木头块刻的一样\n\n**手写体脚本(Calligraphic script):**是一种仿效手写体的字体。例如Murray Hill或者Fraktur字体\n\n**艺术字(Decorative):**像绘画般的字体\n\n**Pi符号(Pisymbol):**非标准的字母数字字符的特殊符号。例如Wingdings和Mathematical Pi\n\n**连写(Ligature):**是一系列连写字母如fi、fl、ffi或ffl。由于字些字母形状的原因经常被连写,故排字员已习惯将它们连写。\n\n读完了上面这些概念，可以参考一下下面的图片，看看具体的位置\n![CTFrame](resources/text_glpy_info.gif)\n\n![CTFrame](resources/text_glpy_info_1.gif)\n\n* **引用原文：**[CoreText 基础概念](https://www.jianshu.com/p/9553fcbbaab1)\n\n**2、操作：**这里有两篇文章对于操作讲解的还是比较详细的\n\n1、[基于 CoreText 的排版引擎：基础](http://blog.devtang.com/2015/06/27/using-coretext-1/)\n\n2、[基于 CoreText 的排版引擎：进阶](基于 CoreText 的排版引擎：进阶)\n","slug":"iOS学习笔记/iOS系统学习/iOS之界面显示/iOS排版之CoreText","published":1,"date":"2019-03-24T13:01:23.000Z","updated":"2019-03-25T11:01:33.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjq00248n7u08wt1n0u","content":"<p>###iOS 排版——Coretext</p>\n<p><strong>1、概念：</strong>在操作之前，先了解一下 CoreText 概念，以便理解。</p>\n<p>1.1、<a href=\"https://developer.apple.com/documentation/coretext\">CoreText</a> 框架中最常用的几个类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CTFont</span><br><span class=\"line\">CTFontCollection</span><br><span class=\"line\">CTFontDescriptor</span><br><span class=\"line\">CTFrame</span><br><span class=\"line\">CTFramesetter</span><br><span class=\"line\">CTGlyphInfo</span><br><span class=\"line\">CTLine</span><br><span class=\"line\">CTParagraphStyle</span><br><span class=\"line\">CTRun</span><br><span class=\"line\">CTTextTab</span><br><span class=\"line\">CTTypesett</span><br></pre></td></tr></table></figure>\n\n<p>下面是该框架的结构图<br><img src=\"resources/ctframe.png\" alt=\"CTFrame\"><br>CTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。<br>注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。<br>通常处理步聚：<br>1.使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－&gt;attributedString －&gt; 生成 CTFramesetter -&gt; 得到CTFrame -&gt; 绘制（CTFrameDraw）<br>其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。</p>\n<p>2.绘制只是显示，点击事件就需要一个判断了。<br>CTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。</p>\n<p><strong>1.2 字体的基本知识</strong></p>\n<p>**字体(Font):**是一系列字号、样式和磅值相同的字符(例如:10磅黑体Palatino)。现多被视为字样的同义词</p>\n<p>**字面(Face):**是所有字号的磅值和格式的综合</p>\n<p>**字体集(Font family):**是一组相关字体(例如:Franklin family包括Franklin Gothic、Fran-klinHeavy和Franklin Compressed)</p>\n<p>**磅值(Weight):**用于描述字体粗度。典型的磅值,从最粗到最细,有极细、细、book、中等、半粗、粗、较粗、极粗</p>\n<p>**样式(Style):**字形有三种形式:Roman type是直体;oblique type是斜体;utakuc type是斜体兼曲线(比Roman type更像书法体)。</p>\n<p>**x高度(X height):**指小写字母的平均高度(以x为基准)。磅值相同的两字母,x高度越大的字母看起来比x高度小的字母要大</p>\n<p>**Cap高度(Cap height):**与x高度相似。指大写字母的平均高度(以C为基准)</p>\n<p>**下行字母(Descender):**例如在字母q中,基线以下的字母部分叫下伸部分</p>\n<p>**上行字母(Ascender):**x高度以上的部分(比如字母b)叫做上伸部分</p>\n<p>**基线(Baseline):**通常在x、v、b、m下的那条线</p>\n<p>**描边(Stroke):**组成字符的线或曲线。可以加粗或改变字符形状</p>\n<p>**衬线(Serif):**用来使字符更可视的一条水平线。如字母左上角和下部的水平线。</p>\n<p>**无衬线(Sans Serif):**可以让排字员不使用衬线装饰。</p>\n<p>**方形字(Block):**这种字体的笔画使字符看起来比无衬线字更显眼,但还不到常见的衬线字的程度。例如Lubalin Graph就是方形字,这种字看起来好像是木头块刻的一样</p>\n<p>**手写体脚本(Calligraphic script):**是一种仿效手写体的字体。例如Murray Hill或者Fraktur字体</p>\n<p>**艺术字(Decorative):**像绘画般的字体</p>\n<p>**Pi符号(Pisymbol):**非标准的字母数字字符的特殊符号。例如Wingdings和Mathematical Pi</p>\n<p>**连写(Ligature):**是一系列连写字母如fi、fl、ffi或ffl。由于字些字母形状的原因经常被连写,故排字员已习惯将它们连写。</p>\n<p>读完了上面这些概念，可以参考一下下面的图片，看看具体的位置<br><img src=\"resources/text_glpy_info.gif\" alt=\"CTFrame\"></p>\n<p><img src=\"resources/text_glpy_info_1.gif\" alt=\"CTFrame\"></p>\n<ul>\n<li><strong>引用原文：</strong><a href=\"https://www.jianshu.com/p/9553fcbbaab1\">CoreText 基础概念</a></li>\n</ul>\n<p><strong>2、操作：</strong>这里有两篇文章对于操作讲解的还是比较详细的</p>\n<p>1、<a href=\"http://blog.devtang.com/2015/06/27/using-coretext-1/\">基于 CoreText 的排版引擎：基础</a></p>\n<p>2、[基于 CoreText 的排版引擎：进阶](基于 CoreText 的排版引擎：进阶)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>###iOS 排版——Coretext</p>\n<p><strong>1、概念：</strong>在操作之前，先了解一下 CoreText 概念，以便理解。</p>\n<p>1.1、<a href=\"https://developer.apple.com/documentation/coretext\">CoreText</a> 框架中最常用的几个类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CTFont</span><br><span class=\"line\">CTFontCollection</span><br><span class=\"line\">CTFontDescriptor</span><br><span class=\"line\">CTFrame</span><br><span class=\"line\">CTFramesetter</span><br><span class=\"line\">CTGlyphInfo</span><br><span class=\"line\">CTLine</span><br><span class=\"line\">CTParagraphStyle</span><br><span class=\"line\">CTRun</span><br><span class=\"line\">CTTextTab</span><br><span class=\"line\">CTTypesett</span><br></pre></td></tr></table></figure>\n\n<p>下面是该框架的结构图<br><img src=\"resources/ctframe.png\" alt=\"CTFrame\"><br>CTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。<br>注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。<br>通常处理步聚：<br>1.使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－&gt;attributedString －&gt; 生成 CTFramesetter -&gt; 得到CTFrame -&gt; 绘制（CTFrameDraw）<br>其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。</p>\n<p>2.绘制只是显示，点击事件就需要一个判断了。<br>CTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。</p>\n<p><strong>1.2 字体的基本知识</strong></p>\n<p>**字体(Font):**是一系列字号、样式和磅值相同的字符(例如:10磅黑体Palatino)。现多被视为字样的同义词</p>\n<p>**字面(Face):**是所有字号的磅值和格式的综合</p>\n<p>**字体集(Font family):**是一组相关字体(例如:Franklin family包括Franklin Gothic、Fran-klinHeavy和Franklin Compressed)</p>\n<p>**磅值(Weight):**用于描述字体粗度。典型的磅值,从最粗到最细,有极细、细、book、中等、半粗、粗、较粗、极粗</p>\n<p>**样式(Style):**字形有三种形式:Roman type是直体;oblique type是斜体;utakuc type是斜体兼曲线(比Roman type更像书法体)。</p>\n<p>**x高度(X height):**指小写字母的平均高度(以x为基准)。磅值相同的两字母,x高度越大的字母看起来比x高度小的字母要大</p>\n<p>**Cap高度(Cap height):**与x高度相似。指大写字母的平均高度(以C为基准)</p>\n<p>**下行字母(Descender):**例如在字母q中,基线以下的字母部分叫下伸部分</p>\n<p>**上行字母(Ascender):**x高度以上的部分(比如字母b)叫做上伸部分</p>\n<p>**基线(Baseline):**通常在x、v、b、m下的那条线</p>\n<p>**描边(Stroke):**组成字符的线或曲线。可以加粗或改变字符形状</p>\n<p>**衬线(Serif):**用来使字符更可视的一条水平线。如字母左上角和下部的水平线。</p>\n<p>**无衬线(Sans Serif):**可以让排字员不使用衬线装饰。</p>\n<p>**方形字(Block):**这种字体的笔画使字符看起来比无衬线字更显眼,但还不到常见的衬线字的程度。例如Lubalin Graph就是方形字,这种字看起来好像是木头块刻的一样</p>\n<p>**手写体脚本(Calligraphic script):**是一种仿效手写体的字体。例如Murray Hill或者Fraktur字体</p>\n<p>**艺术字(Decorative):**像绘画般的字体</p>\n<p>**Pi符号(Pisymbol):**非标准的字母数字字符的特殊符号。例如Wingdings和Mathematical Pi</p>\n<p>**连写(Ligature):**是一系列连写字母如fi、fl、ffi或ffl。由于字些字母形状的原因经常被连写,故排字员已习惯将它们连写。</p>\n<p>读完了上面这些概念，可以参考一下下面的图片，看看具体的位置<br><img src=\"resources/text_glpy_info.gif\" alt=\"CTFrame\"></p>\n<p><img src=\"resources/text_glpy_info_1.gif\" alt=\"CTFrame\"></p>\n<ul>\n<li><strong>引用原文：</strong><a href=\"https://www.jianshu.com/p/9553fcbbaab1\">CoreText 基础概念</a></li>\n</ul>\n<p><strong>2、操作：</strong>这里有两篇文章对于操作讲解的还是比较详细的</p>\n<p>1、<a href=\"http://blog.devtang.com/2015/06/27/using-coretext-1/\">基于 CoreText 的排版引擎：基础</a></p>\n<p>2、[基于 CoreText 的排版引擎：进阶](基于 CoreText 的排版引擎：进阶)</p>\n"},{"_content":"###iOS排版与渲染引擎——TextKit\n\n[TexkKit 探究](https://www.jianshu.com/p/3f445d7f44d6)\n\n[iOS7 排版与渲染引擎](https://www.jianshu.com/p/e05b43faa106)\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS排版之TextKit.md","raw":"###iOS排版与渲染引擎——TextKit\n\n[TexkKit 探究](https://www.jianshu.com/p/3f445d7f44d6)\n\n[iOS7 排版与渲染引擎](https://www.jianshu.com/p/e05b43faa106)\n","slug":"iOS学习笔记/iOS系统学习/iOS之界面显示/iOS排版之TextKit","published":1,"date":"2019-03-24T12:44:45.000Z","updated":"2019-03-24T15:37:32.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjr00258n7uagqw3ope","content":"<p>###iOS排版与渲染引擎——TextKit</p>\n<p><a href=\"https://www.jianshu.com/p/3f445d7f44d6\">TexkKit 探究</a></p>\n<p><a href=\"https://www.jianshu.com/p/e05b43faa106\">iOS7 排版与渲染引擎</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>###iOS排版与渲染引擎——TextKit</p>\n<p><a href=\"https://www.jianshu.com/p/3f445d7f44d6\">TexkKit 探究</a></p>\n<p><a href=\"https://www.jianshu.com/p/e05b43faa106\">iOS7 排版与渲染引擎</a></p>\n"},{"_content":"[TOC]\n###1、iOS与JS交互的四种方法\n\n    1、拦截url（适用于UIWebView和WKWebView） \n    2、JavaScriptCore（只适用于UIWebView，iOS7+） \n    3、WKScriptMessageHandler（只适用于WKWebView，iOS8+） \n    4、WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）\n\n1、方法一：\n\n（1）web调用原生：\n\n```\n - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType{\n    if ([request.URL.absoluteString hasPrefix:@\"jxaction://scan\"]) {\n        //调用原生扫描二维码\n       return NO;\n    }\n        return YES;\n    }\n```\n\nH5 代码：\n```\n<a href=\"jxaction://scan\">扫一扫(拦截url)</a>\n```\n\n（2）原生调用js\n\n```\n[self.webView stringByEvaluatingJavaScriptFromString:@\"scanResult('我是扫描结果~')\"];\n```\n\n方法二、 JavaScriptCore\n\n（1）js调用原生 \n1、新建类继承自NSObject（如AppJSObject）。 \n2、.h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。 \n3、.m文件中实现2中的代理中对应的方法，可以在方法内处理事件或通知代理。\n\nAppJSObject.h\n```\n#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>\n\n@protocol AppJSObjectDelegate <JSExport>\n\n-(void)scan:(NSString *)message;\n\n@end\n\n@interface AppJSObject : NSObject<AppJSObjectDelegate>\n\n@property(nonatomic,weak) id<AppJSObjectDelegate> delegate;\n\n@end\n\n```\n\nAppJSObject.m\n```\n#import \"AppJSObject.h\"\n\n@implementation AppJSObject\n\n-(void)scan:(NSString *)message{\n    [self.delegate scan:message];\n}\n\n@end\n```\n\nH5代码：\n```\n<input type=\"button\" name=\"\" value=\"扫一扫\" onclick=\"scan()\">\n<br/>\n<p id=\"result\">扫描结果：</p>\n\n<script type=\"text/javascript\">\n    //调用APP的扫描方法   h5->app\n    function scan(){\n        app.scan('scanResult');\n    }\n\n    //扫描结果回调方法    app->h5\n    function scanResult(result){\n        document.getElementById(\"result\").innerHTML = '扫描结果：' + result;  \n    }\n</script>\n```\n\n在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了\n```\n-(void)webViewDidFinishLoad:(UIWebView *)webView\n{\n    JSContext *context=[webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\n\n    AppJSObject *jsObject = [AppJSObject new];\n    jsObject.delegate = self;\n    context[@\"app\"] = jsObject;\n\n}\n```\n也可以通过block实现而不创建新类AppJSObject:\n```\ncontext[@\"openAlbum\"] = ^(){\n    NSLog(@\"js调用oc打开相册\");\n};\n```\n\n（2）原生调用js，可以通过一中的方法，也可以通过JSContext：\n```\nJSContext *context=[_mainWebView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\nNSString *alertJS= [NSString stringWithFormat:@\"%@('%@')\",_photoMethod,fileUrl];\n[context evaluateScript:alertJS];\n\n```\n\n方法三、 WKScriptMessageHandler\n现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler \n\n1、初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan：\n```\n- (void)setupWKWebView{\n    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\n    configuration.userContentController = [[WKUserContentController alloc] init];\n    [configuration.userContentController addScriptMessageHandler:self name:@\"scan\"];\n\n    WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];\n    webView.UIDelegate = self;\n}\n```\n\nH5:\n```\nwindow.webkit.messageHandlers.scan.postMessage() \n```\n2、实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：\n```\n- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message{\n    if ([message.name isEqualToString:@\"scan\"]) {\n        //调用原生扫码\n     }\n}\n```\n\n3、原生调用js\n```\n[self.wkWebView evaluateJavaScript:jsString  completionHandler:^(id _Nullable result, NSError * _Nullable error) {\n\n}];\n```\n\n注意一点，内存泄漏的情况，解决办法如下：\n```\nclass WeakScriptMessageDelegate: NSObject, WKScriptMessageHandler {\n    weak var scriptDelegate: WKScriptMessageHandler?\n    \n    init(_ scriptDelegate: WKScriptMessageHandler) {\n        self.scriptDelegate = scriptDelegate\n        super.init()\n    }\n    \n    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {\n        scriptDelegate?.userContentController(userContentController, didReceive: message)\n    }\n    \n    deinit {\n        print(\"WeakScriptMessageDelegate is deinit\")\n    }\n}\n```\n定义一个代理类：\n```\nwkWebView.configuration.userContentController.add(WeakScriptMessageDelegate.init(self), name: <方法名>)\n```\n方法四、 WebViewJavascriptBridge\n\n是一个第三方框架，官方文档和demo都很完整，不再累赘\n\n*GitHub地址：*[marcuswestin/WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)\n\n*原理及源码：* [WebViewJavascriptBridge](https://github.com/ShannonChenCHN/iOSDevLevelingUp/tree/master/ReadingSourceCode/WebViewJavascriptBridgeNotes)\n\n*微信JS：*[JS-SDK](https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3&oldid=1667)\n\n###2、大前端\n\n1、React-Native：\n* [React-Native 官网](https://facebook.github.io/react-native/)\n* [React-Native 中文网](https://reactnative.cn/)\n\n2、Flutter:\n* [Flutter 官网](https://flutter.dev/)\n* [Flutter 中文网](https://flutterchina.club/)\n\n3、WeeX:\n* [WeeX 官网](https://weex.incubator.apache.org/)\n* [WeeX 中文网](https://weex.apache.org/zh/guide/introduction.html)","source":"_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS排版之WebKit.md","raw":"[TOC]\n###1、iOS与JS交互的四种方法\n\n    1、拦截url（适用于UIWebView和WKWebView） \n    2、JavaScriptCore（只适用于UIWebView，iOS7+） \n    3、WKScriptMessageHandler（只适用于WKWebView，iOS8+） \n    4、WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）\n\n1、方法一：\n\n（1）web调用原生：\n\n```\n - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType{\n    if ([request.URL.absoluteString hasPrefix:@\"jxaction://scan\"]) {\n        //调用原生扫描二维码\n       return NO;\n    }\n        return YES;\n    }\n```\n\nH5 代码：\n```\n<a href=\"jxaction://scan\">扫一扫(拦截url)</a>\n```\n\n（2）原生调用js\n\n```\n[self.webView stringByEvaluatingJavaScriptFromString:@\"scanResult('我是扫描结果~')\"];\n```\n\n方法二、 JavaScriptCore\n\n（1）js调用原生 \n1、新建类继承自NSObject（如AppJSObject）。 \n2、.h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。 \n3、.m文件中实现2中的代理中对应的方法，可以在方法内处理事件或通知代理。\n\nAppJSObject.h\n```\n#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>\n\n@protocol AppJSObjectDelegate <JSExport>\n\n-(void)scan:(NSString *)message;\n\n@end\n\n@interface AppJSObject : NSObject<AppJSObjectDelegate>\n\n@property(nonatomic,weak) id<AppJSObjectDelegate> delegate;\n\n@end\n\n```\n\nAppJSObject.m\n```\n#import \"AppJSObject.h\"\n\n@implementation AppJSObject\n\n-(void)scan:(NSString *)message{\n    [self.delegate scan:message];\n}\n\n@end\n```\n\nH5代码：\n```\n<input type=\"button\" name=\"\" value=\"扫一扫\" onclick=\"scan()\">\n<br/>\n<p id=\"result\">扫描结果：</p>\n\n<script type=\"text/javascript\">\n    //调用APP的扫描方法   h5->app\n    function scan(){\n        app.scan('scanResult');\n    }\n\n    //扫描结果回调方法    app->h5\n    function scanResult(result){\n        document.getElementById(\"result\").innerHTML = '扫描结果：' + result;  \n    }\n</script>\n```\n\n在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了\n```\n-(void)webViewDidFinishLoad:(UIWebView *)webView\n{\n    JSContext *context=[webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\n\n    AppJSObject *jsObject = [AppJSObject new];\n    jsObject.delegate = self;\n    context[@\"app\"] = jsObject;\n\n}\n```\n也可以通过block实现而不创建新类AppJSObject:\n```\ncontext[@\"openAlbum\"] = ^(){\n    NSLog(@\"js调用oc打开相册\");\n};\n```\n\n（2）原生调用js，可以通过一中的方法，也可以通过JSContext：\n```\nJSContext *context=[_mainWebView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\nNSString *alertJS= [NSString stringWithFormat:@\"%@('%@')\",_photoMethod,fileUrl];\n[context evaluateScript:alertJS];\n\n```\n\n方法三、 WKScriptMessageHandler\n现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler \n\n1、初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan：\n```\n- (void)setupWKWebView{\n    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\n    configuration.userContentController = [[WKUserContentController alloc] init];\n    [configuration.userContentController addScriptMessageHandler:self name:@\"scan\"];\n\n    WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];\n    webView.UIDelegate = self;\n}\n```\n\nH5:\n```\nwindow.webkit.messageHandlers.scan.postMessage() \n```\n2、实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：\n```\n- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message{\n    if ([message.name isEqualToString:@\"scan\"]) {\n        //调用原生扫码\n     }\n}\n```\n\n3、原生调用js\n```\n[self.wkWebView evaluateJavaScript:jsString  completionHandler:^(id _Nullable result, NSError * _Nullable error) {\n\n}];\n```\n\n注意一点，内存泄漏的情况，解决办法如下：\n```\nclass WeakScriptMessageDelegate: NSObject, WKScriptMessageHandler {\n    weak var scriptDelegate: WKScriptMessageHandler?\n    \n    init(_ scriptDelegate: WKScriptMessageHandler) {\n        self.scriptDelegate = scriptDelegate\n        super.init()\n    }\n    \n    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {\n        scriptDelegate?.userContentController(userContentController, didReceive: message)\n    }\n    \n    deinit {\n        print(\"WeakScriptMessageDelegate is deinit\")\n    }\n}\n```\n定义一个代理类：\n```\nwkWebView.configuration.userContentController.add(WeakScriptMessageDelegate.init(self), name: <方法名>)\n```\n方法四、 WebViewJavascriptBridge\n\n是一个第三方框架，官方文档和demo都很完整，不再累赘\n\n*GitHub地址：*[marcuswestin/WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)\n\n*原理及源码：* [WebViewJavascriptBridge](https://github.com/ShannonChenCHN/iOSDevLevelingUp/tree/master/ReadingSourceCode/WebViewJavascriptBridgeNotes)\n\n*微信JS：*[JS-SDK](https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3&oldid=1667)\n\n###2、大前端\n\n1、React-Native：\n* [React-Native 官网](https://facebook.github.io/react-native/)\n* [React-Native 中文网](https://reactnative.cn/)\n\n2、Flutter:\n* [Flutter 官网](https://flutter.dev/)\n* [Flutter 中文网](https://flutterchina.club/)\n\n3、WeeX:\n* [WeeX 官网](https://weex.incubator.apache.org/)\n* [WeeX 中文网](https://weex.apache.org/zh/guide/introduction.html)","slug":"iOS学习笔记/iOS系统学习/iOS之界面显示/iOS排版之WebKit","published":1,"date":"2019-03-24T13:01:23.000Z","updated":"2019-03-28T05:49:20.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjs00268n7uessm4suq","content":"<p>[TOC]<br>###1、iOS与JS交互的四种方法</p>\n<pre><code>1、拦截url（适用于UIWebView和WKWebView） \n2、JavaScriptCore（只适用于UIWebView，iOS7+） \n3、WKScriptMessageHandler（只适用于WKWebView，iOS8+） \n4、WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）\n</code></pre>\n<p>1、方法一：</p>\n<p>（1）web调用原生：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType&#123;</span><br><span class=\"line\">   if ([request.URL.absoluteString hasPrefix:@&quot;jxaction:&#x2F;&#x2F;scan&quot;]) &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;调用原生扫描二维码</span><br><span class=\"line\">      return NO;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">       return YES;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>H5 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href&#x3D;&quot;jxaction:&#x2F;&#x2F;scan&quot;&gt;扫一扫(拦截url)&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>（2）原生调用js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.webView stringByEvaluatingJavaScriptFromString:@&quot;scanResult(&#39;我是扫描结果~&#39;)&quot;];</span><br></pre></td></tr></table></figure>\n\n<p>方法二、 JavaScriptCore</p>\n<p>（1）js调用原生<br>1、新建类继承自NSObject（如AppJSObject）。<br>2、.h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。<br>3、.m文件中实现2中的代理中对应的方法，可以在方法内处理事件或通知代理。</p>\n<p>AppJSObject.h</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\">#import &lt;JavaScriptCore&#x2F;JavaScriptCore.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol AppJSObjectDelegate &lt;JSExport&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)scan:(NSString *)message;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface AppJSObject : NSObject&lt;AppJSObjectDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,weak) id&lt;AppJSObjectDelegate&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>AppJSObject.m</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;AppJSObject.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation AppJSObject</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)scan:(NSString *)message&#123;</span><br><span class=\"line\">    [self.delegate scan:message];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>H5代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type&#x3D;&quot;button&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;扫一扫&quot; onclick&#x3D;&quot;scan()&quot;&gt;</span><br><span class=\"line\">&lt;br&#x2F;&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;result&quot;&gt;扫描结果：&lt;&#x2F;p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">    &#x2F;&#x2F;调用APP的扫描方法   h5-&gt;app</span><br><span class=\"line\">    function scan()&#123;</span><br><span class=\"line\">        app.scan(&#39;scanResult&#39;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;扫描结果回调方法    app-&gt;h5</span><br><span class=\"line\">    function scanResult(result)&#123;</span><br><span class=\"line\">        document.getElementById(&quot;result&quot;).innerHTML &#x3D; &#39;扫描结果：&#39; + result;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)webViewDidFinishLoad:(UIWebView *)webView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    JSContext *context&#x3D;[webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    AppJSObject *jsObject &#x3D; [AppJSObject new];</span><br><span class=\"line\">    jsObject.delegate &#x3D; self;</span><br><span class=\"line\">    context[@&quot;app&quot;] &#x3D; jsObject;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以通过block实现而不创建新类AppJSObject:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context[@&quot;openAlbum&quot;] &#x3D; ^()&#123;</span><br><span class=\"line\">    NSLog(@&quot;js调用oc打开相册&quot;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>（2）原生调用js，可以通过一中的方法，也可以通过JSContext：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSContext *context&#x3D;[_mainWebView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class=\"line\">NSString *alertJS&#x3D; [NSString stringWithFormat:@&quot;%@(&#39;%@&#39;)&quot;,_photoMethod,fileUrl];</span><br><span class=\"line\">[context evaluateScript:alertJS];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>方法三、 WKScriptMessageHandler<br>现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler </p>\n<p>1、初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setupWKWebView&#123;</span><br><span class=\"line\">    WKWebViewConfiguration *configuration &#x3D; [[WKWebViewConfiguration alloc] init];</span><br><span class=\"line\">    configuration.userContentController &#x3D; [[WKUserContentController alloc] init];</span><br><span class=\"line\">    [configuration.userContentController addScriptMessageHandler:self name:@&quot;scan&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    WKWebView *webView &#x3D; [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];</span><br><span class=\"line\">    webView.UIDelegate &#x3D; self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>H5:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.webkit.messageHandlers.scan.postMessage() </span><br></pre></td></tr></table></figure>\n<p>2、实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message&#123;</span><br><span class=\"line\">    if ([message.name isEqualToString:@&quot;scan&quot;]) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;调用原生扫码</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、原生调用js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.wkWebView evaluateJavaScript:jsString  completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>注意一点，内存泄漏的情况，解决办法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class WeakScriptMessageDelegate: NSObject, WKScriptMessageHandler &#123;</span><br><span class=\"line\">    weak var scriptDelegate: WKScriptMessageHandler?</span><br><span class=\"line\">    </span><br><span class=\"line\">    init(_ scriptDelegate: WKScriptMessageHandler) &#123;</span><br><span class=\"line\">        self.scriptDelegate &#x3D; scriptDelegate</span><br><span class=\"line\">        super.init()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) &#123;</span><br><span class=\"line\">        scriptDelegate?.userContentController(userContentController, didReceive: message)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    deinit &#123;</span><br><span class=\"line\">        print(&quot;WeakScriptMessageDelegate is deinit&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义一个代理类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wkWebView.configuration.userContentController.add(WeakScriptMessageDelegate.init(self), name: &lt;方法名&gt;)</span><br></pre></td></tr></table></figure>\n<p>方法四、 WebViewJavascriptBridge</p>\n<p>是一个第三方框架，官方文档和demo都很完整，不再累赘</p>\n<p><em>GitHub地址：</em><a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">marcuswestin/WebViewJavascriptBridge</a></p>\n<p><em>原理及源码：</em> <a href=\"https://github.com/ShannonChenCHN/iOSDevLevelingUp/tree/master/ReadingSourceCode/WebViewJavascriptBridgeNotes\">WebViewJavascriptBridge</a></p>\n<p><em>微信JS：</em><a href=\"https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3&oldid=1667\">JS-SDK</a></p>\n<p>###2、大前端</p>\n<p>1、React-Native：</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react-native/\">React-Native 官网</a></li>\n<li><a href=\"https://reactnative.cn/\">React-Native 中文网</a></li>\n</ul>\n<p>2、Flutter:</p>\n<ul>\n<li><a href=\"https://flutter.dev/\">Flutter 官网</a></li>\n<li><a href=\"https://flutterchina.club/\">Flutter 中文网</a></li>\n</ul>\n<p>3、WeeX:</p>\n<ul>\n<li><a href=\"https://weex.incubator.apache.org/\">WeeX 官网</a></li>\n<li><a href=\"https://weex.apache.org/zh/guide/introduction.html\">WeeX 中文网</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]<br>###1、iOS与JS交互的四种方法</p>\n<pre><code>1、拦截url（适用于UIWebView和WKWebView） \n2、JavaScriptCore（只适用于UIWebView，iOS7+） \n3、WKScriptMessageHandler（只适用于WKWebView，iOS8+） \n4、WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）\n</code></pre>\n<p>1、方法一：</p>\n<p>（1）web调用原生：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType&#123;</span><br><span class=\"line\">   if ([request.URL.absoluteString hasPrefix:@&quot;jxaction:&#x2F;&#x2F;scan&quot;]) &#123;</span><br><span class=\"line\">       &#x2F;&#x2F;调用原生扫描二维码</span><br><span class=\"line\">      return NO;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">       return YES;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>H5 代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href&#x3D;&quot;jxaction:&#x2F;&#x2F;scan&quot;&gt;扫一扫(拦截url)&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>（2）原生调用js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.webView stringByEvaluatingJavaScriptFromString:@&quot;scanResult(&#39;我是扫描结果~&#39;)&quot;];</span><br></pre></td></tr></table></figure>\n\n<p>方法二、 JavaScriptCore</p>\n<p>（1）js调用原生<br>1、新建类继承自NSObject（如AppJSObject）。<br>2、.h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。<br>3、.m文件中实现2中的代理中对应的方法，可以在方法内处理事件或通知代理。</p>\n<p>AppJSObject.h</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation&#x2F;Foundation.h&gt;</span><br><span class=\"line\">#import &lt;JavaScriptCore&#x2F;JavaScriptCore.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol AppJSObjectDelegate &lt;JSExport&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)scan:(NSString *)message;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface AppJSObject : NSObject&lt;AppJSObjectDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,weak) id&lt;AppJSObjectDelegate&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>AppJSObject.m</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;AppJSObject.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation AppJSObject</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)scan:(NSString *)message&#123;</span><br><span class=\"line\">    [self.delegate scan:message];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>H5代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type&#x3D;&quot;button&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;扫一扫&quot; onclick&#x3D;&quot;scan()&quot;&gt;</span><br><span class=\"line\">&lt;br&#x2F;&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;result&quot;&gt;扫描结果：&lt;&#x2F;p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">    &#x2F;&#x2F;调用APP的扫描方法   h5-&gt;app</span><br><span class=\"line\">    function scan()&#123;</span><br><span class=\"line\">        app.scan(&#39;scanResult&#39;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;扫描结果回调方法    app-&gt;h5</span><br><span class=\"line\">    function scanResult(result)&#123;</span><br><span class=\"line\">        document.getElementById(&quot;result&quot;).innerHTML &#x3D; &#39;扫描结果：&#39; + result;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)webViewDidFinishLoad:(UIWebView *)webView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    JSContext *context&#x3D;[webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    AppJSObject *jsObject &#x3D; [AppJSObject new];</span><br><span class=\"line\">    jsObject.delegate &#x3D; self;</span><br><span class=\"line\">    context[@&quot;app&quot;] &#x3D; jsObject;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以通过block实现而不创建新类AppJSObject:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context[@&quot;openAlbum&quot;] &#x3D; ^()&#123;</span><br><span class=\"line\">    NSLog(@&quot;js调用oc打开相册&quot;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>（2）原生调用js，可以通过一中的方法，也可以通过JSContext：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSContext *context&#x3D;[_mainWebView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class=\"line\">NSString *alertJS&#x3D; [NSString stringWithFormat:@&quot;%@(&#39;%@&#39;)&quot;,_photoMethod,fileUrl];</span><br><span class=\"line\">[context evaluateScript:alertJS];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>方法三、 WKScriptMessageHandler<br>现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler </p>\n<p>1、初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setupWKWebView&#123;</span><br><span class=\"line\">    WKWebViewConfiguration *configuration &#x3D; [[WKWebViewConfiguration alloc] init];</span><br><span class=\"line\">    configuration.userContentController &#x3D; [[WKUserContentController alloc] init];</span><br><span class=\"line\">    [configuration.userContentController addScriptMessageHandler:self name:@&quot;scan&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    WKWebView *webView &#x3D; [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];</span><br><span class=\"line\">    webView.UIDelegate &#x3D; self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>H5:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.webkit.messageHandlers.scan.postMessage() </span><br></pre></td></tr></table></figure>\n<p>2、实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message&#123;</span><br><span class=\"line\">    if ([message.name isEqualToString:@&quot;scan&quot;]) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;调用原生扫码</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、原生调用js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.wkWebView evaluateJavaScript:jsString  completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>注意一点，内存泄漏的情况，解决办法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class WeakScriptMessageDelegate: NSObject, WKScriptMessageHandler &#123;</span><br><span class=\"line\">    weak var scriptDelegate: WKScriptMessageHandler?</span><br><span class=\"line\">    </span><br><span class=\"line\">    init(_ scriptDelegate: WKScriptMessageHandler) &#123;</span><br><span class=\"line\">        self.scriptDelegate &#x3D; scriptDelegate</span><br><span class=\"line\">        super.init()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) &#123;</span><br><span class=\"line\">        scriptDelegate?.userContentController(userContentController, didReceive: message)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    deinit &#123;</span><br><span class=\"line\">        print(&quot;WeakScriptMessageDelegate is deinit&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义一个代理类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wkWebView.configuration.userContentController.add(WeakScriptMessageDelegate.init(self), name: &lt;方法名&gt;)</span><br></pre></td></tr></table></figure>\n<p>方法四、 WebViewJavascriptBridge</p>\n<p>是一个第三方框架，官方文档和demo都很完整，不再累赘</p>\n<p><em>GitHub地址：</em><a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">marcuswestin/WebViewJavascriptBridge</a></p>\n<p><em>原理及源码：</em> <a href=\"https://github.com/ShannonChenCHN/iOSDevLevelingUp/tree/master/ReadingSourceCode/WebViewJavascriptBridgeNotes\">WebViewJavascriptBridge</a></p>\n<p><em>微信JS：</em><a href=\"https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3&oldid=1667\">JS-SDK</a></p>\n<p>###2、大前端</p>\n<p>1、React-Native：</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react-native/\">React-Native 官网</a></li>\n<li><a href=\"https://reactnative.cn/\">React-Native 中文网</a></li>\n</ul>\n<p>2、Flutter:</p>\n<ul>\n<li><a href=\"https://flutter.dev/\">Flutter 官网</a></li>\n<li><a href=\"https://flutterchina.club/\">Flutter 中文网</a></li>\n</ul>\n<p>3、WeeX:</p>\n<ul>\n<li><a href=\"https://weex.incubator.apache.org/\">WeeX 官网</a></li>\n<li><a href=\"https://weex.apache.org/zh/guide/introduction.html\">WeeX 中文网</a></li>\n</ul>\n"},{"_content":"[TOC]\n\n##iOS自动布局\n\n###1、基础\n|型号 | 屏幕尺寸（inch）|逻辑分辨率（point）|缩放因子（scale factor）|物理分辨率（pixel）|像素密度（PPI）\n| --- | --- | --- |--- | --- | --- |\n|iPhone3GS | 3.5 | 320 * 480 | @1x | 320 * 480 | 163 |\n|iPhone4/4s | 3.5 | 320 * 480 | @2x | 640 * 960 | 326 |\n|iPhone5/5s |4| 320 * 568| @2x |640 * 1136| 326|\n|iPhone6/6s| 4.7| 375 * 667| @2x| 750 * 1334 |326|\n|iPhone6Plus/6s Plus| 5.5| 414 * 736| @3x| 1242 * 2208| 401|\n\n物理分辨率、逻辑分辨率、像素密度：\n\n    PPI = 根号(X*X + Y*Y) / Inch = 163 pixcel/inch\n    \n    scale= 单位长度内的数量比(pixel/point)\n    \n###2、Frame\n\n*     bounds\n*     frame\n*     anchor\n*     position\n\nframe：与view中的frame概念相同，（x,y）subLayer左上角相对于supLayer坐标系的位置关系；width, height表示subLayer的宽度和高度。\n\nbounds：与view中的bounds概念相同，（x,y）subLayer左上角相对于自身坐标系的关系；width, height表示subLayer的宽度和高度。\n\nposition：锚点在supLayer坐标系中的位置；\n\nanchorPoint：锚点在自身坐标系中的相对位置，默认值为（0.5，0.5），左上角为（0，0），右下角为（1，1），其他位置以此类推；锚点都是对于自身来讲的. 确定自身的锚点,通常用于做相对的tranform变换.当然也可以用来确定位置；\n\n规律如下\n```\nposition.x = frame.origin.x + anchorPoint.x * frame.size.width；      \n\nposition.y = frame.origin.y + anchorPoint.y * frame.size.height；\n\nframe.size.width = bounds.size.width\n\nframe.size.height = bounds.size.height\n\nframe.origin.x = anchorPoint.x * frame.size.width - position.x；\n\nframe.origin.y = anchorPoint.y * frame.size.height - position.y；\n```\n\n###3、约束布局\n\n**3.1 Autolayout**\n\n引入了几个变量，一个是Top/Bottom Layout Guide（顶部/底部导航），一个是Superview.leading/Trailing Margin（左/右边缘间距）。Top Layout Guide其实是指的根视图的顶部，模拟器在竖屏下有状态栏，状态栏默认高度为20(注:导航栏与状态栏高度不同，导航栏的竖屏默认高度为44，横屏默认高度为32)，则Green View的Y坐标就是20 + 20 = 40。模拟器在横屏下没有状态栏，则Top Layout Guide.Bottom为0，则Green View的Y坐标就是20。Superview.leading Margin在竖屏时为16，横屏是为20。**这些在最新版的iOS有变化！**\n\n**ICS：** 自身内容尺寸(Intrinsic Content Size，以下简称ICS)。\n\nlabel， button， text fields等都是有ICS的，而UIView和NSView是没有ICS的。\n\n View | Intrinsic content size \n ------------|----------\n UIView and NSView | No intrinsic content size.\n Sliders | Defines only the width (iOS).\n Labels, buttons, switches, and text fields | Defines both the height and the width.\n Text views and image views | Intrinsic content size can vary.\n\n**CRCH：** 抗压缩抗拉伸(Compression-Resistance and Content-Hugging，以下简称CRCH)\n\n![autolayout_hugging](resources/autolayout_hugging.png)\n\n**原文：**[Auto Layout基本原理](https://www.jianshu.com/p/c6541ff0bdaf)\n\n**3.2 实现方式：**\n* NSLayoutConstraint\n    \n```\nNSLayoutConstraint.init(item: btn,\n                        attribute: NSLayoutAttribute.top,\n                        relatedBy: NSLayoutRelation.equal,\n                        toItem: view,\n                        attribute: NSLayoutAttribute.top,\n                        multiplier: 1,\n                        constant: 180)\n添加： NSLayoutConstraint.activate(hConstraints)\n```\n* NSLayoutConstraintAnchor\n* VFL\n\n| 功能 | 表达式 |\n| --- | --- |\n|水平方向 |\tH: |\n|垂直方向 |\tV: |\n|Views|\t[view]|\n|关系\t| >=,==,<= |\n|SuperView|\t \\| |\n|空间，间隙 -|\t-|\n|优先级 |\t@value|\n```\nlet hMetrics = [\"middleSpace\": 10, \"rightSpace\": 20]\nlet hViews = [\"label\": label, \"btn\": btn]\nlet hVFL = \"H:[label]-middleSpace-[btn]-rightSpace-|\"\nlet hConstraints:[NSLayoutConstraint] = NSLayoutConstraint.constraints(withVisualFormat: hVFL,\n                                        options: NSLayoutFormatOptions.directionLeadingToTrailing,\n                                        metrics: hMetrics,\n                                        views: hViews)\n添加：NSLayoutConstraint.activate(hConstraints)\n```\n* Masonry、SnapKit\n* Stack Views\n* AutoLayout Xib\n* [Self-Size-Cell](https://www.appcoda.com/self-sizing-cells/) \n\n**3.3 布局过程：**\n\n    updateConstraints -> layoutSubViews -> drawRect\n    \n   |\n   |\n   V\n       \n    约束变化 -> Deferred Layout Pass -> Run Loop\n    \n|\n|\nV\n    \n    Activating或Deactivating\n    设置constant或priority\n    添加和删除视图\n\n###4、注意点\n1、优先级：默认优先级\n2、scrollView 等滚动视图添加优先级特例\n3、视图先添加到俯视图上去\n4、translatesAutoresizingMaskIntoConstraints 属性\n\n参考：\n1、[深入剖析Auto Layout](https://www.jianshu.com/p/d060bef3d620)\n\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之界面显示/iOS自动布局.md","raw":"[TOC]\n\n##iOS自动布局\n\n###1、基础\n|型号 | 屏幕尺寸（inch）|逻辑分辨率（point）|缩放因子（scale factor）|物理分辨率（pixel）|像素密度（PPI）\n| --- | --- | --- |--- | --- | --- |\n|iPhone3GS | 3.5 | 320 * 480 | @1x | 320 * 480 | 163 |\n|iPhone4/4s | 3.5 | 320 * 480 | @2x | 640 * 960 | 326 |\n|iPhone5/5s |4| 320 * 568| @2x |640 * 1136| 326|\n|iPhone6/6s| 4.7| 375 * 667| @2x| 750 * 1334 |326|\n|iPhone6Plus/6s Plus| 5.5| 414 * 736| @3x| 1242 * 2208| 401|\n\n物理分辨率、逻辑分辨率、像素密度：\n\n    PPI = 根号(X*X + Y*Y) / Inch = 163 pixcel/inch\n    \n    scale= 单位长度内的数量比(pixel/point)\n    \n###2、Frame\n\n*     bounds\n*     frame\n*     anchor\n*     position\n\nframe：与view中的frame概念相同，（x,y）subLayer左上角相对于supLayer坐标系的位置关系；width, height表示subLayer的宽度和高度。\n\nbounds：与view中的bounds概念相同，（x,y）subLayer左上角相对于自身坐标系的关系；width, height表示subLayer的宽度和高度。\n\nposition：锚点在supLayer坐标系中的位置；\n\nanchorPoint：锚点在自身坐标系中的相对位置，默认值为（0.5，0.5），左上角为（0，0），右下角为（1，1），其他位置以此类推；锚点都是对于自身来讲的. 确定自身的锚点,通常用于做相对的tranform变换.当然也可以用来确定位置；\n\n规律如下\n```\nposition.x = frame.origin.x + anchorPoint.x * frame.size.width；      \n\nposition.y = frame.origin.y + anchorPoint.y * frame.size.height；\n\nframe.size.width = bounds.size.width\n\nframe.size.height = bounds.size.height\n\nframe.origin.x = anchorPoint.x * frame.size.width - position.x；\n\nframe.origin.y = anchorPoint.y * frame.size.height - position.y；\n```\n\n###3、约束布局\n\n**3.1 Autolayout**\n\n引入了几个变量，一个是Top/Bottom Layout Guide（顶部/底部导航），一个是Superview.leading/Trailing Margin（左/右边缘间距）。Top Layout Guide其实是指的根视图的顶部，模拟器在竖屏下有状态栏，状态栏默认高度为20(注:导航栏与状态栏高度不同，导航栏的竖屏默认高度为44，横屏默认高度为32)，则Green View的Y坐标就是20 + 20 = 40。模拟器在横屏下没有状态栏，则Top Layout Guide.Bottom为0，则Green View的Y坐标就是20。Superview.leading Margin在竖屏时为16，横屏是为20。**这些在最新版的iOS有变化！**\n\n**ICS：** 自身内容尺寸(Intrinsic Content Size，以下简称ICS)。\n\nlabel， button， text fields等都是有ICS的，而UIView和NSView是没有ICS的。\n\n View | Intrinsic content size \n ------------|----------\n UIView and NSView | No intrinsic content size.\n Sliders | Defines only the width (iOS).\n Labels, buttons, switches, and text fields | Defines both the height and the width.\n Text views and image views | Intrinsic content size can vary.\n\n**CRCH：** 抗压缩抗拉伸(Compression-Resistance and Content-Hugging，以下简称CRCH)\n\n![autolayout_hugging](resources/autolayout_hugging.png)\n\n**原文：**[Auto Layout基本原理](https://www.jianshu.com/p/c6541ff0bdaf)\n\n**3.2 实现方式：**\n* NSLayoutConstraint\n    \n```\nNSLayoutConstraint.init(item: btn,\n                        attribute: NSLayoutAttribute.top,\n                        relatedBy: NSLayoutRelation.equal,\n                        toItem: view,\n                        attribute: NSLayoutAttribute.top,\n                        multiplier: 1,\n                        constant: 180)\n添加： NSLayoutConstraint.activate(hConstraints)\n```\n* NSLayoutConstraintAnchor\n* VFL\n\n| 功能 | 表达式 |\n| --- | --- |\n|水平方向 |\tH: |\n|垂直方向 |\tV: |\n|Views|\t[view]|\n|关系\t| >=,==,<= |\n|SuperView|\t \\| |\n|空间，间隙 -|\t-|\n|优先级 |\t@value|\n```\nlet hMetrics = [\"middleSpace\": 10, \"rightSpace\": 20]\nlet hViews = [\"label\": label, \"btn\": btn]\nlet hVFL = \"H:[label]-middleSpace-[btn]-rightSpace-|\"\nlet hConstraints:[NSLayoutConstraint] = NSLayoutConstraint.constraints(withVisualFormat: hVFL,\n                                        options: NSLayoutFormatOptions.directionLeadingToTrailing,\n                                        metrics: hMetrics,\n                                        views: hViews)\n添加：NSLayoutConstraint.activate(hConstraints)\n```\n* Masonry、SnapKit\n* Stack Views\n* AutoLayout Xib\n* [Self-Size-Cell](https://www.appcoda.com/self-sizing-cells/) \n\n**3.3 布局过程：**\n\n    updateConstraints -> layoutSubViews -> drawRect\n    \n   |\n   |\n   V\n       \n    约束变化 -> Deferred Layout Pass -> Run Loop\n    \n|\n|\nV\n    \n    Activating或Deactivating\n    设置constant或priority\n    添加和删除视图\n\n###4、注意点\n1、优先级：默认优先级\n2、scrollView 等滚动视图添加优先级特例\n3、视图先添加到俯视图上去\n4、translatesAutoresizingMaskIntoConstraints 属性\n\n参考：\n1、[深入剖析Auto Layout](https://www.jianshu.com/p/d060bef3d620)\n\n","slug":"iOS学习笔记/iOS系统学习/iOS之界面显示/iOS自动布局","published":1,"date":"2019-03-24T12:44:00.000Z","updated":"2019-03-25T11:01:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjs00278n7u0l1fg1ev","content":"<p>[TOC]</p>\n<p>##iOS自动布局</p>\n<p>###1、基础<br>|型号 | 屏幕尺寸（inch）|逻辑分辨率（point）|缩放因子（scale factor）|物理分辨率（pixel）|像素密度（PPI）<br>| — | — | — |— | — | — |<br>|iPhone3GS | 3.5 | 320 * 480 | @1x | 320 * 480 | 163 |<br>|iPhone4/4s | 3.5 | 320 * 480 | @2x | 640 * 960 | 326 |<br>|iPhone5/5s |4| 320 * 568| @2x |640 * 1136| 326|<br>|iPhone6/6s| 4.7| 375 * 667| @2x| 750 * 1334 |326|<br>|iPhone6Plus/6s Plus| 5.5| 414 * 736| @3x| 1242 * 2208| 401|</p>\n<p>物理分辨率、逻辑分辨率、像素密度：</p>\n<pre><code>PPI = 根号(X*X + Y*Y) / Inch = 163 pixcel/inch\n\nscale= 单位长度内的数量比(pixel/point)\n</code></pre>\n<p>###2、Frame</p>\n<ul>\n<li><pre><code>bounds\n</code></pre>\n</li>\n<li><pre><code>frame\n</code></pre>\n</li>\n<li><pre><code>anchor\n</code></pre>\n</li>\n<li><pre><code>position\n</code></pre>\n</li>\n</ul>\n<p>frame：与view中的frame概念相同，（x,y）subLayer左上角相对于supLayer坐标系的位置关系；width, height表示subLayer的宽度和高度。</p>\n<p>bounds：与view中的bounds概念相同，（x,y）subLayer左上角相对于自身坐标系的关系；width, height表示subLayer的宽度和高度。</p>\n<p>position：锚点在supLayer坐标系中的位置；</p>\n<p>anchorPoint：锚点在自身坐标系中的相对位置，默认值为（0.5，0.5），左上角为（0，0），右下角为（1，1），其他位置以此类推；锚点都是对于自身来讲的. 确定自身的锚点,通常用于做相对的tranform变换.当然也可以用来确定位置；</p>\n<p>规律如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position.x &#x3D; frame.origin.x + anchorPoint.x * frame.size.width；      </span><br><span class=\"line\"></span><br><span class=\"line\">position.y &#x3D; frame.origin.y + anchorPoint.y * frame.size.height；</span><br><span class=\"line\"></span><br><span class=\"line\">frame.size.width &#x3D; bounds.size.width</span><br><span class=\"line\"></span><br><span class=\"line\">frame.size.height &#x3D; bounds.size.height</span><br><span class=\"line\"></span><br><span class=\"line\">frame.origin.x &#x3D; anchorPoint.x * frame.size.width - position.x；</span><br><span class=\"line\"></span><br><span class=\"line\">frame.origin.y &#x3D; anchorPoint.y * frame.size.height - position.y；</span><br></pre></td></tr></table></figure>\n\n<p>###3、约束布局</p>\n<p><strong>3.1 Autolayout</strong></p>\n<p>引入了几个变量，一个是Top/Bottom Layout Guide（顶部/底部导航），一个是Superview.leading/Trailing Margin（左/右边缘间距）。Top Layout Guide其实是指的根视图的顶部，模拟器在竖屏下有状态栏，状态栏默认高度为20(注:导航栏与状态栏高度不同，导航栏的竖屏默认高度为44，横屏默认高度为32)，则Green View的Y坐标就是20 + 20 = 40。模拟器在横屏下没有状态栏，则Top Layout Guide.Bottom为0，则Green View的Y坐标就是20。Superview.leading Margin在竖屏时为16，横屏是为20。<strong>这些在最新版的iOS有变化！</strong></p>\n<p><strong>ICS：</strong> 自身内容尺寸(Intrinsic Content Size，以下简称ICS)。</p>\n<p>label， button， text fields等都是有ICS的，而UIView和NSView是没有ICS的。</p>\n<table>\n<thead>\n<tr>\n<th>View</th>\n<th>Intrinsic content size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>UIView and NSView</td>\n<td>No intrinsic content size.</td>\n</tr>\n<tr>\n<td>Sliders</td>\n<td>Defines only the width (iOS).</td>\n</tr>\n<tr>\n<td>Labels, buttons, switches, and text fields</td>\n<td>Defines both the height and the width.</td>\n</tr>\n<tr>\n<td>Text views and image views</td>\n<td>Intrinsic content size can vary.</td>\n</tr>\n</tbody></table>\n<p><strong>CRCH：</strong> 抗压缩抗拉伸(Compression-Resistance and Content-Hugging，以下简称CRCH)</p>\n<p><img src=\"resources/autolayout_hugging.png\" alt=\"autolayout_hugging\"></p>\n<p><strong>原文：</strong><a href=\"https://www.jianshu.com/p/c6541ff0bdaf\">Auto Layout基本原理</a></p>\n<p><strong>3.2 实现方式：</strong></p>\n<ul>\n<li>NSLayoutConstraint<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSLayoutConstraint.init(item: btn,</span><br><span class=\"line\">                        attribute: NSLayoutAttribute.top,</span><br><span class=\"line\">                        relatedBy: NSLayoutRelation.equal,</span><br><span class=\"line\">                        toItem: view,</span><br><span class=\"line\">                        attribute: NSLayoutAttribute.top,</span><br><span class=\"line\">                        multiplier: 1,</span><br><span class=\"line\">                        constant: 180)</span><br><span class=\"line\">添加： NSLayoutConstraint.activate(hConstraints)</span><br></pre></td></tr></table></figure></li>\n<li>NSLayoutConstraintAnchor</li>\n<li>VFL</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>表达式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>水平方向</td>\n<td>H:</td>\n</tr>\n<tr>\n<td>垂直方向</td>\n<td>V:</td>\n</tr>\n<tr>\n<td>Views</td>\n<td>[view]</td>\n</tr>\n<tr>\n<td>关系</td>\n<td>&gt;=,==,&lt;=</td>\n</tr>\n<tr>\n<td>SuperView</td>\n<td>|</td>\n</tr>\n<tr>\n<td>空间，间隙 -</td>\n<td>-</td>\n</tr>\n<tr>\n<td>优先级</td>\n<td>@value</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let hMetrics &#x3D; [&quot;middleSpace&quot;: 10, &quot;rightSpace&quot;: 20]</span><br><span class=\"line\">let hViews &#x3D; [&quot;label&quot;: label, &quot;btn&quot;: btn]</span><br><span class=\"line\">let hVFL &#x3D; &quot;H:[label]-middleSpace-[btn]-rightSpace-|&quot;</span><br><span class=\"line\">let hConstraints:[NSLayoutConstraint] &#x3D; NSLayoutConstraint.constraints(withVisualFormat: hVFL,</span><br><span class=\"line\">                                        options: NSLayoutFormatOptions.directionLeadingToTrailing,</span><br><span class=\"line\">                                        metrics: hMetrics,</span><br><span class=\"line\">                                        views: hViews)</span><br><span class=\"line\">添加：NSLayoutConstraint.activate(hConstraints)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Masonry、SnapKit</li>\n<li>Stack Views</li>\n<li>AutoLayout Xib</li>\n<li><a href=\"https://www.appcoda.com/self-sizing-cells/\">Self-Size-Cell</a> </li>\n</ul>\n<p><strong>3.3 布局过程：</strong></p>\n<pre><code>updateConstraints -&gt; layoutSubViews -&gt; drawRect\n</code></pre>\n<p>   |<br>   |<br>   V</p>\n<pre><code>约束变化 -&gt; Deferred Layout Pass -&gt; Run Loop\n</code></pre>\n<p>|<br>|<br>V</p>\n<pre><code>Activating或Deactivating\n设置constant或priority\n添加和删除视图\n</code></pre>\n<p>###4、注意点<br>1、优先级：默认优先级<br>2、scrollView 等滚动视图添加优先级特例<br>3、视图先添加到俯视图上去<br>4、translatesAutoresizingMaskIntoConstraints 属性</p>\n<p>参考：<br>1、<a href=\"https://www.jianshu.com/p/d060bef3d620\">深入剖析Auto Layout</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<p>##iOS自动布局</p>\n<p>###1、基础<br>|型号 | 屏幕尺寸（inch）|逻辑分辨率（point）|缩放因子（scale factor）|物理分辨率（pixel）|像素密度（PPI）<br>| — | — | — |— | — | — |<br>|iPhone3GS | 3.5 | 320 * 480 | @1x | 320 * 480 | 163 |<br>|iPhone4/4s | 3.5 | 320 * 480 | @2x | 640 * 960 | 326 |<br>|iPhone5/5s |4| 320 * 568| @2x |640 * 1136| 326|<br>|iPhone6/6s| 4.7| 375 * 667| @2x| 750 * 1334 |326|<br>|iPhone6Plus/6s Plus| 5.5| 414 * 736| @3x| 1242 * 2208| 401|</p>\n<p>物理分辨率、逻辑分辨率、像素密度：</p>\n<pre><code>PPI = 根号(X*X + Y*Y) / Inch = 163 pixcel/inch\n\nscale= 单位长度内的数量比(pixel/point)\n</code></pre>\n<p>###2、Frame</p>\n<ul>\n<li><pre><code>bounds\n</code></pre>\n</li>\n<li><pre><code>frame\n</code></pre>\n</li>\n<li><pre><code>anchor\n</code></pre>\n</li>\n<li><pre><code>position\n</code></pre>\n</li>\n</ul>\n<p>frame：与view中的frame概念相同，（x,y）subLayer左上角相对于supLayer坐标系的位置关系；width, height表示subLayer的宽度和高度。</p>\n<p>bounds：与view中的bounds概念相同，（x,y）subLayer左上角相对于自身坐标系的关系；width, height表示subLayer的宽度和高度。</p>\n<p>position：锚点在supLayer坐标系中的位置；</p>\n<p>anchorPoint：锚点在自身坐标系中的相对位置，默认值为（0.5，0.5），左上角为（0，0），右下角为（1，1），其他位置以此类推；锚点都是对于自身来讲的. 确定自身的锚点,通常用于做相对的tranform变换.当然也可以用来确定位置；</p>\n<p>规律如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position.x &#x3D; frame.origin.x + anchorPoint.x * frame.size.width；      </span><br><span class=\"line\"></span><br><span class=\"line\">position.y &#x3D; frame.origin.y + anchorPoint.y * frame.size.height；</span><br><span class=\"line\"></span><br><span class=\"line\">frame.size.width &#x3D; bounds.size.width</span><br><span class=\"line\"></span><br><span class=\"line\">frame.size.height &#x3D; bounds.size.height</span><br><span class=\"line\"></span><br><span class=\"line\">frame.origin.x &#x3D; anchorPoint.x * frame.size.width - position.x；</span><br><span class=\"line\"></span><br><span class=\"line\">frame.origin.y &#x3D; anchorPoint.y * frame.size.height - position.y；</span><br></pre></td></tr></table></figure>\n\n<p>###3、约束布局</p>\n<p><strong>3.1 Autolayout</strong></p>\n<p>引入了几个变量，一个是Top/Bottom Layout Guide（顶部/底部导航），一个是Superview.leading/Trailing Margin（左/右边缘间距）。Top Layout Guide其实是指的根视图的顶部，模拟器在竖屏下有状态栏，状态栏默认高度为20(注:导航栏与状态栏高度不同，导航栏的竖屏默认高度为44，横屏默认高度为32)，则Green View的Y坐标就是20 + 20 = 40。模拟器在横屏下没有状态栏，则Top Layout Guide.Bottom为0，则Green View的Y坐标就是20。Superview.leading Margin在竖屏时为16，横屏是为20。<strong>这些在最新版的iOS有变化！</strong></p>\n<p><strong>ICS：</strong> 自身内容尺寸(Intrinsic Content Size，以下简称ICS)。</p>\n<p>label， button， text fields等都是有ICS的，而UIView和NSView是没有ICS的。</p>\n<table>\n<thead>\n<tr>\n<th>View</th>\n<th>Intrinsic content size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>UIView and NSView</td>\n<td>No intrinsic content size.</td>\n</tr>\n<tr>\n<td>Sliders</td>\n<td>Defines only the width (iOS).</td>\n</tr>\n<tr>\n<td>Labels, buttons, switches, and text fields</td>\n<td>Defines both the height and the width.</td>\n</tr>\n<tr>\n<td>Text views and image views</td>\n<td>Intrinsic content size can vary.</td>\n</tr>\n</tbody></table>\n<p><strong>CRCH：</strong> 抗压缩抗拉伸(Compression-Resistance and Content-Hugging，以下简称CRCH)</p>\n<p><img src=\"resources/autolayout_hugging.png\" alt=\"autolayout_hugging\"></p>\n<p><strong>原文：</strong><a href=\"https://www.jianshu.com/p/c6541ff0bdaf\">Auto Layout基本原理</a></p>\n<p><strong>3.2 实现方式：</strong></p>\n<ul>\n<li>NSLayoutConstraint<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSLayoutConstraint.init(item: btn,</span><br><span class=\"line\">                        attribute: NSLayoutAttribute.top,</span><br><span class=\"line\">                        relatedBy: NSLayoutRelation.equal,</span><br><span class=\"line\">                        toItem: view,</span><br><span class=\"line\">                        attribute: NSLayoutAttribute.top,</span><br><span class=\"line\">                        multiplier: 1,</span><br><span class=\"line\">                        constant: 180)</span><br><span class=\"line\">添加： NSLayoutConstraint.activate(hConstraints)</span><br></pre></td></tr></table></figure></li>\n<li>NSLayoutConstraintAnchor</li>\n<li>VFL</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>表达式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>水平方向</td>\n<td>H:</td>\n</tr>\n<tr>\n<td>垂直方向</td>\n<td>V:</td>\n</tr>\n<tr>\n<td>Views</td>\n<td>[view]</td>\n</tr>\n<tr>\n<td>关系</td>\n<td>&gt;=,==,&lt;=</td>\n</tr>\n<tr>\n<td>SuperView</td>\n<td>|</td>\n</tr>\n<tr>\n<td>空间，间隙 -</td>\n<td>-</td>\n</tr>\n<tr>\n<td>优先级</td>\n<td>@value</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let hMetrics &#x3D; [&quot;middleSpace&quot;: 10, &quot;rightSpace&quot;: 20]</span><br><span class=\"line\">let hViews &#x3D; [&quot;label&quot;: label, &quot;btn&quot;: btn]</span><br><span class=\"line\">let hVFL &#x3D; &quot;H:[label]-middleSpace-[btn]-rightSpace-|&quot;</span><br><span class=\"line\">let hConstraints:[NSLayoutConstraint] &#x3D; NSLayoutConstraint.constraints(withVisualFormat: hVFL,</span><br><span class=\"line\">                                        options: NSLayoutFormatOptions.directionLeadingToTrailing,</span><br><span class=\"line\">                                        metrics: hMetrics,</span><br><span class=\"line\">                                        views: hViews)</span><br><span class=\"line\">添加：NSLayoutConstraint.activate(hConstraints)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Masonry、SnapKit</li>\n<li>Stack Views</li>\n<li>AutoLayout Xib</li>\n<li><a href=\"https://www.appcoda.com/self-sizing-cells/\">Self-Size-Cell</a> </li>\n</ul>\n<p><strong>3.3 布局过程：</strong></p>\n<pre><code>updateConstraints -&gt; layoutSubViews -&gt; drawRect\n</code></pre>\n<p>   |<br>   |<br>   V</p>\n<pre><code>约束变化 -&gt; Deferred Layout Pass -&gt; Run Loop\n</code></pre>\n<p>|<br>|<br>V</p>\n<pre><code>Activating或Deactivating\n设置constant或priority\n添加和删除视图\n</code></pre>\n<p>###4、注意点<br>1、优先级：默认优先级<br>2、scrollView 等滚动视图添加优先级特例<br>3、视图先添加到俯视图上去<br>4、translatesAutoresizingMaskIntoConstraints 属性</p>\n<p>参考：<br>1、<a href=\"https://www.jianshu.com/p/d060bef3d620\">深入剖析Auto Layout</a></p>\n"},{"_content":"Shell\n\nAppleScript\n\nJenkins\n\nXcodeServer\n\n禅道","source":"_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/iOS之CI集成.md","raw":"Shell\n\nAppleScript\n\nJenkins\n\nXcodeServer\n\n禅道","slug":"iOS学习笔记/iOS系统学习/iOS之项目管理/iOS之CI集成","published":1,"date":"2019-03-24T12:54:32.000Z","updated":"2019-03-24T12:55:37.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjt00288n7u60gp9a1i","content":"<p>Shell</p>\n<p>AppleScript</p>\n<p>Jenkins</p>\n<p>XcodeServer</p>\n<p>禅道</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Shell</p>\n<p>AppleScript</p>\n<p>Jenkins</p>\n<p>XcodeServer</p>\n<p>禅道</p>\n"},{"_content":"Information about project \"_Pods\":\n    Targets:\n        Pods-sm_ios_base_Example\n        Pods-sm_ios_base_Tests\n        sm_ios_base\n\n    Build Configurations:\n        Debug\n        Release\n\n    If no build configuration is specified and -scheme is not passed then \"Release\" is used.\n\n    Schemes:\n        Pods-sm_ios_base_Example\n        Pods-sm_ios_base_Example\n        Pods-sm_ios_base_Tests\n        Pods-sm_ios_base_Tests\n        sm_ios_base\n        sm_ios_base\n\n\n\nxcodebuild -workspace sm_ios_base.xcworkspace -scheme sm_ios_base-Example -configuration Debug\n\nxcodebuild -project _Pods.xcodeproj -target sm_ios_base  -configuration Debug\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/iOS自动化编译打包.md","raw":"Information about project \"_Pods\":\n    Targets:\n        Pods-sm_ios_base_Example\n        Pods-sm_ios_base_Tests\n        sm_ios_base\n\n    Build Configurations:\n        Debug\n        Release\n\n    If no build configuration is specified and -scheme is not passed then \"Release\" is used.\n\n    Schemes:\n        Pods-sm_ios_base_Example\n        Pods-sm_ios_base_Example\n        Pods-sm_ios_base_Tests\n        Pods-sm_ios_base_Tests\n        sm_ios_base\n        sm_ios_base\n\n\n\nxcodebuild -workspace sm_ios_base.xcworkspace -scheme sm_ios_base-Example -configuration Debug\n\nxcodebuild -project _Pods.xcodeproj -target sm_ios_base  -configuration Debug\n","slug":"iOS学习笔记/iOS系统学习/iOS之项目管理/iOS自动化编译打包","published":1,"date":"2019-05-15T04:05:50.000Z","updated":"2019-05-15T04:05:50.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjt00298n7uanj5b8l4","content":"<p>Information about project “_Pods”:<br>    Targets:<br>        Pods-sm_ios_base_Example<br>        Pods-sm_ios_base_Tests<br>        sm_ios_base</p>\n<pre><code>Build Configurations:\n    Debug\n    Release\n\nIf no build configuration is specified and -scheme is not passed then &quot;Release&quot; is used.\n\nSchemes:\n    Pods-sm_ios_base_Example\n    Pods-sm_ios_base_Example\n    Pods-sm_ios_base_Tests\n    Pods-sm_ios_base_Tests\n    sm_ios_base\n    sm_ios_base\n</code></pre>\n<p>xcodebuild -workspace sm_ios_base.xcworkspace -scheme sm_ios_base-Example -configuration Debug</p>\n<p>xcodebuild -project _Pods.xcodeproj -target sm_ios_base  -configuration Debug</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Information about project “_Pods”:<br>    Targets:<br>        Pods-sm_ios_base_Example<br>        Pods-sm_ios_base_Tests<br>        sm_ios_base</p>\n<pre><code>Build Configurations:\n    Debug\n    Release\n\nIf no build configuration is specified and -scheme is not passed then &quot;Release&quot; is used.\n\nSchemes:\n    Pods-sm_ios_base_Example\n    Pods-sm_ios_base_Example\n    Pods-sm_ios_base_Tests\n    Pods-sm_ios_base_Tests\n    sm_ios_base\n    sm_ios_base\n</code></pre>\n<p>xcodebuild -workspace sm_ios_base.xcworkspace -scheme sm_ios_base-Example -configuration Debug</p>\n<p>xcodebuild -project _Pods.xcodeproj -target sm_ios_base  -configuration Debug</p>\n"},{"_content":"fir.im\n```\n#上传至fir\nfir publish ${HOME}/Desktop/Package/${IPA_NAME} -Q -T 9cfdfbd241d63197a3b83a608708e16f --password sumian\n```\n\n蒲公英\n```\n#上传至蒲公英\n#curl -F \"file=@${IPA_PATH}\" \n      -F \"uKey=******************2f5e99f3a7495\" \n      -F \"_api_key  - 0 : 85 =******************eb2d5cb44d93183\" http://www.pgyer.com/apiv1/app/upload\n```\n\n自建服务器交付环境\n* 打包\n\t\n\t   版本、scheme、target、workspace、profile、签名、archive、IPA\n\t\n* 上传\n* 下载\n* 多ID分发[批量IPA包管理]\n\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之项目管理/iOS项目管理之杂项.md","raw":"fir.im\n```\n#上传至fir\nfir publish ${HOME}/Desktop/Package/${IPA_NAME} -Q -T 9cfdfbd241d63197a3b83a608708e16f --password sumian\n```\n\n蒲公英\n```\n#上传至蒲公英\n#curl -F \"file=@${IPA_PATH}\" \n      -F \"uKey=******************2f5e99f3a7495\" \n      -F \"_api_key  - 0 : 85 =******************eb2d5cb44d93183\" http://www.pgyer.com/apiv1/app/upload\n```\n\n自建服务器交付环境\n* 打包\n\t\n\t   版本、scheme、target、workspace、profile、签名、archive、IPA\n\t\n* 上传\n* 下载\n* 多ID分发[批量IPA包管理]\n\n","slug":"iOS学习笔记/iOS系统学习/iOS之项目管理/iOS项目管理之杂项","published":1,"date":"2019-03-24T12:56:25.000Z","updated":"2019-04-23T06:39:02.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgju002a8n7u8syecmtq","content":"<p>fir.im</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#上传至fir</span><br><span class=\"line\">fir publish $&#123;HOME&#125;&#x2F;Desktop&#x2F;Package&#x2F;$&#123;IPA_NAME&#125; -Q -T 9cfdfbd241d63197a3b83a608708e16f --password sumian</span><br></pre></td></tr></table></figure>\n\n<p>蒲公英</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#上传至蒲公英</span><br><span class=\"line\">#curl -F &quot;file&#x3D;@$&#123;IPA_PATH&#125;&quot; </span><br><span class=\"line\">      -F &quot;uKey&#x3D;******************2f5e99f3a7495&quot; </span><br><span class=\"line\">      -F &quot;_api_key  - 0 : 85 &#x3D;******************eb2d5cb44d93183&quot; http:&#x2F;&#x2F;www.pgyer.com&#x2F;apiv1&#x2F;app&#x2F;upload</span><br></pre></td></tr></table></figure>\n\n<p>自建服务器交付环境</p>\n<ul>\n<li>打包<pre><code> 版本、scheme、target、workspace、profile、签名、archive、IPA\n</code></pre>\n</li>\n<li>上传</li>\n<li>下载</li>\n<li>多ID分发[批量IPA包管理]</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>fir.im</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#上传至fir</span><br><span class=\"line\">fir publish $&#123;HOME&#125;&#x2F;Desktop&#x2F;Package&#x2F;$&#123;IPA_NAME&#125; -Q -T 9cfdfbd241d63197a3b83a608708e16f --password sumian</span><br></pre></td></tr></table></figure>\n\n<p>蒲公英</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#上传至蒲公英</span><br><span class=\"line\">#curl -F &quot;file&#x3D;@$&#123;IPA_PATH&#125;&quot; </span><br><span class=\"line\">      -F &quot;uKey&#x3D;******************2f5e99f3a7495&quot; </span><br><span class=\"line\">      -F &quot;_api_key  - 0 : 85 &#x3D;******************eb2d5cb44d93183&quot; http:&#x2F;&#x2F;www.pgyer.com&#x2F;apiv1&#x2F;app&#x2F;upload</span><br></pre></td></tr></table></figure>\n\n<p>自建服务器交付环境</p>\n<ul>\n<li>打包<pre><code> 版本、scheme、target、workspace、profile、签名、archive、IPA\n</code></pre>\n</li>\n<li>上传</li>\n<li>下载</li>\n<li>多ID分发[批量IPA包管理]</li>\n</ul>\n"},{"_content":"[汇编语言入门教程](http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html)\n\n```\n_add_a_and_b:\n   push   %ebx\n   mov    %eax, [%esp+8] \n   mov    %ebx, [%esp+12]\n   add    %eax, %ebx \n   pop    %ebx \n   ret  \n\n_main:\n   push   3\n   push   2\n   call   _add_a_and_b \n   add    %esp, 8\n   ret\n```\n\nhttps://blog.nelhage.com/2010/10/amd64-and-va_arg/\n\nhttp://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf\n\nhttps://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html\n\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/Assemble.md","raw":"[汇编语言入门教程](http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html)\n\n```\n_add_a_and_b:\n   push   %ebx\n   mov    %eax, [%esp+8] \n   mov    %ebx, [%esp+12]\n   add    %eax, %ebx \n   pop    %ebx \n   ret  \n\n_main:\n   push   3\n   push   2\n   call   _add_a_and_b \n   add    %esp, 8\n   ret\n```\n\nhttps://blog.nelhage.com/2010/10/amd64-and-va_arg/\n\nhttp://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf\n\nhttps://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html\n\n","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/Assemble","published":1,"date":"2019-03-24T13:01:23.000Z","updated":"2019-03-27T06:06:50.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjv002b8n7u9mhaavwt","content":"<p><a href=\"http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html\">汇编语言入门教程</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_add_a_and_b:</span><br><span class=\"line\">   push   %ebx</span><br><span class=\"line\">   mov    %eax, [%esp+8] </span><br><span class=\"line\">   mov    %ebx, [%esp+12]</span><br><span class=\"line\">   add    %eax, %ebx </span><br><span class=\"line\">   pop    %ebx </span><br><span class=\"line\">   ret  </span><br><span class=\"line\"></span><br><span class=\"line\">_main:</span><br><span class=\"line\">   push   3</span><br><span class=\"line\">   push   2</span><br><span class=\"line\">   call   _add_a_and_b </span><br><span class=\"line\">   add    %esp, 8</span><br><span class=\"line\">   ret</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.nelhage.com/2010/10/amd64-and-va_arg/\">https://blog.nelhage.com/2010/10/amd64-and-va_arg/</a></p>\n<p><a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf\">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf</a></p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html\">https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html\">汇编语言入门教程</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_add_a_and_b:</span><br><span class=\"line\">   push   %ebx</span><br><span class=\"line\">   mov    %eax, [%esp+8] </span><br><span class=\"line\">   mov    %ebx, [%esp+12]</span><br><span class=\"line\">   add    %eax, %ebx </span><br><span class=\"line\">   pop    %ebx </span><br><span class=\"line\">   ret  </span><br><span class=\"line\"></span><br><span class=\"line\">_main:</span><br><span class=\"line\">   push   3</span><br><span class=\"line\">   push   2</span><br><span class=\"line\">   call   _add_a_and_b </span><br><span class=\"line\">   add    %esp, 8</span><br><span class=\"line\">   ret</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.nelhage.com/2010/10/amd64-and-va_arg/\">https://blog.nelhage.com/2010/10/amd64-and-va_arg/</a></p>\n<p><a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf\">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf</a></p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html\">https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html</a></p>\n"},{"_content":"swift 构造器\n\n1、默认初始化器\nSwift 为所有没有提供初始化器的结构体或类提供了一个默认的初始化器来给所有的属性提供了默认值。\n这个默认的初始化器只是简单地创建了一个所有属性都有默认值的新实例\n\n2、结构体类型的成员初始化器\n如果结构体类型中没有定义任何自定义初始化器，它会自动获得一个成员初始化器。\n不同于默认初始化器，结构体会接收成员初始化器即使它的存储属性没有默认值。\n\n3、值类型的初始化器委托\n初始化器可以调用其他初始化器来执行部分实例的初始化。这个过程，就是所谓的初始化器委托，避免了多个初始化器里冗余代码。\n\n初始化器委托的运作，以及允许那些形式的委托，这些规则对于值类型和类类型是不同的。值类型(结构体和枚举)不支持继承，\n所以他它们的初始化器委托的过程相当简单，因为它们只能提供它们自己为另一个初始化器委托。如同继承里描述的那样，\n总之，类可以从其他类继承。这就意味着类有额外的责任来确保它们继承的所有存储属性在初始化期间都分配了一个合适的值。\n这些责任在下边的类的继承和初始化里做详述。\n\n4、类的继承和初始化\n所有类的存储属性——包括从它的父类继承的所有属性——都必须在初始化期间分配初始值。\n\nSwift 为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值。这些就是所谓的指定初始化器和便捷初始化器。\n*指定初始化器\n\n*便利构造器\n   convenience:便利，使用convenience修饰的构造函数叫做便利构造函数\n   便利构造函数通常用在对系统的类进行构造函数的扩充时使用。\n   便利构造函数的特点：\n   1、便利构造函数通常都是写在extension里面\n   2、便利函数init前面需要加载convenience\n   3、在便利构造函数中需要明确的调用self.init()\n\n4.1、类类型的初始化器委托\n为了简化指定和便捷初始化器之间的调用关系，Swift 在初始化器之间的委托调用有下面的三个规则:\n\n规则 1\n指定初始化器必须从它的直系父类调用指定初始化器。\n\n规则 2\n便捷初始化器必须从相同的类里调用另一个初始化器。\n\n规则 3\n便捷初始化器最终必须调用一个指定初始化器。\n\n4.2、两段式初始化\nSwift 的类初始化是一个两段式过程。在第一个阶段，每一个存储属性被引入类为分配了一个初始值。\n一旦每个存储属性的初始状态被确定，第二个阶段就开始了，每个类都有机会在新的实例准备使用之前来定制它的存储属性。\n\nSwift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成：\n\n安全检查 1\n指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。\n\n如上所述，一个对象的内存只有在其所有储存型属性确定之后才能完全初始化。为了满足这一规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。\n\n安全检查 2\n指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值。如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖。\n\n安全检查 3\n便捷初始化器必须先委托同类中的其它初始化器，然后再为任意属性赋新值（包括同类里定义的属性）。如果没这么做，\n便捷构初始化器赋予的新值将被自己类中其它指定初始化器所覆盖。\n\n安全检查 4\n初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用 self 作为值。\n\n直到第一阶段结束类实例才完全合法。属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。\n\n以下是两段初始化过程，基于上述四种检查的流程：\n\n4.3、两端初始化总结：\n阶段 1\n指定或便捷初始化器在类中被调用；\n为这个类的新实例分配内存。内存还没有被初始化；\n这个类的指定初始化器确保所有由此类引入的存储属性都有一个值。现在这些存储属性的内存被初始化了；\n指定初始化器上交父类的初始化器为其存储属性执行相同的任务；\n这个调用父类初始化器的过程将沿着初始化器链一直向上进行，直到到达初始化器链的最顶部；\n一旦达了初始化器链的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成。\n\n阶段 2\n从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问 self 并且可以修改它的属性，调用它的实例方法等等；\n最终，链中任何便捷初始化器都有机会定制实例以及使用 slef 。\n\n5、初始化器的继承和重写\n\n不像在 Objective-C 中的子类，Swift 的子类不会默认继承父类的初始化器。\nSwift 的这种机制防止父类的简单初始化器被一个更专用的子类继承并被用来创建一个没有完全或错误初始化的新实例的情况发生。\n\n初始化器的自动继承\n如上所述，子类默认不会继承父类初始化器。总之，在特定的情况下父类初始化器是可以被自动继承的。实际上，这意味着在许多场景中你不必重写父类初始化器，只要可以安全操作，你就可以毫不费力地继承父类的初始化器。\n\n假设你为你子类引入的任何新的属性都提供了默认值，请遵守以下2个规则：\n\n规则1\n如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器。\n\n规则2\n如果你的子类提供了所有父类指定初始化器的实现——要么是通过规则1继承来的，要么通过在定义中提供自定义实现的——那么它自动继承所有的父类便捷初始化器。\n\n就算你的子类添加了更多的便捷初始化器，这些规则仍然适用。\n\n*注意\n子类能够以便捷初始化器的形式实现父类指定初始化器来作为满足规则2的一部分。\n\n6、可失败初始化器\n定义类、结构体或枚举初始化时可以失败在某些情况下会管大用。这个失败可能由以下几种方式触发，包括给初始化传入无效的形式参数值，\n或缺少某种外部所需的资源，又或是其他阻止初始化的情况。\n\n6.1、枚举的可失败初始化器\n你可以使用一个可失败初始化器来在带一个或多个形式参数的枚举中选择合适的情况。如果提供的形式参数没有匹配合适的情况初始化器就可能失败。\n\n6.2、带有原始值枚举的可失败初始化器\n带有原始值的枚举会自动获得一个可失败初始化器 init?(rawValue:) ，\n该可失败初始化器接收一个名为 rawValue 的合适的原始值类型形式参数如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就触发初始化失败。\n\n为了妥善处理这种可能失败的情况，在类、结构体或枚举中定义一个或多个可失败的初始化器。通过在 init 关键字后面添加问号( init? )来写。\n\n6.3、初始化失败的传递\n类，结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器。\n类似地，子类的可失败初始化器可以向上委托到父类的可失败初始化器。\n\n无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。\n\n6.4、重写可失败初始化器\n你可以在子类里重写父类的可失败初始化器。就好比其他的初始化器。或者，你可以用子类的非可失败初始化器来重写父类可失败初始化器。\n这样允许你定义一个初始化不会失败的子类，尽管父类的初始化允许失败。\n\n注意如果你用非可失败的子类初始化器重写了一个可失败初始化器，向上委托到父类初始化器的唯一办法是强制展开父类可失败初始化器的结果。\n\n6.5、可失败初始化器 init!\n通常来讲我们通过在 init 关键字后添加问号 ( init? )的方式来定义一个可失败初始化器以创建一个合适类型的可选项实例。\n另外，你也可以使用可失败初始化器创建一个隐式展开具有合适类型的可选项实例。通过在 init 后面添加惊叹号( init! )是不是问号。\n\n你可以在 init? 初始化器中委托调用 init! 初始化器，反之亦然。 你也可以用 init! 重写 init? ，反之亦然。\n你还可以用 init 委托调用 init! ，尽管当 init! 初始化器导致初始化失败时会触发断言。\n\n7、必要初始化器\n在类的初始化器前添加 required  修饰符来表明所有该类的子类都必须实现该初始化器：\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/Swift 构造器.md","raw":"swift 构造器\n\n1、默认初始化器\nSwift 为所有没有提供初始化器的结构体或类提供了一个默认的初始化器来给所有的属性提供了默认值。\n这个默认的初始化器只是简单地创建了一个所有属性都有默认值的新实例\n\n2、结构体类型的成员初始化器\n如果结构体类型中没有定义任何自定义初始化器，它会自动获得一个成员初始化器。\n不同于默认初始化器，结构体会接收成员初始化器即使它的存储属性没有默认值。\n\n3、值类型的初始化器委托\n初始化器可以调用其他初始化器来执行部分实例的初始化。这个过程，就是所谓的初始化器委托，避免了多个初始化器里冗余代码。\n\n初始化器委托的运作，以及允许那些形式的委托，这些规则对于值类型和类类型是不同的。值类型(结构体和枚举)不支持继承，\n所以他它们的初始化器委托的过程相当简单，因为它们只能提供它们自己为另一个初始化器委托。如同继承里描述的那样，\n总之，类可以从其他类继承。这就意味着类有额外的责任来确保它们继承的所有存储属性在初始化期间都分配了一个合适的值。\n这些责任在下边的类的继承和初始化里做详述。\n\n4、类的继承和初始化\n所有类的存储属性——包括从它的父类继承的所有属性——都必须在初始化期间分配初始值。\n\nSwift 为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值。这些就是所谓的指定初始化器和便捷初始化器。\n*指定初始化器\n\n*便利构造器\n   convenience:便利，使用convenience修饰的构造函数叫做便利构造函数\n   便利构造函数通常用在对系统的类进行构造函数的扩充时使用。\n   便利构造函数的特点：\n   1、便利构造函数通常都是写在extension里面\n   2、便利函数init前面需要加载convenience\n   3、在便利构造函数中需要明确的调用self.init()\n\n4.1、类类型的初始化器委托\n为了简化指定和便捷初始化器之间的调用关系，Swift 在初始化器之间的委托调用有下面的三个规则:\n\n规则 1\n指定初始化器必须从它的直系父类调用指定初始化器。\n\n规则 2\n便捷初始化器必须从相同的类里调用另一个初始化器。\n\n规则 3\n便捷初始化器最终必须调用一个指定初始化器。\n\n4.2、两段式初始化\nSwift 的类初始化是一个两段式过程。在第一个阶段，每一个存储属性被引入类为分配了一个初始值。\n一旦每个存储属性的初始状态被确定，第二个阶段就开始了，每个类都有机会在新的实例准备使用之前来定制它的存储属性。\n\nSwift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成：\n\n安全检查 1\n指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。\n\n如上所述，一个对象的内存只有在其所有储存型属性确定之后才能完全初始化。为了满足这一规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。\n\n安全检查 2\n指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值。如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖。\n\n安全检查 3\n便捷初始化器必须先委托同类中的其它初始化器，然后再为任意属性赋新值（包括同类里定义的属性）。如果没这么做，\n便捷构初始化器赋予的新值将被自己类中其它指定初始化器所覆盖。\n\n安全检查 4\n初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用 self 作为值。\n\n直到第一阶段结束类实例才完全合法。属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。\n\n以下是两段初始化过程，基于上述四种检查的流程：\n\n4.3、两端初始化总结：\n阶段 1\n指定或便捷初始化器在类中被调用；\n为这个类的新实例分配内存。内存还没有被初始化；\n这个类的指定初始化器确保所有由此类引入的存储属性都有一个值。现在这些存储属性的内存被初始化了；\n指定初始化器上交父类的初始化器为其存储属性执行相同的任务；\n这个调用父类初始化器的过程将沿着初始化器链一直向上进行，直到到达初始化器链的最顶部；\n一旦达了初始化器链的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成。\n\n阶段 2\n从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问 self 并且可以修改它的属性，调用它的实例方法等等；\n最终，链中任何便捷初始化器都有机会定制实例以及使用 slef 。\n\n5、初始化器的继承和重写\n\n不像在 Objective-C 中的子类，Swift 的子类不会默认继承父类的初始化器。\nSwift 的这种机制防止父类的简单初始化器被一个更专用的子类继承并被用来创建一个没有完全或错误初始化的新实例的情况发生。\n\n初始化器的自动继承\n如上所述，子类默认不会继承父类初始化器。总之，在特定的情况下父类初始化器是可以被自动继承的。实际上，这意味着在许多场景中你不必重写父类初始化器，只要可以安全操作，你就可以毫不费力地继承父类的初始化器。\n\n假设你为你子类引入的任何新的属性都提供了默认值，请遵守以下2个规则：\n\n规则1\n如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器。\n\n规则2\n如果你的子类提供了所有父类指定初始化器的实现——要么是通过规则1继承来的，要么通过在定义中提供自定义实现的——那么它自动继承所有的父类便捷初始化器。\n\n就算你的子类添加了更多的便捷初始化器，这些规则仍然适用。\n\n*注意\n子类能够以便捷初始化器的形式实现父类指定初始化器来作为满足规则2的一部分。\n\n6、可失败初始化器\n定义类、结构体或枚举初始化时可以失败在某些情况下会管大用。这个失败可能由以下几种方式触发，包括给初始化传入无效的形式参数值，\n或缺少某种外部所需的资源，又或是其他阻止初始化的情况。\n\n6.1、枚举的可失败初始化器\n你可以使用一个可失败初始化器来在带一个或多个形式参数的枚举中选择合适的情况。如果提供的形式参数没有匹配合适的情况初始化器就可能失败。\n\n6.2、带有原始值枚举的可失败初始化器\n带有原始值的枚举会自动获得一个可失败初始化器 init?(rawValue:) ，\n该可失败初始化器接收一个名为 rawValue 的合适的原始值类型形式参数如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就触发初始化失败。\n\n为了妥善处理这种可能失败的情况，在类、结构体或枚举中定义一个或多个可失败的初始化器。通过在 init 关键字后面添加问号( init? )来写。\n\n6.3、初始化失败的传递\n类，结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器。\n类似地，子类的可失败初始化器可以向上委托到父类的可失败初始化器。\n\n无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。\n\n6.4、重写可失败初始化器\n你可以在子类里重写父类的可失败初始化器。就好比其他的初始化器。或者，你可以用子类的非可失败初始化器来重写父类可失败初始化器。\n这样允许你定义一个初始化不会失败的子类，尽管父类的初始化允许失败。\n\n注意如果你用非可失败的子类初始化器重写了一个可失败初始化器，向上委托到父类初始化器的唯一办法是强制展开父类可失败初始化器的结果。\n\n6.5、可失败初始化器 init!\n通常来讲我们通过在 init 关键字后添加问号 ( init? )的方式来定义一个可失败初始化器以创建一个合适类型的可选项实例。\n另外，你也可以使用可失败初始化器创建一个隐式展开具有合适类型的可选项实例。通过在 init 后面添加惊叹号( init! )是不是问号。\n\n你可以在 init? 初始化器中委托调用 init! 初始化器，反之亦然。 你也可以用 init! 重写 init? ，反之亦然。\n你还可以用 init 委托调用 init! ，尽管当 init! 初始化器导致初始化失败时会触发断言。\n\n7、必要初始化器\n在类的初始化器前添加 required  修饰符来表明所有该类的子类都必须实现该初始化器：\n","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/Swift 构造器","published":1,"date":"2019-02-25T09:33:03.000Z","updated":"2019-02-25T09:40:25.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjv002c8n7u5zdrap2g","content":"<p>swift 构造器</p>\n<p>1、默认初始化器<br>Swift 为所有没有提供初始化器的结构体或类提供了一个默认的初始化器来给所有的属性提供了默认值。<br>这个默认的初始化器只是简单地创建了一个所有属性都有默认值的新实例</p>\n<p>2、结构体类型的成员初始化器<br>如果结构体类型中没有定义任何自定义初始化器，它会自动获得一个成员初始化器。<br>不同于默认初始化器，结构体会接收成员初始化器即使它的存储属性没有默认值。</p>\n<p>3、值类型的初始化器委托<br>初始化器可以调用其他初始化器来执行部分实例的初始化。这个过程，就是所谓的初始化器委托，避免了多个初始化器里冗余代码。</p>\n<p>初始化器委托的运作，以及允许那些形式的委托，这些规则对于值类型和类类型是不同的。值类型(结构体和枚举)不支持继承，<br>所以他它们的初始化器委托的过程相当简单，因为它们只能提供它们自己为另一个初始化器委托。如同继承里描述的那样，<br>总之，类可以从其他类继承。这就意味着类有额外的责任来确保它们继承的所有存储属性在初始化期间都分配了一个合适的值。<br>这些责任在下边的类的继承和初始化里做详述。</p>\n<p>4、类的继承和初始化<br>所有类的存储属性——包括从它的父类继承的所有属性——都必须在初始化期间分配初始值。</p>\n<p>Swift 为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值。这些就是所谓的指定初始化器和便捷初始化器。<br>*指定初始化器</p>\n<p>*便利构造器<br>   convenience:便利，使用convenience修饰的构造函数叫做便利构造函数<br>   便利构造函数通常用在对系统的类进行构造函数的扩充时使用。<br>   便利构造函数的特点：<br>   1、便利构造函数通常都是写在extension里面<br>   2、便利函数init前面需要加载convenience<br>   3、在便利构造函数中需要明确的调用self.init()</p>\n<p>4.1、类类型的初始化器委托<br>为了简化指定和便捷初始化器之间的调用关系，Swift 在初始化器之间的委托调用有下面的三个规则:</p>\n<p>规则 1<br>指定初始化器必须从它的直系父类调用指定初始化器。</p>\n<p>规则 2<br>便捷初始化器必须从相同的类里调用另一个初始化器。</p>\n<p>规则 3<br>便捷初始化器最终必须调用一个指定初始化器。</p>\n<p>4.2、两段式初始化<br>Swift 的类初始化是一个两段式过程。在第一个阶段，每一个存储属性被引入类为分配了一个初始值。<br>一旦每个存储属性的初始状态被确定，第二个阶段就开始了，每个类都有机会在新的实例准备使用之前来定制它的存储属性。</p>\n<p>Swift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成：</p>\n<p>安全检查 1<br>指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。</p>\n<p>如上所述，一个对象的内存只有在其所有储存型属性确定之后才能完全初始化。为了满足这一规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。</p>\n<p>安全检查 2<br>指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值。如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖。</p>\n<p>安全检查 3<br>便捷初始化器必须先委托同类中的其它初始化器，然后再为任意属性赋新值（包括同类里定义的属性）。如果没这么做，<br>便捷构初始化器赋予的新值将被自己类中其它指定初始化器所覆盖。</p>\n<p>安全检查 4<br>初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用 self 作为值。</p>\n<p>直到第一阶段结束类实例才完全合法。属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。</p>\n<p>以下是两段初始化过程，基于上述四种检查的流程：</p>\n<p>4.3、两端初始化总结：<br>阶段 1<br>指定或便捷初始化器在类中被调用；<br>为这个类的新实例分配内存。内存还没有被初始化；<br>这个类的指定初始化器确保所有由此类引入的存储属性都有一个值。现在这些存储属性的内存被初始化了；<br>指定初始化器上交父类的初始化器为其存储属性执行相同的任务；<br>这个调用父类初始化器的过程将沿着初始化器链一直向上进行，直到到达初始化器链的最顶部；<br>一旦达了初始化器链的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成。</p>\n<p>阶段 2<br>从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问 self 并且可以修改它的属性，调用它的实例方法等等；<br>最终，链中任何便捷初始化器都有机会定制实例以及使用 slef 。</p>\n<p>5、初始化器的继承和重写</p>\n<p>不像在 Objective-C 中的子类，Swift 的子类不会默认继承父类的初始化器。<br>Swift 的这种机制防止父类的简单初始化器被一个更专用的子类继承并被用来创建一个没有完全或错误初始化的新实例的情况发生。</p>\n<p>初始化器的自动继承<br>如上所述，子类默认不会继承父类初始化器。总之，在特定的情况下父类初始化器是可以被自动继承的。实际上，这意味着在许多场景中你不必重写父类初始化器，只要可以安全操作，你就可以毫不费力地继承父类的初始化器。</p>\n<p>假设你为你子类引入的任何新的属性都提供了默认值，请遵守以下2个规则：</p>\n<p>规则1<br>如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器。</p>\n<p>规则2<br>如果你的子类提供了所有父类指定初始化器的实现——要么是通过规则1继承来的，要么通过在定义中提供自定义实现的——那么它自动继承所有的父类便捷初始化器。</p>\n<p>就算你的子类添加了更多的便捷初始化器，这些规则仍然适用。</p>\n<p>*注意<br>子类能够以便捷初始化器的形式实现父类指定初始化器来作为满足规则2的一部分。</p>\n<p>6、可失败初始化器<br>定义类、结构体或枚举初始化时可以失败在某些情况下会管大用。这个失败可能由以下几种方式触发，包括给初始化传入无效的形式参数值，<br>或缺少某种外部所需的资源，又或是其他阻止初始化的情况。</p>\n<p>6.1、枚举的可失败初始化器<br>你可以使用一个可失败初始化器来在带一个或多个形式参数的枚举中选择合适的情况。如果提供的形式参数没有匹配合适的情况初始化器就可能失败。</p>\n<p>6.2、带有原始值枚举的可失败初始化器<br>带有原始值的枚举会自动获得一个可失败初始化器 init?(rawValue:) ，<br>该可失败初始化器接收一个名为 rawValue 的合适的原始值类型形式参数如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就触发初始化失败。</p>\n<p>为了妥善处理这种可能失败的情况，在类、结构体或枚举中定义一个或多个可失败的初始化器。通过在 init 关键字后面添加问号( init? )来写。</p>\n<p>6.3、初始化失败的传递<br>类，结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器。<br>类似地，子类的可失败初始化器可以向上委托到父类的可失败初始化器。</p>\n<p>无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。</p>\n<p>6.4、重写可失败初始化器<br>你可以在子类里重写父类的可失败初始化器。就好比其他的初始化器。或者，你可以用子类的非可失败初始化器来重写父类可失败初始化器。<br>这样允许你定义一个初始化不会失败的子类，尽管父类的初始化允许失败。</p>\n<p>注意如果你用非可失败的子类初始化器重写了一个可失败初始化器，向上委托到父类初始化器的唯一办法是强制展开父类可失败初始化器的结果。</p>\n<p>6.5、可失败初始化器 init!<br>通常来讲我们通过在 init 关键字后添加问号 ( init? )的方式来定义一个可失败初始化器以创建一个合适类型的可选项实例。<br>另外，你也可以使用可失败初始化器创建一个隐式展开具有合适类型的可选项实例。通过在 init 后面添加惊叹号( init! )是不是问号。</p>\n<p>你可以在 init? 初始化器中委托调用 init! 初始化器，反之亦然。 你也可以用 init! 重写 init? ，反之亦然。<br>你还可以用 init 委托调用 init! ，尽管当 init! 初始化器导致初始化失败时会触发断言。</p>\n<p>7、必要初始化器<br>在类的初始化器前添加 required  修饰符来表明所有该类的子类都必须实现该初始化器：</p>\n","site":{"data":{}},"excerpt":"","more":"<p>swift 构造器</p>\n<p>1、默认初始化器<br>Swift 为所有没有提供初始化器的结构体或类提供了一个默认的初始化器来给所有的属性提供了默认值。<br>这个默认的初始化器只是简单地创建了一个所有属性都有默认值的新实例</p>\n<p>2、结构体类型的成员初始化器<br>如果结构体类型中没有定义任何自定义初始化器，它会自动获得一个成员初始化器。<br>不同于默认初始化器，结构体会接收成员初始化器即使它的存储属性没有默认值。</p>\n<p>3、值类型的初始化器委托<br>初始化器可以调用其他初始化器来执行部分实例的初始化。这个过程，就是所谓的初始化器委托，避免了多个初始化器里冗余代码。</p>\n<p>初始化器委托的运作，以及允许那些形式的委托，这些规则对于值类型和类类型是不同的。值类型(结构体和枚举)不支持继承，<br>所以他它们的初始化器委托的过程相当简单，因为它们只能提供它们自己为另一个初始化器委托。如同继承里描述的那样，<br>总之，类可以从其他类继承。这就意味着类有额外的责任来确保它们继承的所有存储属性在初始化期间都分配了一个合适的值。<br>这些责任在下边的类的继承和初始化里做详述。</p>\n<p>4、类的继承和初始化<br>所有类的存储属性——包括从它的父类继承的所有属性——都必须在初始化期间分配初始值。</p>\n<p>Swift 为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值。这些就是所谓的指定初始化器和便捷初始化器。<br>*指定初始化器</p>\n<p>*便利构造器<br>   convenience:便利，使用convenience修饰的构造函数叫做便利构造函数<br>   便利构造函数通常用在对系统的类进行构造函数的扩充时使用。<br>   便利构造函数的特点：<br>   1、便利构造函数通常都是写在extension里面<br>   2、便利函数init前面需要加载convenience<br>   3、在便利构造函数中需要明确的调用self.init()</p>\n<p>4.1、类类型的初始化器委托<br>为了简化指定和便捷初始化器之间的调用关系，Swift 在初始化器之间的委托调用有下面的三个规则:</p>\n<p>规则 1<br>指定初始化器必须从它的直系父类调用指定初始化器。</p>\n<p>规则 2<br>便捷初始化器必须从相同的类里调用另一个初始化器。</p>\n<p>规则 3<br>便捷初始化器最终必须调用一个指定初始化器。</p>\n<p>4.2、两段式初始化<br>Swift 的类初始化是一个两段式过程。在第一个阶段，每一个存储属性被引入类为分配了一个初始值。<br>一旦每个存储属性的初始状态被确定，第二个阶段就开始了，每个类都有机会在新的实例准备使用之前来定制它的存储属性。</p>\n<p>Swift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成：</p>\n<p>安全检查 1<br>指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。</p>\n<p>如上所述，一个对象的内存只有在其所有储存型属性确定之后才能完全初始化。为了满足这一规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。</p>\n<p>安全检查 2<br>指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值。如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖。</p>\n<p>安全检查 3<br>便捷初始化器必须先委托同类中的其它初始化器，然后再为任意属性赋新值（包括同类里定义的属性）。如果没这么做，<br>便捷构初始化器赋予的新值将被自己类中其它指定初始化器所覆盖。</p>\n<p>安全检查 4<br>初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用 self 作为值。</p>\n<p>直到第一阶段结束类实例才完全合法。属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。</p>\n<p>以下是两段初始化过程，基于上述四种检查的流程：</p>\n<p>4.3、两端初始化总结：<br>阶段 1<br>指定或便捷初始化器在类中被调用；<br>为这个类的新实例分配内存。内存还没有被初始化；<br>这个类的指定初始化器确保所有由此类引入的存储属性都有一个值。现在这些存储属性的内存被初始化了；<br>指定初始化器上交父类的初始化器为其存储属性执行相同的任务；<br>这个调用父类初始化器的过程将沿着初始化器链一直向上进行，直到到达初始化器链的最顶部；<br>一旦达了初始化器链的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成。</p>\n<p>阶段 2<br>从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问 self 并且可以修改它的属性，调用它的实例方法等等；<br>最终，链中任何便捷初始化器都有机会定制实例以及使用 slef 。</p>\n<p>5、初始化器的继承和重写</p>\n<p>不像在 Objective-C 中的子类，Swift 的子类不会默认继承父类的初始化器。<br>Swift 的这种机制防止父类的简单初始化器被一个更专用的子类继承并被用来创建一个没有完全或错误初始化的新实例的情况发生。</p>\n<p>初始化器的自动继承<br>如上所述，子类默认不会继承父类初始化器。总之，在特定的情况下父类初始化器是可以被自动继承的。实际上，这意味着在许多场景中你不必重写父类初始化器，只要可以安全操作，你就可以毫不费力地继承父类的初始化器。</p>\n<p>假设你为你子类引入的任何新的属性都提供了默认值，请遵守以下2个规则：</p>\n<p>规则1<br>如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器。</p>\n<p>规则2<br>如果你的子类提供了所有父类指定初始化器的实现——要么是通过规则1继承来的，要么通过在定义中提供自定义实现的——那么它自动继承所有的父类便捷初始化器。</p>\n<p>就算你的子类添加了更多的便捷初始化器，这些规则仍然适用。</p>\n<p>*注意<br>子类能够以便捷初始化器的形式实现父类指定初始化器来作为满足规则2的一部分。</p>\n<p>6、可失败初始化器<br>定义类、结构体或枚举初始化时可以失败在某些情况下会管大用。这个失败可能由以下几种方式触发，包括给初始化传入无效的形式参数值，<br>或缺少某种外部所需的资源，又或是其他阻止初始化的情况。</p>\n<p>6.1、枚举的可失败初始化器<br>你可以使用一个可失败初始化器来在带一个或多个形式参数的枚举中选择合适的情况。如果提供的形式参数没有匹配合适的情况初始化器就可能失败。</p>\n<p>6.2、带有原始值枚举的可失败初始化器<br>带有原始值的枚举会自动获得一个可失败初始化器 init?(rawValue:) ，<br>该可失败初始化器接收一个名为 rawValue 的合适的原始值类型形式参数如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就触发初始化失败。</p>\n<p>为了妥善处理这种可能失败的情况，在类、结构体或枚举中定义一个或多个可失败的初始化器。通过在 init 关键字后面添加问号( init? )来写。</p>\n<p>6.3、初始化失败的传递<br>类，结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器。<br>类似地，子类的可失败初始化器可以向上委托到父类的可失败初始化器。</p>\n<p>无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。</p>\n<p>6.4、重写可失败初始化器<br>你可以在子类里重写父类的可失败初始化器。就好比其他的初始化器。或者，你可以用子类的非可失败初始化器来重写父类可失败初始化器。<br>这样允许你定义一个初始化不会失败的子类，尽管父类的初始化允许失败。</p>\n<p>注意如果你用非可失败的子类初始化器重写了一个可失败初始化器，向上委托到父类初始化器的唯一办法是强制展开父类可失败初始化器的结果。</p>\n<p>6.5、可失败初始化器 init!<br>通常来讲我们通过在 init 关键字后添加问号 ( init? )的方式来定义一个可失败初始化器以创建一个合适类型的可选项实例。<br>另外，你也可以使用可失败初始化器创建一个隐式展开具有合适类型的可选项实例。通过在 init 后面添加惊叹号( init! )是不是问号。</p>\n<p>你可以在 init? 初始化器中委托调用 init! 初始化器，反之亦然。 你也可以用 init! 重写 init? ，反之亦然。<br>你还可以用 init 委托调用 init! ，尽管当 init! 初始化器导致初始化失败时会触发断言。</p>\n<p>7、必要初始化器<br>在类的初始化器前添加 required  修饰符来表明所有该类的子类都必须实现该初始化器：</p>\n"},{"_content":"1：objc_object、id\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n\ntypedef struct objc_object *id;\n\n2：objc_class、Class\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n}\n\ntypedef struct objc_class *Class;\n\n*3：SEL\ntypedef struct objc_selector *SEL;\n\n4：IMP\ntypedef void (*IMP)(void /* id, SEL, ... */ );\ntypedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...);\n\n5：objc_objectptr_t\ntypedef const void* objc_objectptr_t;\n\n6：objc_protocol_list、Protocol\nstruct objc_protocol_list {\n    struct objc_protocol_list * _Nullable next;\n    long count;\n    __unsafe_unretained Protocol * _Nullable list[1];\n};\n\n#ifdef __OBJC__\n@class Protocol;\n#else\ntypedef struct objc_object Protocol;\n#endif\n\n7：objc_category、Category\nstruct objc_category {\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n}\n\ntypedef struct objc_category *Category;\n\n\n8：objc_ivar\nstruct objc_ivar {\n    char * _Nullable ivar_name                               OBJC2_UNAVAILABLE;\n    char * _Nullable ivar_type                               OBJC2_UNAVAILABLE;\n    int ivar_offset                                          OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n}                                                            OBJC2_UNAVAILABLE;\n\ntypedef struct objc_ivar *Ivar;\n\n9：objc_ivar_list\nstruct objc_ivar_list {\n    int ivar_count                                           OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;\n}\n\n10：objc_method、objc_method_list、objc_method_description、objc_method_description_list、Method\nstruct objc_method {\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_method_list {\n    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n}\n\nstruct objc_method_description {\n    SEL _Nullable name;               /**< The name of the method */\n    char * _Nullable types;           /**< The types of the method arguments */\n};\n\nstruct objc_method_description_list {\n    int count;\n    struct objc_method_description list[1];\n};\n\ntypedef struct objc_method *Method;\n\n*11：objc_property\ntypedef struct objc_property *objc_property_t;\n\ntypedef struct {\n    const char * _Nonnull name;           /**< The name of the attribute */\n    const char * _Nonnull value;          /**< The value of the attribute (usually empty) */\n} objc_property_attribute_t;\n\n12：objc_symtab、Symtab\nstruct objc_symtab {\n    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;\n    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;\n    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;\n    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;\n    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\ntypedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;\n\n13：objc_cache、Cache\nstruct objc_cache {\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;\n};\n\ntypedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;\n\n\n14：objc_module、Module\nstruct objc_module {\n    unsigned long version                                    OBJC2_UNAVAILABLE;\n    unsigned long size                                       OBJC2_UNAVAILABLE;\n    const char * _Nullable name                              OBJC2_UNAVAILABLE;\n    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;\n}\n\ntypedef struct objc_module *Module                           OBJC2_UNAVAILABLE;\n\n15：NSObject、Protocol、SEL、\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/objc_runtime_type.md","raw":"1：objc_object、id\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n\ntypedef struct objc_object *id;\n\n2：objc_class、Class\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n}\n\ntypedef struct objc_class *Class;\n\n*3：SEL\ntypedef struct objc_selector *SEL;\n\n4：IMP\ntypedef void (*IMP)(void /* id, SEL, ... */ );\ntypedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...);\n\n5：objc_objectptr_t\ntypedef const void* objc_objectptr_t;\n\n6：objc_protocol_list、Protocol\nstruct objc_protocol_list {\n    struct objc_protocol_list * _Nullable next;\n    long count;\n    __unsafe_unretained Protocol * _Nullable list[1];\n};\n\n#ifdef __OBJC__\n@class Protocol;\n#else\ntypedef struct objc_object Protocol;\n#endif\n\n7：objc_category、Category\nstruct objc_category {\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n}\n\ntypedef struct objc_category *Category;\n\n\n8：objc_ivar\nstruct objc_ivar {\n    char * _Nullable ivar_name                               OBJC2_UNAVAILABLE;\n    char * _Nullable ivar_type                               OBJC2_UNAVAILABLE;\n    int ivar_offset                                          OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n}                                                            OBJC2_UNAVAILABLE;\n\ntypedef struct objc_ivar *Ivar;\n\n9：objc_ivar_list\nstruct objc_ivar_list {\n    int ivar_count                                           OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;\n}\n\n10：objc_method、objc_method_list、objc_method_description、objc_method_description_list、Method\nstruct objc_method {\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_method_list {\n    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n}\n\nstruct objc_method_description {\n    SEL _Nullable name;               /**< The name of the method */\n    char * _Nullable types;           /**< The types of the method arguments */\n};\n\nstruct objc_method_description_list {\n    int count;\n    struct objc_method_description list[1];\n};\n\ntypedef struct objc_method *Method;\n\n*11：objc_property\ntypedef struct objc_property *objc_property_t;\n\ntypedef struct {\n    const char * _Nonnull name;           /**< The name of the attribute */\n    const char * _Nonnull value;          /**< The value of the attribute (usually empty) */\n} objc_property_attribute_t;\n\n12：objc_symtab、Symtab\nstruct objc_symtab {\n    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;\n    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;\n    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;\n    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;\n    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\ntypedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;\n\n13：objc_cache、Cache\nstruct objc_cache {\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;\n};\n\ntypedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;\n\n\n14：objc_module、Module\nstruct objc_module {\n    unsigned long version                                    OBJC2_UNAVAILABLE;\n    unsigned long size                                       OBJC2_UNAVAILABLE;\n    const char * _Nullable name                              OBJC2_UNAVAILABLE;\n    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;\n}\n\ntypedef struct objc_module *Module                           OBJC2_UNAVAILABLE;\n\n15：NSObject、Protocol、SEL、\n","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/objc_runtime_type","published":1,"date":"2019-07-11T10:37:55.000Z","updated":"2019-07-11T10:47:01.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgjw002d8n7u70w94aci","content":"<p>1：objc_object、id<br>struct objc_object {<br>    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;<br>};</p>\n<p>typedef struct objc_object *id;</p>\n<p>2：objc_class、Class<br>struct objc_class {<br>    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</p>\n<p>#if !<strong>OBJC2</strong><br>    Class _Nullable super_class                              OBJC2_UNAVAILABLE;<br>    const char * _Nonnull name                               OBJC2_UNAVAILABLE;<br>    long version                                             OBJC2_UNAVAILABLE;<br>    long info                                                OBJC2_UNAVAILABLE;<br>    long instance_size                                       OBJC2_UNAVAILABLE;<br>    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;<br>    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;<br>    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;<br>    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;<br>#endif</p>\n<p>}</p>\n<p>typedef struct objc_class *Class;</p>\n<p>*3：SEL<br>typedef struct objc_selector *SEL;</p>\n<p>4：IMP<br>typedef void (<em>IMP)(void /</em> id, SEL, … */ );<br>typedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, …);</p>\n<p>5：objc_objectptr_t<br>typedef const void* objc_objectptr_t;</p>\n<p>6：objc_protocol_list、Protocol<br>struct objc_protocol_list {<br>    struct objc_protocol_list * _Nullable next;<br>    long count;<br>    __unsafe_unretained Protocol * _Nullable list[1];<br>};</p>\n<p>#ifdef <strong>OBJC</strong><br>@class Protocol;<br>#else<br>typedef struct objc_object Protocol;<br>#endif</p>\n<p>7：objc_category、Category<br>struct objc_category {<br>    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;<br>    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;<br>    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;<br>    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;<br>    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;<br>}</p>\n<p>typedef struct objc_category *Category;</p>\n<p>8：objc_ivar<br>struct objc_ivar {<br>    char * <em>Nullable ivar_name                               OBJC2_UNAVAILABLE;<br>    char * <em>Nullable ivar_type                               OBJC2_UNAVAILABLE;<br>    int ivar_offset                                          OBJC2_UNAVAILABLE;<br>#ifdef __LP64</em></em><br>    int space                                                OBJC2_UNAVAILABLE;<br>#endif<br>}                                                            OBJC2_UNAVAILABLE;</p>\n<p>typedef struct objc_ivar *Ivar;</p>\n<p>9：objc_ivar_list<br>struct objc_ivar_list {<br>    int ivar_count                                           OBJC2_UNAVAILABLE;<br>#ifdef <strong>LP64</strong><br>    int space                                                OBJC2_UNAVAILABLE;<br>#endif<br>    /* variable length structure */<br>    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;<br>}</p>\n<p>10：objc_method、objc_method_list、objc_method_description、objc_method_description_list、Method<br>struct objc_method {<br>    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;<br>    char * _Nullable method_types                            OBJC2_UNAVAILABLE;<br>    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;<br>}                                                            OBJC2_UNAVAILABLE;</p>\n<p>struct objc_method_list {<br>    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;</p>\n<pre><code>int method_count                                         OBJC2_UNAVAILABLE;\n</code></pre>\n<p>#ifdef <strong>LP64</strong><br>    int space                                                OBJC2_UNAVAILABLE;<br>#endif<br>    /* variable length structure */<br>    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;<br>}</p>\n<p>struct objc_method_description {<br>    SEL _Nullable name;               /<strong>&lt; The name of the method */<br>    char * _Nullable types;           /</strong>&lt; The types of the method arguments */<br>};</p>\n<p>struct objc_method_description_list {<br>    int count;<br>    struct objc_method_description list[1];<br>};</p>\n<p>typedef struct objc_method *Method;</p>\n<p>*11：objc_property<br>typedef struct objc_property *objc_property_t;</p>\n<p>typedef struct {<br>    const char * _Nonnull name;           /<strong>&lt; The name of the attribute */<br>    const char * _Nonnull value;          /</strong>&lt; The value of the attribute (usually empty) */<br>} objc_property_attribute_t;</p>\n<p>12：objc_symtab、Symtab<br>struct objc_symtab {<br>    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;<br>    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;<br>    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;<br>    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;<br>    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;<br>}                                                            OBJC2_UNAVAILABLE;</p>\n<p>typedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;</p>\n<p>13：objc_cache、Cache<br>struct objc_cache {<br>    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;<br>    unsigned int occupied                                    OBJC2_UNAVAILABLE;<br>    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;<br>};</p>\n<p>typedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;</p>\n<p>14：objc_module、Module<br>struct objc_module {<br>    unsigned long version                                    OBJC2_UNAVAILABLE;<br>    unsigned long size                                       OBJC2_UNAVAILABLE;<br>    const char * _Nullable name                              OBJC2_UNAVAILABLE;<br>    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;<br>}</p>\n<p>typedef struct objc_module *Module                           OBJC2_UNAVAILABLE;</p>\n<p>15：NSObject、Protocol、SEL、</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1：objc_object、id<br>struct objc_object {<br>    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;<br>};</p>\n<p>typedef struct objc_object *id;</p>\n<p>2：objc_class、Class<br>struct objc_class {<br>    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</p>\n<p>#if !<strong>OBJC2</strong><br>    Class _Nullable super_class                              OBJC2_UNAVAILABLE;<br>    const char * _Nonnull name                               OBJC2_UNAVAILABLE;<br>    long version                                             OBJC2_UNAVAILABLE;<br>    long info                                                OBJC2_UNAVAILABLE;<br>    long instance_size                                       OBJC2_UNAVAILABLE;<br>    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;<br>    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;<br>    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;<br>    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;<br>#endif</p>\n<p>}</p>\n<p>typedef struct objc_class *Class;</p>\n<p>*3：SEL<br>typedef struct objc_selector *SEL;</p>\n<p>4：IMP<br>typedef void (<em>IMP)(void /</em> id, SEL, … */ );<br>typedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, …);</p>\n<p>5：objc_objectptr_t<br>typedef const void* objc_objectptr_t;</p>\n<p>6：objc_protocol_list、Protocol<br>struct objc_protocol_list {<br>    struct objc_protocol_list * _Nullable next;<br>    long count;<br>    __unsafe_unretained Protocol * _Nullable list[1];<br>};</p>\n<p>#ifdef <strong>OBJC</strong><br>@class Protocol;<br>#else<br>typedef struct objc_object Protocol;<br>#endif</p>\n<p>7：objc_category、Category<br>struct objc_category {<br>    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;<br>    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;<br>    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;<br>    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;<br>    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;<br>}</p>\n<p>typedef struct objc_category *Category;</p>\n<p>8：objc_ivar<br>struct objc_ivar {<br>    char * <em>Nullable ivar_name                               OBJC2_UNAVAILABLE;<br>    char * <em>Nullable ivar_type                               OBJC2_UNAVAILABLE;<br>    int ivar_offset                                          OBJC2_UNAVAILABLE;<br>#ifdef __LP64</em></em><br>    int space                                                OBJC2_UNAVAILABLE;<br>#endif<br>}                                                            OBJC2_UNAVAILABLE;</p>\n<p>typedef struct objc_ivar *Ivar;</p>\n<p>9：objc_ivar_list<br>struct objc_ivar_list {<br>    int ivar_count                                           OBJC2_UNAVAILABLE;<br>#ifdef <strong>LP64</strong><br>    int space                                                OBJC2_UNAVAILABLE;<br>#endif<br>    /* variable length structure */<br>    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;<br>}</p>\n<p>10：objc_method、objc_method_list、objc_method_description、objc_method_description_list、Method<br>struct objc_method {<br>    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;<br>    char * _Nullable method_types                            OBJC2_UNAVAILABLE;<br>    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;<br>}                                                            OBJC2_UNAVAILABLE;</p>\n<p>struct objc_method_list {<br>    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;</p>\n<pre><code>int method_count                                         OBJC2_UNAVAILABLE;\n</code></pre>\n<p>#ifdef <strong>LP64</strong><br>    int space                                                OBJC2_UNAVAILABLE;<br>#endif<br>    /* variable length structure */<br>    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;<br>}</p>\n<p>struct objc_method_description {<br>    SEL _Nullable name;               /<strong>&lt; The name of the method */<br>    char * _Nullable types;           /</strong>&lt; The types of the method arguments */<br>};</p>\n<p>struct objc_method_description_list {<br>    int count;<br>    struct objc_method_description list[1];<br>};</p>\n<p>typedef struct objc_method *Method;</p>\n<p>*11：objc_property<br>typedef struct objc_property *objc_property_t;</p>\n<p>typedef struct {<br>    const char * _Nonnull name;           /<strong>&lt; The name of the attribute */<br>    const char * _Nonnull value;          /</strong>&lt; The value of the attribute (usually empty) */<br>} objc_property_attribute_t;</p>\n<p>12：objc_symtab、Symtab<br>struct objc_symtab {<br>    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;<br>    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;<br>    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;<br>    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;<br>    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;<br>}                                                            OBJC2_UNAVAILABLE;</p>\n<p>typedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;</p>\n<p>13：objc_cache、Cache<br>struct objc_cache {<br>    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;<br>    unsigned int occupied                                    OBJC2_UNAVAILABLE;<br>    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;<br>};</p>\n<p>typedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;</p>\n<p>14：objc_module、Module<br>struct objc_module {<br>    unsigned long version                                    OBJC2_UNAVAILABLE;<br>    unsigned long size                                       OBJC2_UNAVAILABLE;<br>    const char * _Nullable name                              OBJC2_UNAVAILABLE;<br>    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;<br>}</p>\n<p>typedef struct objc_module *Module                           OBJC2_UNAVAILABLE;</p>\n<p>15：NSObject、Protocol、SEL、</p>\n"},{"_content":"# Flutter\n\n## 1、入门\n\n### 1.1、语言\n\n1.1.1 Dart：[学习路线](https://dart.dev/tools/sdk)\n\n![Dart](./Flutter/Dart.png)\n\n1.1.2 Dart [概述](http://dart.goodev.org/guides/language)\n\n1.1.3 Dart [库预览](http://dart.goodev.org/guides/libraries)\n\n### 1.2、工具集\n\n2.1 通用工具\n\n2.1.1 [DartPad](https://dartpad.dartlang.org/)\n\n    DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.\n\n2.1.2 IDEs 与 编辑器\n\n2.1.2.1 IDE： [Android Studio](https://dart.dev/tools/jetbrains-plugin)、[IntelliJ IDEA](https://dart.dev/tools/jetbrains-plugin)、[Visual Studio Code](https://code.visualstudio.com/)\n\n2.1.2.2 IDEDart 社区维护的编辑器：[Emacs](https://github.com/bradyt/dart-mode)、[Atom](https://github.com/dart-atom/dart)、[Vim](https://github.com/dart-lang/dart-vim-plugin)\n\n2.1.3 命令行工具\n\n    dartanalyzer\n        A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\n    dartdoc\n        Generates API reference documentation.\n\n    dartfmt\n        Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\n    pub\n        Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n        Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\n    build_runner\n        A code generator.\n\n    dartfix\n        A tool for migrating Dart source code and fixing common issues.\n\n2.2 Web工具集\n\n    webdev\n        A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\n    dart2js\n        The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\n    dartdevc\n        The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\n    build_runner\n        A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n\n2.3 命令行工具集与服务器工具集\n\n    Standalone Dart VM: dart\n        Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\n    AOT compiler and runtime: dart2aot, dartaotruntime\n        Support ahead-of-time compilation of Dart code to native x64 machine code.\n\n    Pub package manager: pub\n        Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n\n### 1.3、Flutter\n\n1.3.1、Flutter是什么?\n\n    Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\n    Flutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n\n1.3.2、核心原则\n\nFlutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。\n\n一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。\n\n![widget_Render_Object](./Flutter/Flutter_Render_Object.png)\n\n1.3.3 Widget所谓何物:\n\n* Widget实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。\n\n* 一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。\n\n1.3.4 框架\n![Flutter框架](./Flutter/Flutter_Framework.png)\n\n1.3.5 跨端实质\n\n1.3.5.1. iOS\n\n> Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。\n>\n> 但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。\n\n1.3.5.2. Android\n\n1.3.5.3. 界面渲染\n\n1.3.5.3.1 Flutter 如何渲染界面\n\n在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：\n\n![iOS_Render_flow](./Flutter/iOS_Render_flow.webp)\n\nCPU、GPU和显示器以一种特定的方式协作：\n\n> CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。\n\n![Rendering_pipeline](./Flutter/Rendering_pipeline.png)\n\n> GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。\n\n* Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。\n\n* Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。\n\n渲染树生成：\n\n![Rendering_pipeline](./Flutter/Rendering_pipe.png)\n\n1.3.5.3.2、Flutter 如何更新界面（Diff）\n\n当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。\n\n![Rendering_pipeline](./Flutter/Widget_update.png)\n\n> 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。\n>\n> Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n\n## 2、Flutter & 原生\n\n### 2.1 Flutter本质\n\n2.1.1 如何做到跨平台、与原生平台通讯\n\n![Flutter_iOS_Android](./Flutter/Flutter_iOS_Android.png)\n\nFlutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：\n\n* 应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。\n\n* 宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。\n\ne.g：获取iOS电量\n\n2.1.2 本质\n\nFlutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。\nDart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。\n\n### 2.2、相同点\n\n1. 界面\n   解决移动端信息展示的目的；\n   都基于声明式、响应式的方式、热重载的方式；\n\n### 2.3、异同点\n\n### 2.4、性能\n\n### 2.5、体验\n\n1. 体积\n\n2. 帧率\n\n3. 技术生态圈\n\n4. 硬件交互、推送等服务\n\n## 3、未来\n\n## 4、憧憬\n\n当下的移动端、前端开发技术越来越多样化，复杂化。\n\n就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；\nAndroid的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等，比iOS还要多一些。\n\n大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。\n\n前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。\n\n前不久Facebook 又推出了新的[Hermes](https://juejin.im/entry/5d2e6d1ce51d4510664d178e)，用于在React Native应用提高性能的。\n\n个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。\n\n统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。\n\n据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！\n","source":"_posts/iOS学习笔记/iOS系统学习/大前端/Flutter.md","raw":"# Flutter\n\n## 1、入门\n\n### 1.1、语言\n\n1.1.1 Dart：[学习路线](https://dart.dev/tools/sdk)\n\n![Dart](./Flutter/Dart.png)\n\n1.1.2 Dart [概述](http://dart.goodev.org/guides/language)\n\n1.1.3 Dart [库预览](http://dart.goodev.org/guides/libraries)\n\n### 1.2、工具集\n\n2.1 通用工具\n\n2.1.1 [DartPad](https://dartpad.dartlang.org/)\n\n    DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.\n\n2.1.2 IDEs 与 编辑器\n\n2.1.2.1 IDE： [Android Studio](https://dart.dev/tools/jetbrains-plugin)、[IntelliJ IDEA](https://dart.dev/tools/jetbrains-plugin)、[Visual Studio Code](https://code.visualstudio.com/)\n\n2.1.2.2 IDEDart 社区维护的编辑器：[Emacs](https://github.com/bradyt/dart-mode)、[Atom](https://github.com/dart-atom/dart)、[Vim](https://github.com/dart-lang/dart-vim-plugin)\n\n2.1.3 命令行工具\n\n    dartanalyzer\n        A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\n    dartdoc\n        Generates API reference documentation.\n\n    dartfmt\n        Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\n    pub\n        Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n        Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\n    build_runner\n        A code generator.\n\n    dartfix\n        A tool for migrating Dart source code and fixing common issues.\n\n2.2 Web工具集\n\n    webdev\n        A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\n    dart2js\n        The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\n    dartdevc\n        The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\n    build_runner\n        A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n\n2.3 命令行工具集与服务器工具集\n\n    Standalone Dart VM: dart\n        Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\n    AOT compiler and runtime: dart2aot, dartaotruntime\n        Support ahead-of-time compilation of Dart code to native x64 machine code.\n\n    Pub package manager: pub\n        Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n\n### 1.3、Flutter\n\n1.3.1、Flutter是什么?\n\n    Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\n    Flutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n\n1.3.2、核心原则\n\nFlutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。\n\n一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。\n\n![widget_Render_Object](./Flutter/Flutter_Render_Object.png)\n\n1.3.3 Widget所谓何物:\n\n* Widget实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。\n\n* 一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。\n\n1.3.4 框架\n![Flutter框架](./Flutter/Flutter_Framework.png)\n\n1.3.5 跨端实质\n\n1.3.5.1. iOS\n\n> Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。\n>\n> 但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。\n\n1.3.5.2. Android\n\n1.3.5.3. 界面渲染\n\n1.3.5.3.1 Flutter 如何渲染界面\n\n在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：\n\n![iOS_Render_flow](./Flutter/iOS_Render_flow.webp)\n\nCPU、GPU和显示器以一种特定的方式协作：\n\n> CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。\n\n![Rendering_pipeline](./Flutter/Rendering_pipeline.png)\n\n> GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。\n\n* Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。\n\n* Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。\n\n渲染树生成：\n\n![Rendering_pipeline](./Flutter/Rendering_pipe.png)\n\n1.3.5.3.2、Flutter 如何更新界面（Diff）\n\n当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。\n\n![Rendering_pipeline](./Flutter/Widget_update.png)\n\n> 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。\n>\n> Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n\n## 2、Flutter & 原生\n\n### 2.1 Flutter本质\n\n2.1.1 如何做到跨平台、与原生平台通讯\n\n![Flutter_iOS_Android](./Flutter/Flutter_iOS_Android.png)\n\nFlutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：\n\n* 应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。\n\n* 宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。\n\ne.g：获取iOS电量\n\n2.1.2 本质\n\nFlutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。\nDart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。\n\n### 2.2、相同点\n\n1. 界面\n   解决移动端信息展示的目的；\n   都基于声明式、响应式的方式、热重载的方式；\n\n### 2.3、异同点\n\n### 2.4、性能\n\n### 2.5、体验\n\n1. 体积\n\n2. 帧率\n\n3. 技术生态圈\n\n4. 硬件交互、推送等服务\n\n## 3、未来\n\n## 4、憧憬\n\n当下的移动端、前端开发技术越来越多样化，复杂化。\n\n就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；\nAndroid的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等，比iOS还要多一些。\n\n大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。\n\n前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。\n\n前不久Facebook 又推出了新的[Hermes](https://juejin.im/entry/5d2e6d1ce51d4510664d178e)，用于在React Native应用提高性能的。\n\n个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。\n\n统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。\n\n据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！\n","slug":"iOS学习笔记/iOS系统学习/大前端/Flutter","published":1,"date":"2019-07-27T02:34:23.000Z","updated":"2019-07-30T00:18:05.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgk4002e8n7ugcpmalpv","content":"<h1 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h1><h2 id=\"1、入门\"><a href=\"#1、入门\" class=\"headerlink\" title=\"1、入门\"></a>1、入门</h2><h3 id=\"1-1、语言\"><a href=\"#1-1、语言\" class=\"headerlink\" title=\"1.1、语言\"></a>1.1、语言</h3><p>1.1.1 Dart：<a href=\"https://dart.dev/tools/sdk\">学习路线</a></p>\n<p><img src=\"./Flutter/Dart.png\" alt=\"Dart\"></p>\n<p>1.1.2 Dart <a href=\"http://dart.goodev.org/guides/language\">概述</a></p>\n<p>1.1.3 Dart <a href=\"http://dart.goodev.org/guides/libraries\">库预览</a></p>\n<h3 id=\"1-2、工具集\"><a href=\"#1-2、工具集\" class=\"headerlink\" title=\"1.2、工具集\"></a>1.2、工具集</h3><p>2.1 通用工具</p>\n<p>2.1.1 <a href=\"https://dartpad.dartlang.org/\">DartPad</a></p>\n<pre><code>DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.\n</code></pre>\n<p>2.1.2 IDEs 与 编辑器</p>\n<p>2.1.2.1 IDE： <a href=\"https://dart.dev/tools/jetbrains-plugin\">Android Studio</a>、<a href=\"https://dart.dev/tools/jetbrains-plugin\">IntelliJ IDEA</a>、<a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></p>\n<p>2.1.2.2 IDEDart 社区维护的编辑器：<a href=\"https://github.com/bradyt/dart-mode\">Emacs</a>、<a href=\"https://github.com/dart-atom/dart\">Atom</a>、<a href=\"https://github.com/dart-lang/dart-vim-plugin\">Vim</a></p>\n<p>2.1.3 命令行工具</p>\n<pre><code>dartanalyzer\n    A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\ndartdoc\n    Generates API reference documentation.\n\ndartfmt\n    Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\npub\n    Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n    Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\nbuild_runner\n    A code generator.\n\ndartfix\n    A tool for migrating Dart source code and fixing common issues.\n</code></pre>\n<p>2.2 Web工具集</p>\n<pre><code>webdev\n    A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\ndart2js\n    The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\ndartdevc\n    The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\nbuild_runner\n    A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n</code></pre>\n<p>2.3 命令行工具集与服务器工具集</p>\n<pre><code>Standalone Dart VM: dart\n    Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\nAOT compiler and runtime: dart2aot, dartaotruntime\n    Support ahead-of-time compilation of Dart code to native x64 machine code.\n\nPub package manager: pub\n    Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n</code></pre>\n<h3 id=\"1-3、Flutter\"><a href=\"#1-3、Flutter\" class=\"headerlink\" title=\"1.3、Flutter\"></a>1.3、Flutter</h3><p>1.3.1、Flutter是什么?</p>\n<pre><code>Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\nFlutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n</code></pre>\n<p>1.3.2、核心原则</p>\n<p>Flutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。</p>\n<p>一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。</p>\n<p><img src=\"./Flutter/Flutter_Render_Object.png\" alt=\"widget_Render_Object\"></p>\n<p>1.3.3 Widget所谓何物:</p>\n<ul>\n<li><p>Widget实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。</p>\n</li>\n<li><p>一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。</p>\n</li>\n</ul>\n<p>1.3.4 框架<br><img src=\"./Flutter/Flutter_Framework.png\" alt=\"Flutter框架\"></p>\n<p>1.3.5 跨端实质</p>\n<p>1.3.5.1. iOS</p>\n<blockquote>\n<p>Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。</p>\n<p>但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。</p>\n</blockquote>\n<p>1.3.5.2. Android</p>\n<p>1.3.5.3. 界面渲染</p>\n<p>1.3.5.3.1 Flutter 如何渲染界面</p>\n<p>在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：</p>\n<p><img src=\"./Flutter/iOS_Render_flow.webp\" alt=\"iOS_Render_flow\"></p>\n<p>CPU、GPU和显示器以一种特定的方式协作：</p>\n<blockquote>\n<p>CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。</p>\n</blockquote>\n<p><img src=\"./Flutter/Rendering_pipeline.png\" alt=\"Rendering_pipeline\"></p>\n<blockquote>\n<p>GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。</p>\n</blockquote>\n<ul>\n<li><p>Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。</p>\n</li>\n<li><p>Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。</p>\n</li>\n</ul>\n<p>渲染树生成：</p>\n<p><img src=\"./Flutter/Rendering_pipe.png\" alt=\"Rendering_pipeline\"></p>\n<p>1.3.5.3.2、Flutter 如何更新界面（Diff）</p>\n<p>当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p>\n<p><img src=\"./Flutter/Widget_update.png\" alt=\"Rendering_pipeline\"></p>\n<blockquote>\n<p>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。</p>\n<p>Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</p>\n</blockquote>\n<h2 id=\"2、Flutter-amp-原生\"><a href=\"#2、Flutter-amp-原生\" class=\"headerlink\" title=\"2、Flutter &amp; 原生\"></a>2、Flutter &amp; 原生</h2><h3 id=\"2-1-Flutter本质\"><a href=\"#2-1-Flutter本质\" class=\"headerlink\" title=\"2.1 Flutter本质\"></a>2.1 Flutter本质</h3><p>2.1.1 如何做到跨平台、与原生平台通讯</p>\n<p><img src=\"./Flutter/Flutter_iOS_Android.png\" alt=\"Flutter_iOS_Android\"></p>\n<p>Flutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：</p>\n<ul>\n<li><p>应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。</p>\n</li>\n<li><p>宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。</p>\n</li>\n</ul>\n<p>e.g：获取iOS电量</p>\n<p>2.1.2 本质</p>\n<p>Flutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。<br>Dart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。</p>\n<h3 id=\"2-2、相同点\"><a href=\"#2-2、相同点\" class=\"headerlink\" title=\"2.2、相同点\"></a>2.2、相同点</h3><ol>\n<li>界面<br>解决移动端信息展示的目的；<br>都基于声明式、响应式的方式、热重载的方式；</li>\n</ol>\n<h3 id=\"2-3、异同点\"><a href=\"#2-3、异同点\" class=\"headerlink\" title=\"2.3、异同点\"></a>2.3、异同点</h3><h3 id=\"2-4、性能\"><a href=\"#2-4、性能\" class=\"headerlink\" title=\"2.4、性能\"></a>2.4、性能</h3><h3 id=\"2-5、体验\"><a href=\"#2-5、体验\" class=\"headerlink\" title=\"2.5、体验\"></a>2.5、体验</h3><ol>\n<li><p>体积</p>\n</li>\n<li><p>帧率</p>\n</li>\n<li><p>技术生态圈</p>\n</li>\n<li><p>硬件交互、推送等服务</p>\n</li>\n</ol>\n<h2 id=\"3、未来\"><a href=\"#3、未来\" class=\"headerlink\" title=\"3、未来\"></a>3、未来</h2><h2 id=\"4、憧憬\"><a href=\"#4、憧憬\" class=\"headerlink\" title=\"4、憧憬\"></a>4、憧憬</h2><p>当下的移动端、前端开发技术越来越多样化，复杂化。</p>\n<p>就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；<br>Android的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等，比iOS还要多一些。</p>\n<p>大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。</p>\n<p>前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。</p>\n<p>前不久Facebook 又推出了新的<a href=\"https://juejin.im/entry/5d2e6d1ce51d4510664d178e\">Hermes</a>，用于在React Native应用提高性能的。</p>\n<p>个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。</p>\n<p>统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。</p>\n<p>据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h1><h2 id=\"1、入门\"><a href=\"#1、入门\" class=\"headerlink\" title=\"1、入门\"></a>1、入门</h2><h3 id=\"1-1、语言\"><a href=\"#1-1、语言\" class=\"headerlink\" title=\"1.1、语言\"></a>1.1、语言</h3><p>1.1.1 Dart：<a href=\"https://dart.dev/tools/sdk\">学习路线</a></p>\n<p><img src=\"./Flutter/Dart.png\" alt=\"Dart\"></p>\n<p>1.1.2 Dart <a href=\"http://dart.goodev.org/guides/language\">概述</a></p>\n<p>1.1.3 Dart <a href=\"http://dart.goodev.org/guides/libraries\">库预览</a></p>\n<h3 id=\"1-2、工具集\"><a href=\"#1-2、工具集\" class=\"headerlink\" title=\"1.2、工具集\"></a>1.2、工具集</h3><p>2.1 通用工具</p>\n<p>2.1.1 <a href=\"https://dartpad.dartlang.org/\">DartPad</a></p>\n<pre><code>DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.\n</code></pre>\n<p>2.1.2 IDEs 与 编辑器</p>\n<p>2.1.2.1 IDE： <a href=\"https://dart.dev/tools/jetbrains-plugin\">Android Studio</a>、<a href=\"https://dart.dev/tools/jetbrains-plugin\">IntelliJ IDEA</a>、<a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></p>\n<p>2.1.2.2 IDEDart 社区维护的编辑器：<a href=\"https://github.com/bradyt/dart-mode\">Emacs</a>、<a href=\"https://github.com/dart-atom/dart\">Atom</a>、<a href=\"https://github.com/dart-lang/dart-vim-plugin\">Vim</a></p>\n<p>2.1.3 命令行工具</p>\n<pre><code>dartanalyzer\n    A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\ndartdoc\n    Generates API reference documentation.\n\ndartfmt\n    Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\npub\n    Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n    Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\nbuild_runner\n    A code generator.\n\ndartfix\n    A tool for migrating Dart source code and fixing common issues.\n</code></pre>\n<p>2.2 Web工具集</p>\n<pre><code>webdev\n    A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\ndart2js\n    The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\ndartdevc\n    The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\nbuild_runner\n    A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n</code></pre>\n<p>2.3 命令行工具集与服务器工具集</p>\n<pre><code>Standalone Dart VM: dart\n    Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\nAOT compiler and runtime: dart2aot, dartaotruntime\n    Support ahead-of-time compilation of Dart code to native x64 machine code.\n\nPub package manager: pub\n    Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n</code></pre>\n<h3 id=\"1-3、Flutter\"><a href=\"#1-3、Flutter\" class=\"headerlink\" title=\"1.3、Flutter\"></a>1.3、Flutter</h3><p>1.3.1、Flutter是什么?</p>\n<pre><code>Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\nFlutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n</code></pre>\n<p>1.3.2、核心原则</p>\n<p>Flutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。</p>\n<p>一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。</p>\n<p><img src=\"./Flutter/Flutter_Render_Object.png\" alt=\"widget_Render_Object\"></p>\n<p>1.3.3 Widget所谓何物:</p>\n<ul>\n<li><p>Widget实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。</p>\n</li>\n<li><p>一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。</p>\n</li>\n</ul>\n<p>1.3.4 框架<br><img src=\"./Flutter/Flutter_Framework.png\" alt=\"Flutter框架\"></p>\n<p>1.3.5 跨端实质</p>\n<p>1.3.5.1. iOS</p>\n<blockquote>\n<p>Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。</p>\n<p>但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。</p>\n</blockquote>\n<p>1.3.5.2. Android</p>\n<p>1.3.5.3. 界面渲染</p>\n<p>1.3.5.3.1 Flutter 如何渲染界面</p>\n<p>在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：</p>\n<p><img src=\"./Flutter/iOS_Render_flow.webp\" alt=\"iOS_Render_flow\"></p>\n<p>CPU、GPU和显示器以一种特定的方式协作：</p>\n<blockquote>\n<p>CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。</p>\n</blockquote>\n<p><img src=\"./Flutter/Rendering_pipeline.png\" alt=\"Rendering_pipeline\"></p>\n<blockquote>\n<p>GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。</p>\n</blockquote>\n<ul>\n<li><p>Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。</p>\n</li>\n<li><p>Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。</p>\n</li>\n</ul>\n<p>渲染树生成：</p>\n<p><img src=\"./Flutter/Rendering_pipe.png\" alt=\"Rendering_pipeline\"></p>\n<p>1.3.5.3.2、Flutter 如何更新界面（Diff）</p>\n<p>当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p>\n<p><img src=\"./Flutter/Widget_update.png\" alt=\"Rendering_pipeline\"></p>\n<blockquote>\n<p>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。</p>\n<p>Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</p>\n</blockquote>\n<h2 id=\"2、Flutter-amp-原生\"><a href=\"#2、Flutter-amp-原生\" class=\"headerlink\" title=\"2、Flutter &amp; 原生\"></a>2、Flutter &amp; 原生</h2><h3 id=\"2-1-Flutter本质\"><a href=\"#2-1-Flutter本质\" class=\"headerlink\" title=\"2.1 Flutter本质\"></a>2.1 Flutter本质</h3><p>2.1.1 如何做到跨平台、与原生平台通讯</p>\n<p><img src=\"./Flutter/Flutter_iOS_Android.png\" alt=\"Flutter_iOS_Android\"></p>\n<p>Flutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：</p>\n<ul>\n<li><p>应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。</p>\n</li>\n<li><p>宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。</p>\n</li>\n</ul>\n<p>e.g：获取iOS电量</p>\n<p>2.1.2 本质</p>\n<p>Flutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。<br>Dart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。</p>\n<h3 id=\"2-2、相同点\"><a href=\"#2-2、相同点\" class=\"headerlink\" title=\"2.2、相同点\"></a>2.2、相同点</h3><ol>\n<li>界面<br>解决移动端信息展示的目的；<br>都基于声明式、响应式的方式、热重载的方式；</li>\n</ol>\n<h3 id=\"2-3、异同点\"><a href=\"#2-3、异同点\" class=\"headerlink\" title=\"2.3、异同点\"></a>2.3、异同点</h3><h3 id=\"2-4、性能\"><a href=\"#2-4、性能\" class=\"headerlink\" title=\"2.4、性能\"></a>2.4、性能</h3><h3 id=\"2-5、体验\"><a href=\"#2-5、体验\" class=\"headerlink\" title=\"2.5、体验\"></a>2.5、体验</h3><ol>\n<li><p>体积</p>\n</li>\n<li><p>帧率</p>\n</li>\n<li><p>技术生态圈</p>\n</li>\n<li><p>硬件交互、推送等服务</p>\n</li>\n</ol>\n<h2 id=\"3、未来\"><a href=\"#3、未来\" class=\"headerlink\" title=\"3、未来\"></a>3、未来</h2><h2 id=\"4、憧憬\"><a href=\"#4、憧憬\" class=\"headerlink\" title=\"4、憧憬\"></a>4、憧憬</h2><p>当下的移动端、前端开发技术越来越多样化，复杂化。</p>\n<p>就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；<br>Android的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等，比iOS还要多一些。</p>\n<p>大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。</p>\n<p>前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。</p>\n<p>前不久Facebook 又推出了新的<a href=\"https://juejin.im/entry/5d2e6d1ce51d4510664d178e\">Hermes</a>，用于在React Native应用提高性能的。</p>\n<p>个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。</p>\n<p>统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。</p>\n<p>据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！</p>\n"},{"_content":"kill -l 查看信号列表\n\nConstant    Explanation\nSIGTERM    termination request, sent to the program\nSIGSEGV    invalid memory access (segmentation fault)\nSIGINT    external interrupt, usually initiated by the user\nSIGILL    invalid program image, such as invalid instruction\nSIGABRT    abnormal termination condition, as is e.g. initiated by abort()\nSIGFPE       erroneous arithmetic operation such as divide by zero\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/C Catalog.md","raw":"kill -l 查看信号列表\n\nConstant    Explanation\nSIGTERM    termination request, sent to the program\nSIGSEGV    invalid memory access (segmentation fault)\nSIGINT    external interrupt, usually initiated by the user\nSIGILL    invalid program image, such as invalid instruction\nSIGABRT    abnormal termination condition, as is e.g. initiated by abort()\nSIGFPE       erroneous arithmetic operation such as divide by zero\n","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/C Catalog","published":1,"date":"2019-08-02T01:53:51.000Z","updated":"2019-08-02T02:59:47.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgk5002f8n7u8i443vpr","content":"<p>kill -l 查看信号列表</p>\n<p>Constant    Explanation<br>SIGTERM    termination request, sent to the program<br>SIGSEGV    invalid memory access (segmentation fault)<br>SIGINT    external interrupt, usually initiated by the user<br>SIGILL    invalid program image, such as invalid instruction<br>SIGABRT    abnormal termination condition, as is e.g. initiated by abort()<br>SIGFPE       erroneous arithmetic operation such as divide by zero</p>\n","site":{"data":{}},"excerpt":"","more":"<p>kill -l 查看信号列表</p>\n<p>Constant    Explanation<br>SIGTERM    termination request, sent to the program<br>SIGSEGV    invalid memory access (segmentation fault)<br>SIGINT    external interrupt, usually initiated by the user<br>SIGILL    invalid program image, such as invalid instruction<br>SIGABRT    abnormal termination condition, as is e.g. initiated by abort()<br>SIGFPE       erroneous arithmetic operation such as divide by zero</p>\n"},{"_content":"# boost 编译器 b2\n\n```sh\n./b2 --help\n```\n\n```sh\nBoost.Build 2018.02-git\n\nProject-specific help:\n\n  Project has jamfile at Jamroot\n\nUsage:\n\n  b2 [options] [properties] [install|stage]\n\n  Builds and installs Boost.\n\nTargets and Related Options:\n\n  install                 Install headers and compiled library files to the\n  =======                 configured locations (below).\n\n  --prefix=<PREFIX>       Install architecture independent files here.\n                          Default; C:\\Boost on Win32\n                          Default; /usr/local on Unix. Linux, etc.\n\n  --exec-prefix=<EPREFIX> Install architecture dependent files here.\n                          Default; <PREFIX>\n\n  --libdir=<DIR>          Install library files here.\n                          Default; <EPREFIX>/lib\n\n  --includedir=<HDRDIR>   Install header files here.\n                          Default; <PREFIX>/include\n\n  stage                   Build and install only compiled library files to the\n  =====                   stage directory.\n\n  --stagedir=<STAGEDIR>   Install library files here\n                          Default; ./stage\n\nOther Options:\n\n  --build-type=<type>     Build the specified pre-defined set of variations of\n                          the libraries. Note, that which variants get built\n                          depends on what each library supports.\n\n                              -- minimal -- (default) Builds a minimal set of\n                              variants. On Windows, these are static\n                              multithreaded libraries in debug and release\n                              modes, using shared runtime. On Linux, these are\n                              static and shared multithreaded libraries in\n                              release mode.\n\n                              -- complete -- Build all possible variations.\n\n  --build-dir=DIR         Build in this location instead of building within\n                          the distribution tree. Recommended!\n\n  --show-libraries        Display the list of Boost libraries that require\n                          build and installation steps, and then exit.\n\n  --layout=<layout>       Determine whether to choose library names and header\n                          locations such that multiple versions of Boost or\n                          multiple compilers can be used on the same system.\n\n                              -- versioned -- Names of boost binaries include\n                              the Boost version number, name and version of\n                              the compiler and encoded build properties. Boost\n                              headers are installed in a subdirectory of\n                              <HDRDIR> whose name contains the Boost version\n                              number.\n\n                              -- tagged -- Names of boost binaries include the\n                              encoded build properties such as variant and\n                              threading, but do not including compiler name\n                              and version, or Boost version. This option is\n                              useful if you build several variants of Boost,\n                              using the same compiler.\n\n                              -- system -- Binaries names do not include the\n                              Boost version number or the name and version\n                              number of the compiler. Boost headers are\n                              installed directly into <HDRDIR>. This option is\n                              intended for system integrators building\n                              distribution packages.\n\n                          The default value is 'versioned' on Windows, and\n                          'system' on Unix.\n\n  --buildid=ID            Add the specified ID to the name of built libraries.\n                          The default is to not add anything.\n\n  --python-buildid=ID     Add the specified ID to the name of built libraries\n                          that depend on Python. The default is to not add\n                          anything. This ID is added in addition to --buildid.\n\n  --help                  This message.\n\n  --with-<library>        Build and install the specified <library>. If this\n                          option is used, only libraries specified using this\n                          option will be built.\n\n  --without-<library>     Do not build, stage, or install the specified\n                          <library>. By default, all libraries are built.\n\nProperties:\n\n  toolset=toolset         Indicate the toolset to build with.\n\n  variant=debug|release   Select the build variant\n\n  link=static|shared      Whether to build static or shared libraries\n\n  threading=single|multi  Whether to build single or multithreaded binaries\n\n  runtime-link=static|shared\n                          Whether to link to static or shared C and C++\n                          runtime.\n\n\nGeneral command line usage:\n\n    b2 [options] [properties] [targets]\n\n  Options, properties and targets can be specified in any order.\n      \nImportant Options:\n\n  * --clean Remove targets instead of building\n  * -a Rebuild everything\n  * -n Don't execute the commands, only print them\n  * -d+2 Show commands as they are executed\n  * -d0 Suppress all informational messages\n  * -q Stop at first error\n  * --reconfigure Rerun all configuration checks\n  * --debug-configuration Diagnose configuration\n  * --debug-building Report which targets are built with what properties\n  * --debug-generator Diagnose generator search/execution\n\nFurther Help:\n\n  The following options can be used to obtain additional documentation.\n\n  * --help-options Print more obscure command line options.\n  * --help-internal Boost.Build implementation details.\n  * --help-doc-options Implementation details doc formatting.\n\n...found 1 target...\n\n```\n\n1.69.0 需要编译部分：\n\n```sh\n./b2 --show-libraries\n```\n\n```sh\n- atomic\n- chrono\n- container\n- context\n- contract\n- coroutine\n- date_time\n- exception\n- fiber\n- filesystem\n- graph\n- graph_parallel\n- iostreams\n- locale\n- log\n- math\n- mpi\n- program_options\n- python\n- random\n- regex\n- serialization\n- stacktrace\n- system\n- test\n- thread\n- timer\n- type_erasure\n- wave\n```\n","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/boost-b2.md","raw":"# boost 编译器 b2\n\n```sh\n./b2 --help\n```\n\n```sh\nBoost.Build 2018.02-git\n\nProject-specific help:\n\n  Project has jamfile at Jamroot\n\nUsage:\n\n  b2 [options] [properties] [install|stage]\n\n  Builds and installs Boost.\n\nTargets and Related Options:\n\n  install                 Install headers and compiled library files to the\n  =======                 configured locations (below).\n\n  --prefix=<PREFIX>       Install architecture independent files here.\n                          Default; C:\\Boost on Win32\n                          Default; /usr/local on Unix. Linux, etc.\n\n  --exec-prefix=<EPREFIX> Install architecture dependent files here.\n                          Default; <PREFIX>\n\n  --libdir=<DIR>          Install library files here.\n                          Default; <EPREFIX>/lib\n\n  --includedir=<HDRDIR>   Install header files here.\n                          Default; <PREFIX>/include\n\n  stage                   Build and install only compiled library files to the\n  =====                   stage directory.\n\n  --stagedir=<STAGEDIR>   Install library files here\n                          Default; ./stage\n\nOther Options:\n\n  --build-type=<type>     Build the specified pre-defined set of variations of\n                          the libraries. Note, that which variants get built\n                          depends on what each library supports.\n\n                              -- minimal -- (default) Builds a minimal set of\n                              variants. On Windows, these are static\n                              multithreaded libraries in debug and release\n                              modes, using shared runtime. On Linux, these are\n                              static and shared multithreaded libraries in\n                              release mode.\n\n                              -- complete -- Build all possible variations.\n\n  --build-dir=DIR         Build in this location instead of building within\n                          the distribution tree. Recommended!\n\n  --show-libraries        Display the list of Boost libraries that require\n                          build and installation steps, and then exit.\n\n  --layout=<layout>       Determine whether to choose library names and header\n                          locations such that multiple versions of Boost or\n                          multiple compilers can be used on the same system.\n\n                              -- versioned -- Names of boost binaries include\n                              the Boost version number, name and version of\n                              the compiler and encoded build properties. Boost\n                              headers are installed in a subdirectory of\n                              <HDRDIR> whose name contains the Boost version\n                              number.\n\n                              -- tagged -- Names of boost binaries include the\n                              encoded build properties such as variant and\n                              threading, but do not including compiler name\n                              and version, or Boost version. This option is\n                              useful if you build several variants of Boost,\n                              using the same compiler.\n\n                              -- system -- Binaries names do not include the\n                              Boost version number or the name and version\n                              number of the compiler. Boost headers are\n                              installed directly into <HDRDIR>. This option is\n                              intended for system integrators building\n                              distribution packages.\n\n                          The default value is 'versioned' on Windows, and\n                          'system' on Unix.\n\n  --buildid=ID            Add the specified ID to the name of built libraries.\n                          The default is to not add anything.\n\n  --python-buildid=ID     Add the specified ID to the name of built libraries\n                          that depend on Python. The default is to not add\n                          anything. This ID is added in addition to --buildid.\n\n  --help                  This message.\n\n  --with-<library>        Build and install the specified <library>. If this\n                          option is used, only libraries specified using this\n                          option will be built.\n\n  --without-<library>     Do not build, stage, or install the specified\n                          <library>. By default, all libraries are built.\n\nProperties:\n\n  toolset=toolset         Indicate the toolset to build with.\n\n  variant=debug|release   Select the build variant\n\n  link=static|shared      Whether to build static or shared libraries\n\n  threading=single|multi  Whether to build single or multithreaded binaries\n\n  runtime-link=static|shared\n                          Whether to link to static or shared C and C++\n                          runtime.\n\n\nGeneral command line usage:\n\n    b2 [options] [properties] [targets]\n\n  Options, properties and targets can be specified in any order.\n      \nImportant Options:\n\n  * --clean Remove targets instead of building\n  * -a Rebuild everything\n  * -n Don't execute the commands, only print them\n  * -d+2 Show commands as they are executed\n  * -d0 Suppress all informational messages\n  * -q Stop at first error\n  * --reconfigure Rerun all configuration checks\n  * --debug-configuration Diagnose configuration\n  * --debug-building Report which targets are built with what properties\n  * --debug-generator Diagnose generator search/execution\n\nFurther Help:\n\n  The following options can be used to obtain additional documentation.\n\n  * --help-options Print more obscure command line options.\n  * --help-internal Boost.Build implementation details.\n  * --help-doc-options Implementation details doc formatting.\n\n...found 1 target...\n\n```\n\n1.69.0 需要编译部分：\n\n```sh\n./b2 --show-libraries\n```\n\n```sh\n- atomic\n- chrono\n- container\n- context\n- contract\n- coroutine\n- date_time\n- exception\n- fiber\n- filesystem\n- graph\n- graph_parallel\n- iostreams\n- locale\n- log\n- math\n- mpi\n- program_options\n- python\n- random\n- regex\n- serialization\n- stacktrace\n- system\n- test\n- thread\n- timer\n- type_erasure\n- wave\n```\n","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/boost-b2","published":1,"date":"2019-08-14T02:37:07.000Z","updated":"2019-08-14T02:57:58.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgk5002g8n7u4f5b9cpw","content":"<h1 id=\"boost-编译器-b2\"><a href=\"#boost-编译器-b2\" class=\"headerlink\" title=\"boost 编译器 b2\"></a>boost 编译器 b2</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./b2 --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boost.Build 2018.02-git</span><br><span class=\"line\"></span><br><span class=\"line\">Project-specific <span class=\"built_in\">help</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  Project has jamfile at Jamroot</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">  b2 [options] [properties] [install|stage]</span><br><span class=\"line\"></span><br><span class=\"line\">  Builds and installs Boost.</span><br><span class=\"line\"></span><br><span class=\"line\">Targets and Related Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  install                 Install headers and compiled library files to the</span><br><span class=\"line\">  =======                 configured locations (below).</span><br><span class=\"line\"></span><br><span class=\"line\">  --prefix=&lt;PREFIX&gt;       Install architecture independent files here.</span><br><span class=\"line\">                          Default; C:\\Boost on Win32</span><br><span class=\"line\">                          Default; /usr/<span class=\"built_in\">local</span> on Unix. Linux, etc.</span><br><span class=\"line\"></span><br><span class=\"line\">  --exec-prefix=&lt;EPREFIX&gt; Install architecture dependent files here.</span><br><span class=\"line\">                          Default; &lt;PREFIX&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  --libdir=&lt;DIR&gt;          Install library files here.</span><br><span class=\"line\">                          Default; &lt;EPREFIX&gt;/lib</span><br><span class=\"line\"></span><br><span class=\"line\">  --includedir=&lt;HDRDIR&gt;   Install header files here.</span><br><span class=\"line\">                          Default; &lt;PREFIX&gt;/include</span><br><span class=\"line\"></span><br><span class=\"line\">  stage                   Build and install only compiled library files to the</span><br><span class=\"line\">  =====                   stage directory.</span><br><span class=\"line\"></span><br><span class=\"line\">  --stagedir=&lt;STAGEDIR&gt;   Install library files here</span><br><span class=\"line\">                          Default; ./stage</span><br><span class=\"line\"></span><br><span class=\"line\">Other Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  --build-type=&lt;<span class=\"built_in\">type</span>&gt;     Build the specified pre-defined <span class=\"built_in\">set</span> of variations of</span><br><span class=\"line\">                          the libraries. Note, that <span class=\"built_in\">which</span> variants get built</span><br><span class=\"line\">                          depends on what each library supports.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- minimal -- (default) Builds a minimal <span class=\"built_in\">set</span> of</span><br><span class=\"line\">                              variants. On Windows, these are static</span><br><span class=\"line\">                              multithreaded libraries <span class=\"keyword\">in</span> debug and release</span><br><span class=\"line\">                              modes, using shared runtime. On Linux, these are</span><br><span class=\"line\">                              static and shared multithreaded libraries <span class=\"keyword\">in</span></span><br><span class=\"line\">                              release mode.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- complete -- Build all possible variations.</span><br><span class=\"line\"></span><br><span class=\"line\">  --build-dir=DIR         Build <span class=\"keyword\">in</span> this location instead of building within</span><br><span class=\"line\">                          the distribution tree. Recommended!</span><br><span class=\"line\"></span><br><span class=\"line\">  --show-libraries        Display the list of Boost libraries that require</span><br><span class=\"line\">                          build and installation steps, and <span class=\"keyword\">then</span> <span class=\"built_in\">exit</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">  --layout=&lt;layout&gt;       Determine whether to choose library names and header</span><br><span class=\"line\">                          locations such that multiple versions of Boost or</span><br><span class=\"line\">                          multiple compilers can be used on the same system.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- versioned -- Names of boost binaries include</span><br><span class=\"line\">                              the Boost version number, name and version of</span><br><span class=\"line\">                              the compiler and encoded build properties. Boost</span><br><span class=\"line\">                              headers are installed <span class=\"keyword\">in</span> a subdirectory of</span><br><span class=\"line\">                              &lt;HDRDIR&gt; whose name contains the Boost version</span><br><span class=\"line\">                              number.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- tagged -- Names of boost binaries include the</span><br><span class=\"line\">                              encoded build properties such as variant and</span><br><span class=\"line\">                              threading, but <span class=\"keyword\">do</span> not including compiler name</span><br><span class=\"line\">                              and version, or Boost version. This option is</span><br><span class=\"line\">                              useful <span class=\"keyword\">if</span> you build several variants of Boost,</span><br><span class=\"line\">                              using the same compiler.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- system -- Binaries names <span class=\"keyword\">do</span> not include the</span><br><span class=\"line\">                              Boost version number or the name and version</span><br><span class=\"line\">                              number of the compiler. Boost headers are</span><br><span class=\"line\">                              installed directly into &lt;HDRDIR&gt;. This option is</span><br><span class=\"line\">                              intended <span class=\"keyword\">for</span> system integrators building</span><br><span class=\"line\">                              distribution packages.</span><br><span class=\"line\"></span><br><span class=\"line\">                          The default value is <span class=\"string\">&#x27;versioned&#x27;</span> on Windows, and</span><br><span class=\"line\">                          <span class=\"string\">&#x27;system&#x27;</span> on Unix.</span><br><span class=\"line\"></span><br><span class=\"line\">  --buildid=ID            Add the specified ID to the name of built libraries.</span><br><span class=\"line\">                          The default is to not add anything.</span><br><span class=\"line\"></span><br><span class=\"line\">  --python-buildid=ID     Add the specified ID to the name of built libraries</span><br><span class=\"line\">                          that depend on Python. The default is to not add</span><br><span class=\"line\">                          anything. This ID is added <span class=\"keyword\">in</span> addition to --buildid.</span><br><span class=\"line\"></span><br><span class=\"line\">  --<span class=\"built_in\">help</span>                  This message.</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-&lt;library&gt;        Build and install the specified &lt;library&gt;. If this</span><br><span class=\"line\">                          option is used, only libraries specified using this</span><br><span class=\"line\">                          option will be built.</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-&lt;library&gt;     Do not build, stage, or install the specified</span><br><span class=\"line\">                          &lt;library&gt;. By default, all libraries are built.</span><br><span class=\"line\"></span><br><span class=\"line\">Properties:</span><br><span class=\"line\"></span><br><span class=\"line\">  toolset=toolset         Indicate the toolset to build with.</span><br><span class=\"line\"></span><br><span class=\"line\">  variant=debug|release   Select the build variant</span><br><span class=\"line\"></span><br><span class=\"line\">  link=static|shared      Whether to build static or shared libraries</span><br><span class=\"line\"></span><br><span class=\"line\">  threading=single|multi  Whether to build single or multithreaded binaries</span><br><span class=\"line\"></span><br><span class=\"line\">  runtime-link=static|shared</span><br><span class=\"line\">                          Whether to link to static or shared C and C++</span><br><span class=\"line\">                          runtime.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">General <span class=\"built_in\">command</span> line usage:</span><br><span class=\"line\"></span><br><span class=\"line\">    b2 [options] [properties] [targets]</span><br><span class=\"line\"></span><br><span class=\"line\">  Options, properties and targets can be specified <span class=\"keyword\">in</span> any order.</span><br><span class=\"line\">      </span><br><span class=\"line\">Important Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  * --clean Remove targets instead of building</span><br><span class=\"line\">  * -a Rebuild everything</span><br><span class=\"line\">  * -n Don<span class=\"string\">&#x27;t execute the commands, only print them</span></span><br><span class=\"line\"><span class=\"string\">  * -d+2 Show commands as they are executed</span></span><br><span class=\"line\"><span class=\"string\">  * -d0 Suppress all informational messages</span></span><br><span class=\"line\"><span class=\"string\">  * -q Stop at first error</span></span><br><span class=\"line\"><span class=\"string\">  * --reconfigure Rerun all configuration checks</span></span><br><span class=\"line\"><span class=\"string\">  * --debug-configuration Diagnose configuration</span></span><br><span class=\"line\"><span class=\"string\">  * --debug-building Report which targets are built with what properties</span></span><br><span class=\"line\"><span class=\"string\">  * --debug-generator Diagnose generator search/execution</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Further Help:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  The following options can be used to obtain additional documentation.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  * --help-options Print more obscure command line options.</span></span><br><span class=\"line\"><span class=\"string\">  * --help-internal Boost.Build implementation details.</span></span><br><span class=\"line\"><span class=\"string\">  * --help-doc-options Implementation details doc formatting.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">...found 1 target...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<p>1.69.0 需要编译部分：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./b2 --show-libraries</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- atomic</span><br><span class=\"line\">- chrono</span><br><span class=\"line\">- container</span><br><span class=\"line\">- context</span><br><span class=\"line\">- contract</span><br><span class=\"line\">- coroutine</span><br><span class=\"line\">- date_time</span><br><span class=\"line\">- exception</span><br><span class=\"line\">- fiber</span><br><span class=\"line\">- filesystem</span><br><span class=\"line\">- graph</span><br><span class=\"line\">- graph_parallel</span><br><span class=\"line\">- iostreams</span><br><span class=\"line\">- locale</span><br><span class=\"line\">- <span class=\"built_in\">log</span></span><br><span class=\"line\">- math</span><br><span class=\"line\">- mpi</span><br><span class=\"line\">- program_options</span><br><span class=\"line\">- python</span><br><span class=\"line\">- random</span><br><span class=\"line\">- regex</span><br><span class=\"line\">- serialization</span><br><span class=\"line\">- stacktrace</span><br><span class=\"line\">- system</span><br><span class=\"line\">- <span class=\"built_in\">test</span></span><br><span class=\"line\">- thread</span><br><span class=\"line\">- timer</span><br><span class=\"line\">- type_erasure</span><br><span class=\"line\">- wave</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"boost-编译器-b2\"><a href=\"#boost-编译器-b2\" class=\"headerlink\" title=\"boost 编译器 b2\"></a>boost 编译器 b2</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./b2 --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boost.Build 2018.02-git</span><br><span class=\"line\"></span><br><span class=\"line\">Project-specific <span class=\"built_in\">help</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  Project has jamfile at Jamroot</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">  b2 [options] [properties] [install|stage]</span><br><span class=\"line\"></span><br><span class=\"line\">  Builds and installs Boost.</span><br><span class=\"line\"></span><br><span class=\"line\">Targets and Related Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  install                 Install headers and compiled library files to the</span><br><span class=\"line\">  =======                 configured locations (below).</span><br><span class=\"line\"></span><br><span class=\"line\">  --prefix=&lt;PREFIX&gt;       Install architecture independent files here.</span><br><span class=\"line\">                          Default; C:\\Boost on Win32</span><br><span class=\"line\">                          Default; /usr/<span class=\"built_in\">local</span> on Unix. Linux, etc.</span><br><span class=\"line\"></span><br><span class=\"line\">  --exec-prefix=&lt;EPREFIX&gt; Install architecture dependent files here.</span><br><span class=\"line\">                          Default; &lt;PREFIX&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  --libdir=&lt;DIR&gt;          Install library files here.</span><br><span class=\"line\">                          Default; &lt;EPREFIX&gt;/lib</span><br><span class=\"line\"></span><br><span class=\"line\">  --includedir=&lt;HDRDIR&gt;   Install header files here.</span><br><span class=\"line\">                          Default; &lt;PREFIX&gt;/include</span><br><span class=\"line\"></span><br><span class=\"line\">  stage                   Build and install only compiled library files to the</span><br><span class=\"line\">  =====                   stage directory.</span><br><span class=\"line\"></span><br><span class=\"line\">  --stagedir=&lt;STAGEDIR&gt;   Install library files here</span><br><span class=\"line\">                          Default; ./stage</span><br><span class=\"line\"></span><br><span class=\"line\">Other Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  --build-type=&lt;<span class=\"built_in\">type</span>&gt;     Build the specified pre-defined <span class=\"built_in\">set</span> of variations of</span><br><span class=\"line\">                          the libraries. Note, that <span class=\"built_in\">which</span> variants get built</span><br><span class=\"line\">                          depends on what each library supports.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- minimal -- (default) Builds a minimal <span class=\"built_in\">set</span> of</span><br><span class=\"line\">                              variants. On Windows, these are static</span><br><span class=\"line\">                              multithreaded libraries <span class=\"keyword\">in</span> debug and release</span><br><span class=\"line\">                              modes, using shared runtime. On Linux, these are</span><br><span class=\"line\">                              static and shared multithreaded libraries <span class=\"keyword\">in</span></span><br><span class=\"line\">                              release mode.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- complete -- Build all possible variations.</span><br><span class=\"line\"></span><br><span class=\"line\">  --build-dir=DIR         Build <span class=\"keyword\">in</span> this location instead of building within</span><br><span class=\"line\">                          the distribution tree. Recommended!</span><br><span class=\"line\"></span><br><span class=\"line\">  --show-libraries        Display the list of Boost libraries that require</span><br><span class=\"line\">                          build and installation steps, and <span class=\"keyword\">then</span> <span class=\"built_in\">exit</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">  --layout=&lt;layout&gt;       Determine whether to choose library names and header</span><br><span class=\"line\">                          locations such that multiple versions of Boost or</span><br><span class=\"line\">                          multiple compilers can be used on the same system.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- versioned -- Names of boost binaries include</span><br><span class=\"line\">                              the Boost version number, name and version of</span><br><span class=\"line\">                              the compiler and encoded build properties. Boost</span><br><span class=\"line\">                              headers are installed <span class=\"keyword\">in</span> a subdirectory of</span><br><span class=\"line\">                              &lt;HDRDIR&gt; whose name contains the Boost version</span><br><span class=\"line\">                              number.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- tagged -- Names of boost binaries include the</span><br><span class=\"line\">                              encoded build properties such as variant and</span><br><span class=\"line\">                              threading, but <span class=\"keyword\">do</span> not including compiler name</span><br><span class=\"line\">                              and version, or Boost version. This option is</span><br><span class=\"line\">                              useful <span class=\"keyword\">if</span> you build several variants of Boost,</span><br><span class=\"line\">                              using the same compiler.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- system -- Binaries names <span class=\"keyword\">do</span> not include the</span><br><span class=\"line\">                              Boost version number or the name and version</span><br><span class=\"line\">                              number of the compiler. Boost headers are</span><br><span class=\"line\">                              installed directly into &lt;HDRDIR&gt;. This option is</span><br><span class=\"line\">                              intended <span class=\"keyword\">for</span> system integrators building</span><br><span class=\"line\">                              distribution packages.</span><br><span class=\"line\"></span><br><span class=\"line\">                          The default value is <span class=\"string\">&#x27;versioned&#x27;</span> on Windows, and</span><br><span class=\"line\">                          <span class=\"string\">&#x27;system&#x27;</span> on Unix.</span><br><span class=\"line\"></span><br><span class=\"line\">  --buildid=ID            Add the specified ID to the name of built libraries.</span><br><span class=\"line\">                          The default is to not add anything.</span><br><span class=\"line\"></span><br><span class=\"line\">  --python-buildid=ID     Add the specified ID to the name of built libraries</span><br><span class=\"line\">                          that depend on Python. The default is to not add</span><br><span class=\"line\">                          anything. This ID is added <span class=\"keyword\">in</span> addition to --buildid.</span><br><span class=\"line\"></span><br><span class=\"line\">  --<span class=\"built_in\">help</span>                  This message.</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-&lt;library&gt;        Build and install the specified &lt;library&gt;. If this</span><br><span class=\"line\">                          option is used, only libraries specified using this</span><br><span class=\"line\">                          option will be built.</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-&lt;library&gt;     Do not build, stage, or install the specified</span><br><span class=\"line\">                          &lt;library&gt;. By default, all libraries are built.</span><br><span class=\"line\"></span><br><span class=\"line\">Properties:</span><br><span class=\"line\"></span><br><span class=\"line\">  toolset=toolset         Indicate the toolset to build with.</span><br><span class=\"line\"></span><br><span class=\"line\">  variant=debug|release   Select the build variant</span><br><span class=\"line\"></span><br><span class=\"line\">  link=static|shared      Whether to build static or shared libraries</span><br><span class=\"line\"></span><br><span class=\"line\">  threading=single|multi  Whether to build single or multithreaded binaries</span><br><span class=\"line\"></span><br><span class=\"line\">  runtime-link=static|shared</span><br><span class=\"line\">                          Whether to link to static or shared C and C++</span><br><span class=\"line\">                          runtime.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">General <span class=\"built_in\">command</span> line usage:</span><br><span class=\"line\"></span><br><span class=\"line\">    b2 [options] [properties] [targets]</span><br><span class=\"line\"></span><br><span class=\"line\">  Options, properties and targets can be specified <span class=\"keyword\">in</span> any order.</span><br><span class=\"line\">      </span><br><span class=\"line\">Important Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  * --clean Remove targets instead of building</span><br><span class=\"line\">  * -a Rebuild everything</span><br><span class=\"line\">  * -n Don<span class=\"string\">&#x27;t execute the commands, only print them</span></span><br><span class=\"line\"><span class=\"string\">  * -d+2 Show commands as they are executed</span></span><br><span class=\"line\"><span class=\"string\">  * -d0 Suppress all informational messages</span></span><br><span class=\"line\"><span class=\"string\">  * -q Stop at first error</span></span><br><span class=\"line\"><span class=\"string\">  * --reconfigure Rerun all configuration checks</span></span><br><span class=\"line\"><span class=\"string\">  * --debug-configuration Diagnose configuration</span></span><br><span class=\"line\"><span class=\"string\">  * --debug-building Report which targets are built with what properties</span></span><br><span class=\"line\"><span class=\"string\">  * --debug-generator Diagnose generator search/execution</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Further Help:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  The following options can be used to obtain additional documentation.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  * --help-options Print more obscure command line options.</span></span><br><span class=\"line\"><span class=\"string\">  * --help-internal Boost.Build implementation details.</span></span><br><span class=\"line\"><span class=\"string\">  * --help-doc-options Implementation details doc formatting.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">...found 1 target...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<p>1.69.0 需要编译部分：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./b2 --show-libraries</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- atomic</span><br><span class=\"line\">- chrono</span><br><span class=\"line\">- container</span><br><span class=\"line\">- context</span><br><span class=\"line\">- contract</span><br><span class=\"line\">- coroutine</span><br><span class=\"line\">- date_time</span><br><span class=\"line\">- exception</span><br><span class=\"line\">- fiber</span><br><span class=\"line\">- filesystem</span><br><span class=\"line\">- graph</span><br><span class=\"line\">- graph_parallel</span><br><span class=\"line\">- iostreams</span><br><span class=\"line\">- locale</span><br><span class=\"line\">- <span class=\"built_in\">log</span></span><br><span class=\"line\">- math</span><br><span class=\"line\">- mpi</span><br><span class=\"line\">- program_options</span><br><span class=\"line\">- python</span><br><span class=\"line\">- random</span><br><span class=\"line\">- regex</span><br><span class=\"line\">- serialization</span><br><span class=\"line\">- stacktrace</span><br><span class=\"line\">- system</span><br><span class=\"line\">- <span class=\"built_in\">test</span></span><br><span class=\"line\">- thread</span><br><span class=\"line\">- timer</span><br><span class=\"line\">- type_erasure</span><br><span class=\"line\">- wave</span><br></pre></td></tr></table></figure>\n"},{"_content":"# Flutter\n\n## 1、入门\n\n### 1.1 语言\n\n1.1.1 Dart：[学习路线](https://dart.dev/tools/sdk)\n\n![Dart](./Flutter/Dart.png)\n\n1.1.2 Dart [概述](http://dart.goodev.org/guides/language)\n\n1.1.3 Dart [库预览](http://dart.goodev.org/guides/libraries)\n\n### 1.2 工具集\n\n2.1 通用工具\n\n2.1.1 [DartPad](https://dartpad.dartlang.org/)\n\n    DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.\n\n2.1.2 IDEs 与 编辑器\n\n2.1.2.1 IDE： [Android Studio](https://dart.dev/tools/jetbrains-plugin)、[IntelliJ IDEA](https://dart.dev/tools/jetbrains-plugin)、[Visual Studio Code](https://code.visualstudio.com/)\n\n2.1.2.2 IDEDart 社区维护的编辑器：[Emacs](https://github.com/bradyt/dart-mode)、[Atom](https://github.com/dart-atom/dart)、[Vim](https://github.com/dart-lang/dart-vim-plugin)\n\n2.1.3 命令行工具\n\n    dartanalyzer\n        A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\n    dartdoc\n        Generates API reference documentation.\n\n    dartfmt\n        Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\n    pub\n        Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n        Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\n    build_runner\n        A code generator.\n\n    dartfix\n        A tool for migrating Dart source code and fixing common issues.\n\n2.2 Web工具集\n\n    webdev\n        A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\n    dart2js\n        The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\n    dartdevc\n        The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\n    build_runner\n        A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n\n2.3 命令行工具集与服务器工具集\n\n    Standalone Dart VM: dart\n        Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\n    AOT compiler and runtime: dart2aot, dartaotruntime\n        Support ahead-of-time compilation of Dart code to native x64 machine code.\n\n    Pub package manager: pub\n        Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n\n## 2、Flutter\n\n### 2.1 Flutter是什么\n\n    Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\n    Flutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。\n    Dart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。\n\n    Flutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n\n### 2.2 核心原则\n\nFlutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。\n\n一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。\n\n![widget_Render_Object](./Flutter/Flutter_Render_Object.png)\n\n### 2.3 Widget如何工作\n\n* Widget实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。\n<br/>\n* 一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。    <br/>\n  \n* 最终的UI树其实是由一个个独立的Element节点构成。组件最终的Layout、渲染都是通过RenderObject来完成的，从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。 <br/>\nElement就是Widget在UI树具体位置的一个实例化对象，大多数Element只有唯一的renderObject，但还有一些Element会有多个子节点，如继承自RenderObjectElement的一些类，比如MultiChildRenderObjectElement。最终所有Element的RenderObject构成一棵树，我们称之为渲染树，即render tree。\n<br/>\n* Element的生命周期如下：\n\n    1. Framework 调用Widget.createElement 创建一个Element实例，记为element。\n    2. Framework 调用 element.mount(parentElement,newSlot) ，mount方法中首先调用elment所对应Widget的createRenderObject方法创建与element相关联的RenderObject对象，然后调用element.attachRenderObject方法将element.renderObject添加到渲染树中插槽指定的位置（这一步不是必须的，一般发生在Element树结构发生变化时才需要重新attach）。插入到渲染树后的element就处于“active”状态，处于“active”状态后就可以显示在屏幕上了（可以隐藏）。\n    3. 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n    4. 当有父Widget的配置数据改变时，同时其State.build返回的Widget结构与之前不同，此时就需要重新构建对应的Element树。为了进行Element复用，在Element重新构建前会先尝试是否可以复用旧树上相同位置的element，element节点在更新前都会调用其对应Widget的canUpdate方法，如果返回true，则复用旧Element，旧的Element会使用新Widget配置数据更新，反之则会创建一个新的Element。Widget.canUpdate主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来避免复用。\n    5. 当有祖先Element决定要移除element 时（如Widget树结构发生了变化，导致element对应的Widget被移除），这时该祖先Element就会调用deactivateChild 方法来移除它，移除后element.renderObject也会被从渲染树中移除，然后Framework会调用element.deactivate 方法，这时element状态变为“inactive”状态。\n    6. “inactive”态的element将不会再显示到屏幕。为了避免在一次动画执行过程中反复创建、移除某个特定element，“inactive”态的element在当前动画最后一帧结束前都会保留，如果在动画执行结束后它还未能重新变成”active“状态，Framework就会调用其unmount方法将其彻底移除，这时element的状态为defunct,它将永远不会再被插入到树中。\n    7. 如果element要重新插入到Element树的其它位置，如element或element的祖先拥有一个GlobalKey（用于全局复用元素），那么Framework会先将element从现有位置移除，然后再调用其activate方法，并将其renderObject重新attach到渲染树。\n\n### 2.4 框架\n\n![Flutter框架](./Flutter/Flutter_Frameworks.png)\n\n**Flutter Framework:** 这是一个纯 Dart实现的 SDK。它实现了一套基础库， 用于处理动画、绘图和手势。并且基于绘图封装了一套 UI组件库，然后根据 Material 和Cupertino两种视觉风格区分开来。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。\n\n**Flutter Engine:** 这是一个纯 C++实现的 SDK，其中囊括了 Skia引擎、Dart运行时、文字排版引擎等。不过说白了，它就是 Dart的一个运行时，它可以以 JIT、JIT Snapshot 或者 AOT的模式运行 Dart代码。在代码调用 dart:ui库时，提供 dart:ui库中 Native Binding 实现。 不过别忘了，这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码。\n\n### 2.5 界面渲染\n\n2.5.1 Flutter 如何渲染界面\n\n在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：\n\n![iOS_Render_flow](./Flutter/iOS_Render_flow.webp)\n\nCPU、GPU和显示器以一种特定的方式协作：\n\n> CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。\n\n![Rendering_pipeline](./Flutter/Rendering_pipeline.png)\n\n> GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。\n\n* Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。\n\n* Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。\n\n渲染树生成：\n\n![Rendering_pipeline](./Flutter/Rendering_pipe.png)\n\n2.5.2、Flutter 如何更新界面（Diff）\n\n当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。\n\n![Rendering_pipeline](./Flutter/Widget_update.png)\n\n> 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。\n>\n> Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n\n### 2.6 跨平台、与原生平台通讯\n\n![Flutter_iOS_Android](./Flutter/Flutter_iOS_Android.png)\n\nFlutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：\n\n* 应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。\n\n* 宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。\n\n* 硬件交互、推送等服务\n  \n* e.g：获取iOS电量\n  \n2.6.1 Flutter跨端——iOS\n\n> Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。\n>\n> 但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。\n\nFlutter 在iOS 上的启动流程：\n![Launch_flow_ios](./Flutter/Launch_flow_ios.webp)\n\n> 在应用的 View Controller 初始化后，会实例化一个 Flutter project的抽象（以下简称 project）。project会初始化一个 platform view的抽象实例，这个抽象实例会负责创建 Flutter 的运行时（以下简称 engine）。\n>\n> 当 View Controller将要显示时，调用 project查找和组合 Flutter的应用资源 bundle，并且把资源提供给 engine。\nengine在真正需要执行资源 bundle时才会创建 Dart执行的环境（懒加载，以下简称 Dart Controller），然后设置视图窗口的一些属性等东西（这是绘图引擎必需的）。 \n然后 engine中的 Dart Controller会加载 Dart代码并执行，执行的过程中会调用 dart:ui的 native binding实现向 GPU提供数据。\n\n2.6.2 Android\n\n## 3、深入Flutter\n\n### 3.1 体积\n\nFlutter应用的体积由两部分组成：应用代码和 SDK代码。应用代码是 Dart编译后的代码，如果做成可动态下发，那么这部分可以不计。\nSDK代码比较大就有点无奈了，SDK的组成部分有 Dart VM，Dart标准库，libwebp、libpng、libboringssl等第三方库，libskia，Dart UI库，然后再加上 icu_data，可能在单 arch下（iOS），SDK体积达到 40+MB。其中仅仅 Dart VM（不包含标准库）就达到了 7MB。\n\nFlutter SDK是 dynamic framework，如此大的二进制体积可能会造成动态链接耗时长。而如果静态链接，可能原来比较大的 App很有可能造成 TEXT段（iOS默认60M）超标。\n\n### 3.2 帧率\n\nDart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。\n\n在任何系统的UI框架中，动画实现的原理都是相同的，即：\n>在一段时间内，快速地多次改变UI外观，由于人眼会产生视觉暂留，最终看到的就是一个“连续”的动画，这和电影的原理是一样的，而UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），指每秒的动画帧数。很明显，帧率越高则动画就会越流畅。一般情况下，对于人眼来说，动画帧率超过16FPS，就比较流畅了，超过32FPS就会非常的细腻平滑，而超过32FPS基本就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用动画基本是持平的。\n\n### 3.3 [Dart线程和异步](https://flutterchina.club/flutter-for-ios/#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5)\n\n**Isolates：** 现代的浏览器以及移动浏览器都运行在多核 CPU 系统上。 要充分利用这些 CPU，开发者一般使用共享内存 数据来保证多线程的正确执行。然而， 多线程共享数据通常会导致很多潜在的问题，并导致代码运行出错。\n\n所有的 Dart 代码在 isolates 中运行而不是线程。 每个 isolate 都有自己的堆内存，并且确保每个 isolate 的状态都不能被其他 isolate 访问。因此，也不存在资源锁的问题。\n\nDart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。\n\nDart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。\n\n* 多线程示例：[isolate_example](./isolate.dart)\n\n### 3.4 [EventLoop、事件分发](https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a)\n\nFlutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。\n\n事件总线（EventBus）通过流控制器（StreamController）控制 事件流（Stream），事件流可以被监听、唤醒、停止、关闭、下沉，订阅者可以通过流控制器订阅流事件。\n\n### 3.5 事件响应\n\n一个对象是否可以响应事件，取决于其对命中测试的返回，当发生用户事件时，会从根节点（RenderView）开始进行命中测试，下面是RenderView的hitTest()源码：\n\n``` dart\nbool hitTest(HitTestResult result, { Offset position }) {\n  if (child != null)\n    child.hitTest(result, position: position); //递归子RenderBox进行命中测试\n  result.add(HitTestEntry(this)); //将测试结果添加到result中\n  return true;\n}\n```\n\nRenderBox默认的hitTest()实现：\n\n``` dart\nbool hitTest(HitTestResult result, { @required Offset position }) {\n  ...  \n  if (_size.contains(position)) {\n    if (hitTestChildren(result, position: position) || hitTestSelf(position)) {\n      result.add(BoxHitTestEntry(this, position));\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n我们看到默认的实现里调用了hitTestSelf()和hitTestChildren()两个方法，这两个方法默认实现如下：\n\n``` dart\n@protected\nbool hitTestSelf(Offset position) => false;\n\n@protected\nbool hitTestChildren(HitTestResult result, { Offset position }) => false;\n```\n\n> hitTest 方法用来判断该 RenderObject 是否在被点击的范围内，同时负责将被点击的 RenderBox 添加到 HitTestResult 列表中，参数 position 为事件触发的坐标（如果有的话），返回 true 则表示有 RenderBox 通过了命中测试，需要响应事件，反之则认为当前RenderBox没有命中。\n>\n> 在继承RenderBox时，可以直接重写hitTest()方法，也可以重写 hitTestSelf() 或 hitTestChildren(), 唯一不同的是 hitTest()中需要将通过命中测试的节点信息添加到命中测试结果列表中，而 hitTestSelf() 和 hitTestChildren()则只需要简单的返回true或false。\n\n### 3.6 Runtime（AOT）、JIT、Dart VM\n\n### 3.7 性能（CPU、GPU、Network、battery、Disk）\n\n### 3.8 [内存管理](https://mp.weixin.qq.com/s/efKCpCtvvHDHUiAsizobBQ)\n\nDart VM将内存管理分为新生代(New Generation)和老年代(Old Generation)。\n\n* 新生代(New Generation): 通常初次分配的对象都位于新生代中，该区域主要是存放内存较小并且生命周期较短的对象，比如局部变量。新生代会频繁执行内存回收(GC)，回收采用“复制-清除”算法，将内存分为两块(图中的from 和 to)，运行时每次只使用其中的一块(图中的from)，另一块备用(图中的to)。当发生GC时，将当前使用的内存块中存活的对象拷贝到备用内存块中，然后清除当前使用内存块，最后，交换两块内存的角色。\n\n![Memory_Manager](./Flutter/Memory_Manager_01.webp)\n\n* 老年代(Old Generation): 在新生代的GC中“幸存”下来的对象，它们会被转移到老年代中。老年代存放生命力周期较长，内存较大的对象。老年代通常比新生代要大很多。老年代的GC回收采用“标记-清除”算法，分成标记和清除两个阶段。在标记阶段，所有线程参与并发的完成对回收对象的标记，降低标记阶段耗时。在清理阶段，由GC线程负责清理回收对象，和应用线程同时执行，不影响应用运行。\n![Memory_Manager](./Flutter/Memory_Manager_02.webp)\n\n### 3.9 技术生态圈\n\n## 4、[Flutter & 原生](https://blog.codemagic.io/flutter-vs-swift/)\n\n1. 界面\n   解决移动端信息展示的目的；\n   都基于声明式、响应式的方式、热重载的方式；\n\n## 5、未来与憧憬\n\n当下的移动端、前端开发技术越来越多样化，复杂化。\n\n就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；\nAndroid的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等。\n\n大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。\n\n前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。\n\n前不久Facebook 又推出了新的[Hermes](https://juejin.im/entry/5d2e6d1ce51d4510664d178e)，用于在React Native应用提高性能的。\n\n个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。\n\n统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。\n\n据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！\n","source":"_posts/iOS学习笔记/Flutters/Flutter.md","raw":"# Flutter\n\n## 1、入门\n\n### 1.1 语言\n\n1.1.1 Dart：[学习路线](https://dart.dev/tools/sdk)\n\n![Dart](./Flutter/Dart.png)\n\n1.1.2 Dart [概述](http://dart.goodev.org/guides/language)\n\n1.1.3 Dart [库预览](http://dart.goodev.org/guides/libraries)\n\n### 1.2 工具集\n\n2.1 通用工具\n\n2.1.1 [DartPad](https://dartpad.dartlang.org/)\n\n    DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.\n\n2.1.2 IDEs 与 编辑器\n\n2.1.2.1 IDE： [Android Studio](https://dart.dev/tools/jetbrains-plugin)、[IntelliJ IDEA](https://dart.dev/tools/jetbrains-plugin)、[Visual Studio Code](https://code.visualstudio.com/)\n\n2.1.2.2 IDEDart 社区维护的编辑器：[Emacs](https://github.com/bradyt/dart-mode)、[Atom](https://github.com/dart-atom/dart)、[Vim](https://github.com/dart-lang/dart-vim-plugin)\n\n2.1.3 命令行工具\n\n    dartanalyzer\n        A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\n    dartdoc\n        Generates API reference documentation.\n\n    dartfmt\n        Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\n    pub\n        Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n        Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\n    build_runner\n        A code generator.\n\n    dartfix\n        A tool for migrating Dart source code and fixing common issues.\n\n2.2 Web工具集\n\n    webdev\n        A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\n    dart2js\n        The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\n    dartdevc\n        The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\n    build_runner\n        A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n\n2.3 命令行工具集与服务器工具集\n\n    Standalone Dart VM: dart\n        Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\n    AOT compiler and runtime: dart2aot, dartaotruntime\n        Support ahead-of-time compilation of Dart code to native x64 machine code.\n\n    Pub package manager: pub\n        Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n\n## 2、Flutter\n\n### 2.1 Flutter是什么\n\n    Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\n    Flutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。\n    Dart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。\n\n    Flutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n\n### 2.2 核心原则\n\nFlutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。\n\n一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。\n\n![widget_Render_Object](./Flutter/Flutter_Render_Object.png)\n\n### 2.3 Widget如何工作\n\n* Widget实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。\n<br/>\n* 一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。    <br/>\n  \n* 最终的UI树其实是由一个个独立的Element节点构成。组件最终的Layout、渲染都是通过RenderObject来完成的，从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。 <br/>\nElement就是Widget在UI树具体位置的一个实例化对象，大多数Element只有唯一的renderObject，但还有一些Element会有多个子节点，如继承自RenderObjectElement的一些类，比如MultiChildRenderObjectElement。最终所有Element的RenderObject构成一棵树，我们称之为渲染树，即render tree。\n<br/>\n* Element的生命周期如下：\n\n    1. Framework 调用Widget.createElement 创建一个Element实例，记为element。\n    2. Framework 调用 element.mount(parentElement,newSlot) ，mount方法中首先调用elment所对应Widget的createRenderObject方法创建与element相关联的RenderObject对象，然后调用element.attachRenderObject方法将element.renderObject添加到渲染树中插槽指定的位置（这一步不是必须的，一般发生在Element树结构发生变化时才需要重新attach）。插入到渲染树后的element就处于“active”状态，处于“active”状态后就可以显示在屏幕上了（可以隐藏）。\n    3. 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n    4. 当有父Widget的配置数据改变时，同时其State.build返回的Widget结构与之前不同，此时就需要重新构建对应的Element树。为了进行Element复用，在Element重新构建前会先尝试是否可以复用旧树上相同位置的element，element节点在更新前都会调用其对应Widget的canUpdate方法，如果返回true，则复用旧Element，旧的Element会使用新Widget配置数据更新，反之则会创建一个新的Element。Widget.canUpdate主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来避免复用。\n    5. 当有祖先Element决定要移除element 时（如Widget树结构发生了变化，导致element对应的Widget被移除），这时该祖先Element就会调用deactivateChild 方法来移除它，移除后element.renderObject也会被从渲染树中移除，然后Framework会调用element.deactivate 方法，这时element状态变为“inactive”状态。\n    6. “inactive”态的element将不会再显示到屏幕。为了避免在一次动画执行过程中反复创建、移除某个特定element，“inactive”态的element在当前动画最后一帧结束前都会保留，如果在动画执行结束后它还未能重新变成”active“状态，Framework就会调用其unmount方法将其彻底移除，这时element的状态为defunct,它将永远不会再被插入到树中。\n    7. 如果element要重新插入到Element树的其它位置，如element或element的祖先拥有一个GlobalKey（用于全局复用元素），那么Framework会先将element从现有位置移除，然后再调用其activate方法，并将其renderObject重新attach到渲染树。\n\n### 2.4 框架\n\n![Flutter框架](./Flutter/Flutter_Frameworks.png)\n\n**Flutter Framework:** 这是一个纯 Dart实现的 SDK。它实现了一套基础库， 用于处理动画、绘图和手势。并且基于绘图封装了一套 UI组件库，然后根据 Material 和Cupertino两种视觉风格区分开来。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。\n\n**Flutter Engine:** 这是一个纯 C++实现的 SDK，其中囊括了 Skia引擎、Dart运行时、文字排版引擎等。不过说白了，它就是 Dart的一个运行时，它可以以 JIT、JIT Snapshot 或者 AOT的模式运行 Dart代码。在代码调用 dart:ui库时，提供 dart:ui库中 Native Binding 实现。 不过别忘了，这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码。\n\n### 2.5 界面渲染\n\n2.5.1 Flutter 如何渲染界面\n\n在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：\n\n![iOS_Render_flow](./Flutter/iOS_Render_flow.webp)\n\nCPU、GPU和显示器以一种特定的方式协作：\n\n> CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。\n\n![Rendering_pipeline](./Flutter/Rendering_pipeline.png)\n\n> GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。\n\n* Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。\n\n* Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。\n\n渲染树生成：\n\n![Rendering_pipeline](./Flutter/Rendering_pipe.png)\n\n2.5.2、Flutter 如何更新界面（Diff）\n\n当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。\n\n![Rendering_pipeline](./Flutter/Widget_update.png)\n\n> 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。\n>\n> Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n\n### 2.6 跨平台、与原生平台通讯\n\n![Flutter_iOS_Android](./Flutter/Flutter_iOS_Android.png)\n\nFlutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：\n\n* 应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。\n\n* 宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。\n\n* 硬件交互、推送等服务\n  \n* e.g：获取iOS电量\n  \n2.6.1 Flutter跨端——iOS\n\n> Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。\n>\n> 但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。\n\nFlutter 在iOS 上的启动流程：\n![Launch_flow_ios](./Flutter/Launch_flow_ios.webp)\n\n> 在应用的 View Controller 初始化后，会实例化一个 Flutter project的抽象（以下简称 project）。project会初始化一个 platform view的抽象实例，这个抽象实例会负责创建 Flutter 的运行时（以下简称 engine）。\n>\n> 当 View Controller将要显示时，调用 project查找和组合 Flutter的应用资源 bundle，并且把资源提供给 engine。\nengine在真正需要执行资源 bundle时才会创建 Dart执行的环境（懒加载，以下简称 Dart Controller），然后设置视图窗口的一些属性等东西（这是绘图引擎必需的）。 \n然后 engine中的 Dart Controller会加载 Dart代码并执行，执行的过程中会调用 dart:ui的 native binding实现向 GPU提供数据。\n\n2.6.2 Android\n\n## 3、深入Flutter\n\n### 3.1 体积\n\nFlutter应用的体积由两部分组成：应用代码和 SDK代码。应用代码是 Dart编译后的代码，如果做成可动态下发，那么这部分可以不计。\nSDK代码比较大就有点无奈了，SDK的组成部分有 Dart VM，Dart标准库，libwebp、libpng、libboringssl等第三方库，libskia，Dart UI库，然后再加上 icu_data，可能在单 arch下（iOS），SDK体积达到 40+MB。其中仅仅 Dart VM（不包含标准库）就达到了 7MB。\n\nFlutter SDK是 dynamic framework，如此大的二进制体积可能会造成动态链接耗时长。而如果静态链接，可能原来比较大的 App很有可能造成 TEXT段（iOS默认60M）超标。\n\n### 3.2 帧率\n\nDart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。\n\n在任何系统的UI框架中，动画实现的原理都是相同的，即：\n>在一段时间内，快速地多次改变UI外观，由于人眼会产生视觉暂留，最终看到的就是一个“连续”的动画，这和电影的原理是一样的，而UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），指每秒的动画帧数。很明显，帧率越高则动画就会越流畅。一般情况下，对于人眼来说，动画帧率超过16FPS，就比较流畅了，超过32FPS就会非常的细腻平滑，而超过32FPS基本就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用动画基本是持平的。\n\n### 3.3 [Dart线程和异步](https://flutterchina.club/flutter-for-ios/#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5)\n\n**Isolates：** 现代的浏览器以及移动浏览器都运行在多核 CPU 系统上。 要充分利用这些 CPU，开发者一般使用共享内存 数据来保证多线程的正确执行。然而， 多线程共享数据通常会导致很多潜在的问题，并导致代码运行出错。\n\n所有的 Dart 代码在 isolates 中运行而不是线程。 每个 isolate 都有自己的堆内存，并且确保每个 isolate 的状态都不能被其他 isolate 访问。因此，也不存在资源锁的问题。\n\nDart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。\n\nDart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。\n\n* 多线程示例：[isolate_example](./isolate.dart)\n\n### 3.4 [EventLoop、事件分发](https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a)\n\nFlutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。\n\n事件总线（EventBus）通过流控制器（StreamController）控制 事件流（Stream），事件流可以被监听、唤醒、停止、关闭、下沉，订阅者可以通过流控制器订阅流事件。\n\n### 3.5 事件响应\n\n一个对象是否可以响应事件，取决于其对命中测试的返回，当发生用户事件时，会从根节点（RenderView）开始进行命中测试，下面是RenderView的hitTest()源码：\n\n``` dart\nbool hitTest(HitTestResult result, { Offset position }) {\n  if (child != null)\n    child.hitTest(result, position: position); //递归子RenderBox进行命中测试\n  result.add(HitTestEntry(this)); //将测试结果添加到result中\n  return true;\n}\n```\n\nRenderBox默认的hitTest()实现：\n\n``` dart\nbool hitTest(HitTestResult result, { @required Offset position }) {\n  ...  \n  if (_size.contains(position)) {\n    if (hitTestChildren(result, position: position) || hitTestSelf(position)) {\n      result.add(BoxHitTestEntry(this, position));\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n我们看到默认的实现里调用了hitTestSelf()和hitTestChildren()两个方法，这两个方法默认实现如下：\n\n``` dart\n@protected\nbool hitTestSelf(Offset position) => false;\n\n@protected\nbool hitTestChildren(HitTestResult result, { Offset position }) => false;\n```\n\n> hitTest 方法用来判断该 RenderObject 是否在被点击的范围内，同时负责将被点击的 RenderBox 添加到 HitTestResult 列表中，参数 position 为事件触发的坐标（如果有的话），返回 true 则表示有 RenderBox 通过了命中测试，需要响应事件，反之则认为当前RenderBox没有命中。\n>\n> 在继承RenderBox时，可以直接重写hitTest()方法，也可以重写 hitTestSelf() 或 hitTestChildren(), 唯一不同的是 hitTest()中需要将通过命中测试的节点信息添加到命中测试结果列表中，而 hitTestSelf() 和 hitTestChildren()则只需要简单的返回true或false。\n\n### 3.6 Runtime（AOT）、JIT、Dart VM\n\n### 3.7 性能（CPU、GPU、Network、battery、Disk）\n\n### 3.8 [内存管理](https://mp.weixin.qq.com/s/efKCpCtvvHDHUiAsizobBQ)\n\nDart VM将内存管理分为新生代(New Generation)和老年代(Old Generation)。\n\n* 新生代(New Generation): 通常初次分配的对象都位于新生代中，该区域主要是存放内存较小并且生命周期较短的对象，比如局部变量。新生代会频繁执行内存回收(GC)，回收采用“复制-清除”算法，将内存分为两块(图中的from 和 to)，运行时每次只使用其中的一块(图中的from)，另一块备用(图中的to)。当发生GC时，将当前使用的内存块中存活的对象拷贝到备用内存块中，然后清除当前使用内存块，最后，交换两块内存的角色。\n\n![Memory_Manager](./Flutter/Memory_Manager_01.webp)\n\n* 老年代(Old Generation): 在新生代的GC中“幸存”下来的对象，它们会被转移到老年代中。老年代存放生命力周期较长，内存较大的对象。老年代通常比新生代要大很多。老年代的GC回收采用“标记-清除”算法，分成标记和清除两个阶段。在标记阶段，所有线程参与并发的完成对回收对象的标记，降低标记阶段耗时。在清理阶段，由GC线程负责清理回收对象，和应用线程同时执行，不影响应用运行。\n![Memory_Manager](./Flutter/Memory_Manager_02.webp)\n\n### 3.9 技术生态圈\n\n## 4、[Flutter & 原生](https://blog.codemagic.io/flutter-vs-swift/)\n\n1. 界面\n   解决移动端信息展示的目的；\n   都基于声明式、响应式的方式、热重载的方式；\n\n## 5、未来与憧憬\n\n当下的移动端、前端开发技术越来越多样化，复杂化。\n\n就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；\nAndroid的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等。\n\n大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。\n\n前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。\n\n前不久Facebook 又推出了新的[Hermes](https://juejin.im/entry/5d2e6d1ce51d4510664d178e)，用于在React Native应用提高性能的。\n\n个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。\n\n统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。\n\n据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！\n","slug":"iOS学习笔记/Flutters/Flutter","published":1,"date":"2019-07-30T00:18:04.000Z","updated":"2019-08-01T08:57:12.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgk7002h8n7u64ps1ly3","content":"<h1 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h1><h2 id=\"1、入门\"><a href=\"#1、入门\" class=\"headerlink\" title=\"1、入门\"></a>1、入门</h2><h3 id=\"1-1-语言\"><a href=\"#1-1-语言\" class=\"headerlink\" title=\"1.1 语言\"></a>1.1 语言</h3><p>1.1.1 Dart：<a href=\"https://dart.dev/tools/sdk\">学习路线</a></p>\n<p><img src=\"./Flutter/Dart.png\" alt=\"Dart\"></p>\n<p>1.1.2 Dart <a href=\"http://dart.goodev.org/guides/language\">概述</a></p>\n<p>1.1.3 Dart <a href=\"http://dart.goodev.org/guides/libraries\">库预览</a></p>\n<h3 id=\"1-2-工具集\"><a href=\"#1-2-工具集\" class=\"headerlink\" title=\"1.2 工具集\"></a>1.2 工具集</h3><p>2.1 通用工具</p>\n<p>2.1.1 <a href=\"https://dartpad.dartlang.org/\">DartPad</a></p>\n<pre><code>DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.\n</code></pre>\n<p>2.1.2 IDEs 与 编辑器</p>\n<p>2.1.2.1 IDE： <a href=\"https://dart.dev/tools/jetbrains-plugin\">Android Studio</a>、<a href=\"https://dart.dev/tools/jetbrains-plugin\">IntelliJ IDEA</a>、<a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></p>\n<p>2.1.2.2 IDEDart 社区维护的编辑器：<a href=\"https://github.com/bradyt/dart-mode\">Emacs</a>、<a href=\"https://github.com/dart-atom/dart\">Atom</a>、<a href=\"https://github.com/dart-lang/dart-vim-plugin\">Vim</a></p>\n<p>2.1.3 命令行工具</p>\n<pre><code>dartanalyzer\n    A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\ndartdoc\n    Generates API reference documentation.\n\ndartfmt\n    Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\npub\n    Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n    Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\nbuild_runner\n    A code generator.\n\ndartfix\n    A tool for migrating Dart source code and fixing common issues.\n</code></pre>\n<p>2.2 Web工具集</p>\n<pre><code>webdev\n    A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\ndart2js\n    The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\ndartdevc\n    The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\nbuild_runner\n    A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n</code></pre>\n<p>2.3 命令行工具集与服务器工具集</p>\n<pre><code>Standalone Dart VM: dart\n    Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\nAOT compiler and runtime: dart2aot, dartaotruntime\n    Support ahead-of-time compilation of Dart code to native x64 machine code.\n\nPub package manager: pub\n    Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n</code></pre>\n<h2 id=\"2、Flutter\"><a href=\"#2、Flutter\" class=\"headerlink\" title=\"2、Flutter\"></a>2、Flutter</h2><h3 id=\"2-1-Flutter是什么\"><a href=\"#2-1-Flutter是什么\" class=\"headerlink\" title=\"2.1 Flutter是什么\"></a>2.1 Flutter是什么</h3><pre><code>Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\nFlutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。\nDart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。\n\nFlutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n</code></pre>\n<h3 id=\"2-2-核心原则\"><a href=\"#2-2-核心原则\" class=\"headerlink\" title=\"2.2 核心原则\"></a>2.2 核心原则</h3><p>Flutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。</p>\n<p>一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。</p>\n<p><img src=\"./Flutter/Flutter_Render_Object.png\" alt=\"widget_Render_Object\"></p>\n<h3 id=\"2-3-Widget如何工作\"><a href=\"#2-3-Widget如何工作\" class=\"headerlink\" title=\"2.3 Widget如何工作\"></a>2.3 Widget如何工作</h3><ul>\n<li><p>Widget实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。</p>\n<br/></li>\n<li><p>一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。    <br/></p>\n</li>\n<li><p>最终的UI树其实是由一个个独立的Element节点构成。组件最终的Layout、渲染都是通过RenderObject来完成的，从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。 <br/><br>Element就是Widget在UI树具体位置的一个实例化对象，大多数Element只有唯一的renderObject，但还有一些Element会有多个子节点，如继承自RenderObjectElement的一些类，比如MultiChildRenderObjectElement。最终所有Element的RenderObject构成一棵树，我们称之为渲染树，即render tree。</p>\n<br/></li>\n<li><p>Element的生命周期如下：</p>\n<ol>\n<li>Framework 调用Widget.createElement 创建一个Element实例，记为element。</li>\n<li>Framework 调用 element.mount(parentElement,newSlot) ，mount方法中首先调用elment所对应Widget的createRenderObject方法创建与element相关联的RenderObject对象，然后调用element.attachRenderObject方法将element.renderObject添加到渲染树中插槽指定的位置（这一步不是必须的，一般发生在Element树结构发生变化时才需要重新attach）。插入到渲染树后的element就处于“active”状态，处于“active”状态后就可以显示在屏幕上了（可以隐藏）。</li>\n<li>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</li>\n<li>当有父Widget的配置数据改变时，同时其State.build返回的Widget结构与之前不同，此时就需要重新构建对应的Element树。为了进行Element复用，在Element重新构建前会先尝试是否可以复用旧树上相同位置的element，element节点在更新前都会调用其对应Widget的canUpdate方法，如果返回true，则复用旧Element，旧的Element会使用新Widget配置数据更新，反之则会创建一个新的Element。Widget.canUpdate主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来避免复用。</li>\n<li>当有祖先Element决定要移除element 时（如Widget树结构发生了变化，导致element对应的Widget被移除），这时该祖先Element就会调用deactivateChild 方法来移除它，移除后element.renderObject也会被从渲染树中移除，然后Framework会调用element.deactivate 方法，这时element状态变为“inactive”状态。</li>\n<li>“inactive”态的element将不会再显示到屏幕。为了避免在一次动画执行过程中反复创建、移除某个特定element，“inactive”态的element在当前动画最后一帧结束前都会保留，如果在动画执行结束后它还未能重新变成”active“状态，Framework就会调用其unmount方法将其彻底移除，这时element的状态为defunct,它将永远不会再被插入到树中。</li>\n<li>如果element要重新插入到Element树的其它位置，如element或element的祖先拥有一个GlobalKey（用于全局复用元素），那么Framework会先将element从现有位置移除，然后再调用其activate方法，并将其renderObject重新attach到渲染树。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"2-4-框架\"><a href=\"#2-4-框架\" class=\"headerlink\" title=\"2.4 框架\"></a>2.4 框架</h3><p><img src=\"./Flutter/Flutter_Frameworks.png\" alt=\"Flutter框架\"></p>\n<p><strong>Flutter Framework:</strong> 这是一个纯 Dart实现的 SDK。它实现了一套基础库， 用于处理动画、绘图和手势。并且基于绘图封装了一套 UI组件库，然后根据 Material 和Cupertino两种视觉风格区分开来。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。</p>\n<p><strong>Flutter Engine:</strong> 这是一个纯 C++实现的 SDK，其中囊括了 Skia引擎、Dart运行时、文字排版引擎等。不过说白了，它就是 Dart的一个运行时，它可以以 JIT、JIT Snapshot 或者 AOT的模式运行 Dart代码。在代码调用 dart:ui库时，提供 dart:ui库中 Native Binding 实现。 不过别忘了，这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码。</p>\n<h3 id=\"2-5-界面渲染\"><a href=\"#2-5-界面渲染\" class=\"headerlink\" title=\"2.5 界面渲染\"></a>2.5 界面渲染</h3><p>2.5.1 Flutter 如何渲染界面</p>\n<p>在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：</p>\n<p><img src=\"./Flutter/iOS_Render_flow.webp\" alt=\"iOS_Render_flow\"></p>\n<p>CPU、GPU和显示器以一种特定的方式协作：</p>\n<blockquote>\n<p>CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。</p>\n</blockquote>\n<p><img src=\"./Flutter/Rendering_pipeline.png\" alt=\"Rendering_pipeline\"></p>\n<blockquote>\n<p>GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。</p>\n</blockquote>\n<ul>\n<li><p>Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。</p>\n</li>\n<li><p>Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。</p>\n</li>\n</ul>\n<p>渲染树生成：</p>\n<p><img src=\"./Flutter/Rendering_pipe.png\" alt=\"Rendering_pipeline\"></p>\n<p>2.5.2、Flutter 如何更新界面（Diff）</p>\n<p>当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p>\n<p><img src=\"./Flutter/Widget_update.png\" alt=\"Rendering_pipeline\"></p>\n<blockquote>\n<p>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。</p>\n<p>Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</p>\n</blockquote>\n<h3 id=\"2-6-跨平台、与原生平台通讯\"><a href=\"#2-6-跨平台、与原生平台通讯\" class=\"headerlink\" title=\"2.6 跨平台、与原生平台通讯\"></a>2.6 跨平台、与原生平台通讯</h3><p><img src=\"./Flutter/Flutter_iOS_Android.png\" alt=\"Flutter_iOS_Android\"></p>\n<p>Flutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：</p>\n<ul>\n<li><p>应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。</p>\n</li>\n<li><p>宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。</p>\n</li>\n<li><p>硬件交互、推送等服务</p>\n</li>\n<li><p>e.g：获取iOS电量</p>\n</li>\n</ul>\n<p>2.6.1 Flutter跨端——iOS</p>\n<blockquote>\n<p>Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。</p>\n<p>但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。</p>\n</blockquote>\n<p>Flutter 在iOS 上的启动流程：<br><img src=\"./Flutter/Launch_flow_ios.webp\" alt=\"Launch_flow_ios\"></p>\n<blockquote>\n<p>在应用的 View Controller 初始化后，会实例化一个 Flutter project的抽象（以下简称 project）。project会初始化一个 platform view的抽象实例，这个抽象实例会负责创建 Flutter 的运行时（以下简称 engine）。</p>\n<p>当 View Controller将要显示时，调用 project查找和组合 Flutter的应用资源 bundle，并且把资源提供给 engine。<br>engine在真正需要执行资源 bundle时才会创建 Dart执行的环境（懒加载，以下简称 Dart Controller），然后设置视图窗口的一些属性等东西（这是绘图引擎必需的）。<br>然后 engine中的 Dart Controller会加载 Dart代码并执行，执行的过程中会调用 dart:ui的 native binding实现向 GPU提供数据。</p>\n</blockquote>\n<p>2.6.2 Android</p>\n<h2 id=\"3、深入Flutter\"><a href=\"#3、深入Flutter\" class=\"headerlink\" title=\"3、深入Flutter\"></a>3、深入Flutter</h2><h3 id=\"3-1-体积\"><a href=\"#3-1-体积\" class=\"headerlink\" title=\"3.1 体积\"></a>3.1 体积</h3><p>Flutter应用的体积由两部分组成：应用代码和 SDK代码。应用代码是 Dart编译后的代码，如果做成可动态下发，那么这部分可以不计。<br>SDK代码比较大就有点无奈了，SDK的组成部分有 Dart VM，Dart标准库，libwebp、libpng、libboringssl等第三方库，libskia，Dart UI库，然后再加上 icu_data，可能在单 arch下（iOS），SDK体积达到 40+MB。其中仅仅 Dart VM（不包含标准库）就达到了 7MB。</p>\n<p>Flutter SDK是 dynamic framework，如此大的二进制体积可能会造成动态链接耗时长。而如果静态链接，可能原来比较大的 App很有可能造成 TEXT段（iOS默认60M）超标。</p>\n<h3 id=\"3-2-帧率\"><a href=\"#3-2-帧率\" class=\"headerlink\" title=\"3.2 帧率\"></a>3.2 帧率</h3><p>Dart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。</p>\n<p>在任何系统的UI框架中，动画实现的原理都是相同的，即：</p>\n<blockquote>\n<p>在一段时间内，快速地多次改变UI外观，由于人眼会产生视觉暂留，最终看到的就是一个“连续”的动画，这和电影的原理是一样的，而UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），指每秒的动画帧数。很明显，帧率越高则动画就会越流畅。一般情况下，对于人眼来说，动画帧率超过16FPS，就比较流畅了，超过32FPS就会非常的细腻平滑，而超过32FPS基本就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用动画基本是持平的。</p>\n</blockquote>\n<h3 id=\"3-3-Dart线程和异步\"><a href=\"#3-3-Dart线程和异步\" class=\"headerlink\" title=\"3.3 Dart线程和异步\"></a>3.3 <a href=\"https://flutterchina.club/flutter-for-ios/#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5\">Dart线程和异步</a></h3><p><strong>Isolates：</strong> 现代的浏览器以及移动浏览器都运行在多核 CPU 系统上。 要充分利用这些 CPU，开发者一般使用共享内存 数据来保证多线程的正确执行。然而， 多线程共享数据通常会导致很多潜在的问题，并导致代码运行出错。</p>\n<p>所有的 Dart 代码在 isolates 中运行而不是线程。 每个 isolate 都有自己的堆内存，并且确保每个 isolate 的状态都不能被其他 isolate 访问。因此，也不存在资源锁的问题。</p>\n<p>Dart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。</p>\n<p>Dart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。</p>\n<ul>\n<li>多线程示例：<a href=\"./isolate.dart\">isolate_example</a></li>\n</ul>\n<h3 id=\"3-4-EventLoop、事件分发\"><a href=\"#3-4-EventLoop、事件分发\" class=\"headerlink\" title=\"3.4 EventLoop、事件分发\"></a>3.4 <a href=\"https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a\">EventLoop、事件分发</a></h3><p>Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。</p>\n<p>事件总线（EventBus）通过流控制器（StreamController）控制 事件流（Stream），事件流可以被监听、唤醒、停止、关闭、下沉，订阅者可以通过流控制器订阅流事件。</p>\n<h3 id=\"3-5-事件响应\"><a href=\"#3-5-事件响应\" class=\"headerlink\" title=\"3.5 事件响应\"></a>3.5 事件响应</h3><p>一个对象是否可以响应事件，取决于其对命中测试的返回，当发生用户事件时，会从根节点（RenderView）开始进行命中测试，下面是RenderView的hitTest()源码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> hitTest(HitTestResult result, &#123; Offset position &#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    child.hitTest(result, position: position); <span class=\"comment\">//递归子RenderBox进行命中测试</span></span><br><span class=\"line\">  result.add(HitTestEntry(<span class=\"keyword\">this</span>)); <span class=\"comment\">//将测试结果添加到result中</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>RenderBox默认的hitTest()实现：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> hitTest(HitTestResult result, &#123; <span class=\"meta\">@required</span> Offset position &#125;) &#123;</span><br><span class=\"line\">  ...  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_size.contains(position)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hitTestChildren(result, position: position) || hitTestSelf(position)) &#123;</span><br><span class=\"line\">      result.add(BoxHitTestEntry(<span class=\"keyword\">this</span>, position));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们看到默认的实现里调用了hitTestSelf()和hitTestChildren()两个方法，这两个方法默认实现如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@protected</span></span><br><span class=\"line\"><span class=\"built_in\">bool</span> hitTestSelf(Offset position) =&gt; <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@protected</span></span><br><span class=\"line\"><span class=\"built_in\">bool</span> hitTestChildren(HitTestResult result, &#123; Offset position &#125;) =&gt; <span class=\"keyword\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>hitTest 方法用来判断该 RenderObject 是否在被点击的范围内，同时负责将被点击的 RenderBox 添加到 HitTestResult 列表中，参数 position 为事件触发的坐标（如果有的话），返回 true 则表示有 RenderBox 通过了命中测试，需要响应事件，反之则认为当前RenderBox没有命中。</p>\n<p>在继承RenderBox时，可以直接重写hitTest()方法，也可以重写 hitTestSelf() 或 hitTestChildren(), 唯一不同的是 hitTest()中需要将通过命中测试的节点信息添加到命中测试结果列表中，而 hitTestSelf() 和 hitTestChildren()则只需要简单的返回true或false。</p>\n</blockquote>\n<h3 id=\"3-6-Runtime（AOT）、JIT、Dart-VM\"><a href=\"#3-6-Runtime（AOT）、JIT、Dart-VM\" class=\"headerlink\" title=\"3.6 Runtime（AOT）、JIT、Dart VM\"></a>3.6 Runtime（AOT）、JIT、Dart VM</h3><h3 id=\"3-7-性能（CPU、GPU、Network、battery、Disk）\"><a href=\"#3-7-性能（CPU、GPU、Network、battery、Disk）\" class=\"headerlink\" title=\"3.7 性能（CPU、GPU、Network、battery、Disk）\"></a>3.7 性能（CPU、GPU、Network、battery、Disk）</h3><h3 id=\"3-8-内存管理\"><a href=\"#3-8-内存管理\" class=\"headerlink\" title=\"3.8 内存管理\"></a>3.8 <a href=\"https://mp.weixin.qq.com/s/efKCpCtvvHDHUiAsizobBQ\">内存管理</a></h3><p>Dart VM将内存管理分为新生代(New Generation)和老年代(Old Generation)。</p>\n<ul>\n<li>新生代(New Generation): 通常初次分配的对象都位于新生代中，该区域主要是存放内存较小并且生命周期较短的对象，比如局部变量。新生代会频繁执行内存回收(GC)，回收采用“复制-清除”算法，将内存分为两块(图中的from 和 to)，运行时每次只使用其中的一块(图中的from)，另一块备用(图中的to)。当发生GC时，将当前使用的内存块中存活的对象拷贝到备用内存块中，然后清除当前使用内存块，最后，交换两块内存的角色。</li>\n</ul>\n<p><img src=\"./Flutter/Memory_Manager_01.webp\" alt=\"Memory_Manager\"></p>\n<ul>\n<li>老年代(Old Generation): 在新生代的GC中“幸存”下来的对象，它们会被转移到老年代中。老年代存放生命力周期较长，内存较大的对象。老年代通常比新生代要大很多。老年代的GC回收采用“标记-清除”算法，分成标记和清除两个阶段。在标记阶段，所有线程参与并发的完成对回收对象的标记，降低标记阶段耗时。在清理阶段，由GC线程负责清理回收对象，和应用线程同时执行，不影响应用运行。<br><img src=\"./Flutter/Memory_Manager_02.webp\" alt=\"Memory_Manager\"></li>\n</ul>\n<h3 id=\"3-9-技术生态圈\"><a href=\"#3-9-技术生态圈\" class=\"headerlink\" title=\"3.9 技术生态圈\"></a>3.9 技术生态圈</h3><h2 id=\"4、Flutter-amp-原生\"><a href=\"#4、Flutter-amp-原生\" class=\"headerlink\" title=\"4、Flutter &amp; 原生\"></a>4、<a href=\"https://blog.codemagic.io/flutter-vs-swift/\">Flutter &amp; 原生</a></h2><ol>\n<li>界面<br>解决移动端信息展示的目的；<br>都基于声明式、响应式的方式、热重载的方式；</li>\n</ol>\n<h2 id=\"5、未来与憧憬\"><a href=\"#5、未来与憧憬\" class=\"headerlink\" title=\"5、未来与憧憬\"></a>5、未来与憧憬</h2><p>当下的移动端、前端开发技术越来越多样化，复杂化。</p>\n<p>就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；<br>Android的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等。</p>\n<p>大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。</p>\n<p>前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。</p>\n<p>前不久Facebook 又推出了新的<a href=\"https://juejin.im/entry/5d2e6d1ce51d4510664d178e\">Hermes</a>，用于在React Native应用提高性能的。</p>\n<p>个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。</p>\n<p>统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。</p>\n<p>据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h1><h2 id=\"1、入门\"><a href=\"#1、入门\" class=\"headerlink\" title=\"1、入门\"></a>1、入门</h2><h3 id=\"1-1-语言\"><a href=\"#1-1-语言\" class=\"headerlink\" title=\"1.1 语言\"></a>1.1 语言</h3><p>1.1.1 Dart：<a href=\"https://dart.dev/tools/sdk\">学习路线</a></p>\n<p><img src=\"./Flutter/Dart.png\" alt=\"Dart\"></p>\n<p>1.1.2 Dart <a href=\"http://dart.goodev.org/guides/language\">概述</a></p>\n<p>1.1.3 Dart <a href=\"http://dart.goodev.org/guides/libraries\">库预览</a></p>\n<h3 id=\"1-2-工具集\"><a href=\"#1-2-工具集\" class=\"headerlink\" title=\"1.2 工具集\"></a>1.2 工具集</h3><p>2.1 通用工具</p>\n<p>2.1.1 <a href=\"https://dartpad.dartlang.org/\">DartPad</a></p>\n<pre><code>DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.\n</code></pre>\n<p>2.1.2 IDEs 与 编辑器</p>\n<p>2.1.2.1 IDE： <a href=\"https://dart.dev/tools/jetbrains-plugin\">Android Studio</a>、<a href=\"https://dart.dev/tools/jetbrains-plugin\">IntelliJ IDEA</a>、<a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></p>\n<p>2.1.2.2 IDEDart 社区维护的编辑器：<a href=\"https://github.com/bradyt/dart-mode\">Emacs</a>、<a href=\"https://github.com/dart-atom/dart\">Atom</a>、<a href=\"https://github.com/dart-lang/dart-vim-plugin\">Vim</a></p>\n<p>2.1.3 命令行工具</p>\n<pre><code>dartanalyzer\n    A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\ndartdoc\n    Generates API reference documentation.\n\ndartfmt\n    Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\npub\n    Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n    Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\nbuild_runner\n    A code generator.\n\ndartfix\n    A tool for migrating Dart source code and fixing common issues.\n</code></pre>\n<p>2.2 Web工具集</p>\n<pre><code>webdev\n    A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\ndart2js\n    The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\ndartdevc\n    The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\nbuild_runner\n    A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n</code></pre>\n<p>2.3 命令行工具集与服务器工具集</p>\n<pre><code>Standalone Dart VM: dart\n    Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\nAOT compiler and runtime: dart2aot, dartaotruntime\n    Support ahead-of-time compilation of Dart code to native x64 machine code.\n\nPub package manager: pub\n    Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n</code></pre>\n<h2 id=\"2、Flutter\"><a href=\"#2、Flutter\" class=\"headerlink\" title=\"2、Flutter\"></a>2、Flutter</h2><h3 id=\"2-1-Flutter是什么\"><a href=\"#2-1-Flutter是什么\" class=\"headerlink\" title=\"2.1 Flutter是什么\"></a>2.1 Flutter是什么</h3><pre><code>Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\nFlutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。\nDart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。\n\nFlutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n</code></pre>\n<h3 id=\"2-2-核心原则\"><a href=\"#2-2-核心原则\" class=\"headerlink\" title=\"2.2 核心原则\"></a>2.2 核心原则</h3><p>Flutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。</p>\n<p>一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。</p>\n<p><img src=\"./Flutter/Flutter_Render_Object.png\" alt=\"widget_Render_Object\"></p>\n<h3 id=\"2-3-Widget如何工作\"><a href=\"#2-3-Widget如何工作\" class=\"headerlink\" title=\"2.3 Widget如何工作\"></a>2.3 Widget如何工作</h3><ul>\n<li><p>Widget实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。</p>\n<br/></li>\n<li><p>一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。    <br/></p>\n</li>\n<li><p>最终的UI树其实是由一个个独立的Element节点构成。组件最终的Layout、渲染都是通过RenderObject来完成的，从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。 <br/><br>Element就是Widget在UI树具体位置的一个实例化对象，大多数Element只有唯一的renderObject，但还有一些Element会有多个子节点，如继承自RenderObjectElement的一些类，比如MultiChildRenderObjectElement。最终所有Element的RenderObject构成一棵树，我们称之为渲染树，即render tree。</p>\n<br/></li>\n<li><p>Element的生命周期如下：</p>\n<ol>\n<li>Framework 调用Widget.createElement 创建一个Element实例，记为element。</li>\n<li>Framework 调用 element.mount(parentElement,newSlot) ，mount方法中首先调用elment所对应Widget的createRenderObject方法创建与element相关联的RenderObject对象，然后调用element.attachRenderObject方法将element.renderObject添加到渲染树中插槽指定的位置（这一步不是必须的，一般发生在Element树结构发生变化时才需要重新attach）。插入到渲染树后的element就处于“active”状态，处于“active”状态后就可以显示在屏幕上了（可以隐藏）。</li>\n<li>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</li>\n<li>当有父Widget的配置数据改变时，同时其State.build返回的Widget结构与之前不同，此时就需要重新构建对应的Element树。为了进行Element复用，在Element重新构建前会先尝试是否可以复用旧树上相同位置的element，element节点在更新前都会调用其对应Widget的canUpdate方法，如果返回true，则复用旧Element，旧的Element会使用新Widget配置数据更新，反之则会创建一个新的Element。Widget.canUpdate主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来避免复用。</li>\n<li>当有祖先Element决定要移除element 时（如Widget树结构发生了变化，导致element对应的Widget被移除），这时该祖先Element就会调用deactivateChild 方法来移除它，移除后element.renderObject也会被从渲染树中移除，然后Framework会调用element.deactivate 方法，这时element状态变为“inactive”状态。</li>\n<li>“inactive”态的element将不会再显示到屏幕。为了避免在一次动画执行过程中反复创建、移除某个特定element，“inactive”态的element在当前动画最后一帧结束前都会保留，如果在动画执行结束后它还未能重新变成”active“状态，Framework就会调用其unmount方法将其彻底移除，这时element的状态为defunct,它将永远不会再被插入到树中。</li>\n<li>如果element要重新插入到Element树的其它位置，如element或element的祖先拥有一个GlobalKey（用于全局复用元素），那么Framework会先将element从现有位置移除，然后再调用其activate方法，并将其renderObject重新attach到渲染树。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"2-4-框架\"><a href=\"#2-4-框架\" class=\"headerlink\" title=\"2.4 框架\"></a>2.4 框架</h3><p><img src=\"./Flutter/Flutter_Frameworks.png\" alt=\"Flutter框架\"></p>\n<p><strong>Flutter Framework:</strong> 这是一个纯 Dart实现的 SDK。它实现了一套基础库， 用于处理动画、绘图和手势。并且基于绘图封装了一套 UI组件库，然后根据 Material 和Cupertino两种视觉风格区分开来。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。</p>\n<p><strong>Flutter Engine:</strong> 这是一个纯 C++实现的 SDK，其中囊括了 Skia引擎、Dart运行时、文字排版引擎等。不过说白了，它就是 Dart的一个运行时，它可以以 JIT、JIT Snapshot 或者 AOT的模式运行 Dart代码。在代码调用 dart:ui库时，提供 dart:ui库中 Native Binding 实现。 不过别忘了，这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码。</p>\n<h3 id=\"2-5-界面渲染\"><a href=\"#2-5-界面渲染\" class=\"headerlink\" title=\"2.5 界面渲染\"></a>2.5 界面渲染</h3><p>2.5.1 Flutter 如何渲染界面</p>\n<p>在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：</p>\n<p><img src=\"./Flutter/iOS_Render_flow.webp\" alt=\"iOS_Render_flow\"></p>\n<p>CPU、GPU和显示器以一种特定的方式协作：</p>\n<blockquote>\n<p>CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。</p>\n</blockquote>\n<p><img src=\"./Flutter/Rendering_pipeline.png\" alt=\"Rendering_pipeline\"></p>\n<blockquote>\n<p>GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。</p>\n</blockquote>\n<ul>\n<li><p>Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。</p>\n</li>\n<li><p>Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。</p>\n</li>\n</ul>\n<p>渲染树生成：</p>\n<p><img src=\"./Flutter/Rendering_pipe.png\" alt=\"Rendering_pipeline\"></p>\n<p>2.5.2、Flutter 如何更新界面（Diff）</p>\n<p>当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p>\n<p><img src=\"./Flutter/Widget_update.png\" alt=\"Rendering_pipeline\"></p>\n<blockquote>\n<p>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。</p>\n<p>Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</p>\n</blockquote>\n<h3 id=\"2-6-跨平台、与原生平台通讯\"><a href=\"#2-6-跨平台、与原生平台通讯\" class=\"headerlink\" title=\"2.6 跨平台、与原生平台通讯\"></a>2.6 跨平台、与原生平台通讯</h3><p><img src=\"./Flutter/Flutter_iOS_Android.png\" alt=\"Flutter_iOS_Android\"></p>\n<p>Flutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：</p>\n<ul>\n<li><p>应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。</p>\n</li>\n<li><p>宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。</p>\n</li>\n<li><p>硬件交互、推送等服务</p>\n</li>\n<li><p>e.g：获取iOS电量</p>\n</li>\n</ul>\n<p>2.6.1 Flutter跨端——iOS</p>\n<blockquote>\n<p>Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。</p>\n<p>但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。</p>\n</blockquote>\n<p>Flutter 在iOS 上的启动流程：<br><img src=\"./Flutter/Launch_flow_ios.webp\" alt=\"Launch_flow_ios\"></p>\n<blockquote>\n<p>在应用的 View Controller 初始化后，会实例化一个 Flutter project的抽象（以下简称 project）。project会初始化一个 platform view的抽象实例，这个抽象实例会负责创建 Flutter 的运行时（以下简称 engine）。</p>\n<p>当 View Controller将要显示时，调用 project查找和组合 Flutter的应用资源 bundle，并且把资源提供给 engine。<br>engine在真正需要执行资源 bundle时才会创建 Dart执行的环境（懒加载，以下简称 Dart Controller），然后设置视图窗口的一些属性等东西（这是绘图引擎必需的）。<br>然后 engine中的 Dart Controller会加载 Dart代码并执行，执行的过程中会调用 dart:ui的 native binding实现向 GPU提供数据。</p>\n</blockquote>\n<p>2.6.2 Android</p>\n<h2 id=\"3、深入Flutter\"><a href=\"#3、深入Flutter\" class=\"headerlink\" title=\"3、深入Flutter\"></a>3、深入Flutter</h2><h3 id=\"3-1-体积\"><a href=\"#3-1-体积\" class=\"headerlink\" title=\"3.1 体积\"></a>3.1 体积</h3><p>Flutter应用的体积由两部分组成：应用代码和 SDK代码。应用代码是 Dart编译后的代码，如果做成可动态下发，那么这部分可以不计。<br>SDK代码比较大就有点无奈了，SDK的组成部分有 Dart VM，Dart标准库，libwebp、libpng、libboringssl等第三方库，libskia，Dart UI库，然后再加上 icu_data，可能在单 arch下（iOS），SDK体积达到 40+MB。其中仅仅 Dart VM（不包含标准库）就达到了 7MB。</p>\n<p>Flutter SDK是 dynamic framework，如此大的二进制体积可能会造成动态链接耗时长。而如果静态链接，可能原来比较大的 App很有可能造成 TEXT段（iOS默认60M）超标。</p>\n<h3 id=\"3-2-帧率\"><a href=\"#3-2-帧率\" class=\"headerlink\" title=\"3.2 帧率\"></a>3.2 帧率</h3><p>Dart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。</p>\n<p>在任何系统的UI框架中，动画实现的原理都是相同的，即：</p>\n<blockquote>\n<p>在一段时间内，快速地多次改变UI外观，由于人眼会产生视觉暂留，最终看到的就是一个“连续”的动画，这和电影的原理是一样的，而UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），指每秒的动画帧数。很明显，帧率越高则动画就会越流畅。一般情况下，对于人眼来说，动画帧率超过16FPS，就比较流畅了，超过32FPS就会非常的细腻平滑，而超过32FPS基本就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用动画基本是持平的。</p>\n</blockquote>\n<h3 id=\"3-3-Dart线程和异步\"><a href=\"#3-3-Dart线程和异步\" class=\"headerlink\" title=\"3.3 Dart线程和异步\"></a>3.3 <a href=\"https://flutterchina.club/flutter-for-ios/#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5\">Dart线程和异步</a></h3><p><strong>Isolates：</strong> 现代的浏览器以及移动浏览器都运行在多核 CPU 系统上。 要充分利用这些 CPU，开发者一般使用共享内存 数据来保证多线程的正确执行。然而， 多线程共享数据通常会导致很多潜在的问题，并导致代码运行出错。</p>\n<p>所有的 Dart 代码在 isolates 中运行而不是线程。 每个 isolate 都有自己的堆内存，并且确保每个 isolate 的状态都不能被其他 isolate 访问。因此，也不存在资源锁的问题。</p>\n<p>Dart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。</p>\n<p>Dart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。</p>\n<ul>\n<li>多线程示例：<a href=\"./isolate.dart\">isolate_example</a></li>\n</ul>\n<h3 id=\"3-4-EventLoop、事件分发\"><a href=\"#3-4-EventLoop、事件分发\" class=\"headerlink\" title=\"3.4 EventLoop、事件分发\"></a>3.4 <a href=\"https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a\">EventLoop、事件分发</a></h3><p>Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。</p>\n<p>事件总线（EventBus）通过流控制器（StreamController）控制 事件流（Stream），事件流可以被监听、唤醒、停止、关闭、下沉，订阅者可以通过流控制器订阅流事件。</p>\n<h3 id=\"3-5-事件响应\"><a href=\"#3-5-事件响应\" class=\"headerlink\" title=\"3.5 事件响应\"></a>3.5 事件响应</h3><p>一个对象是否可以响应事件，取决于其对命中测试的返回，当发生用户事件时，会从根节点（RenderView）开始进行命中测试，下面是RenderView的hitTest()源码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> hitTest(HitTestResult result, &#123; Offset position &#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    child.hitTest(result, position: position); <span class=\"comment\">//递归子RenderBox进行命中测试</span></span><br><span class=\"line\">  result.add(HitTestEntry(<span class=\"keyword\">this</span>)); <span class=\"comment\">//将测试结果添加到result中</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>RenderBox默认的hitTest()实现：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> hitTest(HitTestResult result, &#123; <span class=\"meta\">@required</span> Offset position &#125;) &#123;</span><br><span class=\"line\">  ...  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_size.contains(position)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hitTestChildren(result, position: position) || hitTestSelf(position)) &#123;</span><br><span class=\"line\">      result.add(BoxHitTestEntry(<span class=\"keyword\">this</span>, position));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们看到默认的实现里调用了hitTestSelf()和hitTestChildren()两个方法，这两个方法默认实现如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@protected</span></span><br><span class=\"line\"><span class=\"built_in\">bool</span> hitTestSelf(Offset position) =&gt; <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@protected</span></span><br><span class=\"line\"><span class=\"built_in\">bool</span> hitTestChildren(HitTestResult result, &#123; Offset position &#125;) =&gt; <span class=\"keyword\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>hitTest 方法用来判断该 RenderObject 是否在被点击的范围内，同时负责将被点击的 RenderBox 添加到 HitTestResult 列表中，参数 position 为事件触发的坐标（如果有的话），返回 true 则表示有 RenderBox 通过了命中测试，需要响应事件，反之则认为当前RenderBox没有命中。</p>\n<p>在继承RenderBox时，可以直接重写hitTest()方法，也可以重写 hitTestSelf() 或 hitTestChildren(), 唯一不同的是 hitTest()中需要将通过命中测试的节点信息添加到命中测试结果列表中，而 hitTestSelf() 和 hitTestChildren()则只需要简单的返回true或false。</p>\n</blockquote>\n<h3 id=\"3-6-Runtime（AOT）、JIT、Dart-VM\"><a href=\"#3-6-Runtime（AOT）、JIT、Dart-VM\" class=\"headerlink\" title=\"3.6 Runtime（AOT）、JIT、Dart VM\"></a>3.6 Runtime（AOT）、JIT、Dart VM</h3><h3 id=\"3-7-性能（CPU、GPU、Network、battery、Disk）\"><a href=\"#3-7-性能（CPU、GPU、Network、battery、Disk）\" class=\"headerlink\" title=\"3.7 性能（CPU、GPU、Network、battery、Disk）\"></a>3.7 性能（CPU、GPU、Network、battery、Disk）</h3><h3 id=\"3-8-内存管理\"><a href=\"#3-8-内存管理\" class=\"headerlink\" title=\"3.8 内存管理\"></a>3.8 <a href=\"https://mp.weixin.qq.com/s/efKCpCtvvHDHUiAsizobBQ\">内存管理</a></h3><p>Dart VM将内存管理分为新生代(New Generation)和老年代(Old Generation)。</p>\n<ul>\n<li>新生代(New Generation): 通常初次分配的对象都位于新生代中，该区域主要是存放内存较小并且生命周期较短的对象，比如局部变量。新生代会频繁执行内存回收(GC)，回收采用“复制-清除”算法，将内存分为两块(图中的from 和 to)，运行时每次只使用其中的一块(图中的from)，另一块备用(图中的to)。当发生GC时，将当前使用的内存块中存活的对象拷贝到备用内存块中，然后清除当前使用内存块，最后，交换两块内存的角色。</li>\n</ul>\n<p><img src=\"./Flutter/Memory_Manager_01.webp\" alt=\"Memory_Manager\"></p>\n<ul>\n<li>老年代(Old Generation): 在新生代的GC中“幸存”下来的对象，它们会被转移到老年代中。老年代存放生命力周期较长，内存较大的对象。老年代通常比新生代要大很多。老年代的GC回收采用“标记-清除”算法，分成标记和清除两个阶段。在标记阶段，所有线程参与并发的完成对回收对象的标记，降低标记阶段耗时。在清理阶段，由GC线程负责清理回收对象，和应用线程同时执行，不影响应用运行。<br><img src=\"./Flutter/Memory_Manager_02.webp\" alt=\"Memory_Manager\"></li>\n</ul>\n<h3 id=\"3-9-技术生态圈\"><a href=\"#3-9-技术生态圈\" class=\"headerlink\" title=\"3.9 技术生态圈\"></a>3.9 技术生态圈</h3><h2 id=\"4、Flutter-amp-原生\"><a href=\"#4、Flutter-amp-原生\" class=\"headerlink\" title=\"4、Flutter &amp; 原生\"></a>4、<a href=\"https://blog.codemagic.io/flutter-vs-swift/\">Flutter &amp; 原生</a></h2><ol>\n<li>界面<br>解决移动端信息展示的目的；<br>都基于声明式、响应式的方式、热重载的方式；</li>\n</ol>\n<h2 id=\"5、未来与憧憬\"><a href=\"#5、未来与憧憬\" class=\"headerlink\" title=\"5、未来与憧憬\"></a>5、未来与憧憬</h2><p>当下的移动端、前端开发技术越来越多样化，复杂化。</p>\n<p>就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；<br>Android的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等。</p>\n<p>大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。</p>\n<p>前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。</p>\n<p>前不久Facebook 又推出了新的<a href=\"https://juejin.im/entry/5d2e6d1ce51d4510664d178e\">Hermes</a>，用于在React Native应用提高性能的。</p>\n<p>个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。</p>\n<p>统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。</p>\n<p>据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！</p>\n"},{"_content":"MacBook-P:~ sumian$ g++ --help\n\n```shell\nOVERVIEW: clang LLVM compiler\n\nUSAGE: clang [options] <inputs>\n\nOPTIONS:\n  -###                    Print (but do not run) the commands to run for this compilation\n  --analyzer-output <value>\n                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).\n  --analyze               Run the static analyzer\n  -arcmt-migrate-emit-errors\n                          Emit ARC errors even if the migrator can fix them\n  -arcmt-migrate-report-output <value>\n                          Output path for the plist report\n  -B <dir>                Add <dir> to search path for binaries and object files used implicitly\n  -CC                     Include comments from within macros in preprocessed output\n  -cfguard                Emit tables required for Windows Control Flow Guard.\n  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.\n  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.\n  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.\n  -cl-fp32-correctly-rounded-divide-sqrt\n                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.\n  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.\n  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.\n  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.\n  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.\n  -cl-single-precision-constant\n                          OpenCL only. Treat double precision floating-point constant as single precision constant.\n  -cl-std=<value>         OpenCL language standard to compile for.\n  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.\n  -cl-uniform-work-group-size\n                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel\n  -cl-unsafe-math-optimizations\n                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.\n  --config <value>        Specifies configuration file\n  --cuda-compile-host-device\n                          Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.\n  --cuda-device-only      Compile CUDA code for device only\n  --cuda-gpu-arch=<value> CUDA GPU architecture (e.g. sm_35).  May be specified more than once.\n  --cuda-host-only        Compile CUDA code for host only.  Has no effect on non-CUDA compilations.\n  --cuda-include-ptx=<value>\n                          Include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --cuda-noopt-device-debug\n                          Enable device-side debug info generation. Disables ptxas optimizations.\n  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation\n  --cuda-path=<value>     CUDA installation path\n  -cxx-isystem <directory>\n                          Add directory to the C++ SYSTEM include search path\n  -C                      Include comments in preprocessed output\n  -c                      Only run preprocess, compile, and assemble steps\n  -dD                     Print macro definitions in -E mode in addition to normal output\n  -dependency-dot <value> Filename to write DOT-formatted header dependencies to\n  -dependency-file <value>\n                          Filename (or -) to write dependency output to\n  -dI                     Print include directives in -E mode in addition to normal output\n  -dM                     Print macro definitions in -E mode instead of normal output\n  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)\n  -emit-ast               Emit Clang AST files for source inputs\n  -emit-llvm              Use the LLVM representation for assembler and object files\n  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang<value>\n                          Trivial automatic variable initialization to zero is only here for benchmarks, it'll eventually be removed, and I'm OK with that because I'm only using it to benchmark\n  -E                      Only run the preprocessor\n  -faddrsig               Emit an address-significance table\n  -faligned-allocation    Enable C++17 aligned allocation functions\n  -fallow-editor-placeholders\n                          Treat editor placeholders as valid source code\n  -fansi-escape-codes     Use ANSI escape codes for diagnostics\n  -fapinotes-cache-path=<directory>\n                          Does nothing; API notes are no longer cached separately from modules\n  -fapinotes-modules      Enable module-based external API notes support\n  -fapinotes-swift-version=<version>\n                          Specify the Swift version to use when filtering API notes\n  -fapinotes              Enable external API notes support\n  -fapple-kext            Use Apple's kernel extensions ABI\n  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling\n  -fapplication-extension Restrict code to those available for App Extensions\n  -fblocks                Enable the 'blocks' language feature\n  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler\n  -fbuild-session-file=<file>\n                          Use the last modification time of <file> as the build session timestamp\n  -fbuild-session-timestamp=<time since Epoch in seconds>\n                          Time when the current build session started\n  -fbuiltin-module-map    Load the clang builtins module map file.\n  -fc++-static-destructors\n                          Enable C++ static destructor registration (the default)\n  -fcf-protection=<value> Instrument control-flow architecture protection. Options: return, branch, full, none.\n  -fcf-protection         Enable cf-protection in 'full' mode\n  -fchar8_t               Enable C++ builtin type char8_t\n  -fclang-abi-compat=<version>\n                          Attempt to match the ABI of Clang <version>\n  -fcolor-diagnostics     Use colors in diagnostics\n  -fcomment-block-commands=<arg>\n                          Treat each comma separated argument in <arg> as a documentation comment block command\n  -fcomplete-member-pointers\n                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fcoroutines-ts         Enable support for the C++ Coroutines TS\n  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis\n  -fcuda-approx-transcendentals\n                          Use approximate transcendental functions\n  -fcuda-flush-denormals-to-zero\n                          Flush denormal floating point values to zero in CUDA device mode.\n  -fcuda-rdc              Generate relocatable device code, also known as separate compilation mode.\n  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces.\n  -fcxx-exceptions        Enable C++ exceptions\n  -fdata-sections         Place each data in its own section (ELF Only)\n  -fdebug-info-for-profiling\n                          Emit extra debug info to make sample profile more accurate.\n  -fdebug-macro           Emit macro debug information\n  -fdebug-prefix-map=<value>\n                          remap file source paths in debug info\n  -fdebug-types-section   Place debug types in their own section (ELF Only)\n  -fdeclspec              Allow __declspec as a keyword\n  -fdelayed-template-parsing\n                          Parse templated function definitions at the end of the translation unit\n  -fdelete-null-pointer-checks\n                          Treat usage of null pointers as undefined behavior.\n  -fdiagnostics-absolute-paths\n                          Print absolute paths in diagnostics\n  -fdiagnostics-hotness-threshold=<number>\n                          Prevent optimization remarks from being output if they do not have at least this profile count\n  -fdiagnostics-parseable-fixits\n                          Print fix-its in machine parseable form\n  -fdiagnostics-print-source-range-info\n                          Print source range spans in numeric form\n  -fdiagnostics-show-hotness\n                          Enable profile hotness information in diagnostic line\n  -fdiagnostics-show-note-include-stack\n                          Display include stacks for diagnostic notes\n  -fdiagnostics-show-option\n                          Print option name with mappable diagnostics\n  -fdiagnostics-show-template-tree\n                          Print a template comparison tree for differing templates\n  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)\n  -fdiscard-value-names   Discard value names in LLVM IR\n  -fdollars-in-identifiers\n                          Allow '$' in identifiers\n  -fdouble-square-bracket-attributes\n                          Enable '[[]]' attributes in all C and C++ language modes\n  -fdwarf-exceptions      Use DWARF style exceptions\n  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker\n  -fembed-bitcode=<option>\n                          Embed LLVM bitcode (option: off, all, bitcode, marker)\n  -fembed-bitcode         Embed LLVM IR bitcode as data\n  -femit-all-decls        Emit all declarations, even if unused\n  -femulated-tls          Use emutls functions to access thread_local variables\n  -fenable-matrix         Enable matrix data type and related builtin functions\n  -fexceptions            Enable support for exception handling\n  -fexperimental-isel     Enables the experimental global instruction selector\n  -fexperimental-new-pass-manager\n                          Enables an experimental new pass manager in LLVM.\n  -ffast-math             Allow aggressive, lossy floating-point optimizations\n  -ffine-grained-bitfield-accesses\n                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.\n  -ffixed-point           Enable fixed point types\n  -ffixed-r19             Reserve register r19 (Hexagon only)\n  -ffixed-r9              Reserve the r9 register (ARM only)\n  -ffixed-x18             Reserve the x18 register (AArch64 only)\n  -ffixed-x20             Reserve the x20 register (AArch64 only)\n  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization\n  -fforce-enable-int128   Enable support for int128_t type\n  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)\n  -ffreestanding          Assert that the compilation takes place in a freestanding environment\n  -ffunction-sections     Place each function in its own section (ELF Only)\n  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard\n  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime\n  -fgnu89-inline          Use the gnu89 inline semantics\n  -fimplicit-module-maps  Implicitly search the file system for module map files.\n  -finline-functions      Inline suitable functions\n  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline\n  -finstrument-function-entry-bare\n                          Instrument function entry only, after inlining, without arguments to the instrumentation call\n  -finstrument-functions-after-inlining\n                          Like -finstrument-functions, but insert the calls after inlining\n  -finstrument-functions  Generate calls to instrument function entry and exit\n  -fintegrated-as         Enable the integrated assembler\n  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)\n  -flto=<value>           Set LTO mode to either 'full' or 'thin'\n  -flto                   Enable LTO in 'full' mode\n  -fmath-errno            Require math functions to indicate errors by setting errno\n  -fmax-type-align=<value>\n                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment\n  -fmerge-all-constants   Allow merging of constants\n  -fmodule-file=[<name>=]<file>\n                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.\n  -fmodule-map-file=<file>\n                          Load this module map file\n  -fmodule-name=<name>    Specify the name of the module to build\n  -fmodules-cache-path=<directory>\n                          Specify the module cache path\n  -fmodules-decluse       Require declaration of modules used within a module\n  -fmodules-disable-diagnostic-validation\n                          Disable validation of the diagnostic options when loading the module\n  -fmodules-ignore-macro=<value>\n                          Ignore the definition of the given macro when building and loading modules\n  -fmodules-prune-after=<seconds>\n                          Specify the interval (in seconds) after which a module file will be considered unused\n  -fmodules-prune-interval=<seconds>\n                          Specify the interval (in seconds) between attempts to prune the module cache\n  -fmodules-search-all    Search even non-imported modules to resolve references\n  -fmodules-strict-decluse\n                          Like -fmodules-decluse but requires all headers to be in modules\n  -fmodules-ts            Enable support for the C++ Modules TS\n  -fmodules-user-build-path <directory>\n                          Specify the module user build path\n  -fmodules-validate-once-per-build-session\n                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session\n  -fmodules-validate-system-headers\n                          Validate the system headers that a module depends on when loading the module\n  -fmodules               Enable the 'modules' language feature\n  -fms-compatibility-version=<value>\n                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fms-compatibility      Enable full Microsoft Visual C++ compatibility\n  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler\n  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'\n  -fno-access-control     Disable C++ access control\n  -fno-addrsig            Don't emit an address-significance table\n  -fno-apinotes-modules   Disable module-based external API notes support\n  -fno-apinotes           Disable external API notes support\n  -fno-assume-sane-operator-new\n                          Don't assume that C++'s global operator new can't alias any pointer\n  -fno-autolink           Disable generation of linker directives for automatic library linking\n  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function\n  -fno-builtin            Disable implicit builtin knowledge of functions\n  -fno-c++-static-destructors\n                          Disable C++ static destructor registration\n  -fno-char8_t            Disable C++ builtin type char8_t\n  -fno-common             Compile common globals like normal definitions\n  -fno-complete-member-pointers\n                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings\n  -fno-coverage-mapping   Disable code coverage analysis\n  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash\n  -fno-debug-info-for-profiling\n                          Do not emit extra debug info for sample profiler.\n  -fno-debug-macro        Do not emit macro debug information\n  -fno-declspec           Disallow __declspec as a keyword\n  -fno-delayed-template-parsing\n                          Disable delayed template parsing\n  -fno-delete-null-pointer-checks\n                          Do not treat usage of null pointers as undefined behavior.\n  -fno-diagnostics-fixit-info\n                          Do not include fixit information in diagnostics\n  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'\n  -fno-discard-value-names\n                          Do not discard value names in LLVM IR\n  -fno-dollars-in-identifiers\n                          Disallow '$' in identifiers\n  -fno-double-square-bracket-attributes\n                          Disable '[[]]' attributes in all C and C++ language modes\n  -fno-elide-constructors Disable C++ copy constructor elision\n  -fno-elide-type         Do not elide types when printing diagnostics\n  -fno-experimental-isel  Disables the experimental global instruction selector\n  -fno-experimental-new-pass-manager\n                          Disables an experimental new pass manager in LLVM.\n  -fno-fine-grained-bitfield-accesses\n                          Use large-integer access for consecutive bitfield runs.\n  -fno-fixed-point        Disable fixed point types\n  -fno-force-enable-int128\n                          Disable support for int128_t type\n  -fno-gnu-inline-asm     Disable GNU style inline asm\n  -fno-integrated-as      Disable the integrated assembler\n  -fno-jump-tables        Do not use jump tables for lowering switches\n  -fno-lax-vector-conversions\n                          Disallow implicit conversions between vectors with a different number of elements or different element types\n  -fno-lto                Disable LTO mode (default)\n  -fno-merge-all-constants\n                          Disallow merging of constants\n  -fno-objc-infer-related-result-type\n                          do not infer Objective-C related result type based on method family\n  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators\n  -fno-plt                Do not use the PLT to make function calls\n  -fno-preserve-as-comments\n                          Do not preserve comments in inline assembly\n  -fno-profile-generate   Disable generation of profile instrumentation.\n  -fno-profile-instr-generate\n                          Disable generation of profile instrumentation.\n  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization\n  -fno-register-global-dtors-with-atexit\n                          Don't use atexit or __cxa_atexit to register global destructors\n  -fno-reroll-loops       Turn off loop reroller\n  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags\n  -fno-rtti-data          Control emission of RTTI data\n  -fno-rtti               Disable generation of rtti information\n  -fno-sanitize-address-poison-class-member-array-new-cookie\n                          Disable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fno-sanitize-address-use-after-scope\n                          Disable use-after-scope detection in AddressSanitizer\n  -fno-sanitize-blacklist Don't use blacklist file for sanitizers\n  -fno-sanitize-cfi-cross-dso\n                          Disable control flow integrity (CFI) checks for cross-DSO calls.\n  -fno-sanitize-coverage=<value>\n                          Disable specified features of coverage instrumentation for Sanitizers\n  -fno-sanitize-memory-track-origins\n                          Disable origins tracking in MemorySanitizer\n  -fno-sanitize-memory-use-after-dtor\n                          Disable use-after-destroy detection in MemorySanitizer\n  -fno-sanitize-recover=<value>\n                          Disable recovery for specified sanitizers\n  -fno-sanitize-stats     Disable sanitizer statistics gathering.\n  -fno-sanitize-thread-atomics\n                          Disable atomic operations instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-func-entry-exit\n                          Disable function entry/exit instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-memory-access\n                          Disable memory access instrumentation in ThreadSanitizer\n  -fno-sanitize-trap=<value>\n                          Disable trapping for specified sanitizers\n  -fno-short-wchar        Force wchar_t to be an unsigned int\n  -fno-show-column        Do not include column number on diagnostics\n  -fno-show-source-location\n                          Do not include source location information with diagnostics\n  -fno-signed-char        Char is unsigned\n  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros\n  -fno-spell-checking     Disable spell-checking\n  -fno-stack-check        Disable stack checking\n  -fno-stack-protector    Disable the use of stack protectors\n  -fno-stack-size-section Don't emit section containing metadata on function stack sizes\n  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary\n  -fno-strict-float-cast-overflow\n                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions\n  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe\n  -fno-trigraphs          Do not process trigraph sequences\n  -fno-unroll-loops       Turn off loop unroller\n  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors\n  -fno-use-init-array     Don't use .init_array instead of .ctors\n  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc\n  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers\n  -fobjc-exceptions       Enable Objective-C exceptions\n  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version\n  -fobjc-weak             Enable ARC-style weak references in Objective-C\n  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.\n  -fopenmp-targets=<value>\n                          Specify comma-separated list of triples OpenMP offloading targets to be supported\n  -fopenmp                Parse OpenMP pragmas and generate parallel code.\n  -foptimization-record-file=<value>\n                          Specify the file name of any generated YAML optimization record\n  -fpack-struct=<value>   Specify the default maximum struct packing alignment\n  -fpascal-strings        Recognize and construct Pascal-style string literals\n  -fpcc-struct-return     Override the default ABI to return all structs on the stack\n  -fplt                   Use the PLT to make function calls\n  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)\n  -fprebuilt-module-path=<directory>\n                          Specify the prebuilt module path\n  -fprofile-generate=<directory>\n                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate=<file>\n                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate\n                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)\n  -fprofile-instr-use=<value>\n                          Use instrumentation data for profile-guided optimization\n  -fprofile-sample-accurate\n                          Specifies that the sample profile is accurate\n  -fprofile-sample-use=<value>\n                          Enable sample-based profile guided optimizations\n  -fprofile-use=<pathname>\n                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.\n  -fptrauth-calls         Enable signing and authentication of all indirect calls\n  -fptrauth-intrinsics    Enable pointer-authentication intrinsics\n  -fptrauth-returns       Enable signing and authentication of return addresses\n  -fptrauth-soft          Enable software lowering of pointer authentication\n  -freciprocal-math       Allow division operations to be reassociated\n  -freg-struct-return     Override the default ABI to return small structs in registers\n  -fregister-global-dtors-with-atexit\n                          Use atexit or __cxa_atexit to register global destructors\n  -frelaxed-template-template-args\n                          Enable C++17 relaxed template template argument matching\n  -freroll-loops          Turn on loop reroller\n  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags\n  -fsanitize-address-field-padding=<value>\n                          Level of field padding for AddressSanitizer\n  -fsanitize-address-globals-dead-stripping\n                          Enable linker dead stripping of globals in AddressSanitizer\n  -fsanitize-address-poison-class-member-array-new-cookie\n                          Enable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fsanitize-address-use-after-scope\n                          Enable use-after-scope detection in AddressSanitizer\n  -fsanitize-blacklist=<value>\n                          Path to blacklist file for sanitizers\n  -fsanitize-cfi-cross-dso\n                          Enable control flow integrity (CFI) checks for cross-DSO calls.\n  -fsanitize-cfi-icall-generalize-pointers\n                          Generalize pointers in CFI indirect call type signature checks\n  -fsanitize-coverage=<value>\n                          Specify the type of coverage instrumentation for Sanitizers\n  -fsanitize-memory-track-origins=<value>\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-track-origins\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-use-after-dtor\n                          Enable use-after-destroy detection in MemorySanitizer\n  -fsanitize-recover=<value>\n                          Enable recovery for specified sanitizers\n  -fsanitize-stats        Enable sanitizer statistics gathering.\n  -fsanitize-thread-atomics\n                          Enable atomic operations instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-func-entry-exit\n                          Enable function entry/exit instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-memory-access\n                          Enable memory access instrumentation in ThreadSanitizer (default)\n  -fsanitize-trap=<value> Enable trapping for specified sanitizers\n  -fsanitize-undefined-strip-path-components=<number>\n                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.\n  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks\n  -fsave-optimization-record\n                          Generate a YAML optimization record file\n  -fseh-exceptions        Use SEH style exceptions\n  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values\n  -fshort-wchar           Force wchar_t to be a short unsigned int\n  -fshow-overloads=<value>\n                          Which overload candidates to show when overload resolution fails: best|all; defaults to all\n  -fsized-deallocation    Enable C++14 sized global deallocation functions\n  -fsjlj-exceptions       Use SjLj style exceptions\n  -fslp-vectorize         Enable the superword-level parallelism vectorization passes\n  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n  -fstack-check           Enable stack checking\n  -fstack-protector-all   Force the usage of stack protectors for all functions\n  -fstack-protector-strong\n                          Use a strong heuristic to apply stack protectors to functions\n  -fstack-protector       Enable stack protectors for functions potentially vulnerable to stack smashing\n  -fstack-size-section    Emit section containing metadata on function stack sizes\n  -fstandalone-debug      Emit full debug info for all types used by the program\n  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range\n  -fstrict-float-cast-overflow\n                          Assume that overflowing float-to-int casts are undefined (default)\n  -fstrict-return         Always treat control flow paths that fall off the end of a non-void function as unreachable\n  -fstrict-vtable-pointers\n                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects\n  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index\n  -ftrap-function=<value> Issue call to specified function rather than a trap instruction\n  -ftrapv-handler=<function name>\n                          Specify the function to be called on overflow\n  -ftrapv                 Trap on integer overflow\n  -ftrigraphs             Process trigraph sequences\n  -ftrivial-auto-var-init=<value>\n                          Initialize trivial automatic stack variables: uninitialized (default) | pattern\n  -funique-section-names  Use unique names for text and data sections (ELF Only)\n  -funroll-loops          Turn on loop unroller\n  -fuse-init-array        Use .init_array instead of .ctors\n  -fveclib=<value>        Use the given vector functions library\n  -fvectorize             Enable the loop vectorization passes\n  -fvisibility-inlines-hidden\n                          Give inline C++ member functions hidden visibility by default\n  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default\n  -fvisibility=<value>    Set the default symbol visibility for all global declarations\n  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto\n  -fwrapv                 Treat signed integer overflow as two's complement\n  -fwritable-strings      Store string literals as writable data\n  -fxray-always-emit-customevents\n                          Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-emit-typedevents\n                          Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-instrument= <value>\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.\n  -fxray-attr-list= <value>\n                          Filename defining the list of functions/types for imbuing XRay attributes.\n  -fxray-instruction-threshold= <value>\n                          Sets the minimum function size to instrument with XRay\n  -fxray-instrumentation-bundle= <value>\n                          Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is 'all'.\n  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit\n  -fxray-link-deps        Tells clang to add the link dependencies for XRay.\n  -fxray-modes= <value>   List of modes to link in by default into XRay instrumented binaries.\n  -fxray-never-instrument= <value>\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.\n  -fzvector               Enable System z vector language extension\n  -F <value>              Add directory to framework include search path\n  --gcc-toolchain=<value> Use the gcc toolchain at the given directory\n  -gcodeview              Generate CodeView debug information\n  -gdwarf-2               Generate source-level debug information with dwarf version 2\n  -gdwarf-3               Generate source-level debug information with dwarf version 3\n  -gdwarf-4               Generate source-level debug information with dwarf version 4\n  -gdwarf-5               Generate source-level debug information with dwarf version 5\n  -gembed-source          Embed source text in DWARF debug sections\n  -gline-tables-only      Emit debug line number tables only\n  -gmodules               Generate debug info with external references to clang modules or precompiled headers\n  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections\n  -gz=<value>             DWARF debug sections compression type\n  -gz                     DWARF debug sections compression type\n  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)\n  -g                      Generate source-level debug information\n  --help-hidden           Display help for hidden options\n  -help                   Display available options\n  --hip-device-lib-path=<value>\n                          HIP device library path\n  --hip-device-lib=<value>\n                          HIP device library\n  --hip-link              Link clang-offload-bundler bundles for HIP\n  -H                      Show header includes and nesting depth\n  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path\n  -iapinotes-modules <directory>\n                          Add directory to the API notes search path referenced by module name\n  -idirafter <value>      Add directory to AFTER include search path\n  -iframeworkwithsysroot <directory>\n                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot\n  -iframework <value>     Add directory to SYSTEM framework search path\n  -imacros <file>         Include macros from file before parsing\n  -include-pch <file>     Include precompiled header file\n  -include <file>         Include file before parsing\n  -index-header-map       Make the next included directory (-I or -F) an indexer header map\n  -index-ignore-system-symbols\n                          Ignore symbols from system headers\n  -index-record-codegen-name\n                          Record the codegen name for symbols\n  -index-store-path <value>\n                          Enable indexing with the specified data store path\n  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix\n  -iquote <directory>     Add directory to QUOTE include search path\n  -isysroot <dir>         Set the system root directory (usually /)\n  -isystem-after <directory>\n                          Add directory to end of the SYSTEM include search path\n  -isystem <directory>    Add directory to SYSTEM include search path\n  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system\n  -iwithprefixbefore <dir>\n                          Set directory to include search path with prefix\n  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix\n  -iwithsysroot <directory>\n                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot\n  -I <dir>                Add directory to include search path\n  -L <dir>                Add directory to library search path\n  -mabicalls              Enable SVR4-style position-independent code (Mips only)\n  -malign-double          Align doubles to two words in structs (x86 only)\n  -mbackchain             Link stack frames through backchain on System Z\n  -mcrc                   Allow use of CRC instructions (ARM/Mips only)\n  -MD                     Write a depfile containing user and system headers\n  -meabi <value>          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)\n  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)\n  -mexecute-only          Disallow generation of data access to code sections (ARM only)\n  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n  -mfentry                Insert calls to fentry at function entry (x86 only)\n  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mfp32                  Use 32-bit floating point registers (MIPS only)\n  -mfp64                  Use 64-bit floating point registers (MIPS only)\n  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>\n  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64 only)\n  -mglobal-merge          Enable merging of globals\n  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -MG                     Add missing headers to depfile\n  -mhvx-length=<value>    Set Hexagon Vector Length\n  -mhvx=<value>           Enable Hexagon Vector eXtensions\n  -mhvx                   Enable Hexagon Vector eXtensions\n  -miamcu                 Use Intel MCU ABI\n  --migrate               Run the migrator\n  -mincremental-linker-compatible\n                          (integrated-as) Emit an object file which can be used with an incremental linker\n  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation\n  -mios-version-min=<value>\n                          Set iOS deployment target\n  -MJ <value>             Write a compilation database entry per input\n  -mllvm <value>          Additional arguments to forward to LLVM's option processing\n  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)\n  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.\n  -mmacosx-version-min=<value>\n                          Set Mac OS X deployment target\n  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.\n  -MMD                    Write a depfile containing user headers\n  -mmemops                Enable generation of memop instructions\n  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard\n  -mmsa                   Enable MSA ASE (MIPS only)\n  -mmt                    Enable MT ASE (MIPS only)\n  -MM                     Like -MMD, but also implies -E and writes to stdout by default\n  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)\n  -mno-crc                Disallow use of CRC instructions (Mips only)\n  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)\n  -mno-execute-only       Allow generation of data access to code sections (ARM only)\n  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n  -mno-fix-cortex-a53-835769\n                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mno-global-merge       Disable merging of globals\n  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -mno-hvx                Disable Hexagon Vector eXtensions\n  -mno-implicit-float     Don't generate implicit floating point instructions\n  -mno-incremental-linker-compatible\n                          (integrated-as) Emit an object file which cannot be used with an incremental linker\n  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)\n  -mno-long-calls         Restore the default behaviour of not generating long calls\n  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.\n  -mno-memops             Disable generation of memop instructions\n  -mno-movt               Disallow use of movt/movw pairs (ARM only)\n  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard\n  -mno-msa                Disable MSA ASE (MIPS only)\n  -mno-mt                 Disable MT ASE (MIPS only)\n  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.\n  -mno-nvj                Disable generation of new-value jumps\n  -mno-nvs                Disable generation of new-value stores\n  -mno-outline            Disable function outlining (AArch64 only)\n  -mno-packets            Disable generation of instruction packets\n  -mno-relax              Disable linker relaxation\n  -mno-restrict-it        Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode\n  -mno-stack-arg-probe    Disable stack probes which are enabled by default\n  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)\n  -mno-xnack              Disable XNACK (AMDGPU only)\n  -mnocrc                 Disallow use of CRC instructions (ARM only)\n  -mnvj                   Enable generation of new-value jumps\n  -mnvs                   Enable generation of new-value stores\n  -module-dependency-dir <value>\n                          Directory to dump module dependencies to\n  -module-file-info       Provide information about a particular module file\n  -momit-leaf-frame-pointer\n                          Omit frame pointer setup for leaf functions\n  -moutline               Enable function outlining (AArch64 only)\n  -mpackets               Enable generation of instruction packets\n  -mpie-copy-relocations  Use copy relocations support for PIE builds\n  -mprefer-vector-width=<value>\n                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.\n  -MP                     Create phony target for each dependency (other than main file)\n  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility\n  -MQ <value>             Specify name of main file output to quote in depfile\n  -mrelax-all             (integrated-as) Relax all machine instructions\n  -mrelax                 Enable linker relaxation\n  -mrestrict-it           Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.\n  -mrtd                   Make StdCall calling convention the default\n  -msoft-float            Use software floating point\n  -mstack-alignment=<value>\n                          Set the stack alignment\n  -mstack-arg-probe       Enable stack probes\n  -mstack-probe-size=<value>\n                          Set the stack probe size\n  -mstackrealign          Force realign the stack at entry to every function\n  -mthread-model <value>  The thread model to use, e.g. posix, single (posix by default)\n  -mtp=<value>            Read thread pointer from coprocessor register (ARM only)\n  -MT <value>             Specify name of main file output in depfile\n  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)\n  -MV                     Use NMake/Jom format for the depfile\n  -mxnack                 Enable XNACK (AMDGPU only)\n  -M                      Like -MD, but also implies -E and writes to stdout by default\n  --no-cuda-gpu-arch=<value>\n                          Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. 'all' resets the list to its default value.\n  --no-cuda-include-ptx=<value>\n                          Do not include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.\n  --no-system-header-prefix=<prefix>\n                          Treat all #include paths starting with <prefix> as not including a system header.\n  -nobuiltininc           Disable builtin #include directories\n  -nostdinc++             Disable standard #include directories for the C++ standard library\n  -ObjC++                 Treat source input files as Objective-C++ inputs\n  -objcmt-atomic-property Make migration to 'atomic' properties\n  -objcmt-migrate-all     Enable migration to modern ObjC\n  -objcmt-migrate-annotation\n                          Enable migration to property and method annotations\n  -objcmt-migrate-designated-init\n                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods\n  -objcmt-migrate-instancetype\n                          Enable migration to infer instancetype for method result type\n  -objcmt-migrate-literals\n                          Enable migration to modern ObjC literals\n  -objcmt-migrate-ns-macros\n                          Enable migration to NS_ENUM/NS_OPTIONS macros\n  -objcmt-migrate-property-dot-syntax\n                          Enable migration of setter/getter messages to property-dot syntax\n  -objcmt-migrate-property\n                          Enable migration to modern ObjC property\n  -objcmt-migrate-protocol-conformance\n                          Enable migration to add protocol conformance on classes\n  -objcmt-migrate-readonly-property\n                          Enable migration to modern ObjC readonly property\n  -objcmt-migrate-readwrite-property\n                          Enable migration to modern ObjC readwrite property\n  -objcmt-migrate-subscripting\n                          Enable migration to modern ObjC subscripting\n  -objcmt-ns-nonatomic-iosonly\n                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute\n  -objcmt-returns-innerpointer-property\n                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER\n  -objcmt-whitelist-dir-path=<value>\n                          Only modify files with a filename contained in the provided directory path\n  -ObjC                   Treat source input files as Objective-C inputs\n  -o <file>               Write output to <file>\n  -pg                     Enable mcount instrumentation\n  -pipe                   Use pipes between commands, when possible\n  --precompile            Only precompile the input\n  -print-file-name=<file> Print the full library path of <file>\n  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace\n  -print-libgcc-file-name Print the library path for the currently used compiler runtime library (\"libgcc.a\" or \"libclang_rt.builtins.*.a\")\n  -print-prog-name=<name> Print the full program path of <name>\n  -print-resource-dir     Print the resource directory pathname\n  -print-search-dirs      Print the paths used for finding libraries and programs\n  -pthread                Support POSIX threads in generated code\n  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)\n  -P                      Disable linemarker output in -E mode\n  -Qn                     Do not emit metadata containing compiler name and version\n  -Qunused-arguments      Don't emit warning for unused driver arguments\n  -Qy                     Emit metadata containing compiler name and version\n  -relocatable-pch        Whether to build a relocatable precompiled header\n  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++\n  -rewrite-objc           Rewrite Objective-C source to C++\n  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression\n  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression\n  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression\n  -rtlib=<value>          Compiler runtime library to use\n  -R<remark>              Enable the specified remark\n  -save-stats=<value>     Save llvm statistics.\n  -save-stats             Save llvm statistics.\n  -save-temps=<value>     Save intermediate compilation results.\n  -save-temps             Save intermediate compilation results\n  -serialize-diagnostics <value>\n                          Serialize compiler diagnostics to a file\n  -std=<value>            Language standard to compile for\n  -stdlib=<value>         C++ standard library to use\n  --system-header-prefix=<prefix>\n                          Treat all #include paths starting with <prefix> as including a system header.\n  -S                      Only run preprocess and compilation steps\n  -target-variant <value> Generate code that may run on a particular variant of the deployment target\n  --target=<value>        Generate code for the given target\n  -Tbss <addr>            Set starting address of BSS to <addr>\n  -Tdata <addr>           Set starting address of DATA to <addr>\n  -time                   Time individual commands\n  -traditional-cpp        Enable some traditional CPP emulation\n  -trigraphs              Process trigraph sequences\n  -Ttext <addr>           Set starting address of TEXT to <addr>\n  -T <script>             Specify <script> as linker script\n  -undef                  undef all system defines\n  -U <macro>              Undefine macro <macro>\n  --verify-debug-info     Verify the binary representation of debug output\n  -verify-pch             Load and verify that a pre-compiled header file is not stale\n  --version               Print version information\n  -v                      Show commands to run and use verbose output\n  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler\n  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED\n  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker\n  -working-directory <value>\n                          Resolve file paths relative to the specified directory\n  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor\n  -W<warning>             Enable the specified warning\n  -w                      Suppress all warnings\n  -Xanalyzer <arg>        Pass <arg> to the static analyzer\n  -Xassembler <arg>       Pass <arg> to the assembler\n  -Xclang <arg>           Pass <arg> to the clang compiler\n  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation\n  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler\n  -Xlinker <arg>          Pass <arg> to the linker\n  -Xopenmp-target=<triple> <arg>\n                          Pass <arg> to the target offloading toolchain identified by <triple>.\n  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.\n  -Xpreprocessor <arg>    Pass <arg> to the preprocessor\n  -x <language>           Treat subsequent input files as having type <language>\n  -z <arg>                Pass -z <arg> to the linker\n```","source":"_posts/iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/g++.md","raw":"MacBook-P:~ sumian$ g++ --help\n\n```shell\nOVERVIEW: clang LLVM compiler\n\nUSAGE: clang [options] <inputs>\n\nOPTIONS:\n  -###                    Print (but do not run) the commands to run for this compilation\n  --analyzer-output <value>\n                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).\n  --analyze               Run the static analyzer\n  -arcmt-migrate-emit-errors\n                          Emit ARC errors even if the migrator can fix them\n  -arcmt-migrate-report-output <value>\n                          Output path for the plist report\n  -B <dir>                Add <dir> to search path for binaries and object files used implicitly\n  -CC                     Include comments from within macros in preprocessed output\n  -cfguard                Emit tables required for Windows Control Flow Guard.\n  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.\n  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.\n  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.\n  -cl-fp32-correctly-rounded-divide-sqrt\n                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.\n  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.\n  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.\n  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.\n  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.\n  -cl-single-precision-constant\n                          OpenCL only. Treat double precision floating-point constant as single precision constant.\n  -cl-std=<value>         OpenCL language standard to compile for.\n  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.\n  -cl-uniform-work-group-size\n                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel\n  -cl-unsafe-math-optimizations\n                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.\n  --config <value>        Specifies configuration file\n  --cuda-compile-host-device\n                          Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.\n  --cuda-device-only      Compile CUDA code for device only\n  --cuda-gpu-arch=<value> CUDA GPU architecture (e.g. sm_35).  May be specified more than once.\n  --cuda-host-only        Compile CUDA code for host only.  Has no effect on non-CUDA compilations.\n  --cuda-include-ptx=<value>\n                          Include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --cuda-noopt-device-debug\n                          Enable device-side debug info generation. Disables ptxas optimizations.\n  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation\n  --cuda-path=<value>     CUDA installation path\n  -cxx-isystem <directory>\n                          Add directory to the C++ SYSTEM include search path\n  -C                      Include comments in preprocessed output\n  -c                      Only run preprocess, compile, and assemble steps\n  -dD                     Print macro definitions in -E mode in addition to normal output\n  -dependency-dot <value> Filename to write DOT-formatted header dependencies to\n  -dependency-file <value>\n                          Filename (or -) to write dependency output to\n  -dI                     Print include directives in -E mode in addition to normal output\n  -dM                     Print macro definitions in -E mode instead of normal output\n  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)\n  -emit-ast               Emit Clang AST files for source inputs\n  -emit-llvm              Use the LLVM representation for assembler and object files\n  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang<value>\n                          Trivial automatic variable initialization to zero is only here for benchmarks, it'll eventually be removed, and I'm OK with that because I'm only using it to benchmark\n  -E                      Only run the preprocessor\n  -faddrsig               Emit an address-significance table\n  -faligned-allocation    Enable C++17 aligned allocation functions\n  -fallow-editor-placeholders\n                          Treat editor placeholders as valid source code\n  -fansi-escape-codes     Use ANSI escape codes for diagnostics\n  -fapinotes-cache-path=<directory>\n                          Does nothing; API notes are no longer cached separately from modules\n  -fapinotes-modules      Enable module-based external API notes support\n  -fapinotes-swift-version=<version>\n                          Specify the Swift version to use when filtering API notes\n  -fapinotes              Enable external API notes support\n  -fapple-kext            Use Apple's kernel extensions ABI\n  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling\n  -fapplication-extension Restrict code to those available for App Extensions\n  -fblocks                Enable the 'blocks' language feature\n  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler\n  -fbuild-session-file=<file>\n                          Use the last modification time of <file> as the build session timestamp\n  -fbuild-session-timestamp=<time since Epoch in seconds>\n                          Time when the current build session started\n  -fbuiltin-module-map    Load the clang builtins module map file.\n  -fc++-static-destructors\n                          Enable C++ static destructor registration (the default)\n  -fcf-protection=<value> Instrument control-flow architecture protection. Options: return, branch, full, none.\n  -fcf-protection         Enable cf-protection in 'full' mode\n  -fchar8_t               Enable C++ builtin type char8_t\n  -fclang-abi-compat=<version>\n                          Attempt to match the ABI of Clang <version>\n  -fcolor-diagnostics     Use colors in diagnostics\n  -fcomment-block-commands=<arg>\n                          Treat each comma separated argument in <arg> as a documentation comment block command\n  -fcomplete-member-pointers\n                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fcoroutines-ts         Enable support for the C++ Coroutines TS\n  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis\n  -fcuda-approx-transcendentals\n                          Use approximate transcendental functions\n  -fcuda-flush-denormals-to-zero\n                          Flush denormal floating point values to zero in CUDA device mode.\n  -fcuda-rdc              Generate relocatable device code, also known as separate compilation mode.\n  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces.\n  -fcxx-exceptions        Enable C++ exceptions\n  -fdata-sections         Place each data in its own section (ELF Only)\n  -fdebug-info-for-profiling\n                          Emit extra debug info to make sample profile more accurate.\n  -fdebug-macro           Emit macro debug information\n  -fdebug-prefix-map=<value>\n                          remap file source paths in debug info\n  -fdebug-types-section   Place debug types in their own section (ELF Only)\n  -fdeclspec              Allow __declspec as a keyword\n  -fdelayed-template-parsing\n                          Parse templated function definitions at the end of the translation unit\n  -fdelete-null-pointer-checks\n                          Treat usage of null pointers as undefined behavior.\n  -fdiagnostics-absolute-paths\n                          Print absolute paths in diagnostics\n  -fdiagnostics-hotness-threshold=<number>\n                          Prevent optimization remarks from being output if they do not have at least this profile count\n  -fdiagnostics-parseable-fixits\n                          Print fix-its in machine parseable form\n  -fdiagnostics-print-source-range-info\n                          Print source range spans in numeric form\n  -fdiagnostics-show-hotness\n                          Enable profile hotness information in diagnostic line\n  -fdiagnostics-show-note-include-stack\n                          Display include stacks for diagnostic notes\n  -fdiagnostics-show-option\n                          Print option name with mappable diagnostics\n  -fdiagnostics-show-template-tree\n                          Print a template comparison tree for differing templates\n  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)\n  -fdiscard-value-names   Discard value names in LLVM IR\n  -fdollars-in-identifiers\n                          Allow '$' in identifiers\n  -fdouble-square-bracket-attributes\n                          Enable '[[]]' attributes in all C and C++ language modes\n  -fdwarf-exceptions      Use DWARF style exceptions\n  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker\n  -fembed-bitcode=<option>\n                          Embed LLVM bitcode (option: off, all, bitcode, marker)\n  -fembed-bitcode         Embed LLVM IR bitcode as data\n  -femit-all-decls        Emit all declarations, even if unused\n  -femulated-tls          Use emutls functions to access thread_local variables\n  -fenable-matrix         Enable matrix data type and related builtin functions\n  -fexceptions            Enable support for exception handling\n  -fexperimental-isel     Enables the experimental global instruction selector\n  -fexperimental-new-pass-manager\n                          Enables an experimental new pass manager in LLVM.\n  -ffast-math             Allow aggressive, lossy floating-point optimizations\n  -ffine-grained-bitfield-accesses\n                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.\n  -ffixed-point           Enable fixed point types\n  -ffixed-r19             Reserve register r19 (Hexagon only)\n  -ffixed-r9              Reserve the r9 register (ARM only)\n  -ffixed-x18             Reserve the x18 register (AArch64 only)\n  -ffixed-x20             Reserve the x20 register (AArch64 only)\n  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization\n  -fforce-enable-int128   Enable support for int128_t type\n  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)\n  -ffreestanding          Assert that the compilation takes place in a freestanding environment\n  -ffunction-sections     Place each function in its own section (ELF Only)\n  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard\n  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime\n  -fgnu89-inline          Use the gnu89 inline semantics\n  -fimplicit-module-maps  Implicitly search the file system for module map files.\n  -finline-functions      Inline suitable functions\n  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline\n  -finstrument-function-entry-bare\n                          Instrument function entry only, after inlining, without arguments to the instrumentation call\n  -finstrument-functions-after-inlining\n                          Like -finstrument-functions, but insert the calls after inlining\n  -finstrument-functions  Generate calls to instrument function entry and exit\n  -fintegrated-as         Enable the integrated assembler\n  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)\n  -flto=<value>           Set LTO mode to either 'full' or 'thin'\n  -flto                   Enable LTO in 'full' mode\n  -fmath-errno            Require math functions to indicate errors by setting errno\n  -fmax-type-align=<value>\n                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment\n  -fmerge-all-constants   Allow merging of constants\n  -fmodule-file=[<name>=]<file>\n                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.\n  -fmodule-map-file=<file>\n                          Load this module map file\n  -fmodule-name=<name>    Specify the name of the module to build\n  -fmodules-cache-path=<directory>\n                          Specify the module cache path\n  -fmodules-decluse       Require declaration of modules used within a module\n  -fmodules-disable-diagnostic-validation\n                          Disable validation of the diagnostic options when loading the module\n  -fmodules-ignore-macro=<value>\n                          Ignore the definition of the given macro when building and loading modules\n  -fmodules-prune-after=<seconds>\n                          Specify the interval (in seconds) after which a module file will be considered unused\n  -fmodules-prune-interval=<seconds>\n                          Specify the interval (in seconds) between attempts to prune the module cache\n  -fmodules-search-all    Search even non-imported modules to resolve references\n  -fmodules-strict-decluse\n                          Like -fmodules-decluse but requires all headers to be in modules\n  -fmodules-ts            Enable support for the C++ Modules TS\n  -fmodules-user-build-path <directory>\n                          Specify the module user build path\n  -fmodules-validate-once-per-build-session\n                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session\n  -fmodules-validate-system-headers\n                          Validate the system headers that a module depends on when loading the module\n  -fmodules               Enable the 'modules' language feature\n  -fms-compatibility-version=<value>\n                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fms-compatibility      Enable full Microsoft Visual C++ compatibility\n  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler\n  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'\n  -fno-access-control     Disable C++ access control\n  -fno-addrsig            Don't emit an address-significance table\n  -fno-apinotes-modules   Disable module-based external API notes support\n  -fno-apinotes           Disable external API notes support\n  -fno-assume-sane-operator-new\n                          Don't assume that C++'s global operator new can't alias any pointer\n  -fno-autolink           Disable generation of linker directives for automatic library linking\n  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function\n  -fno-builtin            Disable implicit builtin knowledge of functions\n  -fno-c++-static-destructors\n                          Disable C++ static destructor registration\n  -fno-char8_t            Disable C++ builtin type char8_t\n  -fno-common             Compile common globals like normal definitions\n  -fno-complete-member-pointers\n                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings\n  -fno-coverage-mapping   Disable code coverage analysis\n  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash\n  -fno-debug-info-for-profiling\n                          Do not emit extra debug info for sample profiler.\n  -fno-debug-macro        Do not emit macro debug information\n  -fno-declspec           Disallow __declspec as a keyword\n  -fno-delayed-template-parsing\n                          Disable delayed template parsing\n  -fno-delete-null-pointer-checks\n                          Do not treat usage of null pointers as undefined behavior.\n  -fno-diagnostics-fixit-info\n                          Do not include fixit information in diagnostics\n  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'\n  -fno-discard-value-names\n                          Do not discard value names in LLVM IR\n  -fno-dollars-in-identifiers\n                          Disallow '$' in identifiers\n  -fno-double-square-bracket-attributes\n                          Disable '[[]]' attributes in all C and C++ language modes\n  -fno-elide-constructors Disable C++ copy constructor elision\n  -fno-elide-type         Do not elide types when printing diagnostics\n  -fno-experimental-isel  Disables the experimental global instruction selector\n  -fno-experimental-new-pass-manager\n                          Disables an experimental new pass manager in LLVM.\n  -fno-fine-grained-bitfield-accesses\n                          Use large-integer access for consecutive bitfield runs.\n  -fno-fixed-point        Disable fixed point types\n  -fno-force-enable-int128\n                          Disable support for int128_t type\n  -fno-gnu-inline-asm     Disable GNU style inline asm\n  -fno-integrated-as      Disable the integrated assembler\n  -fno-jump-tables        Do not use jump tables for lowering switches\n  -fno-lax-vector-conversions\n                          Disallow implicit conversions between vectors with a different number of elements or different element types\n  -fno-lto                Disable LTO mode (default)\n  -fno-merge-all-constants\n                          Disallow merging of constants\n  -fno-objc-infer-related-result-type\n                          do not infer Objective-C related result type based on method family\n  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators\n  -fno-plt                Do not use the PLT to make function calls\n  -fno-preserve-as-comments\n                          Do not preserve comments in inline assembly\n  -fno-profile-generate   Disable generation of profile instrumentation.\n  -fno-profile-instr-generate\n                          Disable generation of profile instrumentation.\n  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization\n  -fno-register-global-dtors-with-atexit\n                          Don't use atexit or __cxa_atexit to register global destructors\n  -fno-reroll-loops       Turn off loop reroller\n  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags\n  -fno-rtti-data          Control emission of RTTI data\n  -fno-rtti               Disable generation of rtti information\n  -fno-sanitize-address-poison-class-member-array-new-cookie\n                          Disable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fno-sanitize-address-use-after-scope\n                          Disable use-after-scope detection in AddressSanitizer\n  -fno-sanitize-blacklist Don't use blacklist file for sanitizers\n  -fno-sanitize-cfi-cross-dso\n                          Disable control flow integrity (CFI) checks for cross-DSO calls.\n  -fno-sanitize-coverage=<value>\n                          Disable specified features of coverage instrumentation for Sanitizers\n  -fno-sanitize-memory-track-origins\n                          Disable origins tracking in MemorySanitizer\n  -fno-sanitize-memory-use-after-dtor\n                          Disable use-after-destroy detection in MemorySanitizer\n  -fno-sanitize-recover=<value>\n                          Disable recovery for specified sanitizers\n  -fno-sanitize-stats     Disable sanitizer statistics gathering.\n  -fno-sanitize-thread-atomics\n                          Disable atomic operations instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-func-entry-exit\n                          Disable function entry/exit instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-memory-access\n                          Disable memory access instrumentation in ThreadSanitizer\n  -fno-sanitize-trap=<value>\n                          Disable trapping for specified sanitizers\n  -fno-short-wchar        Force wchar_t to be an unsigned int\n  -fno-show-column        Do not include column number on diagnostics\n  -fno-show-source-location\n                          Do not include source location information with diagnostics\n  -fno-signed-char        Char is unsigned\n  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros\n  -fno-spell-checking     Disable spell-checking\n  -fno-stack-check        Disable stack checking\n  -fno-stack-protector    Disable the use of stack protectors\n  -fno-stack-size-section Don't emit section containing metadata on function stack sizes\n  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary\n  -fno-strict-float-cast-overflow\n                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions\n  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe\n  -fno-trigraphs          Do not process trigraph sequences\n  -fno-unroll-loops       Turn off loop unroller\n  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors\n  -fno-use-init-array     Don't use .init_array instead of .ctors\n  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc\n  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers\n  -fobjc-exceptions       Enable Objective-C exceptions\n  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version\n  -fobjc-weak             Enable ARC-style weak references in Objective-C\n  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.\n  -fopenmp-targets=<value>\n                          Specify comma-separated list of triples OpenMP offloading targets to be supported\n  -fopenmp                Parse OpenMP pragmas and generate parallel code.\n  -foptimization-record-file=<value>\n                          Specify the file name of any generated YAML optimization record\n  -fpack-struct=<value>   Specify the default maximum struct packing alignment\n  -fpascal-strings        Recognize and construct Pascal-style string literals\n  -fpcc-struct-return     Override the default ABI to return all structs on the stack\n  -fplt                   Use the PLT to make function calls\n  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)\n  -fprebuilt-module-path=<directory>\n                          Specify the prebuilt module path\n  -fprofile-generate=<directory>\n                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate=<file>\n                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate\n                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)\n  -fprofile-instr-use=<value>\n                          Use instrumentation data for profile-guided optimization\n  -fprofile-sample-accurate\n                          Specifies that the sample profile is accurate\n  -fprofile-sample-use=<value>\n                          Enable sample-based profile guided optimizations\n  -fprofile-use=<pathname>\n                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.\n  -fptrauth-calls         Enable signing and authentication of all indirect calls\n  -fptrauth-intrinsics    Enable pointer-authentication intrinsics\n  -fptrauth-returns       Enable signing and authentication of return addresses\n  -fptrauth-soft          Enable software lowering of pointer authentication\n  -freciprocal-math       Allow division operations to be reassociated\n  -freg-struct-return     Override the default ABI to return small structs in registers\n  -fregister-global-dtors-with-atexit\n                          Use atexit or __cxa_atexit to register global destructors\n  -frelaxed-template-template-args\n                          Enable C++17 relaxed template template argument matching\n  -freroll-loops          Turn on loop reroller\n  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags\n  -fsanitize-address-field-padding=<value>\n                          Level of field padding for AddressSanitizer\n  -fsanitize-address-globals-dead-stripping\n                          Enable linker dead stripping of globals in AddressSanitizer\n  -fsanitize-address-poison-class-member-array-new-cookie\n                          Enable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fsanitize-address-use-after-scope\n                          Enable use-after-scope detection in AddressSanitizer\n  -fsanitize-blacklist=<value>\n                          Path to blacklist file for sanitizers\n  -fsanitize-cfi-cross-dso\n                          Enable control flow integrity (CFI) checks for cross-DSO calls.\n  -fsanitize-cfi-icall-generalize-pointers\n                          Generalize pointers in CFI indirect call type signature checks\n  -fsanitize-coverage=<value>\n                          Specify the type of coverage instrumentation for Sanitizers\n  -fsanitize-memory-track-origins=<value>\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-track-origins\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-use-after-dtor\n                          Enable use-after-destroy detection in MemorySanitizer\n  -fsanitize-recover=<value>\n                          Enable recovery for specified sanitizers\n  -fsanitize-stats        Enable sanitizer statistics gathering.\n  -fsanitize-thread-atomics\n                          Enable atomic operations instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-func-entry-exit\n                          Enable function entry/exit instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-memory-access\n                          Enable memory access instrumentation in ThreadSanitizer (default)\n  -fsanitize-trap=<value> Enable trapping for specified sanitizers\n  -fsanitize-undefined-strip-path-components=<number>\n                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.\n  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks\n  -fsave-optimization-record\n                          Generate a YAML optimization record file\n  -fseh-exceptions        Use SEH style exceptions\n  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values\n  -fshort-wchar           Force wchar_t to be a short unsigned int\n  -fshow-overloads=<value>\n                          Which overload candidates to show when overload resolution fails: best|all; defaults to all\n  -fsized-deallocation    Enable C++14 sized global deallocation functions\n  -fsjlj-exceptions       Use SjLj style exceptions\n  -fslp-vectorize         Enable the superword-level parallelism vectorization passes\n  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n  -fstack-check           Enable stack checking\n  -fstack-protector-all   Force the usage of stack protectors for all functions\n  -fstack-protector-strong\n                          Use a strong heuristic to apply stack protectors to functions\n  -fstack-protector       Enable stack protectors for functions potentially vulnerable to stack smashing\n  -fstack-size-section    Emit section containing metadata on function stack sizes\n  -fstandalone-debug      Emit full debug info for all types used by the program\n  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range\n  -fstrict-float-cast-overflow\n                          Assume that overflowing float-to-int casts are undefined (default)\n  -fstrict-return         Always treat control flow paths that fall off the end of a non-void function as unreachable\n  -fstrict-vtable-pointers\n                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects\n  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index\n  -ftrap-function=<value> Issue call to specified function rather than a trap instruction\n  -ftrapv-handler=<function name>\n                          Specify the function to be called on overflow\n  -ftrapv                 Trap on integer overflow\n  -ftrigraphs             Process trigraph sequences\n  -ftrivial-auto-var-init=<value>\n                          Initialize trivial automatic stack variables: uninitialized (default) | pattern\n  -funique-section-names  Use unique names for text and data sections (ELF Only)\n  -funroll-loops          Turn on loop unroller\n  -fuse-init-array        Use .init_array instead of .ctors\n  -fveclib=<value>        Use the given vector functions library\n  -fvectorize             Enable the loop vectorization passes\n  -fvisibility-inlines-hidden\n                          Give inline C++ member functions hidden visibility by default\n  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default\n  -fvisibility=<value>    Set the default symbol visibility for all global declarations\n  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto\n  -fwrapv                 Treat signed integer overflow as two's complement\n  -fwritable-strings      Store string literals as writable data\n  -fxray-always-emit-customevents\n                          Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-emit-typedevents\n                          Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-instrument= <value>\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.\n  -fxray-attr-list= <value>\n                          Filename defining the list of functions/types for imbuing XRay attributes.\n  -fxray-instruction-threshold= <value>\n                          Sets the minimum function size to instrument with XRay\n  -fxray-instrumentation-bundle= <value>\n                          Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is 'all'.\n  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit\n  -fxray-link-deps        Tells clang to add the link dependencies for XRay.\n  -fxray-modes= <value>   List of modes to link in by default into XRay instrumented binaries.\n  -fxray-never-instrument= <value>\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.\n  -fzvector               Enable System z vector language extension\n  -F <value>              Add directory to framework include search path\n  --gcc-toolchain=<value> Use the gcc toolchain at the given directory\n  -gcodeview              Generate CodeView debug information\n  -gdwarf-2               Generate source-level debug information with dwarf version 2\n  -gdwarf-3               Generate source-level debug information with dwarf version 3\n  -gdwarf-4               Generate source-level debug information with dwarf version 4\n  -gdwarf-5               Generate source-level debug information with dwarf version 5\n  -gembed-source          Embed source text in DWARF debug sections\n  -gline-tables-only      Emit debug line number tables only\n  -gmodules               Generate debug info with external references to clang modules or precompiled headers\n  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections\n  -gz=<value>             DWARF debug sections compression type\n  -gz                     DWARF debug sections compression type\n  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)\n  -g                      Generate source-level debug information\n  --help-hidden           Display help for hidden options\n  -help                   Display available options\n  --hip-device-lib-path=<value>\n                          HIP device library path\n  --hip-device-lib=<value>\n                          HIP device library\n  --hip-link              Link clang-offload-bundler bundles for HIP\n  -H                      Show header includes and nesting depth\n  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path\n  -iapinotes-modules <directory>\n                          Add directory to the API notes search path referenced by module name\n  -idirafter <value>      Add directory to AFTER include search path\n  -iframeworkwithsysroot <directory>\n                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot\n  -iframework <value>     Add directory to SYSTEM framework search path\n  -imacros <file>         Include macros from file before parsing\n  -include-pch <file>     Include precompiled header file\n  -include <file>         Include file before parsing\n  -index-header-map       Make the next included directory (-I or -F) an indexer header map\n  -index-ignore-system-symbols\n                          Ignore symbols from system headers\n  -index-record-codegen-name\n                          Record the codegen name for symbols\n  -index-store-path <value>\n                          Enable indexing with the specified data store path\n  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix\n  -iquote <directory>     Add directory to QUOTE include search path\n  -isysroot <dir>         Set the system root directory (usually /)\n  -isystem-after <directory>\n                          Add directory to end of the SYSTEM include search path\n  -isystem <directory>    Add directory to SYSTEM include search path\n  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system\n  -iwithprefixbefore <dir>\n                          Set directory to include search path with prefix\n  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix\n  -iwithsysroot <directory>\n                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot\n  -I <dir>                Add directory to include search path\n  -L <dir>                Add directory to library search path\n  -mabicalls              Enable SVR4-style position-independent code (Mips only)\n  -malign-double          Align doubles to two words in structs (x86 only)\n  -mbackchain             Link stack frames through backchain on System Z\n  -mcrc                   Allow use of CRC instructions (ARM/Mips only)\n  -MD                     Write a depfile containing user and system headers\n  -meabi <value>          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)\n  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)\n  -mexecute-only          Disallow generation of data access to code sections (ARM only)\n  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n  -mfentry                Insert calls to fentry at function entry (x86 only)\n  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mfp32                  Use 32-bit floating point registers (MIPS only)\n  -mfp64                  Use 64-bit floating point registers (MIPS only)\n  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>\n  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64 only)\n  -mglobal-merge          Enable merging of globals\n  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -MG                     Add missing headers to depfile\n  -mhvx-length=<value>    Set Hexagon Vector Length\n  -mhvx=<value>           Enable Hexagon Vector eXtensions\n  -mhvx                   Enable Hexagon Vector eXtensions\n  -miamcu                 Use Intel MCU ABI\n  --migrate               Run the migrator\n  -mincremental-linker-compatible\n                          (integrated-as) Emit an object file which can be used with an incremental linker\n  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation\n  -mios-version-min=<value>\n                          Set iOS deployment target\n  -MJ <value>             Write a compilation database entry per input\n  -mllvm <value>          Additional arguments to forward to LLVM's option processing\n  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)\n  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.\n  -mmacosx-version-min=<value>\n                          Set Mac OS X deployment target\n  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.\n  -MMD                    Write a depfile containing user headers\n  -mmemops                Enable generation of memop instructions\n  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard\n  -mmsa                   Enable MSA ASE (MIPS only)\n  -mmt                    Enable MT ASE (MIPS only)\n  -MM                     Like -MMD, but also implies -E and writes to stdout by default\n  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)\n  -mno-crc                Disallow use of CRC instructions (Mips only)\n  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)\n  -mno-execute-only       Allow generation of data access to code sections (ARM only)\n  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n  -mno-fix-cortex-a53-835769\n                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mno-global-merge       Disable merging of globals\n  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -mno-hvx                Disable Hexagon Vector eXtensions\n  -mno-implicit-float     Don't generate implicit floating point instructions\n  -mno-incremental-linker-compatible\n                          (integrated-as) Emit an object file which cannot be used with an incremental linker\n  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)\n  -mno-long-calls         Restore the default behaviour of not generating long calls\n  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.\n  -mno-memops             Disable generation of memop instructions\n  -mno-movt               Disallow use of movt/movw pairs (ARM only)\n  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard\n  -mno-msa                Disable MSA ASE (MIPS only)\n  -mno-mt                 Disable MT ASE (MIPS only)\n  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.\n  -mno-nvj                Disable generation of new-value jumps\n  -mno-nvs                Disable generation of new-value stores\n  -mno-outline            Disable function outlining (AArch64 only)\n  -mno-packets            Disable generation of instruction packets\n  -mno-relax              Disable linker relaxation\n  -mno-restrict-it        Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode\n  -mno-stack-arg-probe    Disable stack probes which are enabled by default\n  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)\n  -mno-xnack              Disable XNACK (AMDGPU only)\n  -mnocrc                 Disallow use of CRC instructions (ARM only)\n  -mnvj                   Enable generation of new-value jumps\n  -mnvs                   Enable generation of new-value stores\n  -module-dependency-dir <value>\n                          Directory to dump module dependencies to\n  -module-file-info       Provide information about a particular module file\n  -momit-leaf-frame-pointer\n                          Omit frame pointer setup for leaf functions\n  -moutline               Enable function outlining (AArch64 only)\n  -mpackets               Enable generation of instruction packets\n  -mpie-copy-relocations  Use copy relocations support for PIE builds\n  -mprefer-vector-width=<value>\n                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.\n  -MP                     Create phony target for each dependency (other than main file)\n  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility\n  -MQ <value>             Specify name of main file output to quote in depfile\n  -mrelax-all             (integrated-as) Relax all machine instructions\n  -mrelax                 Enable linker relaxation\n  -mrestrict-it           Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.\n  -mrtd                   Make StdCall calling convention the default\n  -msoft-float            Use software floating point\n  -mstack-alignment=<value>\n                          Set the stack alignment\n  -mstack-arg-probe       Enable stack probes\n  -mstack-probe-size=<value>\n                          Set the stack probe size\n  -mstackrealign          Force realign the stack at entry to every function\n  -mthread-model <value>  The thread model to use, e.g. posix, single (posix by default)\n  -mtp=<value>            Read thread pointer from coprocessor register (ARM only)\n  -MT <value>             Specify name of main file output in depfile\n  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)\n  -MV                     Use NMake/Jom format for the depfile\n  -mxnack                 Enable XNACK (AMDGPU only)\n  -M                      Like -MD, but also implies -E and writes to stdout by default\n  --no-cuda-gpu-arch=<value>\n                          Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. 'all' resets the list to its default value.\n  --no-cuda-include-ptx=<value>\n                          Do not include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.\n  --no-system-header-prefix=<prefix>\n                          Treat all #include paths starting with <prefix> as not including a system header.\n  -nobuiltininc           Disable builtin #include directories\n  -nostdinc++             Disable standard #include directories for the C++ standard library\n  -ObjC++                 Treat source input files as Objective-C++ inputs\n  -objcmt-atomic-property Make migration to 'atomic' properties\n  -objcmt-migrate-all     Enable migration to modern ObjC\n  -objcmt-migrate-annotation\n                          Enable migration to property and method annotations\n  -objcmt-migrate-designated-init\n                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods\n  -objcmt-migrate-instancetype\n                          Enable migration to infer instancetype for method result type\n  -objcmt-migrate-literals\n                          Enable migration to modern ObjC literals\n  -objcmt-migrate-ns-macros\n                          Enable migration to NS_ENUM/NS_OPTIONS macros\n  -objcmt-migrate-property-dot-syntax\n                          Enable migration of setter/getter messages to property-dot syntax\n  -objcmt-migrate-property\n                          Enable migration to modern ObjC property\n  -objcmt-migrate-protocol-conformance\n                          Enable migration to add protocol conformance on classes\n  -objcmt-migrate-readonly-property\n                          Enable migration to modern ObjC readonly property\n  -objcmt-migrate-readwrite-property\n                          Enable migration to modern ObjC readwrite property\n  -objcmt-migrate-subscripting\n                          Enable migration to modern ObjC subscripting\n  -objcmt-ns-nonatomic-iosonly\n                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute\n  -objcmt-returns-innerpointer-property\n                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER\n  -objcmt-whitelist-dir-path=<value>\n                          Only modify files with a filename contained in the provided directory path\n  -ObjC                   Treat source input files as Objective-C inputs\n  -o <file>               Write output to <file>\n  -pg                     Enable mcount instrumentation\n  -pipe                   Use pipes between commands, when possible\n  --precompile            Only precompile the input\n  -print-file-name=<file> Print the full library path of <file>\n  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace\n  -print-libgcc-file-name Print the library path for the currently used compiler runtime library (\"libgcc.a\" or \"libclang_rt.builtins.*.a\")\n  -print-prog-name=<name> Print the full program path of <name>\n  -print-resource-dir     Print the resource directory pathname\n  -print-search-dirs      Print the paths used for finding libraries and programs\n  -pthread                Support POSIX threads in generated code\n  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)\n  -P                      Disable linemarker output in -E mode\n  -Qn                     Do not emit metadata containing compiler name and version\n  -Qunused-arguments      Don't emit warning for unused driver arguments\n  -Qy                     Emit metadata containing compiler name and version\n  -relocatable-pch        Whether to build a relocatable precompiled header\n  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++\n  -rewrite-objc           Rewrite Objective-C source to C++\n  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression\n  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression\n  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression\n  -rtlib=<value>          Compiler runtime library to use\n  -R<remark>              Enable the specified remark\n  -save-stats=<value>     Save llvm statistics.\n  -save-stats             Save llvm statistics.\n  -save-temps=<value>     Save intermediate compilation results.\n  -save-temps             Save intermediate compilation results\n  -serialize-diagnostics <value>\n                          Serialize compiler diagnostics to a file\n  -std=<value>            Language standard to compile for\n  -stdlib=<value>         C++ standard library to use\n  --system-header-prefix=<prefix>\n                          Treat all #include paths starting with <prefix> as including a system header.\n  -S                      Only run preprocess and compilation steps\n  -target-variant <value> Generate code that may run on a particular variant of the deployment target\n  --target=<value>        Generate code for the given target\n  -Tbss <addr>            Set starting address of BSS to <addr>\n  -Tdata <addr>           Set starting address of DATA to <addr>\n  -time                   Time individual commands\n  -traditional-cpp        Enable some traditional CPP emulation\n  -trigraphs              Process trigraph sequences\n  -Ttext <addr>           Set starting address of TEXT to <addr>\n  -T <script>             Specify <script> as linker script\n  -undef                  undef all system defines\n  -U <macro>              Undefine macro <macro>\n  --verify-debug-info     Verify the binary representation of debug output\n  -verify-pch             Load and verify that a pre-compiled header file is not stale\n  --version               Print version information\n  -v                      Show commands to run and use verbose output\n  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler\n  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED\n  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker\n  -working-directory <value>\n                          Resolve file paths relative to the specified directory\n  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor\n  -W<warning>             Enable the specified warning\n  -w                      Suppress all warnings\n  -Xanalyzer <arg>        Pass <arg> to the static analyzer\n  -Xassembler <arg>       Pass <arg> to the assembler\n  -Xclang <arg>           Pass <arg> to the clang compiler\n  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation\n  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler\n  -Xlinker <arg>          Pass <arg> to the linker\n  -Xopenmp-target=<triple> <arg>\n                          Pass <arg> to the target offloading toolchain identified by <triple>.\n  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.\n  -Xpreprocessor <arg>    Pass <arg> to the preprocessor\n  -x <language>           Treat subsequent input files as having type <language>\n  -z <arg>                Pass -z <arg> to the linker\n```","slug":"iOS学习笔记/iOS系统学习/iOS之编程语言/C:C++ Catalog/g++","published":1,"date":"2019-08-13T08:56:15.000Z","updated":"2019-08-13T08:56:15.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cklgpvgk8002i8n7u6gfp7f6t","content":"<p>MacBook-P:~ sumian$ g++ –help</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OVERVIEW: clang LLVM compiler</span><br><span class=\"line\"></span><br><span class=\"line\">USAGE: clang [options] &lt;inputs&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS:</span><br><span class=\"line\"><span class=\"meta\">  -#</span><span class=\"bash\"><span class=\"comment\">##                    Print (but do not run) the commands to run for this compilation</span></span></span><br><span class=\"line\">  --analyzer-output &lt;value&gt;</span><br><span class=\"line\">                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).</span><br><span class=\"line\">  --analyze               Run the static analyzer</span><br><span class=\"line\">  -arcmt-migrate-emit-errors</span><br><span class=\"line\">                          Emit ARC errors even if the migrator can fix them</span><br><span class=\"line\">  -arcmt-migrate-report-output &lt;value&gt;</span><br><span class=\"line\">                          Output path for the plist report</span><br><span class=\"line\">  -B &lt;dir&gt;                Add &lt;dir&gt; to search path for binaries and object files used implicitly</span><br><span class=\"line\">  -CC                     Include comments from within macros in preprocessed output</span><br><span class=\"line\">  -cfguard                Emit tables required for Windows Control Flow Guard.</span><br><span class=\"line\">  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.</span><br><span class=\"line\">  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.</span><br><span class=\"line\">  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.</span><br><span class=\"line\">  -cl-fp32-correctly-rounded-divide-sqrt</span><br><span class=\"line\">                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.</span><br><span class=\"line\">  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.</span><br><span class=\"line\">  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.</span><br><span class=\"line\">  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.</span><br><span class=\"line\">  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.</span><br><span class=\"line\">  -cl-single-precision-constant</span><br><span class=\"line\">                          OpenCL only. Treat double precision floating-point constant as single precision constant.</span><br><span class=\"line\">  -cl-std=&lt;value&gt;         OpenCL language standard to compile for.</span><br><span class=\"line\">  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.</span><br><span class=\"line\">  -cl-uniform-work-group-size</span><br><span class=\"line\">                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel</span><br><span class=\"line\">  -cl-unsafe-math-optimizations</span><br><span class=\"line\">                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.</span><br><span class=\"line\">  --config &lt;value&gt;        Specifies configuration file</span><br><span class=\"line\">  --cuda-compile-host-device</span><br><span class=\"line\">                          Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.</span><br><span class=\"line\">  --cuda-device-only      Compile CUDA code for device only</span><br><span class=\"line\">  --cuda-gpu-arch=&lt;value&gt; CUDA GPU architecture (e.g. sm_35).  May be specified more than once.</span><br><span class=\"line\">  --cuda-host-only        Compile CUDA code for host only.  Has no effect on non-CUDA compilations.</span><br><span class=\"line\">  --cuda-include-ptx=&lt;value&gt;</span><br><span class=\"line\">                          Include PTX for the follwing GPU architecture (e.g. sm_35) or &#x27;all&#x27;. May be specified more than once.</span><br><span class=\"line\">  --cuda-noopt-device-debug</span><br><span class=\"line\">                          Enable device-side debug info generation. Disables ptxas optimizations.</span><br><span class=\"line\">  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation</span><br><span class=\"line\">  --cuda-path=&lt;value&gt;     CUDA installation path</span><br><span class=\"line\">  -cxx-isystem &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to the C++ SYSTEM include search path</span><br><span class=\"line\">  -C                      Include comments in preprocessed output</span><br><span class=\"line\">  -c                      Only run preprocess, compile, and assemble steps</span><br><span class=\"line\">  -dD                     Print macro definitions in -E mode in addition to normal output</span><br><span class=\"line\">  -dependency-dot &lt;value&gt; Filename to write DOT-formatted header dependencies to</span><br><span class=\"line\">  -dependency-file &lt;value&gt;</span><br><span class=\"line\">                          Filename (or -) to write dependency output to</span><br><span class=\"line\">  -dI                     Print include directives in -E mode in addition to normal output</span><br><span class=\"line\">  -dM                     Print macro definitions in -E mode instead of normal output</span><br><span class=\"line\">  -D &lt;macro&gt;=&lt;value&gt;      Define &lt;macro&gt; to &lt;value&gt; (or 1 if &lt;value&gt; omitted)</span><br><span class=\"line\">  -emit-ast               Emit Clang AST files for source inputs</span><br><span class=\"line\">  -emit-llvm              Use the LLVM representation for assembler and object files</span><br><span class=\"line\">  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang&lt;value&gt;</span><br><span class=\"line\">                          Trivial automatic variable initialization to zero is only here for benchmarks, it&#x27;ll eventually be removed, and I&#x27;m OK with that because I&#x27;m only using it to benchmark</span><br><span class=\"line\">  -E                      Only run the preprocessor</span><br><span class=\"line\">  -faddrsig               Emit an address-significance table</span><br><span class=\"line\">  -faligned-allocation    Enable C++17 aligned allocation functions</span><br><span class=\"line\">  -fallow-editor-placeholders</span><br><span class=\"line\">                          Treat editor placeholders as valid source code</span><br><span class=\"line\">  -fansi-escape-codes     Use ANSI escape codes for diagnostics</span><br><span class=\"line\">  -fapinotes-cache-path=&lt;directory&gt;</span><br><span class=\"line\">                          Does nothing; API notes are no longer cached separately from modules</span><br><span class=\"line\">  -fapinotes-modules      Enable module-based external API notes support</span><br><span class=\"line\">  -fapinotes-swift-version=&lt;version&gt;</span><br><span class=\"line\">                          Specify the Swift version to use when filtering API notes</span><br><span class=\"line\">  -fapinotes              Enable external API notes support</span><br><span class=\"line\">  -fapple-kext            Use Apple&#x27;s kernel extensions ABI</span><br><span class=\"line\">  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling</span><br><span class=\"line\">  -fapplication-extension Restrict code to those available for App Extensions</span><br><span class=\"line\">  -fblocks                Enable the &#x27;blocks&#x27; language feature</span><br><span class=\"line\">  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler</span><br><span class=\"line\">  -fbuild-session-file=&lt;file&gt;</span><br><span class=\"line\">                          Use the last modification time of &lt;file&gt; as the build session timestamp</span><br><span class=\"line\">  -fbuild-session-timestamp=&lt;time since Epoch in seconds&gt;</span><br><span class=\"line\">                          Time when the current build session started</span><br><span class=\"line\">  -fbuiltin-module-map    Load the clang builtins module map file.</span><br><span class=\"line\">  -fc++-static-destructors</span><br><span class=\"line\">                          Enable C++ static destructor registration (the default)</span><br><span class=\"line\">  -fcf-protection=&lt;value&gt; Instrument control-flow architecture protection. Options: return, branch, full, none.</span><br><span class=\"line\">  -fcf-protection         Enable cf-protection in &#x27;full&#x27; mode</span><br><span class=\"line\">  -fchar8_t               Enable C++ builtin type char8_t</span><br><span class=\"line\">  -fclang-abi-compat=&lt;version&gt;</span><br><span class=\"line\">                          Attempt to match the ABI of Clang &lt;version&gt;</span><br><span class=\"line\">  -fcolor-diagnostics     Use colors in diagnostics</span><br><span class=\"line\">  -fcomment-block-commands=&lt;arg&gt;</span><br><span class=\"line\">                          Treat each comma separated argument in &lt;arg&gt; as a documentation comment block command</span><br><span class=\"line\">  -fcomplete-member-pointers</span><br><span class=\"line\">                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI</span><br><span class=\"line\">  -fcoroutines-ts         Enable support for the C++ Coroutines TS</span><br><span class=\"line\">  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis</span><br><span class=\"line\">  -fcuda-approx-transcendentals</span><br><span class=\"line\">                          Use approximate transcendental functions</span><br><span class=\"line\">  -fcuda-flush-denormals-to-zero</span><br><span class=\"line\">                          Flush denormal floating point values to zero in CUDA device mode.</span><br><span class=\"line\">  -fcuda-rdc              Generate relocatable device code, also known as separate compilation mode.</span><br><span class=\"line\">  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces.</span><br><span class=\"line\">  -fcxx-exceptions        Enable C++ exceptions</span><br><span class=\"line\">  -fdata-sections         Place each data in its own section (ELF Only)</span><br><span class=\"line\">  -fdebug-info-for-profiling</span><br><span class=\"line\">                          Emit extra debug info to make sample profile more accurate.</span><br><span class=\"line\">  -fdebug-macro           Emit macro debug information</span><br><span class=\"line\">  -fdebug-prefix-map=&lt;value&gt;</span><br><span class=\"line\">                          remap file source paths in debug info</span><br><span class=\"line\">  -fdebug-types-section   Place debug types in their own section (ELF Only)</span><br><span class=\"line\">  -fdeclspec              Allow __declspec as a keyword</span><br><span class=\"line\">  -fdelayed-template-parsing</span><br><span class=\"line\">                          Parse templated function definitions at the end of the translation unit</span><br><span class=\"line\">  -fdelete-null-pointer-checks</span><br><span class=\"line\">                          Treat usage of null pointers as undefined behavior.</span><br><span class=\"line\">  -fdiagnostics-absolute-paths</span><br><span class=\"line\">                          Print absolute paths in diagnostics</span><br><span class=\"line\">  -fdiagnostics-hotness-threshold=&lt;number&gt;</span><br><span class=\"line\">                          Prevent optimization remarks from being output if they do not have at least this profile count</span><br><span class=\"line\">  -fdiagnostics-parseable-fixits</span><br><span class=\"line\">                          Print fix-its in machine parseable form</span><br><span class=\"line\">  -fdiagnostics-print-source-range-info</span><br><span class=\"line\">                          Print source range spans in numeric form</span><br><span class=\"line\">  -fdiagnostics-show-hotness</span><br><span class=\"line\">                          Enable profile hotness information in diagnostic line</span><br><span class=\"line\">  -fdiagnostics-show-note-include-stack</span><br><span class=\"line\">                          Display include stacks for diagnostic notes</span><br><span class=\"line\">  -fdiagnostics-show-option</span><br><span class=\"line\">                          Print option name with mappable diagnostics</span><br><span class=\"line\">  -fdiagnostics-show-template-tree</span><br><span class=\"line\">                          Print a template comparison tree for differing templates</span><br><span class=\"line\">  -fdigraphs              Enable alternative token representations &#x27;&lt;:&#x27;, &#x27;:&gt;&#x27;, &#x27;&lt;%&#x27;, &#x27;%&gt;&#x27;, &#x27;%:&#x27;, &#x27;%:%:&#x27; (default)</span><br><span class=\"line\">  -fdiscard-value-names   Discard value names in LLVM IR</span><br><span class=\"line\">  -fdollars-in-identifiers</span><br><span class=\"line\">                          Allow &#x27;$&#x27; in identifiers</span><br><span class=\"line\">  -fdouble-square-bracket-attributes</span><br><span class=\"line\">                          Enable &#x27;[[]]&#x27; attributes in all C and C++ language modes</span><br><span class=\"line\">  -fdwarf-exceptions      Use DWARF style exceptions</span><br><span class=\"line\">  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker</span><br><span class=\"line\">  -fembed-bitcode=&lt;option&gt;</span><br><span class=\"line\">                          Embed LLVM bitcode (option: off, all, bitcode, marker)</span><br><span class=\"line\">  -fembed-bitcode         Embed LLVM IR bitcode as data</span><br><span class=\"line\">  -femit-all-decls        Emit all declarations, even if unused</span><br><span class=\"line\">  -femulated-tls          Use emutls functions to access thread_local variables</span><br><span class=\"line\">  -fenable-matrix         Enable matrix data type and related builtin functions</span><br><span class=\"line\">  -fexceptions            Enable support for exception handling</span><br><span class=\"line\">  -fexperimental-isel     Enables the experimental global instruction selector</span><br><span class=\"line\">  -fexperimental-new-pass-manager</span><br><span class=\"line\">                          Enables an experimental new pass manager in LLVM.</span><br><span class=\"line\">  -ffast-math             Allow aggressive, lossy floating-point optimizations</span><br><span class=\"line\">  -ffine-grained-bitfield-accesses</span><br><span class=\"line\">                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.</span><br><span class=\"line\">  -ffixed-point           Enable fixed point types</span><br><span class=\"line\">  -ffixed-r19             Reserve register r19 (Hexagon only)</span><br><span class=\"line\">  -ffixed-r9              Reserve the r9 register (ARM only)</span><br><span class=\"line\">  -ffixed-x18             Reserve the x18 register (AArch64 only)</span><br><span class=\"line\">  -ffixed-x20             Reserve the x20 register (AArch64 only)</span><br><span class=\"line\">  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization</span><br><span class=\"line\">  -fforce-enable-int128   Enable support for int128_t type</span><br><span class=\"line\">  -ffp-contract=&lt;value&gt;   Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)</span><br><span class=\"line\">  -ffreestanding          Assert that the compilation takes place in a freestanding environment</span><br><span class=\"line\">  -ffunction-sections     Place each function in its own section (ELF Only)</span><br><span class=\"line\">  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard</span><br><span class=\"line\">  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime</span><br><span class=\"line\">  -fgnu89-inline          Use the gnu89 inline semantics</span><br><span class=\"line\">  -fimplicit-module-maps  Implicitly search the file system for module map files.</span><br><span class=\"line\">  -finline-functions      Inline suitable functions</span><br><span class=\"line\">  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline</span><br><span class=\"line\">  -finstrument-function-entry-bare</span><br><span class=\"line\">                          Instrument function entry only, after inlining, without arguments to the instrumentation call</span><br><span class=\"line\">  -finstrument-functions-after-inlining</span><br><span class=\"line\">                          Like -finstrument-functions, but insert the calls after inlining</span><br><span class=\"line\">  -finstrument-functions  Generate calls to instrument function entry and exit</span><br><span class=\"line\">  -fintegrated-as         Enable the integrated assembler</span><br><span class=\"line\">  -flto-jobs=&lt;value&gt;      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)</span><br><span class=\"line\">  -flto=&lt;value&gt;           Set LTO mode to either &#x27;full&#x27; or &#x27;thin&#x27;</span><br><span class=\"line\">  -flto                   Enable LTO in &#x27;full&#x27; mode</span><br><span class=\"line\">  -fmath-errno            Require math functions to indicate errors by setting errno</span><br><span class=\"line\">  -fmax-type-align=&lt;value&gt;</span><br><span class=\"line\">                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment</span><br><span class=\"line\">  -fmerge-all-constants   Allow merging of constants</span><br><span class=\"line\">  -fmodule-file=[&lt;name&gt;=]&lt;file&gt;</span><br><span class=\"line\">                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.</span><br><span class=\"line\">  -fmodule-map-file=&lt;file&gt;</span><br><span class=\"line\">                          Load this module map file</span><br><span class=\"line\">  -fmodule-name=&lt;name&gt;    Specify the name of the module to build</span><br><span class=\"line\">  -fmodules-cache-path=&lt;directory&gt;</span><br><span class=\"line\">                          Specify the module cache path</span><br><span class=\"line\">  -fmodules-decluse       Require declaration of modules used within a module</span><br><span class=\"line\">  -fmodules-disable-diagnostic-validation</span><br><span class=\"line\">                          Disable validation of the diagnostic options when loading the module</span><br><span class=\"line\">  -fmodules-ignore-macro=&lt;value&gt;</span><br><span class=\"line\">                          Ignore the definition of the given macro when building and loading modules</span><br><span class=\"line\">  -fmodules-prune-after=&lt;seconds&gt;</span><br><span class=\"line\">                          Specify the interval (in seconds) after which a module file will be considered unused</span><br><span class=\"line\">  -fmodules-prune-interval=&lt;seconds&gt;</span><br><span class=\"line\">                          Specify the interval (in seconds) between attempts to prune the module cache</span><br><span class=\"line\">  -fmodules-search-all    Search even non-imported modules to resolve references</span><br><span class=\"line\">  -fmodules-strict-decluse</span><br><span class=\"line\">                          Like -fmodules-decluse but requires all headers to be in modules</span><br><span class=\"line\">  -fmodules-ts            Enable support for the C++ Modules TS</span><br><span class=\"line\">  -fmodules-user-build-path &lt;directory&gt;</span><br><span class=\"line\">                          Specify the module user build path</span><br><span class=\"line\">  -fmodules-validate-once-per-build-session</span><br><span class=\"line\">                          Don&#x27;t verify input files for the modules if the module has been successfully validated or loaded during this build session</span><br><span class=\"line\">  -fmodules-validate-system-headers</span><br><span class=\"line\">                          Validate the system headers that a module depends on when loading the module</span><br><span class=\"line\">  -fmodules               Enable the &#x27;modules&#x27; language feature</span><br><span class=\"line\">  -fms-compatibility-version=&lt;value&gt;</span><br><span class=\"line\">                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don&#x27;t define it (default))</span><br><span class=\"line\">  -fms-compatibility      Enable full Microsoft Visual C++ compatibility</span><br><span class=\"line\">  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler</span><br><span class=\"line\">  -fmsc-version=&lt;value&gt;   Microsoft compiler version number to report in _MSC_VER (0 = don&#x27;t define it (default))</span><br><span class=\"line\">  -fnew-alignment=&lt;align&gt; Specifies the largest alignment guaranteed by &#x27;::operator new(size_t)&#x27;</span><br><span class=\"line\">  -fno-access-control     Disable C++ access control</span><br><span class=\"line\">  -fno-addrsig            Don&#x27;t emit an address-significance table</span><br><span class=\"line\">  -fno-apinotes-modules   Disable module-based external API notes support</span><br><span class=\"line\">  -fno-apinotes           Disable external API notes support</span><br><span class=\"line\">  -fno-assume-sane-operator-new</span><br><span class=\"line\">                          Don&#x27;t assume that C++&#x27;s global operator new can&#x27;t alias any pointer</span><br><span class=\"line\">  -fno-autolink           Disable generation of linker directives for automatic library linking</span><br><span class=\"line\">  -fno-builtin-&lt;value&gt;    Disable implicit builtin knowledge of a specific function</span><br><span class=\"line\">  -fno-builtin            Disable implicit builtin knowledge of functions</span><br><span class=\"line\">  -fno-c++-static-destructors</span><br><span class=\"line\">                          Disable C++ static destructor registration</span><br><span class=\"line\">  -fno-char8_t            Disable C++ builtin type char8_t</span><br><span class=\"line\">  -fno-common             Compile common globals like normal definitions</span><br><span class=\"line\">  -fno-complete-member-pointers</span><br><span class=\"line\">                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI</span><br><span class=\"line\">  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings</span><br><span class=\"line\">  -fno-coverage-mapping   Disable code coverage analysis</span><br><span class=\"line\">  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash</span><br><span class=\"line\">  -fno-debug-info-for-profiling</span><br><span class=\"line\">                          Do not emit extra debug info for sample profiler.</span><br><span class=\"line\">  -fno-debug-macro        Do not emit macro debug information</span><br><span class=\"line\">  -fno-declspec           Disallow __declspec as a keyword</span><br><span class=\"line\">  -fno-delayed-template-parsing</span><br><span class=\"line\">                          Disable delayed template parsing</span><br><span class=\"line\">  -fno-delete-null-pointer-checks</span><br><span class=\"line\">                          Do not treat usage of null pointers as undefined behavior.</span><br><span class=\"line\">  -fno-diagnostics-fixit-info</span><br><span class=\"line\">                          Do not include fixit information in diagnostics</span><br><span class=\"line\">  -fno-digraphs           Disallow alternative token representations &#x27;&lt;:&#x27;, &#x27;:&gt;&#x27;, &#x27;&lt;%&#x27;, &#x27;%&gt;&#x27;, &#x27;%:&#x27;, &#x27;%:%:&#x27;</span><br><span class=\"line\">  -fno-discard-value-names</span><br><span class=\"line\">                          Do not discard value names in LLVM IR</span><br><span class=\"line\">  -fno-dollars-in-identifiers</span><br><span class=\"line\">                          Disallow &#x27;$&#x27; in identifiers</span><br><span class=\"line\">  -fno-double-square-bracket-attributes</span><br><span class=\"line\">                          Disable &#x27;[[]]&#x27; attributes in all C and C++ language modes</span><br><span class=\"line\">  -fno-elide-constructors Disable C++ copy constructor elision</span><br><span class=\"line\">  -fno-elide-type         Do not elide types when printing diagnostics</span><br><span class=\"line\">  -fno-experimental-isel  Disables the experimental global instruction selector</span><br><span class=\"line\">  -fno-experimental-new-pass-manager</span><br><span class=\"line\">                          Disables an experimental new pass manager in LLVM.</span><br><span class=\"line\">  -fno-fine-grained-bitfield-accesses</span><br><span class=\"line\">                          Use large-integer access for consecutive bitfield runs.</span><br><span class=\"line\">  -fno-fixed-point        Disable fixed point types</span><br><span class=\"line\">  -fno-force-enable-int128</span><br><span class=\"line\">                          Disable support for int128_t type</span><br><span class=\"line\">  -fno-gnu-inline-asm     Disable GNU style inline asm</span><br><span class=\"line\">  -fno-integrated-as      Disable the integrated assembler</span><br><span class=\"line\">  -fno-jump-tables        Do not use jump tables for lowering switches</span><br><span class=\"line\">  -fno-lax-vector-conversions</span><br><span class=\"line\">                          Disallow implicit conversions between vectors with a different number of elements or different element types</span><br><span class=\"line\">  -fno-lto                Disable LTO mode (default)</span><br><span class=\"line\">  -fno-merge-all-constants</span><br><span class=\"line\">                          Disallow merging of constants</span><br><span class=\"line\">  -fno-objc-infer-related-result-type</span><br><span class=\"line\">                          do not infer Objective-C related result type based on method family</span><br><span class=\"line\">  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators</span><br><span class=\"line\">  -fno-plt                Do not use the PLT to make function calls</span><br><span class=\"line\">  -fno-preserve-as-comments</span><br><span class=\"line\">                          Do not preserve comments in inline assembly</span><br><span class=\"line\">  -fno-profile-generate   Disable generation of profile instrumentation.</span><br><span class=\"line\">  -fno-profile-instr-generate</span><br><span class=\"line\">                          Disable generation of profile instrumentation.</span><br><span class=\"line\">  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization</span><br><span class=\"line\">  -fno-register-global-dtors-with-atexit</span><br><span class=\"line\">                          Don&#x27;t use atexit or __cxa_atexit to register global destructors</span><br><span class=\"line\">  -fno-reroll-loops       Turn off loop reroller</span><br><span class=\"line\">  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags</span><br><span class=\"line\">  -fno-rtti-data          Control emission of RTTI data</span><br><span class=\"line\">  -fno-rtti               Disable generation of rtti information</span><br><span class=\"line\">  -fno-sanitize-address-poison-class-member-array-new-cookie</span><br><span class=\"line\">                          Disable poisoning array cookies when using class member operator new[] in AddressSanitizer</span><br><span class=\"line\">  -fno-sanitize-address-use-after-scope</span><br><span class=\"line\">                          Disable use-after-scope detection in AddressSanitizer</span><br><span class=\"line\">  -fno-sanitize-blacklist Don&#x27;t use blacklist file for sanitizers</span><br><span class=\"line\">  -fno-sanitize-cfi-cross-dso</span><br><span class=\"line\">                          Disable control flow integrity (CFI) checks for cross-DSO calls.</span><br><span class=\"line\">  -fno-sanitize-coverage=&lt;value&gt;</span><br><span class=\"line\">                          Disable specified features of coverage instrumentation for Sanitizers</span><br><span class=\"line\">  -fno-sanitize-memory-track-origins</span><br><span class=\"line\">                          Disable origins tracking in MemorySanitizer</span><br><span class=\"line\">  -fno-sanitize-memory-use-after-dtor</span><br><span class=\"line\">                          Disable use-after-destroy detection in MemorySanitizer</span><br><span class=\"line\">  -fno-sanitize-recover=&lt;value&gt;</span><br><span class=\"line\">                          Disable recovery for specified sanitizers</span><br><span class=\"line\">  -fno-sanitize-stats     Disable sanitizer statistics gathering.</span><br><span class=\"line\">  -fno-sanitize-thread-atomics</span><br><span class=\"line\">                          Disable atomic operations instrumentation in ThreadSanitizer</span><br><span class=\"line\">  -fno-sanitize-thread-func-entry-exit</span><br><span class=\"line\">                          Disable function entry/exit instrumentation in ThreadSanitizer</span><br><span class=\"line\">  -fno-sanitize-thread-memory-access</span><br><span class=\"line\">                          Disable memory access instrumentation in ThreadSanitizer</span><br><span class=\"line\">  -fno-sanitize-trap=&lt;value&gt;</span><br><span class=\"line\">                          Disable trapping for specified sanitizers</span><br><span class=\"line\">  -fno-short-wchar        Force wchar_t to be an unsigned int</span><br><span class=\"line\">  -fno-show-column        Do not include column number on diagnostics</span><br><span class=\"line\">  -fno-show-source-location</span><br><span class=\"line\">                          Do not include source location information with diagnostics</span><br><span class=\"line\">  -fno-signed-char        Char is unsigned</span><br><span class=\"line\">  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros</span><br><span class=\"line\">  -fno-spell-checking     Disable spell-checking</span><br><span class=\"line\">  -fno-stack-check        Disable stack checking</span><br><span class=\"line\">  -fno-stack-protector    Disable the use of stack protectors</span><br><span class=\"line\">  -fno-stack-size-section Don&#x27;t emit section containing metadata on function stack sizes</span><br><span class=\"line\">  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary</span><br><span class=\"line\">  -fno-strict-float-cast-overflow</span><br><span class=\"line\">                          Relax language rules and try to match the behavior of the target&#x27;s native float-to-int conversion instructions</span><br><span class=\"line\">  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe</span><br><span class=\"line\">  -fno-trigraphs          Do not process trigraph sequences</span><br><span class=\"line\">  -fno-unroll-loops       Turn off loop unroller</span><br><span class=\"line\">  -fno-use-cxa-atexit     Don&#x27;t use __cxa_atexit for calling destructors</span><br><span class=\"line\">  -fno-use-init-array     Don&#x27;t use .init_array instead of .ctors</span><br><span class=\"line\">  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc</span><br><span class=\"line\">  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers</span><br><span class=\"line\">  -fobjc-exceptions       Enable Objective-C exceptions</span><br><span class=\"line\">  -fobjc-runtime=&lt;value&gt;  Specify the target Objective-C runtime kind and version</span><br><span class=\"line\">  -fobjc-weak             Enable ARC-style weak references in Objective-C</span><br><span class=\"line\">  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.</span><br><span class=\"line\">  -fopenmp-targets=&lt;value&gt;</span><br><span class=\"line\">                          Specify comma-separated list of triples OpenMP offloading targets to be supported</span><br><span class=\"line\">  -fopenmp                Parse OpenMP pragmas and generate parallel code.</span><br><span class=\"line\">  -foptimization-record-file=&lt;value&gt;</span><br><span class=\"line\">                          Specify the file name of any generated YAML optimization record</span><br><span class=\"line\">  -fpack-struct=&lt;value&gt;   Specify the default maximum struct packing alignment</span><br><span class=\"line\">  -fpascal-strings        Recognize and construct Pascal-style string literals</span><br><span class=\"line\">  -fpcc-struct-return     Override the default ABI to return all structs on the stack</span><br><span class=\"line\">  -fplt                   Use the PLT to make function calls</span><br><span class=\"line\">  -fplugin=&lt;dsopath&gt;      Load the named plugin (dynamic shared object)</span><br><span class=\"line\">  -fprebuilt-module-path=&lt;directory&gt;</span><br><span class=\"line\">                          Specify the prebuilt module path</span><br><span class=\"line\">  -fprofile-generate=&lt;directory&gt;</span><br><span class=\"line\">                          Generate instrumented code to collect execution counts into &lt;directory&gt;/default.profraw (overridden by LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-instr-generate=&lt;file&gt;</span><br><span class=\"line\">                          Generate instrumented code to collect execution counts into &lt;file&gt; (overridden by LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-instr-generate</span><br><span class=\"line\">                          Generate instrumented code to collect execution counts into default.profraw file (overridden by &#x27;=&#x27; form of option or LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-instr-use=&lt;value&gt;</span><br><span class=\"line\">                          Use instrumentation data for profile-guided optimization</span><br><span class=\"line\">  -fprofile-sample-accurate</span><br><span class=\"line\">                          Specifies that the sample profile is accurate</span><br><span class=\"line\">  -fprofile-sample-use=&lt;value&gt;</span><br><span class=\"line\">                          Enable sample-based profile guided optimizations</span><br><span class=\"line\">  -fprofile-use=&lt;pathname&gt;</span><br><span class=\"line\">                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from &lt;pathname&gt;/default.profdata. Otherwise, it reads from file &lt;pathname&gt;.</span><br><span class=\"line\">  -fptrauth-calls         Enable signing and authentication of all indirect calls</span><br><span class=\"line\">  -fptrauth-intrinsics    Enable pointer-authentication intrinsics</span><br><span class=\"line\">  -fptrauth-returns       Enable signing and authentication of return addresses</span><br><span class=\"line\">  -fptrauth-soft          Enable software lowering of pointer authentication</span><br><span class=\"line\">  -freciprocal-math       Allow division operations to be reassociated</span><br><span class=\"line\">  -freg-struct-return     Override the default ABI to return small structs in registers</span><br><span class=\"line\">  -fregister-global-dtors-with-atexit</span><br><span class=\"line\">                          Use atexit or __cxa_atexit to register global destructors</span><br><span class=\"line\">  -frelaxed-template-template-args</span><br><span class=\"line\">                          Enable C++17 relaxed template template argument matching</span><br><span class=\"line\">  -freroll-loops          Turn on loop reroller</span><br><span class=\"line\">  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags</span><br><span class=\"line\">  -fsanitize-address-field-padding=&lt;value&gt;</span><br><span class=\"line\">                          Level of field padding for AddressSanitizer</span><br><span class=\"line\">  -fsanitize-address-globals-dead-stripping</span><br><span class=\"line\">                          Enable linker dead stripping of globals in AddressSanitizer</span><br><span class=\"line\">  -fsanitize-address-poison-class-member-array-new-cookie</span><br><span class=\"line\">                          Enable poisoning array cookies when using class member operator new[] in AddressSanitizer</span><br><span class=\"line\">  -fsanitize-address-use-after-scope</span><br><span class=\"line\">                          Enable use-after-scope detection in AddressSanitizer</span><br><span class=\"line\">  -fsanitize-blacklist=&lt;value&gt;</span><br><span class=\"line\">                          Path to blacklist file for sanitizers</span><br><span class=\"line\">  -fsanitize-cfi-cross-dso</span><br><span class=\"line\">                          Enable control flow integrity (CFI) checks for cross-DSO calls.</span><br><span class=\"line\">  -fsanitize-cfi-icall-generalize-pointers</span><br><span class=\"line\">                          Generalize pointers in CFI indirect call type signature checks</span><br><span class=\"line\">  -fsanitize-coverage=&lt;value&gt;</span><br><span class=\"line\">                          Specify the type of coverage instrumentation for Sanitizers</span><br><span class=\"line\">  -fsanitize-memory-track-origins=&lt;value&gt;</span><br><span class=\"line\">                          Enable origins tracking in MemorySanitizer</span><br><span class=\"line\">  -fsanitize-memory-track-origins</span><br><span class=\"line\">                          Enable origins tracking in MemorySanitizer</span><br><span class=\"line\">  -fsanitize-memory-use-after-dtor</span><br><span class=\"line\">                          Enable use-after-destroy detection in MemorySanitizer</span><br><span class=\"line\">  -fsanitize-recover=&lt;value&gt;</span><br><span class=\"line\">                          Enable recovery for specified sanitizers</span><br><span class=\"line\">  -fsanitize-stats        Enable sanitizer statistics gathering.</span><br><span class=\"line\">  -fsanitize-thread-atomics</span><br><span class=\"line\">                          Enable atomic operations instrumentation in ThreadSanitizer (default)</span><br><span class=\"line\">  -fsanitize-thread-func-entry-exit</span><br><span class=\"line\">                          Enable function entry/exit instrumentation in ThreadSanitizer (default)</span><br><span class=\"line\">  -fsanitize-thread-memory-access</span><br><span class=\"line\">                          Enable memory access instrumentation in ThreadSanitizer (default)</span><br><span class=\"line\">  -fsanitize-trap=&lt;value&gt; Enable trapping for specified sanitizers</span><br><span class=\"line\">  -fsanitize-undefined-strip-path-components=&lt;number&gt;</span><br><span class=\"line\">                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.</span><br><span class=\"line\">  -fsanitize=&lt;check&gt;      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks</span><br><span class=\"line\">  -fsave-optimization-record</span><br><span class=\"line\">                          Generate a YAML optimization record file</span><br><span class=\"line\">  -fseh-exceptions        Use SEH style exceptions</span><br><span class=\"line\">  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values</span><br><span class=\"line\">  -fshort-wchar           Force wchar_t to be a short unsigned int</span><br><span class=\"line\">  -fshow-overloads=&lt;value&gt;</span><br><span class=\"line\">                          Which overload candidates to show when overload resolution fails: best|all; defaults to all</span><br><span class=\"line\">  -fsized-deallocation    Enable C++14 sized global deallocation functions</span><br><span class=\"line\">  -fsjlj-exceptions       Use SjLj style exceptions</span><br><span class=\"line\">  -fslp-vectorize         Enable the superword-level parallelism vectorization passes</span><br><span class=\"line\">  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF</span><br><span class=\"line\">  -fstack-check           Enable stack checking</span><br><span class=\"line\">  -fstack-protector-all   Force the usage of stack protectors for all functions</span><br><span class=\"line\">  -fstack-protector-strong</span><br><span class=\"line\">                          Use a strong heuristic to apply stack protectors to functions</span><br><span class=\"line\">  -fstack-protector       Enable stack protectors for functions potentially vulnerable to stack smashing</span><br><span class=\"line\">  -fstack-size-section    Emit section containing metadata on function stack sizes</span><br><span class=\"line\">  -fstandalone-debug      Emit full debug info for all types used by the program</span><br><span class=\"line\">  -fstrict-enums          Enable optimizations based on the strict definition of an enum&#x27;s value range</span><br><span class=\"line\">  -fstrict-float-cast-overflow</span><br><span class=\"line\">                          Assume that overflowing float-to-int casts are undefined (default)</span><br><span class=\"line\">  -fstrict-return         Always treat control flow paths that fall off the end of a non-void function as unreachable</span><br><span class=\"line\">  -fstrict-vtable-pointers</span><br><span class=\"line\">                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects</span><br><span class=\"line\">  -fthinlto-index=&lt;value&gt; Perform ThinLTO importing using provided function summary index</span><br><span class=\"line\">  -ftrap-function=&lt;value&gt; Issue call to specified function rather than a trap instruction</span><br><span class=\"line\">  -ftrapv-handler=&lt;function name&gt;</span><br><span class=\"line\">                          Specify the function to be called on overflow</span><br><span class=\"line\">  -ftrapv                 Trap on integer overflow</span><br><span class=\"line\">  -ftrigraphs             Process trigraph sequences</span><br><span class=\"line\">  -ftrivial-auto-var-init=&lt;value&gt;</span><br><span class=\"line\">                          Initialize trivial automatic stack variables: uninitialized (default) | pattern</span><br><span class=\"line\">  -funique-section-names  Use unique names for text and data sections (ELF Only)</span><br><span class=\"line\">  -funroll-loops          Turn on loop unroller</span><br><span class=\"line\">  -fuse-init-array        Use .init_array instead of .ctors</span><br><span class=\"line\">  -fveclib=&lt;value&gt;        Use the given vector functions library</span><br><span class=\"line\">  -fvectorize             Enable the loop vectorization passes</span><br><span class=\"line\">  -fvisibility-inlines-hidden</span><br><span class=\"line\">                          Give inline C++ member functions hidden visibility by default</span><br><span class=\"line\">  -fvisibility-ms-compat  Give global types &#x27;default&#x27; visibility and global functions and variables &#x27;hidden&#x27; visibility by default</span><br><span class=\"line\">  -fvisibility=&lt;value&gt;    Set the default symbol visibility for all global declarations</span><br><span class=\"line\">  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto</span><br><span class=\"line\">  -fwrapv                 Treat signed integer overflow as two&#x27;s complement</span><br><span class=\"line\">  -fwritable-strings      Store string literals as writable data</span><br><span class=\"line\">  -fxray-always-emit-customevents</span><br><span class=\"line\">                          Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.</span><br><span class=\"line\">  -fxray-always-emit-typedevents</span><br><span class=\"line\">                          Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented.</span><br><span class=\"line\">  -fxray-always-instrument= &lt;value&gt;</span><br><span class=\"line\">                          DEPRECATED: Filename defining the whitelist for imbuing the &#x27;always instrument&#x27; XRay attribute.</span><br><span class=\"line\">  -fxray-attr-list= &lt;value&gt;</span><br><span class=\"line\">                          Filename defining the list of functions/types for imbuing XRay attributes.</span><br><span class=\"line\">  -fxray-instruction-threshold= &lt;value&gt;</span><br><span class=\"line\">                          Sets the minimum function size to instrument with XRay</span><br><span class=\"line\">  -fxray-instrumentation-bundle= &lt;value&gt;</span><br><span class=\"line\">                          Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is &#x27;all&#x27;.</span><br><span class=\"line\">  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit</span><br><span class=\"line\">  -fxray-link-deps        Tells clang to add the link dependencies for XRay.</span><br><span class=\"line\">  -fxray-modes= &lt;value&gt;   List of modes to link in by default into XRay instrumented binaries.</span><br><span class=\"line\">  -fxray-never-instrument= &lt;value&gt;</span><br><span class=\"line\">                          DEPRECATED: Filename defining the whitelist for imbuing the &#x27;never instrument&#x27; XRay attribute.</span><br><span class=\"line\">  -fzvector               Enable System z vector language extension</span><br><span class=\"line\">  -F &lt;value&gt;              Add directory to framework include search path</span><br><span class=\"line\">  --gcc-toolchain=&lt;value&gt; Use the gcc toolchain at the given directory</span><br><span class=\"line\">  -gcodeview              Generate CodeView debug information</span><br><span class=\"line\">  -gdwarf-2               Generate source-level debug information with dwarf version 2</span><br><span class=\"line\">  -gdwarf-3               Generate source-level debug information with dwarf version 3</span><br><span class=\"line\">  -gdwarf-4               Generate source-level debug information with dwarf version 4</span><br><span class=\"line\">  -gdwarf-5               Generate source-level debug information with dwarf version 5</span><br><span class=\"line\">  -gembed-source          Embed source text in DWARF debug sections</span><br><span class=\"line\">  -gline-tables-only      Emit debug line number tables only</span><br><span class=\"line\">  -gmodules               Generate debug info with external references to clang modules or precompiled headers</span><br><span class=\"line\">  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections</span><br><span class=\"line\">  -gz=&lt;value&gt;             DWARF debug sections compression type</span><br><span class=\"line\">  -gz                     DWARF debug sections compression type</span><br><span class=\"line\">  -G &lt;size&gt;               Put objects of at most &lt;size&gt; bytes into small data section (MIPS / Hexagon)</span><br><span class=\"line\">  -g                      Generate source-level debug information</span><br><span class=\"line\">  --help-hidden           Display help for hidden options</span><br><span class=\"line\">  -help                   Display available options</span><br><span class=\"line\">  --hip-device-lib-path=&lt;value&gt;</span><br><span class=\"line\">                          HIP device library path</span><br><span class=\"line\">  --hip-device-lib=&lt;value&gt;</span><br><span class=\"line\">                          HIP device library</span><br><span class=\"line\">  --hip-link              Link clang-offload-bundler bundles for HIP</span><br><span class=\"line\">  -H                      Show header includes and nesting depth</span><br><span class=\"line\">  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path</span><br><span class=\"line\">  -iapinotes-modules &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to the API notes search path referenced by module name</span><br><span class=\"line\">  -idirafter &lt;value&gt;      Add directory to AFTER include search path</span><br><span class=\"line\">  -iframeworkwithsysroot &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot</span><br><span class=\"line\">  -iframework &lt;value&gt;     Add directory to SYSTEM framework search path</span><br><span class=\"line\">  -imacros &lt;file&gt;         Include macros from file before parsing</span><br><span class=\"line\">  -include-pch &lt;file&gt;     Include precompiled header file</span><br><span class=\"line\">  -include &lt;file&gt;         Include file before parsing</span><br><span class=\"line\">  -index-header-map       Make the next included directory (-I or -F) an indexer header map</span><br><span class=\"line\">  -index-ignore-system-symbols</span><br><span class=\"line\">                          Ignore symbols from system headers</span><br><span class=\"line\">  -index-record-codegen-name</span><br><span class=\"line\">                          Record the codegen name for symbols</span><br><span class=\"line\">  -index-store-path &lt;value&gt;</span><br><span class=\"line\">                          Enable indexing with the specified data store path</span><br><span class=\"line\">  -iprefix &lt;dir&gt;          Set the -iwithprefix/-iwithprefixbefore prefix</span><br><span class=\"line\">  -iquote &lt;directory&gt;     Add directory to QUOTE include search path</span><br><span class=\"line\">  -isysroot &lt;dir&gt;         Set the system root directory (usually /)</span><br><span class=\"line\">  -isystem-after &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to end of the SYSTEM include search path</span><br><span class=\"line\">  -isystem &lt;directory&gt;    Add directory to SYSTEM include search path</span><br><span class=\"line\">  -ivfsoverlay &lt;value&gt;    Overlay the virtual filesystem described by file over the real file system</span><br><span class=\"line\">  -iwithprefixbefore &lt;dir&gt;</span><br><span class=\"line\">                          Set directory to include search path with prefix</span><br><span class=\"line\">  -iwithprefix &lt;dir&gt;      Set directory to SYSTEM include search path with prefix</span><br><span class=\"line\">  -iwithsysroot &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot</span><br><span class=\"line\">  -I &lt;dir&gt;                Add directory to include search path</span><br><span class=\"line\">  -L &lt;dir&gt;                Add directory to library search path</span><br><span class=\"line\">  -mabicalls              Enable SVR4-style position-independent code (Mips only)</span><br><span class=\"line\">  -malign-double          Align doubles to two words in structs (x86 only)</span><br><span class=\"line\">  -mbackchain             Link stack frames through backchain on System Z</span><br><span class=\"line\">  -mcrc                   Allow use of CRC instructions (ARM/Mips only)</span><br><span class=\"line\">  -MD                     Write a depfile containing user and system headers</span><br><span class=\"line\">  -meabi &lt;value&gt;          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)</span><br><span class=\"line\">  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mexecute-only          Disallow generation of data access to code sections (ARM only)</span><br><span class=\"line\">  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mfentry                Insert calls to fentry at function entry (x86 only)</span><br><span class=\"line\">  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)</span><br><span class=\"line\">  -mfp32                  Use 32-bit floating point registers (MIPS only)</span><br><span class=\"line\">  -mfp64                  Use 64-bit floating point registers (MIPS only)</span><br><span class=\"line\">  -MF &lt;file&gt;              Write depfile output from -MMD, -MD, -MM, or -M to &lt;file&gt;</span><br><span class=\"line\">  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64 only)</span><br><span class=\"line\">  -mglobal-merge          Enable merging of globals</span><br><span class=\"line\">  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)</span><br><span class=\"line\">  -MG                     Add missing headers to depfile</span><br><span class=\"line\">  -mhvx-length=&lt;value&gt;    Set Hexagon Vector Length</span><br><span class=\"line\">  -mhvx=&lt;value&gt;           Enable Hexagon Vector eXtensions</span><br><span class=\"line\">  -mhvx                   Enable Hexagon Vector eXtensions</span><br><span class=\"line\">  -miamcu                 Use Intel MCU ABI</span><br><span class=\"line\">  --migrate               Run the migrator</span><br><span class=\"line\">  -mincremental-linker-compatible</span><br><span class=\"line\">                          (integrated-as) Emit an object file which can be used with an incremental linker</span><br><span class=\"line\">  -mindirect-jump=&lt;value&gt; Change indirect jump instructions to inhibit speculation</span><br><span class=\"line\">  -mios-version-min=&lt;value&gt;</span><br><span class=\"line\">                          Set iOS deployment target</span><br><span class=\"line\">  -MJ &lt;value&gt;             Write a compilation database entry per input</span><br><span class=\"line\">  -mllvm &lt;value&gt;          Additional arguments to forward to LLVM&#x27;s option processing</span><br><span class=\"line\">  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)</span><br><span class=\"line\">  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.</span><br><span class=\"line\">  -mmacosx-version-min=&lt;value&gt;</span><br><span class=\"line\">                          Set Mac OS X deployment target</span><br><span class=\"line\">  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.</span><br><span class=\"line\">  -MMD                    Write a depfile containing user headers</span><br><span class=\"line\">  -mmemops                Enable generation of memop instructions</span><br><span class=\"line\">  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard</span><br><span class=\"line\">  -mmsa                   Enable MSA ASE (MIPS only)</span><br><span class=\"line\">  -mmt                    Enable MT ASE (MIPS only)</span><br><span class=\"line\">  -MM                     Like -MMD, but also implies -E and writes to stdout by default</span><br><span class=\"line\">  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)</span><br><span class=\"line\">  -mno-crc                Disallow use of CRC instructions (Mips only)</span><br><span class=\"line\">  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mno-execute-only       Allow generation of data access to code sections (ARM only)</span><br><span class=\"line\">  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mno-fix-cortex-a53-835769</span><br><span class=\"line\">                          Don&#x27;t workaround Cortex-A53 erratum 835769 (AArch64 only)</span><br><span class=\"line\">  -mno-global-merge       Disable merging of globals</span><br><span class=\"line\">  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)</span><br><span class=\"line\">  -mno-hvx                Disable Hexagon Vector eXtensions</span><br><span class=\"line\">  -mno-implicit-float     Don&#x27;t generate implicit floating point instructions</span><br><span class=\"line\">  -mno-incremental-linker-compatible</span><br><span class=\"line\">                          (integrated-as) Emit an object file which cannot be used with an incremental linker</span><br><span class=\"line\">  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)</span><br><span class=\"line\">  -mno-long-calls         Restore the default behaviour of not generating long calls</span><br><span class=\"line\">  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.</span><br><span class=\"line\">  -mno-memops             Disable generation of memop instructions</span><br><span class=\"line\">  -mno-movt               Disallow use of movt/movw pairs (ARM only)</span><br><span class=\"line\">  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard</span><br><span class=\"line\">  -mno-msa                Disable MSA ASE (MIPS only)</span><br><span class=\"line\">  -mno-mt                 Disable MT ASE (MIPS only)</span><br><span class=\"line\">  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.</span><br><span class=\"line\">  -mno-nvj                Disable generation of new-value jumps</span><br><span class=\"line\">  -mno-nvs                Disable generation of new-value stores</span><br><span class=\"line\">  -mno-outline            Disable function outlining (AArch64 only)</span><br><span class=\"line\">  -mno-packets            Disable generation of instruction packets</span><br><span class=\"line\">  -mno-relax              Disable linker relaxation</span><br><span class=\"line\">  -mno-restrict-it        Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode</span><br><span class=\"line\">  -mno-stack-arg-probe    Disable stack probes which are enabled by default</span><br><span class=\"line\">  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)</span><br><span class=\"line\">  -mno-xnack              Disable XNACK (AMDGPU only)</span><br><span class=\"line\">  -mnocrc                 Disallow use of CRC instructions (ARM only)</span><br><span class=\"line\">  -mnvj                   Enable generation of new-value jumps</span><br><span class=\"line\">  -mnvs                   Enable generation of new-value stores</span><br><span class=\"line\">  -module-dependency-dir &lt;value&gt;</span><br><span class=\"line\">                          Directory to dump module dependencies to</span><br><span class=\"line\">  -module-file-info       Provide information about a particular module file</span><br><span class=\"line\">  -momit-leaf-frame-pointer</span><br><span class=\"line\">                          Omit frame pointer setup for leaf functions</span><br><span class=\"line\">  -moutline               Enable function outlining (AArch64 only)</span><br><span class=\"line\">  -mpackets               Enable generation of instruction packets</span><br><span class=\"line\">  -mpie-copy-relocations  Use copy relocations support for PIE builds</span><br><span class=\"line\">  -mprefer-vector-width=&lt;value&gt;</span><br><span class=\"line\">                          Specifies preferred vector width for auto-vectorization. Defaults to &#x27;none&#x27; which allows target specific decisions.</span><br><span class=\"line\">  -MP                     Create phony target for each dependency (other than main file)</span><br><span class=\"line\">  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility</span><br><span class=\"line\">  -MQ &lt;value&gt;             Specify name of main file output to quote in depfile</span><br><span class=\"line\">  -mrelax-all             (integrated-as) Relax all machine instructions</span><br><span class=\"line\">  -mrelax                 Enable linker relaxation</span><br><span class=\"line\">  -mrestrict-it           Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.</span><br><span class=\"line\">  -mrtd                   Make StdCall calling convention the default</span><br><span class=\"line\">  -msoft-float            Use software floating point</span><br><span class=\"line\">  -mstack-alignment=&lt;value&gt;</span><br><span class=\"line\">                          Set the stack alignment</span><br><span class=\"line\">  -mstack-arg-probe       Enable stack probes</span><br><span class=\"line\">  -mstack-probe-size=&lt;value&gt;</span><br><span class=\"line\">                          Set the stack probe size</span><br><span class=\"line\">  -mstackrealign          Force realign the stack at entry to every function</span><br><span class=\"line\">  -mthread-model &lt;value&gt;  The thread model to use, e.g. posix, single (posix by default)</span><br><span class=\"line\">  -mtp=&lt;value&gt;            Read thread pointer from coprocessor register (ARM only)</span><br><span class=\"line\">  -MT &lt;value&gt;             Specify name of main file output in depfile</span><br><span class=\"line\">  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)</span><br><span class=\"line\">  -MV                     Use NMake/Jom format for the depfile</span><br><span class=\"line\">  -mxnack                 Enable XNACK (AMDGPU only)</span><br><span class=\"line\">  -M                      Like -MD, but also implies -E and writes to stdout by default</span><br><span class=\"line\">  --no-cuda-gpu-arch=&lt;value&gt;</span><br><span class=\"line\">                          Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. &#x27;all&#x27; resets the list to its default value.</span><br><span class=\"line\">  --no-cuda-include-ptx=&lt;value&gt;</span><br><span class=\"line\">                          Do not include PTX for the follwing GPU architecture (e.g. sm_35) or &#x27;all&#x27;. May be specified more than once.</span><br><span class=\"line\">  --no-cuda-version-check Don&#x27;t error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.</span><br><span class=\"line\">  --no-system-header-prefix=&lt;prefix&gt;</span><br><span class=\"line\">                          Treat all #include paths starting with &lt;prefix&gt; as not including a system header.</span><br><span class=\"line\">  -nobuiltininc           Disable builtin #include directories</span><br><span class=\"line\">  -nostdinc++             Disable standard #include directories for the C++ standard library</span><br><span class=\"line\">  -ObjC++                 Treat source input files as Objective-C++ inputs</span><br><span class=\"line\">  -objcmt-atomic-property Make migration to &#x27;atomic&#x27; properties</span><br><span class=\"line\">  -objcmt-migrate-all     Enable migration to modern ObjC</span><br><span class=\"line\">  -objcmt-migrate-annotation</span><br><span class=\"line\">                          Enable migration to property and method annotations</span><br><span class=\"line\">  -objcmt-migrate-designated-init</span><br><span class=\"line\">                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods</span><br><span class=\"line\">  -objcmt-migrate-instancetype</span><br><span class=\"line\">                          Enable migration to infer instancetype for method result type</span><br><span class=\"line\">  -objcmt-migrate-literals</span><br><span class=\"line\">                          Enable migration to modern ObjC literals</span><br><span class=\"line\">  -objcmt-migrate-ns-macros</span><br><span class=\"line\">                          Enable migration to NS_ENUM/NS_OPTIONS macros</span><br><span class=\"line\">  -objcmt-migrate-property-dot-syntax</span><br><span class=\"line\">                          Enable migration of setter/getter messages to property-dot syntax</span><br><span class=\"line\">  -objcmt-migrate-property</span><br><span class=\"line\">                          Enable migration to modern ObjC property</span><br><span class=\"line\">  -objcmt-migrate-protocol-conformance</span><br><span class=\"line\">                          Enable migration to add protocol conformance on classes</span><br><span class=\"line\">  -objcmt-migrate-readonly-property</span><br><span class=\"line\">                          Enable migration to modern ObjC readonly property</span><br><span class=\"line\">  -objcmt-migrate-readwrite-property</span><br><span class=\"line\">                          Enable migration to modern ObjC readwrite property</span><br><span class=\"line\">  -objcmt-migrate-subscripting</span><br><span class=\"line\">                          Enable migration to modern ObjC subscripting</span><br><span class=\"line\">  -objcmt-ns-nonatomic-iosonly</span><br><span class=\"line\">                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property&#x27;s &#x27;atomic&#x27; attribute</span><br><span class=\"line\">  -objcmt-returns-innerpointer-property</span><br><span class=\"line\">                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER</span><br><span class=\"line\">  -objcmt-whitelist-dir-path=&lt;value&gt;</span><br><span class=\"line\">                          Only modify files with a filename contained in the provided directory path</span><br><span class=\"line\">  -ObjC                   Treat source input files as Objective-C inputs</span><br><span class=\"line\">  -o &lt;file&gt;               Write output to &lt;file&gt;</span><br><span class=\"line\">  -pg                     Enable mcount instrumentation</span><br><span class=\"line\">  -pipe                   Use pipes between commands, when possible</span><br><span class=\"line\">  --precompile            Only precompile the input</span><br><span class=\"line\">  -print-file-name=&lt;file&gt; Print the full library path of &lt;file&gt;</span><br><span class=\"line\">  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace</span><br><span class=\"line\">  -print-libgcc-file-name Print the library path for the currently used compiler runtime library (&quot;libgcc.a&quot; or &quot;libclang_rt.builtins.*.a&quot;)</span><br><span class=\"line\">  -print-prog-name=&lt;name&gt; Print the full program path of &lt;name&gt;</span><br><span class=\"line\">  -print-resource-dir     Print the resource directory pathname</span><br><span class=\"line\">  -print-search-dirs      Print the paths used for finding libraries and programs</span><br><span class=\"line\">  -pthread                Support POSIX threads in generated code</span><br><span class=\"line\">  --ptxas-path=&lt;value&gt;    Path to ptxas (used for compiling CUDA code)</span><br><span class=\"line\">  -P                      Disable linemarker output in -E mode</span><br><span class=\"line\">  -Qn                     Do not emit metadata containing compiler name and version</span><br><span class=\"line\">  -Qunused-arguments      Don&#x27;t emit warning for unused driver arguments</span><br><span class=\"line\">  -Qy                     Emit metadata containing compiler name and version</span><br><span class=\"line\">  -relocatable-pch        Whether to build a relocatable precompiled header</span><br><span class=\"line\">  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++</span><br><span class=\"line\">  -rewrite-objc           Rewrite Objective-C source to C++</span><br><span class=\"line\">  -Rpass-analysis=&lt;value&gt; Report transformation analysis from optimization passes whose name matches the given POSIX regular expression</span><br><span class=\"line\">  -Rpass-missed=&lt;value&gt;   Report missed transformations by optimization passes whose name matches the given POSIX regular expression</span><br><span class=\"line\">  -Rpass=&lt;value&gt;          Report transformations performed by optimization passes whose name matches the given POSIX regular expression</span><br><span class=\"line\">  -rtlib=&lt;value&gt;          Compiler runtime library to use</span><br><span class=\"line\">  -R&lt;remark&gt;              Enable the specified remark</span><br><span class=\"line\">  -save-stats=&lt;value&gt;     Save llvm statistics.</span><br><span class=\"line\">  -save-stats             Save llvm statistics.</span><br><span class=\"line\">  -save-temps=&lt;value&gt;     Save intermediate compilation results.</span><br><span class=\"line\">  -save-temps             Save intermediate compilation results</span><br><span class=\"line\">  -serialize-diagnostics &lt;value&gt;</span><br><span class=\"line\">                          Serialize compiler diagnostics to a file</span><br><span class=\"line\">  -std=&lt;value&gt;            Language standard to compile for</span><br><span class=\"line\">  -stdlib=&lt;value&gt;         C++ standard library to use</span><br><span class=\"line\">  --system-header-prefix=&lt;prefix&gt;</span><br><span class=\"line\">                          Treat all #include paths starting with &lt;prefix&gt; as including a system header.</span><br><span class=\"line\">  -S                      Only run preprocess and compilation steps</span><br><span class=\"line\">  -target-variant &lt;value&gt; Generate code that may run on a particular variant of the deployment target</span><br><span class=\"line\">  --target=&lt;value&gt;        Generate code for the given target</span><br><span class=\"line\">  -Tbss &lt;addr&gt;            Set starting address of BSS to &lt;addr&gt;</span><br><span class=\"line\">  -Tdata &lt;addr&gt;           Set starting address of DATA to &lt;addr&gt;</span><br><span class=\"line\">  -time                   Time individual commands</span><br><span class=\"line\">  -traditional-cpp        Enable some traditional CPP emulation</span><br><span class=\"line\">  -trigraphs              Process trigraph sequences</span><br><span class=\"line\">  -Ttext &lt;addr&gt;           Set starting address of TEXT to &lt;addr&gt;</span><br><span class=\"line\">  -T &lt;script&gt;             Specify &lt;script&gt; as linker script</span><br><span class=\"line\">  -undef                  undef all system defines</span><br><span class=\"line\">  -U &lt;macro&gt;              Undefine macro &lt;macro&gt;</span><br><span class=\"line\">  --verify-debug-info     Verify the binary representation of debug output</span><br><span class=\"line\">  -verify-pch             Load and verify that a pre-compiled header file is not stale</span><br><span class=\"line\">  --version               Print version information</span><br><span class=\"line\">  -v                      Show commands to run and use verbose output</span><br><span class=\"line\">  -Wa,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the assembler</span><br><span class=\"line\">  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED</span><br><span class=\"line\">  -Wl,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the linker</span><br><span class=\"line\">  -working-directory &lt;value&gt;</span><br><span class=\"line\">                          Resolve file paths relative to the specified directory</span><br><span class=\"line\">  -Wp,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the preprocessor</span><br><span class=\"line\">  -W&lt;warning&gt;             Enable the specified warning</span><br><span class=\"line\">  -w                      Suppress all warnings</span><br><span class=\"line\">  -Xanalyzer &lt;arg&gt;        Pass &lt;arg&gt; to the static analyzer</span><br><span class=\"line\">  -Xassembler &lt;arg&gt;       Pass &lt;arg&gt; to the assembler</span><br><span class=\"line\">  -Xclang &lt;arg&gt;           Pass &lt;arg&gt; to the clang compiler</span><br><span class=\"line\">  -Xcuda-fatbinary &lt;arg&gt;  Pass &lt;arg&gt; to fatbinary invocation</span><br><span class=\"line\">  -Xcuda-ptxas &lt;arg&gt;      Pass &lt;arg&gt; to the ptxas assembler</span><br><span class=\"line\">  -Xlinker &lt;arg&gt;          Pass &lt;arg&gt; to the linker</span><br><span class=\"line\">  -Xopenmp-target=&lt;triple&gt; &lt;arg&gt;</span><br><span class=\"line\">                          Pass &lt;arg&gt; to the target offloading toolchain identified by &lt;triple&gt;.</span><br><span class=\"line\">  -Xopenmp-target &lt;arg&gt;   Pass &lt;arg&gt; to the target offloading toolchain.</span><br><span class=\"line\">  -Xpreprocessor &lt;arg&gt;    Pass &lt;arg&gt; to the preprocessor</span><br><span class=\"line\">  -x &lt;language&gt;           Treat subsequent input files as having type &lt;language&gt;</span><br><span class=\"line\">  -z &lt;arg&gt;                Pass -z &lt;arg&gt; to the linker</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>MacBook-P:~ sumian$ g++ –help</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OVERVIEW: clang LLVM compiler</span><br><span class=\"line\"></span><br><span class=\"line\">USAGE: clang [options] &lt;inputs&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS:</span><br><span class=\"line\"><span class=\"meta\">  -#</span><span class=\"bash\"><span class=\"comment\">##                    Print (but do not run) the commands to run for this compilation</span></span></span><br><span class=\"line\">  --analyzer-output &lt;value&gt;</span><br><span class=\"line\">                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).</span><br><span class=\"line\">  --analyze               Run the static analyzer</span><br><span class=\"line\">  -arcmt-migrate-emit-errors</span><br><span class=\"line\">                          Emit ARC errors even if the migrator can fix them</span><br><span class=\"line\">  -arcmt-migrate-report-output &lt;value&gt;</span><br><span class=\"line\">                          Output path for the plist report</span><br><span class=\"line\">  -B &lt;dir&gt;                Add &lt;dir&gt; to search path for binaries and object files used implicitly</span><br><span class=\"line\">  -CC                     Include comments from within macros in preprocessed output</span><br><span class=\"line\">  -cfguard                Emit tables required for Windows Control Flow Guard.</span><br><span class=\"line\">  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.</span><br><span class=\"line\">  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.</span><br><span class=\"line\">  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.</span><br><span class=\"line\">  -cl-fp32-correctly-rounded-divide-sqrt</span><br><span class=\"line\">                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.</span><br><span class=\"line\">  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.</span><br><span class=\"line\">  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.</span><br><span class=\"line\">  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.</span><br><span class=\"line\">  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.</span><br><span class=\"line\">  -cl-single-precision-constant</span><br><span class=\"line\">                          OpenCL only. Treat double precision floating-point constant as single precision constant.</span><br><span class=\"line\">  -cl-std=&lt;value&gt;         OpenCL language standard to compile for.</span><br><span class=\"line\">  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.</span><br><span class=\"line\">  -cl-uniform-work-group-size</span><br><span class=\"line\">                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel</span><br><span class=\"line\">  -cl-unsafe-math-optimizations</span><br><span class=\"line\">                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.</span><br><span class=\"line\">  --config &lt;value&gt;        Specifies configuration file</span><br><span class=\"line\">  --cuda-compile-host-device</span><br><span class=\"line\">                          Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.</span><br><span class=\"line\">  --cuda-device-only      Compile CUDA code for device only</span><br><span class=\"line\">  --cuda-gpu-arch=&lt;value&gt; CUDA GPU architecture (e.g. sm_35).  May be specified more than once.</span><br><span class=\"line\">  --cuda-host-only        Compile CUDA code for host only.  Has no effect on non-CUDA compilations.</span><br><span class=\"line\">  --cuda-include-ptx=&lt;value&gt;</span><br><span class=\"line\">                          Include PTX for the follwing GPU architecture (e.g. sm_35) or &#x27;all&#x27;. May be specified more than once.</span><br><span class=\"line\">  --cuda-noopt-device-debug</span><br><span class=\"line\">                          Enable device-side debug info generation. Disables ptxas optimizations.</span><br><span class=\"line\">  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation</span><br><span class=\"line\">  --cuda-path=&lt;value&gt;     CUDA installation path</span><br><span class=\"line\">  -cxx-isystem &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to the C++ SYSTEM include search path</span><br><span class=\"line\">  -C                      Include comments in preprocessed output</span><br><span class=\"line\">  -c                      Only run preprocess, compile, and assemble steps</span><br><span class=\"line\">  -dD                     Print macro definitions in -E mode in addition to normal output</span><br><span class=\"line\">  -dependency-dot &lt;value&gt; Filename to write DOT-formatted header dependencies to</span><br><span class=\"line\">  -dependency-file &lt;value&gt;</span><br><span class=\"line\">                          Filename (or -) to write dependency output to</span><br><span class=\"line\">  -dI                     Print include directives in -E mode in addition to normal output</span><br><span class=\"line\">  -dM                     Print macro definitions in -E mode instead of normal output</span><br><span class=\"line\">  -D &lt;macro&gt;=&lt;value&gt;      Define &lt;macro&gt; to &lt;value&gt; (or 1 if &lt;value&gt; omitted)</span><br><span class=\"line\">  -emit-ast               Emit Clang AST files for source inputs</span><br><span class=\"line\">  -emit-llvm              Use the LLVM representation for assembler and object files</span><br><span class=\"line\">  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang&lt;value&gt;</span><br><span class=\"line\">                          Trivial automatic variable initialization to zero is only here for benchmarks, it&#x27;ll eventually be removed, and I&#x27;m OK with that because I&#x27;m only using it to benchmark</span><br><span class=\"line\">  -E                      Only run the preprocessor</span><br><span class=\"line\">  -faddrsig               Emit an address-significance table</span><br><span class=\"line\">  -faligned-allocation    Enable C++17 aligned allocation functions</span><br><span class=\"line\">  -fallow-editor-placeholders</span><br><span class=\"line\">                          Treat editor placeholders as valid source code</span><br><span class=\"line\">  -fansi-escape-codes     Use ANSI escape codes for diagnostics</span><br><span class=\"line\">  -fapinotes-cache-path=&lt;directory&gt;</span><br><span class=\"line\">                          Does nothing; API notes are no longer cached separately from modules</span><br><span class=\"line\">  -fapinotes-modules      Enable module-based external API notes support</span><br><span class=\"line\">  -fapinotes-swift-version=&lt;version&gt;</span><br><span class=\"line\">                          Specify the Swift version to use when filtering API notes</span><br><span class=\"line\">  -fapinotes              Enable external API notes support</span><br><span class=\"line\">  -fapple-kext            Use Apple&#x27;s kernel extensions ABI</span><br><span class=\"line\">  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling</span><br><span class=\"line\">  -fapplication-extension Restrict code to those available for App Extensions</span><br><span class=\"line\">  -fblocks                Enable the &#x27;blocks&#x27; language feature</span><br><span class=\"line\">  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler</span><br><span class=\"line\">  -fbuild-session-file=&lt;file&gt;</span><br><span class=\"line\">                          Use the last modification time of &lt;file&gt; as the build session timestamp</span><br><span class=\"line\">  -fbuild-session-timestamp=&lt;time since Epoch in seconds&gt;</span><br><span class=\"line\">                          Time when the current build session started</span><br><span class=\"line\">  -fbuiltin-module-map    Load the clang builtins module map file.</span><br><span class=\"line\">  -fc++-static-destructors</span><br><span class=\"line\">                          Enable C++ static destructor registration (the default)</span><br><span class=\"line\">  -fcf-protection=&lt;value&gt; Instrument control-flow architecture protection. Options: return, branch, full, none.</span><br><span class=\"line\">  -fcf-protection         Enable cf-protection in &#x27;full&#x27; mode</span><br><span class=\"line\">  -fchar8_t               Enable C++ builtin type char8_t</span><br><span class=\"line\">  -fclang-abi-compat=&lt;version&gt;</span><br><span class=\"line\">                          Attempt to match the ABI of Clang &lt;version&gt;</span><br><span class=\"line\">  -fcolor-diagnostics     Use colors in diagnostics</span><br><span class=\"line\">  -fcomment-block-commands=&lt;arg&gt;</span><br><span class=\"line\">                          Treat each comma separated argument in &lt;arg&gt; as a documentation comment block command</span><br><span class=\"line\">  -fcomplete-member-pointers</span><br><span class=\"line\">                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI</span><br><span class=\"line\">  -fcoroutines-ts         Enable support for the C++ Coroutines TS</span><br><span class=\"line\">  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis</span><br><span class=\"line\">  -fcuda-approx-transcendentals</span><br><span class=\"line\">                          Use approximate transcendental functions</span><br><span class=\"line\">  -fcuda-flush-denormals-to-zero</span><br><span class=\"line\">                          Flush denormal floating point values to zero in CUDA device mode.</span><br><span class=\"line\">  -fcuda-rdc              Generate relocatable device code, also known as separate compilation mode.</span><br><span class=\"line\">  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces.</span><br><span class=\"line\">  -fcxx-exceptions        Enable C++ exceptions</span><br><span class=\"line\">  -fdata-sections         Place each data in its own section (ELF Only)</span><br><span class=\"line\">  -fdebug-info-for-profiling</span><br><span class=\"line\">                          Emit extra debug info to make sample profile more accurate.</span><br><span class=\"line\">  -fdebug-macro           Emit macro debug information</span><br><span class=\"line\">  -fdebug-prefix-map=&lt;value&gt;</span><br><span class=\"line\">                          remap file source paths in debug info</span><br><span class=\"line\">  -fdebug-types-section   Place debug types in their own section (ELF Only)</span><br><span class=\"line\">  -fdeclspec              Allow __declspec as a keyword</span><br><span class=\"line\">  -fdelayed-template-parsing</span><br><span class=\"line\">                          Parse templated function definitions at the end of the translation unit</span><br><span class=\"line\">  -fdelete-null-pointer-checks</span><br><span class=\"line\">                          Treat usage of null pointers as undefined behavior.</span><br><span class=\"line\">  -fdiagnostics-absolute-paths</span><br><span class=\"line\">                          Print absolute paths in diagnostics</span><br><span class=\"line\">  -fdiagnostics-hotness-threshold=&lt;number&gt;</span><br><span class=\"line\">                          Prevent optimization remarks from being output if they do not have at least this profile count</span><br><span class=\"line\">  -fdiagnostics-parseable-fixits</span><br><span class=\"line\">                          Print fix-its in machine parseable form</span><br><span class=\"line\">  -fdiagnostics-print-source-range-info</span><br><span class=\"line\">                          Print source range spans in numeric form</span><br><span class=\"line\">  -fdiagnostics-show-hotness</span><br><span class=\"line\">                          Enable profile hotness information in diagnostic line</span><br><span class=\"line\">  -fdiagnostics-show-note-include-stack</span><br><span class=\"line\">                          Display include stacks for diagnostic notes</span><br><span class=\"line\">  -fdiagnostics-show-option</span><br><span class=\"line\">                          Print option name with mappable diagnostics</span><br><span class=\"line\">  -fdiagnostics-show-template-tree</span><br><span class=\"line\">                          Print a template comparison tree for differing templates</span><br><span class=\"line\">  -fdigraphs              Enable alternative token representations &#x27;&lt;:&#x27;, &#x27;:&gt;&#x27;, &#x27;&lt;%&#x27;, &#x27;%&gt;&#x27;, &#x27;%:&#x27;, &#x27;%:%:&#x27; (default)</span><br><span class=\"line\">  -fdiscard-value-names   Discard value names in LLVM IR</span><br><span class=\"line\">  -fdollars-in-identifiers</span><br><span class=\"line\">                          Allow &#x27;$&#x27; in identifiers</span><br><span class=\"line\">  -fdouble-square-bracket-attributes</span><br><span class=\"line\">                          Enable &#x27;[[]]&#x27; attributes in all C and C++ language modes</span><br><span class=\"line\">  -fdwarf-exceptions      Use DWARF style exceptions</span><br><span class=\"line\">  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker</span><br><span class=\"line\">  -fembed-bitcode=&lt;option&gt;</span><br><span class=\"line\">                          Embed LLVM bitcode (option: off, all, bitcode, marker)</span><br><span class=\"line\">  -fembed-bitcode         Embed LLVM IR bitcode as data</span><br><span class=\"line\">  -femit-all-decls        Emit all declarations, even if unused</span><br><span class=\"line\">  -femulated-tls          Use emutls functions to access thread_local variables</span><br><span class=\"line\">  -fenable-matrix         Enable matrix data type and related builtin functions</span><br><span class=\"line\">  -fexceptions            Enable support for exception handling</span><br><span class=\"line\">  -fexperimental-isel     Enables the experimental global instruction selector</span><br><span class=\"line\">  -fexperimental-new-pass-manager</span><br><span class=\"line\">                          Enables an experimental new pass manager in LLVM.</span><br><span class=\"line\">  -ffast-math             Allow aggressive, lossy floating-point optimizations</span><br><span class=\"line\">  -ffine-grained-bitfield-accesses</span><br><span class=\"line\">                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.</span><br><span class=\"line\">  -ffixed-point           Enable fixed point types</span><br><span class=\"line\">  -ffixed-r19             Reserve register r19 (Hexagon only)</span><br><span class=\"line\">  -ffixed-r9              Reserve the r9 register (ARM only)</span><br><span class=\"line\">  -ffixed-x18             Reserve the x18 register (AArch64 only)</span><br><span class=\"line\">  -ffixed-x20             Reserve the x20 register (AArch64 only)</span><br><span class=\"line\">  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization</span><br><span class=\"line\">  -fforce-enable-int128   Enable support for int128_t type</span><br><span class=\"line\">  -ffp-contract=&lt;value&gt;   Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)</span><br><span class=\"line\">  -ffreestanding          Assert that the compilation takes place in a freestanding environment</span><br><span class=\"line\">  -ffunction-sections     Place each function in its own section (ELF Only)</span><br><span class=\"line\">  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard</span><br><span class=\"line\">  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime</span><br><span class=\"line\">  -fgnu89-inline          Use the gnu89 inline semantics</span><br><span class=\"line\">  -fimplicit-module-maps  Implicitly search the file system for module map files.</span><br><span class=\"line\">  -finline-functions      Inline suitable functions</span><br><span class=\"line\">  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline</span><br><span class=\"line\">  -finstrument-function-entry-bare</span><br><span class=\"line\">                          Instrument function entry only, after inlining, without arguments to the instrumentation call</span><br><span class=\"line\">  -finstrument-functions-after-inlining</span><br><span class=\"line\">                          Like -finstrument-functions, but insert the calls after inlining</span><br><span class=\"line\">  -finstrument-functions  Generate calls to instrument function entry and exit</span><br><span class=\"line\">  -fintegrated-as         Enable the integrated assembler</span><br><span class=\"line\">  -flto-jobs=&lt;value&gt;      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)</span><br><span class=\"line\">  -flto=&lt;value&gt;           Set LTO mode to either &#x27;full&#x27; or &#x27;thin&#x27;</span><br><span class=\"line\">  -flto                   Enable LTO in &#x27;full&#x27; mode</span><br><span class=\"line\">  -fmath-errno            Require math functions to indicate errors by setting errno</span><br><span class=\"line\">  -fmax-type-align=&lt;value&gt;</span><br><span class=\"line\">                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment</span><br><span class=\"line\">  -fmerge-all-constants   Allow merging of constants</span><br><span class=\"line\">  -fmodule-file=[&lt;name&gt;=]&lt;file&gt;</span><br><span class=\"line\">                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.</span><br><span class=\"line\">  -fmodule-map-file=&lt;file&gt;</span><br><span class=\"line\">                          Load this module map file</span><br><span class=\"line\">  -fmodule-name=&lt;name&gt;    Specify the name of the module to build</span><br><span class=\"line\">  -fmodules-cache-path=&lt;directory&gt;</span><br><span class=\"line\">                          Specify the module cache path</span><br><span class=\"line\">  -fmodules-decluse       Require declaration of modules used within a module</span><br><span class=\"line\">  -fmodules-disable-diagnostic-validation</span><br><span class=\"line\">                          Disable validation of the diagnostic options when loading the module</span><br><span class=\"line\">  -fmodules-ignore-macro=&lt;value&gt;</span><br><span class=\"line\">                          Ignore the definition of the given macro when building and loading modules</span><br><span class=\"line\">  -fmodules-prune-after=&lt;seconds&gt;</span><br><span class=\"line\">                          Specify the interval (in seconds) after which a module file will be considered unused</span><br><span class=\"line\">  -fmodules-prune-interval=&lt;seconds&gt;</span><br><span class=\"line\">                          Specify the interval (in seconds) between attempts to prune the module cache</span><br><span class=\"line\">  -fmodules-search-all    Search even non-imported modules to resolve references</span><br><span class=\"line\">  -fmodules-strict-decluse</span><br><span class=\"line\">                          Like -fmodules-decluse but requires all headers to be in modules</span><br><span class=\"line\">  -fmodules-ts            Enable support for the C++ Modules TS</span><br><span class=\"line\">  -fmodules-user-build-path &lt;directory&gt;</span><br><span class=\"line\">                          Specify the module user build path</span><br><span class=\"line\">  -fmodules-validate-once-per-build-session</span><br><span class=\"line\">                          Don&#x27;t verify input files for the modules if the module has been successfully validated or loaded during this build session</span><br><span class=\"line\">  -fmodules-validate-system-headers</span><br><span class=\"line\">                          Validate the system headers that a module depends on when loading the module</span><br><span class=\"line\">  -fmodules               Enable the &#x27;modules&#x27; language feature</span><br><span class=\"line\">  -fms-compatibility-version=&lt;value&gt;</span><br><span class=\"line\">                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don&#x27;t define it (default))</span><br><span class=\"line\">  -fms-compatibility      Enable full Microsoft Visual C++ compatibility</span><br><span class=\"line\">  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler</span><br><span class=\"line\">  -fmsc-version=&lt;value&gt;   Microsoft compiler version number to report in _MSC_VER (0 = don&#x27;t define it (default))</span><br><span class=\"line\">  -fnew-alignment=&lt;align&gt; Specifies the largest alignment guaranteed by &#x27;::operator new(size_t)&#x27;</span><br><span class=\"line\">  -fno-access-control     Disable C++ access control</span><br><span class=\"line\">  -fno-addrsig            Don&#x27;t emit an address-significance table</span><br><span class=\"line\">  -fno-apinotes-modules   Disable module-based external API notes support</span><br><span class=\"line\">  -fno-apinotes           Disable external API notes support</span><br><span class=\"line\">  -fno-assume-sane-operator-new</span><br><span class=\"line\">                          Don&#x27;t assume that C++&#x27;s global operator new can&#x27;t alias any pointer</span><br><span class=\"line\">  -fno-autolink           Disable generation of linker directives for automatic library linking</span><br><span class=\"line\">  -fno-builtin-&lt;value&gt;    Disable implicit builtin knowledge of a specific function</span><br><span class=\"line\">  -fno-builtin            Disable implicit builtin knowledge of functions</span><br><span class=\"line\">  -fno-c++-static-destructors</span><br><span class=\"line\">                          Disable C++ static destructor registration</span><br><span class=\"line\">  -fno-char8_t            Disable C++ builtin type char8_t</span><br><span class=\"line\">  -fno-common             Compile common globals like normal definitions</span><br><span class=\"line\">  -fno-complete-member-pointers</span><br><span class=\"line\">                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI</span><br><span class=\"line\">  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings</span><br><span class=\"line\">  -fno-coverage-mapping   Disable code coverage analysis</span><br><span class=\"line\">  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash</span><br><span class=\"line\">  -fno-debug-info-for-profiling</span><br><span class=\"line\">                          Do not emit extra debug info for sample profiler.</span><br><span class=\"line\">  -fno-debug-macro        Do not emit macro debug information</span><br><span class=\"line\">  -fno-declspec           Disallow __declspec as a keyword</span><br><span class=\"line\">  -fno-delayed-template-parsing</span><br><span class=\"line\">                          Disable delayed template parsing</span><br><span class=\"line\">  -fno-delete-null-pointer-checks</span><br><span class=\"line\">                          Do not treat usage of null pointers as undefined behavior.</span><br><span class=\"line\">  -fno-diagnostics-fixit-info</span><br><span class=\"line\">                          Do not include fixit information in diagnostics</span><br><span class=\"line\">  -fno-digraphs           Disallow alternative token representations &#x27;&lt;:&#x27;, &#x27;:&gt;&#x27;, &#x27;&lt;%&#x27;, &#x27;%&gt;&#x27;, &#x27;%:&#x27;, &#x27;%:%:&#x27;</span><br><span class=\"line\">  -fno-discard-value-names</span><br><span class=\"line\">                          Do not discard value names in LLVM IR</span><br><span class=\"line\">  -fno-dollars-in-identifiers</span><br><span class=\"line\">                          Disallow &#x27;$&#x27; in identifiers</span><br><span class=\"line\">  -fno-double-square-bracket-attributes</span><br><span class=\"line\">                          Disable &#x27;[[]]&#x27; attributes in all C and C++ language modes</span><br><span class=\"line\">  -fno-elide-constructors Disable C++ copy constructor elision</span><br><span class=\"line\">  -fno-elide-type         Do not elide types when printing diagnostics</span><br><span class=\"line\">  -fno-experimental-isel  Disables the experimental global instruction selector</span><br><span class=\"line\">  -fno-experimental-new-pass-manager</span><br><span class=\"line\">                          Disables an experimental new pass manager in LLVM.</span><br><span class=\"line\">  -fno-fine-grained-bitfield-accesses</span><br><span class=\"line\">                          Use large-integer access for consecutive bitfield runs.</span><br><span class=\"line\">  -fno-fixed-point        Disable fixed point types</span><br><span class=\"line\">  -fno-force-enable-int128</span><br><span class=\"line\">                          Disable support for int128_t type</span><br><span class=\"line\">  -fno-gnu-inline-asm     Disable GNU style inline asm</span><br><span class=\"line\">  -fno-integrated-as      Disable the integrated assembler</span><br><span class=\"line\">  -fno-jump-tables        Do not use jump tables for lowering switches</span><br><span class=\"line\">  -fno-lax-vector-conversions</span><br><span class=\"line\">                          Disallow implicit conversions between vectors with a different number of elements or different element types</span><br><span class=\"line\">  -fno-lto                Disable LTO mode (default)</span><br><span class=\"line\">  -fno-merge-all-constants</span><br><span class=\"line\">                          Disallow merging of constants</span><br><span class=\"line\">  -fno-objc-infer-related-result-type</span><br><span class=\"line\">                          do not infer Objective-C related result type based on method family</span><br><span class=\"line\">  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators</span><br><span class=\"line\">  -fno-plt                Do not use the PLT to make function calls</span><br><span class=\"line\">  -fno-preserve-as-comments</span><br><span class=\"line\">                          Do not preserve comments in inline assembly</span><br><span class=\"line\">  -fno-profile-generate   Disable generation of profile instrumentation.</span><br><span class=\"line\">  -fno-profile-instr-generate</span><br><span class=\"line\">                          Disable generation of profile instrumentation.</span><br><span class=\"line\">  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization</span><br><span class=\"line\">  -fno-register-global-dtors-with-atexit</span><br><span class=\"line\">                          Don&#x27;t use atexit or __cxa_atexit to register global destructors</span><br><span class=\"line\">  -fno-reroll-loops       Turn off loop reroller</span><br><span class=\"line\">  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags</span><br><span class=\"line\">  -fno-rtti-data          Control emission of RTTI data</span><br><span class=\"line\">  -fno-rtti               Disable generation of rtti information</span><br><span class=\"line\">  -fno-sanitize-address-poison-class-member-array-new-cookie</span><br><span class=\"line\">                          Disable poisoning array cookies when using class member operator new[] in AddressSanitizer</span><br><span class=\"line\">  -fno-sanitize-address-use-after-scope</span><br><span class=\"line\">                          Disable use-after-scope detection in AddressSanitizer</span><br><span class=\"line\">  -fno-sanitize-blacklist Don&#x27;t use blacklist file for sanitizers</span><br><span class=\"line\">  -fno-sanitize-cfi-cross-dso</span><br><span class=\"line\">                          Disable control flow integrity (CFI) checks for cross-DSO calls.</span><br><span class=\"line\">  -fno-sanitize-coverage=&lt;value&gt;</span><br><span class=\"line\">                          Disable specified features of coverage instrumentation for Sanitizers</span><br><span class=\"line\">  -fno-sanitize-memory-track-origins</span><br><span class=\"line\">                          Disable origins tracking in MemorySanitizer</span><br><span class=\"line\">  -fno-sanitize-memory-use-after-dtor</span><br><span class=\"line\">                          Disable use-after-destroy detection in MemorySanitizer</span><br><span class=\"line\">  -fno-sanitize-recover=&lt;value&gt;</span><br><span class=\"line\">                          Disable recovery for specified sanitizers</span><br><span class=\"line\">  -fno-sanitize-stats     Disable sanitizer statistics gathering.</span><br><span class=\"line\">  -fno-sanitize-thread-atomics</span><br><span class=\"line\">                          Disable atomic operations instrumentation in ThreadSanitizer</span><br><span class=\"line\">  -fno-sanitize-thread-func-entry-exit</span><br><span class=\"line\">                          Disable function entry/exit instrumentation in ThreadSanitizer</span><br><span class=\"line\">  -fno-sanitize-thread-memory-access</span><br><span class=\"line\">                          Disable memory access instrumentation in ThreadSanitizer</span><br><span class=\"line\">  -fno-sanitize-trap=&lt;value&gt;</span><br><span class=\"line\">                          Disable trapping for specified sanitizers</span><br><span class=\"line\">  -fno-short-wchar        Force wchar_t to be an unsigned int</span><br><span class=\"line\">  -fno-show-column        Do not include column number on diagnostics</span><br><span class=\"line\">  -fno-show-source-location</span><br><span class=\"line\">                          Do not include source location information with diagnostics</span><br><span class=\"line\">  -fno-signed-char        Char is unsigned</span><br><span class=\"line\">  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros</span><br><span class=\"line\">  -fno-spell-checking     Disable spell-checking</span><br><span class=\"line\">  -fno-stack-check        Disable stack checking</span><br><span class=\"line\">  -fno-stack-protector    Disable the use of stack protectors</span><br><span class=\"line\">  -fno-stack-size-section Don&#x27;t emit section containing metadata on function stack sizes</span><br><span class=\"line\">  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary</span><br><span class=\"line\">  -fno-strict-float-cast-overflow</span><br><span class=\"line\">                          Relax language rules and try to match the behavior of the target&#x27;s native float-to-int conversion instructions</span><br><span class=\"line\">  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe</span><br><span class=\"line\">  -fno-trigraphs          Do not process trigraph sequences</span><br><span class=\"line\">  -fno-unroll-loops       Turn off loop unroller</span><br><span class=\"line\">  -fno-use-cxa-atexit     Don&#x27;t use __cxa_atexit for calling destructors</span><br><span class=\"line\">  -fno-use-init-array     Don&#x27;t use .init_array instead of .ctors</span><br><span class=\"line\">  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc</span><br><span class=\"line\">  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers</span><br><span class=\"line\">  -fobjc-exceptions       Enable Objective-C exceptions</span><br><span class=\"line\">  -fobjc-runtime=&lt;value&gt;  Specify the target Objective-C runtime kind and version</span><br><span class=\"line\">  -fobjc-weak             Enable ARC-style weak references in Objective-C</span><br><span class=\"line\">  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.</span><br><span class=\"line\">  -fopenmp-targets=&lt;value&gt;</span><br><span class=\"line\">                          Specify comma-separated list of triples OpenMP offloading targets to be supported</span><br><span class=\"line\">  -fopenmp                Parse OpenMP pragmas and generate parallel code.</span><br><span class=\"line\">  -foptimization-record-file=&lt;value&gt;</span><br><span class=\"line\">                          Specify the file name of any generated YAML optimization record</span><br><span class=\"line\">  -fpack-struct=&lt;value&gt;   Specify the default maximum struct packing alignment</span><br><span class=\"line\">  -fpascal-strings        Recognize and construct Pascal-style string literals</span><br><span class=\"line\">  -fpcc-struct-return     Override the default ABI to return all structs on the stack</span><br><span class=\"line\">  -fplt                   Use the PLT to make function calls</span><br><span class=\"line\">  -fplugin=&lt;dsopath&gt;      Load the named plugin (dynamic shared object)</span><br><span class=\"line\">  -fprebuilt-module-path=&lt;directory&gt;</span><br><span class=\"line\">                          Specify the prebuilt module path</span><br><span class=\"line\">  -fprofile-generate=&lt;directory&gt;</span><br><span class=\"line\">                          Generate instrumented code to collect execution counts into &lt;directory&gt;/default.profraw (overridden by LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-instr-generate=&lt;file&gt;</span><br><span class=\"line\">                          Generate instrumented code to collect execution counts into &lt;file&gt; (overridden by LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-instr-generate</span><br><span class=\"line\">                          Generate instrumented code to collect execution counts into default.profraw file (overridden by &#x27;=&#x27; form of option or LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-instr-use=&lt;value&gt;</span><br><span class=\"line\">                          Use instrumentation data for profile-guided optimization</span><br><span class=\"line\">  -fprofile-sample-accurate</span><br><span class=\"line\">                          Specifies that the sample profile is accurate</span><br><span class=\"line\">  -fprofile-sample-use=&lt;value&gt;</span><br><span class=\"line\">                          Enable sample-based profile guided optimizations</span><br><span class=\"line\">  -fprofile-use=&lt;pathname&gt;</span><br><span class=\"line\">                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from &lt;pathname&gt;/default.profdata. Otherwise, it reads from file &lt;pathname&gt;.</span><br><span class=\"line\">  -fptrauth-calls         Enable signing and authentication of all indirect calls</span><br><span class=\"line\">  -fptrauth-intrinsics    Enable pointer-authentication intrinsics</span><br><span class=\"line\">  -fptrauth-returns       Enable signing and authentication of return addresses</span><br><span class=\"line\">  -fptrauth-soft          Enable software lowering of pointer authentication</span><br><span class=\"line\">  -freciprocal-math       Allow division operations to be reassociated</span><br><span class=\"line\">  -freg-struct-return     Override the default ABI to return small structs in registers</span><br><span class=\"line\">  -fregister-global-dtors-with-atexit</span><br><span class=\"line\">                          Use atexit or __cxa_atexit to register global destructors</span><br><span class=\"line\">  -frelaxed-template-template-args</span><br><span class=\"line\">                          Enable C++17 relaxed template template argument matching</span><br><span class=\"line\">  -freroll-loops          Turn on loop reroller</span><br><span class=\"line\">  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags</span><br><span class=\"line\">  -fsanitize-address-field-padding=&lt;value&gt;</span><br><span class=\"line\">                          Level of field padding for AddressSanitizer</span><br><span class=\"line\">  -fsanitize-address-globals-dead-stripping</span><br><span class=\"line\">                          Enable linker dead stripping of globals in AddressSanitizer</span><br><span class=\"line\">  -fsanitize-address-poison-class-member-array-new-cookie</span><br><span class=\"line\">                          Enable poisoning array cookies when using class member operator new[] in AddressSanitizer</span><br><span class=\"line\">  -fsanitize-address-use-after-scope</span><br><span class=\"line\">                          Enable use-after-scope detection in AddressSanitizer</span><br><span class=\"line\">  -fsanitize-blacklist=&lt;value&gt;</span><br><span class=\"line\">                          Path to blacklist file for sanitizers</span><br><span class=\"line\">  -fsanitize-cfi-cross-dso</span><br><span class=\"line\">                          Enable control flow integrity (CFI) checks for cross-DSO calls.</span><br><span class=\"line\">  -fsanitize-cfi-icall-generalize-pointers</span><br><span class=\"line\">                          Generalize pointers in CFI indirect call type signature checks</span><br><span class=\"line\">  -fsanitize-coverage=&lt;value&gt;</span><br><span class=\"line\">                          Specify the type of coverage instrumentation for Sanitizers</span><br><span class=\"line\">  -fsanitize-memory-track-origins=&lt;value&gt;</span><br><span class=\"line\">                          Enable origins tracking in MemorySanitizer</span><br><span class=\"line\">  -fsanitize-memory-track-origins</span><br><span class=\"line\">                          Enable origins tracking in MemorySanitizer</span><br><span class=\"line\">  -fsanitize-memory-use-after-dtor</span><br><span class=\"line\">                          Enable use-after-destroy detection in MemorySanitizer</span><br><span class=\"line\">  -fsanitize-recover=&lt;value&gt;</span><br><span class=\"line\">                          Enable recovery for specified sanitizers</span><br><span class=\"line\">  -fsanitize-stats        Enable sanitizer statistics gathering.</span><br><span class=\"line\">  -fsanitize-thread-atomics</span><br><span class=\"line\">                          Enable atomic operations instrumentation in ThreadSanitizer (default)</span><br><span class=\"line\">  -fsanitize-thread-func-entry-exit</span><br><span class=\"line\">                          Enable function entry/exit instrumentation in ThreadSanitizer (default)</span><br><span class=\"line\">  -fsanitize-thread-memory-access</span><br><span class=\"line\">                          Enable memory access instrumentation in ThreadSanitizer (default)</span><br><span class=\"line\">  -fsanitize-trap=&lt;value&gt; Enable trapping for specified sanitizers</span><br><span class=\"line\">  -fsanitize-undefined-strip-path-components=&lt;number&gt;</span><br><span class=\"line\">                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.</span><br><span class=\"line\">  -fsanitize=&lt;check&gt;      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks</span><br><span class=\"line\">  -fsave-optimization-record</span><br><span class=\"line\">                          Generate a YAML optimization record file</span><br><span class=\"line\">  -fseh-exceptions        Use SEH style exceptions</span><br><span class=\"line\">  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values</span><br><span class=\"line\">  -fshort-wchar           Force wchar_t to be a short unsigned int</span><br><span class=\"line\">  -fshow-overloads=&lt;value&gt;</span><br><span class=\"line\">                          Which overload candidates to show when overload resolution fails: best|all; defaults to all</span><br><span class=\"line\">  -fsized-deallocation    Enable C++14 sized global deallocation functions</span><br><span class=\"line\">  -fsjlj-exceptions       Use SjLj style exceptions</span><br><span class=\"line\">  -fslp-vectorize         Enable the superword-level parallelism vectorization passes</span><br><span class=\"line\">  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF</span><br><span class=\"line\">  -fstack-check           Enable stack checking</span><br><span class=\"line\">  -fstack-protector-all   Force the usage of stack protectors for all functions</span><br><span class=\"line\">  -fstack-protector-strong</span><br><span class=\"line\">                          Use a strong heuristic to apply stack protectors to functions</span><br><span class=\"line\">  -fstack-protector       Enable stack protectors for functions potentially vulnerable to stack smashing</span><br><span class=\"line\">  -fstack-size-section    Emit section containing metadata on function stack sizes</span><br><span class=\"line\">  -fstandalone-debug      Emit full debug info for all types used by the program</span><br><span class=\"line\">  -fstrict-enums          Enable optimizations based on the strict definition of an enum&#x27;s value range</span><br><span class=\"line\">  -fstrict-float-cast-overflow</span><br><span class=\"line\">                          Assume that overflowing float-to-int casts are undefined (default)</span><br><span class=\"line\">  -fstrict-return         Always treat control flow paths that fall off the end of a non-void function as unreachable</span><br><span class=\"line\">  -fstrict-vtable-pointers</span><br><span class=\"line\">                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects</span><br><span class=\"line\">  -fthinlto-index=&lt;value&gt; Perform ThinLTO importing using provided function summary index</span><br><span class=\"line\">  -ftrap-function=&lt;value&gt; Issue call to specified function rather than a trap instruction</span><br><span class=\"line\">  -ftrapv-handler=&lt;function name&gt;</span><br><span class=\"line\">                          Specify the function to be called on overflow</span><br><span class=\"line\">  -ftrapv                 Trap on integer overflow</span><br><span class=\"line\">  -ftrigraphs             Process trigraph sequences</span><br><span class=\"line\">  -ftrivial-auto-var-init=&lt;value&gt;</span><br><span class=\"line\">                          Initialize trivial automatic stack variables: uninitialized (default) | pattern</span><br><span class=\"line\">  -funique-section-names  Use unique names for text and data sections (ELF Only)</span><br><span class=\"line\">  -funroll-loops          Turn on loop unroller</span><br><span class=\"line\">  -fuse-init-array        Use .init_array instead of .ctors</span><br><span class=\"line\">  -fveclib=&lt;value&gt;        Use the given vector functions library</span><br><span class=\"line\">  -fvectorize             Enable the loop vectorization passes</span><br><span class=\"line\">  -fvisibility-inlines-hidden</span><br><span class=\"line\">                          Give inline C++ member functions hidden visibility by default</span><br><span class=\"line\">  -fvisibility-ms-compat  Give global types &#x27;default&#x27; visibility and global functions and variables &#x27;hidden&#x27; visibility by default</span><br><span class=\"line\">  -fvisibility=&lt;value&gt;    Set the default symbol visibility for all global declarations</span><br><span class=\"line\">  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto</span><br><span class=\"line\">  -fwrapv                 Treat signed integer overflow as two&#x27;s complement</span><br><span class=\"line\">  -fwritable-strings      Store string literals as writable data</span><br><span class=\"line\">  -fxray-always-emit-customevents</span><br><span class=\"line\">                          Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.</span><br><span class=\"line\">  -fxray-always-emit-typedevents</span><br><span class=\"line\">                          Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented.</span><br><span class=\"line\">  -fxray-always-instrument= &lt;value&gt;</span><br><span class=\"line\">                          DEPRECATED: Filename defining the whitelist for imbuing the &#x27;always instrument&#x27; XRay attribute.</span><br><span class=\"line\">  -fxray-attr-list= &lt;value&gt;</span><br><span class=\"line\">                          Filename defining the list of functions/types for imbuing XRay attributes.</span><br><span class=\"line\">  -fxray-instruction-threshold= &lt;value&gt;</span><br><span class=\"line\">                          Sets the minimum function size to instrument with XRay</span><br><span class=\"line\">  -fxray-instrumentation-bundle= &lt;value&gt;</span><br><span class=\"line\">                          Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is &#x27;all&#x27;.</span><br><span class=\"line\">  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit</span><br><span class=\"line\">  -fxray-link-deps        Tells clang to add the link dependencies for XRay.</span><br><span class=\"line\">  -fxray-modes= &lt;value&gt;   List of modes to link in by default into XRay instrumented binaries.</span><br><span class=\"line\">  -fxray-never-instrument= &lt;value&gt;</span><br><span class=\"line\">                          DEPRECATED: Filename defining the whitelist for imbuing the &#x27;never instrument&#x27; XRay attribute.</span><br><span class=\"line\">  -fzvector               Enable System z vector language extension</span><br><span class=\"line\">  -F &lt;value&gt;              Add directory to framework include search path</span><br><span class=\"line\">  --gcc-toolchain=&lt;value&gt; Use the gcc toolchain at the given directory</span><br><span class=\"line\">  -gcodeview              Generate CodeView debug information</span><br><span class=\"line\">  -gdwarf-2               Generate source-level debug information with dwarf version 2</span><br><span class=\"line\">  -gdwarf-3               Generate source-level debug information with dwarf version 3</span><br><span class=\"line\">  -gdwarf-4               Generate source-level debug information with dwarf version 4</span><br><span class=\"line\">  -gdwarf-5               Generate source-level debug information with dwarf version 5</span><br><span class=\"line\">  -gembed-source          Embed source text in DWARF debug sections</span><br><span class=\"line\">  -gline-tables-only      Emit debug line number tables only</span><br><span class=\"line\">  -gmodules               Generate debug info with external references to clang modules or precompiled headers</span><br><span class=\"line\">  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections</span><br><span class=\"line\">  -gz=&lt;value&gt;             DWARF debug sections compression type</span><br><span class=\"line\">  -gz                     DWARF debug sections compression type</span><br><span class=\"line\">  -G &lt;size&gt;               Put objects of at most &lt;size&gt; bytes into small data section (MIPS / Hexagon)</span><br><span class=\"line\">  -g                      Generate source-level debug information</span><br><span class=\"line\">  --help-hidden           Display help for hidden options</span><br><span class=\"line\">  -help                   Display available options</span><br><span class=\"line\">  --hip-device-lib-path=&lt;value&gt;</span><br><span class=\"line\">                          HIP device library path</span><br><span class=\"line\">  --hip-device-lib=&lt;value&gt;</span><br><span class=\"line\">                          HIP device library</span><br><span class=\"line\">  --hip-link              Link clang-offload-bundler bundles for HIP</span><br><span class=\"line\">  -H                      Show header includes and nesting depth</span><br><span class=\"line\">  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path</span><br><span class=\"line\">  -iapinotes-modules &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to the API notes search path referenced by module name</span><br><span class=\"line\">  -idirafter &lt;value&gt;      Add directory to AFTER include search path</span><br><span class=\"line\">  -iframeworkwithsysroot &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot</span><br><span class=\"line\">  -iframework &lt;value&gt;     Add directory to SYSTEM framework search path</span><br><span class=\"line\">  -imacros &lt;file&gt;         Include macros from file before parsing</span><br><span class=\"line\">  -include-pch &lt;file&gt;     Include precompiled header file</span><br><span class=\"line\">  -include &lt;file&gt;         Include file before parsing</span><br><span class=\"line\">  -index-header-map       Make the next included directory (-I or -F) an indexer header map</span><br><span class=\"line\">  -index-ignore-system-symbols</span><br><span class=\"line\">                          Ignore symbols from system headers</span><br><span class=\"line\">  -index-record-codegen-name</span><br><span class=\"line\">                          Record the codegen name for symbols</span><br><span class=\"line\">  -index-store-path &lt;value&gt;</span><br><span class=\"line\">                          Enable indexing with the specified data store path</span><br><span class=\"line\">  -iprefix &lt;dir&gt;          Set the -iwithprefix/-iwithprefixbefore prefix</span><br><span class=\"line\">  -iquote &lt;directory&gt;     Add directory to QUOTE include search path</span><br><span class=\"line\">  -isysroot &lt;dir&gt;         Set the system root directory (usually /)</span><br><span class=\"line\">  -isystem-after &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to end of the SYSTEM include search path</span><br><span class=\"line\">  -isystem &lt;directory&gt;    Add directory to SYSTEM include search path</span><br><span class=\"line\">  -ivfsoverlay &lt;value&gt;    Overlay the virtual filesystem described by file over the real file system</span><br><span class=\"line\">  -iwithprefixbefore &lt;dir&gt;</span><br><span class=\"line\">                          Set directory to include search path with prefix</span><br><span class=\"line\">  -iwithprefix &lt;dir&gt;      Set directory to SYSTEM include search path with prefix</span><br><span class=\"line\">  -iwithsysroot &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot</span><br><span class=\"line\">  -I &lt;dir&gt;                Add directory to include search path</span><br><span class=\"line\">  -L &lt;dir&gt;                Add directory to library search path</span><br><span class=\"line\">  -mabicalls              Enable SVR4-style position-independent code (Mips only)</span><br><span class=\"line\">  -malign-double          Align doubles to two words in structs (x86 only)</span><br><span class=\"line\">  -mbackchain             Link stack frames through backchain on System Z</span><br><span class=\"line\">  -mcrc                   Allow use of CRC instructions (ARM/Mips only)</span><br><span class=\"line\">  -MD                     Write a depfile containing user and system headers</span><br><span class=\"line\">  -meabi &lt;value&gt;          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)</span><br><span class=\"line\">  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mexecute-only          Disallow generation of data access to code sections (ARM only)</span><br><span class=\"line\">  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mfentry                Insert calls to fentry at function entry (x86 only)</span><br><span class=\"line\">  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)</span><br><span class=\"line\">  -mfp32                  Use 32-bit floating point registers (MIPS only)</span><br><span class=\"line\">  -mfp64                  Use 64-bit floating point registers (MIPS only)</span><br><span class=\"line\">  -MF &lt;file&gt;              Write depfile output from -MMD, -MD, -MM, or -M to &lt;file&gt;</span><br><span class=\"line\">  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64 only)</span><br><span class=\"line\">  -mglobal-merge          Enable merging of globals</span><br><span class=\"line\">  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)</span><br><span class=\"line\">  -MG                     Add missing headers to depfile</span><br><span class=\"line\">  -mhvx-length=&lt;value&gt;    Set Hexagon Vector Length</span><br><span class=\"line\">  -mhvx=&lt;value&gt;           Enable Hexagon Vector eXtensions</span><br><span class=\"line\">  -mhvx                   Enable Hexagon Vector eXtensions</span><br><span class=\"line\">  -miamcu                 Use Intel MCU ABI</span><br><span class=\"line\">  --migrate               Run the migrator</span><br><span class=\"line\">  -mincremental-linker-compatible</span><br><span class=\"line\">                          (integrated-as) Emit an object file which can be used with an incremental linker</span><br><span class=\"line\">  -mindirect-jump=&lt;value&gt; Change indirect jump instructions to inhibit speculation</span><br><span class=\"line\">  -mios-version-min=&lt;value&gt;</span><br><span class=\"line\">                          Set iOS deployment target</span><br><span class=\"line\">  -MJ &lt;value&gt;             Write a compilation database entry per input</span><br><span class=\"line\">  -mllvm &lt;value&gt;          Additional arguments to forward to LLVM&#x27;s option processing</span><br><span class=\"line\">  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)</span><br><span class=\"line\">  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.</span><br><span class=\"line\">  -mmacosx-version-min=&lt;value&gt;</span><br><span class=\"line\">                          Set Mac OS X deployment target</span><br><span class=\"line\">  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.</span><br><span class=\"line\">  -MMD                    Write a depfile containing user headers</span><br><span class=\"line\">  -mmemops                Enable generation of memop instructions</span><br><span class=\"line\">  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard</span><br><span class=\"line\">  -mmsa                   Enable MSA ASE (MIPS only)</span><br><span class=\"line\">  -mmt                    Enable MT ASE (MIPS only)</span><br><span class=\"line\">  -MM                     Like -MMD, but also implies -E and writes to stdout by default</span><br><span class=\"line\">  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)</span><br><span class=\"line\">  -mno-crc                Disallow use of CRC instructions (Mips only)</span><br><span class=\"line\">  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mno-execute-only       Allow generation of data access to code sections (ARM only)</span><br><span class=\"line\">  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mno-fix-cortex-a53-835769</span><br><span class=\"line\">                          Don&#x27;t workaround Cortex-A53 erratum 835769 (AArch64 only)</span><br><span class=\"line\">  -mno-global-merge       Disable merging of globals</span><br><span class=\"line\">  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)</span><br><span class=\"line\">  -mno-hvx                Disable Hexagon Vector eXtensions</span><br><span class=\"line\">  -mno-implicit-float     Don&#x27;t generate implicit floating point instructions</span><br><span class=\"line\">  -mno-incremental-linker-compatible</span><br><span class=\"line\">                          (integrated-as) Emit an object file which cannot be used with an incremental linker</span><br><span class=\"line\">  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)</span><br><span class=\"line\">  -mno-long-calls         Restore the default behaviour of not generating long calls</span><br><span class=\"line\">  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.</span><br><span class=\"line\">  -mno-memops             Disable generation of memop instructions</span><br><span class=\"line\">  -mno-movt               Disallow use of movt/movw pairs (ARM only)</span><br><span class=\"line\">  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard</span><br><span class=\"line\">  -mno-msa                Disable MSA ASE (MIPS only)</span><br><span class=\"line\">  -mno-mt                 Disable MT ASE (MIPS only)</span><br><span class=\"line\">  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.</span><br><span class=\"line\">  -mno-nvj                Disable generation of new-value jumps</span><br><span class=\"line\">  -mno-nvs                Disable generation of new-value stores</span><br><span class=\"line\">  -mno-outline            Disable function outlining (AArch64 only)</span><br><span class=\"line\">  -mno-packets            Disable generation of instruction packets</span><br><span class=\"line\">  -mno-relax              Disable linker relaxation</span><br><span class=\"line\">  -mno-restrict-it        Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode</span><br><span class=\"line\">  -mno-stack-arg-probe    Disable stack probes which are enabled by default</span><br><span class=\"line\">  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)</span><br><span class=\"line\">  -mno-xnack              Disable XNACK (AMDGPU only)</span><br><span class=\"line\">  -mnocrc                 Disallow use of CRC instructions (ARM only)</span><br><span class=\"line\">  -mnvj                   Enable generation of new-value jumps</span><br><span class=\"line\">  -mnvs                   Enable generation of new-value stores</span><br><span class=\"line\">  -module-dependency-dir &lt;value&gt;</span><br><span class=\"line\">                          Directory to dump module dependencies to</span><br><span class=\"line\">  -module-file-info       Provide information about a particular module file</span><br><span class=\"line\">  -momit-leaf-frame-pointer</span><br><span class=\"line\">                          Omit frame pointer setup for leaf functions</span><br><span class=\"line\">  -moutline               Enable function outlining (AArch64 only)</span><br><span class=\"line\">  -mpackets               Enable generation of instruction packets</span><br><span class=\"line\">  -mpie-copy-relocations  Use copy relocations support for PIE builds</span><br><span class=\"line\">  -mprefer-vector-width=&lt;value&gt;</span><br><span class=\"line\">                          Specifies preferred vector width for auto-vectorization. Defaults to &#x27;none&#x27; which allows target specific decisions.</span><br><span class=\"line\">  -MP                     Create phony target for each dependency (other than main file)</span><br><span class=\"line\">  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility</span><br><span class=\"line\">  -MQ &lt;value&gt;             Specify name of main file output to quote in depfile</span><br><span class=\"line\">  -mrelax-all             (integrated-as) Relax all machine instructions</span><br><span class=\"line\">  -mrelax                 Enable linker relaxation</span><br><span class=\"line\">  -mrestrict-it           Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.</span><br><span class=\"line\">  -mrtd                   Make StdCall calling convention the default</span><br><span class=\"line\">  -msoft-float            Use software floating point</span><br><span class=\"line\">  -mstack-alignment=&lt;value&gt;</span><br><span class=\"line\">                          Set the stack alignment</span><br><span class=\"line\">  -mstack-arg-probe       Enable stack probes</span><br><span class=\"line\">  -mstack-probe-size=&lt;value&gt;</span><br><span class=\"line\">                          Set the stack probe size</span><br><span class=\"line\">  -mstackrealign          Force realign the stack at entry to every function</span><br><span class=\"line\">  -mthread-model &lt;value&gt;  The thread model to use, e.g. posix, single (posix by default)</span><br><span class=\"line\">  -mtp=&lt;value&gt;            Read thread pointer from coprocessor register (ARM only)</span><br><span class=\"line\">  -MT &lt;value&gt;             Specify name of main file output in depfile</span><br><span class=\"line\">  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)</span><br><span class=\"line\">  -MV                     Use NMake/Jom format for the depfile</span><br><span class=\"line\">  -mxnack                 Enable XNACK (AMDGPU only)</span><br><span class=\"line\">  -M                      Like -MD, but also implies -E and writes to stdout by default</span><br><span class=\"line\">  --no-cuda-gpu-arch=&lt;value&gt;</span><br><span class=\"line\">                          Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. &#x27;all&#x27; resets the list to its default value.</span><br><span class=\"line\">  --no-cuda-include-ptx=&lt;value&gt;</span><br><span class=\"line\">                          Do not include PTX for the follwing GPU architecture (e.g. sm_35) or &#x27;all&#x27;. May be specified more than once.</span><br><span class=\"line\">  --no-cuda-version-check Don&#x27;t error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.</span><br><span class=\"line\">  --no-system-header-prefix=&lt;prefix&gt;</span><br><span class=\"line\">                          Treat all #include paths starting with &lt;prefix&gt; as not including a system header.</span><br><span class=\"line\">  -nobuiltininc           Disable builtin #include directories</span><br><span class=\"line\">  -nostdinc++             Disable standard #include directories for the C++ standard library</span><br><span class=\"line\">  -ObjC++                 Treat source input files as Objective-C++ inputs</span><br><span class=\"line\">  -objcmt-atomic-property Make migration to &#x27;atomic&#x27; properties</span><br><span class=\"line\">  -objcmt-migrate-all     Enable migration to modern ObjC</span><br><span class=\"line\">  -objcmt-migrate-annotation</span><br><span class=\"line\">                          Enable migration to property and method annotations</span><br><span class=\"line\">  -objcmt-migrate-designated-init</span><br><span class=\"line\">                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods</span><br><span class=\"line\">  -objcmt-migrate-instancetype</span><br><span class=\"line\">                          Enable migration to infer instancetype for method result type</span><br><span class=\"line\">  -objcmt-migrate-literals</span><br><span class=\"line\">                          Enable migration to modern ObjC literals</span><br><span class=\"line\">  -objcmt-migrate-ns-macros</span><br><span class=\"line\">                          Enable migration to NS_ENUM/NS_OPTIONS macros</span><br><span class=\"line\">  -objcmt-migrate-property-dot-syntax</span><br><span class=\"line\">                          Enable migration of setter/getter messages to property-dot syntax</span><br><span class=\"line\">  -objcmt-migrate-property</span><br><span class=\"line\">                          Enable migration to modern ObjC property</span><br><span class=\"line\">  -objcmt-migrate-protocol-conformance</span><br><span class=\"line\">                          Enable migration to add protocol conformance on classes</span><br><span class=\"line\">  -objcmt-migrate-readonly-property</span><br><span class=\"line\">                          Enable migration to modern ObjC readonly property</span><br><span class=\"line\">  -objcmt-migrate-readwrite-property</span><br><span class=\"line\">                          Enable migration to modern ObjC readwrite property</span><br><span class=\"line\">  -objcmt-migrate-subscripting</span><br><span class=\"line\">                          Enable migration to modern ObjC subscripting</span><br><span class=\"line\">  -objcmt-ns-nonatomic-iosonly</span><br><span class=\"line\">                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property&#x27;s &#x27;atomic&#x27; attribute</span><br><span class=\"line\">  -objcmt-returns-innerpointer-property</span><br><span class=\"line\">                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER</span><br><span class=\"line\">  -objcmt-whitelist-dir-path=&lt;value&gt;</span><br><span class=\"line\">                          Only modify files with a filename contained in the provided directory path</span><br><span class=\"line\">  -ObjC                   Treat source input files as Objective-C inputs</span><br><span class=\"line\">  -o &lt;file&gt;               Write output to &lt;file&gt;</span><br><span class=\"line\">  -pg                     Enable mcount instrumentation</span><br><span class=\"line\">  -pipe                   Use pipes between commands, when possible</span><br><span class=\"line\">  --precompile            Only precompile the input</span><br><span class=\"line\">  -print-file-name=&lt;file&gt; Print the full library path of &lt;file&gt;</span><br><span class=\"line\">  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace</span><br><span class=\"line\">  -print-libgcc-file-name Print the library path for the currently used compiler runtime library (&quot;libgcc.a&quot; or &quot;libclang_rt.builtins.*.a&quot;)</span><br><span class=\"line\">  -print-prog-name=&lt;name&gt; Print the full program path of &lt;name&gt;</span><br><span class=\"line\">  -print-resource-dir     Print the resource directory pathname</span><br><span class=\"line\">  -print-search-dirs      Print the paths used for finding libraries and programs</span><br><span class=\"line\">  -pthread                Support POSIX threads in generated code</span><br><span class=\"line\">  --ptxas-path=&lt;value&gt;    Path to ptxas (used for compiling CUDA code)</span><br><span class=\"line\">  -P                      Disable linemarker output in -E mode</span><br><span class=\"line\">  -Qn                     Do not emit metadata containing compiler name and version</span><br><span class=\"line\">  -Qunused-arguments      Don&#x27;t emit warning for unused driver arguments</span><br><span class=\"line\">  -Qy                     Emit metadata containing compiler name and version</span><br><span class=\"line\">  -relocatable-pch        Whether to build a relocatable precompiled header</span><br><span class=\"line\">  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++</span><br><span class=\"line\">  -rewrite-objc           Rewrite Objective-C source to C++</span><br><span class=\"line\">  -Rpass-analysis=&lt;value&gt; Report transformation analysis from optimization passes whose name matches the given POSIX regular expression</span><br><span class=\"line\">  -Rpass-missed=&lt;value&gt;   Report missed transformations by optimization passes whose name matches the given POSIX regular expression</span><br><span class=\"line\">  -Rpass=&lt;value&gt;          Report transformations performed by optimization passes whose name matches the given POSIX regular expression</span><br><span class=\"line\">  -rtlib=&lt;value&gt;          Compiler runtime library to use</span><br><span class=\"line\">  -R&lt;remark&gt;              Enable the specified remark</span><br><span class=\"line\">  -save-stats=&lt;value&gt;     Save llvm statistics.</span><br><span class=\"line\">  -save-stats             Save llvm statistics.</span><br><span class=\"line\">  -save-temps=&lt;value&gt;     Save intermediate compilation results.</span><br><span class=\"line\">  -save-temps             Save intermediate compilation results</span><br><span class=\"line\">  -serialize-diagnostics &lt;value&gt;</span><br><span class=\"line\">                          Serialize compiler diagnostics to a file</span><br><span class=\"line\">  -std=&lt;value&gt;            Language standard to compile for</span><br><span class=\"line\">  -stdlib=&lt;value&gt;         C++ standard library to use</span><br><span class=\"line\">  --system-header-prefix=&lt;prefix&gt;</span><br><span class=\"line\">                          Treat all #include paths starting with &lt;prefix&gt; as including a system header.</span><br><span class=\"line\">  -S                      Only run preprocess and compilation steps</span><br><span class=\"line\">  -target-variant &lt;value&gt; Generate code that may run on a particular variant of the deployment target</span><br><span class=\"line\">  --target=&lt;value&gt;        Generate code for the given target</span><br><span class=\"line\">  -Tbss &lt;addr&gt;            Set starting address of BSS to &lt;addr&gt;</span><br><span class=\"line\">  -Tdata &lt;addr&gt;           Set starting address of DATA to &lt;addr&gt;</span><br><span class=\"line\">  -time                   Time individual commands</span><br><span class=\"line\">  -traditional-cpp        Enable some traditional CPP emulation</span><br><span class=\"line\">  -trigraphs              Process trigraph sequences</span><br><span class=\"line\">  -Ttext &lt;addr&gt;           Set starting address of TEXT to &lt;addr&gt;</span><br><span class=\"line\">  -T &lt;script&gt;             Specify &lt;script&gt; as linker script</span><br><span class=\"line\">  -undef                  undef all system defines</span><br><span class=\"line\">  -U &lt;macro&gt;              Undefine macro &lt;macro&gt;</span><br><span class=\"line\">  --verify-debug-info     Verify the binary representation of debug output</span><br><span class=\"line\">  -verify-pch             Load and verify that a pre-compiled header file is not stale</span><br><span class=\"line\">  --version               Print version information</span><br><span class=\"line\">  -v                      Show commands to run and use verbose output</span><br><span class=\"line\">  -Wa,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the assembler</span><br><span class=\"line\">  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED</span><br><span class=\"line\">  -Wl,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the linker</span><br><span class=\"line\">  -working-directory &lt;value&gt;</span><br><span class=\"line\">                          Resolve file paths relative to the specified directory</span><br><span class=\"line\">  -Wp,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the preprocessor</span><br><span class=\"line\">  -W&lt;warning&gt;             Enable the specified warning</span><br><span class=\"line\">  -w                      Suppress all warnings</span><br><span class=\"line\">  -Xanalyzer &lt;arg&gt;        Pass &lt;arg&gt; to the static analyzer</span><br><span class=\"line\">  -Xassembler &lt;arg&gt;       Pass &lt;arg&gt; to the assembler</span><br><span class=\"line\">  -Xclang &lt;arg&gt;           Pass &lt;arg&gt; to the clang compiler</span><br><span class=\"line\">  -Xcuda-fatbinary &lt;arg&gt;  Pass &lt;arg&gt; to fatbinary invocation</span><br><span class=\"line\">  -Xcuda-ptxas &lt;arg&gt;      Pass &lt;arg&gt; to the ptxas assembler</span><br><span class=\"line\">  -Xlinker &lt;arg&gt;          Pass &lt;arg&gt; to the linker</span><br><span class=\"line\">  -Xopenmp-target=&lt;triple&gt; &lt;arg&gt;</span><br><span class=\"line\">                          Pass &lt;arg&gt; to the target offloading toolchain identified by &lt;triple&gt;.</span><br><span class=\"line\">  -Xopenmp-target &lt;arg&gt;   Pass &lt;arg&gt; to the target offloading toolchain.</span><br><span class=\"line\">  -Xpreprocessor &lt;arg&gt;    Pass &lt;arg&gt; to the preprocessor</span><br><span class=\"line\">  -x &lt;language&gt;           Treat subsequent input files as having type &lt;language&gt;</span><br><span class=\"line\">  -z &lt;arg&gt;                Pass -z &lt;arg&gt; to the linker</span><br></pre></td></tr></table></figure>"},{"_content":"# 查漏补缺\n\n1、Runloop\nhttps://blog.ibireme.com/2015/05/18/runloop/\n\n[Runloop](https://v.youku.com/v_show/id_XODgxODkzODI0.html)\n\n2、Facebook\nhttps://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/\n\nhttps://github.com/facebook/FBMemoryProfiler\n\n3、插件日志\nhttps://github.com/meitu\n\n4、程序员网站\nhttps://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting\n\n5、Runtime\nhttps://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension\n\nhttps://juejin.im/post/5d1c11c9e51d45590a445b8e\n\nhttps://juejin.im/post/5d2bf32f6fb9a07ee063476a\n\nhttps://juejin.im/post/5d215b8df265da1b7b31ac8f\n\n6、crash\nhttps://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md\n\nhttps://github.com/Tencent/matrix\n\n7、target\nhttps://www.jianshu.com/p/18db54655246\n\n8、pod\nhttps://www.jianshu.com/p/fb5083f2c0d2\n","source":"_posts/iOS 查漏补缺.md","raw":"# 查漏补缺\n\n1、Runloop\nhttps://blog.ibireme.com/2015/05/18/runloop/\n\n[Runloop](https://v.youku.com/v_show/id_XODgxODkzODI0.html)\n\n2、Facebook\nhttps://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/\n\nhttps://github.com/facebook/FBMemoryProfiler\n\n3、插件日志\nhttps://github.com/meitu\n\n4、程序员网站\nhttps://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting\n\n5、Runtime\nhttps://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension\n\nhttps://juejin.im/post/5d1c11c9e51d45590a445b8e\n\nhttps://juejin.im/post/5d2bf32f6fb9a07ee063476a\n\nhttps://juejin.im/post/5d215b8df265da1b7b31ac8f\n\n6、crash\nhttps://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md\n\nhttps://github.com/Tencent/matrix\n\n7、target\nhttps://www.jianshu.com/p/18db54655246\n\n8、pod\nhttps://www.jianshu.com/p/fb5083f2c0d2\n","slug":"iOS 查漏补缺","published":1,"date":"2019-07-18T10:56:18.000Z","updated":"2021-01-28T13:18:14.961Z","_id":"cklgq35lv0000907u4cgx2l70","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"查漏补缺\"><a href=\"#查漏补缺\" class=\"headerlink\" title=\"查漏补缺\"></a>查漏补缺</h1><p>1、Runloop<br><a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">https://blog.ibireme.com/2015/05/18/runloop/</a></p>\n<p><a href=\"https://v.youku.com/v_show/id_XODgxODkzODI0.html\">Runloop</a></p>\n<p>2、Facebook<br><a href=\"https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/\">https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/</a></p>\n<p><a href=\"https://github.com/facebook/FBMemoryProfiler\">https://github.com/facebook/FBMemoryProfiler</a></p>\n<p>3、插件日志<br><a href=\"https://github.com/meitu\">https://github.com/meitu</a></p>\n<p>4、程序员网站<br><a href=\"https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting\">https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting</a></p>\n<p>5、Runtime<br><a href=\"https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension\">https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension</a></p>\n<p><a href=\"https://juejin.im/post/5d1c11c9e51d45590a445b8e\">https://juejin.im/post/5d1c11c9e51d45590a445b8e</a></p>\n<p><a href=\"https://juejin.im/post/5d2bf32f6fb9a07ee063476a\">https://juejin.im/post/5d2bf32f6fb9a07ee063476a</a></p>\n<p><a href=\"https://juejin.im/post/5d215b8df265da1b7b31ac8f\">https://juejin.im/post/5d215b8df265da1b7b31ac8f</a></p>\n<p>6、crash<br><a href=\"https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md\">https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md</a></p>\n<p><a href=\"https://github.com/Tencent/matrix\">https://github.com/Tencent/matrix</a></p>\n<p>7、target<br><a href=\"https://www.jianshu.com/p/18db54655246\">https://www.jianshu.com/p/18db54655246</a></p>\n<p>8、pod<br><a href=\"https://www.jianshu.com/p/fb5083f2c0d2\">https://www.jianshu.com/p/fb5083f2c0d2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"查漏补缺\"><a href=\"#查漏补缺\" class=\"headerlink\" title=\"查漏补缺\"></a>查漏补缺</h1><p>1、Runloop<br><a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">https://blog.ibireme.com/2015/05/18/runloop/</a></p>\n<p><a href=\"https://v.youku.com/v_show/id_XODgxODkzODI0.html\">Runloop</a></p>\n<p>2、Facebook<br><a href=\"https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/\">https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/</a></p>\n<p><a href=\"https://github.com/facebook/FBMemoryProfiler\">https://github.com/facebook/FBMemoryProfiler</a></p>\n<p>3、插件日志<br><a href=\"https://github.com/meitu\">https://github.com/meitu</a></p>\n<p>4、程序员网站<br><a href=\"https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting\">https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting</a></p>\n<p>5、Runtime<br><a href=\"https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension\">https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension</a></p>\n<p><a href=\"https://juejin.im/post/5d1c11c9e51d45590a445b8e\">https://juejin.im/post/5d1c11c9e51d45590a445b8e</a></p>\n<p><a href=\"https://juejin.im/post/5d2bf32f6fb9a07ee063476a\">https://juejin.im/post/5d2bf32f6fb9a07ee063476a</a></p>\n<p><a href=\"https://juejin.im/post/5d215b8df265da1b7b31ac8f\">https://juejin.im/post/5d215b8df265da1b7b31ac8f</a></p>\n<p>6、crash<br><a href=\"https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md\">https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md</a></p>\n<p><a href=\"https://github.com/Tencent/matrix\">https://github.com/Tencent/matrix</a></p>\n<p>7、target<br><a href=\"https://www.jianshu.com/p/18db54655246\">https://www.jianshu.com/p/18db54655246</a></p>\n<p>8、pod<br><a href=\"https://www.jianshu.com/p/fb5083f2c0d2\">https://www.jianshu.com/p/fb5083f2c0d2</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}