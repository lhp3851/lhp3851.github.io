{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/beautiful-hexo/source/hexo.png","path":"hexo.png","modified":0,"renderable":1},{"_id":"themes/beautiful-hexo/source/bigimgs/01.jpg","path":"bigimgs/01.jpg","modified":0,"renderable":1},{"_id":"themes/beautiful-hexo/source/bigimgs/03.jpg","path":"bigimgs/03.jpg","modified":0,"renderable":1},{"_id":"themes/beautiful-hexo/source/bigimgs/02.jpg","path":"bigimgs/02.jpg","modified":0,"renderable":1},{"_id":"themes/beautiful-hexo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/blueprint-dark.png","path":"css/blueprint-dark.png","modified":0,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/main-minimal.css","path":"css/main-minimal.css","modified":0,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/main.css","path":"css/main.css","modified":0,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/normalize.min.css","path":"css/normalize.min.css","modified":0,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/pygment_highlights.css","path":"css/pygment_highlights.css","modified":0,"renderable":1},{"_id":"themes/beautiful-hexo/source/css/highlight.css","path":"css/highlight.css","modified":0,"renderable":1}],"Cache":[{"_id":"themes/tree/README.md","hash":"3e7629cdae333f79e965e367030b084643bfa810","modified":1613998746200},{"_id":"themes/tree/_config.yml","hash":"c1437e43794af4ded5b97f59396ba099c0a82d63","modified":1613998746201},{"_id":"themes/tree/source/favicon.ico","hash":"268be0a863caae7c5a732fb8a911a81434f31117","modified":1613998746208},{"_id":"themes/tree/layout/post.ejs","hash":"b1a2a9f5d58c0670758e59b464101469a5cbb96c","modified":1613998746204},{"_id":"themes/tree/layout/index.ejs","hash":"101bd5d563884579882c8caaeafbc3139134bab4","modified":1613998746203},{"_id":"themes/tree/layout/layout.ejs","hash":"b1cbe3e0c52a8fa644a5adb97b31b5ecfdec2162","modified":1613998746204},{"_id":"themes/tree/source/404.html","hash":"cfa1b96d02d143d77c0ba519dab1c23de0cae6ee","modified":1613998746205},{"_id":"themes/tree/source/css/main.css","hash":"a374eb273c29e0c96cdbb11e3e204051c6a3dfcc","modified":1613998746207},{"_id":"themes/tree/source/js/main.js","hash":"3216da0a4e322b58917a94f9296ddca3823fd3a4","modified":1613998746208},{"_id":"themes/tree/layout/_partial/head.ejs","hash":"733fbbd69615f3161101d0eb2f559d22a43ef276","modified":1613998746202},{"_id":"themes/tree/layout/_partial/footer.ejs","hash":"eced3d82fd04757f224a12eeed0a250980278d57","modified":1613999410539},{"_id":"themes/tree/source/lib/jquery.pjax.js","hash":"13485a1e2dc9c8df28267549de1b8af8f39061d9","modified":1613998746215},{"_id":"themes/tree/layout/_partial/header.ejs","hash":"192d5d83437abdd7fdb443be6db36c465c321133","modified":1613998982769},{"_id":"themes/tree/layout/_partial/sidebar.ejs","hash":"ea6c595b9a1b0e743930adf395ee66697ff61ab1","modified":1613998746203},{"_id":"themes/tree/layout/_partial/totop.ejs","hash":"a94c4b350b76d21bb530095981049a2647cc6273","modified":1613998746203},{"_id":"themes/tree/source/lib/font-awesome/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1613998746210},{"_id":"themes/tree/source/lib/highlight/darcula.css","hash":"7740224d07375ddc321147dffabbfa83e39f0d8b","modified":1613998746211},{"_id":"themes/tree/source/lib/highlight/highlight.pack.js","hash":"84a7e42dfa8c44a422a8328277d660d9428fcea6","modified":1613998746212},{"_id":"themes/tree/source/lib/busuanzi/2.3/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1613998746209},{"_id":"themes/tree/source/lib/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1613998746214},{"_id":"themes/tree/source/lib/valine/Valine-1.3.10-min.js","hash":"e3a340d0c39eee2ae651284fda9d351e752fcbd0","modified":1613998746217},{"_id":"themes/tree/source/Tree.png","hash":"e5a30d5edf5aa2dc39fb4db7b4761b516826cf5b","modified":1613998746207},{"_id":"themes/tree/source/lib/valine/av-3.0.4-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1613998746219},{"_id":"source/_posts/学习笔记/iOS/iOS之Xcode.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869182},{"_id":"source/_posts/学习笔记/iOS/iOS之iOS-SDK.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869182},{"_id":"source/_posts/学习笔记/iOS/iOS之代码管理.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869182},{"_id":"source/_posts/学习笔记/iOS/iOS之代码重构.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869182},{"_id":"source/_posts/学习笔记/iOS/iOS之生态体系及结构.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869211},{"_id":"source/_posts/学习笔记/iOS/iOS之设计模式.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869304},{"_id":"source/_posts/学习笔记/iOS/iOS之多媒体/iOS之多媒体.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869183},{"_id":"source/_posts/学习笔记/iOS/iOS之多媒体/iOS之视频.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869183},{"_id":"source/_posts/学习笔记/iOS/iOS之多媒体/iOS之音频.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869183},{"_id":"source/_posts/学习笔记/iOS/iOS之大前端/Flutter.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617973442202},{"_id":"source/_posts/学习笔记/iOS/iOS之大前端/Vue.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617973442206},{"_id":"source/_posts/学习笔记/iOS/iOS之操作系统/Linux.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869197},{"_id":"source/_posts/学习笔记/iOS/iOS之操作系统/Unix.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869204},{"_id":"source/_posts/学习笔记/iOS/iOS之操作系统/iOS之RunLoop.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869205},{"_id":"source/_posts/学习笔记/iOS/iOS之操作系统/iOS之运行时.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869205},{"_id":"source/_posts/学习笔记/iOS/iOS之操作系统/操作系统.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617973442209},{"_id":"source/_posts/学习笔记/iOS/iOS之游戏/iOS游戏之Lua.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869210},{"_id":"source/_posts/学习笔记/iOS/iOS之游戏/iOS之游戏.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869210},{"_id":"source/_posts/学习笔记/iOS/iOS之游戏/iOS游戏之引擎.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869210},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/iOS之交互体验.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869211},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/iOS之动画.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869211},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/Tapd.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869308},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/禅道.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869309},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/项目管理.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617973442212},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/iOS之安全.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869274},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/iOS之持久化.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869275},{"_id":"source/_posts/学习笔记/iOS/iOS之开发工具/Charles.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869184},{"_id":"source/_posts/学习笔记/iOS/iOS之开发工具/OmniGraffle.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869185},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/AppleScript/AppleScript.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869237},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/Java/Java.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869256},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/MySQL/MySQL.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869256},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/PHP/PHP.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869271},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/Python/Pyhon.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869271},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/Swift/iOS编程语言之Swift.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614169869272},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/CI/Jira/Jira.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617716275721},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/CI/Jenkins/Jenkins.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617716275721},{"_id":"source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1614256529167},{"_id":"source/_drafts/React-Native.md","hash":"2412d266f980a81f269ab4c8d388cb67e999b56f","modified":1614171104949},{"_id":"source/_drafts/iOS查漏补缺.md","hash":"3e703a91743f86297d2a8a2f9f3108496834791f","modified":1617973442239},{"_id":"source/_drafts/博客写作计划.md","hash":"2618e80a60e5ddbb6aa39c45a8ee3015cf1b7b06","modified":1614091184938},{"_id":"source/_drafts/IM 系统设计/IM 系统设计.md","hash":"d1671ee91d038f8a5d29fcc902413a9cdf0410d7","modified":1617841906336},{"_id":"source/_posts/.DS_Store","hash":"58e1a428e59880daf1ac19f3c489d25b7ee2a20d","modified":1614479289257},{"_id":"source/_drafts/计算机/iOS 面试题.md","hash":"296649e2edc6e93f410af51bb4c0b541903c62ae","modified":1617025814349},{"_id":"source/_drafts/计算机/UML 笔记.md","hash":"34f91708a9cd00938c96d523e888e371900a588d","modified":1617025870244},{"_id":"source/_drafts/近期目标.md","hash":"c94af9cacdceee835c417d9a29764591f41c8431","modified":1611839108074},{"_id":"source/_drafts/学习计划.md","hash":"23c1c3c602c8680f1fc14dfa580e028ff9642442","modified":1611839314613},{"_id":"source/_drafts/计算机/算法/哈希.md","hash":"3b39fd54bc54edd9362f145ea0c9ed1339ef06d0","modified":1617841906337},{"_id":"source/_posts/学习笔记/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1614255685528},{"_id":"source/_drafts/计算机/算法/iOS之算法.md","hash":"cae23738fe693e62a96a3e19cd059707ca721877","modified":1617841906336},{"_id":"source/_posts/学习笔记/Flutters/isolates.dart","hash":"9d33487133c944fd439124a4aaa9624b446036b4","modified":1564644880000},{"_id":"source/_posts/学习笔记/iOS/iOS 博主与网站.md","hash":"c6c07f7fc9335bb911e5567d837b8db86f324a9b","modified":1616834105900},{"_id":"source/_posts/学习笔记/iOS/iOS之AppleService.md","hash":"e7b2c1c4e491579c79fef6e23c292d3515d07f7d","modified":1617718890898},{"_id":"source/_posts/学习笔记/iOS/iOS之Block.md","hash":"9f375da8b1670a4a15896995b08f08cbb6e2d7bd","modified":1617973442201},{"_id":"source/_posts/学习笔记/iOS/iOS之内存管理.md","hash":"076bb4bedbce9ca3ba9f7c8c0118c83b391bbb4a","modified":1617718760863},{"_id":"source/_posts/学习笔记/iOS/iOS之单元测试.md","hash":"8bffac077d26545ef0d9c6bcbd9d389d4d02797d","modified":1617841906337},{"_id":"source/_posts/学习笔记/iOS/iOS之开源库.md","hash":"c2d398bdda47eb8ed13cfa972f6dbf18d4dc9023","modified":1617718479166},{"_id":"source/_posts/学习笔记/iOS/iOS之架构·框架.md","hash":"bb648307ee1ff048a411fa99035a6e572a4fa8c6","modified":1614169869210},{"_id":"source/_posts/学习笔记/iOS/iOS之开发规范化.md","hash":"c44eb6a2e98ac0833c894ff5d4d5d983bf6c6380","modified":1617718700483},{"_id":"source/_posts/学习笔记/iOS/iOS之事件传递.md","hash":"8f9160c46ba108221fd11c93ab94713e071b5958","modified":1614169869182},{"_id":"source/_posts/学习笔记/iOS/iOS之消息转发.md","hash":"2d840d24a9ab538cd5780c3d301117f3390a5366","modified":1617896490722},{"_id":"source/_posts/学习笔记/iOS/iOS之组件化.md","hash":"827fd705ed34918402dc01419fc622673eb4b30f","modified":1617841906339},{"_id":"source/_drafts/计算机/网络/DNS/DNS.md","hash":"cf77bc26a5be1c6f803c337f558ac2e5d3b4f16f","modified":1615605397726},{"_id":"source/_posts/学习笔记/iOS/index.md","hash":"2bf85397bcd9caa3c11a778ff7402ea8d932a964","modified":1617973442212},{"_id":"source/_posts/学习笔记/Web/CSS/CSS 上手.md","hash":"333dafcbeae4a86982a3815fa6838dba44d7f821","modified":1617716275715},{"_id":"source/_posts/学习笔记/Web/Javascript/JavaScript 知识点.md","hash":"75c8677dc1b7051e839514998fdedbba9250b63e","modified":1617716275715},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Flutter_Render_Object.png","hash":"65cfd19cd2486a32191c096cf15a608a056e09f1","modified":1614169869171},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Flutter_Framework.png","hash":"ec6e8c964e1e0668e7559f2e7ebffbc549538dd4","modified":1614169869170},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Flutter_Frameworks.png","hash":"b5dca9eb8afaf9416f23281990e67e3c3f678bd8","modified":1614169869170},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Flutter_iOS_Android.png","hash":"98ffd3b697dc442f1c3f675fa31f045c09a2c036","modified":1614169869172},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Launch_flow_ios.webp","hash":"ef2a43e957cde6e50b02686215b25cdd42d77472","modified":1614169869173},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Flutter指南.md","hash":"8b341c0115b531af19c323a568a93cdabc25f579","modified":1614171852629},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Memory_Manager_01.webp","hash":"cdb847954e6905453a7228adc54cd4ea8c5eca92","modified":1614169869174},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Memory_Manager_02.webp","hash":"20c2775fd7398e6e7165c2f7852acaa61900d8eb","modified":1614169869174},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Rendering_pipeline.png","hash":"dd6c572e6e5b47bb8d1f5cd42d9044631cdd7452","modified":1614169869175},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Render_flow.webp","hash":"873ddcafb6c1ea7a8706ece78e3f464c95f70edf","modified":1614169869174},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Widgets.png","hash":"b30a2c8bce0df0b107c9fdc65ba78380c7c6c5e2","modified":1614169869176},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Widget_update.png","hash":"f697ec1645a57163a7d424131e78a5e3e9fc5bff","modified":1614169869176},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/iOS_Render_flow.webp","hash":"995b43e8e9728f536b540db7a1e85397ecf9dd0b","modified":1614169869177},{"_id":"source/_posts/学习笔记/Flutters/Flutter可行性技术调研/Flutter 可行性调研技术点.md","hash":"db0c6f6fd3531baa7c0b3ddb4d5ae24f4d83c5ed","modified":1614169869177},{"_id":"source/_posts/学习笔记/Flutters/Flutter可行性技术调研/Flutter 技术可行性调研.md","hash":"0e08921c97fb2621c8e033d3bdafe5b1a3593809","modified":1614169869178},{"_id":"source/_posts/学习笔记/iOS/iOS之大前端/JSPatch原理.md","hash":"638d382f78c9c01b3b103c947407032d13aadf18","modified":1617973442202},{"_id":"source/_posts/学习笔记/iOS/WWDC/WWDC2019.md","hash":"efb65d1f42fcc73d1605bb243fb3f1a86d04a802","modified":1617973442201},{"_id":"source/_posts/学习笔记/iOS/iOS之多媒体/iOS之图片.md","hash":"39eeaea293bb7113ac7f67c7d45d2256d0b8f718","modified":1614169869183},{"_id":"source/_posts/学习笔记/iOS/iOS之大前端/跨端.md","hash":"3abcddfa6b742251024c8c61f85acb8680f84186","modified":1617973442237},{"_id":"source/_posts/学习笔记/iOS/iOS之大前端/JavaScript.md","hash":"d806c509225142c0eea2adbb87b903df79163b0d","modified":1617973442239},{"_id":"source/_posts/学习笔记/iOS/iOS之并发编程/iOS之GCD.md","hash":"6428344887bc3a5c64662cc81d9a85bf49be60ea","modified":1617973442236},{"_id":"source/_posts/学习笔记/iOS/iOS之并发编程/RunLoop.md","hash":"2529eccaa65a94f1a43ef6597c481252c412e702","modified":1617973442236},{"_id":"source/_posts/学习笔记/iOS/iOS之并发编程/并发编程.md","hash":"b438e4ad8aed44f2a8fd2df2f62b60718209c7ee","modified":1617973442235},{"_id":"source/_posts/学习笔记/iOS/iOS之并发编程/iOS之多线程.md","hash":"dd64f298069c35deb85fb3c30f3bb784e8fcf47a","modified":1617973442235},{"_id":"source/_posts/学习笔记/iOS/iOS之文档/jazzy.yaml","hash":"c1c7cd35cf89ecd74e0d93c07c3a0de9b395e75a","modified":1614169869206},{"_id":"source/_posts/学习笔记/iOS/iOS之文档/文档生成.md","hash":"f7f0f2adbaaae3603406d75d02c35a51809dbb1e","modified":1614169869206},{"_id":"source/_posts/学习笔记/iOS/iOS之操作系统/i18n_hk","hash":"ccb9e3269c2fdb1e63d059098fdb05af8ea07a0e","modified":1614169869204},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/iOS之界面显示.md","hash":"8ddb8f6ecfcbd57d5793b8c5f60d8178b28562b0","modified":1617973442210},{"_id":"source/_posts/学习笔记/iOS/iOS之操作系统/i18n_original","hash":"db9ee2d1b41dcd2708b758fe0351b69fb509c1a1","modified":1614169869205},{"_id":"source/_posts/学习笔记/iOS/iOS之操作系统/shell 配置文件","hash":"15a91d21bb2bc8fd2eb9efe97d1887ea46de2398","modified":1614169869205},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/iOS排版之CoreText.md","hash":"76d2d417e0e5be6c442bd9c13bfb5068738a70e3","modified":1617973442210},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/iOS排版之TextKit.md","hash":"e1ec47d5c59dfd8a5bd732ae37fd1d8462598140","modified":1617973442211},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/iOS自动布局.md","hash":"181593090b8a1940f8c8f7a9c255bed13c95f7e4","modified":1617973442212},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/iOS排版之WebKit.md","hash":"f4ce625989936e72d26fe53607b97395a589bc7b","modified":1617893062559},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/布局.md","hash":"0f9c836a5149424244f300a9d7486f8292760452","modified":1616504168751},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/iOS之CI集成.md","hash":"f9c831caf0650136b5ea045df0f7358723da55fd","modified":1617841906342},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/iOS自动化编译打包.md","hash":"45ea2145fafce23723024f171cd7acd42b7e2b18","modified":1617716275723},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/界面渲染.md","hash":"0d899ce72d589546b47eb632cab7aff268c21b2c","modified":1617895519667},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/iOS项目管理之杂项.md","hash":"b5ba587244986d8c8e59cf1510250ffcccfb744f","modified":1617716275724},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/iOS之日志系统.md","hash":"f3c89ee0a326819dcb602dffa463f5d4bb39f5bc","modified":1617716589024},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/iOS之协议.md","hash":"2ca564dbcfe28b0b0caf1dc98cbf1797ae526ece","modified":1617718175957},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/iOS之网络.md","hash":"d4b5072d912786705ed5925faf29e149dc002e96","modified":1617291357256},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/iOS之数据库及其管理.md","hash":"09955fc7521e7a0fa3aa2c08b1e2fb0605928f06","modified":1614169869275},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/移动端网络优化.md","hash":"d3f6b93ff0fc8a6817c07b5c7a9276eda3f29b8e","modified":1616504074142},{"_id":"source/_posts/学习笔记/iOS/iOS之性能优化/Mac-O文件.md","hash":"d450aa291a94cb0c48963f86255a997a049ce2da","modified":1614169869190},{"_id":"source/_posts/学习笔记/iOS/iOS之性能优化/dyld.txt","hash":"e9abecac3e2ead430d0f188e20c801ba8ff81a5d","modified":1614169869190},{"_id":"source/_posts/学习笔记/iOS/iOS之性能优化/iOS之dyld环境变量介绍.md","hash":"a5483f463977de86a7b39e144e15d406e3773bfd","modified":1614169869191},{"_id":"source/_posts/学习笔记/iOS/iOS之性能优化/iOS 之功耗优化.md","hash":"45a023e09827b95f64625e69d77955cf44b9e525","modified":1614169869191},{"_id":"source/_posts/学习笔记/iOS/iOS之性能优化/iOS之性能优化.md","hash":"e4a23e5ded013a73e3c64ff69a065f8a9c8f9985","modified":1614169869192},{"_id":"source/_posts/学习笔记/iOS/iOS之性能优化/iOS之启动优化-GCC attribute.md","hash":"0925093b66b37813a88d6a6dcb6892946e2b7321","modified":1616834050635},{"_id":"source/_posts/学习笔记/iOS/iOS之性能优化/iOS之启动优化.md","hash":"1db32cce3ea8dd8b3419d81a4c3f93ea538ad314","modified":1614169869192},{"_id":"source/_posts/学习笔记/iOS/iOS之开发工具/Git提交代码规范.md","hash":"a40859d4a04b4d81a57efe2811112e2f74dc53d3","modified":1614169869185},{"_id":"source/_posts/学习笔记/iOS/iOS之开发工具/cocoapod 库.md","hash":"40c0b6e705b6fce8aa47d88e35661cce7cc4d69d","modified":1617716275717},{"_id":"source/_posts/学习笔记/iOS/iOS之开发工具/cocoapod.md","hash":"a8cdc1894ab9c4251df2a099e64f30cd14162be5","modified":1617841906339},{"_id":"source/_posts/学习笔记/iOS/iOS之开发工具/监控插件库.md","hash":"0ce48d976f6c05222da5dd0c3de57e50db4c92e7","modified":1617975898831},{"_id":"source/_posts/学习笔记/iOS/iOS之开发工具/LLDB.md","hash":"8da1caa2f967a71c42665f63bd51f8770be6a012","modified":1614169869185},{"_id":"source/_posts/学习笔记/iOS/iOS之开发工具/iOS之开发工具.md","hash":"03eac607928d64da148d04c432436f64eb1a2c0b","modified":1614169869186},{"_id":"source/_posts/学习笔记/iOS/iOS之开发工具/iOS之逆向.md","hash":"9cde896b0cafc24d4cb7b190351f4189b8901e4a","modified":1617975001622},{"_id":"source/_posts/学习笔记/Flutters/Flutter可行性技术调研/Resources/Codec.jpg","hash":"229aa78887c44e32c2409595cd43485abc9a55c7","modified":1614169869178},{"_id":"source/_posts/学习笔记/Flutters/Flutter可行性技术调研/Resources/BinaryMessenger.jpg","hash":"239477753c1f8fdbfd91c885e4a3163d03ed0737","modified":1614169869178},{"_id":"source/_posts/学习笔记/Flutters/Flutter可行性技术调研/Resources/Projects.png","hash":"064a0ce36a94c936269080a215496bc0680ff7c8","modified":1614169869179},{"_id":"source/_posts/学习笔记/Flutters/Flutter可行性技术调研/Resources/files-module.png","hash":"7393c4ee6ba2538f34e2c6b39c98a1c2deb97d58","modified":1614169869179},{"_id":"source/_posts/学习笔记/Flutters/Flutter可行性技术调研/Resources/flutter.md","hash":"94da51d87984f1a0cc6f635dbf7627659e6037da","modified":1614169869180},{"_id":"source/_posts/学习笔记/Flutters/Flutter可行性技术调研/Resources/message-dart-native.jpg","hash":"532396a215beb2a412b4b051ad255fa9ca7ce8d1","modified":1614169869180},{"_id":"source/_posts/学习笔记/Flutters/Flutter可行性技术调研/Resources/message-native-dart.jpg","hash":"45123fe86cf603a24511cc3f87365a0164b19490","modified":1614169869180},{"_id":"source/_posts/学习笔记/iOS/iOS之大前端/React-Native/与原生端通信.md","hash":"32a08a950d7b8238178eb20b1fe094cfead7e9ee","modified":1617973442238},{"_id":"source/_posts/学习笔记/iOS/iOS之大前端/React-Native/原生模块.md","hash":"9d6e0cf21e381820795bace03648c57d3874160f","modified":1617973442237},{"_id":"source/_posts/学习笔记/iOS/iOS之大前端/React-Native/React-Native.md","hash":"0f9e7914505d13b49dfe6239897e00597030c0ca","modified":1617973442239},{"_id":"source/_posts/学习笔记/Flutters/Flutter可行性技术调研/Resources/type.jpg","hash":"731002ab142c7d1edd7f6007eabdb00537003712","modified":1614169869181},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/Assemble/Assemble.md","hash":"7d7a4c536224e80b51a25ea5169c7ce8ad03a3b5","modified":1614169869238},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/CAlians/.DS_Store","hash":"7b6fc517e21a820ae8ee208e3d8036a44f4c4d54","modified":1614182388910},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/CAlians/C_Catalog.md","hash":"0f7e227ccdcb0394d98eb70686eca2e68b15307e","modified":1614182438197},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/CAlians/Size_t.c","hash":"f3cd48d82e372ad6ab2a0ebf1d03880b6fac668a","modified":1614169869255},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/CAlians/_Size_t","hash":"d39db2d0a816728ed57a802ae17c82c3b6205f02","modified":1614182412532},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/CAlians/boost-b2.md","hash":"5bb9109173fb4b8f4c850174896421a0d95126f4","modified":1614169869255},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/CAlians/g++.md","hash":"20a20e967e01369aa109044485914d20a8d824d9","modified":1614169869256},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/Objective-C/OC进阶.md","hash":"ce8a62f52ceda6b89fafe4887900fd70e19bc8cd","modified":1615605758078},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/Objective-C/OC-Class.png","hash":"793cd3d4c3e61baff1b6d00ed0c336a82fa47ca1","modified":1614169869260},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/Objective-C/Objective-C基本类型.md","hash":"be0d122d13b2c6012492c54415e73cdc41dee496","modified":1617975188363},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/Objective-C/iOS编程语言之Objective-C.md","hash":"e1fb8a7740de701bceac6b132552d1b90d105388","modified":1614557540417},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/Shell/Shell.md","hash":"86caec55f5548edc39c2c811463985d03637b617","modified":1617976133102},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/Swift/Swift 构造器.md","hash":"81790ae8790764d813800ca898897615fcaf244b","modified":1614169869272},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/Swift/值类型与引用类型.md","hash":"f3f89595d99a988bb36a616718911b1565202c25","modified":1614169869272},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/resources/charicteristics.gif","hash":"8122438ad1cd5d92e100ed52936a0c53aac1d5ea","modified":1614169869273},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/resources/autolayout_hugging.png","hash":"ada86b34e6e810076b33a99283ea6495eed907ea","modified":1614169869213},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/resources/ctframe.png","hash":"51b576625be2458f4674686b66dce1baa01f2bd5","modified":1614169869225},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/resources/text_glpy_info.gif","hash":"21fad40ffdf116a7655f7f3385c52e4c99dfc1cf","modified":1614169869225},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/resources/text_glpy_info_1.gif","hash":"21997f431ef1983d6fdd9e4da44e62eee640ea60","modified":1614169869226},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/ShellScripts/boot_ios_simulator.sh","hash":"3b25a28516e7c0143e267f6fbb1f0eda1bcac5f6","modified":1617716275722},{"_id":"source/_posts/学习笔记/iOS/iOS之界面显示/resources/textkit_archtecture.png","hash":"79fb1eecfc1814847ceb496eebcfa74a9ceacb92","modified":1614169869237},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/ShellScripts/iOS之模拟器.md","hash":"f8b6859b843fbebc5b30bb955c1f7783394da9d4","modified":1617841906341},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/resource/HTTP.png","hash":"719ea5db5519afd1755fe2e80200345eafc92efe","modified":1614169869277},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/resource/Ethernet.png","hash":"fa101d484986507ff8fec409538e6345f7c91d2e","modified":1614169869277},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/resource/NetLayer.jpg","hash":"d843f4d6632ab41b36fd614df844f3cee412fe56","modified":1614169869298},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/resource/TCP.gif","hash":"9c5db8ec14506d4fc7274bc3e2c65acf30782068","modified":1614169869298},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/resource/stream.png","hash":"32505642d82a40259daba7cee56c7d60a54d14bb","modified":1614169869302},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/resource/protocols.png","hash":"592a706b8f37aec9f6f5ddb746e97e2de7d24335","modified":1614169869301},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/resource/stream2.jpg","hash":"b69d70c0dce95e5664a6861e5f152c1cbf24442a","modified":1614169869303},{"_id":"source/_posts/学习笔记/iOS/resources/MessageForward/swift_function_dispatch.png","hash":"ccb2e334e8a648118354f8eace8bc6735e067636","modified":1616504074835},{"_id":"source/_posts/学习笔记/iOS/iOS之性能优化/KSCrash/KSCrash 简明教程.md","hash":"71f7f5bd63395260c9c90f6f7e356ce23f4459b1","modified":1615605817586},{"_id":"source/_posts/学习笔记/iOS/iOS之性能优化/KSCrash/原理.md","hash":"cc0e157625da4765936ca750a8cd8d16aee22f44","modified":1615605855998},{"_id":"source/_posts/学习笔记/iOS/iOS之性能优化/异常处理/iOS之异常处理.md","hash":"8785677f2b0428b832dbdafb168e2fb394e00ece","modified":1615563255500},{"_id":"source/_posts/学习笔记/iOS/iOS之开发工具/Appium/Appium 快速上手.md","hash":"3c21650f6a38063b9d72ae8f703a5d456b0003af","modified":1617716275716},{"_id":"source/_posts/学习笔记/iOS/iOS之性能优化/异常处理/手动解析 iOS crash 日志.md","hash":"0eb2999ff43e58edb8f49a123bfd311babec11fe","modified":1615563372662},{"_id":"source/_posts/学习笔记/iOS/iOS之开发工具/Vim/vim 常用操作.md","hash":"904076265aa6b1f8c0b75d0d9bc1105c99216a3e","modified":1617716275717},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/CI/Applestore Connect/App Store Connect API.md","hash":"13382a45722ea8962bf5355f5632e8b604e386b7","modified":1617716275720},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/CAlians/C++/C++.md","hash":"06a610da61c84f7d1f4eb557805fb8397553a0f1","modified":1614254240327},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/CI/Shell/fastlane.sh","hash":"eac80d31d38d750f15578a4bdaecd857e4435286","modified":1617716275721},{"_id":"source/_posts/学习笔记/iOS/resources/CrashLog/sd_doctor_ios.app.dSYM/Contents/Info.plist","hash":"e72eb6d7c67ededd19ef0a7d4f6e550874ad5ac1","modified":1616504075377},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Rendering_pipe.png","hash":"18dd57b8110ae1be02fe637faed066cd5b0774a3","modified":1614169869175},{"_id":"source/_posts/学习笔记/Flutters/Flutter可行性技术调研/Resources/files.png","hash":"8a394d03a63df69a210df23b0a5e1b06fae87ae3","modified":1614169869180},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/resource/IP.png","hash":"d1e2d3d8913024b6e04273dbd265d67c31f6da82","modified":1614169869278},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/resource/IP1.png","hash":"9b2dd2e9a330e97ed7347890e4ee5fd7fe9b2a8a","modified":1614169869291},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/resource/UDP.jpeg","hash":"8ed5d7dc77203f9c76e9a3d86955e12c2acf598d","modified":1614169869299},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/resource/falkHead.jpg","hash":"3f8d4dd0627ad5d0798d6a6dd40328a9f88e5ab1","modified":1614169869300},{"_id":"source/_posts/学习笔记/iOS/iOS之网络及安全/resource/stream1.png","hash":"45a1969058909965cb4c7f47e802f16c7a45837b","modified":1614169869303},{"_id":"source/_posts/学习笔记/iOS/resources/MessageForward/oc_message_froware.png","hash":"4038e408b9563622cad50fe73bd869154e405f62","modified":1616504074707},{"_id":"source/_posts/学习笔记/iOS/resources/CrashLog/sd_doctor_ios  2019-3-26, 7-02 PM.crash","hash":"84c28c21349ba4870f91676cc600c9737a1ef40f","modified":1616504075379},{"_id":"source/_posts/学习笔记/iOS/iOS之开发工具/resources/vim.png","hash":"7b585200bb64048c738af838d70f34ded726954f","modified":1617716275719},{"_id":"source/_posts/学习笔记/iOS/resources/universal_link.png","hash":"e845749355e15e5cc48bbe5fa55ef2e261234577","modified":1614169870317},{"_id":"source/_posts/学习笔记/Flutters/Flutters指南/Dart.png","hash":"489b2a968c93125bed2c2ad34231a96ea4a75655","modified":1614169869169},{"_id":"source/_posts/学习笔记/iOS/iOS之编程语言/Assemble/assemble.pdf","hash":"ce3ce2c52d734de42cdf924fdafd78116e06bdc1","modified":1614169869244},{"_id":"source/_posts/学习笔记/iOS/resources/iOSMap/ios_study.png","hash":"f063e0e8c518d3b0ad964bfe6bc74edbf3974fc5","modified":1616504074833},{"_id":"source/_posts/学习笔记/iOS/iOS之项目管理/resources/Screen Shot 2019-05-19 at 4.20.37 PM.png","hash":"c55e40684bed6756b4e3a2b92299528e908f93b4","modified":1617716275729},{"_id":"source/_drafts/计算机/网络/网络通信协议/ 网络通讯协议关系图[中文珍藏版][高清矢量图](52im.net)_2020版.pdf","hash":"9a18efc16fa2f43953b7db63a6a17d87cbdada17","modified":1617282876233},{"_id":"source/_posts/学习笔记/Android/Android屏幕适配.pptx","hash":"0a5dbf1f95a6f65e28264e6b892083ae1b2edd06","modified":1562918713000},{"_id":"source/_drafts/计算机/网络/网络通信协议/仅TCP-IP协议图(A3纸张规格)_2020.png","hash":"b680b274d62949a9d44ad48fb1228496ce059053","modified":1617282876246},{"_id":"source/_drafts/计算机/网络/网络通信协议/史上最全中文版网络通讯协议关系图(52im.net)-2.2MB.png","hash":"389cfc2e539e6d76d5844fe740e1274fa77e6241","modified":1617282876261},{"_id":"source/_posts/学习笔记/iOS/resources/CrashLog/sd_doctor_ios.app.dSYM/Contents/Resources/DWARF/sd_doctor_ios","hash":"8adb8f885cf7463ef6192d22e4e56615c3e4a1c7","modified":1616504075250},{"_id":"themes/beautiful-hexo/.gitignore","hash":"4b40e2bf9a87584f198091434ed6f7ebbb829497","modified":1617977188025},{"_id":"themes/beautiful-hexo/README.md","hash":"86f5e4ff187c894b41dc33ba16e503b5e5053ae6","modified":1617977188026},{"_id":"themes/beautiful-hexo/LICENSE","hash":"99f2c87ae44734a9285212301c19293d2495bf79","modified":1617977188025},{"_id":"themes/beautiful-hexo/_config.yml","hash":"9775dae8beeedc1ad8a8eb678c7cc2298d4a28dd","modified":1617977188026},{"_id":"themes/beautiful-hexo/package.json","hash":"d84cf6dc4ebd800a768501843180341e87a84ae3","modified":1617977188055},{"_id":"themes/beautiful-hexo/languages/en.yml","hash":"edca6efa5afd7ca478391bd24be970d2c04ddfbd","modified":1617977188035},{"_id":"themes/beautiful-hexo/languages/es.yml","hash":"40e164f230acf2cc7e14fb1ea699fc37fbe5e539","modified":1617977188035},{"_id":"themes/beautiful-hexo/languages/it.yml","hash":"806ca5d4d65e933e8d53789531af5628de717a3f","modified":1617977188036},{"_id":"themes/beautiful-hexo/languages/ja.yml","hash":"32012499921034ea669cabede5a5f87c87c92220","modified":1617977188036},{"_id":"themes/beautiful-hexo/languages/pt-br.yml","hash":"b3e0fecfbde36c3ac1b8516882fa6e4568e153c5","modified":1617977188037},{"_id":"themes/beautiful-hexo/languages/ru.yml","hash":"df23b6d4d0eb1c0a257a2ec63d5bb7b372d2dd3d","modified":1617977188037},{"_id":"themes/beautiful-hexo/languages/zh-cn.yml","hash":"538fa673943ef185d6af23414693042c24b18684","modified":1617977188038},{"_id":"themes/beautiful-hexo/source/hexo.png","hash":"e814051ff5e255deebff24733f760a898f8f2e69","modified":1617977188065},{"_id":"themes/beautiful-hexo/layout/archive.jade","hash":"b599d808e8f400244bdf84452551ea8ea5a4c70b","modified":1617977188038},{"_id":"themes/beautiful-hexo/layout/index.jade","hash":"4aa0a20b9dcbd0905fcfb2589362a41d523d72c2","modified":1617977188038},{"_id":"themes/beautiful-hexo/layout/page.jade","hash":"8ccd83e78150213c21d5941846cdef757f37c581","modified":1617977188039},{"_id":"themes/beautiful-hexo/layout/post.jade","hash":"afba374e8ba51e15a8d879cbe77994357fbc972a","modified":1617977188054},{"_id":"themes/beautiful-hexo/layout/tags.jade","hash":"30cdfc91a6960895c31a3e98cc22815756cd9940","modified":1617977188054},{"_id":"themes/beautiful-hexo/source/js/main.js","hash":"9e9bf3864ac1db24c5b20f46d92557b815d36d93","modified":1617977188065},{"_id":"themes/beautiful-hexo/source/css/blueprint-dark.png","hash":"725b992538a19f5ded0329c8a778dcd74bca7522","modified":1617977188062},{"_id":"themes/beautiful-hexo/source/css/main-minimal.css","hash":"e2b7f8ccfdb858c3969c756aa94a761970349d68","modified":1617977188063},{"_id":"themes/beautiful-hexo/source/css/main.css","hash":"4068f67e04bad6565973ee7d6830879f2093cbd8","modified":1617977188063},{"_id":"themes/beautiful-hexo/source/css/normalize.css","hash":"6924ce12bf79586ce0c095157aed4438e97bbe89","modified":1617977188064},{"_id":"themes/beautiful-hexo/source/css/normalize.min.css","hash":"a8d03b757f75752e15aa9e43ed8c071cb50e848d","modified":1617977188064},{"_id":"themes/beautiful-hexo/source/css/pygment_highlights.css","hash":"f4e5374eae88aa573b9bef83ae131a0f05cc94e7","modified":1617977188064},{"_id":"themes/beautiful-hexo/source/css/highlight.css","hash":"3c0cd05d7c1e3d00203e72a3f6ac99f521e2455c","modified":1617977188063},{"_id":"themes/beautiful-hexo/layout/partial/base.jade","hash":"396af6da8c6b16f7982a16b128b81b8817b59624","modified":1617977188039},{"_id":"themes/beautiful-hexo/layout/partial/comment.jade","hash":"49af5426ddae4bf2633aeec5b2cdababe3eff69a","modified":1617977188039},{"_id":"themes/beautiful-hexo/layout/partial/disqus.jade","hash":"9d9044a555342cc01698cbeb1259223ed41f46bc","modified":1617977188040},{"_id":"themes/beautiful-hexo/layout/partial/facebook-comments.jade","hash":"e13dd7ededa41c30cdbd0ea9157175e1be4ad5a7","modified":1617977188040},{"_id":"themes/beautiful-hexo/layout/partial/footer-scripts.jade","hash":"474495978b0bf560cb491130e51c9a5adcc7c187","modified":1617977188041},{"_id":"themes/beautiful-hexo/layout/partial/footer.jade","hash":"af990c40dbde9bd44aab32331efda6179f9d7eec","modified":1617977188041},{"_id":"themes/beautiful-hexo/layout/partial/google_analytics.jade","hash":"4972fd998aa0ac476c4a4a497407b80fe3dc1af8","modified":1617977188041},{"_id":"themes/beautiful-hexo/layout/partial/head.jade","hash":"0182c781ae906d002f984179d7b40d268e0ac641","modified":1617977188042},{"_id":"themes/beautiful-hexo/layout/partial/index-header.jade","hash":"b4db74194f0500a5786b3e385c39965562ce0806","modified":1617977188047},{"_id":"themes/beautiful-hexo/layout/partial/nav.jade","hash":"efdb2145ca041f4828269f12125e88ac78ac4c8c","modified":1617977188050},{"_id":"themes/beautiful-hexo/layout/partial/netease.jade","hash":"bc67e987ed3405a92cbc0f5bc16bc4279811e592","modified":1617977188051},{"_id":"themes/beautiful-hexo/layout/partial/post-meta.jade","hash":"bb0acc88e7527e3d95de2f2b6029957b96a0e7cc","modified":1617977188053},{"_id":"themes/beautiful-hexo/source/bigimgs/01.jpg","hash":"ae76cf647dbafb8028af35b4ffceef8b2e1e9e90","modified":1617977188057},{"_id":"themes/beautiful-hexo/source/bigimgs/02.jpg","hash":"2653ffdd705d4e6976a0bf9fab46422b402bac1e","modified":1617977188059},{"_id":"themes/beautiful-hexo/source/bigimgs/03.jpg","hash":"356f0a8c82e467f931cde454b398738e27feeadf","modified":1617977188062},{"_id":"themes/beautiful-hexo/images/hexo-preview.png","hash":"7b7f2e94d787da46dc74f4e070d6cd74a8ae0f7f","modified":1617977188031}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"","source":"_posts/学习笔记/iOS/iOS之Xcode.md","raw":"","slug":"学习笔记/iOS/iOS之Xcode","published":1,"date":"2021-02-24T12:31:09.182Z","updated":"2021-02-24T12:31:09.182Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tf90000w37ugp27fape","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之iOS-SDK.md","raw":"","slug":"学习笔记/iOS/iOS之iOS-SDK","published":1,"date":"2021-02-24T12:31:09.182Z","updated":"2021-02-24T12:31:09.182Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tff0001w37ufo958h3f","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之代码重构.md","raw":"","slug":"学习笔记/iOS/iOS之代码重构","published":1,"date":"2021-02-24T12:31:09.182Z","updated":"2021-02-24T12:31:09.182Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfh0002w37ug5rd4wc4","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之代码管理.md","raw":"","slug":"学习笔记/iOS/iOS之代码管理","published":1,"date":"2021-02-24T12:31:09.182Z","updated":"2021-02-24T12:31:09.182Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfi0003w37u8r8pdkdr","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之生态体系及结构.md","raw":"","slug":"学习笔记/iOS/iOS之生态体系及结构","published":1,"date":"2021-02-24T12:31:09.211Z","updated":"2021-02-24T12:31:09.211Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfj0004w37uawiz22t7","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之设计模式.md","raw":"","slug":"学习笔记/iOS/iOS之设计模式","published":1,"date":"2021-02-24T12:31:09.304Z","updated":"2021-02-24T12:31:09.304Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfk0005w37u3cel6y9p","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之多媒体/iOS之多媒体.md","raw":"","slug":"学习笔记/iOS/iOS之多媒体/iOS之多媒体","published":1,"date":"2021-02-24T12:31:09.183Z","updated":"2021-02-24T12:31:09.183Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfl0006w37uawbgfrzz","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之多媒体/iOS之视频.md","raw":"","slug":"学习笔记/iOS/iOS之多媒体/iOS之视频","published":1,"date":"2021-02-24T12:31:09.183Z","updated":"2021-02-24T12:31:09.183Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfl0007w37udcxvep70","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之大前端/Flutter.md","raw":"","slug":"学习笔记/iOS/iOS之大前端/Flutter","published":1,"date":"2021-04-09T13:04:02.202Z","updated":"2021-04-09T13:04:02.202Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfm0008w37u3p9bfna1","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之多媒体/iOS之音频.md","raw":"","slug":"学习笔记/iOS/iOS之多媒体/iOS之音频","published":1,"date":"2021-02-24T12:31:09.183Z","updated":"2021-02-24T12:31:09.183Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfn0009w37u25goffnj","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之大前端/Vue.md","raw":"","slug":"学习笔记/iOS/iOS之大前端/Vue","published":1,"date":"2021-04-09T13:04:02.206Z","updated":"2021-04-09T13:04:02.206Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfo000aw37uc2xs08ah","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之操作系统/Linux.md","raw":"","slug":"学习笔记/iOS/iOS之操作系统/Linux","published":1,"date":"2021-02-24T12:31:09.197Z","updated":"2021-02-24T12:31:09.197Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfp000bw37ucxtb0dly","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之操作系统/iOS之RunLoop.md","raw":"","slug":"学习笔记/iOS/iOS之操作系统/iOS之RunLoop","published":1,"date":"2021-02-24T12:31:09.205Z","updated":"2021-02-24T12:31:09.205Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfq000cw37udhqvc4iv","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之操作系统/Unix.md","raw":"","slug":"学习笔记/iOS/iOS之操作系统/Unix","published":1,"date":"2021-02-24T12:31:09.204Z","updated":"2021-02-24T12:31:09.204Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfr000dw37uefi556pb","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之操作系统/iOS之运行时.md","raw":"","slug":"学习笔记/iOS/iOS之操作系统/iOS之运行时","published":1,"date":"2021-02-24T12:31:09.205Z","updated":"2021-02-24T12:31:09.205Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfr000ew37uecaaf8or","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之操作系统/操作系统.md","raw":"","slug":"学习笔记/iOS/iOS之操作系统/操作系统","published":1,"date":"2021-04-09T13:04:02.209Z","updated":"2021-04-09T13:04:02.209Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfs000fw37ufbbr83pg","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之游戏/iOS游戏之Lua.md","raw":"","slug":"学习笔记/iOS/iOS之游戏/iOS游戏之Lua","published":1,"date":"2021-02-24T12:31:09.210Z","updated":"2021-02-24T12:31:09.210Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tft000gw37uefq90v62","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之游戏/iOS之游戏.md","raw":"","slug":"学习笔记/iOS/iOS之游戏/iOS之游戏","published":1,"date":"2021-02-24T12:31:09.210Z","updated":"2021-02-24T12:31:09.210Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfu000hw37uepz58j7y","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之游戏/iOS游戏之引擎.md","raw":"","slug":"学习笔记/iOS/iOS之游戏/iOS游戏之引擎","published":1,"date":"2021-02-24T12:31:09.210Z","updated":"2021-02-24T12:31:09.210Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfv000iw37u7unm2470","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之界面显示/iOS之交互体验.md","raw":"","slug":"学习笔记/iOS/iOS之界面显示/iOS之交互体验","published":1,"date":"2021-02-24T12:31:09.211Z","updated":"2021-02-24T12:31:09.211Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfv000jw37uhzer175p","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之界面显示/iOS之动画.md","raw":"","slug":"学习笔记/iOS/iOS之界面显示/iOS之动画","published":1,"date":"2021-02-24T12:31:09.211Z","updated":"2021-02-24T12:31:09.211Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfw000kw37ucqivbxyg","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之项目管理/Tapd.md","raw":"","slug":"学习笔记/iOS/iOS之项目管理/Tapd","published":1,"date":"2021-02-24T12:31:09.308Z","updated":"2021-02-24T12:31:09.308Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfw000lw37udm1g68pa","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之项目管理/禅道.md","raw":"","slug":"学习笔记/iOS/iOS之项目管理/禅道","published":1,"date":"2021-02-24T12:31:09.309Z","updated":"2021-02-24T12:31:09.309Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfx000mw37u7bnnhqn9","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之项目管理/项目管理.md","raw":"","slug":"学习笔记/iOS/iOS之项目管理/项目管理","published":1,"date":"2021-04-09T13:04:02.212Z","updated":"2021-04-09T13:04:02.212Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfy000nw37u5d32g6dl","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之网络及安全/iOS之安全.md","raw":"","slug":"学习笔记/iOS/iOS之网络及安全/iOS之安全","published":1,"date":"2021-02-24T12:31:09.274Z","updated":"2021-02-24T12:31:09.274Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfy000ow37uatny780m","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之网络及安全/iOS之持久化.md","raw":"","slug":"学习笔记/iOS/iOS之网络及安全/iOS之持久化","published":1,"date":"2021-02-24T12:31:09.275Z","updated":"2021-02-24T12:31:09.275Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfz000pw37ugls4hl2j","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之开发工具/Charles.md","raw":"","slug":"学习笔记/iOS/iOS之开发工具/Charles","published":1,"date":"2021-02-24T12:31:09.184Z","updated":"2021-02-24T12:31:09.184Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tfz000qw37u9czdc519","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之开发工具/OmniGraffle.md","raw":"","slug":"学习笔记/iOS/iOS之开发工具/OmniGraffle","published":1,"date":"2021-02-24T12:31:09.185Z","updated":"2021-02-24T12:31:09.185Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tg0000rw37u0w6v8s02","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之编程语言/AppleScript/AppleScript.md","raw":"","slug":"学习笔记/iOS/iOS之编程语言/AppleScript/AppleScript","published":1,"date":"2021-02-24T12:31:09.237Z","updated":"2021-02-24T12:31:09.237Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tg1000sw37u6q4jhibj","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之编程语言/Java/Java.md","raw":"","slug":"学习笔记/iOS/iOS之编程语言/Java/Java","published":1,"date":"2021-02-24T12:31:09.256Z","updated":"2021-02-24T12:31:09.256Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tg1000tw37u24k447ld","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之编程语言/MySQL/MySQL.md","raw":"","slug":"学习笔记/iOS/iOS之编程语言/MySQL/MySQL","published":1,"date":"2021-02-24T12:31:09.256Z","updated":"2021-02-24T12:31:09.256Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tg2000uw37u8rt37otd","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之编程语言/PHP/PHP.md","raw":"","slug":"学习笔记/iOS/iOS之编程语言/PHP/PHP","published":1,"date":"2021-02-24T12:31:09.271Z","updated":"2021-02-24T12:31:09.271Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tg2000vw37u0fzx1wz2","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之编程语言/Python/Pyhon.md","raw":"","slug":"学习笔记/iOS/iOS之编程语言/Python/Pyhon","published":1,"date":"2021-02-24T12:31:09.271Z","updated":"2021-02-24T12:31:09.271Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tg5000ww37ucsau5z0t","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之编程语言/Swift/iOS编程语言之Swift.md","raw":"","slug":"学习笔记/iOS/iOS之编程语言/Swift/iOS编程语言之Swift","published":1,"date":"2021-02-24T12:31:09.272Z","updated":"2021-02-24T12:31:09.272Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tg6000xw37uc44q67nc","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之项目管理/CI/Jira/Jira.md","raw":"","slug":"学习笔记/iOS/iOS之项目管理/CI/Jira/Jira","published":1,"date":"2021-04-06T13:37:55.721Z","updated":"2021-04-06T13:37:55.721Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tg7000yw37ue6w591zh","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/学习笔记/iOS/iOS之项目管理/CI/Jenkins/Jenkins.md","raw":"","slug":"学习笔记/iOS/iOS之项目管理/CI/Jenkins/Jenkins","published":1,"date":"2021-04-06T13:37:55.721Z","updated":"2021-04-06T13:37:55.721Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tg8000zw37u8zumb44q","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"React-Native","_content":"","source":"_drafts/React-Native.md","raw":"---\ntitle: React-Native\ntags:\n---\n","slug":"React-Native","published":0,"date":"2021-02-24T12:51:44.945Z","updated":"2021-02-24T12:51:44.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tgj0010w37ucgfhbit2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"博客写作计划","_content":"\n## 一 iOS 部分\n\n### 1. 性能优化\n\n#### APP 启动优化\n\n1. Mac-O 文件\n\n#### 电量优化\n\n#### 网络优化\n\n#### 日志系统、埋点\n\n1. 日志系统\n   * 日志数据库与上报\n   * crash 日志与解析\n\n2. 埋点\n\n3. 监控\n\n#### 多任务\n\n1. 多线程\n   * 堆栈信息收集\n\n### 2. 工程化\n\n### 3. 组件化\n\n### 4. 语言部分\n\n#### Swift\n\n#### Objective-C\n\n1. 内存管理\n2. GCD\n3. Block\n\n### 5. 操作系统部分\n\n### 6. 算法与安全\n\n#### 算法\n\n#### 数据结构\n\n#### 安全\n\n### 7. 源码阅读\n\n### 8. 架构设计\n\n#### 设计模式\n\n#### 架构\n\n## 二 Flutter 部分\n\n## 三 前端部分\n\n## 四 Android 部分\n","source":"_drafts/博客写作计划.md","raw":"---\ntitle: 博客写作计划\ntags:\n---\n\n## 一 iOS 部分\n\n### 1. 性能优化\n\n#### APP 启动优化\n\n1. Mac-O 文件\n\n#### 电量优化\n\n#### 网络优化\n\n#### 日志系统、埋点\n\n1. 日志系统\n   * 日志数据库与上报\n   * crash 日志与解析\n\n2. 埋点\n\n3. 监控\n\n#### 多任务\n\n1. 多线程\n   * 堆栈信息收集\n\n### 2. 工程化\n\n### 3. 组件化\n\n### 4. 语言部分\n\n#### Swift\n\n#### Objective-C\n\n1. 内存管理\n2. GCD\n3. Block\n\n### 5. 操作系统部分\n\n### 6. 算法与安全\n\n#### 算法\n\n#### 数据结构\n\n#### 安全\n\n### 7. 源码阅读\n\n### 8. 架构设计\n\n#### 设计模式\n\n#### 架构\n\n## 二 Flutter 部分\n\n## 三 前端部分\n\n## 四 Android 部分\n","slug":"博客写作计划","published":0,"date":"2021-02-23T14:21:31.337Z","updated":"2021-02-23T14:39:44.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tgu0011w37u9l3ca01p","content":"<h2 id=\"一-ios-部分\"><a class=\"markdownIt-Anchor\" href=\"#一-ios-部分\"></a> 一 iOS 部分</h2>\n<h3 id=\"1-性能优化\"><a class=\"markdownIt-Anchor\" href=\"#1-性能优化\"></a> 1. 性能优化</h3>\n<h4 id=\"app-启动优化\"><a class=\"markdownIt-Anchor\" href=\"#app-启动优化\"></a> APP 启动优化</h4>\n<ol>\n<li>Mac-O 文件</li>\n</ol>\n<h4 id=\"电量优化\"><a class=\"markdownIt-Anchor\" href=\"#电量优化\"></a> 电量优化</h4>\n<h4 id=\"网络优化\"><a class=\"markdownIt-Anchor\" href=\"#网络优化\"></a> 网络优化</h4>\n<h4 id=\"日志系统-埋点\"><a class=\"markdownIt-Anchor\" href=\"#日志系统-埋点\"></a> 日志系统、埋点</h4>\n<ol>\n<li>\n<p>日志系统</p>\n<ul>\n<li>日志数据库与上报</li>\n<li>crash 日志与解析</li>\n</ul>\n</li>\n<li>\n<p>埋点</p>\n</li>\n<li>\n<p>监控</p>\n</li>\n</ol>\n<h4 id=\"多任务\"><a class=\"markdownIt-Anchor\" href=\"#多任务\"></a> 多任务</h4>\n<ol>\n<li>多线程\n<ul>\n<li>堆栈信息收集</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-工程化\"><a class=\"markdownIt-Anchor\" href=\"#2-工程化\"></a> 2. 工程化</h3>\n<h3 id=\"3-组件化\"><a class=\"markdownIt-Anchor\" href=\"#3-组件化\"></a> 3. 组件化</h3>\n<h3 id=\"4-语言部分\"><a class=\"markdownIt-Anchor\" href=\"#4-语言部分\"></a> 4. 语言部分</h3>\n<h4 id=\"swift\"><a class=\"markdownIt-Anchor\" href=\"#swift\"></a> Swift</h4>\n<h4 id=\"objective-c\"><a class=\"markdownIt-Anchor\" href=\"#objective-c\"></a> Objective-C</h4>\n<ol>\n<li>内存管理</li>\n<li>GCD</li>\n<li>Block</li>\n</ol>\n<h3 id=\"5-操作系统部分\"><a class=\"markdownIt-Anchor\" href=\"#5-操作系统部分\"></a> 5. 操作系统部分</h3>\n<h3 id=\"6-算法与安全\"><a class=\"markdownIt-Anchor\" href=\"#6-算法与安全\"></a> 6. 算法与安全</h3>\n<h4 id=\"算法\"><a class=\"markdownIt-Anchor\" href=\"#算法\"></a> 算法</h4>\n<h4 id=\"数据结构\"><a class=\"markdownIt-Anchor\" href=\"#数据结构\"></a> 数据结构</h4>\n<h4 id=\"安全\"><a class=\"markdownIt-Anchor\" href=\"#安全\"></a> 安全</h4>\n<h3 id=\"7-源码阅读\"><a class=\"markdownIt-Anchor\" href=\"#7-源码阅读\"></a> 7. 源码阅读</h3>\n<h3 id=\"8-架构设计\"><a class=\"markdownIt-Anchor\" href=\"#8-架构设计\"></a> 8. 架构设计</h3>\n<h4 id=\"设计模式\"><a class=\"markdownIt-Anchor\" href=\"#设计模式\"></a> 设计模式</h4>\n<h4 id=\"架构\"><a class=\"markdownIt-Anchor\" href=\"#架构\"></a> 架构</h4>\n<h2 id=\"二-flutter-部分\"><a class=\"markdownIt-Anchor\" href=\"#二-flutter-部分\"></a> 二 Flutter 部分</h2>\n<h2 id=\"三-前端部分\"><a class=\"markdownIt-Anchor\" href=\"#三-前端部分\"></a> 三 前端部分</h2>\n<h2 id=\"四-android-部分\"><a class=\"markdownIt-Anchor\" href=\"#四-android-部分\"></a> 四 Android 部分</h2>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-ios-部分\"><a class=\"markdownIt-Anchor\" href=\"#一-ios-部分\"></a> 一 iOS 部分</h2>\n<h3 id=\"1-性能优化\"><a class=\"markdownIt-Anchor\" href=\"#1-性能优化\"></a> 1. 性能优化</h3>\n<h4 id=\"app-启动优化\"><a class=\"markdownIt-Anchor\" href=\"#app-启动优化\"></a> APP 启动优化</h4>\n<ol>\n<li>Mac-O 文件</li>\n</ol>\n<h4 id=\"电量优化\"><a class=\"markdownIt-Anchor\" href=\"#电量优化\"></a> 电量优化</h4>\n<h4 id=\"网络优化\"><a class=\"markdownIt-Anchor\" href=\"#网络优化\"></a> 网络优化</h4>\n<h4 id=\"日志系统-埋点\"><a class=\"markdownIt-Anchor\" href=\"#日志系统-埋点\"></a> 日志系统、埋点</h4>\n<ol>\n<li>\n<p>日志系统</p>\n<ul>\n<li>日志数据库与上报</li>\n<li>crash 日志与解析</li>\n</ul>\n</li>\n<li>\n<p>埋点</p>\n</li>\n<li>\n<p>监控</p>\n</li>\n</ol>\n<h4 id=\"多任务\"><a class=\"markdownIt-Anchor\" href=\"#多任务\"></a> 多任务</h4>\n<ol>\n<li>多线程\n<ul>\n<li>堆栈信息收集</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-工程化\"><a class=\"markdownIt-Anchor\" href=\"#2-工程化\"></a> 2. 工程化</h3>\n<h3 id=\"3-组件化\"><a class=\"markdownIt-Anchor\" href=\"#3-组件化\"></a> 3. 组件化</h3>\n<h3 id=\"4-语言部分\"><a class=\"markdownIt-Anchor\" href=\"#4-语言部分\"></a> 4. 语言部分</h3>\n<h4 id=\"swift\"><a class=\"markdownIt-Anchor\" href=\"#swift\"></a> Swift</h4>\n<h4 id=\"objective-c\"><a class=\"markdownIt-Anchor\" href=\"#objective-c\"></a> Objective-C</h4>\n<ol>\n<li>内存管理</li>\n<li>GCD</li>\n<li>Block</li>\n</ol>\n<h3 id=\"5-操作系统部分\"><a class=\"markdownIt-Anchor\" href=\"#5-操作系统部分\"></a> 5. 操作系统部分</h3>\n<h3 id=\"6-算法与安全\"><a class=\"markdownIt-Anchor\" href=\"#6-算法与安全\"></a> 6. 算法与安全</h3>\n<h4 id=\"算法\"><a class=\"markdownIt-Anchor\" href=\"#算法\"></a> 算法</h4>\n<h4 id=\"数据结构\"><a class=\"markdownIt-Anchor\" href=\"#数据结构\"></a> 数据结构</h4>\n<h4 id=\"安全\"><a class=\"markdownIt-Anchor\" href=\"#安全\"></a> 安全</h4>\n<h3 id=\"7-源码阅读\"><a class=\"markdownIt-Anchor\" href=\"#7-源码阅读\"></a> 7. 源码阅读</h3>\n<h3 id=\"8-架构设计\"><a class=\"markdownIt-Anchor\" href=\"#8-架构设计\"></a> 8. 架构设计</h3>\n<h4 id=\"设计模式\"><a class=\"markdownIt-Anchor\" href=\"#设计模式\"></a> 设计模式</h4>\n<h4 id=\"架构\"><a class=\"markdownIt-Anchor\" href=\"#架构\"></a> 架构</h4>\n<h2 id=\"二-flutter-部分\"><a class=\"markdownIt-Anchor\" href=\"#二-flutter-部分\"></a> 二 Flutter 部分</h2>\n<h2 id=\"三-前端部分\"><a class=\"markdownIt-Anchor\" href=\"#三-前端部分\"></a> 三 前端部分</h2>\n<h2 id=\"四-android-部分\"><a class=\"markdownIt-Anchor\" href=\"#四-android-部分\"></a> 四 Android 部分</h2>\n"},{"_content":"# 查漏补缺\n\n## 1. Runloop\n\n### 1.1 [Runloop](https://blog.ibireme.com/2015/05/18/runloop/)\n\n### 1.2 [Runloop](https://v.youku.com/v_show/id_XODgxODkzODI0.html)\n\n## 2. Facebook\n\n### 2.1 [fooms](https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/)\n\n### 2.2 [FBMemoryProfiler](https://github.com/facebook/FBMemoryProfiler)\n\n## 3. [插件日志](https://github.com/meitu)\n\n## 4. [程序员网站](https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting)\n\n## 5. Runtime\n\n### 5.1 [Swift5.0 的 Runtime 机制浅析](https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension)\n\n### 5.2 [WWDC19 内参](https://juejin.im/post/5d1c11c9e51d45590a445b8e)\n\n### 5.3 [老司机 iOS 周报#75](https://juejin.im/post/5d2bf32f6fb9a07ee063476a)\n\n### 5.4 [Flutter-Go](https://juejin.im/post/5d215b8df265da1b7b31ac8f)\n\n## 6. Crash\n\n### 6.1 [KSCrash](https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md)\n\n### 6.2 [matrix](https://github.com/Tencent/matrix)\n\n## 7. [target](https://www.jianshu.com/p/18db54655246)\n\n## 8. [pod](https://www.jianshu.com/p/fb5083f2c0d2)\n","source":"_drafts/iOS查漏补缺.md","raw":"# 查漏补缺\n\n## 1. Runloop\n\n### 1.1 [Runloop](https://blog.ibireme.com/2015/05/18/runloop/)\n\n### 1.2 [Runloop](https://v.youku.com/v_show/id_XODgxODkzODI0.html)\n\n## 2. Facebook\n\n### 2.1 [fooms](https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/)\n\n### 2.2 [FBMemoryProfiler](https://github.com/facebook/FBMemoryProfiler)\n\n## 3. [插件日志](https://github.com/meitu)\n\n## 4. [程序员网站](https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting)\n\n## 5. Runtime\n\n### 5.1 [Swift5.0 的 Runtime 机制浅析](https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension)\n\n### 5.2 [WWDC19 内参](https://juejin.im/post/5d1c11c9e51d45590a445b8e)\n\n### 5.3 [老司机 iOS 周报#75](https://juejin.im/post/5d2bf32f6fb9a07ee063476a)\n\n### 5.4 [Flutter-Go](https://juejin.im/post/5d215b8df265da1b7b31ac8f)\n\n## 6. Crash\n\n### 6.1 [KSCrash](https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md)\n\n### 6.2 [matrix](https://github.com/Tencent/matrix)\n\n## 7. [target](https://www.jianshu.com/p/18db54655246)\n\n## 8. [pod](https://www.jianshu.com/p/fb5083f2c0d2)\n","slug":"iOS查漏补缺","published":0,"date":"2021-04-09T13:04:02.239Z","updated":"2021-04-09T13:04:02.239Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tgv0012w37ucq215ng5","content":"<h1 id=\"查漏补缺\"><a class=\"markdownIt-Anchor\" href=\"#查漏补缺\"></a> 查漏补缺</h1>\n<h2 id=\"1-runloop\"><a class=\"markdownIt-Anchor\" href=\"#1-runloop\"></a> 1. Runloop</h2>\n<h3 id=\"11-runloop\"><a class=\"markdownIt-Anchor\" href=\"#11-runloop\"></a> 1.1 <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">Runloop</a></h3>\n<h3 id=\"12-runloop\"><a class=\"markdownIt-Anchor\" href=\"#12-runloop\"></a> 1.2 <a href=\"https://v.youku.com/v_show/id_XODgxODkzODI0.html\">Runloop</a></h3>\n<h2 id=\"2-facebook\"><a class=\"markdownIt-Anchor\" href=\"#2-facebook\"></a> 2. Facebook</h2>\n<h3 id=\"21-fooms\"><a class=\"markdownIt-Anchor\" href=\"#21-fooms\"></a> 2.1 <a href=\"https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/\">fooms</a></h3>\n<h3 id=\"22-fbmemoryprofiler\"><a class=\"markdownIt-Anchor\" href=\"#22-fbmemoryprofiler\"></a> 2.2 <a href=\"https://github.com/facebook/FBMemoryProfiler\">FBMemoryProfiler</a></h3>\n<h2 id=\"3-插件日志\"><a class=\"markdownIt-Anchor\" href=\"#3-插件日志\"></a> 3. <a href=\"https://github.com/meitu\">插件日志</a></h2>\n<h2 id=\"4-程序员网站\"><a class=\"markdownIt-Anchor\" href=\"#4-程序员网站\"></a> 4. <a href=\"https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting\">程序员网站</a></h2>\n<h2 id=\"5-runtime\"><a class=\"markdownIt-Anchor\" href=\"#5-runtime\"></a> 5. Runtime</h2>\n<h3 id=\"51-swift50-的-runtime-机制浅析\"><a class=\"markdownIt-Anchor\" href=\"#51-swift50-的-runtime-机制浅析\"></a> 5.1 <a href=\"https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension\">Swift5.0 的 Runtime 机制浅析</a></h3>\n<h3 id=\"52-wwdc19-内参\"><a class=\"markdownIt-Anchor\" href=\"#52-wwdc19-内参\"></a> 5.2 <a href=\"https://juejin.im/post/5d1c11c9e51d45590a445b8e\">WWDC19 内参</a></h3>\n<h3 id=\"53-老司机-ios-周报75\"><a class=\"markdownIt-Anchor\" href=\"#53-老司机-ios-周报75\"></a> 5.3 <a href=\"https://juejin.im/post/5d2bf32f6fb9a07ee063476a\">老司机 iOS 周报#75</a></h3>\n<h3 id=\"54-flutter-go\"><a class=\"markdownIt-Anchor\" href=\"#54-flutter-go\"></a> 5.4 <a href=\"https://juejin.im/post/5d215b8df265da1b7b31ac8f\">Flutter-Go</a></h3>\n<h2 id=\"6-crash\"><a class=\"markdownIt-Anchor\" href=\"#6-crash\"></a> 6. Crash</h2>\n<h3 id=\"61-kscrash\"><a class=\"markdownIt-Anchor\" href=\"#61-kscrash\"></a> 6.1 <a href=\"https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md\">KSCrash</a></h3>\n<h3 id=\"62-matrix\"><a class=\"markdownIt-Anchor\" href=\"#62-matrix\"></a> 6.2 <a href=\"https://github.com/Tencent/matrix\">matrix</a></h3>\n<h2 id=\"7-target\"><a class=\"markdownIt-Anchor\" href=\"#7-target\"></a> 7. <a href=\"https://www.jianshu.com/p/18db54655246\">target</a></h2>\n<h2 id=\"8-pod\"><a class=\"markdownIt-Anchor\" href=\"#8-pod\"></a> 8. <a href=\"https://www.jianshu.com/p/fb5083f2c0d2\">pod</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"查漏补缺\"><a class=\"markdownIt-Anchor\" href=\"#查漏补缺\"></a> 查漏补缺</h1>\n<h2 id=\"1-runloop\"><a class=\"markdownIt-Anchor\" href=\"#1-runloop\"></a> 1. Runloop</h2>\n<h3 id=\"11-runloop\"><a class=\"markdownIt-Anchor\" href=\"#11-runloop\"></a> 1.1 <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">Runloop</a></h3>\n<h3 id=\"12-runloop\"><a class=\"markdownIt-Anchor\" href=\"#12-runloop\"></a> 1.2 <a href=\"https://v.youku.com/v_show/id_XODgxODkzODI0.html\">Runloop</a></h3>\n<h2 id=\"2-facebook\"><a class=\"markdownIt-Anchor\" href=\"#2-facebook\"></a> 2. Facebook</h2>\n<h3 id=\"21-fooms\"><a class=\"markdownIt-Anchor\" href=\"#21-fooms\"></a> 2.1 <a href=\"https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/\">fooms</a></h3>\n<h3 id=\"22-fbmemoryprofiler\"><a class=\"markdownIt-Anchor\" href=\"#22-fbmemoryprofiler\"></a> 2.2 <a href=\"https://github.com/facebook/FBMemoryProfiler\">FBMemoryProfiler</a></h3>\n<h2 id=\"3-插件日志\"><a class=\"markdownIt-Anchor\" href=\"#3-插件日志\"></a> 3. <a href=\"https://github.com/meitu\">插件日志</a></h2>\n<h2 id=\"4-程序员网站\"><a class=\"markdownIt-Anchor\" href=\"#4-程序员网站\"></a> 4. <a href=\"https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting\">程序员网站</a></h2>\n<h2 id=\"5-runtime\"><a class=\"markdownIt-Anchor\" href=\"#5-runtime\"></a> 5. Runtime</h2>\n<h3 id=\"51-swift50-的-runtime-机制浅析\"><a class=\"markdownIt-Anchor\" href=\"#51-swift50-的-runtime-机制浅析\"></a> 5.1 <a href=\"https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension\">Swift5.0 的 Runtime 机制浅析</a></h3>\n<h3 id=\"52-wwdc19-内参\"><a class=\"markdownIt-Anchor\" href=\"#52-wwdc19-内参\"></a> 5.2 <a href=\"https://juejin.im/post/5d1c11c9e51d45590a445b8e\">WWDC19 内参</a></h3>\n<h3 id=\"53-老司机-ios-周报75\"><a class=\"markdownIt-Anchor\" href=\"#53-老司机-ios-周报75\"></a> 5.3 <a href=\"https://juejin.im/post/5d2bf32f6fb9a07ee063476a\">老司机 iOS 周报#75</a></h3>\n<h3 id=\"54-flutter-go\"><a class=\"markdownIt-Anchor\" href=\"#54-flutter-go\"></a> 5.4 <a href=\"https://juejin.im/post/5d215b8df265da1b7b31ac8f\">Flutter-Go</a></h3>\n<h2 id=\"6-crash\"><a class=\"markdownIt-Anchor\" href=\"#6-crash\"></a> 6. Crash</h2>\n<h3 id=\"61-kscrash\"><a class=\"markdownIt-Anchor\" href=\"#61-kscrash\"></a> 6.1 <a href=\"https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md\">KSCrash</a></h3>\n<h3 id=\"62-matrix\"><a class=\"markdownIt-Anchor\" href=\"#62-matrix\"></a> 6.2 <a href=\"https://github.com/Tencent/matrix\">matrix</a></h3>\n<h2 id=\"7-target\"><a class=\"markdownIt-Anchor\" href=\"#7-target\"></a> 7. <a href=\"https://www.jianshu.com/p/18db54655246\">target</a></h2>\n<h2 id=\"8-pod\"><a class=\"markdownIt-Anchor\" href=\"#8-pod\"></a> 8. <a href=\"https://www.jianshu.com/p/fb5083f2c0d2\">pod</a></h2>\n"},{"_content":"# 近期目标\n\n1、腾讯、网易等互联网公司；\n\n1.1 能力\n\n1. 技术\n    专业性：图形图像【ImageMagic】、音视频【直播、点播】、IM、OpenCV、OpenGL、Metal、FFmpeg、GPUImage\n2. 思维\n    计算机基础：OS、C++、网络、数据库、数据结构【算法、安全】、shell、Python？\n\n2、考证\n\n1. 架构师\n2. 公务员<党员>\n3. 教师资格证\n\n3、生活\n\n* 走出生活\n* 享受生活\n* 生活品质\n* 回归家庭\n* 自主时间\n* 房、车、家\n\n4、读书（修生养性）\n\n1. 史\n2. 论\n3. 科技\n\n5、职业规划\n\n1. iOS\n    swift、swiftUI、响应式、WWDC[2019]、性能优化、内存管理、运行时、函数调用【栈、转发】、汇编、逆向、LLDB、LLVM、GCC、自动化、大前端【React-Native、Flutter】、\n\n    1.1、 C++ 方向\n\n2. 服务器\n    Java、Swift\n\n3. 架构师\n    移动/前端、服务器、小程序等、项目管理、团队管理、产品、市场、运营\n\n4. 大数据\n    深度学习、人工智能、机器学习\n","source":"_drafts/近期目标.md","raw":"# 近期目标\n\n1、腾讯、网易等互联网公司；\n\n1.1 能力\n\n1. 技术\n    专业性：图形图像【ImageMagic】、音视频【直播、点播】、IM、OpenCV、OpenGL、Metal、FFmpeg、GPUImage\n2. 思维\n    计算机基础：OS、C++、网络、数据库、数据结构【算法、安全】、shell、Python？\n\n2、考证\n\n1. 架构师\n2. 公务员<党员>\n3. 教师资格证\n\n3、生活\n\n* 走出生活\n* 享受生活\n* 生活品质\n* 回归家庭\n* 自主时间\n* 房、车、家\n\n4、读书（修生养性）\n\n1. 史\n2. 论\n3. 科技\n\n5、职业规划\n\n1. iOS\n    swift、swiftUI、响应式、WWDC[2019]、性能优化、内存管理、运行时、函数调用【栈、转发】、汇编、逆向、LLDB、LLVM、GCC、自动化、大前端【React-Native、Flutter】、\n\n    1.1、 C++ 方向\n\n2. 服务器\n    Java、Swift\n\n3. 架构师\n    移动/前端、服务器、小程序等、项目管理、团队管理、产品、市场、运营\n\n4. 大数据\n    深度学习、人工智能、机器学习\n","slug":"近期目标","published":0,"date":"2019-03-24T14:33:33.000Z","updated":"2021-01-28T13:05:08.074Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tgw0013w37u9x1c7zf2","content":"<h1 id=\"近期目标\"><a class=\"markdownIt-Anchor\" href=\"#近期目标\"></a> 近期目标</h1>\n<p>1、腾讯、网易等互联网公司；</p>\n<p>1.1 能力</p>\n<ol>\n<li>技术<br />\n专业性：图形图像【ImageMagic】、音视频【直播、点播】、IM、OpenCV、OpenGL、Metal、FFmpeg、GPUImage</li>\n<li>思维<br />\n计算机基础：OS、C++、网络、数据库、数据结构【算法、安全】、shell、Python？</li>\n</ol>\n<p>2、考证</p>\n<ol>\n<li>架构师</li>\n<li>公务员&lt;党员&gt;</li>\n<li>教师资格证</li>\n</ol>\n<p>3、生活</p>\n<ul>\n<li>走出生活</li>\n<li>享受生活</li>\n<li>生活品质</li>\n<li>回归家庭</li>\n<li>自主时间</li>\n<li>房、车、家</li>\n</ul>\n<p>4、读书（修生养性）</p>\n<ol>\n<li>史</li>\n<li>论</li>\n<li>科技</li>\n</ol>\n<p>5、职业规划</p>\n<ol>\n<li>\n<p>iOS<br />\nswift、swiftUI、响应式、WWDC[2019]、性能优化、内存管理、运行时、函数调用【栈、转发】、汇编、逆向、LLDB、LLVM、GCC、自动化、大前端【React-Native、Flutter】、</p>\n<p>1.1、 C++ 方向</p>\n</li>\n<li>\n<p>服务器<br />\nJava、Swift</p>\n</li>\n<li>\n<p>架构师<br />\n移动/前端、服务器、小程序等、项目管理、团队管理、产品、市场、运营</p>\n</li>\n<li>\n<p>大数据<br />\n深度学习、人工智能、机器学习</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"近期目标\"><a class=\"markdownIt-Anchor\" href=\"#近期目标\"></a> 近期目标</h1>\n<p>1、腾讯、网易等互联网公司；</p>\n<p>1.1 能力</p>\n<ol>\n<li>技术<br />\n专业性：图形图像【ImageMagic】、音视频【直播、点播】、IM、OpenCV、OpenGL、Metal、FFmpeg、GPUImage</li>\n<li>思维<br />\n计算机基础：OS、C++、网络、数据库、数据结构【算法、安全】、shell、Python？</li>\n</ol>\n<p>2、考证</p>\n<ol>\n<li>架构师</li>\n<li>公务员&lt;党员&gt;</li>\n<li>教师资格证</li>\n</ol>\n<p>3、生活</p>\n<ul>\n<li>走出生活</li>\n<li>享受生活</li>\n<li>生活品质</li>\n<li>回归家庭</li>\n<li>自主时间</li>\n<li>房、车、家</li>\n</ul>\n<p>4、读书（修生养性）</p>\n<ol>\n<li>史</li>\n<li>论</li>\n<li>科技</li>\n</ol>\n<p>5、职业规划</p>\n<ol>\n<li>\n<p>iOS<br />\nswift、swiftUI、响应式、WWDC[2019]、性能优化、内存管理、运行时、函数调用【栈、转发】、汇编、逆向、LLDB、LLVM、GCC、自动化、大前端【React-Native、Flutter】、</p>\n<p>1.1、 C++ 方向</p>\n</li>\n<li>\n<p>服务器<br />\nJava、Swift</p>\n</li>\n<li>\n<p>架构师<br />\n移动/前端、服务器、小程序等、项目管理、团队管理、产品、市场、运营</p>\n</li>\n<li>\n<p>大数据<br />\n深度学习、人工智能、机器学习</p>\n</li>\n</ol>\n"},{"_content":"# 学习计划\n\n## 一、学习\n\n1、大前端\n\n    React-Native\n    小程序\n    flutter\n\n2、性能优化\n\n    2.1 界面性能，GPU——YYKit 介绍的框架\n    2.2 CPU性能，Allen介绍的多态及编译原理\n\n3、组件化（模块化）\n\n        3.1 URL-Block\n        \n        3.2 Protocol-Class\n        \n        3.3 中间件（casa）\n        \n        3.4 微服务\n\n4、设计模式（精通）\n\n    4.1 代码重构 （从哪些方面重构，依据什么）\n    \n    4.2 程序原则：\n        何时何地，由谁（类？？对象）做何事\n\n5、导航栏的梗，转场动画\n\n6、 ~~layoutSubView，sizeThatFit 等~~\n\n7、读第三方库\n\n    7.1 使用原则——先封装\n    7.2 项目中使用的第三方库\n\n8、swift 语言精华\n\n    8.1 init 链\n    8.2 高阶函数\n    8.3 泛型\n    8.4 协议\n    8.5 拓展\n    8.6 swift 语言开源库及计划\n\n9、macOS、iOS 系统\n\n    9.1 越狱iOS学习\n    9.2 反编译\n    9.3 代码混淆（iOS）\n\n10、富文本\n\n    10.1 CoreText\n    10.2 TextKit:NSAttributeString等\n    10.3 WebKit\n\n11、电子签名\n\n12、HTTP(S)、TCP、UDP(kcp)等 协议\n\n13、UPnP\n\n14、Frp\n\n15、WoL(远程唤醒)\n\n16、~~（小明）域名认证~~\n\n17、~~香港服务器~~\n\n18、多线程\n\n* [Threaded Programming](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i)\n\n* [Run Loops](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16)\n\n19、汇编\n\n20、C/C++\n\n    20.1 boost\n    20.2 Qt\n    20.3 Xcode\n    20.4 Visual Studio\n\n21、音视频播放器源码\n\n    21.1 FFmpeg\n    21.2 IJKPlayer\n    21.3 AliPlayer\n    21.4 封装播放器\n        原生的【AVFoundation】\n        第三方 源码解读\n    21.5 音频\n        语音识别——Sphinx\n        性能优化——编解码、压缩\n\n* [语音识别--openears](https://www.politepix.com/openears/tutorial/)\n\n22、OpenGL、OpenCV。。。\n\n23、Linux 使用及系统原理学习\n\n24、深度学习——TensorFlow\n\n25、数据结构及算法（安全）\n\n26、爬虫（Python）\n\n27、Go\n\n28、shell编程\n\n29、CI自动化集成\n\n    Jenkins\n    XcodeSever\n\n30、架构师资格证【考】\n\n31、英语——托福证【考】\n\n32、开发信息系统化整理——按专题\n\n    32.1 iOS\n    32.2 web\n    32.3 Java——服务器、Android......一本书\n    32.4 Chrome 书签整理\n    32.5 百度网盘整理\n\n33、适配方案——iOS、web\n\n34、微信阅读\n\n    34.1 剑桥中国史\n    \n    34.2 摩根财团\n\n35、思维管理——系统化思维\n\n    35.1 产品思维\n    35.2 Boss思维\n    35.3 网络思维\n    35.n 思维[网络]联系所有物质\n\n36、人脉资源管理\n\n    36.1 人情\n    36.2 朋友\n    36.3 敌人\n    36.4 其他\n        熟人、陌生人、偶像、领导、同事、下属。。。。。。\n\n37、生活\n\n    37.1 规律\n    37.2 原则\n    37.3 效率\n    37.4 品质\n    37.5 追求\n\n38、简历特点\n\n    1、主导过用户量数十万级别《明星空间》项目，掌握项目架构，直播前沿技 术，精通客户端程序设计\n    2、熟悉iOS内核运行机制\n    3、熟悉OpenGL ES、FFmpeg、Cocos2D-x\n    4、熟练使用Xcode 上的性能工具Instrument以及代码管理工具Git，SVN等 \n    5、熟悉Socket 与 Web socket，熟悉UDP、TCP、IP、rtmp、HTTPS、HTTP、 xmpp协议等\n    6、有带领团队和项目管理经验，也有项目架构设计和重构经验 \n    7、熟悉编程语言:c/c++，objective-C，swift，PHP，Python，Java，H5 \n    8、熟悉单元测试及代码性能优化 \n    9、熟悉Java\n\n## 二、健身\n\n## 三、知识体系\n\n1、操作系统原理\n\n2、程序设计——语言\n\n3、数据结构与算法\n\n4、网络及协议\n\n* [Alamofire/Alamofire](https://github.com/Alamofire/Alamofire)\n* [AlamofireObjectMapper](https://github.com/tristanhimmelman/AlamofireObjectMapper)\n\n5、硬件的使用及结构、原理\n\n    5.1 CPU\n    5.2 GPU\n  \n6、服务化\n\n    Frp\n    WordPress\n    VPN\n    Gitlab\n    Web\n    ...\n\n7、信息传输原理\n\n## 四、目标\n\n1、做事\n\n2、赚钱\n\n3、学习\n\n4、不能虚度时光\n\n## 杂项\n\n1、动画库：\n\n* [facebook/pop](https://github.com/facebook/pop)\n* [airbnb/lottie-ios](https://github.com/airbnb/lottie-ios)\n\n2、[iOS 官方文档：](https://developer.apple.com/documentation)\n","source":"_drafts/学习计划.md","raw":"# 学习计划\n\n## 一、学习\n\n1、大前端\n\n    React-Native\n    小程序\n    flutter\n\n2、性能优化\n\n    2.1 界面性能，GPU——YYKit 介绍的框架\n    2.2 CPU性能，Allen介绍的多态及编译原理\n\n3、组件化（模块化）\n\n        3.1 URL-Block\n        \n        3.2 Protocol-Class\n        \n        3.3 中间件（casa）\n        \n        3.4 微服务\n\n4、设计模式（精通）\n\n    4.1 代码重构 （从哪些方面重构，依据什么）\n    \n    4.2 程序原则：\n        何时何地，由谁（类？？对象）做何事\n\n5、导航栏的梗，转场动画\n\n6、 ~~layoutSubView，sizeThatFit 等~~\n\n7、读第三方库\n\n    7.1 使用原则——先封装\n    7.2 项目中使用的第三方库\n\n8、swift 语言精华\n\n    8.1 init 链\n    8.2 高阶函数\n    8.3 泛型\n    8.4 协议\n    8.5 拓展\n    8.6 swift 语言开源库及计划\n\n9、macOS、iOS 系统\n\n    9.1 越狱iOS学习\n    9.2 反编译\n    9.3 代码混淆（iOS）\n\n10、富文本\n\n    10.1 CoreText\n    10.2 TextKit:NSAttributeString等\n    10.3 WebKit\n\n11、电子签名\n\n12、HTTP(S)、TCP、UDP(kcp)等 协议\n\n13、UPnP\n\n14、Frp\n\n15、WoL(远程唤醒)\n\n16、~~（小明）域名认证~~\n\n17、~~香港服务器~~\n\n18、多线程\n\n* [Threaded Programming](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i)\n\n* [Run Loops](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16)\n\n19、汇编\n\n20、C/C++\n\n    20.1 boost\n    20.2 Qt\n    20.3 Xcode\n    20.4 Visual Studio\n\n21、音视频播放器源码\n\n    21.1 FFmpeg\n    21.2 IJKPlayer\n    21.3 AliPlayer\n    21.4 封装播放器\n        原生的【AVFoundation】\n        第三方 源码解读\n    21.5 音频\n        语音识别——Sphinx\n        性能优化——编解码、压缩\n\n* [语音识别--openears](https://www.politepix.com/openears/tutorial/)\n\n22、OpenGL、OpenCV。。。\n\n23、Linux 使用及系统原理学习\n\n24、深度学习——TensorFlow\n\n25、数据结构及算法（安全）\n\n26、爬虫（Python）\n\n27、Go\n\n28、shell编程\n\n29、CI自动化集成\n\n    Jenkins\n    XcodeSever\n\n30、架构师资格证【考】\n\n31、英语——托福证【考】\n\n32、开发信息系统化整理——按专题\n\n    32.1 iOS\n    32.2 web\n    32.3 Java——服务器、Android......一本书\n    32.4 Chrome 书签整理\n    32.5 百度网盘整理\n\n33、适配方案——iOS、web\n\n34、微信阅读\n\n    34.1 剑桥中国史\n    \n    34.2 摩根财团\n\n35、思维管理——系统化思维\n\n    35.1 产品思维\n    35.2 Boss思维\n    35.3 网络思维\n    35.n 思维[网络]联系所有物质\n\n36、人脉资源管理\n\n    36.1 人情\n    36.2 朋友\n    36.3 敌人\n    36.4 其他\n        熟人、陌生人、偶像、领导、同事、下属。。。。。。\n\n37、生活\n\n    37.1 规律\n    37.2 原则\n    37.3 效率\n    37.4 品质\n    37.5 追求\n\n38、简历特点\n\n    1、主导过用户量数十万级别《明星空间》项目，掌握项目架构，直播前沿技 术，精通客户端程序设计\n    2、熟悉iOS内核运行机制\n    3、熟悉OpenGL ES、FFmpeg、Cocos2D-x\n    4、熟练使用Xcode 上的性能工具Instrument以及代码管理工具Git，SVN等 \n    5、熟悉Socket 与 Web socket，熟悉UDP、TCP、IP、rtmp、HTTPS、HTTP、 xmpp协议等\n    6、有带领团队和项目管理经验，也有项目架构设计和重构经验 \n    7、熟悉编程语言:c/c++，objective-C，swift，PHP，Python，Java，H5 \n    8、熟悉单元测试及代码性能优化 \n    9、熟悉Java\n\n## 二、健身\n\n## 三、知识体系\n\n1、操作系统原理\n\n2、程序设计——语言\n\n3、数据结构与算法\n\n4、网络及协议\n\n* [Alamofire/Alamofire](https://github.com/Alamofire/Alamofire)\n* [AlamofireObjectMapper](https://github.com/tristanhimmelman/AlamofireObjectMapper)\n\n5、硬件的使用及结构、原理\n\n    5.1 CPU\n    5.2 GPU\n  \n6、服务化\n\n    Frp\n    WordPress\n    VPN\n    Gitlab\n    Web\n    ...\n\n7、信息传输原理\n\n## 四、目标\n\n1、做事\n\n2、赚钱\n\n3、学习\n\n4、不能虚度时光\n\n## 杂项\n\n1、动画库：\n\n* [facebook/pop](https://github.com/facebook/pop)\n* [airbnb/lottie-ios](https://github.com/airbnb/lottie-ios)\n\n2、[iOS 官方文档：](https://developer.apple.com/documentation)\n","slug":"学习计划","published":0,"date":"2019-02-28T02:11:35.000Z","updated":"2021-01-28T13:08:34.613Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tgx0014w37u0ec0aed6","content":"<h1 id=\"学习计划\"><a class=\"markdownIt-Anchor\" href=\"#学习计划\"></a> 学习计划</h1>\n<h2 id=\"一-学习\"><a class=\"markdownIt-Anchor\" href=\"#一-学习\"></a> 一、学习</h2>\n<p>1、大前端</p>\n<pre><code>React-Native\n小程序\nflutter\n</code></pre>\n<p>2、性能优化</p>\n<pre><code>2.1 界面性能，GPU——YYKit 介绍的框架\n2.2 CPU性能，Allen介绍的多态及编译原理\n</code></pre>\n<p>3、组件化（模块化）</p>\n<pre><code>    3.1 URL-Block\n    \n    3.2 Protocol-Class\n    \n    3.3 中间件（casa）\n    \n    3.4 微服务\n</code></pre>\n<p>4、设计模式（精通）</p>\n<pre><code>4.1 代码重构 （从哪些方面重构，依据什么）\n\n4.2 程序原则：\n    何时何地，由谁（类？？对象）做何事\n</code></pre>\n<p>5、导航栏的梗，转场动画</p>\n<p>6、 <s>layoutSubView，sizeThatFit 等</s></p>\n<p>7、读第三方库</p>\n<pre><code>7.1 使用原则——先封装\n7.2 项目中使用的第三方库\n</code></pre>\n<p>8、swift 语言精华</p>\n<pre><code>8.1 init 链\n8.2 高阶函数\n8.3 泛型\n8.4 协议\n8.5 拓展\n8.6 swift 语言开源库及计划\n</code></pre>\n<p>9、macOS、iOS 系统</p>\n<pre><code>9.1 越狱iOS学习\n9.2 反编译\n9.3 代码混淆（iOS）\n</code></pre>\n<p>10、富文本</p>\n<pre><code>10.1 CoreText\n10.2 TextKit:NSAttributeString等\n10.3 WebKit\n</code></pre>\n<p>11、电子签名</p>\n<p>12、HTTP(S)、TCP、UDP(kcp)等 协议</p>\n<p>13、UPnP</p>\n<p>14、Frp</p>\n<p>15、WoL(远程唤醒)</p>\n<p>16、<s>（小明）域名认证</s></p>\n<p>17、<s>香港服务器</s></p>\n<p>18、多线程</p>\n<ul>\n<li>\n<p><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i\">Threaded Programming</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16\">Run Loops</a></p>\n</li>\n</ul>\n<p>19、汇编</p>\n<p>20、C/C++</p>\n<pre><code>20.1 boost\n20.2 Qt\n20.3 Xcode\n20.4 Visual Studio\n</code></pre>\n<p>21、音视频播放器源码</p>\n<pre><code>21.1 FFmpeg\n21.2 IJKPlayer\n21.3 AliPlayer\n21.4 封装播放器\n    原生的【AVFoundation】\n    第三方 源码解读\n21.5 音频\n    语音识别——Sphinx\n    性能优化——编解码、压缩\n</code></pre>\n<ul>\n<li><a href=\"https://www.politepix.com/openears/tutorial/\">语音识别–openears</a></li>\n</ul>\n<p>22、OpenGL、OpenCV。。。</p>\n<p>23、Linux 使用及系统原理学习</p>\n<p>24、深度学习——TensorFlow</p>\n<p>25、数据结构及算法（安全）</p>\n<p>26、爬虫（Python）</p>\n<p>27、Go</p>\n<p>28、shell编程</p>\n<p>29、CI自动化集成</p>\n<pre><code>Jenkins\nXcodeSever\n</code></pre>\n<p>30、架构师资格证【考】</p>\n<p>31、英语——托福证【考】</p>\n<p>32、开发信息系统化整理——按专题</p>\n<pre><code>32.1 iOS\n32.2 web\n32.3 Java——服务器、Android......一本书\n32.4 Chrome 书签整理\n32.5 百度网盘整理\n</code></pre>\n<p>33、适配方案——iOS、web</p>\n<p>34、微信阅读</p>\n<pre><code>34.1 剑桥中国史\n\n34.2 摩根财团\n</code></pre>\n<p>35、思维管理——系统化思维</p>\n<pre><code>35.1 产品思维\n35.2 Boss思维\n35.3 网络思维\n35.n 思维[网络]联系所有物质\n</code></pre>\n<p>36、人脉资源管理</p>\n<pre><code>36.1 人情\n36.2 朋友\n36.3 敌人\n36.4 其他\n    熟人、陌生人、偶像、领导、同事、下属。。。。。。\n</code></pre>\n<p>37、生活</p>\n<pre><code>37.1 规律\n37.2 原则\n37.3 效率\n37.4 品质\n37.5 追求\n</code></pre>\n<p>38、简历特点</p>\n<pre><code>1、主导过用户量数十万级别《明星空间》项目，掌握项目架构，直播前沿技 术，精通客户端程序设计\n2、熟悉iOS内核运行机制\n3、熟悉OpenGL ES、FFmpeg、Cocos2D-x\n4、熟练使用Xcode 上的性能工具Instrument以及代码管理工具Git，SVN等 \n5、熟悉Socket 与 Web socket，熟悉UDP、TCP、IP、rtmp、HTTPS、HTTP、 xmpp协议等\n6、有带领团队和项目管理经验，也有项目架构设计和重构经验 \n7、熟悉编程语言:c/c++，objective-C，swift，PHP，Python，Java，H5 \n8、熟悉单元测试及代码性能优化 \n9、熟悉Java\n</code></pre>\n<h2 id=\"二-健身\"><a class=\"markdownIt-Anchor\" href=\"#二-健身\"></a> 二、健身</h2>\n<h2 id=\"三-知识体系\"><a class=\"markdownIt-Anchor\" href=\"#三-知识体系\"></a> 三、知识体系</h2>\n<p>1、操作系统原理</p>\n<p>2、程序设计——语言</p>\n<p>3、数据结构与算法</p>\n<p>4、网络及协议</p>\n<ul>\n<li><a href=\"https://github.com/Alamofire/Alamofire\">Alamofire/Alamofire</a></li>\n<li><a href=\"https://github.com/tristanhimmelman/AlamofireObjectMapper\">AlamofireObjectMapper</a></li>\n</ul>\n<p>5、硬件的使用及结构、原理</p>\n<pre><code>5.1 CPU\n5.2 GPU\n</code></pre>\n<p>6、服务化</p>\n<pre><code>Frp\nWordPress\nVPN\nGitlab\nWeb\n...\n</code></pre>\n<p>7、信息传输原理</p>\n<h2 id=\"四-目标\"><a class=\"markdownIt-Anchor\" href=\"#四-目标\"></a> 四、目标</h2>\n<p>1、做事</p>\n<p>2、赚钱</p>\n<p>3、学习</p>\n<p>4、不能虚度时光</p>\n<h2 id=\"杂项\"><a class=\"markdownIt-Anchor\" href=\"#杂项\"></a> 杂项</h2>\n<p>1、动画库：</p>\n<ul>\n<li><a href=\"https://github.com/facebook/pop\">facebook/pop</a></li>\n<li><a href=\"https://github.com/airbnb/lottie-ios\">airbnb/lottie-ios</a></li>\n</ul>\n<p>2、<a href=\"https://developer.apple.com/documentation\">iOS 官方文档：</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"学习计划\"><a class=\"markdownIt-Anchor\" href=\"#学习计划\"></a> 学习计划</h1>\n<h2 id=\"一-学习\"><a class=\"markdownIt-Anchor\" href=\"#一-学习\"></a> 一、学习</h2>\n<p>1、大前端</p>\n<pre><code>React-Native\n小程序\nflutter\n</code></pre>\n<p>2、性能优化</p>\n<pre><code>2.1 界面性能，GPU——YYKit 介绍的框架\n2.2 CPU性能，Allen介绍的多态及编译原理\n</code></pre>\n<p>3、组件化（模块化）</p>\n<pre><code>    3.1 URL-Block\n    \n    3.2 Protocol-Class\n    \n    3.3 中间件（casa）\n    \n    3.4 微服务\n</code></pre>\n<p>4、设计模式（精通）</p>\n<pre><code>4.1 代码重构 （从哪些方面重构，依据什么）\n\n4.2 程序原则：\n    何时何地，由谁（类？？对象）做何事\n</code></pre>\n<p>5、导航栏的梗，转场动画</p>\n<p>6、 <s>layoutSubView，sizeThatFit 等</s></p>\n<p>7、读第三方库</p>\n<pre><code>7.1 使用原则——先封装\n7.2 项目中使用的第三方库\n</code></pre>\n<p>8、swift 语言精华</p>\n<pre><code>8.1 init 链\n8.2 高阶函数\n8.3 泛型\n8.4 协议\n8.5 拓展\n8.6 swift 语言开源库及计划\n</code></pre>\n<p>9、macOS、iOS 系统</p>\n<pre><code>9.1 越狱iOS学习\n9.2 反编译\n9.3 代码混淆（iOS）\n</code></pre>\n<p>10、富文本</p>\n<pre><code>10.1 CoreText\n10.2 TextKit:NSAttributeString等\n10.3 WebKit\n</code></pre>\n<p>11、电子签名</p>\n<p>12、HTTP(S)、TCP、UDP(kcp)等 协议</p>\n<p>13、UPnP</p>\n<p>14、Frp</p>\n<p>15、WoL(远程唤醒)</p>\n<p>16、<s>（小明）域名认证</s></p>\n<p>17、<s>香港服务器</s></p>\n<p>18、多线程</p>\n<ul>\n<li>\n<p><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i\">Threaded Programming</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16\">Run Loops</a></p>\n</li>\n</ul>\n<p>19、汇编</p>\n<p>20、C/C++</p>\n<pre><code>20.1 boost\n20.2 Qt\n20.3 Xcode\n20.4 Visual Studio\n</code></pre>\n<p>21、音视频播放器源码</p>\n<pre><code>21.1 FFmpeg\n21.2 IJKPlayer\n21.3 AliPlayer\n21.4 封装播放器\n    原生的【AVFoundation】\n    第三方 源码解读\n21.5 音频\n    语音识别——Sphinx\n    性能优化——编解码、压缩\n</code></pre>\n<ul>\n<li><a href=\"https://www.politepix.com/openears/tutorial/\">语音识别–openears</a></li>\n</ul>\n<p>22、OpenGL、OpenCV。。。</p>\n<p>23、Linux 使用及系统原理学习</p>\n<p>24、深度学习——TensorFlow</p>\n<p>25、数据结构及算法（安全）</p>\n<p>26、爬虫（Python）</p>\n<p>27、Go</p>\n<p>28、shell编程</p>\n<p>29、CI自动化集成</p>\n<pre><code>Jenkins\nXcodeSever\n</code></pre>\n<p>30、架构师资格证【考】</p>\n<p>31、英语——托福证【考】</p>\n<p>32、开发信息系统化整理——按专题</p>\n<pre><code>32.1 iOS\n32.2 web\n32.3 Java——服务器、Android......一本书\n32.4 Chrome 书签整理\n32.5 百度网盘整理\n</code></pre>\n<p>33、适配方案——iOS、web</p>\n<p>34、微信阅读</p>\n<pre><code>34.1 剑桥中国史\n\n34.2 摩根财团\n</code></pre>\n<p>35、思维管理——系统化思维</p>\n<pre><code>35.1 产品思维\n35.2 Boss思维\n35.3 网络思维\n35.n 思维[网络]联系所有物质\n</code></pre>\n<p>36、人脉资源管理</p>\n<pre><code>36.1 人情\n36.2 朋友\n36.3 敌人\n36.4 其他\n    熟人、陌生人、偶像、领导、同事、下属。。。。。。\n</code></pre>\n<p>37、生活</p>\n<pre><code>37.1 规律\n37.2 原则\n37.3 效率\n37.4 品质\n37.5 追求\n</code></pre>\n<p>38、简历特点</p>\n<pre><code>1、主导过用户量数十万级别《明星空间》项目，掌握项目架构，直播前沿技 术，精通客户端程序设计\n2、熟悉iOS内核运行机制\n3、熟悉OpenGL ES、FFmpeg、Cocos2D-x\n4、熟练使用Xcode 上的性能工具Instrument以及代码管理工具Git，SVN等 \n5、熟悉Socket 与 Web socket，熟悉UDP、TCP、IP、rtmp、HTTPS、HTTP、 xmpp协议等\n6、有带领团队和项目管理经验，也有项目架构设计和重构经验 \n7、熟悉编程语言:c/c++，objective-C，swift，PHP，Python，Java，H5 \n8、熟悉单元测试及代码性能优化 \n9、熟悉Java\n</code></pre>\n<h2 id=\"二-健身\"><a class=\"markdownIt-Anchor\" href=\"#二-健身\"></a> 二、健身</h2>\n<h2 id=\"三-知识体系\"><a class=\"markdownIt-Anchor\" href=\"#三-知识体系\"></a> 三、知识体系</h2>\n<p>1、操作系统原理</p>\n<p>2、程序设计——语言</p>\n<p>3、数据结构与算法</p>\n<p>4、网络及协议</p>\n<ul>\n<li><a href=\"https://github.com/Alamofire/Alamofire\">Alamofire/Alamofire</a></li>\n<li><a href=\"https://github.com/tristanhimmelman/AlamofireObjectMapper\">AlamofireObjectMapper</a></li>\n</ul>\n<p>5、硬件的使用及结构、原理</p>\n<pre><code>5.1 CPU\n5.2 GPU\n</code></pre>\n<p>6、服务化</p>\n<pre><code>Frp\nWordPress\nVPN\nGitlab\nWeb\n...\n</code></pre>\n<p>7、信息传输原理</p>\n<h2 id=\"四-目标\"><a class=\"markdownIt-Anchor\" href=\"#四-目标\"></a> 四、目标</h2>\n<p>1、做事</p>\n<p>2、赚钱</p>\n<p>3、学习</p>\n<p>4、不能虚度时光</p>\n<h2 id=\"杂项\"><a class=\"markdownIt-Anchor\" href=\"#杂项\"></a> 杂项</h2>\n<p>1、动画库：</p>\n<ul>\n<li><a href=\"https://github.com/facebook/pop\">facebook/pop</a></li>\n<li><a href=\"https://github.com/airbnb/lottie-ios\">airbnb/lottie-ios</a></li>\n</ul>\n<p>2、<a href=\"https://developer.apple.com/documentation\">iOS 官方文档：</a></p>\n"},{"_content":"\n# IM 系统设计\n\n## 1. [网络](http://www.52im.net/)\n\n### 1.1 [架构](http://www.52im.net/thread-3472-1-1.html)\n\n### 1.1.1 [浅谈IM系统的架构设计](http://www.52im.net/thread-307-1-1.html)\n\n### 1.2 [连接](http://gglinux.com/2017/04/15/IM_design/)\n\n### 1.3 [消息](https://www.infoq.cn/article/ypb3y2lv-dsftrr5cguv)\n\n### 1.4 [协议](https://github.com/ChenYilong/iOSBlog/issues/6)\n\n### 1.5 [云聊 IM](http://www.yunliaoim.com/im/category/qq)\n","source":"_drafts/IM 系统设计/IM 系统设计.md","raw":"\n# IM 系统设计\n\n## 1. [网络](http://www.52im.net/)\n\n### 1.1 [架构](http://www.52im.net/thread-3472-1-1.html)\n\n### 1.1.1 [浅谈IM系统的架构设计](http://www.52im.net/thread-307-1-1.html)\n\n### 1.2 [连接](http://gglinux.com/2017/04/15/IM_design/)\n\n### 1.3 [消息](https://www.infoq.cn/article/ypb3y2lv-dsftrr5cguv)\n\n### 1.4 [协议](https://github.com/ChenYilong/iOSBlog/issues/6)\n\n### 1.5 [云聊 IM](http://www.yunliaoim.com/im/category/qq)\n","slug":"IM 系统设计/IM 系统设计","published":0,"date":"2021-04-08T00:31:46.336Z","updated":"2021-04-08T00:31:46.336Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tgy0015w37ucdp8bsqp","content":"<h1 id=\"im-系统设计\"><a class=\"markdownIt-Anchor\" href=\"#im-系统设计\"></a> IM 系统设计</h1>\n<h2 id=\"1-网络\"><a class=\"markdownIt-Anchor\" href=\"#1-网络\"></a> 1. <a href=\"http://www.52im.net/\">网络</a></h2>\n<h3 id=\"11-架构\"><a class=\"markdownIt-Anchor\" href=\"#11-架构\"></a> 1.1 <a href=\"http://www.52im.net/thread-3472-1-1.html\">架构</a></h3>\n<h3 id=\"111-浅谈im系统的架构设计\"><a class=\"markdownIt-Anchor\" href=\"#111-浅谈im系统的架构设计\"></a> 1.1.1 <a href=\"http://www.52im.net/thread-307-1-1.html\">浅谈IM系统的架构设计</a></h3>\n<h3 id=\"12-连接\"><a class=\"markdownIt-Anchor\" href=\"#12-连接\"></a> 1.2 <a href=\"http://gglinux.com/2017/04/15/IM_design/\">连接</a></h3>\n<h3 id=\"13-消息\"><a class=\"markdownIt-Anchor\" href=\"#13-消息\"></a> 1.3 <a href=\"https://www.infoq.cn/article/ypb3y2lv-dsftrr5cguv\">消息</a></h3>\n<h3 id=\"14-协议\"><a class=\"markdownIt-Anchor\" href=\"#14-协议\"></a> 1.4 <a href=\"https://github.com/ChenYilong/iOSBlog/issues/6\">协议</a></h3>\n<h3 id=\"15-云聊-im\"><a class=\"markdownIt-Anchor\" href=\"#15-云聊-im\"></a> 1.5 <a href=\"http://www.yunliaoim.com/im/category/qq\">云聊 IM</a></h3>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"im-系统设计\"><a class=\"markdownIt-Anchor\" href=\"#im-系统设计\"></a> IM 系统设计</h1>\n<h2 id=\"1-网络\"><a class=\"markdownIt-Anchor\" href=\"#1-网络\"></a> 1. <a href=\"http://www.52im.net/\">网络</a></h2>\n<h3 id=\"11-架构\"><a class=\"markdownIt-Anchor\" href=\"#11-架构\"></a> 1.1 <a href=\"http://www.52im.net/thread-3472-1-1.html\">架构</a></h3>\n<h3 id=\"111-浅谈im系统的架构设计\"><a class=\"markdownIt-Anchor\" href=\"#111-浅谈im系统的架构设计\"></a> 1.1.1 <a href=\"http://www.52im.net/thread-307-1-1.html\">浅谈IM系统的架构设计</a></h3>\n<h3 id=\"12-连接\"><a class=\"markdownIt-Anchor\" href=\"#12-连接\"></a> 1.2 <a href=\"http://gglinux.com/2017/04/15/IM_design/\">连接</a></h3>\n<h3 id=\"13-消息\"><a class=\"markdownIt-Anchor\" href=\"#13-消息\"></a> 1.3 <a href=\"https://www.infoq.cn/article/ypb3y2lv-dsftrr5cguv\">消息</a></h3>\n<h3 id=\"14-协议\"><a class=\"markdownIt-Anchor\" href=\"#14-协议\"></a> 1.4 <a href=\"https://github.com/ChenYilong/iOSBlog/issues/6\">协议</a></h3>\n<h3 id=\"15-云聊-im\"><a class=\"markdownIt-Anchor\" href=\"#15-云聊-im\"></a> 1.5 <a href=\"http://www.yunliaoim.com/im/category/qq\">云聊 IM</a></h3>\n"},{"_content":"# UML 笔记\n\n33 1. [浅谈UML中常用的几种图](https://blog.csdn.net/qq_35495763/article/details/80764914)","source":"_drafts/计算机/UML 笔记.md","raw":"# UML 笔记\n\n33 1. [浅谈UML中常用的几种图](https://blog.csdn.net/qq_35495763/article/details/80764914)","slug":"计算机/UML 笔记","published":0,"date":"2021-03-29T13:50:39.104Z","updated":"2021-03-29T13:51:10.244Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tgz0016w37u7ip6ft4j","content":"<h1 id=\"uml-笔记\"><a class=\"markdownIt-Anchor\" href=\"#uml-笔记\"></a> UML 笔记</h1>\n<p>33 1. <a href=\"https://blog.csdn.net/qq_35495763/article/details/80764914\">浅谈UML中常用的几种图</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"uml-笔记\"><a class=\"markdownIt-Anchor\" href=\"#uml-笔记\"></a> UML 笔记</h1>\n<p>33 1. <a href=\"https://blog.csdn.net/qq_35495763/article/details/80764914\">浅谈UML中常用的几种图</a></p>\n"},{"_content":"# iOS 面试题\n\n## 1. [2020年面试：整理出一份高级iOS面试题](https://zhuanlan.zhihu.com/p/77789398)","source":"_drafts/计算机/iOS 面试题.md","raw":"# iOS 面试题\n\n## 1. [2020年面试：整理出一份高级iOS面试题](https://zhuanlan.zhihu.com/p/77789398)","slug":"计算机/iOS 面试题","published":0,"date":"2021-03-29T13:49:38.494Z","updated":"2021-03-29T13:50:14.349Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3th00017w37u0tnrgyui","content":"<h1 id=\"ios-面试题\"><a class=\"markdownIt-Anchor\" href=\"#ios-面试题\"></a> iOS 面试题</h1>\n<h2 id=\"1-2020年面试整理出一份高级ios面试题\"><a class=\"markdownIt-Anchor\" href=\"#1-2020年面试整理出一份高级ios面试题\"></a> 1. <a href=\"https://zhuanlan.zhihu.com/p/77789398\">2020年面试：整理出一份高级iOS面试题</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios-面试题\"><a class=\"markdownIt-Anchor\" href=\"#ios-面试题\"></a> iOS 面试题</h1>\n<h2 id=\"1-2020年面试整理出一份高级ios面试题\"><a class=\"markdownIt-Anchor\" href=\"#1-2020年面试整理出一份高级ios面试题\"></a> 1. <a href=\"https://zhuanlan.zhihu.com/p/77789398\">2020年面试：整理出一份高级iOS面试题</a></h2>\n"},{"_content":"# 哈希\n\n## 1.1 数据结构\n\n根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称为哈希表，这一映像过程称为哈希造表或者散列，所得的存储位置称哈希地址或散列地址。\n\n## 1.2 寻址\n\n## 1.3 冲突\n\n### 1.3.1 解决办法\n\n### 1.3.1.1 再哈希\n\n用不同的哈希函数，对产生地址冲突的关键字再次进行哈希计算，获取另一个哈希地址，知道不在产生冲突，这种方法不易产生“二次聚集”，但是增加的计算的时间。\n\n### 1.3.1.2 链地址\n\n将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。\n\n### 1.3.1.3 建立公共溢出区\n\n这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表\n\n### 1.3.1.4 开放定址法(再散列法)\n\n1.线性探测再散列：\n\ndii=1，2，3，…，m-1         冲突发生时，顺序查看表中下一单元，直到找出一个空单元或查遍全表。\n\n2.二次探测再散列：\n\ndi=12，-12，22，-22，…，k2，-k2    ( k<=m/2 )         冲突发生时，在表的左右进行跳跃式探测，比较灵活。\n\n3.伪随机探测再散列：\n\ndi=伪随机数序列。  具体实现时，应建立一个伪随机数发生器，（如i=(i+p) % m），并给定一个随机数做起点。\n\n### 1.3.2 哈希函数的构造方法\n\n### 1.3.2.1 数字分析法\n\n可以从关键如果事先知道关键字集合，并且每个关键字的位数比哈希表的地址码位数多时，可以从关键字中选出分布较均匀的若干位，构成哈希地址。\n\n### 1.3.2.2 平方取中法\n\n当无法确定关键字中哪几位分布较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为哈希地址。\n\n### 1.3.2.3 分段叠加法\n\n这种方法是按哈希表地址位数将关键字分成位数相等的几部分（最后一部分可以较短），然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。\n\n### 1.3.2.4 除留余数法\n\n假设哈希表长为m，p为小于等于m的最大素数，则哈希函数为 h（k）=k  %  p ，其中%为模p取余运算。\n\n## 1.4 参考[^参考]\n\n[^参考]: [哈希表冲突及处理冲突的方法](https://blog.csdn.net/qq_40803710/article/details/80945617?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&dist_request_id=1328767.80835.16177609952348745&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control)\n","source":"_drafts/计算机/算法/哈希.md","raw":"# 哈希\n\n## 1.1 数据结构\n\n根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称为哈希表，这一映像过程称为哈希造表或者散列，所得的存储位置称哈希地址或散列地址。\n\n## 1.2 寻址\n\n## 1.3 冲突\n\n### 1.3.1 解决办法\n\n### 1.3.1.1 再哈希\n\n用不同的哈希函数，对产生地址冲突的关键字再次进行哈希计算，获取另一个哈希地址，知道不在产生冲突，这种方法不易产生“二次聚集”，但是增加的计算的时间。\n\n### 1.3.1.2 链地址\n\n将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。\n\n### 1.3.1.3 建立公共溢出区\n\n这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表\n\n### 1.3.1.4 开放定址法(再散列法)\n\n1.线性探测再散列：\n\ndii=1，2，3，…，m-1         冲突发生时，顺序查看表中下一单元，直到找出一个空单元或查遍全表。\n\n2.二次探测再散列：\n\ndi=12，-12，22，-22，…，k2，-k2    ( k<=m/2 )         冲突发生时，在表的左右进行跳跃式探测，比较灵活。\n\n3.伪随机探测再散列：\n\ndi=伪随机数序列。  具体实现时，应建立一个伪随机数发生器，（如i=(i+p) % m），并给定一个随机数做起点。\n\n### 1.3.2 哈希函数的构造方法\n\n### 1.3.2.1 数字分析法\n\n可以从关键如果事先知道关键字集合，并且每个关键字的位数比哈希表的地址码位数多时，可以从关键字中选出分布较均匀的若干位，构成哈希地址。\n\n### 1.3.2.2 平方取中法\n\n当无法确定关键字中哪几位分布较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为哈希地址。\n\n### 1.3.2.3 分段叠加法\n\n这种方法是按哈希表地址位数将关键字分成位数相等的几部分（最后一部分可以较短），然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。\n\n### 1.3.2.4 除留余数法\n\n假设哈希表长为m，p为小于等于m的最大素数，则哈希函数为 h（k）=k  %  p ，其中%为模p取余运算。\n\n## 1.4 参考[^参考]\n\n[^参考]: [哈希表冲突及处理冲突的方法](https://blog.csdn.net/qq_40803710/article/details/80945617?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&dist_request_id=1328767.80835.16177609952348745&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control)\n","slug":"计算机/算法/哈希","published":0,"date":"2021-04-08T00:31:46.337Z","updated":"2021-04-08T00:31:46.337Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3th10018w37u7gpv7qpc","content":"<h1 id=\"哈希\"><a class=\"markdownIt-Anchor\" href=\"#哈希\"></a> 哈希</h1>\n<h2 id=\"11-数据结构\"><a class=\"markdownIt-Anchor\" href=\"#11-数据结构\"></a> 1.1 数据结构</h2>\n<p>根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称为哈希表，这一映像过程称为哈希造表或者散列，所得的存储位置称哈希地址或散列地址。</p>\n<h2 id=\"12-寻址\"><a class=\"markdownIt-Anchor\" href=\"#12-寻址\"></a> 1.2 寻址</h2>\n<h2 id=\"13-冲突\"><a class=\"markdownIt-Anchor\" href=\"#13-冲突\"></a> 1.3 冲突</h2>\n<h3 id=\"131-解决办法\"><a class=\"markdownIt-Anchor\" href=\"#131-解决办法\"></a> 1.3.1 解决办法</h3>\n<h3 id=\"1311-再哈希\"><a class=\"markdownIt-Anchor\" href=\"#1311-再哈希\"></a> 1.3.1.1 再哈希</h3>\n<p>用不同的哈希函数，对产生地址冲突的关键字再次进行哈希计算，获取另一个哈希地址，知道不在产生冲突，这种方法不易产生“二次聚集”，但是增加的计算的时间。</p>\n<h3 id=\"1312-链地址\"><a class=\"markdownIt-Anchor\" href=\"#1312-链地址\"></a> 1.3.1.2 链地址</h3>\n<p>将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。</p>\n<h3 id=\"1313-建立公共溢出区\"><a class=\"markdownIt-Anchor\" href=\"#1313-建立公共溢出区\"></a> 1.3.1.3 建立公共溢出区</h3>\n<p>这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表</p>\n<h3 id=\"1314-开放定址法再散列法\"><a class=\"markdownIt-Anchor\" href=\"#1314-开放定址法再散列法\"></a> 1.3.1.4 开放定址法(再散列法)</h3>\n<p>1.线性探测再散列：</p>\n<p>dii=1，2，3，…，m-1         冲突发生时，顺序查看表中下一单元，直到找出一个空单元或查遍全表。</p>\n<p>2.二次探测再散列：</p>\n<p>di=12，-12，22，-22，…，k2，-k2    ( k&lt;=m/2 )         冲突发生时，在表的左右进行跳跃式探测，比较灵活。</p>\n<p>3.伪随机探测再散列：</p>\n<p>di=伪随机数序列。  具体实现时，应建立一个伪随机数发生器，（如i=(i+p) % m），并给定一个随机数做起点。</p>\n<h3 id=\"132-哈希函数的构造方法\"><a class=\"markdownIt-Anchor\" href=\"#132-哈希函数的构造方法\"></a> 1.3.2 哈希函数的构造方法</h3>\n<h3 id=\"1321-数字分析法\"><a class=\"markdownIt-Anchor\" href=\"#1321-数字分析法\"></a> 1.3.2.1 数字分析法</h3>\n<p>可以从关键如果事先知道关键字集合，并且每个关键字的位数比哈希表的地址码位数多时，可以从关键字中选出分布较均匀的若干位，构成哈希地址。</p>\n<h3 id=\"1322-平方取中法\"><a class=\"markdownIt-Anchor\" href=\"#1322-平方取中法\"></a> 1.3.2.2 平方取中法</h3>\n<p>当无法确定关键字中哪几位分布较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为哈希地址。</p>\n<h3 id=\"1323-分段叠加法\"><a class=\"markdownIt-Anchor\" href=\"#1323-分段叠加法\"></a> 1.3.2.3 分段叠加法</h3>\n<p>这种方法是按哈希表地址位数将关键字分成位数相等的几部分（最后一部分可以较短），然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。</p>\n<h3 id=\"1324-除留余数法\"><a class=\"markdownIt-Anchor\" href=\"#1324-除留余数法\"></a> 1.3.2.4 除留余数法</h3>\n<p>假设哈希表长为m，p为小于等于m的最大素数，则哈希函数为 h（k）=k  %  p ，其中%为模p取余运算。</p>\n<h2 id=\"14-参考\"><a class=\"markdownIt-Anchor\" href=\"#14-参考\"></a> 1.4 参考<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></h2>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://blog.csdn.net/qq_40803710/article/details/80945617?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;dist_request_id=1328767.80835.16177609952348745&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control\">哈希表冲突及处理冲突的方法</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"哈希\"><a class=\"markdownIt-Anchor\" href=\"#哈希\"></a> 哈希</h1>\n<h2 id=\"11-数据结构\"><a class=\"markdownIt-Anchor\" href=\"#11-数据结构\"></a> 1.1 数据结构</h2>\n<p>根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称为哈希表，这一映像过程称为哈希造表或者散列，所得的存储位置称哈希地址或散列地址。</p>\n<h2 id=\"12-寻址\"><a class=\"markdownIt-Anchor\" href=\"#12-寻址\"></a> 1.2 寻址</h2>\n<h2 id=\"13-冲突\"><a class=\"markdownIt-Anchor\" href=\"#13-冲突\"></a> 1.3 冲突</h2>\n<h3 id=\"131-解决办法\"><a class=\"markdownIt-Anchor\" href=\"#131-解决办法\"></a> 1.3.1 解决办法</h3>\n<h3 id=\"1311-再哈希\"><a class=\"markdownIt-Anchor\" href=\"#1311-再哈希\"></a> 1.3.1.1 再哈希</h3>\n<p>用不同的哈希函数，对产生地址冲突的关键字再次进行哈希计算，获取另一个哈希地址，知道不在产生冲突，这种方法不易产生“二次聚集”，但是增加的计算的时间。</p>\n<h3 id=\"1312-链地址\"><a class=\"markdownIt-Anchor\" href=\"#1312-链地址\"></a> 1.3.1.2 链地址</h3>\n<p>将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。</p>\n<h3 id=\"1313-建立公共溢出区\"><a class=\"markdownIt-Anchor\" href=\"#1313-建立公共溢出区\"></a> 1.3.1.3 建立公共溢出区</h3>\n<p>这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表</p>\n<h3 id=\"1314-开放定址法再散列法\"><a class=\"markdownIt-Anchor\" href=\"#1314-开放定址法再散列法\"></a> 1.3.1.4 开放定址法(再散列法)</h3>\n<p>1.线性探测再散列：</p>\n<p>dii=1，2，3，…，m-1         冲突发生时，顺序查看表中下一单元，直到找出一个空单元或查遍全表。</p>\n<p>2.二次探测再散列：</p>\n<p>di=12，-12，22，-22，…，k2，-k2    ( k&lt;=m/2 )         冲突发生时，在表的左右进行跳跃式探测，比较灵活。</p>\n<p>3.伪随机探测再散列：</p>\n<p>di=伪随机数序列。  具体实现时，应建立一个伪随机数发生器，（如i=(i+p) % m），并给定一个随机数做起点。</p>\n<h3 id=\"132-哈希函数的构造方法\"><a class=\"markdownIt-Anchor\" href=\"#132-哈希函数的构造方法\"></a> 1.3.2 哈希函数的构造方法</h3>\n<h3 id=\"1321-数字分析法\"><a class=\"markdownIt-Anchor\" href=\"#1321-数字分析法\"></a> 1.3.2.1 数字分析法</h3>\n<p>可以从关键如果事先知道关键字集合，并且每个关键字的位数比哈希表的地址码位数多时，可以从关键字中选出分布较均匀的若干位，构成哈希地址。</p>\n<h3 id=\"1322-平方取中法\"><a class=\"markdownIt-Anchor\" href=\"#1322-平方取中法\"></a> 1.3.2.2 平方取中法</h3>\n<p>当无法确定关键字中哪几位分布较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为哈希地址。</p>\n<h3 id=\"1323-分段叠加法\"><a class=\"markdownIt-Anchor\" href=\"#1323-分段叠加法\"></a> 1.3.2.3 分段叠加法</h3>\n<p>这种方法是按哈希表地址位数将关键字分成位数相等的几部分（最后一部分可以较短），然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。</p>\n<h3 id=\"1324-除留余数法\"><a class=\"markdownIt-Anchor\" href=\"#1324-除留余数法\"></a> 1.3.2.4 除留余数法</h3>\n<p>假设哈希表长为m，p为小于等于m的最大素数，则哈希函数为 h（k）=k  %  p ，其中%为模p取余运算。</p>\n<h2 id=\"14-参考\"><a class=\"markdownIt-Anchor\" href=\"#14-参考\"></a> 1.4 参考<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></h2>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://blog.csdn.net/qq_40803710/article/details/80945617?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;dist_request_id=1328767.80835.16177609952348745&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control\">哈希表冲突及处理冲突的方法</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n"},{"_content":"# 算法\n\n## 1、算法--Swift\n\n### 1.1 [raywenderlich/swift-algorithm-club](https://github.com/raywenderlich/swift-algorithm-club.git)\n\nAlgorithms and data structures in Swift, with explanations!\n\n## 2. 算法概要\n\n### 2.1 随机数\n\n|函数名|返回值|取值范围|\n|-----|-----|-----|\n|rand()|int|0～2147483647|\n|random()|long|0～2147483647|\n|arc4random()|uint32_t|0～4294967295|\n\n#### 2.1.1 随机数和伪随机数\n\n真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。\n\n而计算机中的随机数并不是真正的随机数，而是通过通过随机函数按照一定算法模拟产生的，其结果是确定可预见的，所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数。\n\n硬件方法是指采集某一种物理噪声，经过抽样、量化之后得到的随机数。例如大气噪声。此类噪声是由自然界中的布朗运动等现象产生的，因此可以看作真正的随机数生成器，只要是通过算法产生的随机数都是伪随机数。通过真实随机事件取得的随机数才是真随机数。\n\n#### 2.1.2 随机种子（Random Seed）\n\n一种以随机数作为对象的以真随机数（种子）为初始条件的随机数。计算机中的随机数都是伪随机数，以一个真随机数（种子）作为初始条件，然后用一定的算法不停迭代产生随机数。通俗来讲种子就是个序号，这个序号交给一个数列管理器，通过这个序号，你从管理器中取出一个数列，这个数列就是你通过那个序号得到的随机数。\n\n种子和随机数列是一一对应的。{An}=f(x), x 就是种子，F()是算法，{An}是数列，这个数列看上去是随机的，这是因为An的通项很复杂。\n\n种子的选择有规律吗？肯定是有！那么生成的随机数也一定是有规律的了。既然有规律，那肯定就是伪随机了，因为你不知道种子和随机数算法对你来说当然就是随机数。\n\n*原文链接： [iOS 随机数](https://www.jianshu.com/p/3e751235ecd0)\n","source":"_drafts/计算机/算法/iOS之算法.md","raw":"# 算法\n\n## 1、算法--Swift\n\n### 1.1 [raywenderlich/swift-algorithm-club](https://github.com/raywenderlich/swift-algorithm-club.git)\n\nAlgorithms and data structures in Swift, with explanations!\n\n## 2. 算法概要\n\n### 2.1 随机数\n\n|函数名|返回值|取值范围|\n|-----|-----|-----|\n|rand()|int|0～2147483647|\n|random()|long|0～2147483647|\n|arc4random()|uint32_t|0～4294967295|\n\n#### 2.1.1 随机数和伪随机数\n\n真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。\n\n而计算机中的随机数并不是真正的随机数，而是通过通过随机函数按照一定算法模拟产生的，其结果是确定可预见的，所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数。\n\n硬件方法是指采集某一种物理噪声，经过抽样、量化之后得到的随机数。例如大气噪声。此类噪声是由自然界中的布朗运动等现象产生的，因此可以看作真正的随机数生成器，只要是通过算法产生的随机数都是伪随机数。通过真实随机事件取得的随机数才是真随机数。\n\n#### 2.1.2 随机种子（Random Seed）\n\n一种以随机数作为对象的以真随机数（种子）为初始条件的随机数。计算机中的随机数都是伪随机数，以一个真随机数（种子）作为初始条件，然后用一定的算法不停迭代产生随机数。通俗来讲种子就是个序号，这个序号交给一个数列管理器，通过这个序号，你从管理器中取出一个数列，这个数列就是你通过那个序号得到的随机数。\n\n种子和随机数列是一一对应的。{An}=f(x), x 就是种子，F()是算法，{An}是数列，这个数列看上去是随机的，这是因为An的通项很复杂。\n\n种子的选择有规律吗？肯定是有！那么生成的随机数也一定是有规律的了。既然有规律，那肯定就是伪随机了，因为你不知道种子和随机数算法对你来说当然就是随机数。\n\n*原文链接： [iOS 随机数](https://www.jianshu.com/p/3e751235ecd0)\n","slug":"计算机/算法/iOS之算法","published":0,"date":"2021-04-08T00:31:46.336Z","updated":"2021-04-08T00:31:46.336Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3th10019w37u0lq1gxac","content":"<h1 id=\"算法\"><a class=\"markdownIt-Anchor\" href=\"#算法\"></a> 算法</h1>\n<h2 id=\"1-算法swift\"><a class=\"markdownIt-Anchor\" href=\"#1-算法swift\"></a> 1、算法–Swift</h2>\n<h3 id=\"11-raywenderlichswift-algorithm-club\"><a class=\"markdownIt-Anchor\" href=\"#11-raywenderlichswift-algorithm-club\"></a> 1.1 <a href=\"https://github.com/raywenderlich/swift-algorithm-club.git\">raywenderlich/swift-algorithm-club</a></h3>\n<p>Algorithms and data structures in Swift, with explanations!</p>\n<h2 id=\"2-算法概要\"><a class=\"markdownIt-Anchor\" href=\"#2-算法概要\"></a> 2. 算法概要</h2>\n<h3 id=\"21-随机数\"><a class=\"markdownIt-Anchor\" href=\"#21-随机数\"></a> 2.1 随机数</h3>\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>返回值</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rand()</td>\n<td>int</td>\n<td>0～2147483647</td>\n</tr>\n<tr>\n<td>random()</td>\n<td>long</td>\n<td>0～2147483647</td>\n</tr>\n<tr>\n<td>arc4random()</td>\n<td>uint32_t</td>\n<td>0～4294967295</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"211-随机数和伪随机数\"><a class=\"markdownIt-Anchor\" href=\"#211-随机数和伪随机数\"></a> 2.1.1 随机数和伪随机数</h4>\n<p>真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。</p>\n<p>而计算机中的随机数并不是真正的随机数，而是通过通过随机函数按照一定算法模拟产生的，其结果是确定可预见的，所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数。</p>\n<p>硬件方法是指采集某一种物理噪声，经过抽样、量化之后得到的随机数。例如大气噪声。此类噪声是由自然界中的布朗运动等现象产生的，因此可以看作真正的随机数生成器，只要是通过算法产生的随机数都是伪随机数。通过真实随机事件取得的随机数才是真随机数。</p>\n<h4 id=\"212-随机种子random-seed\"><a class=\"markdownIt-Anchor\" href=\"#212-随机种子random-seed\"></a> 2.1.2 随机种子（Random Seed）</h4>\n<p>一种以随机数作为对象的以真随机数（种子）为初始条件的随机数。计算机中的随机数都是伪随机数，以一个真随机数（种子）作为初始条件，然后用一定的算法不停迭代产生随机数。通俗来讲种子就是个序号，这个序号交给一个数列管理器，通过这个序号，你从管理器中取出一个数列，这个数列就是你通过那个序号得到的随机数。</p>\n<p>种子和随机数列是一一对应的。{An}=f(x), x 就是种子，F()是算法，{An}是数列，这个数列看上去是随机的，这是因为An的通项很复杂。</p>\n<p>种子的选择有规律吗？肯定是有！那么生成的随机数也一定是有规律的了。既然有规律，那肯定就是伪随机了，因为你不知道种子和随机数算法对你来说当然就是随机数。</p>\n<p>*原文链接： <a href=\"https://www.jianshu.com/p/3e751235ecd0\">iOS 随机数</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"算法\"><a class=\"markdownIt-Anchor\" href=\"#算法\"></a> 算法</h1>\n<h2 id=\"1-算法swift\"><a class=\"markdownIt-Anchor\" href=\"#1-算法swift\"></a> 1、算法–Swift</h2>\n<h3 id=\"11-raywenderlichswift-algorithm-club\"><a class=\"markdownIt-Anchor\" href=\"#11-raywenderlichswift-algorithm-club\"></a> 1.1 <a href=\"https://github.com/raywenderlich/swift-algorithm-club.git\">raywenderlich/swift-algorithm-club</a></h3>\n<p>Algorithms and data structures in Swift, with explanations!</p>\n<h2 id=\"2-算法概要\"><a class=\"markdownIt-Anchor\" href=\"#2-算法概要\"></a> 2. 算法概要</h2>\n<h3 id=\"21-随机数\"><a class=\"markdownIt-Anchor\" href=\"#21-随机数\"></a> 2.1 随机数</h3>\n<table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>返回值</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>rand()</td>\n<td>int</td>\n<td>0～2147483647</td>\n</tr>\n<tr>\n<td>random()</td>\n<td>long</td>\n<td>0～2147483647</td>\n</tr>\n<tr>\n<td>arc4random()</td>\n<td>uint32_t</td>\n<td>0～4294967295</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"211-随机数和伪随机数\"><a class=\"markdownIt-Anchor\" href=\"#211-随机数和伪随机数\"></a> 2.1.1 随机数和伪随机数</h4>\n<p>真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。</p>\n<p>而计算机中的随机数并不是真正的随机数，而是通过通过随机函数按照一定算法模拟产生的，其结果是确定可预见的，所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数。</p>\n<p>硬件方法是指采集某一种物理噪声，经过抽样、量化之后得到的随机数。例如大气噪声。此类噪声是由自然界中的布朗运动等现象产生的，因此可以看作真正的随机数生成器，只要是通过算法产生的随机数都是伪随机数。通过真实随机事件取得的随机数才是真随机数。</p>\n<h4 id=\"212-随机种子random-seed\"><a class=\"markdownIt-Anchor\" href=\"#212-随机种子random-seed\"></a> 2.1.2 随机种子（Random Seed）</h4>\n<p>一种以随机数作为对象的以真随机数（种子）为初始条件的随机数。计算机中的随机数都是伪随机数，以一个真随机数（种子）作为初始条件，然后用一定的算法不停迭代产生随机数。通俗来讲种子就是个序号，这个序号交给一个数列管理器，通过这个序号，你从管理器中取出一个数列，这个数列就是你通过那个序号得到的随机数。</p>\n<p>种子和随机数列是一一对应的。{An}=f(x), x 就是种子，F()是算法，{An}是数列，这个数列看上去是随机的，这是因为An的通项很复杂。</p>\n<p>种子的选择有规律吗？肯定是有！那么生成的随机数也一定是有规律的了。既然有规律，那肯定就是伪随机了，因为你不知道种子和随机数算法对你来说当然就是随机数。</p>\n<p>*原文链接： <a href=\"https://www.jianshu.com/p/3e751235ecd0\">iOS 随机数</a></p>\n"},{"_content":"# APNS\n\n## 1. KeyChain\n\n[UniversalLink](https://www.cnblogs.com/fshmjl/p/5859781.html)\n\n```zh\n有一个注册的域名\n通过 SSL 访问域名\n支持上传一个 JSON 文件到你的域名\n```\n\n1.添加域名到 Capabilities\n2.上传 apple-app-site-association 文件\n\n```json\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": {\n      \"TBEJCS6FFP.com.domain.App\": {\n        \"paths\":[ \"*\" ]\n      }\n    }\n  }\n}\n```\n\n3.在 APP 里处理通用链接\n\n![通用链接流程](resources/universal_link.png)\n\nExtension\n\n```zh\niMessage\nSticker\n3D Touch\n生物识别\n```\n","source":"_posts/学习笔记/iOS/iOS之AppleService.md","raw":"# APNS\n\n## 1. KeyChain\n\n[UniversalLink](https://www.cnblogs.com/fshmjl/p/5859781.html)\n\n```zh\n有一个注册的域名\n通过 SSL 访问域名\n支持上传一个 JSON 文件到你的域名\n```\n\n1.添加域名到 Capabilities\n2.上传 apple-app-site-association 文件\n\n```json\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": {\n      \"TBEJCS6FFP.com.domain.App\": {\n        \"paths\":[ \"*\" ]\n      }\n    }\n  }\n}\n```\n\n3.在 APP 里处理通用链接\n\n![通用链接流程](resources/universal_link.png)\n\nExtension\n\n```zh\niMessage\nSticker\n3D Touch\n生物识别\n```\n","slug":"学习笔记/iOS/iOS之AppleService","published":1,"date":"2021-02-24T12:31:09.181Z","updated":"2021-04-06T14:21:30.898Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3th2001aw37u7m2wfyvx","content":"<h1 id=\"apns\"><a class=\"markdownIt-Anchor\" href=\"#apns\"></a> APNS</h1>\n<h2 id=\"1-keychain\"><a class=\"markdownIt-Anchor\" href=\"#1-keychain\"></a> 1. KeyChain</h2>\n<p><a href=\"https://www.cnblogs.com/fshmjl/p/5859781.html\">UniversalLink</a></p>\n<pre class=\"highlight\"><code class=\"zh\">有一个注册的域名\n通过 SSL 访问域名\n支持上传一个 JSON 文件到你的域名\n</code></pre>\n<p>1.添加域名到 Capabilities<br />\n2.上传 apple-app-site-association 文件</p>\n<pre class=\"highlight\"><code class=\"json\">&#123;\n  <span class=\"hljs-attr\">\"applinks\"</span>: &#123;\n    <span class=\"hljs-attr\">\"apps\"</span>: [],\n    <span class=\"hljs-attr\">\"details\"</span>: &#123;\n      <span class=\"hljs-attr\">\"TBEJCS6FFP.com.domain.App\"</span>: &#123;\n        <span class=\"hljs-attr\">\"paths\"</span>:[ <span class=\"hljs-string\">\"*\"</span> ]\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>3.在 APP 里处理通用链接</p>\n<p><img src=\"resources/universal_link.png\" alt=\"通用链接流程\" /></p>\n<p>Extension</p>\n<pre class=\"highlight\"><code class=\"zh\">iMessage\nSticker\n3D Touch\n生物识别\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"apns\"><a class=\"markdownIt-Anchor\" href=\"#apns\"></a> APNS</h1>\n<h2 id=\"1-keychain\"><a class=\"markdownIt-Anchor\" href=\"#1-keychain\"></a> 1. KeyChain</h2>\n<p><a href=\"https://www.cnblogs.com/fshmjl/p/5859781.html\">UniversalLink</a></p>\n<pre class=\"highlight\"><code class=\"zh\">有一个注册的域名\n通过 SSL 访问域名\n支持上传一个 JSON 文件到你的域名\n</code></pre>\n<p>1.添加域名到 Capabilities<br />\n2.上传 apple-app-site-association 文件</p>\n<pre class=\"highlight\"><code class=\"json\">&#123;\n  <span class=\"hljs-attr\">\"applinks\"</span>: &#123;\n    <span class=\"hljs-attr\">\"apps\"</span>: [],\n    <span class=\"hljs-attr\">\"details\"</span>: &#123;\n      <span class=\"hljs-attr\">\"TBEJCS6FFP.com.domain.App\"</span>: &#123;\n        <span class=\"hljs-attr\">\"paths\"</span>:[ <span class=\"hljs-string\">\"*\"</span> ]\n      &#125;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<p>3.在 APP 里处理通用链接</p>\n<p><img src=\"resources/universal_link.png\" alt=\"通用链接流程\" /></p>\n<p>Extension</p>\n<pre class=\"highlight\"><code class=\"zh\">iMessage\nSticker\n3D Touch\n生物识别\n</code></pre>\n"},{"_content":"# iOS 博主与网站收藏\n\n## 网站\n\n1、[objc 中国](https://objccn.io/issues/)\n\n## 博主\n\n1、[戴铭的博客 - 星光社](https://ming1016.github.io/)\n2、[楚权的世界](http://chuquan.me/)\n3、[聊宅](https://lision.me/archives/)\n4、[hotwill](https://blog.hotwill.cn/OpenCL简介.html)\n5、[杨萧玉](http://yulingtianxia.com/)\n\n## 期刊\n\n1、[iOS-Weekly](https://github.com/SwiftOldDriver/iOS-Weekly)\n\n## 优质 GitHub 账号\n\n1、[Facebook](https://github.com/facebook)\n\n2、[Tencent](https://github.com/Tencent)\n\n3、[Apple](https://github.com/apple)\n\n4、[airbnb](https://github.com/airbnb)\n\n5、[Google](https://github.com/google)\n\n## 第三方库\n","source":"_posts/学习笔记/iOS/iOS 博主与网站.md","raw":"# iOS 博主与网站收藏\n\n## 网站\n\n1、[objc 中国](https://objccn.io/issues/)\n\n## 博主\n\n1、[戴铭的博客 - 星光社](https://ming1016.github.io/)\n2、[楚权的世界](http://chuquan.me/)\n3、[聊宅](https://lision.me/archives/)\n4、[hotwill](https://blog.hotwill.cn/OpenCL简介.html)\n5、[杨萧玉](http://yulingtianxia.com/)\n\n## 期刊\n\n1、[iOS-Weekly](https://github.com/SwiftOldDriver/iOS-Weekly)\n\n## 优质 GitHub 账号\n\n1、[Facebook](https://github.com/facebook)\n\n2、[Tencent](https://github.com/Tencent)\n\n3、[Apple](https://github.com/apple)\n\n4、[airbnb](https://github.com/airbnb)\n\n5、[Google](https://github.com/google)\n\n## 第三方库\n","slug":"学习笔记/iOS/iOS 博主与网站","published":1,"date":"2021-02-24T12:31:09.181Z","updated":"2021-03-27T08:35:05.900Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3th3001bw37u5nzpdakn","content":"<h1 id=\"ios-博主与网站收藏\"><a class=\"markdownIt-Anchor\" href=\"#ios-博主与网站收藏\"></a> iOS 博主与网站收藏</h1>\n<h2 id=\"网站\"><a class=\"markdownIt-Anchor\" href=\"#网站\"></a> 网站</h2>\n<p>1、<a href=\"https://objccn.io/issues/\">objc 中国</a></p>\n<h2 id=\"博主\"><a class=\"markdownIt-Anchor\" href=\"#博主\"></a> 博主</h2>\n<p>1、<a href=\"https://ming1016.github.io/\">戴铭的博客 - 星光社</a><br />\n2、<a href=\"http://chuquan.me/\">楚权的世界</a><br />\n3、<a href=\"https://lision.me/archives/\">聊宅</a><br />\n4、<a href=\"https://blog.hotwill.cn/OpenCL%E7%AE%80%E4%BB%8B.html\">hotwill</a><br />\n5、<a href=\"http://yulingtianxia.com/\">杨萧玉</a></p>\n<h2 id=\"期刊\"><a class=\"markdownIt-Anchor\" href=\"#期刊\"></a> 期刊</h2>\n<p>1、<a href=\"https://github.com/SwiftOldDriver/iOS-Weekly\">iOS-Weekly</a></p>\n<h2 id=\"优质-github-账号\"><a class=\"markdownIt-Anchor\" href=\"#优质-github-账号\"></a> 优质 GitHub 账号</h2>\n<p>1、<a href=\"https://github.com/facebook\">Facebook</a></p>\n<p>2、<a href=\"https://github.com/Tencent\">Tencent</a></p>\n<p>3、<a href=\"https://github.com/apple\">Apple</a></p>\n<p>4、<a href=\"https://github.com/airbnb\">airbnb</a></p>\n<p>5、<a href=\"https://github.com/google\">Google</a></p>\n<h2 id=\"第三方库\"><a class=\"markdownIt-Anchor\" href=\"#第三方库\"></a> 第三方库</h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios-博主与网站收藏\"><a class=\"markdownIt-Anchor\" href=\"#ios-博主与网站收藏\"></a> iOS 博主与网站收藏</h1>\n<h2 id=\"网站\"><a class=\"markdownIt-Anchor\" href=\"#网站\"></a> 网站</h2>\n<p>1、<a href=\"https://objccn.io/issues/\">objc 中国</a></p>\n<h2 id=\"博主\"><a class=\"markdownIt-Anchor\" href=\"#博主\"></a> 博主</h2>\n<p>1、<a href=\"https://ming1016.github.io/\">戴铭的博客 - 星光社</a><br />\n2、<a href=\"http://chuquan.me/\">楚权的世界</a><br />\n3、<a href=\"https://lision.me/archives/\">聊宅</a><br />\n4、<a href=\"https://blog.hotwill.cn/OpenCL%E7%AE%80%E4%BB%8B.html\">hotwill</a><br />\n5、<a href=\"http://yulingtianxia.com/\">杨萧玉</a></p>\n<h2 id=\"期刊\"><a class=\"markdownIt-Anchor\" href=\"#期刊\"></a> 期刊</h2>\n<p>1、<a href=\"https://github.com/SwiftOldDriver/iOS-Weekly\">iOS-Weekly</a></p>\n<h2 id=\"优质-github-账号\"><a class=\"markdownIt-Anchor\" href=\"#优质-github-账号\"></a> 优质 GitHub 账号</h2>\n<p>1、<a href=\"https://github.com/facebook\">Facebook</a></p>\n<p>2、<a href=\"https://github.com/Tencent\">Tencent</a></p>\n<p>3、<a href=\"https://github.com/apple\">Apple</a></p>\n<p>4、<a href=\"https://github.com/airbnb\">airbnb</a></p>\n<p>5、<a href=\"https://github.com/google\">Google</a></p>\n<h2 id=\"第三方库\"><a class=\"markdownIt-Anchor\" href=\"#第三方库\"></a> 第三方库</h2>\n"},{"_content":"# Block\n\n## 1. [iOS-Block底层实现原理](https://limeng99.club/learning/2020/05/25/iOS-Block%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html)\n","source":"_posts/学习笔记/iOS/iOS之Block.md","raw":"# Block\n\n## 1. [iOS-Block底层实现原理](https://limeng99.club/learning/2020/05/25/iOS-Block%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html)\n","slug":"学习笔记/iOS/iOS之Block","published":1,"date":"2021-04-09T13:04:02.201Z","updated":"2021-04-09T13:04:02.201Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3th3001cw37ugn3g06fk","content":"<h1 id=\"block\"><a class=\"markdownIt-Anchor\" href=\"#block\"></a> Block</h1>\n<h2 id=\"1-ios-block底层实现原理\"><a class=\"markdownIt-Anchor\" href=\"#1-ios-block底层实现原理\"></a> 1. <a href=\"https://limeng99.club/learning/2020/05/25/iOS-Block%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html\">iOS-Block底层实现原理</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"block\"><a class=\"markdownIt-Anchor\" href=\"#block\"></a> Block</h1>\n<h2 id=\"1-ios-block底层实现原理\"><a class=\"markdownIt-Anchor\" href=\"#1-ios-block底层实现原理\"></a> 1. <a href=\"https://limeng99.club/learning/2020/05/25/iOS-Block%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html\">iOS-Block底层实现原理</a></h2>\n"},{"_content":"# 内存管理\n\n## 内存管理原则\n\n1、自己生成的对象，自己持有\n\n    alloc\n    new\n    copy\n    mutablecopy\n\n2、非自己生成的对象，自己也能持有\n\n    [NSMutableArray array];\n    等等\n\n3、不再需要自己持有的对象要释放\n4、非自己持有的对象无法释放\n\n实现方式\n\n    alloc/retain/release/dealloc\n    autorelease\n\nARC\n\n原则\n\n    同非ARC原则\n\n方式：\n\n    __strong\n    __weak\n    __unsafe-unretain\n    __autorelease\n\n规则\n\n    不能使用retain/release/retainCount/autorelease\n    不能使用NSAllocateObject/NSDeallocateObject\n    遵循内存管理命名规则\n    dealloc\n    使用@autoreleasePool代替NSAutoreleasePool\n    不能使用NSZone\n    对象形变量不能作为C语言结构体成员\n    显示转换id 和 （void *）\n\n属性\n\n    assign\n    strong\n    copy\n    retain\n    unsafe_unretained\n    weak \n\n数组\n\n    动态数组 id __strong *array = [NSMutableArray array]\n    释放\n\n实现方式：\n\n    __strong：自动注册到autoreleasePool中\n    __weak：自动注册到autoreleasePool中，是否可weak，weak变量释放流程\n    __autorelease：autorelease的方式\n","source":"_posts/学习笔记/iOS/iOS之内存管理.md","raw":"# 内存管理\n\n## 内存管理原则\n\n1、自己生成的对象，自己持有\n\n    alloc\n    new\n    copy\n    mutablecopy\n\n2、非自己生成的对象，自己也能持有\n\n    [NSMutableArray array];\n    等等\n\n3、不再需要自己持有的对象要释放\n4、非自己持有的对象无法释放\n\n实现方式\n\n    alloc/retain/release/dealloc\n    autorelease\n\nARC\n\n原则\n\n    同非ARC原则\n\n方式：\n\n    __strong\n    __weak\n    __unsafe-unretain\n    __autorelease\n\n规则\n\n    不能使用retain/release/retainCount/autorelease\n    不能使用NSAllocateObject/NSDeallocateObject\n    遵循内存管理命名规则\n    dealloc\n    使用@autoreleasePool代替NSAutoreleasePool\n    不能使用NSZone\n    对象形变量不能作为C语言结构体成员\n    显示转换id 和 （void *）\n\n属性\n\n    assign\n    strong\n    copy\n    retain\n    unsafe_unretained\n    weak \n\n数组\n\n    动态数组 id __strong *array = [NSMutableArray array]\n    释放\n\n实现方式：\n\n    __strong：自动注册到autoreleasePool中\n    __weak：自动注册到autoreleasePool中，是否可weak，weak变量释放流程\n    __autorelease：autorelease的方式\n","slug":"学习笔记/iOS/iOS之内存管理","published":1,"date":"2021-02-24T12:31:09.182Z","updated":"2021-04-06T14:19:20.863Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3th6001dw37ug8g2eetz","content":"<h1 id=\"内存管理\"><a class=\"markdownIt-Anchor\" href=\"#内存管理\"></a> 内存管理</h1>\n<h2 id=\"内存管理原则\"><a class=\"markdownIt-Anchor\" href=\"#内存管理原则\"></a> 内存管理原则</h2>\n<p>1、自己生成的对象，自己持有</p>\n<pre><code>alloc\nnew\ncopy\nmutablecopy\n</code></pre>\n<p>2、非自己生成的对象，自己也能持有</p>\n<pre><code>[NSMutableArray array];\n等等\n</code></pre>\n<p>3、不再需要自己持有的对象要释放<br />\n4、非自己持有的对象无法释放</p>\n<p>实现方式</p>\n<pre><code>alloc/retain/release/dealloc\nautorelease\n</code></pre>\n<p>ARC</p>\n<p>原则</p>\n<pre><code>同非ARC原则\n</code></pre>\n<p>方式：</p>\n<pre><code>__strong\n__weak\n__unsafe-unretain\n__autorelease\n</code></pre>\n<p>规则</p>\n<pre><code>不能使用retain/release/retainCount/autorelease\n不能使用NSAllocateObject/NSDeallocateObject\n遵循内存管理命名规则\ndealloc\n使用@autoreleasePool代替NSAutoreleasePool\n不能使用NSZone\n对象形变量不能作为C语言结构体成员\n显示转换id 和 （void *）\n</code></pre>\n<p>属性</p>\n<pre><code>assign\nstrong\ncopy\nretain\nunsafe_unretained\nweak \n</code></pre>\n<p>数组</p>\n<pre><code>动态数组 id __strong *array = [NSMutableArray array]\n释放\n</code></pre>\n<p>实现方式：</p>\n<pre><code>__strong：自动注册到autoreleasePool中\n__weak：自动注册到autoreleasePool中，是否可weak，weak变量释放流程\n__autorelease：autorelease的方式\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"内存管理\"><a class=\"markdownIt-Anchor\" href=\"#内存管理\"></a> 内存管理</h1>\n<h2 id=\"内存管理原则\"><a class=\"markdownIt-Anchor\" href=\"#内存管理原则\"></a> 内存管理原则</h2>\n<p>1、自己生成的对象，自己持有</p>\n<pre><code>alloc\nnew\ncopy\nmutablecopy\n</code></pre>\n<p>2、非自己生成的对象，自己也能持有</p>\n<pre><code>[NSMutableArray array];\n等等\n</code></pre>\n<p>3、不再需要自己持有的对象要释放<br />\n4、非自己持有的对象无法释放</p>\n<p>实现方式</p>\n<pre><code>alloc/retain/release/dealloc\nautorelease\n</code></pre>\n<p>ARC</p>\n<p>原则</p>\n<pre><code>同非ARC原则\n</code></pre>\n<p>方式：</p>\n<pre><code>__strong\n__weak\n__unsafe-unretain\n__autorelease\n</code></pre>\n<p>规则</p>\n<pre><code>不能使用retain/release/retainCount/autorelease\n不能使用NSAllocateObject/NSDeallocateObject\n遵循内存管理命名规则\ndealloc\n使用@autoreleasePool代替NSAutoreleasePool\n不能使用NSZone\n对象形变量不能作为C语言结构体成员\n显示转换id 和 （void *）\n</code></pre>\n<p>属性</p>\n<pre><code>assign\nstrong\ncopy\nretain\nunsafe_unretained\nweak \n</code></pre>\n<p>数组</p>\n<pre><code>动态数组 id __strong *array = [NSMutableArray array]\n释放\n</code></pre>\n<p>实现方式：</p>\n<pre><code>__strong：自动注册到autoreleasePool中\n__weak：自动注册到autoreleasePool中，是否可weak，weak变量释放流程\n__autorelease：autorelease的方式\n</code></pre>\n"},{"_content":"# iOS之单元测试\n\n## 1. XCTest\n\n### 1.1 [iOS Unit Testing and UI Testing Tutorial](https://www.raywenderlich.com/960290-ios-unit-testing-and-ui-testing-tutorial)\n\n## 1.2 [Appium](http://appium.io/docs/en/about-appium/getting-started/?lang=zh)\n","source":"_posts/学习笔记/iOS/iOS之单元测试.md","raw":"# iOS之单元测试\n\n## 1. XCTest\n\n### 1.1 [iOS Unit Testing and UI Testing Tutorial](https://www.raywenderlich.com/960290-ios-unit-testing-and-ui-testing-tutorial)\n\n## 1.2 [Appium](http://appium.io/docs/en/about-appium/getting-started/?lang=zh)\n","slug":"学习笔记/iOS/iOS之单元测试","published":1,"date":"2021-04-08T00:31:46.337Z","updated":"2021-04-08T00:31:46.337Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3th7001ew37ufy43a1ne","content":"<h1 id=\"ios之单元测试\"><a class=\"markdownIt-Anchor\" href=\"#ios之单元测试\"></a> iOS之单元测试</h1>\n<h2 id=\"1-xctest\"><a class=\"markdownIt-Anchor\" href=\"#1-xctest\"></a> 1. XCTest</h2>\n<h3 id=\"11-ios-unit-testing-and-ui-testing-tutorial\"><a class=\"markdownIt-Anchor\" href=\"#11-ios-unit-testing-and-ui-testing-tutorial\"></a> 1.1 <a href=\"https://www.raywenderlich.com/960290-ios-unit-testing-and-ui-testing-tutorial\">iOS Unit Testing and UI Testing Tutorial</a></h3>\n<h2 id=\"12-appium\"><a class=\"markdownIt-Anchor\" href=\"#12-appium\"></a> 1.2 <a href=\"http://appium.io/docs/en/about-appium/getting-started/?lang=zh\">Appium</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios之单元测试\"><a class=\"markdownIt-Anchor\" href=\"#ios之单元测试\"></a> iOS之单元测试</h1>\n<h2 id=\"1-xctest\"><a class=\"markdownIt-Anchor\" href=\"#1-xctest\"></a> 1. XCTest</h2>\n<h3 id=\"11-ios-unit-testing-and-ui-testing-tutorial\"><a class=\"markdownIt-Anchor\" href=\"#11-ios-unit-testing-and-ui-testing-tutorial\"></a> 1.1 <a href=\"https://www.raywenderlich.com/960290-ios-unit-testing-and-ui-testing-tutorial\">iOS Unit Testing and UI Testing Tutorial</a></h3>\n<h2 id=\"12-appium\"><a class=\"markdownIt-Anchor\" href=\"#12-appium\"></a> 1.2 <a href=\"http://appium.io/docs/en/about-appium/getting-started/?lang=zh\">Appium</a></h2>\n"},{"_content":"\n# 规范\n\n## 一、命名规范\n\n### 1、基本规则\n\n* 清晰，又清晰又简洁是最好的了，但简洁不如清晰重要。总的讲不要使用单词的简写，除了非常常用的简写以外，尽量使用单词全称。\n\n* 一致性，命名代表意思与所做事情的一致性，命名与通常使用的名字的一致性，比如setStringValue，setTabBarColor等\n\n### 2、类命名\n\n* 大驼峰命名法、功能+类型 例如LoginViewController\n\n### 3、类别扩展命名(Category和Extension)\n\n* 类别(Category)命名：类名+功能 例如 UIView+Frame\n\n* 扩展(Extension)命名：类名+Extension 例如UIView+Extension\n  \n### 4、变量命名\n\n* 小驼峰命名法\n\n* 使用修饰+类型的方式，比如titleLabel\n* 命名尽量以清晰为主，变量名尽量可以推测其用途\n\n### 5、宏及常量命名\n\n* 常量、宏(swift中没有宏，使用常量定义)，前面带小写字母k作为常量标识，其余部分采取大写，单词以英文下划线”_“分割。\n\n* 通用的常量使用宏#define来定义，单独类中使用的常量使用static定义\n* 宏尽量少用，编译耗时，影响程序的启动，尽量用常量来代替，之前iOS工程默认有预编译文件的，后来iOS把这个默认文件去掉了，倡导用常量代替\n\n### 6、图片文件命名\n\n* 采用模块_功能形式\n\n* 尽量采用单词全拼或者公认的无歧义缩写(如nav，bg，btn等)\n\n### 7、通知协议代理命名\n\n* 通知命名：[触发通知的类名] + [Did | Will] + [动作] + Notification，例如：TextFieldDidChangeNotification等\n\n* 代理命名：作用类+should will did等关键字+作用 比如：@objc optional  func sureBtnDidTouch:(UIButton*)sureBtn\n* 协议命名：前缀+作用+ing 与类名区分 比如：NSCopying\n\n### 8、Bundle Identifier命名\n\n* 采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名根据应用进行命名。\n\n## 二、代码规范\n\n### 1、删除多余空格\n\n* 所有方法与方法之间空一行\n\n* 代码块之间空一行\n\n### 2、删除多余的注释\n\n* 删除注释掉的代码\n\n* 删除无意义的代码\n\n### 3、删除多余方法\n\n* 没有使用到的方法删除掉\n\n* 如果方法没有执行任何业务逻辑，但需要放着，给予一定的注释\n\n### 4、删除未被使用的资源文件\n\n### 5、添加必要的注释\n\n* .h文件的property需要注释(swift中参与业务逻辑的对象需要注释)\n\n* 自定义的方法需要注释\n* 大的代码块需要注释\n* 宏枚举需要有一定的注释\n* 复杂的逻辑代码需要给予一定的注释\n\n### 6、整体代码风格尽量统一\n\n* 逻辑运算符与代码之间空一格\n\n* 逻辑或方法结尾的}需要占用一格\n* 代理、逻辑业务方法等模块区分使用“//MARK: - ”，且与代码之间不要空格\n* 在方法命名时-和()之间需要有空格（objective-C）\n* 定义对象时 *号属于类型的一部分 放在对象前 与类型空格 例如：NSArray*dataArray\n\n### 7、[raywenderlich/swift-style-guide：](https://github.com/raywenderlich/swift-style-guide)Swift 代码编程规范\n\n## 三、项目管理\n\n### 1、模块管理\n\n* 采取MVC设计架构  \n\n* 采取模块化开发，公用或者常使用到的一些模块单独抽离封装到公用类，减少团队操作，提高开发效率\n* 大体上市按照业务模块、三方库、项目资源、公用类划分\n\n### 2、代码管理\n\n* 采用git多分支管理，平时开发在development分支进行\n* <mark>引入第三方库时需要经过团队讨论，参照使用方便性，学习成本，性能，项目影响覆盖等因素再决定引入，不要随意引入</mark>\n* <mark>公用的模块划分出来可以提供团队参考使用\n* 每天至少上班前更新一次代码，下班提交一次代码，以免多人工作不同步\n* 个人测试代码不要提交，以免影响同伴开发\n* 修改配置文件等共享文件前，一定要更新，修改完验证之后要马上提交，避免冲突\n\n### 3、团队交流\n\n* 工作上碰到的问题鼓励邮件沟通，方便分散式管理，也可避免长时间后不记得了\n* 对于工作问题，一定要谨慎、仔细，今天能完成和要完成的问题最好不要拖拉\n* 如果觉得某些功能实现有困难，要提出来探讨折中实现方式，不要敷衍行事\n* 工作职责一定要明确、能够对应相应负责人员处理解决，包括对接产品、设计、服务器、Android等同事，积极沟通处理\n* 有一些好的想法，方便项目开发或者能够方便团队协作的方式，积极提出，这也是一种刺激主动学习的方式\n* 平时如果觉得有什么好的学习资源、技巧，鼓励积极分享，共同成长\n* <mark>多写学习体验、鼓励钻研新技术，分享，到时候在git上建个公共文件夹（同步管理），大家平时可以在上面公开写，收集进来也可以，到时候统一整理，专题列在第五条里面，尽量用Markdown，查看方便。比如有名的三方库文件源码解读\n（AFNetWorking、SDWebImage等，培养读源码的兴趣，对知识了解也较为彻底）、Git/SVN等工具的基本使用、Vim的\n基本使用等\n\n### 5、iOS 研究方向（技术类）\n\n[#逆向工程专题](\"\")\n\n[#混合开发（如：React-Native）专题](\"\")\n\n[#单元测试系统化、自动化专题](\"\")\n\n[#持续集成化专题](\"\")\n\n[#动画专题](\"\")\n\n[#音视频专题（FFMpeg）、图片处理（OpenGL、GPUimage、OpenCV）](\"\")\n\n[#设计模式专题](\"\")\n\n[#iOS框架专题](\"\")\n\n[#性能研究专题](\"\")\n\n[#算法专题](\"\")\n\n[#网络及网络协议专题](\"\")\n\n[#操作系统（Linux、Unix）专题](\"\")\n\n[#编程语言专题](\"\")\n\n[#重构专题](\"\")\n\n### 6、业余讨论（非技术类）\n\n[#运动](\"\")\n\n[#游戏娱乐](\"\")\n\n[#理财](\"\")\n\n[#项目管理](\"\")\n\n[#学习方法，专业思维的培养](\"\")\n","source":"_posts/学习笔记/iOS/iOS之开发规范化.md","raw":"\n# 规范\n\n## 一、命名规范\n\n### 1、基本规则\n\n* 清晰，又清晰又简洁是最好的了，但简洁不如清晰重要。总的讲不要使用单词的简写，除了非常常用的简写以外，尽量使用单词全称。\n\n* 一致性，命名代表意思与所做事情的一致性，命名与通常使用的名字的一致性，比如setStringValue，setTabBarColor等\n\n### 2、类命名\n\n* 大驼峰命名法、功能+类型 例如LoginViewController\n\n### 3、类别扩展命名(Category和Extension)\n\n* 类别(Category)命名：类名+功能 例如 UIView+Frame\n\n* 扩展(Extension)命名：类名+Extension 例如UIView+Extension\n  \n### 4、变量命名\n\n* 小驼峰命名法\n\n* 使用修饰+类型的方式，比如titleLabel\n* 命名尽量以清晰为主，变量名尽量可以推测其用途\n\n### 5、宏及常量命名\n\n* 常量、宏(swift中没有宏，使用常量定义)，前面带小写字母k作为常量标识，其余部分采取大写，单词以英文下划线”_“分割。\n\n* 通用的常量使用宏#define来定义，单独类中使用的常量使用static定义\n* 宏尽量少用，编译耗时，影响程序的启动，尽量用常量来代替，之前iOS工程默认有预编译文件的，后来iOS把这个默认文件去掉了，倡导用常量代替\n\n### 6、图片文件命名\n\n* 采用模块_功能形式\n\n* 尽量采用单词全拼或者公认的无歧义缩写(如nav，bg，btn等)\n\n### 7、通知协议代理命名\n\n* 通知命名：[触发通知的类名] + [Did | Will] + [动作] + Notification，例如：TextFieldDidChangeNotification等\n\n* 代理命名：作用类+should will did等关键字+作用 比如：@objc optional  func sureBtnDidTouch:(UIButton*)sureBtn\n* 协议命名：前缀+作用+ing 与类名区分 比如：NSCopying\n\n### 8、Bundle Identifier命名\n\n* 采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名根据应用进行命名。\n\n## 二、代码规范\n\n### 1、删除多余空格\n\n* 所有方法与方法之间空一行\n\n* 代码块之间空一行\n\n### 2、删除多余的注释\n\n* 删除注释掉的代码\n\n* 删除无意义的代码\n\n### 3、删除多余方法\n\n* 没有使用到的方法删除掉\n\n* 如果方法没有执行任何业务逻辑，但需要放着，给予一定的注释\n\n### 4、删除未被使用的资源文件\n\n### 5、添加必要的注释\n\n* .h文件的property需要注释(swift中参与业务逻辑的对象需要注释)\n\n* 自定义的方法需要注释\n* 大的代码块需要注释\n* 宏枚举需要有一定的注释\n* 复杂的逻辑代码需要给予一定的注释\n\n### 6、整体代码风格尽量统一\n\n* 逻辑运算符与代码之间空一格\n\n* 逻辑或方法结尾的}需要占用一格\n* 代理、逻辑业务方法等模块区分使用“//MARK: - ”，且与代码之间不要空格\n* 在方法命名时-和()之间需要有空格（objective-C）\n* 定义对象时 *号属于类型的一部分 放在对象前 与类型空格 例如：NSArray*dataArray\n\n### 7、[raywenderlich/swift-style-guide：](https://github.com/raywenderlich/swift-style-guide)Swift 代码编程规范\n\n## 三、项目管理\n\n### 1、模块管理\n\n* 采取MVC设计架构  \n\n* 采取模块化开发，公用或者常使用到的一些模块单独抽离封装到公用类，减少团队操作，提高开发效率\n* 大体上市按照业务模块、三方库、项目资源、公用类划分\n\n### 2、代码管理\n\n* 采用git多分支管理，平时开发在development分支进行\n* <mark>引入第三方库时需要经过团队讨论，参照使用方便性，学习成本，性能，项目影响覆盖等因素再决定引入，不要随意引入</mark>\n* <mark>公用的模块划分出来可以提供团队参考使用\n* 每天至少上班前更新一次代码，下班提交一次代码，以免多人工作不同步\n* 个人测试代码不要提交，以免影响同伴开发\n* 修改配置文件等共享文件前，一定要更新，修改完验证之后要马上提交，避免冲突\n\n### 3、团队交流\n\n* 工作上碰到的问题鼓励邮件沟通，方便分散式管理，也可避免长时间后不记得了\n* 对于工作问题，一定要谨慎、仔细，今天能完成和要完成的问题最好不要拖拉\n* 如果觉得某些功能实现有困难，要提出来探讨折中实现方式，不要敷衍行事\n* 工作职责一定要明确、能够对应相应负责人员处理解决，包括对接产品、设计、服务器、Android等同事，积极沟通处理\n* 有一些好的想法，方便项目开发或者能够方便团队协作的方式，积极提出，这也是一种刺激主动学习的方式\n* 平时如果觉得有什么好的学习资源、技巧，鼓励积极分享，共同成长\n* <mark>多写学习体验、鼓励钻研新技术，分享，到时候在git上建个公共文件夹（同步管理），大家平时可以在上面公开写，收集进来也可以，到时候统一整理，专题列在第五条里面，尽量用Markdown，查看方便。比如有名的三方库文件源码解读\n（AFNetWorking、SDWebImage等，培养读源码的兴趣，对知识了解也较为彻底）、Git/SVN等工具的基本使用、Vim的\n基本使用等\n\n### 5、iOS 研究方向（技术类）\n\n[#逆向工程专题](\"\")\n\n[#混合开发（如：React-Native）专题](\"\")\n\n[#单元测试系统化、自动化专题](\"\")\n\n[#持续集成化专题](\"\")\n\n[#动画专题](\"\")\n\n[#音视频专题（FFMpeg）、图片处理（OpenGL、GPUimage、OpenCV）](\"\")\n\n[#设计模式专题](\"\")\n\n[#iOS框架专题](\"\")\n\n[#性能研究专题](\"\")\n\n[#算法专题](\"\")\n\n[#网络及网络协议专题](\"\")\n\n[#操作系统（Linux、Unix）专题](\"\")\n\n[#编程语言专题](\"\")\n\n[#重构专题](\"\")\n\n### 6、业余讨论（非技术类）\n\n[#运动](\"\")\n\n[#游戏娱乐](\"\")\n\n[#理财](\"\")\n\n[#项目管理](\"\")\n\n[#学习方法，专业思维的培养](\"\")\n","slug":"学习笔记/iOS/iOS之开发规范化","published":1,"date":"2021-02-24T12:31:09.186Z","updated":"2021-04-06T14:18:20.483Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3th8001fw37u4z2rgwh1","content":"<h1 id=\"规范\"><a class=\"markdownIt-Anchor\" href=\"#规范\"></a> 规范</h1>\n<h2 id=\"一-命名规范\"><a class=\"markdownIt-Anchor\" href=\"#一-命名规范\"></a> 一、命名规范</h2>\n<h3 id=\"1-基本规则\"><a class=\"markdownIt-Anchor\" href=\"#1-基本规则\"></a> 1、基本规则</h3>\n<ul>\n<li>\n<p>清晰，又清晰又简洁是最好的了，但简洁不如清晰重要。总的讲不要使用单词的简写，除了非常常用的简写以外，尽量使用单词全称。</p>\n</li>\n<li>\n<p>一致性，命名代表意思与所做事情的一致性，命名与通常使用的名字的一致性，比如setStringValue，setTabBarColor等</p>\n</li>\n</ul>\n<h3 id=\"2-类命名\"><a class=\"markdownIt-Anchor\" href=\"#2-类命名\"></a> 2、类命名</h3>\n<ul>\n<li>大驼峰命名法、功能+类型 例如LoginViewController</li>\n</ul>\n<h3 id=\"3-类别扩展命名category和extension\"><a class=\"markdownIt-Anchor\" href=\"#3-类别扩展命名category和extension\"></a> 3、类别扩展命名(Category和Extension)</h3>\n<ul>\n<li>\n<p>类别(Category)命名：类名+功能 例如 UIView+Frame</p>\n</li>\n<li>\n<p>扩展(Extension)命名：类名+Extension 例如UIView+Extension</p>\n</li>\n</ul>\n<h3 id=\"4-变量命名\"><a class=\"markdownIt-Anchor\" href=\"#4-变量命名\"></a> 4、变量命名</h3>\n<ul>\n<li>\n<p>小驼峰命名法</p>\n</li>\n<li>\n<p>使用修饰+类型的方式，比如titleLabel</p>\n</li>\n<li>\n<p>命名尽量以清晰为主，变量名尽量可以推测其用途</p>\n</li>\n</ul>\n<h3 id=\"5-宏及常量命名\"><a class=\"markdownIt-Anchor\" href=\"#5-宏及常量命名\"></a> 5、宏及常量命名</h3>\n<ul>\n<li>\n<p>常量、宏(swift中没有宏，使用常量定义)，前面带小写字母k作为常量标识，其余部分采取大写，单词以英文下划线”_“分割。</p>\n</li>\n<li>\n<p>通用的常量使用宏#define来定义，单独类中使用的常量使用static定义</p>\n</li>\n<li>\n<p>宏尽量少用，编译耗时，影响程序的启动，尽量用常量来代替，之前iOS工程默认有预编译文件的，后来iOS把这个默认文件去掉了，倡导用常量代替</p>\n</li>\n</ul>\n<h3 id=\"6-图片文件命名\"><a class=\"markdownIt-Anchor\" href=\"#6-图片文件命名\"></a> 6、图片文件命名</h3>\n<ul>\n<li>\n<p>采用模块_功能形式</p>\n</li>\n<li>\n<p>尽量采用单词全拼或者公认的无歧义缩写(如nav，bg，btn等)</p>\n</li>\n</ul>\n<h3 id=\"7-通知协议代理命名\"><a class=\"markdownIt-Anchor\" href=\"#7-通知协议代理命名\"></a> 7、通知协议代理命名</h3>\n<ul>\n<li>\n<p>通知命名：[触发通知的类名] + [Did | Will] + [动作] + Notification，例如：TextFieldDidChangeNotification等</p>\n</li>\n<li>\n<p>代理命名：作用类+should will did等关键字+作用 比如：@objc optional  func sureBtnDidTouch:(UIButton*)sureBtn</p>\n</li>\n<li>\n<p>协议命名：前缀+作用+ing 与类名区分 比如：NSCopying</p>\n</li>\n</ul>\n<h3 id=\"8-bundle-identifier命名\"><a class=\"markdownIt-Anchor\" href=\"#8-bundle-identifier命名\"></a> 8、Bundle Identifier命名</h3>\n<ul>\n<li>采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名根据应用进行命名。</li>\n</ul>\n<h2 id=\"二-代码规范\"><a class=\"markdownIt-Anchor\" href=\"#二-代码规范\"></a> 二、代码规范</h2>\n<h3 id=\"1-删除多余空格\"><a class=\"markdownIt-Anchor\" href=\"#1-删除多余空格\"></a> 1、删除多余空格</h3>\n<ul>\n<li>\n<p>所有方法与方法之间空一行</p>\n</li>\n<li>\n<p>代码块之间空一行</p>\n</li>\n</ul>\n<h3 id=\"2-删除多余的注释\"><a class=\"markdownIt-Anchor\" href=\"#2-删除多余的注释\"></a> 2、删除多余的注释</h3>\n<ul>\n<li>\n<p>删除注释掉的代码</p>\n</li>\n<li>\n<p>删除无意义的代码</p>\n</li>\n</ul>\n<h3 id=\"3-删除多余方法\"><a class=\"markdownIt-Anchor\" href=\"#3-删除多余方法\"></a> 3、删除多余方法</h3>\n<ul>\n<li>\n<p>没有使用到的方法删除掉</p>\n</li>\n<li>\n<p>如果方法没有执行任何业务逻辑，但需要放着，给予一定的注释</p>\n</li>\n</ul>\n<h3 id=\"4-删除未被使用的资源文件\"><a class=\"markdownIt-Anchor\" href=\"#4-删除未被使用的资源文件\"></a> 4、删除未被使用的资源文件</h3>\n<h3 id=\"5-添加必要的注释\"><a class=\"markdownIt-Anchor\" href=\"#5-添加必要的注释\"></a> 5、添加必要的注释</h3>\n<ul>\n<li>\n<p>.h文件的property需要注释(swift中参与业务逻辑的对象需要注释)</p>\n</li>\n<li>\n<p>自定义的方法需要注释</p>\n</li>\n<li>\n<p>大的代码块需要注释</p>\n</li>\n<li>\n<p>宏枚举需要有一定的注释</p>\n</li>\n<li>\n<p>复杂的逻辑代码需要给予一定的注释</p>\n</li>\n</ul>\n<h3 id=\"6-整体代码风格尽量统一\"><a class=\"markdownIt-Anchor\" href=\"#6-整体代码风格尽量统一\"></a> 6、整体代码风格尽量统一</h3>\n<ul>\n<li>\n<p>逻辑运算符与代码之间空一格</p>\n</li>\n<li>\n<p>逻辑或方法结尾的}需要占用一格</p>\n</li>\n<li>\n<p>代理、逻辑业务方法等模块区分使用“//MARK: - ”，且与代码之间不要空格</p>\n</li>\n<li>\n<p>在方法命名时-和()之间需要有空格（objective-C）</p>\n</li>\n<li>\n<p>定义对象时 <em>号属于类型的一部分 放在对象前 与类型空格 例如：NSArray</em>dataArray</p>\n</li>\n</ul>\n<h3 id=\"7-raywenderlichswift-style-guideswift-代码编程规范\"><a class=\"markdownIt-Anchor\" href=\"#7-raywenderlichswift-style-guideswift-代码编程规范\"></a> 7、<a href=\"https://github.com/raywenderlich/swift-style-guide\">raywenderlich/swift-style-guide：</a>Swift 代码编程规范</h3>\n<h2 id=\"三-项目管理\"><a class=\"markdownIt-Anchor\" href=\"#三-项目管理\"></a> 三、项目管理</h2>\n<h3 id=\"1-模块管理\"><a class=\"markdownIt-Anchor\" href=\"#1-模块管理\"></a> 1、模块管理</h3>\n<ul>\n<li>\n<p>采取MVC设计架构</p>\n</li>\n<li>\n<p>采取模块化开发，公用或者常使用到的一些模块单独抽离封装到公用类，减少团队操作，提高开发效率</p>\n</li>\n<li>\n<p>大体上市按照业务模块、三方库、项目资源、公用类划分</p>\n</li>\n</ul>\n<h3 id=\"2-代码管理\"><a class=\"markdownIt-Anchor\" href=\"#2-代码管理\"></a> 2、代码管理</h3>\n<ul>\n<li>采用git多分支管理，平时开发在development分支进行</li>\n<li><mark>引入第三方库时需要经过团队讨论，参照使用方便性，学习成本，性能，项目影响覆盖等因素再决定引入，不要随意引入</mark></li>\n<li><mark>公用的模块划分出来可以提供团队参考使用</li>\n<li>每天至少上班前更新一次代码，下班提交一次代码，以免多人工作不同步</li>\n<li>个人测试代码不要提交，以免影响同伴开发</li>\n<li>修改配置文件等共享文件前，一定要更新，修改完验证之后要马上提交，避免冲突</li>\n</ul>\n<h3 id=\"3-团队交流\"><a class=\"markdownIt-Anchor\" href=\"#3-团队交流\"></a> 3、团队交流</h3>\n<ul>\n<li>工作上碰到的问题鼓励邮件沟通，方便分散式管理，也可避免长时间后不记得了</li>\n<li>对于工作问题，一定要谨慎、仔细，今天能完成和要完成的问题最好不要拖拉</li>\n<li>如果觉得某些功能实现有困难，要提出来探讨折中实现方式，不要敷衍行事</li>\n<li>工作职责一定要明确、能够对应相应负责人员处理解决，包括对接产品、设计、服务器、Android等同事，积极沟通处理</li>\n<li>有一些好的想法，方便项目开发或者能够方便团队协作的方式，积极提出，这也是一种刺激主动学习的方式</li>\n<li>平时如果觉得有什么好的学习资源、技巧，鼓励积极分享，共同成长</li>\n<li><mark>多写学习体验、鼓励钻研新技术，分享，到时候在git上建个公共文件夹（同步管理），大家平时可以在上面公开写，收集进来也可以，到时候统一整理，专题列在第五条里面，尽量用Markdown，查看方便。比如有名的三方库文件源码解读<br />\n（AFNetWorking、SDWebImage等，培养读源码的兴趣，对知识了解也较为彻底）、Git/SVN等工具的基本使用、Vim的<br />\n基本使用等</li>\n</ul>\n<h3 id=\"5-ios-研究方向技术类\"><a class=\"markdownIt-Anchor\" href=\"#5-ios-研究方向技术类\"></a> 5、iOS 研究方向（技术类）</h3>\n<p><a href=\"%22%22\">#逆向工程专题</a></p>\n<p><a href=\"%22%22\">#混合开发（如：React-Native）专题</a></p>\n<p><a href=\"%22%22\">#单元测试系统化、自动化专题</a></p>\n<p><a href=\"%22%22\">#持续集成化专题</a></p>\n<p><a href=\"%22%22\">#动画专题</a></p>\n<p><a href=\"%22%22\">#音视频专题（FFMpeg）、图片处理（OpenGL、GPUimage、OpenCV）</a></p>\n<p><a href=\"%22%22\">#设计模式专题</a></p>\n<p><a href=\"%22%22\">#iOS框架专题</a></p>\n<p><a href=\"%22%22\">#性能研究专题</a></p>\n<p><a href=\"%22%22\">#算法专题</a></p>\n<p><a href=\"%22%22\">#网络及网络协议专题</a></p>\n<p><a href=\"%22%22\">#操作系统（Linux、Unix）专题</a></p>\n<p><a href=\"%22%22\">#编程语言专题</a></p>\n<p><a href=\"%22%22\">#重构专题</a></p>\n<h3 id=\"6-业余讨论非技术类\"><a class=\"markdownIt-Anchor\" href=\"#6-业余讨论非技术类\"></a> 6、业余讨论（非技术类）</h3>\n<p><a href=\"%22%22\">#运动</a></p>\n<p><a href=\"%22%22\">#游戏娱乐</a></p>\n<p><a href=\"%22%22\">#理财</a></p>\n<p><a href=\"%22%22\">#项目管理</a></p>\n<p><a href=\"%22%22\">#学习方法，专业思维的培养</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"规范\"><a class=\"markdownIt-Anchor\" href=\"#规范\"></a> 规范</h1>\n<h2 id=\"一-命名规范\"><a class=\"markdownIt-Anchor\" href=\"#一-命名规范\"></a> 一、命名规范</h2>\n<h3 id=\"1-基本规则\"><a class=\"markdownIt-Anchor\" href=\"#1-基本规则\"></a> 1、基本规则</h3>\n<ul>\n<li>\n<p>清晰，又清晰又简洁是最好的了，但简洁不如清晰重要。总的讲不要使用单词的简写，除了非常常用的简写以外，尽量使用单词全称。</p>\n</li>\n<li>\n<p>一致性，命名代表意思与所做事情的一致性，命名与通常使用的名字的一致性，比如setStringValue，setTabBarColor等</p>\n</li>\n</ul>\n<h3 id=\"2-类命名\"><a class=\"markdownIt-Anchor\" href=\"#2-类命名\"></a> 2、类命名</h3>\n<ul>\n<li>大驼峰命名法、功能+类型 例如LoginViewController</li>\n</ul>\n<h3 id=\"3-类别扩展命名category和extension\"><a class=\"markdownIt-Anchor\" href=\"#3-类别扩展命名category和extension\"></a> 3、类别扩展命名(Category和Extension)</h3>\n<ul>\n<li>\n<p>类别(Category)命名：类名+功能 例如 UIView+Frame</p>\n</li>\n<li>\n<p>扩展(Extension)命名：类名+Extension 例如UIView+Extension</p>\n</li>\n</ul>\n<h3 id=\"4-变量命名\"><a class=\"markdownIt-Anchor\" href=\"#4-变量命名\"></a> 4、变量命名</h3>\n<ul>\n<li>\n<p>小驼峰命名法</p>\n</li>\n<li>\n<p>使用修饰+类型的方式，比如titleLabel</p>\n</li>\n<li>\n<p>命名尽量以清晰为主，变量名尽量可以推测其用途</p>\n</li>\n</ul>\n<h3 id=\"5-宏及常量命名\"><a class=\"markdownIt-Anchor\" href=\"#5-宏及常量命名\"></a> 5、宏及常量命名</h3>\n<ul>\n<li>\n<p>常量、宏(swift中没有宏，使用常量定义)，前面带小写字母k作为常量标识，其余部分采取大写，单词以英文下划线”_“分割。</p>\n</li>\n<li>\n<p>通用的常量使用宏#define来定义，单独类中使用的常量使用static定义</p>\n</li>\n<li>\n<p>宏尽量少用，编译耗时，影响程序的启动，尽量用常量来代替，之前iOS工程默认有预编译文件的，后来iOS把这个默认文件去掉了，倡导用常量代替</p>\n</li>\n</ul>\n<h3 id=\"6-图片文件命名\"><a class=\"markdownIt-Anchor\" href=\"#6-图片文件命名\"></a> 6、图片文件命名</h3>\n<ul>\n<li>\n<p>采用模块_功能形式</p>\n</li>\n<li>\n<p>尽量采用单词全拼或者公认的无歧义缩写(如nav，bg，btn等)</p>\n</li>\n</ul>\n<h3 id=\"7-通知协议代理命名\"><a class=\"markdownIt-Anchor\" href=\"#7-通知协议代理命名\"></a> 7、通知协议代理命名</h3>\n<ul>\n<li>\n<p>通知命名：[触发通知的类名] + [Did | Will] + [动作] + Notification，例如：TextFieldDidChangeNotification等</p>\n</li>\n<li>\n<p>代理命名：作用类+should will did等关键字+作用 比如：@objc optional  func sureBtnDidTouch:(UIButton*)sureBtn</p>\n</li>\n<li>\n<p>协议命名：前缀+作用+ing 与类名区分 比如：NSCopying</p>\n</li>\n</ul>\n<h3 id=\"8-bundle-identifier命名\"><a class=\"markdownIt-Anchor\" href=\"#8-bundle-identifier命名\"></a> 8、Bundle Identifier命名</h3>\n<ul>\n<li>采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名根据应用进行命名。</li>\n</ul>\n<h2 id=\"二-代码规范\"><a class=\"markdownIt-Anchor\" href=\"#二-代码规范\"></a> 二、代码规范</h2>\n<h3 id=\"1-删除多余空格\"><a class=\"markdownIt-Anchor\" href=\"#1-删除多余空格\"></a> 1、删除多余空格</h3>\n<ul>\n<li>\n<p>所有方法与方法之间空一行</p>\n</li>\n<li>\n<p>代码块之间空一行</p>\n</li>\n</ul>\n<h3 id=\"2-删除多余的注释\"><a class=\"markdownIt-Anchor\" href=\"#2-删除多余的注释\"></a> 2、删除多余的注释</h3>\n<ul>\n<li>\n<p>删除注释掉的代码</p>\n</li>\n<li>\n<p>删除无意义的代码</p>\n</li>\n</ul>\n<h3 id=\"3-删除多余方法\"><a class=\"markdownIt-Anchor\" href=\"#3-删除多余方法\"></a> 3、删除多余方法</h3>\n<ul>\n<li>\n<p>没有使用到的方法删除掉</p>\n</li>\n<li>\n<p>如果方法没有执行任何业务逻辑，但需要放着，给予一定的注释</p>\n</li>\n</ul>\n<h3 id=\"4-删除未被使用的资源文件\"><a class=\"markdownIt-Anchor\" href=\"#4-删除未被使用的资源文件\"></a> 4、删除未被使用的资源文件</h3>\n<h3 id=\"5-添加必要的注释\"><a class=\"markdownIt-Anchor\" href=\"#5-添加必要的注释\"></a> 5、添加必要的注释</h3>\n<ul>\n<li>\n<p>.h文件的property需要注释(swift中参与业务逻辑的对象需要注释)</p>\n</li>\n<li>\n<p>自定义的方法需要注释</p>\n</li>\n<li>\n<p>大的代码块需要注释</p>\n</li>\n<li>\n<p>宏枚举需要有一定的注释</p>\n</li>\n<li>\n<p>复杂的逻辑代码需要给予一定的注释</p>\n</li>\n</ul>\n<h3 id=\"6-整体代码风格尽量统一\"><a class=\"markdownIt-Anchor\" href=\"#6-整体代码风格尽量统一\"></a> 6、整体代码风格尽量统一</h3>\n<ul>\n<li>\n<p>逻辑运算符与代码之间空一格</p>\n</li>\n<li>\n<p>逻辑或方法结尾的}需要占用一格</p>\n</li>\n<li>\n<p>代理、逻辑业务方法等模块区分使用“//MARK: - ”，且与代码之间不要空格</p>\n</li>\n<li>\n<p>在方法命名时-和()之间需要有空格（objective-C）</p>\n</li>\n<li>\n<p>定义对象时 <em>号属于类型的一部分 放在对象前 与类型空格 例如：NSArray</em>dataArray</p>\n</li>\n</ul>\n<h3 id=\"7-raywenderlichswift-style-guideswift-代码编程规范\"><a class=\"markdownIt-Anchor\" href=\"#7-raywenderlichswift-style-guideswift-代码编程规范\"></a> 7、<a href=\"https://github.com/raywenderlich/swift-style-guide\">raywenderlich/swift-style-guide：</a>Swift 代码编程规范</h3>\n<h2 id=\"三-项目管理\"><a class=\"markdownIt-Anchor\" href=\"#三-项目管理\"></a> 三、项目管理</h2>\n<h3 id=\"1-模块管理\"><a class=\"markdownIt-Anchor\" href=\"#1-模块管理\"></a> 1、模块管理</h3>\n<ul>\n<li>\n<p>采取MVC设计架构</p>\n</li>\n<li>\n<p>采取模块化开发，公用或者常使用到的一些模块单独抽离封装到公用类，减少团队操作，提高开发效率</p>\n</li>\n<li>\n<p>大体上市按照业务模块、三方库、项目资源、公用类划分</p>\n</li>\n</ul>\n<h3 id=\"2-代码管理\"><a class=\"markdownIt-Anchor\" href=\"#2-代码管理\"></a> 2、代码管理</h3>\n<ul>\n<li>采用git多分支管理，平时开发在development分支进行</li>\n<li><mark>引入第三方库时需要经过团队讨论，参照使用方便性，学习成本，性能，项目影响覆盖等因素再决定引入，不要随意引入</mark></li>\n<li><mark>公用的模块划分出来可以提供团队参考使用</li>\n<li>每天至少上班前更新一次代码，下班提交一次代码，以免多人工作不同步</li>\n<li>个人测试代码不要提交，以免影响同伴开发</li>\n<li>修改配置文件等共享文件前，一定要更新，修改完验证之后要马上提交，避免冲突</li>\n</ul>\n<h3 id=\"3-团队交流\"><a class=\"markdownIt-Anchor\" href=\"#3-团队交流\"></a> 3、团队交流</h3>\n<ul>\n<li>工作上碰到的问题鼓励邮件沟通，方便分散式管理，也可避免长时间后不记得了</li>\n<li>对于工作问题，一定要谨慎、仔细，今天能完成和要完成的问题最好不要拖拉</li>\n<li>如果觉得某些功能实现有困难，要提出来探讨折中实现方式，不要敷衍行事</li>\n<li>工作职责一定要明确、能够对应相应负责人员处理解决，包括对接产品、设计、服务器、Android等同事，积极沟通处理</li>\n<li>有一些好的想法，方便项目开发或者能够方便团队协作的方式，积极提出，这也是一种刺激主动学习的方式</li>\n<li>平时如果觉得有什么好的学习资源、技巧，鼓励积极分享，共同成长</li>\n<li><mark>多写学习体验、鼓励钻研新技术，分享，到时候在git上建个公共文件夹（同步管理），大家平时可以在上面公开写，收集进来也可以，到时候统一整理，专题列在第五条里面，尽量用Markdown，查看方便。比如有名的三方库文件源码解读<br />\n（AFNetWorking、SDWebImage等，培养读源码的兴趣，对知识了解也较为彻底）、Git/SVN等工具的基本使用、Vim的<br />\n基本使用等</li>\n</ul>\n<h3 id=\"5-ios-研究方向技术类\"><a class=\"markdownIt-Anchor\" href=\"#5-ios-研究方向技术类\"></a> 5、iOS 研究方向（技术类）</h3>\n<p><a href=\"%22%22\">#逆向工程专题</a></p>\n<p><a href=\"%22%22\">#混合开发（如：React-Native）专题</a></p>\n<p><a href=\"%22%22\">#单元测试系统化、自动化专题</a></p>\n<p><a href=\"%22%22\">#持续集成化专题</a></p>\n<p><a href=\"%22%22\">#动画专题</a></p>\n<p><a href=\"%22%22\">#音视频专题（FFMpeg）、图片处理（OpenGL、GPUimage、OpenCV）</a></p>\n<p><a href=\"%22%22\">#设计模式专题</a></p>\n<p><a href=\"%22%22\">#iOS框架专题</a></p>\n<p><a href=\"%22%22\">#性能研究专题</a></p>\n<p><a href=\"%22%22\">#算法专题</a></p>\n<p><a href=\"%22%22\">#网络及网络协议专题</a></p>\n<p><a href=\"%22%22\">#操作系统（Linux、Unix）专题</a></p>\n<p><a href=\"%22%22\">#编程语言专题</a></p>\n<p><a href=\"%22%22\">#重构专题</a></p>\n<h3 id=\"6-业余讨论非技术类\"><a class=\"markdownIt-Anchor\" href=\"#6-业余讨论非技术类\"></a> 6、业余讨论（非技术类）</h3>\n<p><a href=\"%22%22\">#运动</a></p>\n<p><a href=\"%22%22\">#游戏娱乐</a></p>\n<p><a href=\"%22%22\">#理财</a></p>\n<p><a href=\"%22%22\">#项目管理</a></p>\n<p><a href=\"%22%22\">#学习方法，专业思维的培养</a></p>\n"},{"_content":"# 开源库\n\n## 1. 自定义库并发布\n\n## 2. 自制pod库\n\n## 3. cocoaPod 管理\n\n动态库\n静态库\n\n加载方式\n原理\n","source":"_posts/学习笔记/iOS/iOS之开源库.md","raw":"# 开源库\n\n## 1. 自定义库并发布\n\n## 2. 自制pod库\n\n## 3. cocoaPod 管理\n\n动态库\n静态库\n\n加载方式\n原理\n","slug":"学习笔记/iOS/iOS之开源库","published":1,"date":"2021-02-24T12:31:09.187Z","updated":"2021-04-06T14:14:39.166Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3th8001gw37uhjr0bapm","content":"<h1 id=\"开源库\"><a class=\"markdownIt-Anchor\" href=\"#开源库\"></a> 开源库</h1>\n<h2 id=\"1-自定义库并发布\"><a class=\"markdownIt-Anchor\" href=\"#1-自定义库并发布\"></a> 1. 自定义库并发布</h2>\n<h2 id=\"2-自制pod库\"><a class=\"markdownIt-Anchor\" href=\"#2-自制pod库\"></a> 2. 自制pod库</h2>\n<h2 id=\"3-cocoapod-管理\"><a class=\"markdownIt-Anchor\" href=\"#3-cocoapod-管理\"></a> 3. cocoaPod 管理</h2>\n<p>动态库<br />\n静态库</p>\n<p>加载方式<br />\n原理</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"开源库\"><a class=\"markdownIt-Anchor\" href=\"#开源库\"></a> 开源库</h1>\n<h2 id=\"1-自定义库并发布\"><a class=\"markdownIt-Anchor\" href=\"#1-自定义库并发布\"></a> 1. 自定义库并发布</h2>\n<h2 id=\"2-自制pod库\"><a class=\"markdownIt-Anchor\" href=\"#2-自制pod库\"></a> 2. 自制pod库</h2>\n<h2 id=\"3-cocoapod-管理\"><a class=\"markdownIt-Anchor\" href=\"#3-cocoapod-管理\"></a> 3. cocoaPod 管理</h2>\n<p>动态库<br />\n静态库</p>\n<p>加载方式<br />\n原理</p>\n"},{"_content":"# 事件传递与响应者链\n\n## [史上最详细的iOS之事件的传递和响应机制-原理篇](https://www.jianshu.com/p/2e074db792ba)\n","source":"_posts/学习笔记/iOS/iOS之事件传递.md","raw":"# 事件传递与响应者链\n\n## [史上最详细的iOS之事件的传递和响应机制-原理篇](https://www.jianshu.com/p/2e074db792ba)\n","slug":"学习笔记/iOS/iOS之事件传递","published":1,"date":"2021-02-24T12:31:09.182Z","updated":"2021-02-24T12:31:09.182Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3th9001hw37ugpab0ktg","content":"<h1 id=\"事件传递与响应者链\"><a class=\"markdownIt-Anchor\" href=\"#事件传递与响应者链\"></a> 事件传递与响应者链</h1>\n<h2 id=\"史上最详细的ios之事件的传递和响应机制-原理篇\"><a class=\"markdownIt-Anchor\" href=\"#史上最详细的ios之事件的传递和响应机制-原理篇\"></a> <a href=\"https://www.jianshu.com/p/2e074db792ba\">史上最详细的iOS之事件的传递和响应机制-原理篇</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"事件传递与响应者链\"><a class=\"markdownIt-Anchor\" href=\"#事件传递与响应者链\"></a> 事件传递与响应者链</h1>\n<h2 id=\"史上最详细的ios之事件的传递和响应机制-原理篇\"><a class=\"markdownIt-Anchor\" href=\"#史上最详细的ios之事件的传递和响应机制-原理篇\"></a> <a href=\"https://www.jianshu.com/p/2e074db792ba\">史上最详细的iOS之事件的传递和响应机制-原理篇</a></h2>\n"},{"_content":"MVC\n\nMV-VM\n\nRxFeedback\n\nReactorKit\n\n[软件架构入门](http://www.ruanyifeng.com/blog/2016/09/software-architecture.html)","source":"_posts/学习笔记/iOS/iOS之架构·框架.md","raw":"MVC\n\nMV-VM\n\nRxFeedback\n\nReactorKit\n\n[软件架构入门](http://www.ruanyifeng.com/blog/2016/09/software-architecture.html)","slug":"学习笔记/iOS/iOS之架构·框架","published":1,"date":"2021-02-24T12:31:09.206Z","updated":"2021-02-24T12:31:09.210Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tha001iw37u8aiecb5m","content":"<p>MVC</p>\n<p>MV-VM</p>\n<p>RxFeedback</p>\n<p>ReactorKit</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/09/software-architecture.html\">软件架构入门</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>MVC</p>\n<p>MV-VM</p>\n<p>RxFeedback</p>\n<p>ReactorKit</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/09/software-architecture.html\">软件架构入门</a></p>\n"},{"_content":"# 消息转发\n\n[TOC]\n\n## 1. Objective-C\n\n### 1.1 Objective-C 消息转发流程图`\n\n![OC消息转发流程图](/source/_posts/学习笔记/iOS/resources/MessageForward/oc_message_froware.png)\n\n### 1.2 参考资料\n\n1、[Objective-C Runtime Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1)\n\n2、[OC消息转发之动态解析](https://juejin.cn/post/6844903645226500103)\n\n3、[Objective-C 运行时和 Swift 动态性](https://juejin.cn/post/6844904114673958925)\n\n4、[iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)](https://juejin.cn/post/6844903600968171533)\n\n## 2. Swift\n\n### 2.1 Swift 消息转发规则\n\n![Swift 消息转发规则](resources/MessageForward/swift_function_dispatch.png)\n\n### 2.2 参考资料\n\n1、[Swift 消息派发机制](https://blog.bombox.org/2020-05-23/swift-method-dispatch/)\n\n2、[Swift函数派发机制](https://juejin.cn/post/6847009771845845006)\n\n3、[Swift 函数派发机制（译）](https://rimson.top/2019/05/07/swift-method-dispatch/)\n","source":"_posts/学习笔记/iOS/iOS之消息转发.md","raw":"# 消息转发\n\n[TOC]\n\n## 1. Objective-C\n\n### 1.1 Objective-C 消息转发流程图`\n\n![OC消息转发流程图](/source/_posts/学习笔记/iOS/resources/MessageForward/oc_message_froware.png)\n\n### 1.2 参考资料\n\n1、[Objective-C Runtime Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1)\n\n2、[OC消息转发之动态解析](https://juejin.cn/post/6844903645226500103)\n\n3、[Objective-C 运行时和 Swift 动态性](https://juejin.cn/post/6844904114673958925)\n\n4、[iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)](https://juejin.cn/post/6844903600968171533)\n\n## 2. Swift\n\n### 2.1 Swift 消息转发规则\n\n![Swift 消息转发规则](resources/MessageForward/swift_function_dispatch.png)\n\n### 2.2 参考资料\n\n1、[Swift 消息派发机制](https://blog.bombox.org/2020-05-23/swift-method-dispatch/)\n\n2、[Swift函数派发机制](https://juejin.cn/post/6847009771845845006)\n\n3、[Swift 函数派发机制（译）](https://rimson.top/2019/05/07/swift-method-dispatch/)\n","slug":"学习笔记/iOS/iOS之消息转发","published":1,"date":"2021-03-23T12:54:35.383Z","updated":"2021-04-08T15:41:30.722Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thb001jw37ue6b6ct1c","content":"<h1 id=\"消息转发\"><a class=\"markdownIt-Anchor\" href=\"#消息转发\"></a> 消息转发</h1>\n<p>[TOC]</p>\n<h2 id=\"1-objective-c\"><a class=\"markdownIt-Anchor\" href=\"#1-objective-c\"></a> 1. Objective-C</h2>\n<h3 id=\"11-objective-c-消息转发流程图\"><a class=\"markdownIt-Anchor\" href=\"#11-objective-c-消息转发流程图\"></a> 1.1 Objective-C 消息转发流程图`</h3>\n<p><img src=\"/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/iOS/resources/MessageForward/oc_message_froware.png\" alt=\"OC消息转发流程图\" /></p>\n<h3 id=\"12-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#12-参考资料\"></a> 1.2 参考资料</h3>\n<p>1、<a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1\">Objective-C Runtime Programming Guide</a></p>\n<p>2、<a href=\"https://juejin.cn/post/6844903645226500103\">OC消息转发之动态解析</a></p>\n<p>3、<a href=\"https://juejin.cn/post/6844904114673958925\">Objective-C 运行时和 Swift 动态性</a></p>\n<p>4、<a href=\"https://juejin.cn/post/6844903600968171533\">iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)</a></p>\n<h2 id=\"2-swift\"><a class=\"markdownIt-Anchor\" href=\"#2-swift\"></a> 2. Swift</h2>\n<h3 id=\"21-swift-消息转发规则\"><a class=\"markdownIt-Anchor\" href=\"#21-swift-消息转发规则\"></a> 2.1 Swift 消息转发规则</h3>\n<p><img src=\"resources/MessageForward/swift_function_dispatch.png\" alt=\"Swift 消息转发规则\" /></p>\n<h3 id=\"22-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#22-参考资料\"></a> 2.2 参考资料</h3>\n<p>1、<a href=\"https://blog.bombox.org/2020-05-23/swift-method-dispatch/\">Swift 消息派发机制</a></p>\n<p>2、<a href=\"https://juejin.cn/post/6847009771845845006\">Swift函数派发机制</a></p>\n<p>3、<a href=\"https://rimson.top/2019/05/07/swift-method-dispatch/\">Swift 函数派发机制（译）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"消息转发\"><a class=\"markdownIt-Anchor\" href=\"#消息转发\"></a> 消息转发</h1>\n<p>[TOC]</p>\n<h2 id=\"1-objective-c\"><a class=\"markdownIt-Anchor\" href=\"#1-objective-c\"></a> 1. Objective-C</h2>\n<h3 id=\"11-objective-c-消息转发流程图\"><a class=\"markdownIt-Anchor\" href=\"#11-objective-c-消息转发流程图\"></a> 1.1 Objective-C 消息转发流程图`</h3>\n<p><img src=\"/source/_posts/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/iOS/resources/MessageForward/oc_message_froware.png\" alt=\"OC消息转发流程图\" /></p>\n<h3 id=\"12-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#12-参考资料\"></a> 1.2 参考资料</h3>\n<p>1、<a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1\">Objective-C Runtime Programming Guide</a></p>\n<p>2、<a href=\"https://juejin.cn/post/6844903645226500103\">OC消息转发之动态解析</a></p>\n<p>3、<a href=\"https://juejin.cn/post/6844904114673958925\">Objective-C 运行时和 Swift 动态性</a></p>\n<p>4、<a href=\"https://juejin.cn/post/6844903600968171533\">iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)</a></p>\n<h2 id=\"2-swift\"><a class=\"markdownIt-Anchor\" href=\"#2-swift\"></a> 2. Swift</h2>\n<h3 id=\"21-swift-消息转发规则\"><a class=\"markdownIt-Anchor\" href=\"#21-swift-消息转发规则\"></a> 2.1 Swift 消息转发规则</h3>\n<p><img src=\"resources/MessageForward/swift_function_dispatch.png\" alt=\"Swift 消息转发规则\" /></p>\n<h3 id=\"22-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#22-参考资料\"></a> 2.2 参考资料</h3>\n<p>1、<a href=\"https://blog.bombox.org/2020-05-23/swift-method-dispatch/\">Swift 消息派发机制</a></p>\n<p>2、<a href=\"https://juejin.cn/post/6847009771845845006\">Swift函数派发机制</a></p>\n<p>3、<a href=\"https://rimson.top/2019/05/07/swift-method-dispatch/\">Swift 函数派发机制（译）</a></p>\n"},{"_content":"# iOS之组件化\n\n## 1. [CocoaPod](./iOS之开发工具/cocoapod.md)\n","source":"_posts/学习笔记/iOS/iOS之组件化.md","raw":"# iOS之组件化\n\n## 1. [CocoaPod](./iOS之开发工具/cocoapod.md)\n","slug":"学习笔记/iOS/iOS之组件化","published":1,"date":"2021-04-08T00:31:46.339Z","updated":"2021-04-08T00:31:46.339Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thb001kw37u0vyl1bmg","content":"<h1 id=\"ios之组件化\"><a class=\"markdownIt-Anchor\" href=\"#ios之组件化\"></a> iOS之组件化</h1>\n<h2 id=\"1-cocoapod\"><a class=\"markdownIt-Anchor\" href=\"#1-cocoapod\"></a> 1. <a href=\"./iOS%E4%B9%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/cocoapod.md\">CocoaPod</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios之组件化\"><a class=\"markdownIt-Anchor\" href=\"#ios之组件化\"></a> iOS之组件化</h1>\n<h2 id=\"1-cocoapod\"><a class=\"markdownIt-Anchor\" href=\"#1-cocoapod\"></a> 1. <a href=\"./iOS%E4%B9%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/cocoapod.md\">CocoaPod</a></h2>\n"},{"_content":"# DNS\n\n## DNS 搭建\n\n### 1. [dnscrypt-proxy+dnsmasq搭建无污染DNS服务器](https://blog.hotwill.cn/dnscrypt-proxy+dnsmasq搭建无污染DNS服务器.html#comment-4687528442)\n\n### 2. [DNS服务器搭建与配置（详细|干货！）](https://www.cnblogs.com/heiye123/articles/7687922.html)\n\n### 3. [搭建DNS服务器实现域名解析](https://www.cnblogs.com/xiaogan/p/5954678.html)\n\n### 4. [DNS(bind)服务器的安装与配置](https://blog.csdn.net/bbwangj/article/details/82079405)\n","source":"_drafts/计算机/网络/DNS/DNS.md","raw":"# DNS\n\n## DNS 搭建\n\n### 1. [dnscrypt-proxy+dnsmasq搭建无污染DNS服务器](https://blog.hotwill.cn/dnscrypt-proxy+dnsmasq搭建无污染DNS服务器.html#comment-4687528442)\n\n### 2. [DNS服务器搭建与配置（详细|干货！）](https://www.cnblogs.com/heiye123/articles/7687922.html)\n\n### 3. [搭建DNS服务器实现域名解析](https://www.cnblogs.com/xiaogan/p/5954678.html)\n\n### 4. [DNS(bind)服务器的安装与配置](https://blog.csdn.net/bbwangj/article/details/82079405)\n","slug":"计算机/网络/DNS/DNS","published":0,"date":"2021-03-13T03:11:43.977Z","updated":"2021-03-13T03:16:37.726Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thc001lw37u6cfhbiyg","content":"<h1 id=\"dns\"><a class=\"markdownIt-Anchor\" href=\"#dns\"></a> DNS</h1>\n<h2 id=\"dns-搭建\"><a class=\"markdownIt-Anchor\" href=\"#dns-搭建\"></a> DNS 搭建</h2>\n<h3 id=\"1-dnscrypt-proxydnsmasq搭建无污染dns服务器\"><a class=\"markdownIt-Anchor\" href=\"#1-dnscrypt-proxydnsmasq搭建无污染dns服务器\"></a> 1. <a href=\"https://blog.hotwill.cn/dnscrypt-proxy+dnsmasq%E6%90%AD%E5%BB%BA%E6%97%A0%E6%B1%A1%E6%9F%93DNS%E6%9C%8D%E5%8A%A1%E5%99%A8.html#comment-4687528442\">dnscrypt-proxy+dnsmasq搭建无污染DNS服务器</a></h3>\n<h3 id=\"2-dns服务器搭建与配置详细干货\"><a class=\"markdownIt-Anchor\" href=\"#2-dns服务器搭建与配置详细干货\"></a> 2. <a href=\"https://www.cnblogs.com/heiye123/articles/7687922.html\">DNS服务器搭建与配置（详细|干货！）</a></h3>\n<h3 id=\"3-搭建dns服务器实现域名解析\"><a class=\"markdownIt-Anchor\" href=\"#3-搭建dns服务器实现域名解析\"></a> 3. <a href=\"https://www.cnblogs.com/xiaogan/p/5954678.html\">搭建DNS服务器实现域名解析</a></h3>\n<h3 id=\"4-dnsbind服务器的安装与配置\"><a class=\"markdownIt-Anchor\" href=\"#4-dnsbind服务器的安装与配置\"></a> 4. <a href=\"https://blog.csdn.net/bbwangj/article/details/82079405\">DNS(bind)服务器的安装与配置</a></h3>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"dns\"><a class=\"markdownIt-Anchor\" href=\"#dns\"></a> DNS</h1>\n<h2 id=\"dns-搭建\"><a class=\"markdownIt-Anchor\" href=\"#dns-搭建\"></a> DNS 搭建</h2>\n<h3 id=\"1-dnscrypt-proxydnsmasq搭建无污染dns服务器\"><a class=\"markdownIt-Anchor\" href=\"#1-dnscrypt-proxydnsmasq搭建无污染dns服务器\"></a> 1. <a href=\"https://blog.hotwill.cn/dnscrypt-proxy+dnsmasq%E6%90%AD%E5%BB%BA%E6%97%A0%E6%B1%A1%E6%9F%93DNS%E6%9C%8D%E5%8A%A1%E5%99%A8.html#comment-4687528442\">dnscrypt-proxy+dnsmasq搭建无污染DNS服务器</a></h3>\n<h3 id=\"2-dns服务器搭建与配置详细干货\"><a class=\"markdownIt-Anchor\" href=\"#2-dns服务器搭建与配置详细干货\"></a> 2. <a href=\"https://www.cnblogs.com/heiye123/articles/7687922.html\">DNS服务器搭建与配置（详细|干货！）</a></h3>\n<h3 id=\"3-搭建dns服务器实现域名解析\"><a class=\"markdownIt-Anchor\" href=\"#3-搭建dns服务器实现域名解析\"></a> 3. <a href=\"https://www.cnblogs.com/xiaogan/p/5954678.html\">搭建DNS服务器实现域名解析</a></h3>\n<h3 id=\"4-dnsbind服务器的安装与配置\"><a class=\"markdownIt-Anchor\" href=\"#4-dnsbind服务器的安装与配置\"></a> 4. <a href=\"https://blog.csdn.net/bbwangj/article/details/82079405\">DNS(bind)服务器的安装与配置</a></h3>\n"},{"_content":"# CSS 上手\n\n## 1 display\n\n## 2 布局方式\n\n### 2.1 正常布局流\n\n概念：块元素、行内（内联）元素、外边距叠加\n\n默认的，一个块级元素的内容宽度是其父元素的100%，其高度与其内容高度一致。行内元素的height width与内容一致。你无法设置行内元素的height width --- 它们就那样置于块级元素的内容里。 如果你想控制行内元素的尺寸，你需要为元素设置display: block; （或者，display: inline-block; inline-block 混合了inline 和 block的特性。)\n\n默认的，块级元素按照基于其父元素的书写顺序(默认值: horizontal-tb)的块流动方向(block flow direction)放置 --- 每个块级元素会在上一个元素下面另起一行，它们会被设置好的margin 分隔。\n\nFloat\nFlexBox\nGrid\nPosition\n多列布局\n表格布局\n\n## ","source":"_posts/学习笔记/Web/CSS/CSS 上手.md","raw":"# CSS 上手\n\n## 1 display\n\n## 2 布局方式\n\n### 2.1 正常布局流\n\n概念：块元素、行内（内联）元素、外边距叠加\n\n默认的，一个块级元素的内容宽度是其父元素的100%，其高度与其内容高度一致。行内元素的height width与内容一致。你无法设置行内元素的height width --- 它们就那样置于块级元素的内容里。 如果你想控制行内元素的尺寸，你需要为元素设置display: block; （或者，display: inline-block; inline-block 混合了inline 和 block的特性。)\n\n默认的，块级元素按照基于其父元素的书写顺序(默认值: horizontal-tb)的块流动方向(block flow direction)放置 --- 每个块级元素会在上一个元素下面另起一行，它们会被设置好的margin 分隔。\n\nFloat\nFlexBox\nGrid\nPosition\n多列布局\n表格布局\n\n## ","slug":"学习笔记/Web/CSS/CSS 上手","published":1,"date":"2021-04-06T13:37:55.714Z","updated":"2021-04-06T13:37:55.715Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thd001mw37ueyyshukf","content":"<h1 id=\"css-上手\"><a class=\"markdownIt-Anchor\" href=\"#css-上手\"></a> CSS 上手</h1>\n<h2 id=\"1-display\"><a class=\"markdownIt-Anchor\" href=\"#1-display\"></a> 1 display</h2>\n<h2 id=\"2-布局方式\"><a class=\"markdownIt-Anchor\" href=\"#2-布局方式\"></a> 2 布局方式</h2>\n<h3 id=\"21-正常布局流\"><a class=\"markdownIt-Anchor\" href=\"#21-正常布局流\"></a> 2.1 正常布局流</h3>\n<p>概念：块元素、行内（内联）元素、外边距叠加</p>\n<p>默认的，一个块级元素的内容宽度是其父元素的100%，其高度与其内容高度一致。行内元素的height width与内容一致。你无法设置行内元素的height width — 它们就那样置于块级元素的内容里。 如果你想控制行内元素的尺寸，你需要为元素设置display: block; （或者，display: inline-block; inline-block 混合了inline 和 block的特性。)</p>\n<p>默认的，块级元素按照基于其父元素的书写顺序(默认值: horizontal-tb)的块流动方向(block flow direction)放置 — 每个块级元素会在上一个元素下面另起一行，它们会被设置好的margin 分隔。</p>\n<p>Float<br />\nFlexBox<br />\nGrid<br />\nPosition<br />\n多列布局<br />\n表格布局</p>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> </h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"css-上手\"><a class=\"markdownIt-Anchor\" href=\"#css-上手\"></a> CSS 上手</h1>\n<h2 id=\"1-display\"><a class=\"markdownIt-Anchor\" href=\"#1-display\"></a> 1 display</h2>\n<h2 id=\"2-布局方式\"><a class=\"markdownIt-Anchor\" href=\"#2-布局方式\"></a> 2 布局方式</h2>\n<h3 id=\"21-正常布局流\"><a class=\"markdownIt-Anchor\" href=\"#21-正常布局流\"></a> 2.1 正常布局流</h3>\n<p>概念：块元素、行内（内联）元素、外边距叠加</p>\n<p>默认的，一个块级元素的内容宽度是其父元素的100%，其高度与其内容高度一致。行内元素的height width与内容一致。你无法设置行内元素的height width — 它们就那样置于块级元素的内容里。 如果你想控制行内元素的尺寸，你需要为元素设置display: block; （或者，display: inline-block; inline-block 混合了inline 和 block的特性。)</p>\n<p>默认的，块级元素按照基于其父元素的书写顺序(默认值: horizontal-tb)的块流动方向(block flow direction)放置 — 每个块级元素会在上一个元素下面另起一行，它们会被设置好的margin 分隔。</p>\n<p>Float<br />\nFlexBox<br />\nGrid<br />\nPosition<br />\n多列布局<br />\n表格布局</p>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> </h2>\n"},{"_content":"# iOS 学习笔记\n\n[开发规范](./iOS之开发规范.md)\n\n[多媒体](./iOS之多媒体/iOS之多媒体.md)\n\n[开发工具](./iOS之开发工具/iOS之开发工具.md)\n\n[操作系统](./iOS之操作系统/操作系统.md)\n\n[数据及安全](./iOS之网络及安全/iOS之网络.md)\n\n[游戏](./iOS之游戏/iOS之游戏.md)\n\n[界面显示](iOS之界面显示/iOS之界面显示.md)\n\n[编程语言](./iOS之编程语言/Objective-C/iOS编程语言之Objective-C.md)\n\n[项目管理](./iOS之项目管理/项目管理.md)\n\n[Block](./iOS之Block.md)\n\n[GCD](./iOS之并发编程/iOS之GCD.md)\n\n[iOS-SDK](./iOS之iOS-SDK.md)\n\n[Xcode](./iOS之Xcode.md)\n\n[代码管理](./iOS之代码管理.md)\n\n[内存管理](./iOS之内存管理.md)\n\n[单元测试](./iOS之单元测试.md)\n\n[并发编程](./iOS之并发编程/并发编程.md)\n\n[开源库](./iOS之开源库.md)\n\n[异常处理](./iOS之性能优化/异常处理/iOS之异常处理.md)\n\n[性能优化](./iOS之性能优化/iOS之性能优化.md)\n\n[架构·框架](./iOS之架构·框架.md)\n\n[生态体系及结构](./iOS之生态体系及结构.md)\n\n[组件化](./iOS之组件化.md)\n\n[设计模式](./iOS之设计模式.md)\n","source":"_posts/学习笔记/iOS/index.md","raw":"# iOS 学习笔记\n\n[开发规范](./iOS之开发规范.md)\n\n[多媒体](./iOS之多媒体/iOS之多媒体.md)\n\n[开发工具](./iOS之开发工具/iOS之开发工具.md)\n\n[操作系统](./iOS之操作系统/操作系统.md)\n\n[数据及安全](./iOS之网络及安全/iOS之网络.md)\n\n[游戏](./iOS之游戏/iOS之游戏.md)\n\n[界面显示](iOS之界面显示/iOS之界面显示.md)\n\n[编程语言](./iOS之编程语言/Objective-C/iOS编程语言之Objective-C.md)\n\n[项目管理](./iOS之项目管理/项目管理.md)\n\n[Block](./iOS之Block.md)\n\n[GCD](./iOS之并发编程/iOS之GCD.md)\n\n[iOS-SDK](./iOS之iOS-SDK.md)\n\n[Xcode](./iOS之Xcode.md)\n\n[代码管理](./iOS之代码管理.md)\n\n[内存管理](./iOS之内存管理.md)\n\n[单元测试](./iOS之单元测试.md)\n\n[并发编程](./iOS之并发编程/并发编程.md)\n\n[开源库](./iOS之开源库.md)\n\n[异常处理](./iOS之性能优化/异常处理/iOS之异常处理.md)\n\n[性能优化](./iOS之性能优化/iOS之性能优化.md)\n\n[架构·框架](./iOS之架构·框架.md)\n\n[生态体系及结构](./iOS之生态体系及结构.md)\n\n[组件化](./iOS之组件化.md)\n\n[设计模式](./iOS之设计模式.md)\n","slug":"学习笔记/iOS/index","published":1,"date":"2021-04-09T13:04:02.212Z","updated":"2021-04-09T13:04:02.212Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thd001nw37udist61pv","content":"<h1 id=\"ios-学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#ios-学习笔记\"></a> iOS 学习笔记</h1>\n<p><a href=\"./iOS%E4%B9%8B%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md\">开发规范</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%A4%9A%E5%AA%92%E4%BD%93/iOS%E4%B9%8B%E5%A4%9A%E5%AA%92%E4%BD%93.md\">多媒体</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/iOS%E4%B9%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7.md\">开发工具</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md\">操作系统</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%8F%8A%E5%AE%89%E5%85%A8/iOS%E4%B9%8B%E7%BD%91%E7%BB%9C.md\">数据及安全</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E6%B8%B8%E6%88%8F/iOS%E4%B9%8B%E6%B8%B8%E6%88%8F.md\">游戏</a></p>\n<p><a href=\"iOS%E4%B9%8B%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA/iOS%E4%B9%8B%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA.md\">界面显示</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Objective-C/iOS%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B9%8BObjective-C.md\">编程语言</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86.md\">项目管理</a></p>\n<p><a href=\"./iOS%E4%B9%8BBlock.md\">Block</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/iOS%E4%B9%8BGCD.md\">GCD</a></p>\n<p><a href=\"./iOS%E4%B9%8BiOS-SDK.md\">iOS-SDK</a></p>\n<p><a href=\"./iOS%E4%B9%8BXcode.md\">Xcode</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86.md\">代码管理</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.md\">内存管理</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.md\">单元测试</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.md\">并发编程</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%BC%80%E6%BA%90%E5%BA%93.md\">开源库</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/iOS%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md\">异常处理</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/iOS%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md\">性能优化</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E6%9E%B6%E6%9E%84%C2%B7%E6%A1%86%E6%9E%B6.md\">架构·框架</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E7%94%9F%E6%80%81%E4%BD%93%E7%B3%BB%E5%8F%8A%E7%BB%93%E6%9E%84.md\">生态体系及结构</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96.md\">组件化</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md\">设计模式</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios-学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#ios-学习笔记\"></a> iOS 学习笔记</h1>\n<p><a href=\"./iOS%E4%B9%8B%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md\">开发规范</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%A4%9A%E5%AA%92%E4%BD%93/iOS%E4%B9%8B%E5%A4%9A%E5%AA%92%E4%BD%93.md\">多媒体</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/iOS%E4%B9%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7.md\">开发工具</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.md\">操作系统</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%8F%8A%E5%AE%89%E5%85%A8/iOS%E4%B9%8B%E7%BD%91%E7%BB%9C.md\">数据及安全</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E6%B8%B8%E6%88%8F/iOS%E4%B9%8B%E6%B8%B8%E6%88%8F.md\">游戏</a></p>\n<p><a href=\"iOS%E4%B9%8B%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA/iOS%E4%B9%8B%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA.md\">界面显示</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Objective-C/iOS%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B9%8BObjective-C.md\">编程语言</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86.md\">项目管理</a></p>\n<p><a href=\"./iOS%E4%B9%8BBlock.md\">Block</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/iOS%E4%B9%8BGCD.md\">GCD</a></p>\n<p><a href=\"./iOS%E4%B9%8BiOS-SDK.md\">iOS-SDK</a></p>\n<p><a href=\"./iOS%E4%B9%8BXcode.md\">Xcode</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86.md\">代码管理</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.md\">内存管理</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.md\">单元测试</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.md\">并发编程</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E5%BC%80%E6%BA%90%E5%BA%93.md\">开源库</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/iOS%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md\">异常处理</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/iOS%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md\">性能优化</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E6%9E%B6%E6%9E%84%C2%B7%E6%A1%86%E6%9E%B6.md\">架构·框架</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E7%94%9F%E6%80%81%E4%BD%93%E7%B3%BB%E5%8F%8A%E7%BB%93%E6%9E%84.md\">生态体系及结构</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96.md\">组件化</a></p>\n<p><a href=\"./iOS%E4%B9%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md\">设计模式</a></p>\n"},{"_content":"# JavaScript 知识点\n\n## 1、Promise\n\n### [使用](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises)\n\n### [介绍](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n### 1.1 约定\n\n* 在本轮 事件循环 运行完成之前，回调函数是不会被调用的。\n* 即使异步操作已经完成（成功或失败），在这之后通过 then() 添加的回调函数也会被调用。\n* 通过多次调用 then() 可以添加多个回调函数，它们会按照插入顺序执行。\n\n### 1.2 链式调用的本质——函数式编程\n\nPromise 是对象，有：promise、reason\n拒绝事件（全局）：\n    rejectionhandled\n        当 Promise 被拒绝、并且在 reject 函数处理该 rejection 之后会派发此事件。\n    unhandledrejection\n        当 Promise 被拒绝，但没有提供 reject 函数来处理该 rejection 时，会派发此事件。\n\nPromise 代表链中异步的完成\n\n封装旧式 api：\n\n```javascript\nsetTimeout(() => saySomething(\"10 seconds passed\"), 10000);\n\n=====>\n\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nwait(10000).then(() => saySomething(\"10 seconds\")).catch(failureCallback);\n```\n\n### 1.3 异常捕获\n\ncatch\n\n一遇到异常抛出，浏览器就会顺着promise链寻找下一个 onRejected 失败回调函数或者由 .catch() 指定的回调函数。\n\n错误传递\n\n## 1.4 组合\n\n## 1.5 then() 会异步调用\n\n传递到 then() 中的函数被置入了一个微任务队列，而不是立即执行，这意味着它是在 JavaScript 事件队列的所有运行时结束了，事件队列被清空之后，才开始执行：\n\n```javascript\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nwait().then(() => console.log(4));\nPromise.resolve().then(() => console.log(2)).then(() => console.log(3));\nconsole.log(1); // 1, 2, 3, 4\n```\n\n### 1.6 嵌套\n\n嵌套 Promise 是一种可以限制 catch 语句的作用域的控制结构写法。明确来说，嵌套的 catch 仅捕捉在其之前同时还必须是其作用域的 failureres，而捕捉不到在其链式以外或者其嵌套域以外的 error。如果使用正确，那么可以实现高精度的错误修复。\n\n```javascript\ndoSomethingCritical()\n.then(result => doSomethingOptional()\n  .then(optionalResult => doSomethingExtraNice(optionalResult))\n  .catch(e => {console.log(e.message)})) // 即使有异常也会忽略，继续运行;(最后会输出)\n.then(() => moreCriticalStuff())\n.catch(e => console.log(\"Critical failure: \" + e.message));// 没有输出\n```\n\n2、async/await\n\n3、CSS  布局\n\n4、运行时\n   执行机制：事件循环，宏/微任务\n   宏/微任务\n   多线程\n   异步\n\n   window document DOM\n\n5、React 高阶/原理\n   jsx\n\n6、this\n\n全局调用：window 或者 global\n\n严格模式：undefined\n\n函数调用：\n\ncall，apply\n\nbind\n\n箭头函数：call/apply、 bind 调用箭头函数，第一个参数 null\n\n对象 this\n\n原型链中的 this\n\ngetter/setter\n\n构造函数：值覆盖\n\nDOM 事件处理函数\n","source":"_posts/学习笔记/Web/Javascript/JavaScript 知识点.md","raw":"# JavaScript 知识点\n\n## 1、Promise\n\n### [使用](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises)\n\n### [介绍](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n### 1.1 约定\n\n* 在本轮 事件循环 运行完成之前，回调函数是不会被调用的。\n* 即使异步操作已经完成（成功或失败），在这之后通过 then() 添加的回调函数也会被调用。\n* 通过多次调用 then() 可以添加多个回调函数，它们会按照插入顺序执行。\n\n### 1.2 链式调用的本质——函数式编程\n\nPromise 是对象，有：promise、reason\n拒绝事件（全局）：\n    rejectionhandled\n        当 Promise 被拒绝、并且在 reject 函数处理该 rejection 之后会派发此事件。\n    unhandledrejection\n        当 Promise 被拒绝，但没有提供 reject 函数来处理该 rejection 时，会派发此事件。\n\nPromise 代表链中异步的完成\n\n封装旧式 api：\n\n```javascript\nsetTimeout(() => saySomething(\"10 seconds passed\"), 10000);\n\n=====>\n\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nwait(10000).then(() => saySomething(\"10 seconds\")).catch(failureCallback);\n```\n\n### 1.3 异常捕获\n\ncatch\n\n一遇到异常抛出，浏览器就会顺着promise链寻找下一个 onRejected 失败回调函数或者由 .catch() 指定的回调函数。\n\n错误传递\n\n## 1.4 组合\n\n## 1.5 then() 会异步调用\n\n传递到 then() 中的函数被置入了一个微任务队列，而不是立即执行，这意味着它是在 JavaScript 事件队列的所有运行时结束了，事件队列被清空之后，才开始执行：\n\n```javascript\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nwait().then(() => console.log(4));\nPromise.resolve().then(() => console.log(2)).then(() => console.log(3));\nconsole.log(1); // 1, 2, 3, 4\n```\n\n### 1.6 嵌套\n\n嵌套 Promise 是一种可以限制 catch 语句的作用域的控制结构写法。明确来说，嵌套的 catch 仅捕捉在其之前同时还必须是其作用域的 failureres，而捕捉不到在其链式以外或者其嵌套域以外的 error。如果使用正确，那么可以实现高精度的错误修复。\n\n```javascript\ndoSomethingCritical()\n.then(result => doSomethingOptional()\n  .then(optionalResult => doSomethingExtraNice(optionalResult))\n  .catch(e => {console.log(e.message)})) // 即使有异常也会忽略，继续运行;(最后会输出)\n.then(() => moreCriticalStuff())\n.catch(e => console.log(\"Critical failure: \" + e.message));// 没有输出\n```\n\n2、async/await\n\n3、CSS  布局\n\n4、运行时\n   执行机制：事件循环，宏/微任务\n   宏/微任务\n   多线程\n   异步\n\n   window document DOM\n\n5、React 高阶/原理\n   jsx\n\n6、this\n\n全局调用：window 或者 global\n\n严格模式：undefined\n\n函数调用：\n\ncall，apply\n\nbind\n\n箭头函数：call/apply、 bind 调用箭头函数，第一个参数 null\n\n对象 this\n\n原型链中的 this\n\ngetter/setter\n\n构造函数：值覆盖\n\nDOM 事件处理函数\n","slug":"学习笔记/Web/Javascript/JavaScript 知识点","published":1,"date":"2021-04-06T13:37:55.715Z","updated":"2021-04-06T13:37:55.715Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3the001ow37ue2z04use","content":"<h1 id=\"javascript-知识点\"><a class=\"markdownIt-Anchor\" href=\"#javascript-知识点\"></a> JavaScript 知识点</h1>\n<h2 id=\"1-promise\"><a class=\"markdownIt-Anchor\" href=\"#1-promise\"></a> 1、Promise</h2>\n<h3 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\">使用</a></h3>\n<h3 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">介绍</a></h3>\n<h3 id=\"11-约定\"><a class=\"markdownIt-Anchor\" href=\"#11-约定\"></a> 1.1 约定</h3>\n<ul>\n<li>在本轮 事件循环 运行完成之前，回调函数是不会被调用的。</li>\n<li>即使异步操作已经完成（成功或失败），在这之后通过 then() 添加的回调函数也会被调用。</li>\n<li>通过多次调用 then() 可以添加多个回调函数，它们会按照插入顺序执行。</li>\n</ul>\n<h3 id=\"12-链式调用的本质函数式编程\"><a class=\"markdownIt-Anchor\" href=\"#12-链式调用的本质函数式编程\"></a> 1.2 链式调用的本质——函数式编程</h3>\n<p>Promise 是对象，有：promise、reason<br />\n拒绝事件（全局）：<br />\nrejectionhandled<br />\n当 Promise 被拒绝、并且在 reject 函数处理该 rejection 之后会派发此事件。<br />\nunhandledrejection<br />\n当 Promise 被拒绝，但没有提供 reject 函数来处理该 rejection 时，会派发此事件。</p>\n<p>Promise 代表链中异步的完成</p>\n<p>封装旧式 api：</p>\n<pre class=\"highlight\"><code class=\"javascript\">setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> saySomething(<span class=\"hljs-string\">\"10 seconds passed\"</span>), <span class=\"hljs-number\">10000</span>);\n\n=====&gt;\n\n<span class=\"hljs-keyword\">const</span> wait = <span class=\"hljs-function\"><span class=\"hljs-params\">ms</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> setTimeout(resolve, ms));\n\nwait(<span class=\"hljs-number\">10000</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> saySomething(<span class=\"hljs-string\">\"10 seconds\"</span>)).catch(failureCallback);\n</code></pre>\n<h3 id=\"13-异常捕获\"><a class=\"markdownIt-Anchor\" href=\"#13-异常捕获\"></a> 1.3 异常捕获</h3>\n<p>catch</p>\n<p>一遇到异常抛出，浏览器就会顺着promise链寻找下一个 onRejected 失败回调函数或者由 .catch() 指定的回调函数。</p>\n<p>错误传递</p>\n<h2 id=\"14-组合\"><a class=\"markdownIt-Anchor\" href=\"#14-组合\"></a> 1.4 组合</h2>\n<h2 id=\"15-then-会异步调用\"><a class=\"markdownIt-Anchor\" href=\"#15-then-会异步调用\"></a> 1.5 then() 会异步调用</h2>\n<p>传递到 then() 中的函数被置入了一个微任务队列，而不是立即执行，这意味着它是在 JavaScript 事件队列的所有运行时结束了，事件队列被清空之后，才开始执行：</p>\n<pre class=\"highlight\"><code class=\"javascript\"><span class=\"hljs-keyword\">const</span> wait = <span class=\"hljs-function\"><span class=\"hljs-params\">ms</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> setTimeout(resolve, ms));\n\nwait().then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">4</span>));\n<span class=\"hljs-built_in\">Promise</span>.resolve().then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>)).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>));\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 1, 2, 3, 4</span>\n</code></pre>\n<h3 id=\"16-嵌套\"><a class=\"markdownIt-Anchor\" href=\"#16-嵌套\"></a> 1.6 嵌套</h3>\n<p>嵌套 Promise 是一种可以限制 catch 语句的作用域的控制结构写法。明确来说，嵌套的 catch 仅捕捉在其之前同时还必须是其作用域的 failureres，而捕捉不到在其链式以外或者其嵌套域以外的 error。如果使用正确，那么可以实现高精度的错误修复。</p>\n<pre class=\"highlight\"><code class=\"javascript\">doSomethingCritical()\n.then(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> doSomethingOptional()\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">optionalResult</span> =&gt;</span> doSomethingExtraNice(optionalResult))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> &#123;<span class=\"hljs-built_in\">console</span>.log(e.message)&#125;)) <span class=\"hljs-comment\">// 即使有异常也会忽略，继续运行;(最后会输出)</span>\n.then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> moreCriticalStuff())\n.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Critical failure: \"</span> + e.message));<span class=\"hljs-comment\">// 没有输出</span>\n</code></pre>\n<p>2、async/await</p>\n<p>3、CSS  布局</p>\n<p>4、运行时<br />\n执行机制：事件循环，宏/微任务<br />\n宏/微任务<br />\n多线程<br />\n异步</p>\n<p>window document DOM</p>\n<p>5、React 高阶/原理<br />\njsx</p>\n<p>6、this</p>\n<p>全局调用：window 或者 global</p>\n<p>严格模式：undefined</p>\n<p>函数调用：</p>\n<p>call，apply</p>\n<p>bind</p>\n<p>箭头函数：call/apply、 bind 调用箭头函数，第一个参数 null</p>\n<p>对象 this</p>\n<p>原型链中的 this</p>\n<p>getter/setter</p>\n<p>构造函数：值覆盖</p>\n<p>DOM 事件处理函数</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"javascript-知识点\"><a class=\"markdownIt-Anchor\" href=\"#javascript-知识点\"></a> JavaScript 知识点</h1>\n<h2 id=\"1-promise\"><a class=\"markdownIt-Anchor\" href=\"#1-promise\"></a> 1、Promise</h2>\n<h3 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\">使用</a></h3>\n<h3 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">介绍</a></h3>\n<h3 id=\"11-约定\"><a class=\"markdownIt-Anchor\" href=\"#11-约定\"></a> 1.1 约定</h3>\n<ul>\n<li>在本轮 事件循环 运行完成之前，回调函数是不会被调用的。</li>\n<li>即使异步操作已经完成（成功或失败），在这之后通过 then() 添加的回调函数也会被调用。</li>\n<li>通过多次调用 then() 可以添加多个回调函数，它们会按照插入顺序执行。</li>\n</ul>\n<h3 id=\"12-链式调用的本质函数式编程\"><a class=\"markdownIt-Anchor\" href=\"#12-链式调用的本质函数式编程\"></a> 1.2 链式调用的本质——函数式编程</h3>\n<p>Promise 是对象，有：promise、reason<br />\n拒绝事件（全局）：<br />\nrejectionhandled<br />\n当 Promise 被拒绝、并且在 reject 函数处理该 rejection 之后会派发此事件。<br />\nunhandledrejection<br />\n当 Promise 被拒绝，但没有提供 reject 函数来处理该 rejection 时，会派发此事件。</p>\n<p>Promise 代表链中异步的完成</p>\n<p>封装旧式 api：</p>\n<pre class=\"highlight\"><code class=\"javascript\">setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> saySomething(<span class=\"hljs-string\">\"10 seconds passed\"</span>), <span class=\"hljs-number\">10000</span>);\n\n=====&gt;\n\n<span class=\"hljs-keyword\">const</span> wait = <span class=\"hljs-function\"><span class=\"hljs-params\">ms</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> setTimeout(resolve, ms));\n\nwait(<span class=\"hljs-number\">10000</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> saySomething(<span class=\"hljs-string\">\"10 seconds\"</span>)).catch(failureCallback);\n</code></pre>\n<h3 id=\"13-异常捕获\"><a class=\"markdownIt-Anchor\" href=\"#13-异常捕获\"></a> 1.3 异常捕获</h3>\n<p>catch</p>\n<p>一遇到异常抛出，浏览器就会顺着promise链寻找下一个 onRejected 失败回调函数或者由 .catch() 指定的回调函数。</p>\n<p>错误传递</p>\n<h2 id=\"14-组合\"><a class=\"markdownIt-Anchor\" href=\"#14-组合\"></a> 1.4 组合</h2>\n<h2 id=\"15-then-会异步调用\"><a class=\"markdownIt-Anchor\" href=\"#15-then-会异步调用\"></a> 1.5 then() 会异步调用</h2>\n<p>传递到 then() 中的函数被置入了一个微任务队列，而不是立即执行，这意味着它是在 JavaScript 事件队列的所有运行时结束了，事件队列被清空之后，才开始执行：</p>\n<pre class=\"highlight\"><code class=\"javascript\"><span class=\"hljs-keyword\">const</span> wait = <span class=\"hljs-function\"><span class=\"hljs-params\">ms</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> setTimeout(resolve, ms));\n\nwait().then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">4</span>));\n<span class=\"hljs-built_in\">Promise</span>.resolve().then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>)).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>));\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 1, 2, 3, 4</span>\n</code></pre>\n<h3 id=\"16-嵌套\"><a class=\"markdownIt-Anchor\" href=\"#16-嵌套\"></a> 1.6 嵌套</h3>\n<p>嵌套 Promise 是一种可以限制 catch 语句的作用域的控制结构写法。明确来说，嵌套的 catch 仅捕捉在其之前同时还必须是其作用域的 failureres，而捕捉不到在其链式以外或者其嵌套域以外的 error。如果使用正确，那么可以实现高精度的错误修复。</p>\n<pre class=\"highlight\"><code class=\"javascript\">doSomethingCritical()\n.then(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> doSomethingOptional()\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">optionalResult</span> =&gt;</span> doSomethingExtraNice(optionalResult))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> &#123;<span class=\"hljs-built_in\">console</span>.log(e.message)&#125;)) <span class=\"hljs-comment\">// 即使有异常也会忽略，继续运行;(最后会输出)</span>\n.then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> moreCriticalStuff())\n.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Critical failure: \"</span> + e.message));<span class=\"hljs-comment\">// 没有输出</span>\n</code></pre>\n<p>2、async/await</p>\n<p>3、CSS  布局</p>\n<p>4、运行时<br />\n执行机制：事件循环，宏/微任务<br />\n宏/微任务<br />\n多线程<br />\n异步</p>\n<p>window document DOM</p>\n<p>5、React 高阶/原理<br />\njsx</p>\n<p>6、this</p>\n<p>全局调用：window 或者 global</p>\n<p>严格模式：undefined</p>\n<p>函数调用：</p>\n<p>call，apply</p>\n<p>bind</p>\n<p>箭头函数：call/apply、 bind 调用箭头函数，第一个参数 null</p>\n<p>对象 this</p>\n<p>原型链中的 this</p>\n<p>getter/setter</p>\n<p>构造函数：值覆盖</p>\n<p>DOM 事件处理函数</p>\n"},{"_content":"\n# Flutter 技术可行性调研\n\n界面：\n1、适配；\n2、项目视图组件；\n3、音视频播放；\n4、导航栏；\n5、动画；\n\n数据：\n1、数据库；\n2、数据序列化[json]；\n3、异步；\n4、埋点；\n\nAPP：\n1、webview：[用户协议，]事件，https证书认证；\n2、网络 http[s] 方法delete等；\n3、第三方app交互；\n4、后台任务；\n\n工程：\n1、图片等资源；\n2、国际化；\n3、性能监控：日志上报与及时处理；\n\n原生交互：\n1、编解码器；\n2、原生通道；\n3、原生第三方服务：客服、推送等；\n4、渠道分发包；\n\n*跨端\n1、iOS；\n2、Android；\n3、Web；\n\n*跨语言\n1、Dart；\n2、Swift；\n3、Kotlin；\n4、C++；\n\n*框架\n1、Flutter；\n2、Swift UI，cocoa Touch等诸多框架；\n3、Android 诸多框架；\n\n*设计模式层面\n1、设计模式；\n2、工程分层设计：\n\n    网络层\n    数据层\n    UI层\n    原生[通道层]\n\n*组件化层面\n1、功能组件化；\n2、业务模块化；\n\n小问题：\n1、分块列表；\n2、退出登录点击无反应；\n3、弹窗；\n","source":"_posts/学习笔记/Flutters/Flutter可行性技术调研/Flutter 可行性调研技术点.md","raw":"\n# Flutter 技术可行性调研\n\n界面：\n1、适配；\n2、项目视图组件；\n3、音视频播放；\n4、导航栏；\n5、动画；\n\n数据：\n1、数据库；\n2、数据序列化[json]；\n3、异步；\n4、埋点；\n\nAPP：\n1、webview：[用户协议，]事件，https证书认证；\n2、网络 http[s] 方法delete等；\n3、第三方app交互；\n4、后台任务；\n\n工程：\n1、图片等资源；\n2、国际化；\n3、性能监控：日志上报与及时处理；\n\n原生交互：\n1、编解码器；\n2、原生通道；\n3、原生第三方服务：客服、推送等；\n4、渠道分发包；\n\n*跨端\n1、iOS；\n2、Android；\n3、Web；\n\n*跨语言\n1、Dart；\n2、Swift；\n3、Kotlin；\n4、C++；\n\n*框架\n1、Flutter；\n2、Swift UI，cocoa Touch等诸多框架；\n3、Android 诸多框架；\n\n*设计模式层面\n1、设计模式；\n2、工程分层设计：\n\n    网络层\n    数据层\n    UI层\n    原生[通道层]\n\n*组件化层面\n1、功能组件化；\n2、业务模块化；\n\n小问题：\n1、分块列表；\n2、退出登录点击无反应；\n3、弹窗；\n","slug":"学习笔记/Flutters/Flutter可行性技术调研/Flutter 可行性调研技术点","published":1,"date":"2021-02-24T12:31:09.177Z","updated":"2021-02-24T12:31:09.177Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thf001pw37u8o3ua1ss","content":"<h1 id=\"flutter-技术可行性调研\"><a class=\"markdownIt-Anchor\" href=\"#flutter-技术可行性调研\"></a> Flutter 技术可行性调研</h1>\n<p>界面：<br />\n1、适配；<br />\n2、项目视图组件；<br />\n3、音视频播放；<br />\n4、导航栏；<br />\n5、动画；</p>\n<p>数据：<br />\n1、数据库；<br />\n2、数据序列化[json]；<br />\n3、异步；<br />\n4、埋点；</p>\n<p>APP：<br />\n1、webview：[用户协议，]事件，https证书认证；<br />\n2、网络 http[s] 方法delete等；<br />\n3、第三方app交互；<br />\n4、后台任务；</p>\n<p>工程：<br />\n1、图片等资源；<br />\n2、国际化；<br />\n3、性能监控：日志上报与及时处理；</p>\n<p>原生交互：<br />\n1、编解码器；<br />\n2、原生通道；<br />\n3、原生第三方服务：客服、推送等；<br />\n4、渠道分发包；</p>\n<p>*跨端<br />\n1、iOS；<br />\n2、Android；<br />\n3、Web；</p>\n<p>*跨语言<br />\n1、Dart；<br />\n2、Swift；<br />\n3、Kotlin；<br />\n4、C++；</p>\n<p>*框架<br />\n1、Flutter；<br />\n2、Swift UI，cocoa Touch等诸多框架；<br />\n3、Android 诸多框架；</p>\n<p>*设计模式层面<br />\n1、设计模式；<br />\n2、工程分层设计：</p>\n<pre><code>网络层\n数据层\nUI层\n原生[通道层]\n</code></pre>\n<p>*组件化层面<br />\n1、功能组件化；<br />\n2、业务模块化；</p>\n<p>小问题：<br />\n1、分块列表；<br />\n2、退出登录点击无反应；<br />\n3、弹窗；</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"flutter-技术可行性调研\"><a class=\"markdownIt-Anchor\" href=\"#flutter-技术可行性调研\"></a> Flutter 技术可行性调研</h1>\n<p>界面：<br />\n1、适配；<br />\n2、项目视图组件；<br />\n3、音视频播放；<br />\n4、导航栏；<br />\n5、动画；</p>\n<p>数据：<br />\n1、数据库；<br />\n2、数据序列化[json]；<br />\n3、异步；<br />\n4、埋点；</p>\n<p>APP：<br />\n1、webview：[用户协议，]事件，https证书认证；<br />\n2、网络 http[s] 方法delete等；<br />\n3、第三方app交互；<br />\n4、后台任务；</p>\n<p>工程：<br />\n1、图片等资源；<br />\n2、国际化；<br />\n3、性能监控：日志上报与及时处理；</p>\n<p>原生交互：<br />\n1、编解码器；<br />\n2、原生通道；<br />\n3、原生第三方服务：客服、推送等；<br />\n4、渠道分发包；</p>\n<p>*跨端<br />\n1、iOS；<br />\n2、Android；<br />\n3、Web；</p>\n<p>*跨语言<br />\n1、Dart；<br />\n2、Swift；<br />\n3、Kotlin；<br />\n4、C++；</p>\n<p>*框架<br />\n1、Flutter；<br />\n2、Swift UI，cocoa Touch等诸多框架；<br />\n3、Android 诸多框架；</p>\n<p>*设计模式层面<br />\n1、设计模式；<br />\n2、工程分层设计：</p>\n<pre><code>网络层\n数据层\nUI层\n原生[通道层]\n</code></pre>\n<p>*组件化层面<br />\n1、功能组件化；<br />\n2、业务模块化；</p>\n<p>小问题：<br />\n1、分块列表；<br />\n2、退出登录点击无反应；<br />\n3、弹窗；</p>\n"},{"_content":"# Flutter 技术可行性调研\n\n## 1、项目构建\n\n### 1.1 [环境配置](https://flutter-io.cn/docs/get-started/install)\n\n#### 1. 编辑器\n\n  1. Android Studio[Intelij]\n  2. Visual Studio Code\n\n#### 2. SDK\n\n1. Dart\n2. Flutter\n\n### 1.2 创建并运行项目\n\n#### 1. 终端\n\n```shell\n  flutter create my_app\n  cd my_app\n  flutter run\n```\n\n#### 2. Android Studio\n\n#### 3. Visual Studio Code\n\n## 2、项目工程结构\n\n### 2.1 项目文件组织结构\n\n![项目工程结构](./Resources/Projects.png)\n\n### 2.2 源码文件组织、使用\n\n1 项目库管理、第三方库\n\n```yml\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter_localizations:\n    sdk: flutter\n\n  cupertino_icons: ^0.1.2\n  english_words: ^3.1.0\n  video_player: ^0.10.1+6\n  dio: ^2.1.16\n  path_provider: ^1.1.0\n  image_picker: ^0.6.1+4\n  webview_flutter: ^0.3.13\n  intl: ^0.15.8\n  url_launcher: ^5.1.2\n  package_info: ^0.4.0+6\n  fluwx: ^1.0.4\n  json_annotation: ^3.0.0\n  device_info: ^0.4.0+2\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  intl_translation: ^0.17.2\n  json_serializable: ^3.2.2\n  build_runner: ^1.6.7\n```\n\n2 核心库、源码文件\n\n```dart\nimport 'dart:io';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:image_picker/image_picker.dart';\n\nimport '../Profile/Models/ProfileInfo.dart';\n```\n\n3 功能模块、组件功能划分，独立管理，以及自定义组件化工作管理\n\n![文件目录](./Resources/files-module.png)\n\n### 2.3、资源文件\n\n#### 1 引用\n\n```yaml\nflutter:\n  assets:\n    - assets/my_icon.png\n    - assets/background.png\n```\n\n#### 2 加载\n\n##### 2.1. Bundel\n\n```dart\nAssetBundle;\nrootBundle;\nDefaultAssetBundle;\n资源变体：根据分辨率加载图片等资源；\nAssetImage;\n```\n\n##### 2. 依赖包中的资源\n\n```dart\nAssetImage('icons/heart.png', package: 'my_icons')\n```\n\n#### 3 打包资源进asset\n\n```yaml\nflutter:\n  assets:\n    - packages/fancy_backgrounds/backgrounds/background1.png\n```\n\n#### 4 资源平台共享\n\n* Android\n\n```Java\nAssetManager assetManager = registrar.context().getAssets();\nString key = registrar.lookupKeyForAsset(\"icons/heart.png\");\nAssetFileDescriptor fd = assetManager.openFd(key);\n```\n\n* iOS\n\n```Objective-C\nNSString* key = [registrar lookupKeyForAsset:@\"icons/heart.png\"];\nNSString* path = [[NSBundle mainBundle] pathForResource:key ofType:nil];\n   ```\n\n#### 5 平台资源\n\n>Android 与 iOS 的icon 、启动图配置；\n\n### 2.4、项目源码简单解析\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter SuMian',\n      onGenerateTitle: (BuildContext context) =>\n          RyLocalizations.of(context).title,\n      home: RyTabBar(),\n      theme: ThemeData(\n        primaryColor: Colors.white,\n      ),\n      debugShowCheckedModeBanner: false,\n      showSemanticsDebugger: false,\n      localizationsDelegates: [\n        const RyLocalizationsDelegate(),\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        GlobalCupertinoLocalizations.delegate,\n      ],\n      supportedLocales: [\n        const Locale('en'),\n        const Locale('zh'),\n      ],\n    );\n  }\n}\n```\n\n## 3、界面\n\n### 3.1 [布局介绍](https://flutter-io.cn/docs/development/ui/widgets/layout)\n\n```dart\nWidget listHead() {\n    _avatarImg = Image.network(\n      ProfileInfo.getInstance().avatar,\n      fit: BoxFit.cover,\n    );\n\n    Container avatar = Container(\n      margin: const EdgeInsets.fromLTRB(15, 10, 10, 10),\n      child: Container(\n        width: 60,\n        height: 60,\n        decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(30),\n          boxShadow: [\n            BoxShadow(\n                color: Colors.black,\n                offset: Offset(0, 0),\n                blurRadius: 1,\n                spreadRadius: 2)\n          ],\n          image: DecorationImage(\n            image: NetworkImage(ProfileInfo.getInstance().avatar),\n            fit: BoxFit.cover,\n          ),\n        ),\n      ),\n    );\n\n    Container nameTxt = Container(\n      margin: EdgeInsets.fromLTRB(5, 0, 0, 5),\n      child: Text(ProfileInfo.getInstance().mobile),\n    );\n    Container department = Container(\n      margin: EdgeInsets.fromLTRB(5, 5, 0, 0),\n      child: Text(ProfileInfo.getInstance().department),\n    );\n    Container txtView = Container(\n      margin: EdgeInsets.fromLTRB(10, 25, 0, 25),\n      child: Column(\n        children: <Widget>[nameTxt, department],\n        crossAxisAlignment: CrossAxisAlignment.start,\n      ),\n    );\n    return Row(\n      children: <Widget>[\n        avatar,\n        Expanded(\n          child: txtView,\n        )\n      ],\n    );\n  }\n```\n\n### 3.2 交互事件\n\n1 Button 事件点击\n\n```dart\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(color: Colors.grey[200]),\n        padding: EdgeInsets.all(0),\n        child: Container(\n          color: Colors.white,\n          child: Center(child: OutlineButton(child: Text('个人信息'),onPressed: getProfile,),),\n        ), \n     ),\n    );\n  }\n```\n\n2 下拉刷新、上拉加载\n\n```dart\nWidget setPannel() {\n    return RefreshIndicator(\n      child: ListView.builder(\n        itemBuilder: _renderRow,\n        itemCount: list.length + 1,\n        controller: _scrollController,\n      ),\n      onRefresh: _onRefresh,\n    );\n  }\n```\n\n## 4、业务\n\n### 4.1 网络模块\n\n```dart\nclass NetworkTools {\n  static Future get(String url, [Map<String, dynamic> params]) async {\n    var response;\n    Directory documentsDir = await getApplicationDocumentsDirectory();\n    String documentsPath = documentsDir.path;\n    var dir = new Directory(\"$documentsPath/cookies\");\n    await dir.create();\n    dio.interceptors.add(CookieManager(PersistCookieJar(dir: dir.path)));\n    dio.interceptors.add(TokenInterceptor());\n    if (params != null) {\n      response = await dio.get(url, queryParameters: params);\n    } else {\n      response = await dio.get(url);\n    }\n    return response.data;\n  }\n\n  static Future post(String url, Map<String, dynamic> params) async {\n    var response = await dio.post(url, data: params);\n    return response.data;\n  }\n\n  static Future delete(String url, Map<String, dynamic> params) async {\n    dio.interceptors.add(TokenInterceptor());\n    var response = await dio.delete(url, data: params);\n    return response.statusCode;\n  }\n}\n```\n\n### 4.2 数据\n\n1 序列化\n\n```dart\n\nclass Token {\n  String token;\n\n  int expired;\n\n  int refreshTime;\n\n  Token({this.token,this.expired,this.refreshTime}){_instance = this;}\n\n  Token._();\n\n  static Token _instance;\n\n  static Token getInstance() {\n    if (_instance == null) {\n      _instance = Token._();\n    }\n    return _instance;\n  }\n\n  factory Token.fromJson(Map<String, dynamic> json){\n    return Token(\n      token: json['token'],\n      expired: json['expired_at'],\n      refreshTime: json['refresh_expired_at']\n    );\n  }\n}\n\nMap<String, dynamic> toJson() =>\n    {\n      'token': token,\n      'expired_at': expired,\n      'refresh_expired_at':refreshTime\n    };\n```\n\n2 自动序列化\n\n配置：\n\n```yaml\ndependencies:\n  # Your other regular dependencies here\n  json_annotation: ^2.0.0\n\ndev_dependencies:\n  # Your other dev_dependencies here\n  build_runner: ^1.0.0\n  json_serializable: ^2.0.0\n```\n\n代码：\n\n```dart\nimport 'package:json_annotation/json_annotation.dart';\n\npart 'RelaxtionsLog.g.dart';\n\n@JsonSerializable()\nclass RelaxtionsLog {\n  int id;\n\n  @JsonKey(name: 'watch_times')\n  int times;\n\n  @JsonKey(name: 'total_watch_length')\n  int length;\n\n  String name;\n\n  RelaxtionsLog({\n    this.id,\n    this.times,\n    this.length,\n    this.name\n  });\n\n  factory RelaxtionsLog.fromJson(Map<String,dynamic> json) => _$RelaxtionsLogFromJson(json);\n\n  Map<String,dynamic> toJson() => _$RelaxtionsLogToJson(this);\n\n}\n```\n\n3 持久化：数据库、归档、UserDefault等\n\n1. [FireBase](https://pub.dev/packages/firebase_database#-readme-tab-)\n2. [sqflite](https://pub.dev/packages/sqflite)\n3. SharedPreferences => UserDefault\n\n## 5、包[组件化]\n\n### 5.1 创建Dart package库\n\n```shell\n flutter create --org com.example --template=plugin hello --创建项目\n flutter pub pub publish --dry-run  --检查配置\n flutter pub pub publish   --发布package\n```\n\n### 5.2 提交package\n\n```shell\nflutter pub pub publish --dry-run\nflutter pub pub publish\n```\n\n* package 依赖\n\n```yaml\ndependencies:\n  url_launcher: ^0.4.2\n```\n\n* 原生平台依赖\n\n```ruby\nPod::Spec.new do |s|\n  # lines skipped\n  s.dependency 'url_launcher'\n```\n\n* [自建私有 package 仓库](./Resources/)\n\n## 6、平台通道\n\n### 6.1 简单通道\n\n1. 获取相册图片\n\n```swift\nlet controller:FlutterViewController = window?.rootViewController as! FlutterViewController\nlet batteryChannel =  FlutterMethodChannel(name: RyImagePicker.channel, binaryMessenger: controller.binaryMessenger)\nbatteryChannel.setMethodCallHandler { (call, result) in\n    if call.method == \"pickerImage\" {\n        RyImagePicker(controller).showImagePicker { (image) in\n            result(image)\n        }\n    } else {\n        result(FlutterMethodNotImplemented);\n    }\n}\n```\n\n### 6.2 Flutter编解码器\n\n1 Flutter定义了三种不同类型的Channel，它们分别是：\n\n* BasicMessageChannel：用于传递字符串和半结构化的信息。\n* BMethodChannel：用于传递方法调用（method invocation）。\n* BEventChannel: 用于数据流（event streams）的通信。\n\n三种Channel之间互相独立，各有用途，但它们在设计上却非常相近。每种Channel均有三个重要成员变量：\n\n* name: String类型，代表Channel的名字，也是其唯一标识符。\n* messager：BinaryMessenger类型，代表消息信使，是消息的发送与接收的工具。\n* codec: MessageCodec类型或MethodCodec类型，代表消息的编解码器。\n\n消息通道结构图6-2-1：\n![消息通道结构图](./Resources/BinaryMessenger.jpg)\n\n编解码器结构图6-2-2:\n![编解码器结构图](./Resources/Codec.jpg)\n\n2 消息解码\n\n支持的平台数据类型参考：```StandardMessageCodec```\n![消息解码器](./Resources/type.jpg)\n\n3.1 消息传递：Dart -> Native\n\n![消息传递](./Resources/message-dart-native.jpg)\n\n3.2 消息传递：Native -> Dart\n\n![消息传递](./Resources/message-native-dart.jpg)\n","source":"_posts/学习笔记/Flutters/Flutter可行性技术调研/Flutter 技术可行性调研.md","raw":"# Flutter 技术可行性调研\n\n## 1、项目构建\n\n### 1.1 [环境配置](https://flutter-io.cn/docs/get-started/install)\n\n#### 1. 编辑器\n\n  1. Android Studio[Intelij]\n  2. Visual Studio Code\n\n#### 2. SDK\n\n1. Dart\n2. Flutter\n\n### 1.2 创建并运行项目\n\n#### 1. 终端\n\n```shell\n  flutter create my_app\n  cd my_app\n  flutter run\n```\n\n#### 2. Android Studio\n\n#### 3. Visual Studio Code\n\n## 2、项目工程结构\n\n### 2.1 项目文件组织结构\n\n![项目工程结构](./Resources/Projects.png)\n\n### 2.2 源码文件组织、使用\n\n1 项目库管理、第三方库\n\n```yml\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter_localizations:\n    sdk: flutter\n\n  cupertino_icons: ^0.1.2\n  english_words: ^3.1.0\n  video_player: ^0.10.1+6\n  dio: ^2.1.16\n  path_provider: ^1.1.0\n  image_picker: ^0.6.1+4\n  webview_flutter: ^0.3.13\n  intl: ^0.15.8\n  url_launcher: ^5.1.2\n  package_info: ^0.4.0+6\n  fluwx: ^1.0.4\n  json_annotation: ^3.0.0\n  device_info: ^0.4.0+2\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  intl_translation: ^0.17.2\n  json_serializable: ^3.2.2\n  build_runner: ^1.6.7\n```\n\n2 核心库、源码文件\n\n```dart\nimport 'dart:io';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:image_picker/image_picker.dart';\n\nimport '../Profile/Models/ProfileInfo.dart';\n```\n\n3 功能模块、组件功能划分，独立管理，以及自定义组件化工作管理\n\n![文件目录](./Resources/files-module.png)\n\n### 2.3、资源文件\n\n#### 1 引用\n\n```yaml\nflutter:\n  assets:\n    - assets/my_icon.png\n    - assets/background.png\n```\n\n#### 2 加载\n\n##### 2.1. Bundel\n\n```dart\nAssetBundle;\nrootBundle;\nDefaultAssetBundle;\n资源变体：根据分辨率加载图片等资源；\nAssetImage;\n```\n\n##### 2. 依赖包中的资源\n\n```dart\nAssetImage('icons/heart.png', package: 'my_icons')\n```\n\n#### 3 打包资源进asset\n\n```yaml\nflutter:\n  assets:\n    - packages/fancy_backgrounds/backgrounds/background1.png\n```\n\n#### 4 资源平台共享\n\n* Android\n\n```Java\nAssetManager assetManager = registrar.context().getAssets();\nString key = registrar.lookupKeyForAsset(\"icons/heart.png\");\nAssetFileDescriptor fd = assetManager.openFd(key);\n```\n\n* iOS\n\n```Objective-C\nNSString* key = [registrar lookupKeyForAsset:@\"icons/heart.png\"];\nNSString* path = [[NSBundle mainBundle] pathForResource:key ofType:nil];\n   ```\n\n#### 5 平台资源\n\n>Android 与 iOS 的icon 、启动图配置；\n\n### 2.4、项目源码简单解析\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter SuMian',\n      onGenerateTitle: (BuildContext context) =>\n          RyLocalizations.of(context).title,\n      home: RyTabBar(),\n      theme: ThemeData(\n        primaryColor: Colors.white,\n      ),\n      debugShowCheckedModeBanner: false,\n      showSemanticsDebugger: false,\n      localizationsDelegates: [\n        const RyLocalizationsDelegate(),\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        GlobalCupertinoLocalizations.delegate,\n      ],\n      supportedLocales: [\n        const Locale('en'),\n        const Locale('zh'),\n      ],\n    );\n  }\n}\n```\n\n## 3、界面\n\n### 3.1 [布局介绍](https://flutter-io.cn/docs/development/ui/widgets/layout)\n\n```dart\nWidget listHead() {\n    _avatarImg = Image.network(\n      ProfileInfo.getInstance().avatar,\n      fit: BoxFit.cover,\n    );\n\n    Container avatar = Container(\n      margin: const EdgeInsets.fromLTRB(15, 10, 10, 10),\n      child: Container(\n        width: 60,\n        height: 60,\n        decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(30),\n          boxShadow: [\n            BoxShadow(\n                color: Colors.black,\n                offset: Offset(0, 0),\n                blurRadius: 1,\n                spreadRadius: 2)\n          ],\n          image: DecorationImage(\n            image: NetworkImage(ProfileInfo.getInstance().avatar),\n            fit: BoxFit.cover,\n          ),\n        ),\n      ),\n    );\n\n    Container nameTxt = Container(\n      margin: EdgeInsets.fromLTRB(5, 0, 0, 5),\n      child: Text(ProfileInfo.getInstance().mobile),\n    );\n    Container department = Container(\n      margin: EdgeInsets.fromLTRB(5, 5, 0, 0),\n      child: Text(ProfileInfo.getInstance().department),\n    );\n    Container txtView = Container(\n      margin: EdgeInsets.fromLTRB(10, 25, 0, 25),\n      child: Column(\n        children: <Widget>[nameTxt, department],\n        crossAxisAlignment: CrossAxisAlignment.start,\n      ),\n    );\n    return Row(\n      children: <Widget>[\n        avatar,\n        Expanded(\n          child: txtView,\n        )\n      ],\n    );\n  }\n```\n\n### 3.2 交互事件\n\n1 Button 事件点击\n\n```dart\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(color: Colors.grey[200]),\n        padding: EdgeInsets.all(0),\n        child: Container(\n          color: Colors.white,\n          child: Center(child: OutlineButton(child: Text('个人信息'),onPressed: getProfile,),),\n        ), \n     ),\n    );\n  }\n```\n\n2 下拉刷新、上拉加载\n\n```dart\nWidget setPannel() {\n    return RefreshIndicator(\n      child: ListView.builder(\n        itemBuilder: _renderRow,\n        itemCount: list.length + 1,\n        controller: _scrollController,\n      ),\n      onRefresh: _onRefresh,\n    );\n  }\n```\n\n## 4、业务\n\n### 4.1 网络模块\n\n```dart\nclass NetworkTools {\n  static Future get(String url, [Map<String, dynamic> params]) async {\n    var response;\n    Directory documentsDir = await getApplicationDocumentsDirectory();\n    String documentsPath = documentsDir.path;\n    var dir = new Directory(\"$documentsPath/cookies\");\n    await dir.create();\n    dio.interceptors.add(CookieManager(PersistCookieJar(dir: dir.path)));\n    dio.interceptors.add(TokenInterceptor());\n    if (params != null) {\n      response = await dio.get(url, queryParameters: params);\n    } else {\n      response = await dio.get(url);\n    }\n    return response.data;\n  }\n\n  static Future post(String url, Map<String, dynamic> params) async {\n    var response = await dio.post(url, data: params);\n    return response.data;\n  }\n\n  static Future delete(String url, Map<String, dynamic> params) async {\n    dio.interceptors.add(TokenInterceptor());\n    var response = await dio.delete(url, data: params);\n    return response.statusCode;\n  }\n}\n```\n\n### 4.2 数据\n\n1 序列化\n\n```dart\n\nclass Token {\n  String token;\n\n  int expired;\n\n  int refreshTime;\n\n  Token({this.token,this.expired,this.refreshTime}){_instance = this;}\n\n  Token._();\n\n  static Token _instance;\n\n  static Token getInstance() {\n    if (_instance == null) {\n      _instance = Token._();\n    }\n    return _instance;\n  }\n\n  factory Token.fromJson(Map<String, dynamic> json){\n    return Token(\n      token: json['token'],\n      expired: json['expired_at'],\n      refreshTime: json['refresh_expired_at']\n    );\n  }\n}\n\nMap<String, dynamic> toJson() =>\n    {\n      'token': token,\n      'expired_at': expired,\n      'refresh_expired_at':refreshTime\n    };\n```\n\n2 自动序列化\n\n配置：\n\n```yaml\ndependencies:\n  # Your other regular dependencies here\n  json_annotation: ^2.0.0\n\ndev_dependencies:\n  # Your other dev_dependencies here\n  build_runner: ^1.0.0\n  json_serializable: ^2.0.0\n```\n\n代码：\n\n```dart\nimport 'package:json_annotation/json_annotation.dart';\n\npart 'RelaxtionsLog.g.dart';\n\n@JsonSerializable()\nclass RelaxtionsLog {\n  int id;\n\n  @JsonKey(name: 'watch_times')\n  int times;\n\n  @JsonKey(name: 'total_watch_length')\n  int length;\n\n  String name;\n\n  RelaxtionsLog({\n    this.id,\n    this.times,\n    this.length,\n    this.name\n  });\n\n  factory RelaxtionsLog.fromJson(Map<String,dynamic> json) => _$RelaxtionsLogFromJson(json);\n\n  Map<String,dynamic> toJson() => _$RelaxtionsLogToJson(this);\n\n}\n```\n\n3 持久化：数据库、归档、UserDefault等\n\n1. [FireBase](https://pub.dev/packages/firebase_database#-readme-tab-)\n2. [sqflite](https://pub.dev/packages/sqflite)\n3. SharedPreferences => UserDefault\n\n## 5、包[组件化]\n\n### 5.1 创建Dart package库\n\n```shell\n flutter create --org com.example --template=plugin hello --创建项目\n flutter pub pub publish --dry-run  --检查配置\n flutter pub pub publish   --发布package\n```\n\n### 5.2 提交package\n\n```shell\nflutter pub pub publish --dry-run\nflutter pub pub publish\n```\n\n* package 依赖\n\n```yaml\ndependencies:\n  url_launcher: ^0.4.2\n```\n\n* 原生平台依赖\n\n```ruby\nPod::Spec.new do |s|\n  # lines skipped\n  s.dependency 'url_launcher'\n```\n\n* [自建私有 package 仓库](./Resources/)\n\n## 6、平台通道\n\n### 6.1 简单通道\n\n1. 获取相册图片\n\n```swift\nlet controller:FlutterViewController = window?.rootViewController as! FlutterViewController\nlet batteryChannel =  FlutterMethodChannel(name: RyImagePicker.channel, binaryMessenger: controller.binaryMessenger)\nbatteryChannel.setMethodCallHandler { (call, result) in\n    if call.method == \"pickerImage\" {\n        RyImagePicker(controller).showImagePicker { (image) in\n            result(image)\n        }\n    } else {\n        result(FlutterMethodNotImplemented);\n    }\n}\n```\n\n### 6.2 Flutter编解码器\n\n1 Flutter定义了三种不同类型的Channel，它们分别是：\n\n* BasicMessageChannel：用于传递字符串和半结构化的信息。\n* BMethodChannel：用于传递方法调用（method invocation）。\n* BEventChannel: 用于数据流（event streams）的通信。\n\n三种Channel之间互相独立，各有用途，但它们在设计上却非常相近。每种Channel均有三个重要成员变量：\n\n* name: String类型，代表Channel的名字，也是其唯一标识符。\n* messager：BinaryMessenger类型，代表消息信使，是消息的发送与接收的工具。\n* codec: MessageCodec类型或MethodCodec类型，代表消息的编解码器。\n\n消息通道结构图6-2-1：\n![消息通道结构图](./Resources/BinaryMessenger.jpg)\n\n编解码器结构图6-2-2:\n![编解码器结构图](./Resources/Codec.jpg)\n\n2 消息解码\n\n支持的平台数据类型参考：```StandardMessageCodec```\n![消息解码器](./Resources/type.jpg)\n\n3.1 消息传递：Dart -> Native\n\n![消息传递](./Resources/message-dart-native.jpg)\n\n3.2 消息传递：Native -> Dart\n\n![消息传递](./Resources/message-native-dart.jpg)\n","slug":"学习笔记/Flutters/Flutter可行性技术调研/Flutter 技术可行性调研","published":1,"date":"2021-02-24T12:31:09.177Z","updated":"2021-02-24T12:31:09.178Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thj001qw37uhjf27m3s","content":"<h1 id=\"flutter-技术可行性调研\"><a class=\"markdownIt-Anchor\" href=\"#flutter-技术可行性调研\"></a> Flutter 技术可行性调研</h1>\n<h2 id=\"1-项目构建\"><a class=\"markdownIt-Anchor\" href=\"#1-项目构建\"></a> 1、项目构建</h2>\n<h3 id=\"11-环境配置\"><a class=\"markdownIt-Anchor\" href=\"#11-环境配置\"></a> 1.1 <a href=\"https://flutter-io.cn/docs/get-started/install\">环境配置</a></h3>\n<h4 id=\"1-编辑器\"><a class=\"markdownIt-Anchor\" href=\"#1-编辑器\"></a> 1. 编辑器</h4>\n<ol>\n<li>Android Studio[Intelij]</li>\n<li>Visual Studio Code</li>\n</ol>\n<h4 id=\"2-sdk\"><a class=\"markdownIt-Anchor\" href=\"#2-sdk\"></a> 2. SDK</h4>\n<ol>\n<li>Dart</li>\n<li>Flutter</li>\n</ol>\n<h3 id=\"12-创建并运行项目\"><a class=\"markdownIt-Anchor\" href=\"#12-创建并运行项目\"></a> 1.2 创建并运行项目</h3>\n<h4 id=\"1-终端\"><a class=\"markdownIt-Anchor\" href=\"#1-终端\"></a> 1. 终端</h4>\n<pre class=\"highlight\"><code class=\"shell\">  flutter create my_app\n  cd my_app\n  flutter run\n</code></pre>\n<h4 id=\"2-android-studio\"><a class=\"markdownIt-Anchor\" href=\"#2-android-studio\"></a> 2. Android Studio</h4>\n<h4 id=\"3-visual-studio-code\"><a class=\"markdownIt-Anchor\" href=\"#3-visual-studio-code\"></a> 3. Visual Studio Code</h4>\n<h2 id=\"2-项目工程结构\"><a class=\"markdownIt-Anchor\" href=\"#2-项目工程结构\"></a> 2、项目工程结构</h2>\n<h3 id=\"21-项目文件组织结构\"><a class=\"markdownIt-Anchor\" href=\"#21-项目文件组织结构\"></a> 2.1 项目文件组织结构</h3>\n<p><img src=\"./Resources/Projects.png\" alt=\"项目工程结构\" /></p>\n<h3 id=\"22-源码文件组织-使用\"><a class=\"markdownIt-Anchor\" href=\"#22-源码文件组织-使用\"></a> 2.2 源码文件组织、使用</h3>\n<p>1 项目库管理、第三方库</p>\n<pre class=\"highlight\"><code class=\"yml\"><span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-attr\">flutter:</span>\n    <span class=\"hljs-attr\">sdk:</span> <span class=\"hljs-string\">flutter</span>\n  <span class=\"hljs-attr\">flutter_localizations:</span>\n    <span class=\"hljs-attr\">sdk:</span> <span class=\"hljs-string\">flutter</span>\n\n  <span class=\"hljs-attr\">cupertino_icons:</span> <span class=\"hljs-string\">^0.1.2</span>\n  <span class=\"hljs-attr\">english_words:</span> <span class=\"hljs-string\">^3.1.0</span>\n  <span class=\"hljs-attr\">video_player:</span> <span class=\"hljs-string\">^0.10.1+6</span>\n  <span class=\"hljs-attr\">dio:</span> <span class=\"hljs-string\">^2.1.16</span>\n  <span class=\"hljs-attr\">path_provider:</span> <span class=\"hljs-string\">^1.1.0</span>\n  <span class=\"hljs-attr\">image_picker:</span> <span class=\"hljs-string\">^0.6.1+4</span>\n  <span class=\"hljs-attr\">webview_flutter:</span> <span class=\"hljs-string\">^0.3.13</span>\n  <span class=\"hljs-attr\">intl:</span> <span class=\"hljs-string\">^0.15.8</span>\n  <span class=\"hljs-attr\">url_launcher:</span> <span class=\"hljs-string\">^5.1.2</span>\n  <span class=\"hljs-attr\">package_info:</span> <span class=\"hljs-string\">^0.4.0+6</span>\n  <span class=\"hljs-attr\">fluwx:</span> <span class=\"hljs-string\">^1.0.4</span>\n  <span class=\"hljs-attr\">json_annotation:</span> <span class=\"hljs-string\">^3.0.0</span>\n  <span class=\"hljs-attr\">device_info:</span> <span class=\"hljs-string\">^0.4.0+2</span>\n\n<span class=\"hljs-attr\">dev_dependencies:</span>\n  <span class=\"hljs-attr\">flutter_test:</span>\n    <span class=\"hljs-attr\">sdk:</span> <span class=\"hljs-string\">flutter</span>\n  <span class=\"hljs-attr\">intl_translation:</span> <span class=\"hljs-string\">^0.17.2</span>\n  <span class=\"hljs-attr\">json_serializable:</span> <span class=\"hljs-string\">^3.2.2</span>\n  <span class=\"hljs-attr\">build_runner:</span> <span class=\"hljs-string\">^1.6.7</span>\n</code></pre>\n<p>2 核心库、源码文件</p>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:io'</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/services.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:image_picker/image_picker.dart'</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'../Profile/Models/ProfileInfo.dart'</span>;\n</code></pre>\n<p>3 功能模块、组件功能划分，独立管理，以及自定义组件化工作管理</p>\n<p><img src=\"./Resources/files-module.png\" alt=\"文件目录\" /></p>\n<h3 id=\"23-资源文件\"><a class=\"markdownIt-Anchor\" href=\"#23-资源文件\"></a> 2.3、资源文件</h3>\n<h4 id=\"1-引用\"><a class=\"markdownIt-Anchor\" href=\"#1-引用\"></a> 1 引用</h4>\n<pre class=\"highlight\"><code class=\"yaml\"><span class=\"hljs-attr\">flutter:</span>\n  <span class=\"hljs-attr\">assets:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">assets/my_icon.png</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">assets/background.png</span>\n</code></pre>\n<h4 id=\"2-加载\"><a class=\"markdownIt-Anchor\" href=\"#2-加载\"></a> 2 加载</h4>\n<h5 id=\"21-bundel\"><a class=\"markdownIt-Anchor\" href=\"#21-bundel\"></a> 2.1. Bundel</h5>\n<pre class=\"highlight\"><code class=\"dart\">AssetBundle;\nrootBundle;\nDefaultAssetBundle;\n资源变体：根据分辨率加载图片等资源；\nAssetImage;\n</code></pre>\n<h5 id=\"2-依赖包中的资源\"><a class=\"markdownIt-Anchor\" href=\"#2-依赖包中的资源\"></a> 2. 依赖包中的资源</h5>\n<pre class=\"highlight\"><code class=\"dart\">AssetImage(<span class=\"hljs-string\">'icons/heart.png'</span>, package: <span class=\"hljs-string\">'my_icons'</span>)\n</code></pre>\n<h4 id=\"3-打包资源进asset\"><a class=\"markdownIt-Anchor\" href=\"#3-打包资源进asset\"></a> 3 打包资源进asset</h4>\n<pre class=\"highlight\"><code class=\"yaml\"><span class=\"hljs-attr\">flutter:</span>\n  <span class=\"hljs-attr\">assets:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">packages/fancy_backgrounds/backgrounds/background1.png</span>\n</code></pre>\n<h4 id=\"4-资源平台共享\"><a class=\"markdownIt-Anchor\" href=\"#4-资源平台共享\"></a> 4 资源平台共享</h4>\n<ul>\n<li>Android</li>\n</ul>\n<pre class=\"highlight\"><code class=\"Java\">AssetManager assetManager = registrar.context().getAssets();\nString key = registrar.lookupKeyForAsset(<span class=\"hljs-string\">\"icons/heart.png\"</span>);\nAssetFileDescriptor fd = assetManager.openFd(key);\n</code></pre>\n<ul>\n<li>iOS</li>\n</ul>\n<pre class=\"highlight\"><code class=\"Objective-C\">NSString* key = [registrar lookupKeyForAsset:@&quot;icons/heart.png&quot;];\nNSString* path = [[NSBundle mainBundle] pathForResource:key ofType:nil];\n</code></pre>\n<h4 id=\"5-平台资源\"><a class=\"markdownIt-Anchor\" href=\"#5-平台资源\"></a> 5 平台资源</h4>\n<blockquote>\n<p>Android 与 iOS 的icon 、启动图配置；</p>\n</blockquote>\n<h3 id=\"24-项目源码简单解析\"><a class=\"markdownIt-Anchor\" href=\"#24-项目源码简单解析\"></a> 2.4、项目源码简单解析</h3>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) &#123;\n    <span class=\"hljs-keyword\">return</span> MaterialApp(\n      title: <span class=\"hljs-string\">'Flutter SuMian'</span>,\n      onGenerateTitle: (BuildContext context) =&gt;\n          RyLocalizations.of(context).title,\n      home: RyTabBar(),\n      theme: ThemeData(\n        primaryColor: Colors.white,\n      ),\n      debugShowCheckedModeBanner: <span class=\"hljs-keyword\">false</span>,\n      showSemanticsDebugger: <span class=\"hljs-keyword\">false</span>,\n      localizationsDelegates: [\n        <span class=\"hljs-keyword\">const</span> RyLocalizationsDelegate(),\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        GlobalCupertinoLocalizations.delegate,\n      ],\n      supportedLocales: [\n        <span class=\"hljs-keyword\">const</span> Locale(<span class=\"hljs-string\">'en'</span>),\n        <span class=\"hljs-keyword\">const</span> Locale(<span class=\"hljs-string\">'zh'</span>),\n      ],\n    );\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-界面\"><a class=\"markdownIt-Anchor\" href=\"#3-界面\"></a> 3、界面</h2>\n<h3 id=\"31-布局介绍\"><a class=\"markdownIt-Anchor\" href=\"#31-布局介绍\"></a> 3.1 <a href=\"https://flutter-io.cn/docs/development/ui/widgets/layout\">布局介绍</a></h3>\n<pre class=\"highlight\"><code class=\"dart\">Widget listHead() &#123;\n    _avatarImg = Image.network(\n      ProfileInfo.getInstance().avatar,\n      fit: BoxFit.cover,\n    );\n\n    Container avatar = Container(\n      margin: <span class=\"hljs-keyword\">const</span> EdgeInsets.fromLTRB(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>),\n      child: Container(\n        width: <span class=\"hljs-number\">60</span>,\n        height: <span class=\"hljs-number\">60</span>,\n        decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(<span class=\"hljs-number\">30</span>),\n          boxShadow: [\n            BoxShadow(\n                color: Colors.black,\n                offset: Offset(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>),\n                blurRadius: <span class=\"hljs-number\">1</span>,\n                spreadRadius: <span class=\"hljs-number\">2</span>)\n          ],\n          image: DecorationImage(\n            image: NetworkImage(ProfileInfo.getInstance().avatar),\n            fit: BoxFit.cover,\n          ),\n        ),\n      ),\n    );\n\n    Container nameTxt = Container(\n      margin: EdgeInsets.fromLTRB(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>),\n      child: Text(ProfileInfo.getInstance().mobile),\n    );\n    Container department = Container(\n      margin: EdgeInsets.fromLTRB(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>),\n      child: Text(ProfileInfo.getInstance().department),\n    );\n    Container txtView = Container(\n      margin: EdgeInsets.fromLTRB(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">25</span>),\n      child: Column(\n        children: &lt;Widget&gt;[nameTxt, department],\n        crossAxisAlignment: CrossAxisAlignment.start,\n      ),\n    );\n    <span class=\"hljs-keyword\">return</span> Row(\n      children: &lt;Widget&gt;[\n        avatar,\n        Expanded(\n          child: txtView,\n        )\n      ],\n    );\n  &#125;\n</code></pre>\n<h3 id=\"32-交互事件\"><a class=\"markdownIt-Anchor\" href=\"#32-交互事件\"></a> 3.2 交互事件</h3>\n<p>1 Button 事件点击</p>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) &#123;\n    <span class=\"hljs-keyword\">return</span> Scaffold(\n      body: Container(\n        decoration: BoxDecoration(color: Colors.grey[<span class=\"hljs-number\">200</span>]),\n        padding: EdgeInsets.all(<span class=\"hljs-number\">0</span>),\n        child: Container(\n          color: Colors.white,\n          child: Center(child: OutlineButton(child: Text(<span class=\"hljs-string\">'个人信息'</span>),onPressed: getProfile,),),\n        ), \n     ),\n    );\n  &#125;\n</code></pre>\n<p>2 下拉刷新、上拉加载</p>\n<pre class=\"highlight\"><code class=\"dart\">Widget setPannel() &#123;\n    <span class=\"hljs-keyword\">return</span> RefreshIndicator(\n      child: ListView.builder(\n        itemBuilder: _renderRow,\n        itemCount: list.length + <span class=\"hljs-number\">1</span>,\n        controller: _scrollController,\n      ),\n      onRefresh: _onRefresh,\n    );\n  &#125;\n</code></pre>\n<h2 id=\"4-业务\"><a class=\"markdownIt-Anchor\" href=\"#4-业务\"></a> 4、业务</h2>\n<h3 id=\"41-网络模块\"><a class=\"markdownIt-Anchor\" href=\"#41-网络模块\"></a> 4.1 网络模块</h3>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NetworkTools</span> </span>&#123;\n  <span class=\"hljs-keyword\">static</span> Future <span class=\"hljs-keyword\">get</span>(<span class=\"hljs-built_in\">String</span> url, [<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">dynamic</span>&gt; params]) <span class=\"hljs-keyword\">async</span> &#123;\n    <span class=\"hljs-keyword\">var</span> response;\n    Directory documentsDir = <span class=\"hljs-keyword\">await</span> getApplicationDocumentsDirectory();\n    <span class=\"hljs-built_in\">String</span> documentsPath = documentsDir.path;\n    <span class=\"hljs-keyword\">var</span> dir = <span class=\"hljs-keyword\">new</span> Directory(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$documentsPath</span>/cookies\"</span>);\n    <span class=\"hljs-keyword\">await</span> dir.create();\n    dio.interceptors.add(CookieManager(PersistCookieJar(dir: dir.path)));\n    dio.interceptors.add(TokenInterceptor());\n    <span class=\"hljs-keyword\">if</span> (params != <span class=\"hljs-keyword\">null</span>) &#123;\n      response = <span class=\"hljs-keyword\">await</span> dio.<span class=\"hljs-keyword\">get</span>(url, queryParameters: params);\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      response = <span class=\"hljs-keyword\">await</span> dio.<span class=\"hljs-keyword\">get</span>(url);\n    &#125;\n    <span class=\"hljs-keyword\">return</span> response.data;\n  &#125;\n\n  <span class=\"hljs-keyword\">static</span> Future post(<span class=\"hljs-built_in\">String</span> url, <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">dynamic</span>&gt; params) <span class=\"hljs-keyword\">async</span> &#123;\n    <span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-keyword\">await</span> dio.post(url, data: params);\n    <span class=\"hljs-keyword\">return</span> response.data;\n  &#125;\n\n  <span class=\"hljs-keyword\">static</span> Future delete(<span class=\"hljs-built_in\">String</span> url, <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">dynamic</span>&gt; params) <span class=\"hljs-keyword\">async</span> &#123;\n    dio.interceptors.add(TokenInterceptor());\n    <span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-keyword\">await</span> dio.delete(url, data: params);\n    <span class=\"hljs-keyword\">return</span> response.statusCode;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"42-数据\"><a class=\"markdownIt-Anchor\" href=\"#42-数据\"></a> 4.2 数据</h3>\n<p>1 序列化</p>\n<pre class=\"highlight\"><code class=\"dart\">\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Token</span> </span>&#123;\n  <span class=\"hljs-built_in\">String</span> token;\n\n  <span class=\"hljs-built_in\">int</span> expired;\n\n  <span class=\"hljs-built_in\">int</span> refreshTime;\n\n  Token(&#123;<span class=\"hljs-keyword\">this</span>.token,<span class=\"hljs-keyword\">this</span>.expired,<span class=\"hljs-keyword\">this</span>.refreshTime&#125;)&#123;_instance = <span class=\"hljs-keyword\">this</span>;&#125;\n\n  Token._();\n\n  <span class=\"hljs-keyword\">static</span> Token _instance;\n\n  <span class=\"hljs-keyword\">static</span> Token getInstance() &#123;\n    <span class=\"hljs-keyword\">if</span> (_instance == <span class=\"hljs-keyword\">null</span>) &#123;\n      _instance = Token._();\n    &#125;\n    <span class=\"hljs-keyword\">return</span> _instance;\n  &#125;\n\n  <span class=\"hljs-keyword\">factory</span> Token.fromJson(<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">dynamic</span>&gt; json)&#123;\n    <span class=\"hljs-keyword\">return</span> Token(\n      token: json[<span class=\"hljs-string\">'token'</span>],\n      expired: json[<span class=\"hljs-string\">'expired_at'</span>],\n      refreshTime: json[<span class=\"hljs-string\">'refresh_expired_at'</span>]\n    );\n  &#125;\n&#125;\n\n<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">dynamic</span>&gt; toJson() =&gt;\n    &#123;\n      <span class=\"hljs-string\">'token'</span>: token,\n      <span class=\"hljs-string\">'expired_at'</span>: expired,\n      <span class=\"hljs-string\">'refresh_expired_at'</span>:refreshTime\n    &#125;;\n</code></pre>\n<p>2 自动序列化</p>\n<p>配置：</p>\n<pre class=\"highlight\"><code class=\"yaml\"><span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-comment\"># Your other regular dependencies here</span>\n  <span class=\"hljs-attr\">json_annotation:</span> <span class=\"hljs-string\">^2.0.0</span>\n\n<span class=\"hljs-attr\">dev_dependencies:</span>\n  <span class=\"hljs-comment\"># Your other dev_dependencies here</span>\n  <span class=\"hljs-attr\">build_runner:</span> <span class=\"hljs-string\">^1.0.0</span>\n  <span class=\"hljs-attr\">json_serializable:</span> <span class=\"hljs-string\">^2.0.0</span>\n</code></pre>\n<p>代码：</p>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:json_annotation/json_annotation.dart'</span>;\n\n<span class=\"hljs-keyword\">part</span> <span class=\"hljs-string\">'RelaxtionsLog.g.dart'</span>;\n\n<span class=\"hljs-meta\">@JsonSerializable</span>()\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RelaxtionsLog</span> </span>&#123;\n  <span class=\"hljs-built_in\">int</span> id;\n\n  <span class=\"hljs-meta\">@JsonKey</span>(name: <span class=\"hljs-string\">'watch_times'</span>)\n  <span class=\"hljs-built_in\">int</span> times;\n\n  <span class=\"hljs-meta\">@JsonKey</span>(name: <span class=\"hljs-string\">'total_watch_length'</span>)\n  <span class=\"hljs-built_in\">int</span> length;\n\n  <span class=\"hljs-built_in\">String</span> name;\n\n  RelaxtionsLog(&#123;\n    <span class=\"hljs-keyword\">this</span>.id,\n    <span class=\"hljs-keyword\">this</span>.times,\n    <span class=\"hljs-keyword\">this</span>.length,\n    <span class=\"hljs-keyword\">this</span>.name\n  &#125;);\n\n  <span class=\"hljs-keyword\">factory</span> RelaxtionsLog.fromJson(<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">dynamic</span>&gt; json) =&gt; _$RelaxtionsLogFromJson(json);\n\n  <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">dynamic</span>&gt; toJson() =&gt; _$RelaxtionsLogToJson(<span class=\"hljs-keyword\">this</span>);\n\n&#125;\n</code></pre>\n<p>3 持久化：数据库、归档、UserDefault等</p>\n<ol>\n<li><a href=\"https://pub.dev/packages/firebase_database#-readme-tab-\">FireBase</a></li>\n<li><a href=\"https://pub.dev/packages/sqflite\">sqflite</a></li>\n<li>SharedPreferences =&gt; UserDefault</li>\n</ol>\n<h2 id=\"5-包组件化\"><a class=\"markdownIt-Anchor\" href=\"#5-包组件化\"></a> 5、包[组件化]</h2>\n<h3 id=\"51-创建dart-package库\"><a class=\"markdownIt-Anchor\" href=\"#51-创建dart-package库\"></a> 5.1 创建Dart package库</h3>\n<pre class=\"highlight\"><code class=\"shell\"> flutter create --org com.example --template=plugin hello --创建项目\n flutter pub pub publish --dry-run  --检查配置\n flutter pub pub publish   --发布package\n</code></pre>\n<h3 id=\"52-提交package\"><a class=\"markdownIt-Anchor\" href=\"#52-提交package\"></a> 5.2 提交package</h3>\n<pre class=\"highlight\"><code class=\"shell\">flutter pub pub publish --dry-run\nflutter pub pub publish\n</code></pre>\n<ul>\n<li>package 依赖</li>\n</ul>\n<pre class=\"highlight\"><code class=\"yaml\"><span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-attr\">url_launcher:</span> <span class=\"hljs-string\">^0.4.2</span>\n</code></pre>\n<ul>\n<li>原生平台依赖</li>\n</ul>\n<pre class=\"highlight\"><code class=\"ruby\">Pod::Spec.new <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|s|</span>\n  <span class=\"hljs-comment\"># lines skipped</span>\n  s.dependency <span class=\"hljs-string\">'url_launcher'</span>\n</code></pre>\n<ul>\n<li><a href=\"./Resources/\">自建私有 package 仓库</a></li>\n</ul>\n<h2 id=\"6-平台通道\"><a class=\"markdownIt-Anchor\" href=\"#6-平台通道\"></a> 6、平台通道</h2>\n<h3 id=\"61-简单通道\"><a class=\"markdownIt-Anchor\" href=\"#61-简单通道\"></a> 6.1 简单通道</h3>\n<ol>\n<li>获取相册图片</li>\n</ol>\n<pre class=\"highlight\"><code class=\"swift\"><span class=\"hljs-keyword\">let</span> controller:<span class=\"hljs-type\">FlutterViewController</span> = window?.rootViewController <span class=\"hljs-keyword\">as</span>! <span class=\"hljs-type\">FlutterViewController</span>\n<span class=\"hljs-keyword\">let</span> batteryChannel =  <span class=\"hljs-type\">FlutterMethodChannel</span>(name: <span class=\"hljs-type\">RyImagePicker</span>.channel, binaryMessenger: controller.binaryMessenger)\nbatteryChannel.setMethodCallHandler &#123; (call, result) <span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-keyword\">if</span> call.method == <span class=\"hljs-string\">\"pickerImage\"</span> &#123;\n        <span class=\"hljs-type\">RyImagePicker</span>(controller).showImagePicker &#123; (image) <span class=\"hljs-keyword\">in</span>\n            result(image)\n        &#125;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        result(<span class=\"hljs-type\">FlutterMethodNotImplemented</span>);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"62-flutter编解码器\"><a class=\"markdownIt-Anchor\" href=\"#62-flutter编解码器\"></a> 6.2 Flutter编解码器</h3>\n<p>1 Flutter定义了三种不同类型的Channel，它们分别是：</p>\n<ul>\n<li>BasicMessageChannel：用于传递字符串和半结构化的信息。</li>\n<li>BMethodChannel：用于传递方法调用（method invocation）。</li>\n<li>BEventChannel: 用于数据流（event streams）的通信。</li>\n</ul>\n<p>三种Channel之间互相独立，各有用途，但它们在设计上却非常相近。每种Channel均有三个重要成员变量：</p>\n<ul>\n<li>name: String类型，代表Channel的名字，也是其唯一标识符。</li>\n<li>messager：BinaryMessenger类型，代表消息信使，是消息的发送与接收的工具。</li>\n<li>codec: MessageCodec类型或MethodCodec类型，代表消息的编解码器。</li>\n</ul>\n<p>消息通道结构图6-2-1：<br />\n<img src=\"./Resources/BinaryMessenger.jpg\" alt=\"消息通道结构图\" /></p>\n<p>编解码器结构图6-2-2:<br />\n<img src=\"./Resources/Codec.jpg\" alt=\"编解码器结构图\" /></p>\n<p>2 消息解码</p>\n<p>支持的平台数据类型参考：<code>StandardMessageCodec</code><br />\n<img src=\"./Resources/type.jpg\" alt=\"消息解码器\" /></p>\n<p>3.1 消息传递：Dart -&gt; Native</p>\n<p><img src=\"./Resources/message-dart-native.jpg\" alt=\"消息传递\" /></p>\n<p>3.2 消息传递：Native -&gt; Dart</p>\n<p><img src=\"./Resources/message-native-dart.jpg\" alt=\"消息传递\" /></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"flutter-技术可行性调研\"><a class=\"markdownIt-Anchor\" href=\"#flutter-技术可行性调研\"></a> Flutter 技术可行性调研</h1>\n<h2 id=\"1-项目构建\"><a class=\"markdownIt-Anchor\" href=\"#1-项目构建\"></a> 1、项目构建</h2>\n<h3 id=\"11-环境配置\"><a class=\"markdownIt-Anchor\" href=\"#11-环境配置\"></a> 1.1 <a href=\"https://flutter-io.cn/docs/get-started/install\">环境配置</a></h3>\n<h4 id=\"1-编辑器\"><a class=\"markdownIt-Anchor\" href=\"#1-编辑器\"></a> 1. 编辑器</h4>\n<ol>\n<li>Android Studio[Intelij]</li>\n<li>Visual Studio Code</li>\n</ol>\n<h4 id=\"2-sdk\"><a class=\"markdownIt-Anchor\" href=\"#2-sdk\"></a> 2. SDK</h4>\n<ol>\n<li>Dart</li>\n<li>Flutter</li>\n</ol>\n<h3 id=\"12-创建并运行项目\"><a class=\"markdownIt-Anchor\" href=\"#12-创建并运行项目\"></a> 1.2 创建并运行项目</h3>\n<h4 id=\"1-终端\"><a class=\"markdownIt-Anchor\" href=\"#1-终端\"></a> 1. 终端</h4>\n<pre class=\"highlight\"><code class=\"shell\">  flutter create my_app\n  cd my_app\n  flutter run\n</code></pre>\n<h4 id=\"2-android-studio\"><a class=\"markdownIt-Anchor\" href=\"#2-android-studio\"></a> 2. Android Studio</h4>\n<h4 id=\"3-visual-studio-code\"><a class=\"markdownIt-Anchor\" href=\"#3-visual-studio-code\"></a> 3. Visual Studio Code</h4>\n<h2 id=\"2-项目工程结构\"><a class=\"markdownIt-Anchor\" href=\"#2-项目工程结构\"></a> 2、项目工程结构</h2>\n<h3 id=\"21-项目文件组织结构\"><a class=\"markdownIt-Anchor\" href=\"#21-项目文件组织结构\"></a> 2.1 项目文件组织结构</h3>\n<p><img src=\"./Resources/Projects.png\" alt=\"项目工程结构\" /></p>\n<h3 id=\"22-源码文件组织-使用\"><a class=\"markdownIt-Anchor\" href=\"#22-源码文件组织-使用\"></a> 2.2 源码文件组织、使用</h3>\n<p>1 项目库管理、第三方库</p>\n<pre class=\"highlight\"><code class=\"yml\"><span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-attr\">flutter:</span>\n    <span class=\"hljs-attr\">sdk:</span> <span class=\"hljs-string\">flutter</span>\n  <span class=\"hljs-attr\">flutter_localizations:</span>\n    <span class=\"hljs-attr\">sdk:</span> <span class=\"hljs-string\">flutter</span>\n\n  <span class=\"hljs-attr\">cupertino_icons:</span> <span class=\"hljs-string\">^0.1.2</span>\n  <span class=\"hljs-attr\">english_words:</span> <span class=\"hljs-string\">^3.1.0</span>\n  <span class=\"hljs-attr\">video_player:</span> <span class=\"hljs-string\">^0.10.1+6</span>\n  <span class=\"hljs-attr\">dio:</span> <span class=\"hljs-string\">^2.1.16</span>\n  <span class=\"hljs-attr\">path_provider:</span> <span class=\"hljs-string\">^1.1.0</span>\n  <span class=\"hljs-attr\">image_picker:</span> <span class=\"hljs-string\">^0.6.1+4</span>\n  <span class=\"hljs-attr\">webview_flutter:</span> <span class=\"hljs-string\">^0.3.13</span>\n  <span class=\"hljs-attr\">intl:</span> <span class=\"hljs-string\">^0.15.8</span>\n  <span class=\"hljs-attr\">url_launcher:</span> <span class=\"hljs-string\">^5.1.2</span>\n  <span class=\"hljs-attr\">package_info:</span> <span class=\"hljs-string\">^0.4.0+6</span>\n  <span class=\"hljs-attr\">fluwx:</span> <span class=\"hljs-string\">^1.0.4</span>\n  <span class=\"hljs-attr\">json_annotation:</span> <span class=\"hljs-string\">^3.0.0</span>\n  <span class=\"hljs-attr\">device_info:</span> <span class=\"hljs-string\">^0.4.0+2</span>\n\n<span class=\"hljs-attr\">dev_dependencies:</span>\n  <span class=\"hljs-attr\">flutter_test:</span>\n    <span class=\"hljs-attr\">sdk:</span> <span class=\"hljs-string\">flutter</span>\n  <span class=\"hljs-attr\">intl_translation:</span> <span class=\"hljs-string\">^0.17.2</span>\n  <span class=\"hljs-attr\">json_serializable:</span> <span class=\"hljs-string\">^3.2.2</span>\n  <span class=\"hljs-attr\">build_runner:</span> <span class=\"hljs-string\">^1.6.7</span>\n</code></pre>\n<p>2 核心库、源码文件</p>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'dart:io'</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/services.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:image_picker/image_picker.dart'</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'../Profile/Models/ProfileInfo.dart'</span>;\n</code></pre>\n<p>3 功能模块、组件功能划分，独立管理，以及自定义组件化工作管理</p>\n<p><img src=\"./Resources/files-module.png\" alt=\"文件目录\" /></p>\n<h3 id=\"23-资源文件\"><a class=\"markdownIt-Anchor\" href=\"#23-资源文件\"></a> 2.3、资源文件</h3>\n<h4 id=\"1-引用\"><a class=\"markdownIt-Anchor\" href=\"#1-引用\"></a> 1 引用</h4>\n<pre class=\"highlight\"><code class=\"yaml\"><span class=\"hljs-attr\">flutter:</span>\n  <span class=\"hljs-attr\">assets:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">assets/my_icon.png</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">assets/background.png</span>\n</code></pre>\n<h4 id=\"2-加载\"><a class=\"markdownIt-Anchor\" href=\"#2-加载\"></a> 2 加载</h4>\n<h5 id=\"21-bundel\"><a class=\"markdownIt-Anchor\" href=\"#21-bundel\"></a> 2.1. Bundel</h5>\n<pre class=\"highlight\"><code class=\"dart\">AssetBundle;\nrootBundle;\nDefaultAssetBundle;\n资源变体：根据分辨率加载图片等资源；\nAssetImage;\n</code></pre>\n<h5 id=\"2-依赖包中的资源\"><a class=\"markdownIt-Anchor\" href=\"#2-依赖包中的资源\"></a> 2. 依赖包中的资源</h5>\n<pre class=\"highlight\"><code class=\"dart\">AssetImage(<span class=\"hljs-string\">'icons/heart.png'</span>, package: <span class=\"hljs-string\">'my_icons'</span>)\n</code></pre>\n<h4 id=\"3-打包资源进asset\"><a class=\"markdownIt-Anchor\" href=\"#3-打包资源进asset\"></a> 3 打包资源进asset</h4>\n<pre class=\"highlight\"><code class=\"yaml\"><span class=\"hljs-attr\">flutter:</span>\n  <span class=\"hljs-attr\">assets:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">packages/fancy_backgrounds/backgrounds/background1.png</span>\n</code></pre>\n<h4 id=\"4-资源平台共享\"><a class=\"markdownIt-Anchor\" href=\"#4-资源平台共享\"></a> 4 资源平台共享</h4>\n<ul>\n<li>Android</li>\n</ul>\n<pre class=\"highlight\"><code class=\"Java\">AssetManager assetManager = registrar.context().getAssets();\nString key = registrar.lookupKeyForAsset(<span class=\"hljs-string\">\"icons/heart.png\"</span>);\nAssetFileDescriptor fd = assetManager.openFd(key);\n</code></pre>\n<ul>\n<li>iOS</li>\n</ul>\n<pre class=\"highlight\"><code class=\"Objective-C\">NSString* key = [registrar lookupKeyForAsset:@&quot;icons/heart.png&quot;];\nNSString* path = [[NSBundle mainBundle] pathForResource:key ofType:nil];\n</code></pre>\n<h4 id=\"5-平台资源\"><a class=\"markdownIt-Anchor\" href=\"#5-平台资源\"></a> 5 平台资源</h4>\n<blockquote>\n<p>Android 与 iOS 的icon 、启动图配置；</p>\n</blockquote>\n<h3 id=\"24-项目源码简单解析\"><a class=\"markdownIt-Anchor\" href=\"#24-项目源码简单解析\"></a> 2.4、项目源码简单解析</h3>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>&#123;\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) &#123;\n    <span class=\"hljs-keyword\">return</span> MaterialApp(\n      title: <span class=\"hljs-string\">'Flutter SuMian'</span>,\n      onGenerateTitle: (BuildContext context) =&gt;\n          RyLocalizations.of(context).title,\n      home: RyTabBar(),\n      theme: ThemeData(\n        primaryColor: Colors.white,\n      ),\n      debugShowCheckedModeBanner: <span class=\"hljs-keyword\">false</span>,\n      showSemanticsDebugger: <span class=\"hljs-keyword\">false</span>,\n      localizationsDelegates: [\n        <span class=\"hljs-keyword\">const</span> RyLocalizationsDelegate(),\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        GlobalCupertinoLocalizations.delegate,\n      ],\n      supportedLocales: [\n        <span class=\"hljs-keyword\">const</span> Locale(<span class=\"hljs-string\">'en'</span>),\n        <span class=\"hljs-keyword\">const</span> Locale(<span class=\"hljs-string\">'zh'</span>),\n      ],\n    );\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-界面\"><a class=\"markdownIt-Anchor\" href=\"#3-界面\"></a> 3、界面</h2>\n<h3 id=\"31-布局介绍\"><a class=\"markdownIt-Anchor\" href=\"#31-布局介绍\"></a> 3.1 <a href=\"https://flutter-io.cn/docs/development/ui/widgets/layout\">布局介绍</a></h3>\n<pre class=\"highlight\"><code class=\"dart\">Widget listHead() &#123;\n    _avatarImg = Image.network(\n      ProfileInfo.getInstance().avatar,\n      fit: BoxFit.cover,\n    );\n\n    Container avatar = Container(\n      margin: <span class=\"hljs-keyword\">const</span> EdgeInsets.fromLTRB(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>),\n      child: Container(\n        width: <span class=\"hljs-number\">60</span>,\n        height: <span class=\"hljs-number\">60</span>,\n        decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(<span class=\"hljs-number\">30</span>),\n          boxShadow: [\n            BoxShadow(\n                color: Colors.black,\n                offset: Offset(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>),\n                blurRadius: <span class=\"hljs-number\">1</span>,\n                spreadRadius: <span class=\"hljs-number\">2</span>)\n          ],\n          image: DecorationImage(\n            image: NetworkImage(ProfileInfo.getInstance().avatar),\n            fit: BoxFit.cover,\n          ),\n        ),\n      ),\n    );\n\n    Container nameTxt = Container(\n      margin: EdgeInsets.fromLTRB(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>),\n      child: Text(ProfileInfo.getInstance().mobile),\n    );\n    Container department = Container(\n      margin: EdgeInsets.fromLTRB(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>),\n      child: Text(ProfileInfo.getInstance().department),\n    );\n    Container txtView = Container(\n      margin: EdgeInsets.fromLTRB(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">25</span>),\n      child: Column(\n        children: &lt;Widget&gt;[nameTxt, department],\n        crossAxisAlignment: CrossAxisAlignment.start,\n      ),\n    );\n    <span class=\"hljs-keyword\">return</span> Row(\n      children: &lt;Widget&gt;[\n        avatar,\n        Expanded(\n          child: txtView,\n        )\n      ],\n    );\n  &#125;\n</code></pre>\n<h3 id=\"32-交互事件\"><a class=\"markdownIt-Anchor\" href=\"#32-交互事件\"></a> 3.2 交互事件</h3>\n<p>1 Button 事件点击</p>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) &#123;\n    <span class=\"hljs-keyword\">return</span> Scaffold(\n      body: Container(\n        decoration: BoxDecoration(color: Colors.grey[<span class=\"hljs-number\">200</span>]),\n        padding: EdgeInsets.all(<span class=\"hljs-number\">0</span>),\n        child: Container(\n          color: Colors.white,\n          child: Center(child: OutlineButton(child: Text(<span class=\"hljs-string\">'个人信息'</span>),onPressed: getProfile,),),\n        ), \n     ),\n    );\n  &#125;\n</code></pre>\n<p>2 下拉刷新、上拉加载</p>\n<pre class=\"highlight\"><code class=\"dart\">Widget setPannel() &#123;\n    <span class=\"hljs-keyword\">return</span> RefreshIndicator(\n      child: ListView.builder(\n        itemBuilder: _renderRow,\n        itemCount: list.length + <span class=\"hljs-number\">1</span>,\n        controller: _scrollController,\n      ),\n      onRefresh: _onRefresh,\n    );\n  &#125;\n</code></pre>\n<h2 id=\"4-业务\"><a class=\"markdownIt-Anchor\" href=\"#4-业务\"></a> 4、业务</h2>\n<h3 id=\"41-网络模块\"><a class=\"markdownIt-Anchor\" href=\"#41-网络模块\"></a> 4.1 网络模块</h3>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NetworkTools</span> </span>&#123;\n  <span class=\"hljs-keyword\">static</span> Future <span class=\"hljs-keyword\">get</span>(<span class=\"hljs-built_in\">String</span> url, [<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">dynamic</span>&gt; params]) <span class=\"hljs-keyword\">async</span> &#123;\n    <span class=\"hljs-keyword\">var</span> response;\n    Directory documentsDir = <span class=\"hljs-keyword\">await</span> getApplicationDocumentsDirectory();\n    <span class=\"hljs-built_in\">String</span> documentsPath = documentsDir.path;\n    <span class=\"hljs-keyword\">var</span> dir = <span class=\"hljs-keyword\">new</span> Directory(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">$documentsPath</span>/cookies\"</span>);\n    <span class=\"hljs-keyword\">await</span> dir.create();\n    dio.interceptors.add(CookieManager(PersistCookieJar(dir: dir.path)));\n    dio.interceptors.add(TokenInterceptor());\n    <span class=\"hljs-keyword\">if</span> (params != <span class=\"hljs-keyword\">null</span>) &#123;\n      response = <span class=\"hljs-keyword\">await</span> dio.<span class=\"hljs-keyword\">get</span>(url, queryParameters: params);\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      response = <span class=\"hljs-keyword\">await</span> dio.<span class=\"hljs-keyword\">get</span>(url);\n    &#125;\n    <span class=\"hljs-keyword\">return</span> response.data;\n  &#125;\n\n  <span class=\"hljs-keyword\">static</span> Future post(<span class=\"hljs-built_in\">String</span> url, <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">dynamic</span>&gt; params) <span class=\"hljs-keyword\">async</span> &#123;\n    <span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-keyword\">await</span> dio.post(url, data: params);\n    <span class=\"hljs-keyword\">return</span> response.data;\n  &#125;\n\n  <span class=\"hljs-keyword\">static</span> Future delete(<span class=\"hljs-built_in\">String</span> url, <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">dynamic</span>&gt; params) <span class=\"hljs-keyword\">async</span> &#123;\n    dio.interceptors.add(TokenInterceptor());\n    <span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-keyword\">await</span> dio.delete(url, data: params);\n    <span class=\"hljs-keyword\">return</span> response.statusCode;\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"42-数据\"><a class=\"markdownIt-Anchor\" href=\"#42-数据\"></a> 4.2 数据</h3>\n<p>1 序列化</p>\n<pre class=\"highlight\"><code class=\"dart\">\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Token</span> </span>&#123;\n  <span class=\"hljs-built_in\">String</span> token;\n\n  <span class=\"hljs-built_in\">int</span> expired;\n\n  <span class=\"hljs-built_in\">int</span> refreshTime;\n\n  Token(&#123;<span class=\"hljs-keyword\">this</span>.token,<span class=\"hljs-keyword\">this</span>.expired,<span class=\"hljs-keyword\">this</span>.refreshTime&#125;)&#123;_instance = <span class=\"hljs-keyword\">this</span>;&#125;\n\n  Token._();\n\n  <span class=\"hljs-keyword\">static</span> Token _instance;\n\n  <span class=\"hljs-keyword\">static</span> Token getInstance() &#123;\n    <span class=\"hljs-keyword\">if</span> (_instance == <span class=\"hljs-keyword\">null</span>) &#123;\n      _instance = Token._();\n    &#125;\n    <span class=\"hljs-keyword\">return</span> _instance;\n  &#125;\n\n  <span class=\"hljs-keyword\">factory</span> Token.fromJson(<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">dynamic</span>&gt; json)&#123;\n    <span class=\"hljs-keyword\">return</span> Token(\n      token: json[<span class=\"hljs-string\">'token'</span>],\n      expired: json[<span class=\"hljs-string\">'expired_at'</span>],\n      refreshTime: json[<span class=\"hljs-string\">'refresh_expired_at'</span>]\n    );\n  &#125;\n&#125;\n\n<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">dynamic</span>&gt; toJson() =&gt;\n    &#123;\n      <span class=\"hljs-string\">'token'</span>: token,\n      <span class=\"hljs-string\">'expired_at'</span>: expired,\n      <span class=\"hljs-string\">'refresh_expired_at'</span>:refreshTime\n    &#125;;\n</code></pre>\n<p>2 自动序列化</p>\n<p>配置：</p>\n<pre class=\"highlight\"><code class=\"yaml\"><span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-comment\"># Your other regular dependencies here</span>\n  <span class=\"hljs-attr\">json_annotation:</span> <span class=\"hljs-string\">^2.0.0</span>\n\n<span class=\"hljs-attr\">dev_dependencies:</span>\n  <span class=\"hljs-comment\"># Your other dev_dependencies here</span>\n  <span class=\"hljs-attr\">build_runner:</span> <span class=\"hljs-string\">^1.0.0</span>\n  <span class=\"hljs-attr\">json_serializable:</span> <span class=\"hljs-string\">^2.0.0</span>\n</code></pre>\n<p>代码：</p>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:json_annotation/json_annotation.dart'</span>;\n\n<span class=\"hljs-keyword\">part</span> <span class=\"hljs-string\">'RelaxtionsLog.g.dart'</span>;\n\n<span class=\"hljs-meta\">@JsonSerializable</span>()\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RelaxtionsLog</span> </span>&#123;\n  <span class=\"hljs-built_in\">int</span> id;\n\n  <span class=\"hljs-meta\">@JsonKey</span>(name: <span class=\"hljs-string\">'watch_times'</span>)\n  <span class=\"hljs-built_in\">int</span> times;\n\n  <span class=\"hljs-meta\">@JsonKey</span>(name: <span class=\"hljs-string\">'total_watch_length'</span>)\n  <span class=\"hljs-built_in\">int</span> length;\n\n  <span class=\"hljs-built_in\">String</span> name;\n\n  RelaxtionsLog(&#123;\n    <span class=\"hljs-keyword\">this</span>.id,\n    <span class=\"hljs-keyword\">this</span>.times,\n    <span class=\"hljs-keyword\">this</span>.length,\n    <span class=\"hljs-keyword\">this</span>.name\n  &#125;);\n\n  <span class=\"hljs-keyword\">factory</span> RelaxtionsLog.fromJson(<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">dynamic</span>&gt; json) =&gt; _$RelaxtionsLogFromJson(json);\n\n  <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">dynamic</span>&gt; toJson() =&gt; _$RelaxtionsLogToJson(<span class=\"hljs-keyword\">this</span>);\n\n&#125;\n</code></pre>\n<p>3 持久化：数据库、归档、UserDefault等</p>\n<ol>\n<li><a href=\"https://pub.dev/packages/firebase_database#-readme-tab-\">FireBase</a></li>\n<li><a href=\"https://pub.dev/packages/sqflite\">sqflite</a></li>\n<li>SharedPreferences =&gt; UserDefault</li>\n</ol>\n<h2 id=\"5-包组件化\"><a class=\"markdownIt-Anchor\" href=\"#5-包组件化\"></a> 5、包[组件化]</h2>\n<h3 id=\"51-创建dart-package库\"><a class=\"markdownIt-Anchor\" href=\"#51-创建dart-package库\"></a> 5.1 创建Dart package库</h3>\n<pre class=\"highlight\"><code class=\"shell\"> flutter create --org com.example --template=plugin hello --创建项目\n flutter pub pub publish --dry-run  --检查配置\n flutter pub pub publish   --发布package\n</code></pre>\n<h3 id=\"52-提交package\"><a class=\"markdownIt-Anchor\" href=\"#52-提交package\"></a> 5.2 提交package</h3>\n<pre class=\"highlight\"><code class=\"shell\">flutter pub pub publish --dry-run\nflutter pub pub publish\n</code></pre>\n<ul>\n<li>package 依赖</li>\n</ul>\n<pre class=\"highlight\"><code class=\"yaml\"><span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-attr\">url_launcher:</span> <span class=\"hljs-string\">^0.4.2</span>\n</code></pre>\n<ul>\n<li>原生平台依赖</li>\n</ul>\n<pre class=\"highlight\"><code class=\"ruby\">Pod::Spec.new <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|s|</span>\n  <span class=\"hljs-comment\"># lines skipped</span>\n  s.dependency <span class=\"hljs-string\">'url_launcher'</span>\n</code></pre>\n<ul>\n<li><a href=\"./Resources/\">自建私有 package 仓库</a></li>\n</ul>\n<h2 id=\"6-平台通道\"><a class=\"markdownIt-Anchor\" href=\"#6-平台通道\"></a> 6、平台通道</h2>\n<h3 id=\"61-简单通道\"><a class=\"markdownIt-Anchor\" href=\"#61-简单通道\"></a> 6.1 简单通道</h3>\n<ol>\n<li>获取相册图片</li>\n</ol>\n<pre class=\"highlight\"><code class=\"swift\"><span class=\"hljs-keyword\">let</span> controller:<span class=\"hljs-type\">FlutterViewController</span> = window?.rootViewController <span class=\"hljs-keyword\">as</span>! <span class=\"hljs-type\">FlutterViewController</span>\n<span class=\"hljs-keyword\">let</span> batteryChannel =  <span class=\"hljs-type\">FlutterMethodChannel</span>(name: <span class=\"hljs-type\">RyImagePicker</span>.channel, binaryMessenger: controller.binaryMessenger)\nbatteryChannel.setMethodCallHandler &#123; (call, result) <span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-keyword\">if</span> call.method == <span class=\"hljs-string\">\"pickerImage\"</span> &#123;\n        <span class=\"hljs-type\">RyImagePicker</span>(controller).showImagePicker &#123; (image) <span class=\"hljs-keyword\">in</span>\n            result(image)\n        &#125;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        result(<span class=\"hljs-type\">FlutterMethodNotImplemented</span>);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"62-flutter编解码器\"><a class=\"markdownIt-Anchor\" href=\"#62-flutter编解码器\"></a> 6.2 Flutter编解码器</h3>\n<p>1 Flutter定义了三种不同类型的Channel，它们分别是：</p>\n<ul>\n<li>BasicMessageChannel：用于传递字符串和半结构化的信息。</li>\n<li>BMethodChannel：用于传递方法调用（method invocation）。</li>\n<li>BEventChannel: 用于数据流（event streams）的通信。</li>\n</ul>\n<p>三种Channel之间互相独立，各有用途，但它们在设计上却非常相近。每种Channel均有三个重要成员变量：</p>\n<ul>\n<li>name: String类型，代表Channel的名字，也是其唯一标识符。</li>\n<li>messager：BinaryMessenger类型，代表消息信使，是消息的发送与接收的工具。</li>\n<li>codec: MessageCodec类型或MethodCodec类型，代表消息的编解码器。</li>\n</ul>\n<p>消息通道结构图6-2-1：<br />\n<img src=\"./Resources/BinaryMessenger.jpg\" alt=\"消息通道结构图\" /></p>\n<p>编解码器结构图6-2-2:<br />\n<img src=\"./Resources/Codec.jpg\" alt=\"编解码器结构图\" /></p>\n<p>2 消息解码</p>\n<p>支持的平台数据类型参考：<code>StandardMessageCodec</code><br />\n<img src=\"./Resources/type.jpg\" alt=\"消息解码器\" /></p>\n<p>3.1 消息传递：Dart -&gt; Native</p>\n<p><img src=\"./Resources/message-dart-native.jpg\" alt=\"消息传递\" /></p>\n<p>3.2 消息传递：Native -&gt; Dart</p>\n<p><img src=\"./Resources/message-native-dart.jpg\" alt=\"消息传递\" /></p>\n"},{"_content":"# WWDC2019\n\nBundle Resources\n\nSwift UI\n\nPencilKit\n\nRealityKit\n\nBackgroundTasks\n\nCombine\n\nQuickLookThumbnailing\n\nCore Audio Types\n\nCore Haptics\n\nSoundAnalysis\n\nVisionKit\n\nMaps Web Snapshots\n\nLinkPresentation\n\nAPPle CryptoKit\n\nIOUSBHost\n\nLogging\n\nMetricKit\n\nNetWorkingDriveKit\n\nDriveKit\n\nOSLog\n\nEndpointSecurity\n\nExecutionPolicy\n\nSystemExtensions\n\nUSBDriverKit\n\nHIDDriverKit\n","source":"_posts/学习笔记/iOS/WWDC/WWDC2019.md","raw":"# WWDC2019\n\nBundle Resources\n\nSwift UI\n\nPencilKit\n\nRealityKit\n\nBackgroundTasks\n\nCombine\n\nQuickLookThumbnailing\n\nCore Audio Types\n\nCore Haptics\n\nSoundAnalysis\n\nVisionKit\n\nMaps Web Snapshots\n\nLinkPresentation\n\nAPPle CryptoKit\n\nIOUSBHost\n\nLogging\n\nMetricKit\n\nNetWorkingDriveKit\n\nDriveKit\n\nOSLog\n\nEndpointSecurity\n\nExecutionPolicy\n\nSystemExtensions\n\nUSBDriverKit\n\nHIDDriverKit\n","slug":"学习笔记/iOS/WWDC/WWDC2019","published":1,"date":"2021-04-09T13:04:02.199Z","updated":"2021-04-09T13:04:02.201Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thk001rw37u41b11bcs","content":"<h1 id=\"wwdc2019\"><a class=\"markdownIt-Anchor\" href=\"#wwdc2019\"></a> WWDC2019</h1>\n<p>Bundle Resources</p>\n<p>Swift UI</p>\n<p>PencilKit</p>\n<p>RealityKit</p>\n<p>BackgroundTasks</p>\n<p>Combine</p>\n<p>QuickLookThumbnailing</p>\n<p>Core Audio Types</p>\n<p>Core Haptics</p>\n<p>SoundAnalysis</p>\n<p>VisionKit</p>\n<p>Maps Web Snapshots</p>\n<p>LinkPresentation</p>\n<p>APPle CryptoKit</p>\n<p>IOUSBHost</p>\n<p>Logging</p>\n<p>MetricKit</p>\n<p>NetWorkingDriveKit</p>\n<p>DriveKit</p>\n<p>OSLog</p>\n<p>EndpointSecurity</p>\n<p>ExecutionPolicy</p>\n<p>SystemExtensions</p>\n<p>USBDriverKit</p>\n<p>HIDDriverKit</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"wwdc2019\"><a class=\"markdownIt-Anchor\" href=\"#wwdc2019\"></a> WWDC2019</h1>\n<p>Bundle Resources</p>\n<p>Swift UI</p>\n<p>PencilKit</p>\n<p>RealityKit</p>\n<p>BackgroundTasks</p>\n<p>Combine</p>\n<p>QuickLookThumbnailing</p>\n<p>Core Audio Types</p>\n<p>Core Haptics</p>\n<p>SoundAnalysis</p>\n<p>VisionKit</p>\n<p>Maps Web Snapshots</p>\n<p>LinkPresentation</p>\n<p>APPle CryptoKit</p>\n<p>IOUSBHost</p>\n<p>Logging</p>\n<p>MetricKit</p>\n<p>NetWorkingDriveKit</p>\n<p>DriveKit</p>\n<p>OSLog</p>\n<p>EndpointSecurity</p>\n<p>ExecutionPolicy</p>\n<p>SystemExtensions</p>\n<p>USBDriverKit</p>\n<p>HIDDriverKit</p>\n"},{"_content":"OpenGL\n\nGPUimage\n\nOpenCV","source":"_posts/学习笔记/iOS/iOS之多媒体/iOS之图片.md","raw":"OpenGL\n\nGPUimage\n\nOpenCV","slug":"学习笔记/iOS/iOS之多媒体/iOS之图片","published":1,"date":"2021-02-24T12:31:09.183Z","updated":"2021-02-24T12:31:09.183Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thk001sw37uao644p0f","content":"<p>OpenGL</p>\n<p>GPUimage</p>\n<p>OpenCV</p>\n","site":{"data":{}},"excerpt":"","more":"<p>OpenGL</p>\n<p>GPUimage</p>\n<p>OpenCV</p>\n"},{"_content":"# JavaScript\n\n## [正则表达式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions)\n","source":"_posts/学习笔记/iOS/iOS之大前端/JavaScript.md","raw":"# JavaScript\n\n## [正则表达式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions)\n","slug":"学习笔记/iOS/iOS之大前端/JavaScript","published":1,"date":"2021-04-09T13:04:02.239Z","updated":"2021-04-09T13:04:02.239Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thl001tw37u6bdnb15u","content":"<h1 id=\"javascript\"><a class=\"markdownIt-Anchor\" href=\"#javascript\"></a> JavaScript</h1>\n<h2 id=\"正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式\"></a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">正则表达式</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"javascript\"><a class=\"markdownIt-Anchor\" href=\"#javascript\"></a> JavaScript</h1>\n<h2 id=\"正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式\"></a> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">正则表达式</a></h2>\n"},{"_content":"# JSPatch原理\n\n## 1. [JSPatch](https://github.com/bang590/JSPatch)\n\n## 2. [JSPatch 基础用法](https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95)\n\n## 3. [JSPatch 文档](https://github.com/bang590/JSPatch/wiki)\n\n## 4. [JSPatch 实现原理详解](https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3)\n","source":"_posts/学习笔记/iOS/iOS之大前端/JSPatch原理.md","raw":"# JSPatch原理\n\n## 1. [JSPatch](https://github.com/bang590/JSPatch)\n\n## 2. [JSPatch 基础用法](https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95)\n\n## 3. [JSPatch 文档](https://github.com/bang590/JSPatch/wiki)\n\n## 4. [JSPatch 实现原理详解](https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3)\n","slug":"学习笔记/iOS/iOS之大前端/JSPatch原理","published":1,"date":"2021-04-09T13:04:02.202Z","updated":"2021-04-09T13:04:02.202Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thm001uw37udk0x72l2","content":"<h1 id=\"jspatch原理\"><a class=\"markdownIt-Anchor\" href=\"#jspatch原理\"></a> JSPatch原理</h1>\n<h2 id=\"1-jspatch\"><a class=\"markdownIt-Anchor\" href=\"#1-jspatch\"></a> 1. <a href=\"https://github.com/bang590/JSPatch\">JSPatch</a></h2>\n<h2 id=\"2-jspatch-基础用法\"><a class=\"markdownIt-Anchor\" href=\"#2-jspatch-基础用法\"></a> 2. <a href=\"https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95\">JSPatch 基础用法</a></h2>\n<h2 id=\"3-jspatch-文档\"><a class=\"markdownIt-Anchor\" href=\"#3-jspatch-文档\"></a> 3. <a href=\"https://github.com/bang590/JSPatch/wiki\">JSPatch 文档</a></h2>\n<h2 id=\"4-jspatch-实现原理详解\"><a class=\"markdownIt-Anchor\" href=\"#4-jspatch-实现原理详解\"></a> 4. <a href=\"https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3\">JSPatch 实现原理详解</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"jspatch原理\"><a class=\"markdownIt-Anchor\" href=\"#jspatch原理\"></a> JSPatch原理</h1>\n<h2 id=\"1-jspatch\"><a class=\"markdownIt-Anchor\" href=\"#1-jspatch\"></a> 1. <a href=\"https://github.com/bang590/JSPatch\">JSPatch</a></h2>\n<h2 id=\"2-jspatch-基础用法\"><a class=\"markdownIt-Anchor\" href=\"#2-jspatch-基础用法\"></a> 2. <a href=\"https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95\">JSPatch 基础用法</a></h2>\n<h2 id=\"3-jspatch-文档\"><a class=\"markdownIt-Anchor\" href=\"#3-jspatch-文档\"></a> 3. <a href=\"https://github.com/bang590/JSPatch/wiki\">JSPatch 文档</a></h2>\n<h2 id=\"4-jspatch-实现原理详解\"><a class=\"markdownIt-Anchor\" href=\"#4-jspatch-实现原理详解\"></a> 4. <a href=\"https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3\">JSPatch 实现原理详解</a></h2>\n"},{"_content":"# 移动端跨端技术及原理\n\n## 1. [JS-Native 通信技术](https://mp.weixin.qq.com/s/_Xo6O3NoE1z9AIMJm_uSsA)\n\n## 1.1 postMessage （iOS WKWebview）\n\n这种方式是在 iOS 中处理消息非常方便，但是在 Android 中并不支持。\n\nweb 端发送消息:\n\n```javaScript\nwindow.webkit.messageHandlers.SYJSBridge.postMessage(msg);\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)userContentController:(WKUserContentController *)uc\ndidReceiveScriptMessage:(WKScriptMessage *)message\n{\n    // 处理消息\n}\n```\n\n## 1.2 prompt（iOS、Android、WebView）\n\n巧用 webview 的弹窗，弹窗内容定义消息体。\n\nweb 端发送消息：\n\n```javascript\nwindow.prompt(msg);\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)webView:(WKWebView *)webView \nrunJavaScriptTextInputPanelWithPrompt:(NSString *)prompt \ndefaultText:(NSString *)defaultText \ninitiatedByFrame:(WKFrameInfo *)frame \ncompletionHandler:(void (^)(NSString *))completionHandler\n{\n    completionHandler(@\"OC input\");\n}\n```\n\n## 1.3 iframe（iOS、Android、WebView）\n\n创建一个隐形的 iframe，Native 侧会收到一个请求，可以通过请求地址来做一个处理，达到通信的目的。\n\nweb 端发送消息：\n\n```javascript\nconst callIframe = function(url) {\n  var iframe = document.createElement('iframe');\n  iframe.src = url;\n  document.body.appendChild(iframe);\n  document.body.removeChild(iframe);\n}\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)webView:(WKWebView *)webView\ndecidePolicyForNavigationAction:(WKNavigationAction *)na \ndecisionHandler:(void (^)(WKNavigationActionPolicy))h {\n    NSLog(@\"%@\", NSStringFromSelector(_cmd));\n    decisionHandler(WKNavigationActionPolicyAllow);\n}\n```\n\n## 1.4 注入 JS\n\n  这种方式主要通过 webview 提供的 API 向 JavaScript 执行引擎中注入 JavaScript 代码。下面的代码在页面加载时注入了一个 add 函数，这个函数被挂载到了 window 下，在网页中可直接调用。\n\niOS 端实现：\n\n```objective-c\nWKUserScript *script = [[WKUserScript alloc] \ninitWithSource:@\"function add(a, b) { return a + b; }\"\ninjectionTime:WKUserScriptInjectionTimeAtDocumentStart \nforMainFrameOnly:YES];\n[webview.configuration.userContentController addUserScript:script];\n```\n\n### 1.5 location.href （iOS、Android、WebView）\n\n这种方式和 1.3 方法类似，不过需要对做通信 API 的路由做拦截处理，否则会跳转到新的页面。\n\nweb 端发送消息：\n\n```javascript\nwindow.location.href = url;\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)webView:(WKWebView *)webView \ndecidePolicyForNavigationAction:(WKNavigationAction *)na \ndecisionHandler:(void (^)(WKNavigationActionPolicy))d {\n    NSLog(@\"%@\", NSStringFromSelector(_cmd));\n    if ([na.request.URL.absoluteString containsString:@\"suyan\"]) {\n        d(WKNavigationActionPolicyCancel);\n    }\n    else {\n        d(WKNavigationActionPolicyAllow);\n    }\n}\n```\n\n### 1.6 addJavaScriptInterface （Android、WebView）\n\n把一个 Java 对象注入到 JavaScript 执行环境当中，使得在 webivew 中可直接调用该方法，间接调用 Native 方法。\n\n## 2. 常见跨端方案\n\n### 2.1 React-Native & WeeX\n\n#### 2.1.1 [React-Native](https://www.react-native.cn/docs/getting-started)\n\n#### 2.1.2 [WeeX](https://weex.apache.org/zh/docs/api/weex-variable.html)\n\n#### 2.1.3 [Hippy](https://github.com/Tencent/Hippy/blob/master/README.zh_CN.md)\n\n### 2.2 [Flutter](https://flutterchina.club/docs/)\n\n### 2.3 [JavaScriptCore](https://trac.webkit.org/wiki/JavaScriptCore)\n\n#### 2.3.1 [iOS 版](https://developer.apple.com/documentation/javascriptcore)\n\n### 2.4 [JSPatch](https://github.com/bang590/JSPatch/wiki)\n\n### 2.5 [WKWebViewBridgeHandler](https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md)\n\n### 2.6 [Capacitor](https://capacitorjs.com/docs/v3)\n\n#### 2.6.1 [cordova](https://capacitorjs.com/docs/v3/cordova)\n\n#### 2.6.2 [PhoneGap](https://github.com/phonegap)\n\n##### 2.6.2.1 参考资料\n\n1. [PhoneGap 手机 Web 应用开发平台](https://www.oschina.net/p/phonegap?hmsr=aladdin1e1)\n\n#### 2.6.3 [Ionic](https://ionicframework.com/docs)\n\n### 2.7 [DCloud](https://ask.dcloud.net.cn/docs/)\n\n### 2.8 [Xamarin](https://docs.microsoft.com/zh-cn/xamarin/)\n\n### 2.9 PWA & 轻应用 & 小程序 等\n\n#### 2.9.1 [PWA](https://capacitorjs.com/docs/v3/web)  \n\n#### 2.9.2 [轻应用](https://uniapp.dcloud.io/history)\n\n### 2.10 [QT](https://doc.qt.io/qt-6/mobiledevelopment.html)\n\n轻应用、流应用\n\n### 2.9.3 小程序\n\n#### 1. [微信小程序](https://developers.weixin.qq.com/miniprogram/dev/framework/)\n\n#### 2. [uni-app](https://uniapp.dcloud.io/)\n\n小程序联盟\n\n## 3. 源码解读\n\n### 3.1 源码阅读\n\n### 3.1.1 [JSPatch](https://github.com/bang590/JSPatch/wiki)\n\n### 3.1.2 [WKWebViewBridgeHandler]\n\n1. [WKWebViewBridgeHandler](https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md)\n\n2. [iOS系列之WebViewJavascriptBridge源码分析](http://www.zyiner.com/article/3)\n\n库结构图、使用的通信技术、通讯方式\n\n### 3.2 推荐阅读博客\n\n* 戴明的[深入剖析 JavaScriptCore](https://ming1016.github.io/2018/04/21/deeply-analyse-javascriptcore/)\n* 戴明的[深入剖析 JavaScript 编译器/解释器引擎 QuickJS](https://ming1016.github.io/2021/02/21/deeply-analyse-quickjs/)\n* 戴明的[深入剖析 WebKit](https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/)\n\n## 4. 跨端常讨论的问题\n\n### 4.1 性能\n\n### 4.2 交互体验\n\n### 4.3 社区（基础建筑）完备性\n\n### 4.4 未来前景探讨\n\n### 4.4.1 [为什么说现在 React Native 凉了？](https://www.zhihu.com/question/266630840/answer/312188874)\n\n### 4.4.2 [Flutter 正在被悄悄放弃吗？](https://mp.weixin.qq.com/s/hDjbMSPNz_D5JeEBMEJZCA)\n\n### 4.4.3 [Flutter 2 正式发布！](https://mp.weixin.qq.com/s/tJe2ScLgKWFTybpBtDl2TA)\n\n### 4.5 人力/资源节省\n\n## 5. 其他 Mobile Web 技术/方案\n\n### 5.1 [VasSonic](https://github.com/Tencent/VasSonic/wiki)\n\n## 6. 期待\n\n### 6.1 [鸿蒙](https://developer.harmonyos.com/cn/documentation)\n\n### 6.2 统一\n\n1. 有一个统一的、通用的系统；\n2. 有一门流行的统一的[元]语言：有处理前后端、脚本、硬件的能力；\n3. 计算机行业基础、设计、开放标准；\n\n* 网络协议就是个很好的概念\n","source":"_posts/学习笔记/iOS/iOS之大前端/跨端.md","raw":"# 移动端跨端技术及原理\n\n## 1. [JS-Native 通信技术](https://mp.weixin.qq.com/s/_Xo6O3NoE1z9AIMJm_uSsA)\n\n## 1.1 postMessage （iOS WKWebview）\n\n这种方式是在 iOS 中处理消息非常方便，但是在 Android 中并不支持。\n\nweb 端发送消息:\n\n```javaScript\nwindow.webkit.messageHandlers.SYJSBridge.postMessage(msg);\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)userContentController:(WKUserContentController *)uc\ndidReceiveScriptMessage:(WKScriptMessage *)message\n{\n    // 处理消息\n}\n```\n\n## 1.2 prompt（iOS、Android、WebView）\n\n巧用 webview 的弹窗，弹窗内容定义消息体。\n\nweb 端发送消息：\n\n```javascript\nwindow.prompt(msg);\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)webView:(WKWebView *)webView \nrunJavaScriptTextInputPanelWithPrompt:(NSString *)prompt \ndefaultText:(NSString *)defaultText \ninitiatedByFrame:(WKFrameInfo *)frame \ncompletionHandler:(void (^)(NSString *))completionHandler\n{\n    completionHandler(@\"OC input\");\n}\n```\n\n## 1.3 iframe（iOS、Android、WebView）\n\n创建一个隐形的 iframe，Native 侧会收到一个请求，可以通过请求地址来做一个处理，达到通信的目的。\n\nweb 端发送消息：\n\n```javascript\nconst callIframe = function(url) {\n  var iframe = document.createElement('iframe');\n  iframe.src = url;\n  document.body.appendChild(iframe);\n  document.body.removeChild(iframe);\n}\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)webView:(WKWebView *)webView\ndecidePolicyForNavigationAction:(WKNavigationAction *)na \ndecisionHandler:(void (^)(WKNavigationActionPolicy))h {\n    NSLog(@\"%@\", NSStringFromSelector(_cmd));\n    decisionHandler(WKNavigationActionPolicyAllow);\n}\n```\n\n## 1.4 注入 JS\n\n  这种方式主要通过 webview 提供的 API 向 JavaScript 执行引擎中注入 JavaScript 代码。下面的代码在页面加载时注入了一个 add 函数，这个函数被挂载到了 window 下，在网页中可直接调用。\n\niOS 端实现：\n\n```objective-c\nWKUserScript *script = [[WKUserScript alloc] \ninitWithSource:@\"function add(a, b) { return a + b; }\"\ninjectionTime:WKUserScriptInjectionTimeAtDocumentStart \nforMainFrameOnly:YES];\n[webview.configuration.userContentController addUserScript:script];\n```\n\n### 1.5 location.href （iOS、Android、WebView）\n\n这种方式和 1.3 方法类似，不过需要对做通信 API 的路由做拦截处理，否则会跳转到新的页面。\n\nweb 端发送消息：\n\n```javascript\nwindow.location.href = url;\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)webView:(WKWebView *)webView \ndecidePolicyForNavigationAction:(WKNavigationAction *)na \ndecisionHandler:(void (^)(WKNavigationActionPolicy))d {\n    NSLog(@\"%@\", NSStringFromSelector(_cmd));\n    if ([na.request.URL.absoluteString containsString:@\"suyan\"]) {\n        d(WKNavigationActionPolicyCancel);\n    }\n    else {\n        d(WKNavigationActionPolicyAllow);\n    }\n}\n```\n\n### 1.6 addJavaScriptInterface （Android、WebView）\n\n把一个 Java 对象注入到 JavaScript 执行环境当中，使得在 webivew 中可直接调用该方法，间接调用 Native 方法。\n\n## 2. 常见跨端方案\n\n### 2.1 React-Native & WeeX\n\n#### 2.1.1 [React-Native](https://www.react-native.cn/docs/getting-started)\n\n#### 2.1.2 [WeeX](https://weex.apache.org/zh/docs/api/weex-variable.html)\n\n#### 2.1.3 [Hippy](https://github.com/Tencent/Hippy/blob/master/README.zh_CN.md)\n\n### 2.2 [Flutter](https://flutterchina.club/docs/)\n\n### 2.3 [JavaScriptCore](https://trac.webkit.org/wiki/JavaScriptCore)\n\n#### 2.3.1 [iOS 版](https://developer.apple.com/documentation/javascriptcore)\n\n### 2.4 [JSPatch](https://github.com/bang590/JSPatch/wiki)\n\n### 2.5 [WKWebViewBridgeHandler](https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md)\n\n### 2.6 [Capacitor](https://capacitorjs.com/docs/v3)\n\n#### 2.6.1 [cordova](https://capacitorjs.com/docs/v3/cordova)\n\n#### 2.6.2 [PhoneGap](https://github.com/phonegap)\n\n##### 2.6.2.1 参考资料\n\n1. [PhoneGap 手机 Web 应用开发平台](https://www.oschina.net/p/phonegap?hmsr=aladdin1e1)\n\n#### 2.6.3 [Ionic](https://ionicframework.com/docs)\n\n### 2.7 [DCloud](https://ask.dcloud.net.cn/docs/)\n\n### 2.8 [Xamarin](https://docs.microsoft.com/zh-cn/xamarin/)\n\n### 2.9 PWA & 轻应用 & 小程序 等\n\n#### 2.9.1 [PWA](https://capacitorjs.com/docs/v3/web)  \n\n#### 2.9.2 [轻应用](https://uniapp.dcloud.io/history)\n\n### 2.10 [QT](https://doc.qt.io/qt-6/mobiledevelopment.html)\n\n轻应用、流应用\n\n### 2.9.3 小程序\n\n#### 1. [微信小程序](https://developers.weixin.qq.com/miniprogram/dev/framework/)\n\n#### 2. [uni-app](https://uniapp.dcloud.io/)\n\n小程序联盟\n\n## 3. 源码解读\n\n### 3.1 源码阅读\n\n### 3.1.1 [JSPatch](https://github.com/bang590/JSPatch/wiki)\n\n### 3.1.2 [WKWebViewBridgeHandler]\n\n1. [WKWebViewBridgeHandler](https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md)\n\n2. [iOS系列之WebViewJavascriptBridge源码分析](http://www.zyiner.com/article/3)\n\n库结构图、使用的通信技术、通讯方式\n\n### 3.2 推荐阅读博客\n\n* 戴明的[深入剖析 JavaScriptCore](https://ming1016.github.io/2018/04/21/deeply-analyse-javascriptcore/)\n* 戴明的[深入剖析 JavaScript 编译器/解释器引擎 QuickJS](https://ming1016.github.io/2021/02/21/deeply-analyse-quickjs/)\n* 戴明的[深入剖析 WebKit](https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/)\n\n## 4. 跨端常讨论的问题\n\n### 4.1 性能\n\n### 4.2 交互体验\n\n### 4.3 社区（基础建筑）完备性\n\n### 4.4 未来前景探讨\n\n### 4.4.1 [为什么说现在 React Native 凉了？](https://www.zhihu.com/question/266630840/answer/312188874)\n\n### 4.4.2 [Flutter 正在被悄悄放弃吗？](https://mp.weixin.qq.com/s/hDjbMSPNz_D5JeEBMEJZCA)\n\n### 4.4.3 [Flutter 2 正式发布！](https://mp.weixin.qq.com/s/tJe2ScLgKWFTybpBtDl2TA)\n\n### 4.5 人力/资源节省\n\n## 5. 其他 Mobile Web 技术/方案\n\n### 5.1 [VasSonic](https://github.com/Tencent/VasSonic/wiki)\n\n## 6. 期待\n\n### 6.1 [鸿蒙](https://developer.harmonyos.com/cn/documentation)\n\n### 6.2 统一\n\n1. 有一个统一的、通用的系统；\n2. 有一门流行的统一的[元]语言：有处理前后端、脚本、硬件的能力；\n3. 计算机行业基础、设计、开放标准；\n\n* 网络协议就是个很好的概念\n","slug":"学习笔记/iOS/iOS之大前端/跨端","published":1,"date":"2021-04-09T13:04:02.237Z","updated":"2021-04-09T13:04:02.237Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thn001vw37u1cnl9r8z","content":"<h1 id=\"移动端跨端技术及原理\"><a class=\"markdownIt-Anchor\" href=\"#移动端跨端技术及原理\"></a> 移动端跨端技术及原理</h1>\n<h2 id=\"1-js-native-通信技术\"><a class=\"markdownIt-Anchor\" href=\"#1-js-native-通信技术\"></a> 1. <a href=\"https://mp.weixin.qq.com/s/_Xo6O3NoE1z9AIMJm_uSsA\">JS-Native 通信技术</a></h2>\n<h2 id=\"11-postmessage-ios-wkwebview\"><a class=\"markdownIt-Anchor\" href=\"#11-postmessage-ios-wkwebview\"></a> 1.1 postMessage （iOS WKWebview）</h2>\n<p>这种方式是在 iOS 中处理消息非常方便，但是在 Android 中并不支持。</p>\n<p>web 端发送消息:</p>\n<pre class=\"highlight\"><code class=\"javaScript\"><span class=\"hljs-built_in\">window</span>.webkit.messageHandlers.SYJSBridge.postMessage(msg);\n</code></pre>\n<p>iOS 端接受消息：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">- (void)userContentController:(WKUserContentController *)uc\ndidReceiveScriptMessage:(WKScriptMessage *)message\n&#123;\n    // 处理消息\n&#125;\n</code></pre>\n<h2 id=\"12-promptios-android-webview\"><a class=\"markdownIt-Anchor\" href=\"#12-promptios-android-webview\"></a> 1.2 prompt（iOS、Android、WebView）</h2>\n<p>巧用 webview 的弹窗，弹窗内容定义消息体。</p>\n<p>web 端发送消息：</p>\n<pre class=\"highlight\"><code class=\"javascript\"><span class=\"hljs-built_in\">window</span>.prompt(msg);\n</code></pre>\n<p>iOS 端接受消息：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">- (void)webView:(WKWebView *)webView \nrunJavaScriptTextInputPanelWithPrompt:(NSString *)prompt \ndefaultText:(NSString *)defaultText \ninitiatedByFrame:(WKFrameInfo *)frame \ncompletionHandler:(void (^)(NSString *))completionHandler\n&#123;\n    completionHandler(@&quot;OC input&quot;);\n&#125;\n</code></pre>\n<h2 id=\"13-iframeios-android-webview\"><a class=\"markdownIt-Anchor\" href=\"#13-iframeios-android-webview\"></a> 1.3 iframe（iOS、Android、WebView）</h2>\n<p>创建一个隐形的 iframe，Native 侧会收到一个请求，可以通过请求地址来做一个处理，达到通信的目的。</p>\n<p>web 端发送消息：</p>\n<pre class=\"highlight\"><code class=\"javascript\"><span class=\"hljs-keyword\">const</span> callIframe = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">url</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> iframe = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'iframe'</span>);\n  iframe.src = url;\n  <span class=\"hljs-built_in\">document</span>.body.appendChild(iframe);\n  <span class=\"hljs-built_in\">document</span>.body.removeChild(iframe);\n&#125;\n</code></pre>\n<p>iOS 端接受消息：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">- (void)webView:(WKWebView *)webView\ndecidePolicyForNavigationAction:(WKNavigationAction *)na \ndecisionHandler:(void (^)(WKNavigationActionPolicy))h &#123;\n    NSLog(@&quot;%@&quot;, NSStringFromSelector(_cmd));\n    decisionHandler(WKNavigationActionPolicyAllow);\n&#125;\n</code></pre>\n<h2 id=\"14-注入-js\"><a class=\"markdownIt-Anchor\" href=\"#14-注入-js\"></a> 1.4 注入 JS</h2>\n<p>这种方式主要通过 webview 提供的 API 向 JavaScript 执行引擎中注入 JavaScript 代码。下面的代码在页面加载时注入了一个 add 函数，这个函数被挂载到了 window 下，在网页中可直接调用。</p>\n<p>iOS 端实现：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">WKUserScript *script = [[WKUserScript alloc] \ninitWithSource:@&quot;function add(a, b) &#123; return a + b; &#125;&quot;\ninjectionTime:WKUserScriptInjectionTimeAtDocumentStart \nforMainFrameOnly:YES];\n[webview.configuration.userContentController addUserScript:script];\n</code></pre>\n<h3 id=\"15-locationhref-ios-android-webview\"><a class=\"markdownIt-Anchor\" href=\"#15-locationhref-ios-android-webview\"></a> 1.5 location.href （iOS、Android、WebView）</h3>\n<p>这种方式和 1.3 方法类似，不过需要对做通信 API 的路由做拦截处理，否则会跳转到新的页面。</p>\n<p>web 端发送消息：</p>\n<pre class=\"highlight\"><code class=\"javascript\"><span class=\"hljs-built_in\">window</span>.location.href = url;\n</code></pre>\n<p>iOS 端接受消息：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">- (void)webView:(WKWebView *)webView \ndecidePolicyForNavigationAction:(WKNavigationAction *)na \ndecisionHandler:(void (^)(WKNavigationActionPolicy))d &#123;\n    NSLog(@&quot;%@&quot;, NSStringFromSelector(_cmd));\n    if ([na.request.URL.absoluteString containsString:@&quot;suyan&quot;]) &#123;\n        d(WKNavigationActionPolicyCancel);\n    &#125;\n    else &#123;\n        d(WKNavigationActionPolicyAllow);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"16-addjavascriptinterface-android-webview\"><a class=\"markdownIt-Anchor\" href=\"#16-addjavascriptinterface-android-webview\"></a> 1.6 addJavaScriptInterface （Android、WebView）</h3>\n<p>把一个 Java 对象注入到 JavaScript 执行环境当中，使得在 webivew 中可直接调用该方法，间接调用 Native 方法。</p>\n<h2 id=\"2-常见跨端方案\"><a class=\"markdownIt-Anchor\" href=\"#2-常见跨端方案\"></a> 2. 常见跨端方案</h2>\n<h3 id=\"21-react-native-weex\"><a class=\"markdownIt-Anchor\" href=\"#21-react-native-weex\"></a> 2.1 React-Native &amp; WeeX</h3>\n<h4 id=\"211-react-native\"><a class=\"markdownIt-Anchor\" href=\"#211-react-native\"></a> 2.1.1 <a href=\"https://www.react-native.cn/docs/getting-started\">React-Native</a></h4>\n<h4 id=\"212-weex\"><a class=\"markdownIt-Anchor\" href=\"#212-weex\"></a> 2.1.2 <a href=\"https://weex.apache.org/zh/docs/api/weex-variable.html\">WeeX</a></h4>\n<h4 id=\"213-hippy\"><a class=\"markdownIt-Anchor\" href=\"#213-hippy\"></a> 2.1.3 <a href=\"https://github.com/Tencent/Hippy/blob/master/README.zh_CN.md\">Hippy</a></h4>\n<h3 id=\"22-flutter\"><a class=\"markdownIt-Anchor\" href=\"#22-flutter\"></a> 2.2 <a href=\"https://flutterchina.club/docs/\">Flutter</a></h3>\n<h3 id=\"23-javascriptcore\"><a class=\"markdownIt-Anchor\" href=\"#23-javascriptcore\"></a> 2.3 <a href=\"https://trac.webkit.org/wiki/JavaScriptCore\">JavaScriptCore</a></h3>\n<h4 id=\"231-ios-版\"><a class=\"markdownIt-Anchor\" href=\"#231-ios-版\"></a> 2.3.1 <a href=\"https://developer.apple.com/documentation/javascriptcore\">iOS 版</a></h4>\n<h3 id=\"24-jspatch\"><a class=\"markdownIt-Anchor\" href=\"#24-jspatch\"></a> 2.4 <a href=\"https://github.com/bang590/JSPatch/wiki\">JSPatch</a></h3>\n<h3 id=\"25-wkwebviewbridgehandler\"><a class=\"markdownIt-Anchor\" href=\"#25-wkwebviewbridgehandler\"></a> 2.5 <a href=\"https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md\">WKWebViewBridgeHandler</a></h3>\n<h3 id=\"26-capacitor\"><a class=\"markdownIt-Anchor\" href=\"#26-capacitor\"></a> 2.6 <a href=\"https://capacitorjs.com/docs/v3\">Capacitor</a></h3>\n<h4 id=\"261-cordova\"><a class=\"markdownIt-Anchor\" href=\"#261-cordova\"></a> 2.6.1 <a href=\"https://capacitorjs.com/docs/v3/cordova\">cordova</a></h4>\n<h4 id=\"262-phonegap\"><a class=\"markdownIt-Anchor\" href=\"#262-phonegap\"></a> 2.6.2 <a href=\"https://github.com/phonegap\">PhoneGap</a></h4>\n<h5 id=\"2621-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#2621-参考资料\"></a> 2.6.2.1 参考资料</h5>\n<ol>\n<li><a href=\"https://www.oschina.net/p/phonegap?hmsr=aladdin1e1\">PhoneGap 手机 Web 应用开发平台</a></li>\n</ol>\n<h4 id=\"263-ionic\"><a class=\"markdownIt-Anchor\" href=\"#263-ionic\"></a> 2.6.3 <a href=\"https://ionicframework.com/docs\">Ionic</a></h4>\n<h3 id=\"27-dcloud\"><a class=\"markdownIt-Anchor\" href=\"#27-dcloud\"></a> 2.7 <a href=\"https://ask.dcloud.net.cn/docs/\">DCloud</a></h3>\n<h3 id=\"28-xamarin\"><a class=\"markdownIt-Anchor\" href=\"#28-xamarin\"></a> 2.8 <a href=\"https://docs.microsoft.com/zh-cn/xamarin/\">Xamarin</a></h3>\n<h3 id=\"29-pwa-轻应用-小程序-等\"><a class=\"markdownIt-Anchor\" href=\"#29-pwa-轻应用-小程序-等\"></a> 2.9 PWA &amp; 轻应用 &amp; 小程序 等</h3>\n<h4 id=\"291-pwa\"><a class=\"markdownIt-Anchor\" href=\"#291-pwa\"></a> 2.9.1 <a href=\"https://capacitorjs.com/docs/v3/web\">PWA</a></h4>\n<h4 id=\"292-轻应用\"><a class=\"markdownIt-Anchor\" href=\"#292-轻应用\"></a> 2.9.2 <a href=\"https://uniapp.dcloud.io/history\">轻应用</a></h4>\n<h3 id=\"210-qt\"><a class=\"markdownIt-Anchor\" href=\"#210-qt\"></a> 2.10 <a href=\"https://doc.qt.io/qt-6/mobiledevelopment.html\">QT</a></h3>\n<p>轻应用、流应用</p>\n<h3 id=\"293-小程序\"><a class=\"markdownIt-Anchor\" href=\"#293-小程序\"></a> 2.9.3 小程序</h3>\n<h4 id=\"1-微信小程序\"><a class=\"markdownIt-Anchor\" href=\"#1-微信小程序\"></a> 1. <a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/\">微信小程序</a></h4>\n<h4 id=\"2-uni-app\"><a class=\"markdownIt-Anchor\" href=\"#2-uni-app\"></a> 2. <a href=\"https://uniapp.dcloud.io/\">uni-app</a></h4>\n<p>小程序联盟</p>\n<h2 id=\"3-源码解读\"><a class=\"markdownIt-Anchor\" href=\"#3-源码解读\"></a> 3. 源码解读</h2>\n<h3 id=\"31-源码阅读\"><a class=\"markdownIt-Anchor\" href=\"#31-源码阅读\"></a> 3.1 源码阅读</h3>\n<h3 id=\"311-jspatch\"><a class=\"markdownIt-Anchor\" href=\"#311-jspatch\"></a> 3.1.1 <a href=\"https://github.com/bang590/JSPatch/wiki\">JSPatch</a></h3>\n<h3 id=\"312-wkwebviewbridgehandler\"><a class=\"markdownIt-Anchor\" href=\"#312-wkwebviewbridgehandler\"></a> 3.1.2 [WKWebViewBridgeHandler]</h3>\n<ol>\n<li>\n<p><a href=\"https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md\">WKWebViewBridgeHandler</a></p>\n</li>\n<li>\n<p><a href=\"http://www.zyiner.com/article/3\">iOS系列之WebViewJavascriptBridge源码分析</a></p>\n</li>\n</ol>\n<p>库结构图、使用的通信技术、通讯方式</p>\n<h3 id=\"32-推荐阅读博客\"><a class=\"markdownIt-Anchor\" href=\"#32-推荐阅读博客\"></a> 3.2 推荐阅读博客</h3>\n<ul>\n<li>戴明的<a href=\"https://ming1016.github.io/2018/04/21/deeply-analyse-javascriptcore/\">深入剖析 JavaScriptCore</a></li>\n<li>戴明的<a href=\"https://ming1016.github.io/2021/02/21/deeply-analyse-quickjs/\">深入剖析 JavaScript 编译器/解释器引擎 QuickJS</a></li>\n<li>戴明的<a href=\"https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/\">深入剖析 WebKit</a></li>\n</ul>\n<h2 id=\"4-跨端常讨论的问题\"><a class=\"markdownIt-Anchor\" href=\"#4-跨端常讨论的问题\"></a> 4. 跨端常讨论的问题</h2>\n<h3 id=\"41-性能\"><a class=\"markdownIt-Anchor\" href=\"#41-性能\"></a> 4.1 性能</h3>\n<h3 id=\"42-交互体验\"><a class=\"markdownIt-Anchor\" href=\"#42-交互体验\"></a> 4.2 交互体验</h3>\n<h3 id=\"43-社区基础建筑完备性\"><a class=\"markdownIt-Anchor\" href=\"#43-社区基础建筑完备性\"></a> 4.3 社区（基础建筑）完备性</h3>\n<h3 id=\"44-未来前景探讨\"><a class=\"markdownIt-Anchor\" href=\"#44-未来前景探讨\"></a> 4.4 未来前景探讨</h3>\n<h3 id=\"441-为什么说现在-react-native-凉了\"><a class=\"markdownIt-Anchor\" href=\"#441-为什么说现在-react-native-凉了\"></a> 4.4.1 <a href=\"https://www.zhihu.com/question/266630840/answer/312188874\">为什么说现在 React Native 凉了？</a></h3>\n<h3 id=\"442-flutter-正在被悄悄放弃吗\"><a class=\"markdownIt-Anchor\" href=\"#442-flutter-正在被悄悄放弃吗\"></a> 4.4.2 <a href=\"https://mp.weixin.qq.com/s/hDjbMSPNz_D5JeEBMEJZCA\">Flutter 正在被悄悄放弃吗？</a></h3>\n<h3 id=\"443-flutter-2-正式发布\"><a class=\"markdownIt-Anchor\" href=\"#443-flutter-2-正式发布\"></a> 4.4.3 <a href=\"https://mp.weixin.qq.com/s/tJe2ScLgKWFTybpBtDl2TA\">Flutter 2 正式发布！</a></h3>\n<h3 id=\"45-人力资源节省\"><a class=\"markdownIt-Anchor\" href=\"#45-人力资源节省\"></a> 4.5 人力/资源节省</h3>\n<h2 id=\"5-其他-mobile-web-技术方案\"><a class=\"markdownIt-Anchor\" href=\"#5-其他-mobile-web-技术方案\"></a> 5. 其他 Mobile Web 技术/方案</h2>\n<h3 id=\"51-vassonic\"><a class=\"markdownIt-Anchor\" href=\"#51-vassonic\"></a> 5.1 <a href=\"https://github.com/Tencent/VasSonic/wiki\">VasSonic</a></h3>\n<h2 id=\"6-期待\"><a class=\"markdownIt-Anchor\" href=\"#6-期待\"></a> 6. 期待</h2>\n<h3 id=\"61-鸿蒙\"><a class=\"markdownIt-Anchor\" href=\"#61-鸿蒙\"></a> 6.1 <a href=\"https://developer.harmonyos.com/cn/documentation\">鸿蒙</a></h3>\n<h3 id=\"62-统一\"><a class=\"markdownIt-Anchor\" href=\"#62-统一\"></a> 6.2 统一</h3>\n<ol>\n<li>有一个统一的、通用的系统；</li>\n<li>有一门流行的统一的[元]语言：有处理前后端、脚本、硬件的能力；</li>\n<li>计算机行业基础、设计、开放标准；</li>\n</ol>\n<ul>\n<li>网络协议就是个很好的概念</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"移动端跨端技术及原理\"><a class=\"markdownIt-Anchor\" href=\"#移动端跨端技术及原理\"></a> 移动端跨端技术及原理</h1>\n<h2 id=\"1-js-native-通信技术\"><a class=\"markdownIt-Anchor\" href=\"#1-js-native-通信技术\"></a> 1. <a href=\"https://mp.weixin.qq.com/s/_Xo6O3NoE1z9AIMJm_uSsA\">JS-Native 通信技术</a></h2>\n<h2 id=\"11-postmessage-ios-wkwebview\"><a class=\"markdownIt-Anchor\" href=\"#11-postmessage-ios-wkwebview\"></a> 1.1 postMessage （iOS WKWebview）</h2>\n<p>这种方式是在 iOS 中处理消息非常方便，但是在 Android 中并不支持。</p>\n<p>web 端发送消息:</p>\n<pre class=\"highlight\"><code class=\"javaScript\"><span class=\"hljs-built_in\">window</span>.webkit.messageHandlers.SYJSBridge.postMessage(msg);\n</code></pre>\n<p>iOS 端接受消息：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">- (void)userContentController:(WKUserContentController *)uc\ndidReceiveScriptMessage:(WKScriptMessage *)message\n&#123;\n    // 处理消息\n&#125;\n</code></pre>\n<h2 id=\"12-promptios-android-webview\"><a class=\"markdownIt-Anchor\" href=\"#12-promptios-android-webview\"></a> 1.2 prompt（iOS、Android、WebView）</h2>\n<p>巧用 webview 的弹窗，弹窗内容定义消息体。</p>\n<p>web 端发送消息：</p>\n<pre class=\"highlight\"><code class=\"javascript\"><span class=\"hljs-built_in\">window</span>.prompt(msg);\n</code></pre>\n<p>iOS 端接受消息：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">- (void)webView:(WKWebView *)webView \nrunJavaScriptTextInputPanelWithPrompt:(NSString *)prompt \ndefaultText:(NSString *)defaultText \ninitiatedByFrame:(WKFrameInfo *)frame \ncompletionHandler:(void (^)(NSString *))completionHandler\n&#123;\n    completionHandler(@&quot;OC input&quot;);\n&#125;\n</code></pre>\n<h2 id=\"13-iframeios-android-webview\"><a class=\"markdownIt-Anchor\" href=\"#13-iframeios-android-webview\"></a> 1.3 iframe（iOS、Android、WebView）</h2>\n<p>创建一个隐形的 iframe，Native 侧会收到一个请求，可以通过请求地址来做一个处理，达到通信的目的。</p>\n<p>web 端发送消息：</p>\n<pre class=\"highlight\"><code class=\"javascript\"><span class=\"hljs-keyword\">const</span> callIframe = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">url</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> iframe = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'iframe'</span>);\n  iframe.src = url;\n  <span class=\"hljs-built_in\">document</span>.body.appendChild(iframe);\n  <span class=\"hljs-built_in\">document</span>.body.removeChild(iframe);\n&#125;\n</code></pre>\n<p>iOS 端接受消息：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">- (void)webView:(WKWebView *)webView\ndecidePolicyForNavigationAction:(WKNavigationAction *)na \ndecisionHandler:(void (^)(WKNavigationActionPolicy))h &#123;\n    NSLog(@&quot;%@&quot;, NSStringFromSelector(_cmd));\n    decisionHandler(WKNavigationActionPolicyAllow);\n&#125;\n</code></pre>\n<h2 id=\"14-注入-js\"><a class=\"markdownIt-Anchor\" href=\"#14-注入-js\"></a> 1.4 注入 JS</h2>\n<p>这种方式主要通过 webview 提供的 API 向 JavaScript 执行引擎中注入 JavaScript 代码。下面的代码在页面加载时注入了一个 add 函数，这个函数被挂载到了 window 下，在网页中可直接调用。</p>\n<p>iOS 端实现：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">WKUserScript *script = [[WKUserScript alloc] \ninitWithSource:@&quot;function add(a, b) &#123; return a + b; &#125;&quot;\ninjectionTime:WKUserScriptInjectionTimeAtDocumentStart \nforMainFrameOnly:YES];\n[webview.configuration.userContentController addUserScript:script];\n</code></pre>\n<h3 id=\"15-locationhref-ios-android-webview\"><a class=\"markdownIt-Anchor\" href=\"#15-locationhref-ios-android-webview\"></a> 1.5 location.href （iOS、Android、WebView）</h3>\n<p>这种方式和 1.3 方法类似，不过需要对做通信 API 的路由做拦截处理，否则会跳转到新的页面。</p>\n<p>web 端发送消息：</p>\n<pre class=\"highlight\"><code class=\"javascript\"><span class=\"hljs-built_in\">window</span>.location.href = url;\n</code></pre>\n<p>iOS 端接受消息：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">- (void)webView:(WKWebView *)webView \ndecidePolicyForNavigationAction:(WKNavigationAction *)na \ndecisionHandler:(void (^)(WKNavigationActionPolicy))d &#123;\n    NSLog(@&quot;%@&quot;, NSStringFromSelector(_cmd));\n    if ([na.request.URL.absoluteString containsString:@&quot;suyan&quot;]) &#123;\n        d(WKNavigationActionPolicyCancel);\n    &#125;\n    else &#123;\n        d(WKNavigationActionPolicyAllow);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"16-addjavascriptinterface-android-webview\"><a class=\"markdownIt-Anchor\" href=\"#16-addjavascriptinterface-android-webview\"></a> 1.6 addJavaScriptInterface （Android、WebView）</h3>\n<p>把一个 Java 对象注入到 JavaScript 执行环境当中，使得在 webivew 中可直接调用该方法，间接调用 Native 方法。</p>\n<h2 id=\"2-常见跨端方案\"><a class=\"markdownIt-Anchor\" href=\"#2-常见跨端方案\"></a> 2. 常见跨端方案</h2>\n<h3 id=\"21-react-native-weex\"><a class=\"markdownIt-Anchor\" href=\"#21-react-native-weex\"></a> 2.1 React-Native &amp; WeeX</h3>\n<h4 id=\"211-react-native\"><a class=\"markdownIt-Anchor\" href=\"#211-react-native\"></a> 2.1.1 <a href=\"https://www.react-native.cn/docs/getting-started\">React-Native</a></h4>\n<h4 id=\"212-weex\"><a class=\"markdownIt-Anchor\" href=\"#212-weex\"></a> 2.1.2 <a href=\"https://weex.apache.org/zh/docs/api/weex-variable.html\">WeeX</a></h4>\n<h4 id=\"213-hippy\"><a class=\"markdownIt-Anchor\" href=\"#213-hippy\"></a> 2.1.3 <a href=\"https://github.com/Tencent/Hippy/blob/master/README.zh_CN.md\">Hippy</a></h4>\n<h3 id=\"22-flutter\"><a class=\"markdownIt-Anchor\" href=\"#22-flutter\"></a> 2.2 <a href=\"https://flutterchina.club/docs/\">Flutter</a></h3>\n<h3 id=\"23-javascriptcore\"><a class=\"markdownIt-Anchor\" href=\"#23-javascriptcore\"></a> 2.3 <a href=\"https://trac.webkit.org/wiki/JavaScriptCore\">JavaScriptCore</a></h3>\n<h4 id=\"231-ios-版\"><a class=\"markdownIt-Anchor\" href=\"#231-ios-版\"></a> 2.3.1 <a href=\"https://developer.apple.com/documentation/javascriptcore\">iOS 版</a></h4>\n<h3 id=\"24-jspatch\"><a class=\"markdownIt-Anchor\" href=\"#24-jspatch\"></a> 2.4 <a href=\"https://github.com/bang590/JSPatch/wiki\">JSPatch</a></h3>\n<h3 id=\"25-wkwebviewbridgehandler\"><a class=\"markdownIt-Anchor\" href=\"#25-wkwebviewbridgehandler\"></a> 2.5 <a href=\"https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md\">WKWebViewBridgeHandler</a></h3>\n<h3 id=\"26-capacitor\"><a class=\"markdownIt-Anchor\" href=\"#26-capacitor\"></a> 2.6 <a href=\"https://capacitorjs.com/docs/v3\">Capacitor</a></h3>\n<h4 id=\"261-cordova\"><a class=\"markdownIt-Anchor\" href=\"#261-cordova\"></a> 2.6.1 <a href=\"https://capacitorjs.com/docs/v3/cordova\">cordova</a></h4>\n<h4 id=\"262-phonegap\"><a class=\"markdownIt-Anchor\" href=\"#262-phonegap\"></a> 2.6.2 <a href=\"https://github.com/phonegap\">PhoneGap</a></h4>\n<h5 id=\"2621-参考资料\"><a class=\"markdownIt-Anchor\" href=\"#2621-参考资料\"></a> 2.6.2.1 参考资料</h5>\n<ol>\n<li><a href=\"https://www.oschina.net/p/phonegap?hmsr=aladdin1e1\">PhoneGap 手机 Web 应用开发平台</a></li>\n</ol>\n<h4 id=\"263-ionic\"><a class=\"markdownIt-Anchor\" href=\"#263-ionic\"></a> 2.6.3 <a href=\"https://ionicframework.com/docs\">Ionic</a></h4>\n<h3 id=\"27-dcloud\"><a class=\"markdownIt-Anchor\" href=\"#27-dcloud\"></a> 2.7 <a href=\"https://ask.dcloud.net.cn/docs/\">DCloud</a></h3>\n<h3 id=\"28-xamarin\"><a class=\"markdownIt-Anchor\" href=\"#28-xamarin\"></a> 2.8 <a href=\"https://docs.microsoft.com/zh-cn/xamarin/\">Xamarin</a></h3>\n<h3 id=\"29-pwa-轻应用-小程序-等\"><a class=\"markdownIt-Anchor\" href=\"#29-pwa-轻应用-小程序-等\"></a> 2.9 PWA &amp; 轻应用 &amp; 小程序 等</h3>\n<h4 id=\"291-pwa\"><a class=\"markdownIt-Anchor\" href=\"#291-pwa\"></a> 2.9.1 <a href=\"https://capacitorjs.com/docs/v3/web\">PWA</a></h4>\n<h4 id=\"292-轻应用\"><a class=\"markdownIt-Anchor\" href=\"#292-轻应用\"></a> 2.9.2 <a href=\"https://uniapp.dcloud.io/history\">轻应用</a></h4>\n<h3 id=\"210-qt\"><a class=\"markdownIt-Anchor\" href=\"#210-qt\"></a> 2.10 <a href=\"https://doc.qt.io/qt-6/mobiledevelopment.html\">QT</a></h3>\n<p>轻应用、流应用</p>\n<h3 id=\"293-小程序\"><a class=\"markdownIt-Anchor\" href=\"#293-小程序\"></a> 2.9.3 小程序</h3>\n<h4 id=\"1-微信小程序\"><a class=\"markdownIt-Anchor\" href=\"#1-微信小程序\"></a> 1. <a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/\">微信小程序</a></h4>\n<h4 id=\"2-uni-app\"><a class=\"markdownIt-Anchor\" href=\"#2-uni-app\"></a> 2. <a href=\"https://uniapp.dcloud.io/\">uni-app</a></h4>\n<p>小程序联盟</p>\n<h2 id=\"3-源码解读\"><a class=\"markdownIt-Anchor\" href=\"#3-源码解读\"></a> 3. 源码解读</h2>\n<h3 id=\"31-源码阅读\"><a class=\"markdownIt-Anchor\" href=\"#31-源码阅读\"></a> 3.1 源码阅读</h3>\n<h3 id=\"311-jspatch\"><a class=\"markdownIt-Anchor\" href=\"#311-jspatch\"></a> 3.1.1 <a href=\"https://github.com/bang590/JSPatch/wiki\">JSPatch</a></h3>\n<h3 id=\"312-wkwebviewbridgehandler\"><a class=\"markdownIt-Anchor\" href=\"#312-wkwebviewbridgehandler\"></a> 3.1.2 [WKWebViewBridgeHandler]</h3>\n<ol>\n<li>\n<p><a href=\"https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md\">WKWebViewBridgeHandler</a></p>\n</li>\n<li>\n<p><a href=\"http://www.zyiner.com/article/3\">iOS系列之WebViewJavascriptBridge源码分析</a></p>\n</li>\n</ol>\n<p>库结构图、使用的通信技术、通讯方式</p>\n<h3 id=\"32-推荐阅读博客\"><a class=\"markdownIt-Anchor\" href=\"#32-推荐阅读博客\"></a> 3.2 推荐阅读博客</h3>\n<ul>\n<li>戴明的<a href=\"https://ming1016.github.io/2018/04/21/deeply-analyse-javascriptcore/\">深入剖析 JavaScriptCore</a></li>\n<li>戴明的<a href=\"https://ming1016.github.io/2021/02/21/deeply-analyse-quickjs/\">深入剖析 JavaScript 编译器/解释器引擎 QuickJS</a></li>\n<li>戴明的<a href=\"https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/\">深入剖析 WebKit</a></li>\n</ul>\n<h2 id=\"4-跨端常讨论的问题\"><a class=\"markdownIt-Anchor\" href=\"#4-跨端常讨论的问题\"></a> 4. 跨端常讨论的问题</h2>\n<h3 id=\"41-性能\"><a class=\"markdownIt-Anchor\" href=\"#41-性能\"></a> 4.1 性能</h3>\n<h3 id=\"42-交互体验\"><a class=\"markdownIt-Anchor\" href=\"#42-交互体验\"></a> 4.2 交互体验</h3>\n<h3 id=\"43-社区基础建筑完备性\"><a class=\"markdownIt-Anchor\" href=\"#43-社区基础建筑完备性\"></a> 4.3 社区（基础建筑）完备性</h3>\n<h3 id=\"44-未来前景探讨\"><a class=\"markdownIt-Anchor\" href=\"#44-未来前景探讨\"></a> 4.4 未来前景探讨</h3>\n<h3 id=\"441-为什么说现在-react-native-凉了\"><a class=\"markdownIt-Anchor\" href=\"#441-为什么说现在-react-native-凉了\"></a> 4.4.1 <a href=\"https://www.zhihu.com/question/266630840/answer/312188874\">为什么说现在 React Native 凉了？</a></h3>\n<h3 id=\"442-flutter-正在被悄悄放弃吗\"><a class=\"markdownIt-Anchor\" href=\"#442-flutter-正在被悄悄放弃吗\"></a> 4.4.2 <a href=\"https://mp.weixin.qq.com/s/hDjbMSPNz_D5JeEBMEJZCA\">Flutter 正在被悄悄放弃吗？</a></h3>\n<h3 id=\"443-flutter-2-正式发布\"><a class=\"markdownIt-Anchor\" href=\"#443-flutter-2-正式发布\"></a> 4.4.3 <a href=\"https://mp.weixin.qq.com/s/tJe2ScLgKWFTybpBtDl2TA\">Flutter 2 正式发布！</a></h3>\n<h3 id=\"45-人力资源节省\"><a class=\"markdownIt-Anchor\" href=\"#45-人力资源节省\"></a> 4.5 人力/资源节省</h3>\n<h2 id=\"5-其他-mobile-web-技术方案\"><a class=\"markdownIt-Anchor\" href=\"#5-其他-mobile-web-技术方案\"></a> 5. 其他 Mobile Web 技术/方案</h2>\n<h3 id=\"51-vassonic\"><a class=\"markdownIt-Anchor\" href=\"#51-vassonic\"></a> 5.1 <a href=\"https://github.com/Tencent/VasSonic/wiki\">VasSonic</a></h3>\n<h2 id=\"6-期待\"><a class=\"markdownIt-Anchor\" href=\"#6-期待\"></a> 6. 期待</h2>\n<h3 id=\"61-鸿蒙\"><a class=\"markdownIt-Anchor\" href=\"#61-鸿蒙\"></a> 6.1 <a href=\"https://developer.harmonyos.com/cn/documentation\">鸿蒙</a></h3>\n<h3 id=\"62-统一\"><a class=\"markdownIt-Anchor\" href=\"#62-统一\"></a> 6.2 统一</h3>\n<ol>\n<li>有一个统一的、通用的系统；</li>\n<li>有一门流行的统一的[元]语言：有处理前后端、脚本、硬件的能力；</li>\n<li>计算机行业基础、设计、开放标准；</li>\n</ol>\n<ul>\n<li>网络协议就是个很好的概念</li>\n</ul>\n"},{"_content":"# RunLoop\n\n## 1. [深入理解RunLoop](https://blog.ibireme.com/2015/05/18/runloop/)","source":"_posts/学习笔记/iOS/iOS之并发编程/RunLoop.md","raw":"# RunLoop\n\n## 1. [深入理解RunLoop](https://blog.ibireme.com/2015/05/18/runloop/)","slug":"学习笔记/iOS/iOS之并发编程/RunLoop","published":1,"date":"2021-04-09T13:04:02.236Z","updated":"2021-04-09T13:04:02.236Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thn001ww37u7b38fka0","content":"<h1 id=\"runloop\"><a class=\"markdownIt-Anchor\" href=\"#runloop\"></a> RunLoop</h1>\n<h2 id=\"1-深入理解runloop\"><a class=\"markdownIt-Anchor\" href=\"#1-深入理解runloop\"></a> 1. <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">深入理解RunLoop</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"runloop\"><a class=\"markdownIt-Anchor\" href=\"#runloop\"></a> RunLoop</h1>\n<h2 id=\"1-深入理解runloop\"><a class=\"markdownIt-Anchor\" href=\"#1-深入理解runloop\"></a> 1. <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">深入理解RunLoop</a></h2>\n"},{"_content":"# GCD\n\n## 1. [iOS 多线程：『GCD』详尽总结](https://www.jianshu.com/p/2d57c72016c6)\n\n## 2. [多线程之GCD](https://zhuanlan.zhihu.com/p/68705170)\n\n## 3. []()","source":"_posts/学习笔记/iOS/iOS之并发编程/iOS之GCD.md","raw":"# GCD\n\n## 1. [iOS 多线程：『GCD』详尽总结](https://www.jianshu.com/p/2d57c72016c6)\n\n## 2. [多线程之GCD](https://zhuanlan.zhihu.com/p/68705170)\n\n## 3. []()","slug":"学习笔记/iOS/iOS之并发编程/iOS之GCD","published":1,"date":"2021-04-09T13:04:02.236Z","updated":"2021-04-09T13:04:02.236Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thq001xw37u20u51oa5","content":"<h1 id=\"gcd\"><a class=\"markdownIt-Anchor\" href=\"#gcd\"></a> GCD</h1>\n<h2 id=\"1-ios-多线程gcd详尽总结\"><a class=\"markdownIt-Anchor\" href=\"#1-ios-多线程gcd详尽总结\"></a> 1. <a href=\"https://www.jianshu.com/p/2d57c72016c6\">iOS 多线程：『GCD』详尽总结</a></h2>\n<h2 id=\"2-多线程之gcd\"><a class=\"markdownIt-Anchor\" href=\"#2-多线程之gcd\"></a> 2. <a href=\"https://zhuanlan.zhihu.com/p/68705170\">多线程之GCD</a></h2>\n<h2 id=\"3\"><a class=\"markdownIt-Anchor\" href=\"#3\"></a> 3. <a href=\"\"></a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"gcd\"><a class=\"markdownIt-Anchor\" href=\"#gcd\"></a> GCD</h1>\n<h2 id=\"1-ios-多线程gcd详尽总结\"><a class=\"markdownIt-Anchor\" href=\"#1-ios-多线程gcd详尽总结\"></a> 1. <a href=\"https://www.jianshu.com/p/2d57c72016c6\">iOS 多线程：『GCD』详尽总结</a></h2>\n<h2 id=\"2-多线程之gcd\"><a class=\"markdownIt-Anchor\" href=\"#2-多线程之gcd\"></a> 2. <a href=\"https://zhuanlan.zhihu.com/p/68705170\">多线程之GCD</a></h2>\n<h2 id=\"3\"><a class=\"markdownIt-Anchor\" href=\"#3\"></a> 3. <a href=\"\"></a></h2>\n"},{"_content":"# 多线程编程\n\n## 1. [Threading Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1)\n\n### **异常处理**\n\n1. [Exception Programming Topics](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012i)","source":"_posts/学习笔记/iOS/iOS之并发编程/iOS之多线程.md","raw":"# 多线程编程\n\n## 1. [Threading Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1)\n\n### **异常处理**\n\n1. [Exception Programming Topics](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012i)","slug":"学习笔记/iOS/iOS之并发编程/iOS之多线程","published":1,"date":"2021-04-09T13:04:02.235Z","updated":"2021-04-09T13:04:02.235Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thr001yw37u4zq0bxqs","content":"<h1 id=\"多线程编程\"><a class=\"markdownIt-Anchor\" href=\"#多线程编程\"></a> 多线程编程</h1>\n<h2 id=\"1-threading-programming-guide\"><a class=\"markdownIt-Anchor\" href=\"#1-threading-programming-guide\"></a> 1. <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1\">Threading Programming Guide</a></h2>\n<h3 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\"></a> <strong>异常处理</strong></h3>\n<ol>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012i\">Exception Programming Topics</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"多线程编程\"><a class=\"markdownIt-Anchor\" href=\"#多线程编程\"></a> 多线程编程</h1>\n<h2 id=\"1-threading-programming-guide\"><a class=\"markdownIt-Anchor\" href=\"#1-threading-programming-guide\"></a> 1. <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1\">Threading Programming Guide</a></h2>\n<h3 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\"></a> <strong>异常处理</strong></h3>\n<ol>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012i\">Exception Programming Topics</a></li>\n</ol>\n"},{"_content":"# 并发编程\n\n## 1. [Concurrency Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1)\n","source":"_posts/学习笔记/iOS/iOS之并发编程/并发编程.md","raw":"# 并发编程\n\n## 1. [Concurrency Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1)\n","slug":"学习笔记/iOS/iOS之并发编程/并发编程","published":1,"date":"2021-04-09T13:04:02.235Z","updated":"2021-04-09T13:04:02.235Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ths001zw37u97mcfzbb","content":"<h1 id=\"并发编程\"><a class=\"markdownIt-Anchor\" href=\"#并发编程\"></a> 并发编程</h1>\n<h2 id=\"1-concurrency-programming-guide\"><a class=\"markdownIt-Anchor\" href=\"#1-concurrency-programming-guide\"></a> 1. <a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1\">Concurrency Programming Guide</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"并发编程\"><a class=\"markdownIt-Anchor\" href=\"#并发编程\"></a> 并发编程</h1>\n<h2 id=\"1-concurrency-programming-guide\"><a class=\"markdownIt-Anchor\" href=\"#1-concurrency-programming-guide\"></a> 1. <a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1\">Concurrency Programming Guide</a></h2>\n"},{"_content":"clean:\nmin_acl: internal\nauthor: sumian\nreadme: docs/README.md\nmodule: sd_ios_base\ngithub_url: http://192.168.1.229/hepeng.l/sm_ios_repo_base.git\nxcodebuild_arguments:\n  - workspace: sm_ios_base.xcworkspace\n  - scheme: sm_ios_base-Example\n  - configuration: Debug\n  - UseModernBuildSystem: NO\n","source":"_posts/学习笔记/iOS/iOS之文档/jazzy.yaml","raw":"clean:\nmin_acl: internal\nauthor: sumian\nreadme: docs/README.md\nmodule: sd_ios_base\ngithub_url: http://192.168.1.229/hepeng.l/sm_ios_repo_base.git\nxcodebuild_arguments:\n  - workspace: sm_ios_base.xcworkspace\n  - scheme: sm_ios_base-Example\n  - configuration: Debug\n  - UseModernBuildSystem: NO\n","slug":"学习笔记/iOS/iOS之文档/jazzy","published":1,"date":"2021-02-24T12:31:09.206Z","updated":"2021-02-24T12:31:09.206Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3thz0020w37ug4e1ag38","content":"{\"clean\":null,\"min_acl\":\"internal\",\"author\":\"sumian\",\"readme\":\"docs/README.md\",\"module\":\"sd_ios_base\",\"github_url\":\"http://192.168.1.229/hepeng.l/sm_ios_repo_base.git\",\"xcodebuild_arguments\":[{\"workspace\":\"sm_ios_base.xcworkspace\"},{\"scheme\":\"sm_ios_base-Example\"},{\"configuration\":\"Debug\"},{\"UseModernBuildSystem\":\"NO\"}]}","site":{"data":{}},"excerpt":"","more":"{\"clean\":null,\"min_acl\":\"internal\",\"author\":\"sumian\",\"readme\":\"docs/README.md\",\"module\":\"sd_ios_base\",\"github_url\":\"http://192.168.1.229/hepeng.l/sm_ios_repo_base.git\",\"xcodebuild_arguments\":[{\"workspace\":\"sm_ios_base.xcworkspace\"},{\"scheme\":\"sm_ios_base-Example\"},{\"configuration\":\"Debug\"},{\"UseModernBuildSystem\":\"NO\"}]}"},{"_content":"\n文档生成：\nDoxygen、appledoc、HeaderDoc\n\n一、iOS 文档生成：appledoc、HeaderDoc\n1、objective——C\n  #appledoc Xcode script\n  # Start constants\n  company=\"gosuncn\";\n  companyID=\"com.gosuncn\";\n  companyURL=\"http://www.gosuncn.com/\";\n  target=\"iphoneos\";\n  #target=\"macosx\";\n  outputPath=\"${PROJECT_DIR}\";\n  # End constants\n  /usr/local/bin/appledoc \\\n  --project-name \"doc\" \\\n  --project-company \"${company}\" \\\n  --company-id \"${companyID}\" \\\n  --no-create-docset  \\\n  --output \"${outputPath}\" \\\n  --logformat xcode \\\n  --keep-intermediate-files \\\n  --no-repeat-first-par \\\n  --no-warn-invalid-crossref \\\n  --exit-threshold 2 \\\n  \"${PROJECT_DIR}\"\n\n2、swift\njazzy \\\n  --clean \\\n  --author Sumian \\\n  --author_url http://sumian.com/ \\\n  --github_url http://192.168.1.229/hepeng.l/sm_ios_repo_base \\\n  --github-file-prefix http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1 \\\n  --module-version 0.0.1 \\\n  --xcodebuild-arguments -scheme,sd_sdk_ios \\\n  --module sd_sdk_ios \\\n  --root-url ~/ \\\n  --output docs/swift_output \\\n  --theme docs/themes\n","source":"_posts/学习笔记/iOS/iOS之文档/文档生成.md","raw":"\n文档生成：\nDoxygen、appledoc、HeaderDoc\n\n一、iOS 文档生成：appledoc、HeaderDoc\n1、objective——C\n  #appledoc Xcode script\n  # Start constants\n  company=\"gosuncn\";\n  companyID=\"com.gosuncn\";\n  companyURL=\"http://www.gosuncn.com/\";\n  target=\"iphoneos\";\n  #target=\"macosx\";\n  outputPath=\"${PROJECT_DIR}\";\n  # End constants\n  /usr/local/bin/appledoc \\\n  --project-name \"doc\" \\\n  --project-company \"${company}\" \\\n  --company-id \"${companyID}\" \\\n  --no-create-docset  \\\n  --output \"${outputPath}\" \\\n  --logformat xcode \\\n  --keep-intermediate-files \\\n  --no-repeat-first-par \\\n  --no-warn-invalid-crossref \\\n  --exit-threshold 2 \\\n  \"${PROJECT_DIR}\"\n\n2、swift\njazzy \\\n  --clean \\\n  --author Sumian \\\n  --author_url http://sumian.com/ \\\n  --github_url http://192.168.1.229/hepeng.l/sm_ios_repo_base \\\n  --github-file-prefix http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1 \\\n  --module-version 0.0.1 \\\n  --xcodebuild-arguments -scheme,sd_sdk_ios \\\n  --module sd_sdk_ios \\\n  --root-url ~/ \\\n  --output docs/swift_output \\\n  --theme docs/themes\n","slug":"学习笔记/iOS/iOS之文档/文档生成","published":1,"date":"2021-02-24T12:31:09.206Z","updated":"2021-02-24T12:31:09.206Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ti00021w37u4l7d14qw","content":"<p>文档生成：<br />\nDoxygen、appledoc、HeaderDoc</p>\n<p>一、iOS 文档生成：appledoc、HeaderDoc<br />\n1、objective——C<br />\n#appledoc Xcode script</p>\n<h1 id=\"start-constants\"><a class=\"markdownIt-Anchor\" href=\"#start-constants\"></a> Start constants</h1>\n<p>company=“gosuncn”;<br />\ncompanyID=“com.gosuncn”;<br />\ncompanyURL=“<a href=\"http://www.gosuncn.com/\">http://www.gosuncn.com/</a>”;<br />\ntarget=“iphoneos”;<br />\n#target=“macosx”;<br />\noutputPath=&quot;${PROJECT_DIR}&quot;;</p>\n<h1 id=\"end-constants\"><a class=\"markdownIt-Anchor\" href=\"#end-constants\"></a> End constants</h1>\n<p>/usr/local/bin/appledoc <br />\n–project-name “doc” <br />\n–project-company “<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \\\n at position 12: {company}&quot; \\̲\n̲  --company-id …'>{company}&quot; \\\n  --company-id &quot;</span>{companyID}” <br />\n–no-create-docset  <br />\n–output “<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \\\n at position 15: {outputPath}&quot; \\̲\n̲  --logformat x…'>{outputPath}&quot; \\\n  --logformat xcode \\\n  --keep-intermediate-files \\\n  --no-repeat-first-par \\\n  --no-warn-invalid-crossref \\\n  --exit-threshold 2 \\\n  &quot;</span>{PROJECT_DIR}”</p>\n<p>2、swift<br />\njazzy <br />\n–clean <br />\n–author Sumian <br />\n–author_url <a href=\"http://sumian.com/\">http://sumian.com/</a> <br />\n–github_url <a href=\"http://192.168.1.229/hepeng.l/sm_ios_repo_base\">http://192.168.1.229/hepeng.l/sm_ios_repo_base</a> <br />\n–github-file-prefix <a href=\"http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1\">http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1</a> <br />\n–module-version 0.0.1 <br />\n–xcodebuild-arguments -scheme,sd_sdk_ios <br />\n–module sd_sdk_ios <br />\n–root-url ~/ <br />\n–output docs/swift_output <br />\n–theme docs/themes</p>\n","site":{"data":{}},"excerpt":"","more":"<p>文档生成：<br />\nDoxygen、appledoc、HeaderDoc</p>\n<p>一、iOS 文档生成：appledoc、HeaderDoc<br />\n1、objective——C<br />\n#appledoc Xcode script</p>\n<h1 id=\"start-constants\"><a class=\"markdownIt-Anchor\" href=\"#start-constants\"></a> Start constants</h1>\n<p>company=“gosuncn”;<br />\ncompanyID=“com.gosuncn”;<br />\ncompanyURL=“<a href=\"http://www.gosuncn.com/\">http://www.gosuncn.com/</a>”;<br />\ntarget=“iphoneos”;<br />\n#target=“macosx”;<br />\noutputPath=&quot;${PROJECT_DIR}&quot;;</p>\n<h1 id=\"end-constants\"><a class=\"markdownIt-Anchor\" href=\"#end-constants\"></a> End constants</h1>\n<p>/usr/local/bin/appledoc <br />\n–project-name “doc” <br />\n–project-company “<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \\\n at position 12: {company}&quot; \\̲\n̲  --company-id …'>{company}&quot; \\\n  --company-id &quot;</span>{companyID}” <br />\n–no-create-docset  <br />\n–output “<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \\\n at position 15: {outputPath}&quot; \\̲\n̲  --logformat x…'>{outputPath}&quot; \\\n  --logformat xcode \\\n  --keep-intermediate-files \\\n  --no-repeat-first-par \\\n  --no-warn-invalid-crossref \\\n  --exit-threshold 2 \\\n  &quot;</span>{PROJECT_DIR}”</p>\n<p>2、swift<br />\njazzy <br />\n–clean <br />\n–author Sumian <br />\n–author_url <a href=\"http://sumian.com/\">http://sumian.com/</a> <br />\n–github_url <a href=\"http://192.168.1.229/hepeng.l/sm_ios_repo_base\">http://192.168.1.229/hepeng.l/sm_ios_repo_base</a> <br />\n–github-file-prefix <a href=\"http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1\">http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1</a> <br />\n–module-version 0.0.1 <br />\n–xcodebuild-arguments -scheme,sd_sdk_ios <br />\n–module sd_sdk_ios <br />\n–root-url ~/ <br />\n–output docs/swift_output <br />\n–theme docs/themes</p>\n"},{"_content":"TextKit\n\nCoreText\n\nWebKit\n\n文字渲染\n\n PDF\n \nCoreGraphic\n\nQuartZ\n","source":"_posts/学习笔记/iOS/iOS之界面显示/iOS之界面显示.md","raw":"TextKit\n\nCoreText\n\nWebKit\n\n文字渲染\n\n PDF\n \nCoreGraphic\n\nQuartZ\n","slug":"学习笔记/iOS/iOS之界面显示/iOS之界面显示","published":1,"date":"2021-04-09T13:04:02.210Z","updated":"2021-04-09T13:04:02.210Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ti00022w37u4hpf51v2","content":"<p>TextKit</p>\n<p>CoreText</p>\n<p>WebKit</p>\n<p>文字渲染</p>\n<p>PDF</p>\n<p>CoreGraphic</p>\n<p>QuartZ</p>\n","site":{"data":{}},"excerpt":"","more":"<p>TextKit</p>\n<p>CoreText</p>\n<p>WebKit</p>\n<p>文字渲染</p>\n<p>PDF</p>\n<p>CoreGraphic</p>\n<p>QuartZ</p>\n"},{"_content":"# iOS 排版——Coretext\n\n**1、概念：**在操作之前，先了解一下 CoreText 概念，以便理解。\n\n1.1、[CoreText](https://developer.apple.com/documentation/coretext) 框架中最常用的几个类：\n\n```objective-c\nCTFont\nCTFontCollection\nCTFontDescriptor\nCTFrame\nCTFramesetter\nCTGlyphInfo\nCTLine\nCTParagraphStyle\nCTRun\nCTTextTab\nCTTypesett\n```\n\n下面是该框架的结构图\n![CTFrame](resources/ctframe.png)\nCTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。\n注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。\n通常处理步聚：\n1.使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－>attributedString －> 生成 CTFramesetter -> 得到CTFrame -> 绘制（CTFrameDraw）\n其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。\n\n2.绘制只是显示，点击事件就需要一个判断了。\nCTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。\n\n**1.2 字体的基本知识**\n\n**字体(Font):**是一系列字号、样式和磅值相同的字符(例如:10磅黑体Palatino)。现多被视为字样的同义词\n\n**字面(Face):**是所有字号的磅值和格式的综合\n\n**字体集(Font family):**是一组相关字体(例如:Franklin family包括Franklin Gothic、Fran-klinHeavy和Franklin Compressed)\n\n**磅值(Weight):**用于描述字体粗度。典型的磅值,从最粗到最细,有极细、细、book、中等、半粗、粗、较粗、极粗\n\n**样式(Style):**字形有三种形式:Roman type是直体;oblique type是斜体;utakuc type是斜体兼曲线(比Roman type更像书法体)。\n\n**x高度(X height):**指小写字母的平均高度(以x为基准)。磅值相同的两字母,x高度越大的字母看起来比x高度小的字母要大\n\n**Cap高度(Cap height):**与x高度相似。指大写字母的平均高度(以C为基准)\n\n**下行字母(Descender):**例如在字母q中,基线以下的字母部分叫下伸部分\n\n**上行字母(Ascender):**x高度以上的部分(比如字母b)叫做上伸部分\n\n**基线(Baseline):**通常在x、v、b、m下的那条线\n\n**描边(Stroke):**组成字符的线或曲线。可以加粗或改变字符形状\n\n**衬线(Serif):**用来使字符更可视的一条水平线。如字母左上角和下部的水平线。\n\n**无衬线(Sans Serif):**可以让排字员不使用衬线装饰。\n\n**方形字(Block):**这种字体的笔画使字符看起来比无衬线字更显眼,但还不到常见的衬线字的程度。例如Lubalin Graph就是方形字,这种字看起来好像是木头块刻的一样\n\n**手写体脚本(Calligraphic script):**是一种仿效手写体的字体。例如Murray Hill或者Fraktur字体\n\n**艺术字(Decorative):**像绘画般的字体\n\n**Pi符号(Pisymbol):**非标准的字母数字字符的特殊符号。例如Wingdings和Mathematical Pi\n\n**连写(Ligature):**是一系列连写字母如fi、fl、ffi或ffl。由于字些字母形状的原因经常被连写,故排字员已习惯将它们连写。\n\n读完了上面这些概念，可以参考一下下面的图片，看看具体的位置\n![CTFrame](resources/text_glpy_info.gif)\n\n![CTFrame](resources/text_glpy_info_1.gif)\n\n* **引用原文：**[CoreText 基础概念](https://www.jianshu.com/p/9553fcbbaab1)\n\n**2、操作：**这里有两篇文章对于操作讲解的还是比较详细的\n\n1、[基于 CoreText 的排版引擎：基础](http://blog.devtang.com/2015/06/27/using-coretext-1/)\n\n2、[基于 CoreText 的排版引擎：进阶](基于 CoreText 的排版引擎：进阶)\n","source":"_posts/学习笔记/iOS/iOS之界面显示/iOS排版之CoreText.md","raw":"# iOS 排版——Coretext\n\n**1、概念：**在操作之前，先了解一下 CoreText 概念，以便理解。\n\n1.1、[CoreText](https://developer.apple.com/documentation/coretext) 框架中最常用的几个类：\n\n```objective-c\nCTFont\nCTFontCollection\nCTFontDescriptor\nCTFrame\nCTFramesetter\nCTGlyphInfo\nCTLine\nCTParagraphStyle\nCTRun\nCTTextTab\nCTTypesett\n```\n\n下面是该框架的结构图\n![CTFrame](resources/ctframe.png)\nCTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。\n注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。\n通常处理步聚：\n1.使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－>attributedString －> 生成 CTFramesetter -> 得到CTFrame -> 绘制（CTFrameDraw）\n其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。\n\n2.绘制只是显示，点击事件就需要一个判断了。\nCTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。\n\n**1.2 字体的基本知识**\n\n**字体(Font):**是一系列字号、样式和磅值相同的字符(例如:10磅黑体Palatino)。现多被视为字样的同义词\n\n**字面(Face):**是所有字号的磅值和格式的综合\n\n**字体集(Font family):**是一组相关字体(例如:Franklin family包括Franklin Gothic、Fran-klinHeavy和Franklin Compressed)\n\n**磅值(Weight):**用于描述字体粗度。典型的磅值,从最粗到最细,有极细、细、book、中等、半粗、粗、较粗、极粗\n\n**样式(Style):**字形有三种形式:Roman type是直体;oblique type是斜体;utakuc type是斜体兼曲线(比Roman type更像书法体)。\n\n**x高度(X height):**指小写字母的平均高度(以x为基准)。磅值相同的两字母,x高度越大的字母看起来比x高度小的字母要大\n\n**Cap高度(Cap height):**与x高度相似。指大写字母的平均高度(以C为基准)\n\n**下行字母(Descender):**例如在字母q中,基线以下的字母部分叫下伸部分\n\n**上行字母(Ascender):**x高度以上的部分(比如字母b)叫做上伸部分\n\n**基线(Baseline):**通常在x、v、b、m下的那条线\n\n**描边(Stroke):**组成字符的线或曲线。可以加粗或改变字符形状\n\n**衬线(Serif):**用来使字符更可视的一条水平线。如字母左上角和下部的水平线。\n\n**无衬线(Sans Serif):**可以让排字员不使用衬线装饰。\n\n**方形字(Block):**这种字体的笔画使字符看起来比无衬线字更显眼,但还不到常见的衬线字的程度。例如Lubalin Graph就是方形字,这种字看起来好像是木头块刻的一样\n\n**手写体脚本(Calligraphic script):**是一种仿效手写体的字体。例如Murray Hill或者Fraktur字体\n\n**艺术字(Decorative):**像绘画般的字体\n\n**Pi符号(Pisymbol):**非标准的字母数字字符的特殊符号。例如Wingdings和Mathematical Pi\n\n**连写(Ligature):**是一系列连写字母如fi、fl、ffi或ffl。由于字些字母形状的原因经常被连写,故排字员已习惯将它们连写。\n\n读完了上面这些概念，可以参考一下下面的图片，看看具体的位置\n![CTFrame](resources/text_glpy_info.gif)\n\n![CTFrame](resources/text_glpy_info_1.gif)\n\n* **引用原文：**[CoreText 基础概念](https://www.jianshu.com/p/9553fcbbaab1)\n\n**2、操作：**这里有两篇文章对于操作讲解的还是比较详细的\n\n1、[基于 CoreText 的排版引擎：基础](http://blog.devtang.com/2015/06/27/using-coretext-1/)\n\n2、[基于 CoreText 的排版引擎：进阶](基于 CoreText 的排版引擎：进阶)\n","slug":"学习笔记/iOS/iOS之界面显示/iOS排版之CoreText","published":1,"date":"2021-04-09T13:04:02.210Z","updated":"2021-04-09T13:04:02.210Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ti10023w37u10m6htwq","content":"<h1 id=\"ios-排版coretext\"><a class=\"markdownIt-Anchor\" href=\"#ios-排版coretext\"></a> iOS 排版——Coretext</h1>\n<p>**1、概念：**在操作之前，先了解一下 CoreText 概念，以便理解。</p>\n<p>1.1、<a href=\"https://developer.apple.com/documentation/coretext\">CoreText</a> 框架中最常用的几个类：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">CTFont\nCTFontCollection\nCTFontDescriptor\nCTFrame\nCTFramesetter\nCTGlyphInfo\nCTLine\nCTParagraphStyle\nCTRun\nCTTextTab\nCTTypesett\n</code></pre>\n<p>下面是该框架的结构图<br />\n<img src=\"resources/ctframe.png\" alt=\"CTFrame\" /><br />\nCTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。<br />\n注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。<br />\n通常处理步聚：<br />\n1.使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－&gt;attributedString －&gt; 生成 CTFramesetter -&gt; 得到CTFrame -&gt; 绘制（CTFrameDraw）<br />\n其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。</p>\n<p>2.绘制只是显示，点击事件就需要一个判断了。<br />\nCTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。</p>\n<p><strong>1.2 字体的基本知识</strong></p>\n<p>**字体(Font)😗*是一系列字号、样式和磅值相同的字符(例如:10磅黑体Palatino)。现多被视为字样的同义词</p>\n<p>**字面(Face)😗*是所有字号的磅值和格式的综合</p>\n<p>**字体集(Font family)😗*是一组相关字体(例如:Franklin family包括Franklin Gothic、Fran-klinHeavy和Franklin Compressed)</p>\n<p>**磅值(Weight)😗*用于描述字体粗度。典型的磅值,从最粗到最细,有极细、细、book、中等、半粗、粗、较粗、极粗</p>\n<p>**样式(Style)😗*字形有三种形式:Roman type是直体;oblique type是斜体;utakuc type是斜体兼曲线(比Roman type更像书法体)。</p>\n<p>**x高度(X height)😗*指小写字母的平均高度(以x为基准)。磅值相同的两字母,x高度越大的字母看起来比x高度小的字母要大</p>\n<p>**Cap高度(Cap height)😗*与x高度相似。指大写字母的平均高度(以C为基准)</p>\n<p>**下行字母(Descender)😗*例如在字母q中,基线以下的字母部分叫下伸部分</p>\n<p>**上行字母(Ascender)😗*x高度以上的部分(比如字母b)叫做上伸部分</p>\n<p>**基线(Baseline)😗*通常在x、v、b、m下的那条线</p>\n<p>**描边(Stroke)😗*组成字符的线或曲线。可以加粗或改变字符形状</p>\n<p>**衬线(Serif)😗*用来使字符更可视的一条水平线。如字母左上角和下部的水平线。</p>\n<p>**无衬线(Sans Serif)😗*可以让排字员不使用衬线装饰。</p>\n<p>**方形字(Block)😗*这种字体的笔画使字符看起来比无衬线字更显眼,但还不到常见的衬线字的程度。例如Lubalin Graph就是方形字,这种字看起来好像是木头块刻的一样</p>\n<p>**手写体脚本(Calligraphic script)😗*是一种仿效手写体的字体。例如Murray Hill或者Fraktur字体</p>\n<p>**艺术字(Decorative)😗*像绘画般的字体</p>\n<p>**Pi符号(Pisymbol)😗*非标准的字母数字字符的特殊符号。例如Wingdings和Mathematical Pi</p>\n<p>**连写(Ligature)😗*是一系列连写字母如fi、fl、ffi或ffl。由于字些字母形状的原因经常被连写,故排字员已习惯将它们连写。</p>\n<p>读完了上面这些概念，可以参考一下下面的图片，看看具体的位置<br />\n<img src=\"resources/text_glpy_info.gif\" alt=\"CTFrame\" /></p>\n<p><img src=\"resources/text_glpy_info_1.gif\" alt=\"CTFrame\" /></p>\n<ul>\n<li><strong>引用原文：</strong><a href=\"https://www.jianshu.com/p/9553fcbbaab1\">CoreText 基础概念</a></li>\n</ul>\n<p>**2、操作：**这里有两篇文章对于操作讲解的还是比较详细的</p>\n<p>1、<a href=\"http://blog.devtang.com/2015/06/27/using-coretext-1/\">基于 CoreText 的排版引擎：基础</a></p>\n<p>2、[基于 CoreText 的排版引擎：进阶](基于 CoreText 的排版引擎：进阶)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios-排版coretext\"><a class=\"markdownIt-Anchor\" href=\"#ios-排版coretext\"></a> iOS 排版——Coretext</h1>\n<p>**1、概念：**在操作之前，先了解一下 CoreText 概念，以便理解。</p>\n<p>1.1、<a href=\"https://developer.apple.com/documentation/coretext\">CoreText</a> 框架中最常用的几个类：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">CTFont\nCTFontCollection\nCTFontDescriptor\nCTFrame\nCTFramesetter\nCTGlyphInfo\nCTLine\nCTParagraphStyle\nCTRun\nCTTextTab\nCTTypesett\n</code></pre>\n<p>下面是该框架的结构图<br />\n<img src=\"resources/ctframe.png\" alt=\"CTFrame\" /><br />\nCTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。<br />\n注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。<br />\n通常处理步聚：<br />\n1.使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－&gt;attributedString －&gt; 生成 CTFramesetter -&gt; 得到CTFrame -&gt; 绘制（CTFrameDraw）<br />\n其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。</p>\n<p>2.绘制只是显示，点击事件就需要一个判断了。<br />\nCTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。</p>\n<p><strong>1.2 字体的基本知识</strong></p>\n<p>**字体(Font)😗*是一系列字号、样式和磅值相同的字符(例如:10磅黑体Palatino)。现多被视为字样的同义词</p>\n<p>**字面(Face)😗*是所有字号的磅值和格式的综合</p>\n<p>**字体集(Font family)😗*是一组相关字体(例如:Franklin family包括Franklin Gothic、Fran-klinHeavy和Franklin Compressed)</p>\n<p>**磅值(Weight)😗*用于描述字体粗度。典型的磅值,从最粗到最细,有极细、细、book、中等、半粗、粗、较粗、极粗</p>\n<p>**样式(Style)😗*字形有三种形式:Roman type是直体;oblique type是斜体;utakuc type是斜体兼曲线(比Roman type更像书法体)。</p>\n<p>**x高度(X height)😗*指小写字母的平均高度(以x为基准)。磅值相同的两字母,x高度越大的字母看起来比x高度小的字母要大</p>\n<p>**Cap高度(Cap height)😗*与x高度相似。指大写字母的平均高度(以C为基准)</p>\n<p>**下行字母(Descender)😗*例如在字母q中,基线以下的字母部分叫下伸部分</p>\n<p>**上行字母(Ascender)😗*x高度以上的部分(比如字母b)叫做上伸部分</p>\n<p>**基线(Baseline)😗*通常在x、v、b、m下的那条线</p>\n<p>**描边(Stroke)😗*组成字符的线或曲线。可以加粗或改变字符形状</p>\n<p>**衬线(Serif)😗*用来使字符更可视的一条水平线。如字母左上角和下部的水平线。</p>\n<p>**无衬线(Sans Serif)😗*可以让排字员不使用衬线装饰。</p>\n<p>**方形字(Block)😗*这种字体的笔画使字符看起来比无衬线字更显眼,但还不到常见的衬线字的程度。例如Lubalin Graph就是方形字,这种字看起来好像是木头块刻的一样</p>\n<p>**手写体脚本(Calligraphic script)😗*是一种仿效手写体的字体。例如Murray Hill或者Fraktur字体</p>\n<p>**艺术字(Decorative)😗*像绘画般的字体</p>\n<p>**Pi符号(Pisymbol)😗*非标准的字母数字字符的特殊符号。例如Wingdings和Mathematical Pi</p>\n<p>**连写(Ligature)😗*是一系列连写字母如fi、fl、ffi或ffl。由于字些字母形状的原因经常被连写,故排字员已习惯将它们连写。</p>\n<p>读完了上面这些概念，可以参考一下下面的图片，看看具体的位置<br />\n<img src=\"resources/text_glpy_info.gif\" alt=\"CTFrame\" /></p>\n<p><img src=\"resources/text_glpy_info_1.gif\" alt=\"CTFrame\" /></p>\n<ul>\n<li><strong>引用原文：</strong><a href=\"https://www.jianshu.com/p/9553fcbbaab1\">CoreText 基础概念</a></li>\n</ul>\n<p>**2、操作：**这里有两篇文章对于操作讲解的还是比较详细的</p>\n<p>1、<a href=\"http://blog.devtang.com/2015/06/27/using-coretext-1/\">基于 CoreText 的排版引擎：基础</a></p>\n<p>2、[基于 CoreText 的排版引擎：进阶](基于 CoreText 的排版引擎：进阶)</p>\n"},{"_content":"# iOS排版与渲染引擎——TextKit\n\n[TexkKit 探究](https://www.jianshu.com/p/3f445d7f44d6)\n\n[iOS7 排版与渲染引擎](https://www.jianshu.com/p/e05b43faa106)\n","source":"_posts/学习笔记/iOS/iOS之界面显示/iOS排版之TextKit.md","raw":"# iOS排版与渲染引擎——TextKit\n\n[TexkKit 探究](https://www.jianshu.com/p/3f445d7f44d6)\n\n[iOS7 排版与渲染引擎](https://www.jianshu.com/p/e05b43faa106)\n","slug":"学习笔记/iOS/iOS之界面显示/iOS排版之TextKit","published":1,"date":"2021-04-09T13:04:02.211Z","updated":"2021-04-09T13:04:02.211Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ti20024w37u2ixq77pm","content":"<h1 id=\"ios排版与渲染引擎textkit\"><a class=\"markdownIt-Anchor\" href=\"#ios排版与渲染引擎textkit\"></a> iOS排版与渲染引擎——TextKit</h1>\n<p><a href=\"https://www.jianshu.com/p/3f445d7f44d6\">TexkKit 探究</a></p>\n<p><a href=\"https://www.jianshu.com/p/e05b43faa106\">iOS7 排版与渲染引擎</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios排版与渲染引擎textkit\"><a class=\"markdownIt-Anchor\" href=\"#ios排版与渲染引擎textkit\"></a> iOS排版与渲染引擎——TextKit</h1>\n<p><a href=\"https://www.jianshu.com/p/3f445d7f44d6\">TexkKit 探究</a></p>\n<p><a href=\"https://www.jianshu.com/p/e05b43faa106\">iOS7 排版与渲染引擎</a></p>\n"},{"_content":"# Webkit\n\n[TOC]\n\n## 1. iOS与JS交互的四种方法\n\n1. 拦截url（适用于UIWebView和WKWebView）\n2. JavaScriptCore（只适用于UIWebView，iOS7+）\n3. WKScriptMessageHandler（只适用于WKWebView，iOS8+）\n4. WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）\n\n### 1.1 方法一\n\n（1）web调用原生：\n\n```objective-c\n - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType{\n    if ([request.URL.absoluteString hasPrefix:@\"jxaction://scan\"]) {\n        //调用原生扫描二维码\n       return NO;\n    }\n        return YES;\n    }\n```\n\nH5 代码\n\n```html\n<a href=\"jxaction://scan\">扫一扫(拦截url)</a>\n```\n\n（2）原生调用js\n\n```objective-c\n[self.webView stringByEvaluatingJavaScriptFromString:@\"scanResult('我是扫描结果~')\"];\n```\n\n### 1.2 方法二 JavaScriptCore\n\n（1）js调用原生\n1、新建类继承自NSObject（如AppJSObject）。\n2、.h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。\n3、.m文件中实现2中的代理中对应的方法，可以在方法内处理事件或通知代理。\n\nAppJSObject.h\n\n```objective-c\n#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>\n\n@protocol AppJSObjectDelegate <JSExport>\n\n-(void)scan:(NSString *)message;\n\n@end\n\n@interface AppJSObject : NSObject<AppJSObjectDelegate>\n\n@property(nonatomic,weak) id<AppJSObjectDelegate> delegate;\n\n@end\n\n```\n\nAppJSObject.m\n\n```objective-c\n#import \"AppJSObject.h\"\n\n@implementation AppJSObject\n\n-(void)scan:(NSString *)message{\n    [self.delegate scan:message];\n}\n\n@end\n```\n\nH5代码：\n\n```html\n<input type=\"button\" name=\"\" value=\"扫一扫\" onclick=\"scan()\">\n<br/>\n<p id=\"result\">扫描结果：</p>\n\n<script type=\"text/javascript\">\n    //调用APP的扫描方法   h5->app\n    function scan(){\n        app.scan('scanResult');\n    }\n\n    //扫描结果回调方法    app->h5\n    function scanResult(result){\n        document.getElementById(\"result\").innerHTML = '扫描结果：' + result;  \n    }\n</script>\n```\n\n在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了\n\n```objective-c\n-(void)webViewDidFinishLoad:(UIWebView *)webView\n{\n    JSContext *context=[webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\n\n    AppJSObject *jsObject = [AppJSObject new];\n    jsObject.delegate = self;\n    context[@\"app\"] = jsObject;\n\n}\n```\n\n也可以通过block实现而不创建新类AppJSObject:\n\n```objective-c\ncontext[@\"openAlbum\"] = ^(){\n    NSLog(@\"js调用oc打开相册\");\n};\n```\n\n（2）原生调用js，可以通过一中的方法，也可以通过JSContext：\n\n```objective-c\nJSContext *context=[_mainWebView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\nNSString *alertJS= [NSString stringWithFormat:@\"%@('%@')\",_photoMethod,fileUrl];\n[context evaluateScript:alertJS];\n\n```\n\n### 1.3 方法三  WKScriptMessageHandler\n\n现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler\n\n1、初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan：\n\n```objective-c\n- (void)setupWKWebView{\n    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\n    configuration.userContentController = [[WKUserContentController alloc] init];\n    [configuration.userContentController addScriptMessageHandler:self name:@\"scan\"];\n\n    WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];\n    webView.UIDelegate = self;\n}\n```\n\nH5:\n\n```html\nwindow.webkit.messageHandlers.scan.postMessage() \n```\n\n2、实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：\n\n```objective-c\n- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message{\n    if ([message.name isEqualToString:@\"scan\"]) {\n        //调用原生扫码\n     }\n}\n```\n\n3、原生调用js\n\n```objective-c\n[self.wkWebView evaluateJavaScript:jsString  completionHandler:^(id _Nullable result, NSError * _Nullable error) {\n\n}];\n```\n\n注意一点，内存泄漏的情况，解决办法如下：\n\n```objective-c\nclass WeakScriptMessageDelegate: NSObject, WKScriptMessageHandler {\n    weak var scriptDelegate: WKScriptMessageHandler?\n    \n    init(_ scriptDelegate: WKScriptMessageHandler) {\n        self.scriptDelegate = scriptDelegate\n        super.init()\n    }\n    \n    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {\n        scriptDelegate?.userContentController(userContentController, didReceive: message)\n    }\n    \n    deinit {\n        print(\"WeakScriptMessageDelegate is deinit\")\n    }\n}\n```\n\n定义一个代理类：\n\n```objective-c\nwkWebView.configuration.userContentController.add(WeakScriptMessageDelegate.init(self), name: <方法名>)\n```\n\n### 1.4 方法四 WebViewJavascriptBridge\n\n是一个第三方框架，官方文档和demo都很完整，不再累赘\n\n*GitHub地址：*[marcuswestin/WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)\n\n*原理及源码：* [WebViewJavascriptBridge](https://github.com/ShannonChenCHN/iOSDevLevelingUp/tree/master/ReadingSourceCode/WebViewJavascriptBridgeNotes)\n\n*微信JS：*[JS-SDK](https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3&oldid=1667)\n\n## 2. 大前端\n\n1、React-Native：\n\n* [React-Native 官网](https://facebook.github.io/react-native/)\n* [React-Native 中文网](https://reactnative.cn/)\n\n2、Flutter:\n\n* [Flutter 官网](https://flutter.dev/)\n* [Flutter 中文网](https://flutterchina.club/)\n\n3、WeeX:\n\n* [WeeX 官网](https://weex.incubator.apache.org/)\n* [WeeX 中文网](https://weex.apache.org/zh/guide/introduction.html)\n","source":"_posts/学习笔记/iOS/iOS之界面显示/iOS排版之WebKit.md","raw":"# Webkit\n\n[TOC]\n\n## 1. iOS与JS交互的四种方法\n\n1. 拦截url（适用于UIWebView和WKWebView）\n2. JavaScriptCore（只适用于UIWebView，iOS7+）\n3. WKScriptMessageHandler（只适用于WKWebView，iOS8+）\n4. WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）\n\n### 1.1 方法一\n\n（1）web调用原生：\n\n```objective-c\n - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType{\n    if ([request.URL.absoluteString hasPrefix:@\"jxaction://scan\"]) {\n        //调用原生扫描二维码\n       return NO;\n    }\n        return YES;\n    }\n```\n\nH5 代码\n\n```html\n<a href=\"jxaction://scan\">扫一扫(拦截url)</a>\n```\n\n（2）原生调用js\n\n```objective-c\n[self.webView stringByEvaluatingJavaScriptFromString:@\"scanResult('我是扫描结果~')\"];\n```\n\n### 1.2 方法二 JavaScriptCore\n\n（1）js调用原生\n1、新建类继承自NSObject（如AppJSObject）。\n2、.h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。\n3、.m文件中实现2中的代理中对应的方法，可以在方法内处理事件或通知代理。\n\nAppJSObject.h\n\n```objective-c\n#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>\n\n@protocol AppJSObjectDelegate <JSExport>\n\n-(void)scan:(NSString *)message;\n\n@end\n\n@interface AppJSObject : NSObject<AppJSObjectDelegate>\n\n@property(nonatomic,weak) id<AppJSObjectDelegate> delegate;\n\n@end\n\n```\n\nAppJSObject.m\n\n```objective-c\n#import \"AppJSObject.h\"\n\n@implementation AppJSObject\n\n-(void)scan:(NSString *)message{\n    [self.delegate scan:message];\n}\n\n@end\n```\n\nH5代码：\n\n```html\n<input type=\"button\" name=\"\" value=\"扫一扫\" onclick=\"scan()\">\n<br/>\n<p id=\"result\">扫描结果：</p>\n\n<script type=\"text/javascript\">\n    //调用APP的扫描方法   h5->app\n    function scan(){\n        app.scan('scanResult');\n    }\n\n    //扫描结果回调方法    app->h5\n    function scanResult(result){\n        document.getElementById(\"result\").innerHTML = '扫描结果：' + result;  \n    }\n</script>\n```\n\n在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了\n\n```objective-c\n-(void)webViewDidFinishLoad:(UIWebView *)webView\n{\n    JSContext *context=[webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\n\n    AppJSObject *jsObject = [AppJSObject new];\n    jsObject.delegate = self;\n    context[@\"app\"] = jsObject;\n\n}\n```\n\n也可以通过block实现而不创建新类AppJSObject:\n\n```objective-c\ncontext[@\"openAlbum\"] = ^(){\n    NSLog(@\"js调用oc打开相册\");\n};\n```\n\n（2）原生调用js，可以通过一中的方法，也可以通过JSContext：\n\n```objective-c\nJSContext *context=[_mainWebView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\nNSString *alertJS= [NSString stringWithFormat:@\"%@('%@')\",_photoMethod,fileUrl];\n[context evaluateScript:alertJS];\n\n```\n\n### 1.3 方法三  WKScriptMessageHandler\n\n现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler\n\n1、初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan：\n\n```objective-c\n- (void)setupWKWebView{\n    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\n    configuration.userContentController = [[WKUserContentController alloc] init];\n    [configuration.userContentController addScriptMessageHandler:self name:@\"scan\"];\n\n    WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];\n    webView.UIDelegate = self;\n}\n```\n\nH5:\n\n```html\nwindow.webkit.messageHandlers.scan.postMessage() \n```\n\n2、实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：\n\n```objective-c\n- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message{\n    if ([message.name isEqualToString:@\"scan\"]) {\n        //调用原生扫码\n     }\n}\n```\n\n3、原生调用js\n\n```objective-c\n[self.wkWebView evaluateJavaScript:jsString  completionHandler:^(id _Nullable result, NSError * _Nullable error) {\n\n}];\n```\n\n注意一点，内存泄漏的情况，解决办法如下：\n\n```objective-c\nclass WeakScriptMessageDelegate: NSObject, WKScriptMessageHandler {\n    weak var scriptDelegate: WKScriptMessageHandler?\n    \n    init(_ scriptDelegate: WKScriptMessageHandler) {\n        self.scriptDelegate = scriptDelegate\n        super.init()\n    }\n    \n    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {\n        scriptDelegate?.userContentController(userContentController, didReceive: message)\n    }\n    \n    deinit {\n        print(\"WeakScriptMessageDelegate is deinit\")\n    }\n}\n```\n\n定义一个代理类：\n\n```objective-c\nwkWebView.configuration.userContentController.add(WeakScriptMessageDelegate.init(self), name: <方法名>)\n```\n\n### 1.4 方法四 WebViewJavascriptBridge\n\n是一个第三方框架，官方文档和demo都很完整，不再累赘\n\n*GitHub地址：*[marcuswestin/WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)\n\n*原理及源码：* [WebViewJavascriptBridge](https://github.com/ShannonChenCHN/iOSDevLevelingUp/tree/master/ReadingSourceCode/WebViewJavascriptBridgeNotes)\n\n*微信JS：*[JS-SDK](https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3&oldid=1667)\n\n## 2. 大前端\n\n1、React-Native：\n\n* [React-Native 官网](https://facebook.github.io/react-native/)\n* [React-Native 中文网](https://reactnative.cn/)\n\n2、Flutter:\n\n* [Flutter 官网](https://flutter.dev/)\n* [Flutter 中文网](https://flutterchina.club/)\n\n3、WeeX:\n\n* [WeeX 官网](https://weex.incubator.apache.org/)\n* [WeeX 中文网](https://weex.apache.org/zh/guide/introduction.html)\n","slug":"学习笔记/iOS/iOS之界面显示/iOS排版之WebKit","published":1,"date":"2021-04-08T14:44:22.559Z","updated":"2021-04-08T14:44:22.559Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ti30025w37ugd8y83h3","content":"<h1 id=\"webkit\"><a class=\"markdownIt-Anchor\" href=\"#webkit\"></a> Webkit</h1>\n<p>[TOC]</p>\n<h2 id=\"1-ios与js交互的四种方法\"><a class=\"markdownIt-Anchor\" href=\"#1-ios与js交互的四种方法\"></a> 1. iOS与JS交互的四种方法</h2>\n<ol>\n<li>拦截url（适用于UIWebView和WKWebView）</li>\n<li>JavaScriptCore（只适用于UIWebView，iOS7+）</li>\n<li>WKScriptMessageHandler（只适用于WKWebView，iOS8+）</li>\n<li>WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）</li>\n</ol>\n<h3 id=\"11-方法一\"><a class=\"markdownIt-Anchor\" href=\"#11-方法一\"></a> 1.1 方法一</h3>\n<p>（1）web调用原生：</p>\n<pre class=\"highlight\"><code class=\"objective-c\"> - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType&#123;\n    if ([request.URL.absoluteString hasPrefix:@&quot;jxaction://scan&quot;]) &#123;\n        //调用原生扫描二维码\n       return NO;\n    &#125;\n        return YES;\n    &#125;\n</code></pre>\n<p>H5 代码</p>\n<pre class=\"highlight\"><code class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"jxaction://scan\"</span>&gt;</span>扫一扫(拦截url)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<p>（2）原生调用js</p>\n<pre class=\"highlight\"><code class=\"objective-c\">[self.webView stringByEvaluatingJavaScriptFromString:@&quot;scanResult('我是扫描结果~')&quot;];\n</code></pre>\n<h3 id=\"12-方法二-javascriptcore\"><a class=\"markdownIt-Anchor\" href=\"#12-方法二-javascriptcore\"></a> 1.2 方法二 JavaScriptCore</h3>\n<p>（1）js调用原生<br />\n1、新建类继承自NSObject（如AppJSObject）。<br />\n2、.h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。<br />\n3、.m文件中实现2中的代理中对应的方法，可以在方法内处理事件或通知代理。</p>\n<p>AppJSObject.h</p>\n<pre class=\"highlight\"><code class=\"objective-c\">#import &lt;Foundation/Foundation.h&gt;\n#import &lt;JavaScriptCore/JavaScriptCore.h&gt;\n\n@protocol AppJSObjectDelegate &lt;JSExport&gt;\n\n-(void)scan:(NSString *)message;\n\n@end\n\n@interface AppJSObject : NSObject&lt;AppJSObjectDelegate&gt;\n\n@property(nonatomic,weak) id&lt;AppJSObjectDelegate&gt; delegate;\n\n@end\n\n</code></pre>\n<p>AppJSObject.m</p>\n<pre class=\"highlight\"><code class=\"objective-c\">#import &quot;AppJSObject.h&quot;\n\n@implementation AppJSObject\n\n-(void)scan:(NSString *)message&#123;\n    [self.delegate scan:message];\n&#125;\n\n@end\n</code></pre>\n<p>H5代码：</p>\n<pre class=\"highlight\"><code class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"扫一扫\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"scan()\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"result\"</span>&gt;</span>扫描结果：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-comment\">//调用APP的扫描方法   h5-&gt;app</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">scan</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        app.scan(<span class=\"hljs-string\">'scanResult'</span>);\n    &#125;\n\n    <span class=\"hljs-comment\">//扫描结果回调方法    app-&gt;h5</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">scanResult</span>(<span class=\"hljs-params\">result</span>)</span>&#123;\n        <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"result\"</span>).innerHTML = <span class=\"hljs-string\">'扫描结果：'</span> + result;  \n    &#125;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了</p>\n<pre class=\"highlight\"><code class=\"objective-c\">-(void)webViewDidFinishLoad:(UIWebView *)webView\n&#123;\n    JSContext *context=[webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];\n\n    AppJSObject *jsObject = [AppJSObject new];\n    jsObject.delegate = self;\n    context[@&quot;app&quot;] = jsObject;\n\n&#125;\n</code></pre>\n<p>也可以通过block实现而不创建新类AppJSObject:</p>\n<pre class=\"highlight\"><code class=\"objective-c\">context[@&quot;openAlbum&quot;] = ^()&#123;\n    NSLog(@&quot;js调用oc打开相册&quot;);\n&#125;;\n</code></pre>\n<p>（2）原生调用js，可以通过一中的方法，也可以通过JSContext：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">JSContext *context=[_mainWebView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];\nNSString *alertJS= [NSString stringWithFormat:@&quot;%@('%@')&quot;,_photoMethod,fileUrl];\n[context evaluateScript:alertJS];\n\n</code></pre>\n<h3 id=\"13-方法三-wkscriptmessagehandler\"><a class=\"markdownIt-Anchor\" href=\"#13-方法三-wkscriptmessagehandler\"></a> 1.3 方法三  WKScriptMessageHandler</h3>\n<p>现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler</p>\n<p>1、初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">- (void)setupWKWebView&#123;\n    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\n    configuration.userContentController = [[WKUserContentController alloc] init];\n    [configuration.userContentController addScriptMessageHandler:self name:@&quot;scan&quot;];\n\n    WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];\n    webView.UIDelegate = self;\n&#125;\n</code></pre>\n<p>H5:</p>\n<pre class=\"highlight\"><code class=\"html\">window.webkit.messageHandlers.scan.postMessage() \n</code></pre>\n<p>2、实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message&#123;\n    if ([message.name isEqualToString:@&quot;scan&quot;]) &#123;\n        //调用原生扫码\n     &#125;\n&#125;\n</code></pre>\n<p>3、原生调用js</p>\n<pre class=\"highlight\"><code class=\"objective-c\">[self.wkWebView evaluateJavaScript:jsString  completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;\n\n&#125;];\n</code></pre>\n<p>注意一点，内存泄漏的情况，解决办法如下：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">class WeakScriptMessageDelegate: NSObject, WKScriptMessageHandler &#123;\n    weak var scriptDelegate: WKScriptMessageHandler?\n    \n    init(_ scriptDelegate: WKScriptMessageHandler) &#123;\n        self.scriptDelegate = scriptDelegate\n        super.init()\n    &#125;\n    \n    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) &#123;\n        scriptDelegate?.userContentController(userContentController, didReceive: message)\n    &#125;\n    \n    deinit &#123;\n        print(&quot;WeakScriptMessageDelegate is deinit&quot;)\n    &#125;\n&#125;\n</code></pre>\n<p>定义一个代理类：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">wkWebView.configuration.userContentController.add(WeakScriptMessageDelegate.init(self), name: &lt;方法名&gt;)\n</code></pre>\n<h3 id=\"14-方法四-webviewjavascriptbridge\"><a class=\"markdownIt-Anchor\" href=\"#14-方法四-webviewjavascriptbridge\"></a> 1.4 方法四 WebViewJavascriptBridge</h3>\n<p>是一个第三方框架，官方文档和demo都很完整，不再累赘</p>\n<p><em>GitHub地址：</em><a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">marcuswestin/WebViewJavascriptBridge</a></p>\n<p><em>原理及源码：</em> <a href=\"https://github.com/ShannonChenCHN/iOSDevLevelingUp/tree/master/ReadingSourceCode/WebViewJavascriptBridgeNotes\">WebViewJavascriptBridge</a></p>\n<p><em>微信JS：</em><a href=\"https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3&amp;oldid=1667\">JS-SDK</a></p>\n<h2 id=\"2-大前端\"><a class=\"markdownIt-Anchor\" href=\"#2-大前端\"></a> 2. 大前端</h2>\n<p>1、React-Native：</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react-native/\">React-Native 官网</a></li>\n<li><a href=\"https://reactnative.cn/\">React-Native 中文网</a></li>\n</ul>\n<p>2、Flutter:</p>\n<ul>\n<li><a href=\"https://flutter.dev/\">Flutter 官网</a></li>\n<li><a href=\"https://flutterchina.club/\">Flutter 中文网</a></li>\n</ul>\n<p>3、WeeX:</p>\n<ul>\n<li><a href=\"https://weex.incubator.apache.org/\">WeeX 官网</a></li>\n<li><a href=\"https://weex.apache.org/zh/guide/introduction.html\">WeeX 中文网</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webkit\"><a class=\"markdownIt-Anchor\" href=\"#webkit\"></a> Webkit</h1>\n<p>[TOC]</p>\n<h2 id=\"1-ios与js交互的四种方法\"><a class=\"markdownIt-Anchor\" href=\"#1-ios与js交互的四种方法\"></a> 1. iOS与JS交互的四种方法</h2>\n<ol>\n<li>拦截url（适用于UIWebView和WKWebView）</li>\n<li>JavaScriptCore（只适用于UIWebView，iOS7+）</li>\n<li>WKScriptMessageHandler（只适用于WKWebView，iOS8+）</li>\n<li>WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）</li>\n</ol>\n<h3 id=\"11-方法一\"><a class=\"markdownIt-Anchor\" href=\"#11-方法一\"></a> 1.1 方法一</h3>\n<p>（1）web调用原生：</p>\n<pre class=\"highlight\"><code class=\"objective-c\"> - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType&#123;\n    if ([request.URL.absoluteString hasPrefix:@&quot;jxaction://scan&quot;]) &#123;\n        //调用原生扫描二维码\n       return NO;\n    &#125;\n        return YES;\n    &#125;\n</code></pre>\n<p>H5 代码</p>\n<pre class=\"highlight\"><code class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"jxaction://scan\"</span>&gt;</span>扫一扫(拦截url)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<p>（2）原生调用js</p>\n<pre class=\"highlight\"><code class=\"objective-c\">[self.webView stringByEvaluatingJavaScriptFromString:@&quot;scanResult('我是扫描结果~')&quot;];\n</code></pre>\n<h3 id=\"12-方法二-javascriptcore\"><a class=\"markdownIt-Anchor\" href=\"#12-方法二-javascriptcore\"></a> 1.2 方法二 JavaScriptCore</h3>\n<p>（1）js调用原生<br />\n1、新建类继承自NSObject（如AppJSObject）。<br />\n2、.h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。<br />\n3、.m文件中实现2中的代理中对应的方法，可以在方法内处理事件或通知代理。</p>\n<p>AppJSObject.h</p>\n<pre class=\"highlight\"><code class=\"objective-c\">#import &lt;Foundation/Foundation.h&gt;\n#import &lt;JavaScriptCore/JavaScriptCore.h&gt;\n\n@protocol AppJSObjectDelegate &lt;JSExport&gt;\n\n-(void)scan:(NSString *)message;\n\n@end\n\n@interface AppJSObject : NSObject&lt;AppJSObjectDelegate&gt;\n\n@property(nonatomic,weak) id&lt;AppJSObjectDelegate&gt; delegate;\n\n@end\n\n</code></pre>\n<p>AppJSObject.m</p>\n<pre class=\"highlight\"><code class=\"objective-c\">#import &quot;AppJSObject.h&quot;\n\n@implementation AppJSObject\n\n-(void)scan:(NSString *)message&#123;\n    [self.delegate scan:message];\n&#125;\n\n@end\n</code></pre>\n<p>H5代码：</p>\n<pre class=\"highlight\"><code class=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"扫一扫\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"scan()\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"result\"</span>&gt;</span>扫描结果：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-comment\">//调用APP的扫描方法   h5-&gt;app</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">scan</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n        app.scan(<span class=\"hljs-string\">'scanResult'</span>);\n    &#125;\n\n    <span class=\"hljs-comment\">//扫描结果回调方法    app-&gt;h5</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">scanResult</span>(<span class=\"hljs-params\">result</span>)</span>&#123;\n        <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"result\"</span>).innerHTML = <span class=\"hljs-string\">'扫描结果：'</span> + result;  \n    &#125;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了</p>\n<pre class=\"highlight\"><code class=\"objective-c\">-(void)webViewDidFinishLoad:(UIWebView *)webView\n&#123;\n    JSContext *context=[webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];\n\n    AppJSObject *jsObject = [AppJSObject new];\n    jsObject.delegate = self;\n    context[@&quot;app&quot;] = jsObject;\n\n&#125;\n</code></pre>\n<p>也可以通过block实现而不创建新类AppJSObject:</p>\n<pre class=\"highlight\"><code class=\"objective-c\">context[@&quot;openAlbum&quot;] = ^()&#123;\n    NSLog(@&quot;js调用oc打开相册&quot;);\n&#125;;\n</code></pre>\n<p>（2）原生调用js，可以通过一中的方法，也可以通过JSContext：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">JSContext *context=[_mainWebView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];\nNSString *alertJS= [NSString stringWithFormat:@&quot;%@('%@')&quot;,_photoMethod,fileUrl];\n[context evaluateScript:alertJS];\n\n</code></pre>\n<h3 id=\"13-方法三-wkscriptmessagehandler\"><a class=\"markdownIt-Anchor\" href=\"#13-方法三-wkscriptmessagehandler\"></a> 1.3 方法三  WKScriptMessageHandler</h3>\n<p>现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler</p>\n<p>1、初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">- (void)setupWKWebView&#123;\n    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\n    configuration.userContentController = [[WKUserContentController alloc] init];\n    [configuration.userContentController addScriptMessageHandler:self name:@&quot;scan&quot;];\n\n    WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];\n    webView.UIDelegate = self;\n&#125;\n</code></pre>\n<p>H5:</p>\n<pre class=\"highlight\"><code class=\"html\">window.webkit.messageHandlers.scan.postMessage() \n</code></pre>\n<p>2、实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message&#123;\n    if ([message.name isEqualToString:@&quot;scan&quot;]) &#123;\n        //调用原生扫码\n     &#125;\n&#125;\n</code></pre>\n<p>3、原生调用js</p>\n<pre class=\"highlight\"><code class=\"objective-c\">[self.wkWebView evaluateJavaScript:jsString  completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;\n\n&#125;];\n</code></pre>\n<p>注意一点，内存泄漏的情况，解决办法如下：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">class WeakScriptMessageDelegate: NSObject, WKScriptMessageHandler &#123;\n    weak var scriptDelegate: WKScriptMessageHandler?\n    \n    init(_ scriptDelegate: WKScriptMessageHandler) &#123;\n        self.scriptDelegate = scriptDelegate\n        super.init()\n    &#125;\n    \n    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) &#123;\n        scriptDelegate?.userContentController(userContentController, didReceive: message)\n    &#125;\n    \n    deinit &#123;\n        print(&quot;WeakScriptMessageDelegate is deinit&quot;)\n    &#125;\n&#125;\n</code></pre>\n<p>定义一个代理类：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">wkWebView.configuration.userContentController.add(WeakScriptMessageDelegate.init(self), name: &lt;方法名&gt;)\n</code></pre>\n<h3 id=\"14-方法四-webviewjavascriptbridge\"><a class=\"markdownIt-Anchor\" href=\"#14-方法四-webviewjavascriptbridge\"></a> 1.4 方法四 WebViewJavascriptBridge</h3>\n<p>是一个第三方框架，官方文档和demo都很完整，不再累赘</p>\n<p><em>GitHub地址：</em><a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">marcuswestin/WebViewJavascriptBridge</a></p>\n<p><em>原理及源码：</em> <a href=\"https://github.com/ShannonChenCHN/iOSDevLevelingUp/tree/master/ReadingSourceCode/WebViewJavascriptBridgeNotes\">WebViewJavascriptBridge</a></p>\n<p><em>微信JS：</em><a href=\"https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3&amp;oldid=1667\">JS-SDK</a></p>\n<h2 id=\"2-大前端\"><a class=\"markdownIt-Anchor\" href=\"#2-大前端\"></a> 2. 大前端</h2>\n<p>1、React-Native：</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react-native/\">React-Native 官网</a></li>\n<li><a href=\"https://reactnative.cn/\">React-Native 中文网</a></li>\n</ul>\n<p>2、Flutter:</p>\n<ul>\n<li><a href=\"https://flutter.dev/\">Flutter 官网</a></li>\n<li><a href=\"https://flutterchina.club/\">Flutter 中文网</a></li>\n</ul>\n<p>3、WeeX:</p>\n<ul>\n<li><a href=\"https://weex.incubator.apache.org/\">WeeX 官网</a></li>\n<li><a href=\"https://weex.apache.org/zh/guide/introduction.html\">WeeX 中文网</a></li>\n</ul>\n"},{"_content":"# iOS自动布局\n\n[TOC]\n\n## 1. 基础\n\n|型号 | 屏幕尺寸（inch）|逻辑分辨率（point）|缩放因子（scale factor）|物理分辨率（pixel）|像素密度（PPI）\n| --- | --- | --- |--- | --- | --- |\n|iPhone3GS | 3.5 | 320 * 480 | @1x | 320 * 480 | 163 |\n|iPhone4/4s | 3.5 | 320 * 480 | @2x | 640 * 960 | 326 |\n|iPhone5/5s |4| 320 * 568| @2x |640 * 1136| 326|\n|iPhone6/6s| 4.7| 375 * 667| @2x| 750 * 1334 |326|\n|iPhone6Plus/6s Plus| 5.5| 414 * 736| @3x| 1242 * 2208| 401|\n\n物理分辨率、逻辑分辨率、像素密度：\n\n```latex\nPPI = 根号(X*X + Y*Y) / Inch = 163 pixcel/inch\n    \nscale= 单位长度内的数量比(pixel/point)\n```\n\n## 2. Frame\n\n* bounds\n* frame\n* anchor\n* position\n\nframe：与view中的frame概念相同，（x,y）subLayer左上角相对于supLayer坐标系的位置关系；width, height表示subLayer的宽度和高度。\n\nbounds：与view中的bounds概念相同，（x,y）subLayer左上角相对于自身坐标系的关系；width, height表示subLayer的宽度和高度。\n\nposition：锚点在supLayer坐标系中的位置；\n\nanchorPoint：锚点在自身坐标系中的相对位置，默认值为（0.5，0.5），左上角为（0，0），右下角为（1，1），其他位置以此类推；锚点都是对于自身来讲的. 确定自身的锚点,通常用于做相对的tranform变换.当然也可以用来确定位置；\n\n规律如下\n\n```objective-c\nposition.x = frame.origin.x + anchorPoint.x * frame.size.width；      \n\nposition.y = frame.origin.y + anchorPoint.y * frame.size.height；\n\nframe.size.width = bounds.size.width\n\nframe.size.height = bounds.size.height\n\nframe.origin.x = anchorPoint.x * frame.size.width - position.x；\n\nframe.origin.y = anchorPoint.y * frame.size.height - position.y；\n```\n\n## 3. 约束布局\n\n3.1 Autolayout\n\n引入了几个变量，一个是Top/Bottom Layout Guide（顶部/底部导航），一个是Superview.leading/Trailing Margin（左/右边缘间距）。Top Layout Guide其实是指的根视图的顶部，模拟器在竖屏下有状态栏，状态栏默认高度为20(注:导航栏与状态栏高度不同，导航栏的竖屏默认高度为44，横屏默认高度为32)，则Green View的Y坐标就是20 + 20 = 40。模拟器在横屏下没有状态栏，则Top Layout Guide.Bottom为0，则Green View的Y坐标就是20。Superview.leading Margin在竖屏时为16，横屏是为20。**这些在最新版的iOS有变化！**\n\n**ICS：** 自身内容尺寸(Intrinsic Content Size，以下简称ICS)。\n\nlabel， button， text fields等都是有ICS的，而UIView和NSView是没有ICS的。\n\n View | Intrinsic content size\n ------------|----------\n UIView and NSView | No intrinsic content size.\n Sliders | Defines only the width (iOS).\n Labels, buttons, switches, and text fields | Defines both the height and the width.\n Text views and image views | Intrinsic content size can vary.\n\n**CRCH：** 抗压缩抗拉伸(Compression-Resistance and Content-Hugging，以下简称CRCH)\n\n![autolayout_hugging](resources/autolayout_hugging.png)\n\n**原文：**[Auto Layout基本原理](https://www.jianshu.com/p/c6541ff0bdaf)\n\n**3.2 实现方式：**\n\n* NSLayoutConstraint\n\n```objective-c\nNSLayoutConstraint.init(item: btn,\n                        attribute: NSLayoutAttribute.top,\n                        relatedBy: NSLayoutRelation.equal,\n                        toItem: view,\n                        attribute: NSLayoutAttribute.top,\n                        multiplier: 1,\n                        constant: 180)\n添加： NSLayoutConstraint.activate(hConstraints)\n```\n\n* NSLayoutConstraintAnchor\n* VFL\n\n| 功能 | 表达式 |\n| --- | --- |\n|水平方向 | H: |\n|垂直方向 | V: |\n|Views| [view]|\n|关系 | >=,==,<= |\n|SuperView|  \\| |\n|空间，间隙 -| -|\n|优先级 | @value|\n\n```objective-c\nlet hMetrics = [\"middleSpace\": 10, \"rightSpace\": 20]\nlet hViews = [\"label\": label, \"btn\": btn]\nlet hVFL = \"H:[label]-middleSpace-[btn]-rightSpace-|\"\nlet hConstraints:[NSLayoutConstraint] = NSLayoutConstraint.constraints(withVisualFormat: hVFL,\n                                        options: NSLayoutFormatOptions.directionLeadingToTrailing,\n                                        metrics: hMetrics,\n                                        views: hViews)\n添加：NSLayoutConstraint.activate(hConstraints)\n```\n\n* Masonry、SnapKit\n* Stack Views\n* AutoLayout Xib\n* [Self-Size-Cell](https://www.appcoda.com/self-sizing-cells/)\n\n**3.3 布局过程：**\n\n```\nupdateConstraints -> layoutSubViews -> drawRect\n\n    |\n    |\n    V\n\n约束变化 -> Deferred Layout Pass -> Run Loop\n\n    |\n    |\n    V\n\nActivating或Deactivating\n设置constant或priority\n添加和删除视图\n```\n\n## 4. 注意点\n\n1、优先级：默认优先级\n2、scrollView 等滚动视图添加优先级特例\n3、视图先添加到俯视图上去\n4、translatesAutoresizingMaskIntoConstraints 属性\n\n参考：\n1、[深入剖析Auto Layout](https://www.jianshu.com/p/d060bef3d620)\n","source":"_posts/学习笔记/iOS/iOS之界面显示/iOS自动布局.md","raw":"# iOS自动布局\n\n[TOC]\n\n## 1. 基础\n\n|型号 | 屏幕尺寸（inch）|逻辑分辨率（point）|缩放因子（scale factor）|物理分辨率（pixel）|像素密度（PPI）\n| --- | --- | --- |--- | --- | --- |\n|iPhone3GS | 3.5 | 320 * 480 | @1x | 320 * 480 | 163 |\n|iPhone4/4s | 3.5 | 320 * 480 | @2x | 640 * 960 | 326 |\n|iPhone5/5s |4| 320 * 568| @2x |640 * 1136| 326|\n|iPhone6/6s| 4.7| 375 * 667| @2x| 750 * 1334 |326|\n|iPhone6Plus/6s Plus| 5.5| 414 * 736| @3x| 1242 * 2208| 401|\n\n物理分辨率、逻辑分辨率、像素密度：\n\n```latex\nPPI = 根号(X*X + Y*Y) / Inch = 163 pixcel/inch\n    \nscale= 单位长度内的数量比(pixel/point)\n```\n\n## 2. Frame\n\n* bounds\n* frame\n* anchor\n* position\n\nframe：与view中的frame概念相同，（x,y）subLayer左上角相对于supLayer坐标系的位置关系；width, height表示subLayer的宽度和高度。\n\nbounds：与view中的bounds概念相同，（x,y）subLayer左上角相对于自身坐标系的关系；width, height表示subLayer的宽度和高度。\n\nposition：锚点在supLayer坐标系中的位置；\n\nanchorPoint：锚点在自身坐标系中的相对位置，默认值为（0.5，0.5），左上角为（0，0），右下角为（1，1），其他位置以此类推；锚点都是对于自身来讲的. 确定自身的锚点,通常用于做相对的tranform变换.当然也可以用来确定位置；\n\n规律如下\n\n```objective-c\nposition.x = frame.origin.x + anchorPoint.x * frame.size.width；      \n\nposition.y = frame.origin.y + anchorPoint.y * frame.size.height；\n\nframe.size.width = bounds.size.width\n\nframe.size.height = bounds.size.height\n\nframe.origin.x = anchorPoint.x * frame.size.width - position.x；\n\nframe.origin.y = anchorPoint.y * frame.size.height - position.y；\n```\n\n## 3. 约束布局\n\n3.1 Autolayout\n\n引入了几个变量，一个是Top/Bottom Layout Guide（顶部/底部导航），一个是Superview.leading/Trailing Margin（左/右边缘间距）。Top Layout Guide其实是指的根视图的顶部，模拟器在竖屏下有状态栏，状态栏默认高度为20(注:导航栏与状态栏高度不同，导航栏的竖屏默认高度为44，横屏默认高度为32)，则Green View的Y坐标就是20 + 20 = 40。模拟器在横屏下没有状态栏，则Top Layout Guide.Bottom为0，则Green View的Y坐标就是20。Superview.leading Margin在竖屏时为16，横屏是为20。**这些在最新版的iOS有变化！**\n\n**ICS：** 自身内容尺寸(Intrinsic Content Size，以下简称ICS)。\n\nlabel， button， text fields等都是有ICS的，而UIView和NSView是没有ICS的。\n\n View | Intrinsic content size\n ------------|----------\n UIView and NSView | No intrinsic content size.\n Sliders | Defines only the width (iOS).\n Labels, buttons, switches, and text fields | Defines both the height and the width.\n Text views and image views | Intrinsic content size can vary.\n\n**CRCH：** 抗压缩抗拉伸(Compression-Resistance and Content-Hugging，以下简称CRCH)\n\n![autolayout_hugging](resources/autolayout_hugging.png)\n\n**原文：**[Auto Layout基本原理](https://www.jianshu.com/p/c6541ff0bdaf)\n\n**3.2 实现方式：**\n\n* NSLayoutConstraint\n\n```objective-c\nNSLayoutConstraint.init(item: btn,\n                        attribute: NSLayoutAttribute.top,\n                        relatedBy: NSLayoutRelation.equal,\n                        toItem: view,\n                        attribute: NSLayoutAttribute.top,\n                        multiplier: 1,\n                        constant: 180)\n添加： NSLayoutConstraint.activate(hConstraints)\n```\n\n* NSLayoutConstraintAnchor\n* VFL\n\n| 功能 | 表达式 |\n| --- | --- |\n|水平方向 | H: |\n|垂直方向 | V: |\n|Views| [view]|\n|关系 | >=,==,<= |\n|SuperView|  \\| |\n|空间，间隙 -| -|\n|优先级 | @value|\n\n```objective-c\nlet hMetrics = [\"middleSpace\": 10, \"rightSpace\": 20]\nlet hViews = [\"label\": label, \"btn\": btn]\nlet hVFL = \"H:[label]-middleSpace-[btn]-rightSpace-|\"\nlet hConstraints:[NSLayoutConstraint] = NSLayoutConstraint.constraints(withVisualFormat: hVFL,\n                                        options: NSLayoutFormatOptions.directionLeadingToTrailing,\n                                        metrics: hMetrics,\n                                        views: hViews)\n添加：NSLayoutConstraint.activate(hConstraints)\n```\n\n* Masonry、SnapKit\n* Stack Views\n* AutoLayout Xib\n* [Self-Size-Cell](https://www.appcoda.com/self-sizing-cells/)\n\n**3.3 布局过程：**\n\n```\nupdateConstraints -> layoutSubViews -> drawRect\n\n    |\n    |\n    V\n\n约束变化 -> Deferred Layout Pass -> Run Loop\n\n    |\n    |\n    V\n\nActivating或Deactivating\n设置constant或priority\n添加和删除视图\n```\n\n## 4. 注意点\n\n1、优先级：默认优先级\n2、scrollView 等滚动视图添加优先级特例\n3、视图先添加到俯视图上去\n4、translatesAutoresizingMaskIntoConstraints 属性\n\n参考：\n1、[深入剖析Auto Layout](https://www.jianshu.com/p/d060bef3d620)\n","slug":"学习笔记/iOS/iOS之界面显示/iOS自动布局","published":1,"date":"2021-04-09T13:04:02.211Z","updated":"2021-04-09T13:04:02.212Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ti30026w37uagnecb5z","content":"<h1 id=\"ios自动布局\"><a class=\"markdownIt-Anchor\" href=\"#ios自动布局\"></a> iOS自动布局</h1>\n<p>[TOC]</p>\n<h2 id=\"1-基础\"><a class=\"markdownIt-Anchor\" href=\"#1-基础\"></a> 1. 基础</h2>\n<table>\n<thead>\n<tr>\n<th>型号</th>\n<th>屏幕尺寸（inch）</th>\n<th>逻辑分辨率（point）</th>\n<th>缩放因子（scale factor）</th>\n<th>物理分辨率（pixel）</th>\n<th>像素密度（PPI）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>iPhone3GS</td>\n<td>3.5</td>\n<td>320 * 480</td>\n<td>@1x</td>\n<td>320 * 480</td>\n<td>163</td>\n</tr>\n<tr>\n<td>iPhone4/4s</td>\n<td>3.5</td>\n<td>320 * 480</td>\n<td>@2x</td>\n<td>640 * 960</td>\n<td>326</td>\n</tr>\n<tr>\n<td>iPhone5/5s</td>\n<td>4</td>\n<td>320 * 568</td>\n<td>@2x</td>\n<td>640 * 1136</td>\n<td>326</td>\n</tr>\n<tr>\n<td>iPhone6/6s</td>\n<td>4.7</td>\n<td>375 * 667</td>\n<td>@2x</td>\n<td>750 * 1334</td>\n<td>326</td>\n</tr>\n<tr>\n<td>iPhone6Plus/6s Plus</td>\n<td>5.5</td>\n<td>414 * 736</td>\n<td>@3x</td>\n<td>1242 * 2208</td>\n<td>401</td>\n</tr>\n</tbody>\n</table>\n<p>物理分辨率、逻辑分辨率、像素密度：</p>\n<pre class=\"highlight\"><code class=\"latex\">PPI = 根号(X*X + Y*Y) / Inch = 163 pixcel/inch\n    \nscale= 单位长度内的数量比(pixel/point)\n</code></pre>\n<h2 id=\"2-frame\"><a class=\"markdownIt-Anchor\" href=\"#2-frame\"></a> 2. Frame</h2>\n<ul>\n<li>bounds</li>\n<li>frame</li>\n<li>anchor</li>\n<li>position</li>\n</ul>\n<p>frame：与view中的frame概念相同，（x,y）subLayer左上角相对于supLayer坐标系的位置关系；width, height表示subLayer的宽度和高度。</p>\n<p>bounds：与view中的bounds概念相同，（x,y）subLayer左上角相对于自身坐标系的关系；width, height表示subLayer的宽度和高度。</p>\n<p>position：锚点在supLayer坐标系中的位置；</p>\n<p>anchorPoint：锚点在自身坐标系中的相对位置，默认值为（0.5，0.5），左上角为（0，0），右下角为（1，1），其他位置以此类推；锚点都是对于自身来讲的. 确定自身的锚点,通常用于做相对的tranform变换.当然也可以用来确定位置；</p>\n<p>规律如下</p>\n<pre class=\"highlight\"><code class=\"objective-c\">position.x = frame.origin.x + anchorPoint.x * frame.size.width；      \n\nposition.y = frame.origin.y + anchorPoint.y * frame.size.height；\n\nframe.size.width = bounds.size.width\n\nframe.size.height = bounds.size.height\n\nframe.origin.x = anchorPoint.x * frame.size.width - position.x；\n\nframe.origin.y = anchorPoint.y * frame.size.height - position.y；\n</code></pre>\n<h2 id=\"3-约束布局\"><a class=\"markdownIt-Anchor\" href=\"#3-约束布局\"></a> 3. 约束布局</h2>\n<p>3.1 Autolayout</p>\n<p>引入了几个变量，一个是Top/Bottom Layout Guide（顶部/底部导航），一个是Superview.leading/Trailing Margin（左/右边缘间距）。Top Layout Guide其实是指的根视图的顶部，模拟器在竖屏下有状态栏，状态栏默认高度为20(注:导航栏与状态栏高度不同，导航栏的竖屏默认高度为44，横屏默认高度为32)，则Green View的Y坐标就是20 + 20 = 40。模拟器在横屏下没有状态栏，则Top Layout Guide.Bottom为0，则Green View的Y坐标就是20。Superview.leading Margin在竖屏时为16，横屏是为20。<strong>这些在最新版的iOS有变化！</strong></p>\n<p><strong>ICS：</strong> 自身内容尺寸(Intrinsic Content Size，以下简称ICS)。</p>\n<p>label， button， text fields等都是有ICS的，而UIView和NSView是没有ICS的。</p>\n<table>\n<thead>\n<tr>\n<th>View</th>\n<th>Intrinsic content size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>UIView and NSView</td>\n<td>No intrinsic content size.</td>\n</tr>\n<tr>\n<td>Sliders</td>\n<td>Defines only the width (iOS).</td>\n</tr>\n<tr>\n<td>Labels, buttons, switches, and text fields</td>\n<td>Defines both the height and the width.</td>\n</tr>\n<tr>\n<td>Text views and image views</td>\n<td>Intrinsic content size can vary.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>CRCH：</strong> 抗压缩抗拉伸(Compression-Resistance and Content-Hugging，以下简称CRCH)</p>\n<p><img src=\"resources/autolayout_hugging.png\" alt=\"autolayout_hugging\" /></p>\n<p><strong>原文：</strong><a href=\"https://www.jianshu.com/p/c6541ff0bdaf\">Auto Layout基本原理</a></p>\n<p><strong>3.2 实现方式：</strong></p>\n<ul>\n<li>NSLayoutConstraint</li>\n</ul>\n<pre class=\"highlight\"><code class=\"objective-c\">NSLayoutConstraint.init(item: btn,\n                        attribute: NSLayoutAttribute.top,\n                        relatedBy: NSLayoutRelation.equal,\n                        toItem: view,\n                        attribute: NSLayoutAttribute.top,\n                        multiplier: 1,\n                        constant: 180)\n添加： NSLayoutConstraint.activate(hConstraints)\n</code></pre>\n<ul>\n<li>NSLayoutConstraintAnchor</li>\n<li>VFL</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>表达式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>水平方向</td>\n<td>H:</td>\n</tr>\n<tr>\n<td>垂直方向</td>\n<td>V:</td>\n</tr>\n<tr>\n<td>Views</td>\n<td>[view]</td>\n</tr>\n<tr>\n<td>关系</td>\n<td>&gt;=,==,&lt;=</td>\n</tr>\n<tr>\n<td>SuperView</td>\n<td>|</td>\n</tr>\n<tr>\n<td>空间，间隙 -</td>\n<td>-</td>\n</tr>\n<tr>\n<td>优先级</td>\n<td>@value</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"highlight\"><code class=\"objective-c\">let hMetrics = [&quot;middleSpace&quot;: 10, &quot;rightSpace&quot;: 20]\nlet hViews = [&quot;label&quot;: label, &quot;btn&quot;: btn]\nlet hVFL = &quot;H:[label]-middleSpace-[btn]-rightSpace-|&quot;\nlet hConstraints:[NSLayoutConstraint] = NSLayoutConstraint.constraints(withVisualFormat: hVFL,\n                                        options: NSLayoutFormatOptions.directionLeadingToTrailing,\n                                        metrics: hMetrics,\n                                        views: hViews)\n添加：NSLayoutConstraint.activate(hConstraints)\n</code></pre>\n<ul>\n<li>Masonry、SnapKit</li>\n<li>Stack Views</li>\n<li>AutoLayout Xib</li>\n<li><a href=\"https://www.appcoda.com/self-sizing-cells/\">Self-Size-Cell</a></li>\n</ul>\n<p><strong>3.3 布局过程：</strong></p>\n<pre class=\"highlight\"><code class=\"\">updateConstraints -&gt; layoutSubViews -&gt; drawRect\n\n    |\n    |\n    V\n\n约束变化 -&gt; Deferred Layout Pass -&gt; Run Loop\n\n    |\n    |\n    V\n\nActivating或Deactivating\n设置constant或priority\n添加和删除视图\n</code></pre>\n<h2 id=\"4-注意点\"><a class=\"markdownIt-Anchor\" href=\"#4-注意点\"></a> 4. 注意点</h2>\n<p>1、优先级：默认优先级<br />\n2、scrollView 等滚动视图添加优先级特例<br />\n3、视图先添加到俯视图上去<br />\n4、translatesAutoresizingMaskIntoConstraints 属性</p>\n<p>参考：<br />\n1、<a href=\"https://www.jianshu.com/p/d060bef3d620\">深入剖析Auto Layout</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios自动布局\"><a class=\"markdownIt-Anchor\" href=\"#ios自动布局\"></a> iOS自动布局</h1>\n<p>[TOC]</p>\n<h2 id=\"1-基础\"><a class=\"markdownIt-Anchor\" href=\"#1-基础\"></a> 1. 基础</h2>\n<table>\n<thead>\n<tr>\n<th>型号</th>\n<th>屏幕尺寸（inch）</th>\n<th>逻辑分辨率（point）</th>\n<th>缩放因子（scale factor）</th>\n<th>物理分辨率（pixel）</th>\n<th>像素密度（PPI）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>iPhone3GS</td>\n<td>3.5</td>\n<td>320 * 480</td>\n<td>@1x</td>\n<td>320 * 480</td>\n<td>163</td>\n</tr>\n<tr>\n<td>iPhone4/4s</td>\n<td>3.5</td>\n<td>320 * 480</td>\n<td>@2x</td>\n<td>640 * 960</td>\n<td>326</td>\n</tr>\n<tr>\n<td>iPhone5/5s</td>\n<td>4</td>\n<td>320 * 568</td>\n<td>@2x</td>\n<td>640 * 1136</td>\n<td>326</td>\n</tr>\n<tr>\n<td>iPhone6/6s</td>\n<td>4.7</td>\n<td>375 * 667</td>\n<td>@2x</td>\n<td>750 * 1334</td>\n<td>326</td>\n</tr>\n<tr>\n<td>iPhone6Plus/6s Plus</td>\n<td>5.5</td>\n<td>414 * 736</td>\n<td>@3x</td>\n<td>1242 * 2208</td>\n<td>401</td>\n</tr>\n</tbody>\n</table>\n<p>物理分辨率、逻辑分辨率、像素密度：</p>\n<pre class=\"highlight\"><code class=\"latex\">PPI = 根号(X*X + Y*Y) / Inch = 163 pixcel/inch\n    \nscale= 单位长度内的数量比(pixel/point)\n</code></pre>\n<h2 id=\"2-frame\"><a class=\"markdownIt-Anchor\" href=\"#2-frame\"></a> 2. Frame</h2>\n<ul>\n<li>bounds</li>\n<li>frame</li>\n<li>anchor</li>\n<li>position</li>\n</ul>\n<p>frame：与view中的frame概念相同，（x,y）subLayer左上角相对于supLayer坐标系的位置关系；width, height表示subLayer的宽度和高度。</p>\n<p>bounds：与view中的bounds概念相同，（x,y）subLayer左上角相对于自身坐标系的关系；width, height表示subLayer的宽度和高度。</p>\n<p>position：锚点在supLayer坐标系中的位置；</p>\n<p>anchorPoint：锚点在自身坐标系中的相对位置，默认值为（0.5，0.5），左上角为（0，0），右下角为（1，1），其他位置以此类推；锚点都是对于自身来讲的. 确定自身的锚点,通常用于做相对的tranform变换.当然也可以用来确定位置；</p>\n<p>规律如下</p>\n<pre class=\"highlight\"><code class=\"objective-c\">position.x = frame.origin.x + anchorPoint.x * frame.size.width；      \n\nposition.y = frame.origin.y + anchorPoint.y * frame.size.height；\n\nframe.size.width = bounds.size.width\n\nframe.size.height = bounds.size.height\n\nframe.origin.x = anchorPoint.x * frame.size.width - position.x；\n\nframe.origin.y = anchorPoint.y * frame.size.height - position.y；\n</code></pre>\n<h2 id=\"3-约束布局\"><a class=\"markdownIt-Anchor\" href=\"#3-约束布局\"></a> 3. 约束布局</h2>\n<p>3.1 Autolayout</p>\n<p>引入了几个变量，一个是Top/Bottom Layout Guide（顶部/底部导航），一个是Superview.leading/Trailing Margin（左/右边缘间距）。Top Layout Guide其实是指的根视图的顶部，模拟器在竖屏下有状态栏，状态栏默认高度为20(注:导航栏与状态栏高度不同，导航栏的竖屏默认高度为44，横屏默认高度为32)，则Green View的Y坐标就是20 + 20 = 40。模拟器在横屏下没有状态栏，则Top Layout Guide.Bottom为0，则Green View的Y坐标就是20。Superview.leading Margin在竖屏时为16，横屏是为20。<strong>这些在最新版的iOS有变化！</strong></p>\n<p><strong>ICS：</strong> 自身内容尺寸(Intrinsic Content Size，以下简称ICS)。</p>\n<p>label， button， text fields等都是有ICS的，而UIView和NSView是没有ICS的。</p>\n<table>\n<thead>\n<tr>\n<th>View</th>\n<th>Intrinsic content size</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>UIView and NSView</td>\n<td>No intrinsic content size.</td>\n</tr>\n<tr>\n<td>Sliders</td>\n<td>Defines only the width (iOS).</td>\n</tr>\n<tr>\n<td>Labels, buttons, switches, and text fields</td>\n<td>Defines both the height and the width.</td>\n</tr>\n<tr>\n<td>Text views and image views</td>\n<td>Intrinsic content size can vary.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>CRCH：</strong> 抗压缩抗拉伸(Compression-Resistance and Content-Hugging，以下简称CRCH)</p>\n<p><img src=\"resources/autolayout_hugging.png\" alt=\"autolayout_hugging\" /></p>\n<p><strong>原文：</strong><a href=\"https://www.jianshu.com/p/c6541ff0bdaf\">Auto Layout基本原理</a></p>\n<p><strong>3.2 实现方式：</strong></p>\n<ul>\n<li>NSLayoutConstraint</li>\n</ul>\n<pre class=\"highlight\"><code class=\"objective-c\">NSLayoutConstraint.init(item: btn,\n                        attribute: NSLayoutAttribute.top,\n                        relatedBy: NSLayoutRelation.equal,\n                        toItem: view,\n                        attribute: NSLayoutAttribute.top,\n                        multiplier: 1,\n                        constant: 180)\n添加： NSLayoutConstraint.activate(hConstraints)\n</code></pre>\n<ul>\n<li>NSLayoutConstraintAnchor</li>\n<li>VFL</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>表达式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>水平方向</td>\n<td>H:</td>\n</tr>\n<tr>\n<td>垂直方向</td>\n<td>V:</td>\n</tr>\n<tr>\n<td>Views</td>\n<td>[view]</td>\n</tr>\n<tr>\n<td>关系</td>\n<td>&gt;=,==,&lt;=</td>\n</tr>\n<tr>\n<td>SuperView</td>\n<td>|</td>\n</tr>\n<tr>\n<td>空间，间隙 -</td>\n<td>-</td>\n</tr>\n<tr>\n<td>优先级</td>\n<td>@value</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"highlight\"><code class=\"objective-c\">let hMetrics = [&quot;middleSpace&quot;: 10, &quot;rightSpace&quot;: 20]\nlet hViews = [&quot;label&quot;: label, &quot;btn&quot;: btn]\nlet hVFL = &quot;H:[label]-middleSpace-[btn]-rightSpace-|&quot;\nlet hConstraints:[NSLayoutConstraint] = NSLayoutConstraint.constraints(withVisualFormat: hVFL,\n                                        options: NSLayoutFormatOptions.directionLeadingToTrailing,\n                                        metrics: hMetrics,\n                                        views: hViews)\n添加：NSLayoutConstraint.activate(hConstraints)\n</code></pre>\n<ul>\n<li>Masonry、SnapKit</li>\n<li>Stack Views</li>\n<li>AutoLayout Xib</li>\n<li><a href=\"https://www.appcoda.com/self-sizing-cells/\">Self-Size-Cell</a></li>\n</ul>\n<p><strong>3.3 布局过程：</strong></p>\n<pre class=\"highlight\"><code class=\"\">updateConstraints -&gt; layoutSubViews -&gt; drawRect\n\n    |\n    |\n    V\n\n约束变化 -&gt; Deferred Layout Pass -&gt; Run Loop\n\n    |\n    |\n    V\n\nActivating或Deactivating\n设置constant或priority\n添加和删除视图\n</code></pre>\n<h2 id=\"4-注意点\"><a class=\"markdownIt-Anchor\" href=\"#4-注意点\"></a> 4. 注意点</h2>\n<p>1、优先级：默认优先级<br />\n2、scrollView 等滚动视图添加优先级特例<br />\n3、视图先添加到俯视图上去<br />\n4、translatesAutoresizingMaskIntoConstraints 属性</p>\n<p>参考：<br />\n1、<a href=\"https://www.jianshu.com/p/d060bef3d620\">深入剖析Auto Layout</a></p>\n"},{"_content":"# 布局\n\n## 1. [对齐矩形](https://juejin.cn/post/6844903438690549768)\n\n## 2. [iOS 的渲染机制以及 UIView 的自动布局流程](https://www.dazhuanlan.com/2020/01/31/5e33cdfb28a2a/)\n","source":"_posts/学习笔记/iOS/iOS之界面显示/布局.md","raw":"# 布局\n\n## 1. [对齐矩形](https://juejin.cn/post/6844903438690549768)\n\n## 2. [iOS 的渲染机制以及 UIView 的自动布局流程](https://www.dazhuanlan.com/2020/01/31/5e33cdfb28a2a/)\n","slug":"学习笔记/iOS/iOS之界面显示/布局","published":1,"date":"2021-03-12T15:21:29.380Z","updated":"2021-03-23T12:56:08.751Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ti40027w37ugv1t8tb1","content":"<h1 id=\"布局\"><a class=\"markdownIt-Anchor\" href=\"#布局\"></a> 布局</h1>\n<h2 id=\"1-对齐矩形\"><a class=\"markdownIt-Anchor\" href=\"#1-对齐矩形\"></a> 1. <a href=\"https://juejin.cn/post/6844903438690549768\">对齐矩形</a></h2>\n<h2 id=\"2-ios-的渲染机制以及-uiview-的自动布局流程\"><a class=\"markdownIt-Anchor\" href=\"#2-ios-的渲染机制以及-uiview-的自动布局流程\"></a> 2. <a href=\"https://www.dazhuanlan.com/2020/01/31/5e33cdfb28a2a/\">iOS 的渲染机制以及 UIView 的自动布局流程</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"布局\"><a class=\"markdownIt-Anchor\" href=\"#布局\"></a> 布局</h1>\n<h2 id=\"1-对齐矩形\"><a class=\"markdownIt-Anchor\" href=\"#1-对齐矩形\"></a> 1. <a href=\"https://juejin.cn/post/6844903438690549768\">对齐矩形</a></h2>\n<h2 id=\"2-ios-的渲染机制以及-uiview-的自动布局流程\"><a class=\"markdownIt-Anchor\" href=\"#2-ios-的渲染机制以及-uiview-的自动布局流程\"></a> 2. <a href=\"https://www.dazhuanlan.com/2020/01/31/5e33cdfb28a2a/\">iOS 的渲染机制以及 UIView 的自动布局流程</a></h2>\n"},{"_content":"# UI 渲染\n\n[TOC]\n\n## 1. [iOS绘制与渲染--渲染流程](https://www.jianshu.com/p/a7bf80f44dc6)\n\n## 2. [深入理解 iOS Rendering Process](https://lision.me/ios-rendering-process/)\n\n## 3. [iOS 图像渲染原理](http://chuquan.me/2018/09/25/ios-graphics-render-principle/)\n\n## 4. [计算机那些事(8)——图形图像渲染原理](http://chuquan.me/2018/08/26/graphics-rending-principle-gpu/)\n\n## 5. [iOS 保持界面流畅的技巧](https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/)\n","source":"_posts/学习笔记/iOS/iOS之界面显示/界面渲染.md","raw":"# UI 渲染\n\n[TOC]\n\n## 1. [iOS绘制与渲染--渲染流程](https://www.jianshu.com/p/a7bf80f44dc6)\n\n## 2. [深入理解 iOS Rendering Process](https://lision.me/ios-rendering-process/)\n\n## 3. [iOS 图像渲染原理](http://chuquan.me/2018/09/25/ios-graphics-render-principle/)\n\n## 4. [计算机那些事(8)——图形图像渲染原理](http://chuquan.me/2018/08/26/graphics-rending-principle-gpu/)\n\n## 5. [iOS 保持界面流畅的技巧](https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/)\n","slug":"学习笔记/iOS/iOS之界面显示/界面渲染","published":1,"date":"2021-03-12T15:18:01.670Z","updated":"2021-04-08T15:25:19.667Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ti50028w37u8m1i91og","content":"<h1 id=\"ui-渲染\"><a class=\"markdownIt-Anchor\" href=\"#ui-渲染\"></a> UI 渲染</h1>\n<p>[TOC]</p>\n<h2 id=\"1-ios绘制与渲染渲染流程\"><a class=\"markdownIt-Anchor\" href=\"#1-ios绘制与渲染渲染流程\"></a> 1. <a href=\"https://www.jianshu.com/p/a7bf80f44dc6\">iOS绘制与渲染–渲染流程</a></h2>\n<h2 id=\"2-深入理解-ios-rendering-process\"><a class=\"markdownIt-Anchor\" href=\"#2-深入理解-ios-rendering-process\"></a> 2. <a href=\"https://lision.me/ios-rendering-process/\">深入理解 iOS Rendering Process</a></h2>\n<h2 id=\"3-ios-图像渲染原理\"><a class=\"markdownIt-Anchor\" href=\"#3-ios-图像渲染原理\"></a> 3. <a href=\"http://chuquan.me/2018/09/25/ios-graphics-render-principle/\">iOS 图像渲染原理</a></h2>\n<h2 id=\"4-计算机那些事8图形图像渲染原理\"><a class=\"markdownIt-Anchor\" href=\"#4-计算机那些事8图形图像渲染原理\"></a> 4. <a href=\"http://chuquan.me/2018/08/26/graphics-rending-principle-gpu/\">计算机那些事(8)——图形图像渲染原理</a></h2>\n<h2 id=\"5-ios-保持界面流畅的技巧\"><a class=\"markdownIt-Anchor\" href=\"#5-ios-保持界面流畅的技巧\"></a> 5. <a href=\"https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/\">iOS 保持界面流畅的技巧</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ui-渲染\"><a class=\"markdownIt-Anchor\" href=\"#ui-渲染\"></a> UI 渲染</h1>\n<p>[TOC]</p>\n<h2 id=\"1-ios绘制与渲染渲染流程\"><a class=\"markdownIt-Anchor\" href=\"#1-ios绘制与渲染渲染流程\"></a> 1. <a href=\"https://www.jianshu.com/p/a7bf80f44dc6\">iOS绘制与渲染–渲染流程</a></h2>\n<h2 id=\"2-深入理解-ios-rendering-process\"><a class=\"markdownIt-Anchor\" href=\"#2-深入理解-ios-rendering-process\"></a> 2. <a href=\"https://lision.me/ios-rendering-process/\">深入理解 iOS Rendering Process</a></h2>\n<h2 id=\"3-ios-图像渲染原理\"><a class=\"markdownIt-Anchor\" href=\"#3-ios-图像渲染原理\"></a> 3. <a href=\"http://chuquan.me/2018/09/25/ios-graphics-render-principle/\">iOS 图像渲染原理</a></h2>\n<h2 id=\"4-计算机那些事8图形图像渲染原理\"><a class=\"markdownIt-Anchor\" href=\"#4-计算机那些事8图形图像渲染原理\"></a> 4. <a href=\"http://chuquan.me/2018/08/26/graphics-rending-principle-gpu/\">计算机那些事(8)——图形图像渲染原理</a></h2>\n<h2 id=\"5-ios-保持界面流畅的技巧\"><a class=\"markdownIt-Anchor\" href=\"#5-ios-保持界面流畅的技巧\"></a> 5. <a href=\"https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/\">iOS 保持界面流畅的技巧</a></h2>\n"},{"_content":"# iOS之CI集成\n\n## 1. Shell\n\n## 2. AppleScript\n\n## 3. Jenkins\n\n## 4. XcodeServer\n\n## 5. 禅道\n","source":"_posts/学习笔记/iOS/iOS之项目管理/iOS之CI集成.md","raw":"# iOS之CI集成\n\n## 1. Shell\n\n## 2. AppleScript\n\n## 3. Jenkins\n\n## 4. XcodeServer\n\n## 5. 禅道\n","slug":"学习笔记/iOS/iOS之项目管理/iOS之CI集成","published":1,"date":"2021-04-08T00:31:46.341Z","updated":"2021-04-08T00:31:46.342Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ti50029w37u9d5wbicb","content":"<h1 id=\"ios之ci集成\"><a class=\"markdownIt-Anchor\" href=\"#ios之ci集成\"></a> iOS之CI集成</h1>\n<h2 id=\"1-shell\"><a class=\"markdownIt-Anchor\" href=\"#1-shell\"></a> 1. Shell</h2>\n<h2 id=\"2-applescript\"><a class=\"markdownIt-Anchor\" href=\"#2-applescript\"></a> 2. AppleScript</h2>\n<h2 id=\"3-jenkins\"><a class=\"markdownIt-Anchor\" href=\"#3-jenkins\"></a> 3. Jenkins</h2>\n<h2 id=\"4-xcodeserver\"><a class=\"markdownIt-Anchor\" href=\"#4-xcodeserver\"></a> 4. XcodeServer</h2>\n<h2 id=\"5-禅道\"><a class=\"markdownIt-Anchor\" href=\"#5-禅道\"></a> 5. 禅道</h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios之ci集成\"><a class=\"markdownIt-Anchor\" href=\"#ios之ci集成\"></a> iOS之CI集成</h1>\n<h2 id=\"1-shell\"><a class=\"markdownIt-Anchor\" href=\"#1-shell\"></a> 1. Shell</h2>\n<h2 id=\"2-applescript\"><a class=\"markdownIt-Anchor\" href=\"#2-applescript\"></a> 2. AppleScript</h2>\n<h2 id=\"3-jenkins\"><a class=\"markdownIt-Anchor\" href=\"#3-jenkins\"></a> 3. Jenkins</h2>\n<h2 id=\"4-xcodeserver\"><a class=\"markdownIt-Anchor\" href=\"#4-xcodeserver\"></a> 4. XcodeServer</h2>\n<h2 id=\"5-禅道\"><a class=\"markdownIt-Anchor\" href=\"#5-禅道\"></a> 5. 禅道</h2>\n"},{"_content":"# Xcode Build 自动化\n\n## 1. 自动化命令配置项\n\n1. Project name: Bookshop.xcodeproj\n2. Workspace name: Bookshop.workspace\n3. Build Configurations: Debug and Release\n4. Targets: bookshop_dev and bookshop_release\n5. Schemes: bookshop_dev_scheme and bookshop_appStore_scheme.\n\n* The Build, Run, Test and Analyze are using Debug configuration.\n* The Profile and Archive are using Release configuration. Each of the scheme only includes 1 related target.\n\n## 2. Xcode build\n\n### 2.1 显示项目信息--list\n\n```shell\nxcodebuild -list\n\nInformation about project \"_Pods\":\n    Targets:\n        Pods-Bookshop_Example\n        Pods-Bookshop_Tests\n        Bookshop\n\n    Build Configurations:\n        Debug\n        Release\n\n    If no build configuration is specified and -scheme is not passed then \"Release\" is used.\n\n    Schemes:\n        Pods-Bookshop_Example\n        Pods-Bookshop_Example\n        Pods-Bookshop_Tests\n        Pods-Bookshop_Tests\n        Bookshop\n        Bookshop\n```\n\n### 2.2  清理工程--Clean\n\n```shell\nxcodebuild clean -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme\nxcodebuild clean -project Bookshop.xcodeproj -scheme bookshop_dev_scheme\n```\n\n## 2.3 编译工程--build\n\n```shell\nxcodebuild -workspace sm_ios_base.xcworkspace -scheme sm_ios_base-Example -configuration Debug\n\nxcodebuild -project _Pods.xcodeproj -target sm_ios_base  -configuration Debug\n```\n\n## 2.4 打包--archive\n\n```shell\nxcodebuild archive -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme -archivePath ~/Downloads/bookshop_dev.xcarchive\n```\n\n## 2.5 导出 IPA\n\n```shell\nxcodebuild -exportArchive -archivePath ~/Downloads/bookshop_dev.scarchive -exportPath ~/Downloads -exportOptionsPlist ~/Downloads/ExportOptions.plist\n```\n\n### 2.5.1  ExportOptions.plist\n\n这个文件允许在打IPA包的时候，指定一些配置选项。一般在Xcode 打包的时候，有个 Addtional Option 下面可以勾选这个选项，勾选后，导出的包里面就有这个文件。\n\n自动签名类型的 ExportOptions.plist：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>compileBitcode</key>\n  <true/>\n  <key>method</key>\n  <string>ad-hoc</string>\n  <key>signingStyle</key>\n  <string>automatic</string>\n  <key>stripSwiftSymbols</key>\n  <true/>\n  <key>teamID</key>\n  <string>YourTeamID</string>\n  <key>thinning</key>\n  <string>&lt;none&gt;</string>\n</dict>\n</plist>\n```\n\n手动签名的 ExportOptions.plist：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n <key>compileBitcode</key>\n <true/>\n <key>method</key>\n <string>ad-hoc</string>\n <key>provisioningProfiles</key>\n <dict>\n <key>AppBundleID</key>\n <string>AppProvisioningProfileNameInAppleDeveloperAccount</string>\n <key>AppBundleID.NotificationServiceExtension</key>\n <string>AppBundleID</string>\n </dict>\n <key>signingCertificate</key>\n <string>iPhone Distribution</string>\n <key>signingStyle</key>\n <string>manual</string>\n <key>stripSwiftSymbols</key>\n <true/>\n <key>teamID</key>\n <string>YourTeamID</string>\n <key>thinning</key>\n <string>&lt;none&gt;</string>\n</dict>\n</plist>\n```\n\n## 3. 一个打包脚本\n\n### 3.1 显示项目信息\n\n```shell\nxcodebuild -list\n```\n\n### 3.2 打包\n\n```shell\nxcodebuild clean -workspace SUMusic.xcworkspace -scheme SUMusic\n\nxcodebuild build -workspace SUMusic.xcworkspace -scheme SUMusic\n\nxcodebuild archive -workspace SUMusic.xcworkspace -scheme SUMusic -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive\n\nxcodebuild -exportArchive -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive -exportPath ~/Desktop/Packages/SUMusic/ -exportOptionsPlist ~/Desktop/Packages/SUMusic/ExportOptions.plist -allowProvisioningUpdates\n```\n","source":"_posts/学习笔记/iOS/iOS之项目管理/iOS自动化编译打包.md","raw":"# Xcode Build 自动化\n\n## 1. 自动化命令配置项\n\n1. Project name: Bookshop.xcodeproj\n2. Workspace name: Bookshop.workspace\n3. Build Configurations: Debug and Release\n4. Targets: bookshop_dev and bookshop_release\n5. Schemes: bookshop_dev_scheme and bookshop_appStore_scheme.\n\n* The Build, Run, Test and Analyze are using Debug configuration.\n* The Profile and Archive are using Release configuration. Each of the scheme only includes 1 related target.\n\n## 2. Xcode build\n\n### 2.1 显示项目信息--list\n\n```shell\nxcodebuild -list\n\nInformation about project \"_Pods\":\n    Targets:\n        Pods-Bookshop_Example\n        Pods-Bookshop_Tests\n        Bookshop\n\n    Build Configurations:\n        Debug\n        Release\n\n    If no build configuration is specified and -scheme is not passed then \"Release\" is used.\n\n    Schemes:\n        Pods-Bookshop_Example\n        Pods-Bookshop_Example\n        Pods-Bookshop_Tests\n        Pods-Bookshop_Tests\n        Bookshop\n        Bookshop\n```\n\n### 2.2  清理工程--Clean\n\n```shell\nxcodebuild clean -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme\nxcodebuild clean -project Bookshop.xcodeproj -scheme bookshop_dev_scheme\n```\n\n## 2.3 编译工程--build\n\n```shell\nxcodebuild -workspace sm_ios_base.xcworkspace -scheme sm_ios_base-Example -configuration Debug\n\nxcodebuild -project _Pods.xcodeproj -target sm_ios_base  -configuration Debug\n```\n\n## 2.4 打包--archive\n\n```shell\nxcodebuild archive -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme -archivePath ~/Downloads/bookshop_dev.xcarchive\n```\n\n## 2.5 导出 IPA\n\n```shell\nxcodebuild -exportArchive -archivePath ~/Downloads/bookshop_dev.scarchive -exportPath ~/Downloads -exportOptionsPlist ~/Downloads/ExportOptions.plist\n```\n\n### 2.5.1  ExportOptions.plist\n\n这个文件允许在打IPA包的时候，指定一些配置选项。一般在Xcode 打包的时候，有个 Addtional Option 下面可以勾选这个选项，勾选后，导出的包里面就有这个文件。\n\n自动签名类型的 ExportOptions.plist：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>compileBitcode</key>\n  <true/>\n  <key>method</key>\n  <string>ad-hoc</string>\n  <key>signingStyle</key>\n  <string>automatic</string>\n  <key>stripSwiftSymbols</key>\n  <true/>\n  <key>teamID</key>\n  <string>YourTeamID</string>\n  <key>thinning</key>\n  <string>&lt;none&gt;</string>\n</dict>\n</plist>\n```\n\n手动签名的 ExportOptions.plist：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n <key>compileBitcode</key>\n <true/>\n <key>method</key>\n <string>ad-hoc</string>\n <key>provisioningProfiles</key>\n <dict>\n <key>AppBundleID</key>\n <string>AppProvisioningProfileNameInAppleDeveloperAccount</string>\n <key>AppBundleID.NotificationServiceExtension</key>\n <string>AppBundleID</string>\n </dict>\n <key>signingCertificate</key>\n <string>iPhone Distribution</string>\n <key>signingStyle</key>\n <string>manual</string>\n <key>stripSwiftSymbols</key>\n <true/>\n <key>teamID</key>\n <string>YourTeamID</string>\n <key>thinning</key>\n <string>&lt;none&gt;</string>\n</dict>\n</plist>\n```\n\n## 3. 一个打包脚本\n\n### 3.1 显示项目信息\n\n```shell\nxcodebuild -list\n```\n\n### 3.2 打包\n\n```shell\nxcodebuild clean -workspace SUMusic.xcworkspace -scheme SUMusic\n\nxcodebuild build -workspace SUMusic.xcworkspace -scheme SUMusic\n\nxcodebuild archive -workspace SUMusic.xcworkspace -scheme SUMusic -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive\n\nxcodebuild -exportArchive -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive -exportPath ~/Desktop/Packages/SUMusic/ -exportOptionsPlist ~/Desktop/Packages/SUMusic/ExportOptions.plist -allowProvisioningUpdates\n```\n","slug":"学习笔记/iOS/iOS之项目管理/iOS自动化编译打包","published":1,"date":"2021-04-06T13:37:55.723Z","updated":"2021-04-06T13:37:55.723Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ti7002aw37u62zhab64","content":"<h1 id=\"xcode-build-自动化\"><a class=\"markdownIt-Anchor\" href=\"#xcode-build-自动化\"></a> Xcode Build 自动化</h1>\n<h2 id=\"1-自动化命令配置项\"><a class=\"markdownIt-Anchor\" href=\"#1-自动化命令配置项\"></a> 1. 自动化命令配置项</h2>\n<ol>\n<li>Project name: Bookshop.xcodeproj</li>\n<li>Workspace name: Bookshop.workspace</li>\n<li>Build Configurations: Debug and Release</li>\n<li>Targets: bookshop_dev and bookshop_release</li>\n<li>Schemes: bookshop_dev_scheme and bookshop_appStore_scheme.</li>\n</ol>\n<ul>\n<li>The Build, Run, Test and Analyze are using Debug configuration.</li>\n<li>The Profile and Archive are using Release configuration. Each of the scheme only includes 1 related target.</li>\n</ul>\n<h2 id=\"2-xcode-build\"><a class=\"markdownIt-Anchor\" href=\"#2-xcode-build\"></a> 2. Xcode build</h2>\n<h3 id=\"21-显示项目信息list\"><a class=\"markdownIt-Anchor\" href=\"#21-显示项目信息list\"></a> 2.1 显示项目信息–list</h3>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild -list\n\nInformation about project \"_Pods\":\n    Targets:\n        Pods-Bookshop_Example\n        Pods-Bookshop_Tests\n        Bookshop\n\n    Build Configurations:\n        Debug\n        Release\n\n    If no build configuration is specified and -scheme is not passed then \"Release\" is used.\n\n    Schemes:\n        Pods-Bookshop_Example\n        Pods-Bookshop_Example\n        Pods-Bookshop_Tests\n        Pods-Bookshop_Tests\n        Bookshop\n        Bookshop\n</code></pre>\n<h3 id=\"22-清理工程clean\"><a class=\"markdownIt-Anchor\" href=\"#22-清理工程clean\"></a> 2.2  清理工程–Clean</h3>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild clean -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme\nxcodebuild clean -project Bookshop.xcodeproj -scheme bookshop_dev_scheme\n</code></pre>\n<h2 id=\"23-编译工程build\"><a class=\"markdownIt-Anchor\" href=\"#23-编译工程build\"></a> 2.3 编译工程–build</h2>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild -workspace sm_ios_base.xcworkspace -scheme sm_ios_base-Example -configuration Debug\n\nxcodebuild -project _Pods.xcodeproj -target sm_ios_base  -configuration Debug\n</code></pre>\n<h2 id=\"24-打包archive\"><a class=\"markdownIt-Anchor\" href=\"#24-打包archive\"></a> 2.4 打包–archive</h2>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild archive -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme -archivePath ~/Downloads/bookshop_dev.xcarchive\n</code></pre>\n<h2 id=\"25-导出-ipa\"><a class=\"markdownIt-Anchor\" href=\"#25-导出-ipa\"></a> 2.5 导出 IPA</h2>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild -exportArchive -archivePath ~/Downloads/bookshop_dev.scarchive -exportPath ~/Downloads -exportOptionsPlist ~/Downloads/ExportOptions.plist\n</code></pre>\n<h3 id=\"251-exportoptionsplist\"><a class=\"markdownIt-Anchor\" href=\"#251-exportoptionsplist\"></a> 2.5.1  ExportOptions.plist</h3>\n<p>这个文件允许在打IPA包的时候，指定一些配置选项。一般在Xcode 打包的时候，有个 Addtional Option 下面可以勾选这个选项，勾选后，导出的包里面就有这个文件。</p>\n<p>自动签名类型的 ExportOptions.plist：</p>\n<pre class=\"highlight\"><code class=\"xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">plist</span> <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">\"-//Apple//DTD PLIST 1.0//EN\"</span> <span class=\"hljs-meta-string\">\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plist</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.0\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dict</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>compileBitcode<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">true</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>method<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>ad-hoc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>signingStyle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>automatic<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>stripSwiftSymbols<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">true</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>teamID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>YourTeamID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>thinning<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span><span class=\"hljs-symbol\">&amp;lt;</span>none<span class=\"hljs-symbol\">&amp;gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dict</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plist</span>&gt;</span>\n</code></pre>\n<p>手动签名的 ExportOptions.plist：</p>\n<pre class=\"highlight\"><code class=\"xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">plist</span> <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">\"-//Apple//DTD PLIST 1.0//EN\"</span> <span class=\"hljs-meta-string\">\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plist</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.0\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dict</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>compileBitcode<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">true</span>/&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>method<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>ad-hoc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>provisioningProfiles<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dict</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>AppBundleID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>AppProvisioningProfileNameInAppleDeveloperAccount<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>AppBundleID.NotificationServiceExtension<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>AppBundleID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dict</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>signingCertificate<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>iPhone Distribution<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>signingStyle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>manual<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>stripSwiftSymbols<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">true</span>/&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>teamID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>YourTeamID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>thinning<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span><span class=\"hljs-symbol\">&amp;lt;</span>none<span class=\"hljs-symbol\">&amp;gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dict</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plist</span>&gt;</span>\n</code></pre>\n<h2 id=\"3-一个打包脚本\"><a class=\"markdownIt-Anchor\" href=\"#3-一个打包脚本\"></a> 3. 一个打包脚本</h2>\n<h3 id=\"31-显示项目信息\"><a class=\"markdownIt-Anchor\" href=\"#31-显示项目信息\"></a> 3.1 显示项目信息</h3>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild -list\n</code></pre>\n<h3 id=\"32-打包\"><a class=\"markdownIt-Anchor\" href=\"#32-打包\"></a> 3.2 打包</h3>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild clean -workspace SUMusic.xcworkspace -scheme SUMusic\n\nxcodebuild build -workspace SUMusic.xcworkspace -scheme SUMusic\n\nxcodebuild archive -workspace SUMusic.xcworkspace -scheme SUMusic -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive\n\nxcodebuild -exportArchive -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive -exportPath ~/Desktop/Packages/SUMusic/ -exportOptionsPlist ~/Desktop/Packages/SUMusic/ExportOptions.plist -allowProvisioningUpdates\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"xcode-build-自动化\"><a class=\"markdownIt-Anchor\" href=\"#xcode-build-自动化\"></a> Xcode Build 自动化</h1>\n<h2 id=\"1-自动化命令配置项\"><a class=\"markdownIt-Anchor\" href=\"#1-自动化命令配置项\"></a> 1. 自动化命令配置项</h2>\n<ol>\n<li>Project name: Bookshop.xcodeproj</li>\n<li>Workspace name: Bookshop.workspace</li>\n<li>Build Configurations: Debug and Release</li>\n<li>Targets: bookshop_dev and bookshop_release</li>\n<li>Schemes: bookshop_dev_scheme and bookshop_appStore_scheme.</li>\n</ol>\n<ul>\n<li>The Build, Run, Test and Analyze are using Debug configuration.</li>\n<li>The Profile and Archive are using Release configuration. Each of the scheme only includes 1 related target.</li>\n</ul>\n<h2 id=\"2-xcode-build\"><a class=\"markdownIt-Anchor\" href=\"#2-xcode-build\"></a> 2. Xcode build</h2>\n<h3 id=\"21-显示项目信息list\"><a class=\"markdownIt-Anchor\" href=\"#21-显示项目信息list\"></a> 2.1 显示项目信息–list</h3>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild -list\n\nInformation about project \"_Pods\":\n    Targets:\n        Pods-Bookshop_Example\n        Pods-Bookshop_Tests\n        Bookshop\n\n    Build Configurations:\n        Debug\n        Release\n\n    If no build configuration is specified and -scheme is not passed then \"Release\" is used.\n\n    Schemes:\n        Pods-Bookshop_Example\n        Pods-Bookshop_Example\n        Pods-Bookshop_Tests\n        Pods-Bookshop_Tests\n        Bookshop\n        Bookshop\n</code></pre>\n<h3 id=\"22-清理工程clean\"><a class=\"markdownIt-Anchor\" href=\"#22-清理工程clean\"></a> 2.2  清理工程–Clean</h3>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild clean -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme\nxcodebuild clean -project Bookshop.xcodeproj -scheme bookshop_dev_scheme\n</code></pre>\n<h2 id=\"23-编译工程build\"><a class=\"markdownIt-Anchor\" href=\"#23-编译工程build\"></a> 2.3 编译工程–build</h2>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild -workspace sm_ios_base.xcworkspace -scheme sm_ios_base-Example -configuration Debug\n\nxcodebuild -project _Pods.xcodeproj -target sm_ios_base  -configuration Debug\n</code></pre>\n<h2 id=\"24-打包archive\"><a class=\"markdownIt-Anchor\" href=\"#24-打包archive\"></a> 2.4 打包–archive</h2>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild archive -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme -archivePath ~/Downloads/bookshop_dev.xcarchive\n</code></pre>\n<h2 id=\"25-导出-ipa\"><a class=\"markdownIt-Anchor\" href=\"#25-导出-ipa\"></a> 2.5 导出 IPA</h2>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild -exportArchive -archivePath ~/Downloads/bookshop_dev.scarchive -exportPath ~/Downloads -exportOptionsPlist ~/Downloads/ExportOptions.plist\n</code></pre>\n<h3 id=\"251-exportoptionsplist\"><a class=\"markdownIt-Anchor\" href=\"#251-exportoptionsplist\"></a> 2.5.1  ExportOptions.plist</h3>\n<p>这个文件允许在打IPA包的时候，指定一些配置选项。一般在Xcode 打包的时候，有个 Addtional Option 下面可以勾选这个选项，勾选后，导出的包里面就有这个文件。</p>\n<p>自动签名类型的 ExportOptions.plist：</p>\n<pre class=\"highlight\"><code class=\"xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">plist</span> <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">\"-//Apple//DTD PLIST 1.0//EN\"</span> <span class=\"hljs-meta-string\">\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plist</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.0\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dict</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>compileBitcode<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">true</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>method<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>ad-hoc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>signingStyle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>automatic<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>stripSwiftSymbols<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">true</span>/&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>teamID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>YourTeamID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>thinning<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span><span class=\"hljs-symbol\">&amp;lt;</span>none<span class=\"hljs-symbol\">&amp;gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dict</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plist</span>&gt;</span>\n</code></pre>\n<p>手动签名的 ExportOptions.plist：</p>\n<pre class=\"highlight\"><code class=\"xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">plist</span> <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">\"-//Apple//DTD PLIST 1.0//EN\"</span> <span class=\"hljs-meta-string\">\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plist</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"1.0\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dict</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>compileBitcode<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">true</span>/&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>method<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>ad-hoc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>provisioningProfiles<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dict</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>AppBundleID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>AppProvisioningProfileNameInAppleDeveloperAccount<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>AppBundleID.NotificationServiceExtension<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>AppBundleID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dict</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>signingCertificate<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>iPhone Distribution<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>signingStyle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>manual<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>stripSwiftSymbols<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">true</span>/&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>teamID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span>YourTeamID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">key</span>&gt;</span>thinning<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">key</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span>&gt;</span><span class=\"hljs-symbol\">&amp;lt;</span>none<span class=\"hljs-symbol\">&amp;gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dict</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plist</span>&gt;</span>\n</code></pre>\n<h2 id=\"3-一个打包脚本\"><a class=\"markdownIt-Anchor\" href=\"#3-一个打包脚本\"></a> 3. 一个打包脚本</h2>\n<h3 id=\"31-显示项目信息\"><a class=\"markdownIt-Anchor\" href=\"#31-显示项目信息\"></a> 3.1 显示项目信息</h3>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild -list\n</code></pre>\n<h3 id=\"32-打包\"><a class=\"markdownIt-Anchor\" href=\"#32-打包\"></a> 3.2 打包</h3>\n<pre class=\"highlight\"><code class=\"shell\">xcodebuild clean -workspace SUMusic.xcworkspace -scheme SUMusic\n\nxcodebuild build -workspace SUMusic.xcworkspace -scheme SUMusic\n\nxcodebuild archive -workspace SUMusic.xcworkspace -scheme SUMusic -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive\n\nxcodebuild -exportArchive -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive -exportPath ~/Desktop/Packages/SUMusic/ -exportOptionsPlist ~/Desktop/Packages/SUMusic/ExportOptions.plist -allowProvisioningUpdates\n</code></pre>\n"},{"_content":"# ipa 管理\n\n## 1. fir.im\n\n上传至fir\n\n```shell\nfir publish ${HOME}/Desktop/Package/${IPA_NAME} -Q -T 9cfdfbd241d63197a3b83a608708e16f --password sumian\n```\n\n## 2. 蒲公英\n\n上传至蒲公英\n\n```shell\n#curl -F \"file=@${IPA_PATH}\" \n      -F \"uKey=******************2f5e99f3a7495\" \n      -F \"_api_key  - 0 : 85 =******************eb2d5cb44d93183\" http://www.pgyer.com/apiv1/app/upload\n```\n\n## 3. 自建服务器交付环境\n\n* 打包\n\n  版本、scheme、target、workspace、profile、签名、archive、IPA\n\n* 上传\n* 下载\n* 多ID分发[批量IPA包管理]\n","source":"_posts/学习笔记/iOS/iOS之项目管理/iOS项目管理之杂项.md","raw":"# ipa 管理\n\n## 1. fir.im\n\n上传至fir\n\n```shell\nfir publish ${HOME}/Desktop/Package/${IPA_NAME} -Q -T 9cfdfbd241d63197a3b83a608708e16f --password sumian\n```\n\n## 2. 蒲公英\n\n上传至蒲公英\n\n```shell\n#curl -F \"file=@${IPA_PATH}\" \n      -F \"uKey=******************2f5e99f3a7495\" \n      -F \"_api_key  - 0 : 85 =******************eb2d5cb44d93183\" http://www.pgyer.com/apiv1/app/upload\n```\n\n## 3. 自建服务器交付环境\n\n* 打包\n\n  版本、scheme、target、workspace、profile、签名、archive、IPA\n\n* 上传\n* 下载\n* 多ID分发[批量IPA包管理]\n","slug":"学习笔记/iOS/iOS之项目管理/iOS项目管理之杂项","published":1,"date":"2021-04-06T13:37:55.724Z","updated":"2021-04-06T13:37:55.724Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ti7002bw37u7muf5t9g","content":"<h1 id=\"ipa-管理\"><a class=\"markdownIt-Anchor\" href=\"#ipa-管理\"></a> ipa 管理</h1>\n<h2 id=\"1-firim\"><a class=\"markdownIt-Anchor\" href=\"#1-firim\"></a> 1. <a href=\"http://fir.im\">fir.im</a></h2>\n<p>上传至fir</p>\n<pre class=\"highlight\"><code class=\"shell\">fir publish $&#123;HOME&#125;/Desktop/Package/$&#123;IPA_NAME&#125; -Q -T 9cfdfbd241d63197a3b83a608708e16f --password sumian\n</code></pre>\n<h2 id=\"2-蒲公英\"><a class=\"markdownIt-Anchor\" href=\"#2-蒲公英\"></a> 2. 蒲公英</h2>\n<p>上传至蒲公英</p>\n<pre class=\"highlight\"><code class=\"shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">curl -F <span class=\"hljs-string\">\"file=@<span class=\"hljs-variable\">$&#123;IPA_PATH&#125;</span>\"</span> </span>\n      -F \"uKey=******************2f5e99f3a7495\" \n      -F \"_api_key  - 0 : 85 =******************eb2d5cb44d93183\" http://www.pgyer.com/apiv1/app/upload\n</code></pre>\n<h2 id=\"3-自建服务器交付环境\"><a class=\"markdownIt-Anchor\" href=\"#3-自建服务器交付环境\"></a> 3. 自建服务器交付环境</h2>\n<ul>\n<li>\n<p>打包</p>\n<p>版本、scheme、target、workspace、profile、签名、archive、IPA</p>\n</li>\n<li>\n<p>上传</p>\n</li>\n<li>\n<p>下载</p>\n</li>\n<li>\n<p>多ID分发[批量IPA包管理]</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ipa-管理\"><a class=\"markdownIt-Anchor\" href=\"#ipa-管理\"></a> ipa 管理</h1>\n<h2 id=\"1-firim\"><a class=\"markdownIt-Anchor\" href=\"#1-firim\"></a> 1. <a href=\"http://fir.im\">fir.im</a></h2>\n<p>上传至fir</p>\n<pre class=\"highlight\"><code class=\"shell\">fir publish $&#123;HOME&#125;/Desktop/Package/$&#123;IPA_NAME&#125; -Q -T 9cfdfbd241d63197a3b83a608708e16f --password sumian\n</code></pre>\n<h2 id=\"2-蒲公英\"><a class=\"markdownIt-Anchor\" href=\"#2-蒲公英\"></a> 2. 蒲公英</h2>\n<p>上传至蒲公英</p>\n<pre class=\"highlight\"><code class=\"shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\">curl -F <span class=\"hljs-string\">\"file=@<span class=\"hljs-variable\">$&#123;IPA_PATH&#125;</span>\"</span> </span>\n      -F \"uKey=******************2f5e99f3a7495\" \n      -F \"_api_key  - 0 : 85 =******************eb2d5cb44d93183\" http://www.pgyer.com/apiv1/app/upload\n</code></pre>\n<h2 id=\"3-自建服务器交付环境\"><a class=\"markdownIt-Anchor\" href=\"#3-自建服务器交付环境\"></a> 3. 自建服务器交付环境</h2>\n<ul>\n<li>\n<p>打包</p>\n<p>版本、scheme、target、workspace、profile、签名、archive、IPA</p>\n</li>\n<li>\n<p>上传</p>\n</li>\n<li>\n<p>下载</p>\n</li>\n<li>\n<p>多ID分发[批量IPA包管理]</p>\n</li>\n</ul>\n"},{"_content":"# 网络协议\n\n## 1.协议簇、协议栈\n\n![流程](./resource/protocols.png)\n\n## 2. 网络协议工作流程图\n\n![流程](./resource/stream2.jpg)\n\n## 3. 链路层 协议\n\n![流程](./resource/Ethernet.png)\n\n## 4. IP协议\n\n![流程](./resource/IP.png)\n\n* 版本: 占4位,指IP协议的版本.通信双方使用的IP协议版本必须一致.日前广泛使用的 IP协议版本号为 4 (即 IPv4).IPv6 目前还处于起步阶段.\n\n* 首部长度:占 4 位,可表示的最大十进制数值是15.请注意,这个字段所表示数的单位是32位字 (1个32位字长是4 字节),因此,当 IP 的首部长度为 1111 时 (即十进制的 15),首部长度就达到 60字节.当 IP 分组的首部长度不是4字节的整数倍时,必须利用最后的填充字段加以填充.因此数据部分永远在 4字节的整数倍开始,这样在实现 IP协议时较为方便.首部长度限制为 60字节的缺点是有时可能不够用.这样做的目的是希望用户尽量减少开销.最常用的首部长度就是 20 字节 (即首部长度为 0101),这时不使用任何选项.\n\n* 服务:占 8 位,用来获得更好的服务.这个字段在旧标准中叫做服务类型,但实际上一直没有被使用过.1998年IETF把这个字段改名为区分服务 DS(Differentiated Services).只有在使用区分服务时,这个字段才起作用.\n\n* 总长度:总长度指首都及数据之和的长度,单位为字节.因为总长度字段为 16位,所以数据报的最大长度为 216-1=65 535字节.在IP层下面的每一种数据链路层都有自己的帧格式,其中包括帧格式中的数据字段的最大长度,即最大传送单元 MTU (Maximum Transfer Unit).当一个数据报封装成链路层的帧时,此数据报的总长度 (即首部加上数据部分)一定不能超过下面的数据链路层的MTU值,否则要分片.\n\n* 标识 (Identification):占 16位.IP软件在存储器中维持一个计数器,每产生一个数据报,计数器就加 1,并将此值赋给标识字段.但这个\"标识\"并不是序号,因为 IP是无连接的服务,数据报不存在按序接收的问题.当数据报由于长度超过网络的 MTU 而必须分片时,这个标识字段的值就被复制到所有的数据报的标识字段中.相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报.\n\n* 标志 (Flag):占3 位,但目前只有2位有意义. 标志字段中的最低位记为 MF(More Fragment).MF=1即表示后面\"还有分片\"的数据报.MF=0表示这已是若干数据报片中的最后一个.标志字段中间的一位记为DF(Don't Fragment),意思是\"不能分片\",只有当 DF=0时才允许分片.\n\n* 片偏移:占 13位.较长的分组在分片后,某片在原分组中的相对位置.也就是说,相对用户数据字段的起点,该片从何处开始.片偏移以 8个字节为偏移单位,这就是说,每个分片的长度一定是 8字节(64位)的整数倍.\n\n* 生存时间:占 8位,生存时间字段常用的英文缩写是TTL(Time To Live),其表明数据报在网络中的寿命.由发出数据报的源点设置这个字段.其目的是防止无法交付的数据报无限制地在因特网中兜圈子,因而白白消耗网络资源.最初的设计是以秒作为 TTL的单位.每经过一个路由器时,就把TTL减去数据报在路由器消耗掉的一段时间.若数据报在路由器消耗的时间小于 1 秒,就把TTL值减 1.当 TTL值为 0时,就丢弃这个数据报.\n\n* 协议:占 8 位.协议字段指出此数据报携带的数据是使用何种协议,以便使目的主机的IP层知道应将数据部分上交给哪个处理过程.详细资料请看文章最后附录一[^附录一].\n* 首部检验和:占 16位.这个字段只检验数据报的首部,但不包括数据部分.这是因为数据报每经过一个路由器,都要重新计算一下首都检验和 (一些字段,如生存时间,标志,片偏移等都可能发生变化),不检验数据部分可减少计算的工作量.\n\n* 源地址:占32位.\n\n* 目的地址:占 32位.\n\n* IP数据报首部的可变部分\n\n> IP首部的可变部分就是一个可选字段.选项字段用来支持排错,测量以及安全等措施,内容很丰富.此字段的长度可变,从1个字节到40个字节不等,取决于所选择的项目.某些选项项目只需要1个字节,它只包括1个字节的选项代码.但还有些选项需要多个字节,这些选项一个个拼接起来,中间不需要有分隔符,最后用全0的填充字段补齐成为4字节的整数倍.\n\n> 增加首部的可变部分是为了增加IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的.这就增加了每一个路由器处理数据报的开销,实际上这些选项很少被使用.新的IP版本IPv6就将IP数据报的首部长度做成固定的.\n\n目前,这些任选项定义如下:\n\n1. 安全和处理限制(用于军事领域);\n2. 记录路径(让每个路由器都记下它的IP地址);\n3. 时间戳(Time Stamp)(让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间);\n4. 宽松的源站路由(Loose Source Route)(为数据报指定一系列必须经过的IP地址);\n5. 严格的源站路由(Strict Source Route)(与宽松的源站路由类似,但是要求只能经过指定的这些地址,不能经过其他的地址).\n这些选项很少被使用,并非所有主机和路由器都支持这些选项.\n\n## 5. TCP 协议\n\n![流程](./resource/TCP.gif)\n\n1、端口号：用来标识同一台计算机的不同的应用进程。\n\n1）源端口：源端口和IP地址的作用是标识报文的返回地址。\n\n2）目的端口：端口指明接收方计算机上的应用程序接口。\n\nTCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。\n\n2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。\n\n3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。\n\n4、保留：为将来定义新的用途保留，现在一般置0。\n\n5、控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。\n\n1）URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。\n\n2）ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。\n\n3）PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。\n\n4）RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。\n\n5）SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。\n\n6）FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。\n\n6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。\n\n7、校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。\n\n8、紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。\n\n9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。\n\n10、数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段\n\n```c\nstruct tcphdr {\n    __be16 source;//  16位源端口号\n    __be16 dest; //16位目的端口号\n    __be32 seq; //序列号\n    __be32 ack_seq; //确认号\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u16   res1:4,//保留位\n            doff:4, //tcp报头长度\n            fin:1,\n            syn:1,\n            rst:1,\n            psh:1,\n            ack:1,\n            urg:1,\n            ece:1,//ECN回显（发送方接受到了一个更早的拥塞通告)\n            cwr:1;//拥塞窗口减（发送方降低它的发送速率)\n#elif defined(__BIG_ENDIAN_BITFIELD)\n    __u16   doff:4,\n            res1:4,\n            cwr:1,\n            ece:1,\n            urg:1,\n            ack:1,\n            psh:1,\n            rst:1,\n            syn:1,\n            fin:1;\n#else\n#error \"Adjust your <asm/byteorder.h> defines\"\n#endif\n    __be16 window;//窗口大小\n    __be16 check;//效验和\n    __be16 urg_ptr;//紧急指针\n};\n```\n\n## 6. UDP 协议\n\nUDP协议是提供与IP一样的不可靠，无连接的交付服务，UDP报文可能出现丢失，重复或者乱序到达等现象。\n\nUDP协议在IP协议上增加了复用、分用和差错检测功能。UDP的特点：\n\n1. 是无连接的。相比于TCP协议，UDP协议在传送数据前不需要建立连接，当然也就没有释放连接。\n2. 是尽最大努力交付的。也就是说UDP协议无法保证数据能够准确的交付到目的主机。也不需要对接收到的UDP报文进行确认。\n3. 是面向报文的。也就是说UDP协议将应用层传输下来的数据封装在一个UDP包中，不进行拆分或合并。因此，运输层在收到对方的UDP包后，会去掉首部后，将数据原封不动的交给应用进程。\n4. 没有拥塞控制。因此UDP协议的发送速率不送网络的拥塞度影响。\n5. UDP支持一对一、一对多、多对一和多对多的交互通信。\n6. UDP的头部占用较小，只占用8个字节。\n\n![UPD协议](./resource/UDP.jpeg)\n\n* 源端口：源端口号。在需要对方回信时选用。不需要时可用全0。\n* 目的端口：目的端口号。这在终点交付报文时必须要使用到。\n* 长度： UDP用户数据报的长度，其最小值是8（仅有首部）。\n* 校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。\n\n```c\ntypedef struct udphdr\n{\n    u_short uh_sport;//源端口地址\n    u_short uh_dport;//目的端口地址\n    u_short uh_ulen;//UD报文长度\n    u_short uh_sum;//16位校验和\n}UDP_HEADER;\n```\n\n## 7. KCP——可靠的UDP\n\n## 8. HTTP 协议\n\n![HTTTP 协议](./resource/HTTP.png)\n\n**TCP/IP、UDP(KCP)、HTTPS、HTTP2.0**\n\n[HTTPS 升级指南](http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html)\n\n[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n[HTTP 协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html)\n\n[阮一峰网络日志](http://www.ruanyifeng.com/blog/)\n\nSocket(Web socket)、XMPP\n\nRTMP\n\nFRP、UPnP、VPN、WoL\n\nDNS、(N)ARP、令牌网络、ICMP\n\n附录一：\n\n[^附录一]:IP数据包的协议字段中，数值和所对应的协议\n\n| 数值 | 值描述 |\n|-----|------------|\n|0|   保留字段，用于IPv6(跳跃点到跳跃点选项) |\n|1|   Internet控制消息 |\n|2|   Internet组管理 |\n|3|   网关到网关 |\n|4|   IP中的IP(封装) |\n|5|   流 |\n|6|   传输控制 |\n|7|   CBT|\n|8|   外部网关协议 |\n|9|   任何私有内部网关(Cisco在它的IGRP实现中使用) |\n|10|   BBNRCC监视 |\n|11|   网络语音协议|\n|12|   PUP |\n|13|   ARGUS|\n|14|   EMCON |\n|15|   网络诊断工具 |\n|16|   混乱(Chaos) |\n|17|   用户数据报文 |\n|18|   复用 |\n|19|   DCN测量子系统 |\n|20|   主机监视 |\n|21|   包无线测量 |\n|22|   XEROXNSIDP |\n|23|   Trunk-1 |\n|24|   Trunk-2 |\n|25|   leaf-1|\n|26|   leaf-2 |\n|27|   可靠的数据协议 |\n|28|   Internet可靠交易 |\n|29|   ISO传输协议第四类 |\n|30|  大块数据传输协议|\n|31|   MFE网络服务协议|\n|32|   MERIT节点之间协议 |\n|33|   序列交换协议|\n|34|   第三方连接协议 |\n|35|   域之间策略路由协议|\n|36|   XTP |\n|37|   数据报文传递协议 |\n|38|   IDPR控制消息传输协议 |\n|39|   TP+ +传输协议|\n|40|   IL传输协议 |\n|41|   IPv6 |\n|42|   资源命令路由协议|\n|43|   IPv6的路由报头|\n|44|   IPv6的片报头 |\n|45|   域之间路由协议 |\n|46|   保留协议 |\n|47|   通用路由封装|\n|48|   可移动主机路由协议 |\n|49|   BNA |\n|50|   IPv6封装安全有效负载 |\n|51|   IPv6验证报头 |\n|52|   集成的网络层安全TUBA |\n|53|   带加密的IP|\n|54|   NBMA地址解析协议 |\n|55|   IP可移动性|\n|56|   使用Kryptonet钥匙管理的传输层安全协议 |\n|57|   SKIP |\n|58|   IPv6的ICMP |\n|59|   IPv6的无下一个报头 |\n|60|   IPv6的信宿选项 |\n|61|   任何主机内部协议|\n|62|   CFTP |\n|63|   任何本地网络 |\n|64|   SATNET和BackroomEXPAK|\n|65|   Kryptolan|\n|66|   MIT远程虚拟磁盘协议|\n|67|   Internet Pluribus包核心 |\n|68|   任何分布式文件系统|\n|69|   SATNET监视 |\n|70|   VISA协议 |\n|71|   Internet包核心工具 |\n|72|   计算机协议Network Executive |\n|73|   计算机协议Heart Beat|\n|74|   Wang Span网络 |\n|75|   包视频协议 |\n|76|   Backroom SATNET监视 |\n|77|   SUN ND PROTOCOL—临时 |\n|78|   WIDEBAND监视 |\n|79|   WIDEBAND EXPAK|\n|80|   ISO Internet协议 |\n|81|   VMTP |\n|82|   SECURE—VMTP(安全的VMTP) |\n|83|   VINES |\n|84|   TTP|\n|85|   NSFNET—IGP |\n|86|   不同网关协议 |\n|87|   TCF |\n|88|   EIGRP |\n|89|   OSPFIGP |\n|90|   Sprite RPC协议 |\n|91|   Locus地址解析协议 |\n|92|   多播传输协议|\n|93|   AX.25帧 |\n|94|   IP内部的IP封装协议 |\n|95|   可移动网络互连控制协议|\n|96|   旗语通讯安全协议 |\n|97|   IP中的以太封装|\n|98|   封装报头 |\n|99|   任何私有加密方案|\n|100|  GMTP |\n|101|  Ipsilon流量管理协议 |\n|102|  PNNI over IP |\n|103| 协议独立多播 |\n|104|   ARIS |\n|105|   SCPS |\n|106|   QNX |\n|107|   活动网络 |\n|108|   IP有效负载压缩协议 |\n|109|   Sitara网络协议 |\n|110|   Compaq对等协议|\n|111|   IP中的IPX |\n|112|   虚拟路由器冗余协议|\n|113|   PGM可靠传输协议|\n|114|   任何0跳跃协议|\n|115|   第二层隧道协议 |\n|116|   D-II数据交换(DDX)|\n|117|   交互式代理传输协议 |\n|118|   日程计划传输协议 |\n|119|   SpectraLink无线协议 |\n|120|   UTI |\n|121|   简单消息协议 |\n|122|   SM |\n|123|   性能透明性协议 |\n|124|   ISIS over IPv4 |\n|125|   FIRE |\n|126|   Combat无线传输协议 |\n|127|   Combat无线用户数据报文 |\n|128|   SSCOPMCE |\n|129|   IPLT |\n|130|   安全包防护 |\n|131|   IP中的私有IP封装 |\n|132|   流控制传输协议 |\n|133～254| 未分配|\n|255|   保留|\n","source":"_posts/学习笔记/iOS/iOS之网络及安全/iOS之协议.md","raw":"# 网络协议\n\n## 1.协议簇、协议栈\n\n![流程](./resource/protocols.png)\n\n## 2. 网络协议工作流程图\n\n![流程](./resource/stream2.jpg)\n\n## 3. 链路层 协议\n\n![流程](./resource/Ethernet.png)\n\n## 4. IP协议\n\n![流程](./resource/IP.png)\n\n* 版本: 占4位,指IP协议的版本.通信双方使用的IP协议版本必须一致.日前广泛使用的 IP协议版本号为 4 (即 IPv4).IPv6 目前还处于起步阶段.\n\n* 首部长度:占 4 位,可表示的最大十进制数值是15.请注意,这个字段所表示数的单位是32位字 (1个32位字长是4 字节),因此,当 IP 的首部长度为 1111 时 (即十进制的 15),首部长度就达到 60字节.当 IP 分组的首部长度不是4字节的整数倍时,必须利用最后的填充字段加以填充.因此数据部分永远在 4字节的整数倍开始,这样在实现 IP协议时较为方便.首部长度限制为 60字节的缺点是有时可能不够用.这样做的目的是希望用户尽量减少开销.最常用的首部长度就是 20 字节 (即首部长度为 0101),这时不使用任何选项.\n\n* 服务:占 8 位,用来获得更好的服务.这个字段在旧标准中叫做服务类型,但实际上一直没有被使用过.1998年IETF把这个字段改名为区分服务 DS(Differentiated Services).只有在使用区分服务时,这个字段才起作用.\n\n* 总长度:总长度指首都及数据之和的长度,单位为字节.因为总长度字段为 16位,所以数据报的最大长度为 216-1=65 535字节.在IP层下面的每一种数据链路层都有自己的帧格式,其中包括帧格式中的数据字段的最大长度,即最大传送单元 MTU (Maximum Transfer Unit).当一个数据报封装成链路层的帧时,此数据报的总长度 (即首部加上数据部分)一定不能超过下面的数据链路层的MTU值,否则要分片.\n\n* 标识 (Identification):占 16位.IP软件在存储器中维持一个计数器,每产生一个数据报,计数器就加 1,并将此值赋给标识字段.但这个\"标识\"并不是序号,因为 IP是无连接的服务,数据报不存在按序接收的问题.当数据报由于长度超过网络的 MTU 而必须分片时,这个标识字段的值就被复制到所有的数据报的标识字段中.相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报.\n\n* 标志 (Flag):占3 位,但目前只有2位有意义. 标志字段中的最低位记为 MF(More Fragment).MF=1即表示后面\"还有分片\"的数据报.MF=0表示这已是若干数据报片中的最后一个.标志字段中间的一位记为DF(Don't Fragment),意思是\"不能分片\",只有当 DF=0时才允许分片.\n\n* 片偏移:占 13位.较长的分组在分片后,某片在原分组中的相对位置.也就是说,相对用户数据字段的起点,该片从何处开始.片偏移以 8个字节为偏移单位,这就是说,每个分片的长度一定是 8字节(64位)的整数倍.\n\n* 生存时间:占 8位,生存时间字段常用的英文缩写是TTL(Time To Live),其表明数据报在网络中的寿命.由发出数据报的源点设置这个字段.其目的是防止无法交付的数据报无限制地在因特网中兜圈子,因而白白消耗网络资源.最初的设计是以秒作为 TTL的单位.每经过一个路由器时,就把TTL减去数据报在路由器消耗掉的一段时间.若数据报在路由器消耗的时间小于 1 秒,就把TTL值减 1.当 TTL值为 0时,就丢弃这个数据报.\n\n* 协议:占 8 位.协议字段指出此数据报携带的数据是使用何种协议,以便使目的主机的IP层知道应将数据部分上交给哪个处理过程.详细资料请看文章最后附录一[^附录一].\n* 首部检验和:占 16位.这个字段只检验数据报的首部,但不包括数据部分.这是因为数据报每经过一个路由器,都要重新计算一下首都检验和 (一些字段,如生存时间,标志,片偏移等都可能发生变化),不检验数据部分可减少计算的工作量.\n\n* 源地址:占32位.\n\n* 目的地址:占 32位.\n\n* IP数据报首部的可变部分\n\n> IP首部的可变部分就是一个可选字段.选项字段用来支持排错,测量以及安全等措施,内容很丰富.此字段的长度可变,从1个字节到40个字节不等,取决于所选择的项目.某些选项项目只需要1个字节,它只包括1个字节的选项代码.但还有些选项需要多个字节,这些选项一个个拼接起来,中间不需要有分隔符,最后用全0的填充字段补齐成为4字节的整数倍.\n\n> 增加首部的可变部分是为了增加IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的.这就增加了每一个路由器处理数据报的开销,实际上这些选项很少被使用.新的IP版本IPv6就将IP数据报的首部长度做成固定的.\n\n目前,这些任选项定义如下:\n\n1. 安全和处理限制(用于军事领域);\n2. 记录路径(让每个路由器都记下它的IP地址);\n3. 时间戳(Time Stamp)(让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间);\n4. 宽松的源站路由(Loose Source Route)(为数据报指定一系列必须经过的IP地址);\n5. 严格的源站路由(Strict Source Route)(与宽松的源站路由类似,但是要求只能经过指定的这些地址,不能经过其他的地址).\n这些选项很少被使用,并非所有主机和路由器都支持这些选项.\n\n## 5. TCP 协议\n\n![流程](./resource/TCP.gif)\n\n1、端口号：用来标识同一台计算机的不同的应用进程。\n\n1）源端口：源端口和IP地址的作用是标识报文的返回地址。\n\n2）目的端口：端口指明接收方计算机上的应用程序接口。\n\nTCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。\n\n2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。\n\n3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。\n\n4、保留：为将来定义新的用途保留，现在一般置0。\n\n5、控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。\n\n1）URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。\n\n2）ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。\n\n3）PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。\n\n4）RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。\n\n5）SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。\n\n6）FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。\n\n6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。\n\n7、校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。\n\n8、紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。\n\n9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。\n\n10、数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段\n\n```c\nstruct tcphdr {\n    __be16 source;//  16位源端口号\n    __be16 dest; //16位目的端口号\n    __be32 seq; //序列号\n    __be32 ack_seq; //确认号\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u16   res1:4,//保留位\n            doff:4, //tcp报头长度\n            fin:1,\n            syn:1,\n            rst:1,\n            psh:1,\n            ack:1,\n            urg:1,\n            ece:1,//ECN回显（发送方接受到了一个更早的拥塞通告)\n            cwr:1;//拥塞窗口减（发送方降低它的发送速率)\n#elif defined(__BIG_ENDIAN_BITFIELD)\n    __u16   doff:4,\n            res1:4,\n            cwr:1,\n            ece:1,\n            urg:1,\n            ack:1,\n            psh:1,\n            rst:1,\n            syn:1,\n            fin:1;\n#else\n#error \"Adjust your <asm/byteorder.h> defines\"\n#endif\n    __be16 window;//窗口大小\n    __be16 check;//效验和\n    __be16 urg_ptr;//紧急指针\n};\n```\n\n## 6. UDP 协议\n\nUDP协议是提供与IP一样的不可靠，无连接的交付服务，UDP报文可能出现丢失，重复或者乱序到达等现象。\n\nUDP协议在IP协议上增加了复用、分用和差错检测功能。UDP的特点：\n\n1. 是无连接的。相比于TCP协议，UDP协议在传送数据前不需要建立连接，当然也就没有释放连接。\n2. 是尽最大努力交付的。也就是说UDP协议无法保证数据能够准确的交付到目的主机。也不需要对接收到的UDP报文进行确认。\n3. 是面向报文的。也就是说UDP协议将应用层传输下来的数据封装在一个UDP包中，不进行拆分或合并。因此，运输层在收到对方的UDP包后，会去掉首部后，将数据原封不动的交给应用进程。\n4. 没有拥塞控制。因此UDP协议的发送速率不送网络的拥塞度影响。\n5. UDP支持一对一、一对多、多对一和多对多的交互通信。\n6. UDP的头部占用较小，只占用8个字节。\n\n![UPD协议](./resource/UDP.jpeg)\n\n* 源端口：源端口号。在需要对方回信时选用。不需要时可用全0。\n* 目的端口：目的端口号。这在终点交付报文时必须要使用到。\n* 长度： UDP用户数据报的长度，其最小值是8（仅有首部）。\n* 校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。\n\n```c\ntypedef struct udphdr\n{\n    u_short uh_sport;//源端口地址\n    u_short uh_dport;//目的端口地址\n    u_short uh_ulen;//UD报文长度\n    u_short uh_sum;//16位校验和\n}UDP_HEADER;\n```\n\n## 7. KCP——可靠的UDP\n\n## 8. HTTP 协议\n\n![HTTTP 协议](./resource/HTTP.png)\n\n**TCP/IP、UDP(KCP)、HTTPS、HTTP2.0**\n\n[HTTPS 升级指南](http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html)\n\n[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n[HTTP 协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html)\n\n[阮一峰网络日志](http://www.ruanyifeng.com/blog/)\n\nSocket(Web socket)、XMPP\n\nRTMP\n\nFRP、UPnP、VPN、WoL\n\nDNS、(N)ARP、令牌网络、ICMP\n\n附录一：\n\n[^附录一]:IP数据包的协议字段中，数值和所对应的协议\n\n| 数值 | 值描述 |\n|-----|------------|\n|0|   保留字段，用于IPv6(跳跃点到跳跃点选项) |\n|1|   Internet控制消息 |\n|2|   Internet组管理 |\n|3|   网关到网关 |\n|4|   IP中的IP(封装) |\n|5|   流 |\n|6|   传输控制 |\n|7|   CBT|\n|8|   外部网关协议 |\n|9|   任何私有内部网关(Cisco在它的IGRP实现中使用) |\n|10|   BBNRCC监视 |\n|11|   网络语音协议|\n|12|   PUP |\n|13|   ARGUS|\n|14|   EMCON |\n|15|   网络诊断工具 |\n|16|   混乱(Chaos) |\n|17|   用户数据报文 |\n|18|   复用 |\n|19|   DCN测量子系统 |\n|20|   主机监视 |\n|21|   包无线测量 |\n|22|   XEROXNSIDP |\n|23|   Trunk-1 |\n|24|   Trunk-2 |\n|25|   leaf-1|\n|26|   leaf-2 |\n|27|   可靠的数据协议 |\n|28|   Internet可靠交易 |\n|29|   ISO传输协议第四类 |\n|30|  大块数据传输协议|\n|31|   MFE网络服务协议|\n|32|   MERIT节点之间协议 |\n|33|   序列交换协议|\n|34|   第三方连接协议 |\n|35|   域之间策略路由协议|\n|36|   XTP |\n|37|   数据报文传递协议 |\n|38|   IDPR控制消息传输协议 |\n|39|   TP+ +传输协议|\n|40|   IL传输协议 |\n|41|   IPv6 |\n|42|   资源命令路由协议|\n|43|   IPv6的路由报头|\n|44|   IPv6的片报头 |\n|45|   域之间路由协议 |\n|46|   保留协议 |\n|47|   通用路由封装|\n|48|   可移动主机路由协议 |\n|49|   BNA |\n|50|   IPv6封装安全有效负载 |\n|51|   IPv6验证报头 |\n|52|   集成的网络层安全TUBA |\n|53|   带加密的IP|\n|54|   NBMA地址解析协议 |\n|55|   IP可移动性|\n|56|   使用Kryptonet钥匙管理的传输层安全协议 |\n|57|   SKIP |\n|58|   IPv6的ICMP |\n|59|   IPv6的无下一个报头 |\n|60|   IPv6的信宿选项 |\n|61|   任何主机内部协议|\n|62|   CFTP |\n|63|   任何本地网络 |\n|64|   SATNET和BackroomEXPAK|\n|65|   Kryptolan|\n|66|   MIT远程虚拟磁盘协议|\n|67|   Internet Pluribus包核心 |\n|68|   任何分布式文件系统|\n|69|   SATNET监视 |\n|70|   VISA协议 |\n|71|   Internet包核心工具 |\n|72|   计算机协议Network Executive |\n|73|   计算机协议Heart Beat|\n|74|   Wang Span网络 |\n|75|   包视频协议 |\n|76|   Backroom SATNET监视 |\n|77|   SUN ND PROTOCOL—临时 |\n|78|   WIDEBAND监视 |\n|79|   WIDEBAND EXPAK|\n|80|   ISO Internet协议 |\n|81|   VMTP |\n|82|   SECURE—VMTP(安全的VMTP) |\n|83|   VINES |\n|84|   TTP|\n|85|   NSFNET—IGP |\n|86|   不同网关协议 |\n|87|   TCF |\n|88|   EIGRP |\n|89|   OSPFIGP |\n|90|   Sprite RPC协议 |\n|91|   Locus地址解析协议 |\n|92|   多播传输协议|\n|93|   AX.25帧 |\n|94|   IP内部的IP封装协议 |\n|95|   可移动网络互连控制协议|\n|96|   旗语通讯安全协议 |\n|97|   IP中的以太封装|\n|98|   封装报头 |\n|99|   任何私有加密方案|\n|100|  GMTP |\n|101|  Ipsilon流量管理协议 |\n|102|  PNNI over IP |\n|103| 协议独立多播 |\n|104|   ARIS |\n|105|   SCPS |\n|106|   QNX |\n|107|   活动网络 |\n|108|   IP有效负载压缩协议 |\n|109|   Sitara网络协议 |\n|110|   Compaq对等协议|\n|111|   IP中的IPX |\n|112|   虚拟路由器冗余协议|\n|113|   PGM可靠传输协议|\n|114|   任何0跳跃协议|\n|115|   第二层隧道协议 |\n|116|   D-II数据交换(DDX)|\n|117|   交互式代理传输协议 |\n|118|   日程计划传输协议 |\n|119|   SpectraLink无线协议 |\n|120|   UTI |\n|121|   简单消息协议 |\n|122|   SM |\n|123|   性能透明性协议 |\n|124|   ISIS over IPv4 |\n|125|   FIRE |\n|126|   Combat无线传输协议 |\n|127|   Combat无线用户数据报文 |\n|128|   SSCOPMCE |\n|129|   IPLT |\n|130|   安全包防护 |\n|131|   IP中的私有IP封装 |\n|132|   流控制传输协议 |\n|133～254| 未分配|\n|255|   保留|\n","slug":"学习笔记/iOS/iOS之网络及安全/iOS之协议","published":1,"date":"2021-02-24T12:31:09.274Z","updated":"2021-04-06T14:09:35.957Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3ti8002cw37uaz525tn0","content":"<h1 id=\"网络协议\"><a class=\"markdownIt-Anchor\" href=\"#网络协议\"></a> 网络协议</h1>\n<h2 id=\"1协议簇-协议栈\"><a class=\"markdownIt-Anchor\" href=\"#1协议簇-协议栈\"></a> 1.协议簇、协议栈</h2>\n<p><img src=\"./resource/protocols.png\" alt=\"流程\" /></p>\n<h2 id=\"2-网络协议工作流程图\"><a class=\"markdownIt-Anchor\" href=\"#2-网络协议工作流程图\"></a> 2. 网络协议工作流程图</h2>\n<p><img src=\"./resource/stream2.jpg\" alt=\"流程\" /></p>\n<h2 id=\"3-链路层-协议\"><a class=\"markdownIt-Anchor\" href=\"#3-链路层-协议\"></a> 3. 链路层 协议</h2>\n<p><img src=\"./resource/Ethernet.png\" alt=\"流程\" /></p>\n<h2 id=\"4-ip协议\"><a class=\"markdownIt-Anchor\" href=\"#4-ip协议\"></a> 4. IP协议</h2>\n<p><img src=\"./resource/IP.png\" alt=\"流程\" /></p>\n<ul>\n<li>\n<p>版本: 占4位,指IP协议的版本.通信双方使用的IP协议版本必须一致.日前广泛使用的 IP协议版本号为 4 (即 IPv4).IPv6 目前还处于起步阶段.</p>\n</li>\n<li>\n<p>首部长度:占 4 位,可表示的最大十进制数值是15.请注意,这个字段所表示数的单位是32位字 (1个32位字长是4 字节),因此,当 IP 的首部长度为 1111 时 (即十进制的 15),首部长度就达到 60字节.当 IP 分组的首部长度不是4字节的整数倍时,必须利用最后的填充字段加以填充.因此数据部分永远在 4字节的整数倍开始,这样在实现 IP协议时较为方便.首部长度限制为 60字节的缺点是有时可能不够用.这样做的目的是希望用户尽量减少开销.最常用的首部长度就是 20 字节 (即首部长度为 0101),这时不使用任何选项.</p>\n</li>\n<li>\n<p>服务:占 8 位,用来获得更好的服务.这个字段在旧标准中叫做服务类型,但实际上一直没有被使用过.1998年IETF把这个字段改名为区分服务 DS(Differentiated Services).只有在使用区分服务时,这个字段才起作用.</p>\n</li>\n<li>\n<p>总长度:总长度指首都及数据之和的长度,单位为字节.因为总长度字段为 16位,所以数据报的最大长度为 216-1=65 535字节.在IP层下面的每一种数据链路层都有自己的帧格式,其中包括帧格式中的数据字段的最大长度,即最大传送单元 MTU (Maximum Transfer Unit).当一个数据报封装成链路层的帧时,此数据报的总长度 (即首部加上数据部分)一定不能超过下面的数据链路层的MTU值,否则要分片.</p>\n</li>\n<li>\n<p>标识 (Identification):占 16位.IP软件在存储器中维持一个计数器,每产生一个数据报,计数器就加 1,并将此值赋给标识字段.但这个&quot;标识&quot;并不是序号,因为 IP是无连接的服务,数据报不存在按序接收的问题.当数据报由于长度超过网络的 MTU 而必须分片时,这个标识字段的值就被复制到所有的数据报的标识字段中.相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报.</p>\n</li>\n<li>\n<p>标志 (Flag):占3 位,但目前只有2位有意义. 标志字段中的最低位记为 MF(More Fragment).MF=1即表示后面&quot;还有分片&quot;的数据报.MF=0表示这已是若干数据报片中的最后一个.标志字段中间的一位记为DF(Don’t Fragment),意思是&quot;不能分片&quot;,只有当 DF=0时才允许分片.</p>\n</li>\n<li>\n<p>片偏移:占 13位.较长的分组在分片后,某片在原分组中的相对位置.也就是说,相对用户数据字段的起点,该片从何处开始.片偏移以 8个字节为偏移单位,这就是说,每个分片的长度一定是 8字节(64位)的整数倍.</p>\n</li>\n<li>\n<p>生存时间:占 8位,生存时间字段常用的英文缩写是TTL(Time To Live),其表明数据报在网络中的寿命.由发出数据报的源点设置这个字段.其目的是防止无法交付的数据报无限制地在因特网中兜圈子,因而白白消耗网络资源.最初的设计是以秒作为 TTL的单位.每经过一个路由器时,就把TTL减去数据报在路由器消耗掉的一段时间.若数据报在路由器消耗的时间小于 1 秒,就把TTL值减 1.当 TTL值为 0时,就丢弃这个数据报.</p>\n</li>\n<li>\n<p>协议:占 8 位.协议字段指出此数据报携带的数据是使用何种协议,以便使目的主机的IP层知道应将数据部分上交给哪个处理过程.详细资料请看文章最后附录一<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>.</p>\n</li>\n<li>\n<p>首部检验和:占 16位.这个字段只检验数据报的首部,但不包括数据部分.这是因为数据报每经过一个路由器,都要重新计算一下首都检验和 (一些字段,如生存时间,标志,片偏移等都可能发生变化),不检验数据部分可减少计算的工作量.</p>\n</li>\n<li>\n<p>源地址:占32位.</p>\n</li>\n<li>\n<p>目的地址:占 32位.</p>\n</li>\n<li>\n<p>IP数据报首部的可变部分</p>\n</li>\n</ul>\n<blockquote>\n<p>IP首部的可变部分就是一个可选字段.选项字段用来支持排错,测量以及安全等措施,内容很丰富.此字段的长度可变,从1个字节到40个字节不等,取决于所选择的项目.某些选项项目只需要1个字节,它只包括1个字节的选项代码.但还有些选项需要多个字节,这些选项一个个拼接起来,中间不需要有分隔符,最后用全0的填充字段补齐成为4字节的整数倍.</p>\n</blockquote>\n<blockquote>\n<p>增加首部的可变部分是为了增加IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的.这就增加了每一个路由器处理数据报的开销,实际上这些选项很少被使用.新的IP版本IPv6就将IP数据报的首部长度做成固定的.</p>\n</blockquote>\n<p>目前,这些任选项定义如下:</p>\n<ol>\n<li>安全和处理限制(用于军事领域);</li>\n<li>记录路径(让每个路由器都记下它的IP地址);</li>\n<li>时间戳(Time Stamp)(让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间);</li>\n<li>宽松的源站路由(Loose Source Route)(为数据报指定一系列必须经过的IP地址);</li>\n<li>严格的源站路由(Strict Source Route)(与宽松的源站路由类似,但是要求只能经过指定的这些地址,不能经过其他的地址).<br />\n这些选项很少被使用,并非所有主机和路由器都支持这些选项.</li>\n</ol>\n<h2 id=\"5-tcp-协议\"><a class=\"markdownIt-Anchor\" href=\"#5-tcp-协议\"></a> 5. TCP 协议</h2>\n<p><img src=\"./resource/TCP.gif\" alt=\"流程\" /></p>\n<p>1、端口号：用来标识同一台计算机的不同的应用进程。</p>\n<p>1）源端口：源端口和IP地址的作用是标识报文的返回地址。</p>\n<p>2）目的端口：端口指明接收方计算机上的应用程序接口。</p>\n<p>TCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。</p>\n<p>2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。</p>\n<p>3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。</p>\n<p>4、保留：为将来定义新的用途保留，现在一般置0。</p>\n<p>5、控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。</p>\n<p>1）URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。</p>\n<p>2）ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。</p>\n<p>3）PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。</p>\n<p>4）RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。</p>\n<p>5）SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。</p>\n<p>6）FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。</p>\n<p>6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。</p>\n<p>7、校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。</p>\n<p>8、紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p>\n<p>9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。</p>\n<p>10、数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tcphdr</span> &#123;</span>\n    __be16 source;<span class=\"hljs-comment\">//  16位源端口号</span>\n    __be16 dest; <span class=\"hljs-comment\">//16位目的端口号</span>\n    __be32 seq; <span class=\"hljs-comment\">//序列号</span>\n    __be32 ack_seq; <span class=\"hljs-comment\">//确认号</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">if</span> defined(__LITTLE_ENDIAN_BITFIELD)</span>\n    __u16   res1:<span class=\"hljs-number\">4</span>,<span class=\"hljs-comment\">//保留位</span>\n            doff:<span class=\"hljs-number\">4</span>, <span class=\"hljs-comment\">//tcp报头长度</span>\n            fin:<span class=\"hljs-number\">1</span>,\n            syn:<span class=\"hljs-number\">1</span>,\n            rst:<span class=\"hljs-number\">1</span>,\n            psh:<span class=\"hljs-number\">1</span>,\n            ack:<span class=\"hljs-number\">1</span>,\n            urg:<span class=\"hljs-number\">1</span>,\n            ece:<span class=\"hljs-number\">1</span>,<span class=\"hljs-comment\">//ECN回显（发送方接受到了一个更早的拥塞通告)</span>\n            cwr:<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//拥塞窗口减（发送方降低它的发送速率)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">elif</span> defined(__BIG_ENDIAN_BITFIELD)</span>\n    __u16   doff:<span class=\"hljs-number\">4</span>,\n            res1:<span class=\"hljs-number\">4</span>,\n            cwr:<span class=\"hljs-number\">1</span>,\n            ece:<span class=\"hljs-number\">1</span>,\n            urg:<span class=\"hljs-number\">1</span>,\n            ack:<span class=\"hljs-number\">1</span>,\n            psh:<span class=\"hljs-number\">1</span>,\n            rst:<span class=\"hljs-number\">1</span>,\n            syn:<span class=\"hljs-number\">1</span>,\n            fin:<span class=\"hljs-number\">1</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">error</span> <span class=\"hljs-meta-string\">\"Adjust your &lt;asm/byteorder.h&gt; defines\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span>\n    __be16 window;<span class=\"hljs-comment\">//窗口大小</span>\n    __be16 check;<span class=\"hljs-comment\">//效验和</span>\n    __be16 urg_ptr;<span class=\"hljs-comment\">//紧急指针</span>\n&#125;;\n</code></pre>\n<h2 id=\"6-udp-协议\"><a class=\"markdownIt-Anchor\" href=\"#6-udp-协议\"></a> 6. UDP 协议</h2>\n<p>UDP协议是提供与IP一样的不可靠，无连接的交付服务，UDP报文可能出现丢失，重复或者乱序到达等现象。</p>\n<p>UDP协议在IP协议上增加了复用、分用和差错检测功能。UDP的特点：</p>\n<ol>\n<li>是无连接的。相比于TCP协议，UDP协议在传送数据前不需要建立连接，当然也就没有释放连接。</li>\n<li>是尽最大努力交付的。也就是说UDP协议无法保证数据能够准确的交付到目的主机。也不需要对接收到的UDP报文进行确认。</li>\n<li>是面向报文的。也就是说UDP协议将应用层传输下来的数据封装在一个UDP包中，不进行拆分或合并。因此，运输层在收到对方的UDP包后，会去掉首部后，将数据原封不动的交给应用进程。</li>\n<li>没有拥塞控制。因此UDP协议的发送速率不送网络的拥塞度影响。</li>\n<li>UDP支持一对一、一对多、多对一和多对多的交互通信。</li>\n<li>UDP的头部占用较小，只占用8个字节。</li>\n</ol>\n<p><img src=\"./resource/UDP.jpeg\" alt=\"UPD协议\" /></p>\n<ul>\n<li>源端口：源端口号。在需要对方回信时选用。不需要时可用全0。</li>\n<li>目的端口：目的端口号。这在终点交付报文时必须要使用到。</li>\n<li>长度： UDP用户数据报的长度，其最小值是8（仅有首部）。</li>\n<li>校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">udphdr</span>\n&#123;</span>\n    u_short uh_sport;<span class=\"hljs-comment\">//源端口地址</span>\n    u_short uh_dport;<span class=\"hljs-comment\">//目的端口地址</span>\n    u_short uh_ulen;<span class=\"hljs-comment\">//UD报文长度</span>\n    u_short uh_sum;<span class=\"hljs-comment\">//16位校验和</span>\n&#125;UDP_HEADER;\n</code></pre>\n<h2 id=\"7-kcp可靠的udp\"><a class=\"markdownIt-Anchor\" href=\"#7-kcp可靠的udp\"></a> 7. KCP——可靠的UDP</h2>\n<h2 id=\"8-http-协议\"><a class=\"markdownIt-Anchor\" href=\"#8-http-协议\"></a> 8. HTTP 协议</h2>\n<p><img src=\"./resource/HTTP.png\" alt=\"HTTTP 协议\" /></p>\n<p><strong>TCP/IP、UDP(KCP)、HTTPS、HTTP2.0</strong></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html\">HTTPS 升级指南</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\">SSL/TLS协议运行机制的概述</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\">HTTP 协议入门</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/\">阮一峰网络日志</a></p>\n<p>Socket(Web socket)、XMPP</p>\n<p>RTMP</p>\n<p>FRP、UPnP、VPN、WoL</p>\n<p>DNS、(N)ARP、令牌网络、ICMP</p>\n<p>附录一：</p>\n<table>\n<thead>\n<tr>\n<th>数值</th>\n<th>值描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>保留字段，用于IPv6(跳跃点到跳跃点选项)</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Internet控制消息</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Internet组管理</td>\n</tr>\n<tr>\n<td>3</td>\n<td>网关到网关</td>\n</tr>\n<tr>\n<td>4</td>\n<td>IP中的IP(封装)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>流</td>\n</tr>\n<tr>\n<td>6</td>\n<td>传输控制</td>\n</tr>\n<tr>\n<td>7</td>\n<td>CBT</td>\n</tr>\n<tr>\n<td>8</td>\n<td>外部网关协议</td>\n</tr>\n<tr>\n<td>9</td>\n<td>任何私有内部网关(Cisco在它的IGRP实现中使用)</td>\n</tr>\n<tr>\n<td>10</td>\n<td>BBNRCC监视</td>\n</tr>\n<tr>\n<td>11</td>\n<td>网络语音协议</td>\n</tr>\n<tr>\n<td>12</td>\n<td>PUP</td>\n</tr>\n<tr>\n<td>13</td>\n<td>ARGUS</td>\n</tr>\n<tr>\n<td>14</td>\n<td>EMCON</td>\n</tr>\n<tr>\n<td>15</td>\n<td>网络诊断工具</td>\n</tr>\n<tr>\n<td>16</td>\n<td>混乱(Chaos)</td>\n</tr>\n<tr>\n<td>17</td>\n<td>用户数据报文</td>\n</tr>\n<tr>\n<td>18</td>\n<td>复用</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DCN测量子系统</td>\n</tr>\n<tr>\n<td>20</td>\n<td>主机监视</td>\n</tr>\n<tr>\n<td>21</td>\n<td>包无线测量</td>\n</tr>\n<tr>\n<td>22</td>\n<td>XEROXNSIDP</td>\n</tr>\n<tr>\n<td>23</td>\n<td>Trunk-1</td>\n</tr>\n<tr>\n<td>24</td>\n<td>Trunk-2</td>\n</tr>\n<tr>\n<td>25</td>\n<td>leaf-1</td>\n</tr>\n<tr>\n<td>26</td>\n<td>leaf-2</td>\n</tr>\n<tr>\n<td>27</td>\n<td>可靠的数据协议</td>\n</tr>\n<tr>\n<td>28</td>\n<td>Internet可靠交易</td>\n</tr>\n<tr>\n<td>29</td>\n<td>ISO传输协议第四类</td>\n</tr>\n<tr>\n<td>30</td>\n<td>大块数据传输协议</td>\n</tr>\n<tr>\n<td>31</td>\n<td>MFE网络服务协议</td>\n</tr>\n<tr>\n<td>32</td>\n<td>MERIT节点之间协议</td>\n</tr>\n<tr>\n<td>33</td>\n<td>序列交换协议</td>\n</tr>\n<tr>\n<td>34</td>\n<td>第三方连接协议</td>\n</tr>\n<tr>\n<td>35</td>\n<td>域之间策略路由协议</td>\n</tr>\n<tr>\n<td>36</td>\n<td>XTP</td>\n</tr>\n<tr>\n<td>37</td>\n<td>数据报文传递协议</td>\n</tr>\n<tr>\n<td>38</td>\n<td>IDPR控制消息传输协议</td>\n</tr>\n<tr>\n<td>39</td>\n<td>TP+ +传输协议</td>\n</tr>\n<tr>\n<td>40</td>\n<td>IL传输协议</td>\n</tr>\n<tr>\n<td>41</td>\n<td>IPv6</td>\n</tr>\n<tr>\n<td>42</td>\n<td>资源命令路由协议</td>\n</tr>\n<tr>\n<td>43</td>\n<td>IPv6的路由报头</td>\n</tr>\n<tr>\n<td>44</td>\n<td>IPv6的片报头</td>\n</tr>\n<tr>\n<td>45</td>\n<td>域之间路由协议</td>\n</tr>\n<tr>\n<td>46</td>\n<td>保留协议</td>\n</tr>\n<tr>\n<td>47</td>\n<td>通用路由封装</td>\n</tr>\n<tr>\n<td>48</td>\n<td>可移动主机路由协议</td>\n</tr>\n<tr>\n<td>49</td>\n<td>BNA</td>\n</tr>\n<tr>\n<td>50</td>\n<td>IPv6封装安全有效负载</td>\n</tr>\n<tr>\n<td>51</td>\n<td>IPv6验证报头</td>\n</tr>\n<tr>\n<td>52</td>\n<td>集成的网络层安全TUBA</td>\n</tr>\n<tr>\n<td>53</td>\n<td>带加密的IP</td>\n</tr>\n<tr>\n<td>54</td>\n<td>NBMA地址解析协议</td>\n</tr>\n<tr>\n<td>55</td>\n<td>IP可移动性</td>\n</tr>\n<tr>\n<td>56</td>\n<td>使用Kryptonet钥匙管理的传输层安全协议</td>\n</tr>\n<tr>\n<td>57</td>\n<td>SKIP</td>\n</tr>\n<tr>\n<td>58</td>\n<td>IPv6的ICMP</td>\n</tr>\n<tr>\n<td>59</td>\n<td>IPv6的无下一个报头</td>\n</tr>\n<tr>\n<td>60</td>\n<td>IPv6的信宿选项</td>\n</tr>\n<tr>\n<td>61</td>\n<td>任何主机内部协议</td>\n</tr>\n<tr>\n<td>62</td>\n<td>CFTP</td>\n</tr>\n<tr>\n<td>63</td>\n<td>任何本地网络</td>\n</tr>\n<tr>\n<td>64</td>\n<td>SATNET和BackroomEXPAK</td>\n</tr>\n<tr>\n<td>65</td>\n<td>Kryptolan</td>\n</tr>\n<tr>\n<td>66</td>\n<td>MIT远程虚拟磁盘协议</td>\n</tr>\n<tr>\n<td>67</td>\n<td>Internet Pluribus包核心</td>\n</tr>\n<tr>\n<td>68</td>\n<td>任何分布式文件系统</td>\n</tr>\n<tr>\n<td>69</td>\n<td>SATNET监视</td>\n</tr>\n<tr>\n<td>70</td>\n<td>VISA协议</td>\n</tr>\n<tr>\n<td>71</td>\n<td>Internet包核心工具</td>\n</tr>\n<tr>\n<td>72</td>\n<td>计算机协议Network Executive</td>\n</tr>\n<tr>\n<td>73</td>\n<td>计算机协议Heart Beat</td>\n</tr>\n<tr>\n<td>74</td>\n<td>Wang Span网络</td>\n</tr>\n<tr>\n<td>75</td>\n<td>包视频协议</td>\n</tr>\n<tr>\n<td>76</td>\n<td>Backroom SATNET监视</td>\n</tr>\n<tr>\n<td>77</td>\n<td>SUN ND PROTOCOL—临时</td>\n</tr>\n<tr>\n<td>78</td>\n<td>WIDEBAND监视</td>\n</tr>\n<tr>\n<td>79</td>\n<td>WIDEBAND EXPAK</td>\n</tr>\n<tr>\n<td>80</td>\n<td>ISO Internet协议</td>\n</tr>\n<tr>\n<td>81</td>\n<td>VMTP</td>\n</tr>\n<tr>\n<td>82</td>\n<td>SECURE—VMTP(安全的VMTP)</td>\n</tr>\n<tr>\n<td>83</td>\n<td>VINES</td>\n</tr>\n<tr>\n<td>84</td>\n<td>TTP</td>\n</tr>\n<tr>\n<td>85</td>\n<td>NSFNET—IGP</td>\n</tr>\n<tr>\n<td>86</td>\n<td>不同网关协议</td>\n</tr>\n<tr>\n<td>87</td>\n<td>TCF</td>\n</tr>\n<tr>\n<td>88</td>\n<td>EIGRP</td>\n</tr>\n<tr>\n<td>89</td>\n<td>OSPFIGP</td>\n</tr>\n<tr>\n<td>90</td>\n<td>Sprite RPC协议</td>\n</tr>\n<tr>\n<td>91</td>\n<td>Locus地址解析协议</td>\n</tr>\n<tr>\n<td>92</td>\n<td>多播传输协议</td>\n</tr>\n<tr>\n<td>93</td>\n<td>AX.25帧</td>\n</tr>\n<tr>\n<td>94</td>\n<td>IP内部的IP封装协议</td>\n</tr>\n<tr>\n<td>95</td>\n<td>可移动网络互连控制协议</td>\n</tr>\n<tr>\n<td>96</td>\n<td>旗语通讯安全协议</td>\n</tr>\n<tr>\n<td>97</td>\n<td>IP中的以太封装</td>\n</tr>\n<tr>\n<td>98</td>\n<td>封装报头</td>\n</tr>\n<tr>\n<td>99</td>\n<td>任何私有加密方案</td>\n</tr>\n<tr>\n<td>100</td>\n<td>GMTP</td>\n</tr>\n<tr>\n<td>101</td>\n<td>Ipsilon流量管理协议</td>\n</tr>\n<tr>\n<td>102</td>\n<td>PNNI over IP</td>\n</tr>\n<tr>\n<td>103</td>\n<td>协议独立多播</td>\n</tr>\n<tr>\n<td>104</td>\n<td>ARIS</td>\n</tr>\n<tr>\n<td>105</td>\n<td>SCPS</td>\n</tr>\n<tr>\n<td>106</td>\n<td>QNX</td>\n</tr>\n<tr>\n<td>107</td>\n<td>活动网络</td>\n</tr>\n<tr>\n<td>108</td>\n<td>IP有效负载压缩协议</td>\n</tr>\n<tr>\n<td>109</td>\n<td>Sitara网络协议</td>\n</tr>\n<tr>\n<td>110</td>\n<td>Compaq对等协议</td>\n</tr>\n<tr>\n<td>111</td>\n<td>IP中的IPX</td>\n</tr>\n<tr>\n<td>112</td>\n<td>虚拟路由器冗余协议</td>\n</tr>\n<tr>\n<td>113</td>\n<td>PGM可靠传输协议</td>\n</tr>\n<tr>\n<td>114</td>\n<td>任何0跳跃协议</td>\n</tr>\n<tr>\n<td>115</td>\n<td>第二层隧道协议</td>\n</tr>\n<tr>\n<td>116</td>\n<td>D-II数据交换(DDX)</td>\n</tr>\n<tr>\n<td>117</td>\n<td>交互式代理传输协议</td>\n</tr>\n<tr>\n<td>118</td>\n<td>日程计划传输协议</td>\n</tr>\n<tr>\n<td>119</td>\n<td>SpectraLink无线协议</td>\n</tr>\n<tr>\n<td>120</td>\n<td>UTI</td>\n</tr>\n<tr>\n<td>121</td>\n<td>简单消息协议</td>\n</tr>\n<tr>\n<td>122</td>\n<td>SM</td>\n</tr>\n<tr>\n<td>123</td>\n<td>性能透明性协议</td>\n</tr>\n<tr>\n<td>124</td>\n<td>ISIS over IPv4</td>\n</tr>\n<tr>\n<td>125</td>\n<td>FIRE</td>\n</tr>\n<tr>\n<td>126</td>\n<td>Combat无线传输协议</td>\n</tr>\n<tr>\n<td>127</td>\n<td>Combat无线用户数据报文</td>\n</tr>\n<tr>\n<td>128</td>\n<td>SSCOPMCE</td>\n</tr>\n<tr>\n<td>129</td>\n<td>IPLT</td>\n</tr>\n<tr>\n<td>130</td>\n<td>安全包防护</td>\n</tr>\n<tr>\n<td>131</td>\n<td>IP中的私有IP封装</td>\n</tr>\n<tr>\n<td>132</td>\n<td>流控制传输协议</td>\n</tr>\n<tr>\n<td>133～254</td>\n<td>未分配</td>\n</tr>\n<tr>\n<td>255</td>\n<td>保留</td>\n</tr>\n</tbody>\n</table>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>IP数据包的协议字段中，数值和所对应的协议 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"网络协议\"><a class=\"markdownIt-Anchor\" href=\"#网络协议\"></a> 网络协议</h1>\n<h2 id=\"1协议簇-协议栈\"><a class=\"markdownIt-Anchor\" href=\"#1协议簇-协议栈\"></a> 1.协议簇、协议栈</h2>\n<p><img src=\"./resource/protocols.png\" alt=\"流程\" /></p>\n<h2 id=\"2-网络协议工作流程图\"><a class=\"markdownIt-Anchor\" href=\"#2-网络协议工作流程图\"></a> 2. 网络协议工作流程图</h2>\n<p><img src=\"./resource/stream2.jpg\" alt=\"流程\" /></p>\n<h2 id=\"3-链路层-协议\"><a class=\"markdownIt-Anchor\" href=\"#3-链路层-协议\"></a> 3. 链路层 协议</h2>\n<p><img src=\"./resource/Ethernet.png\" alt=\"流程\" /></p>\n<h2 id=\"4-ip协议\"><a class=\"markdownIt-Anchor\" href=\"#4-ip协议\"></a> 4. IP协议</h2>\n<p><img src=\"./resource/IP.png\" alt=\"流程\" /></p>\n<ul>\n<li>\n<p>版本: 占4位,指IP协议的版本.通信双方使用的IP协议版本必须一致.日前广泛使用的 IP协议版本号为 4 (即 IPv4).IPv6 目前还处于起步阶段.</p>\n</li>\n<li>\n<p>首部长度:占 4 位,可表示的最大十进制数值是15.请注意,这个字段所表示数的单位是32位字 (1个32位字长是4 字节),因此,当 IP 的首部长度为 1111 时 (即十进制的 15),首部长度就达到 60字节.当 IP 分组的首部长度不是4字节的整数倍时,必须利用最后的填充字段加以填充.因此数据部分永远在 4字节的整数倍开始,这样在实现 IP协议时较为方便.首部长度限制为 60字节的缺点是有时可能不够用.这样做的目的是希望用户尽量减少开销.最常用的首部长度就是 20 字节 (即首部长度为 0101),这时不使用任何选项.</p>\n</li>\n<li>\n<p>服务:占 8 位,用来获得更好的服务.这个字段在旧标准中叫做服务类型,但实际上一直没有被使用过.1998年IETF把这个字段改名为区分服务 DS(Differentiated Services).只有在使用区分服务时,这个字段才起作用.</p>\n</li>\n<li>\n<p>总长度:总长度指首都及数据之和的长度,单位为字节.因为总长度字段为 16位,所以数据报的最大长度为 216-1=65 535字节.在IP层下面的每一种数据链路层都有自己的帧格式,其中包括帧格式中的数据字段的最大长度,即最大传送单元 MTU (Maximum Transfer Unit).当一个数据报封装成链路层的帧时,此数据报的总长度 (即首部加上数据部分)一定不能超过下面的数据链路层的MTU值,否则要分片.</p>\n</li>\n<li>\n<p>标识 (Identification):占 16位.IP软件在存储器中维持一个计数器,每产生一个数据报,计数器就加 1,并将此值赋给标识字段.但这个&quot;标识&quot;并不是序号,因为 IP是无连接的服务,数据报不存在按序接收的问题.当数据报由于长度超过网络的 MTU 而必须分片时,这个标识字段的值就被复制到所有的数据报的标识字段中.相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报.</p>\n</li>\n<li>\n<p>标志 (Flag):占3 位,但目前只有2位有意义. 标志字段中的最低位记为 MF(More Fragment).MF=1即表示后面&quot;还有分片&quot;的数据报.MF=0表示这已是若干数据报片中的最后一个.标志字段中间的一位记为DF(Don’t Fragment),意思是&quot;不能分片&quot;,只有当 DF=0时才允许分片.</p>\n</li>\n<li>\n<p>片偏移:占 13位.较长的分组在分片后,某片在原分组中的相对位置.也就是说,相对用户数据字段的起点,该片从何处开始.片偏移以 8个字节为偏移单位,这就是说,每个分片的长度一定是 8字节(64位)的整数倍.</p>\n</li>\n<li>\n<p>生存时间:占 8位,生存时间字段常用的英文缩写是TTL(Time To Live),其表明数据报在网络中的寿命.由发出数据报的源点设置这个字段.其目的是防止无法交付的数据报无限制地在因特网中兜圈子,因而白白消耗网络资源.最初的设计是以秒作为 TTL的单位.每经过一个路由器时,就把TTL减去数据报在路由器消耗掉的一段时间.若数据报在路由器消耗的时间小于 1 秒,就把TTL值减 1.当 TTL值为 0时,就丢弃这个数据报.</p>\n</li>\n<li>\n<p>协议:占 8 位.协议字段指出此数据报携带的数据是使用何种协议,以便使目的主机的IP层知道应将数据部分上交给哪个处理过程.详细资料请看文章最后附录一<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>.</p>\n</li>\n<li>\n<p>首部检验和:占 16位.这个字段只检验数据报的首部,但不包括数据部分.这是因为数据报每经过一个路由器,都要重新计算一下首都检验和 (一些字段,如生存时间,标志,片偏移等都可能发生变化),不检验数据部分可减少计算的工作量.</p>\n</li>\n<li>\n<p>源地址:占32位.</p>\n</li>\n<li>\n<p>目的地址:占 32位.</p>\n</li>\n<li>\n<p>IP数据报首部的可变部分</p>\n</li>\n</ul>\n<blockquote>\n<p>IP首部的可变部分就是一个可选字段.选项字段用来支持排错,测量以及安全等措施,内容很丰富.此字段的长度可变,从1个字节到40个字节不等,取决于所选择的项目.某些选项项目只需要1个字节,它只包括1个字节的选项代码.但还有些选项需要多个字节,这些选项一个个拼接起来,中间不需要有分隔符,最后用全0的填充字段补齐成为4字节的整数倍.</p>\n</blockquote>\n<blockquote>\n<p>增加首部的可变部分是为了增加IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的.这就增加了每一个路由器处理数据报的开销,实际上这些选项很少被使用.新的IP版本IPv6就将IP数据报的首部长度做成固定的.</p>\n</blockquote>\n<p>目前,这些任选项定义如下:</p>\n<ol>\n<li>安全和处理限制(用于军事领域);</li>\n<li>记录路径(让每个路由器都记下它的IP地址);</li>\n<li>时间戳(Time Stamp)(让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间);</li>\n<li>宽松的源站路由(Loose Source Route)(为数据报指定一系列必须经过的IP地址);</li>\n<li>严格的源站路由(Strict Source Route)(与宽松的源站路由类似,但是要求只能经过指定的这些地址,不能经过其他的地址).<br />\n这些选项很少被使用,并非所有主机和路由器都支持这些选项.</li>\n</ol>\n<h2 id=\"5-tcp-协议\"><a class=\"markdownIt-Anchor\" href=\"#5-tcp-协议\"></a> 5. TCP 协议</h2>\n<p><img src=\"./resource/TCP.gif\" alt=\"流程\" /></p>\n<p>1、端口号：用来标识同一台计算机的不同的应用进程。</p>\n<p>1）源端口：源端口和IP地址的作用是标识报文的返回地址。</p>\n<p>2）目的端口：端口指明接收方计算机上的应用程序接口。</p>\n<p>TCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。</p>\n<p>2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。</p>\n<p>3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。</p>\n<p>4、保留：为将来定义新的用途保留，现在一般置0。</p>\n<p>5、控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。</p>\n<p>1）URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。</p>\n<p>2）ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。</p>\n<p>3）PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。</p>\n<p>4）RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。</p>\n<p>5）SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。</p>\n<p>6）FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。</p>\n<p>6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。</p>\n<p>7、校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。</p>\n<p>8、紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p>\n<p>9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。</p>\n<p>10、数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段</p>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">tcphdr</span> &#123;</span>\n    __be16 source;<span class=\"hljs-comment\">//  16位源端口号</span>\n    __be16 dest; <span class=\"hljs-comment\">//16位目的端口号</span>\n    __be32 seq; <span class=\"hljs-comment\">//序列号</span>\n    __be32 ack_seq; <span class=\"hljs-comment\">//确认号</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">if</span> defined(__LITTLE_ENDIAN_BITFIELD)</span>\n    __u16   res1:<span class=\"hljs-number\">4</span>,<span class=\"hljs-comment\">//保留位</span>\n            doff:<span class=\"hljs-number\">4</span>, <span class=\"hljs-comment\">//tcp报头长度</span>\n            fin:<span class=\"hljs-number\">1</span>,\n            syn:<span class=\"hljs-number\">1</span>,\n            rst:<span class=\"hljs-number\">1</span>,\n            psh:<span class=\"hljs-number\">1</span>,\n            ack:<span class=\"hljs-number\">1</span>,\n            urg:<span class=\"hljs-number\">1</span>,\n            ece:<span class=\"hljs-number\">1</span>,<span class=\"hljs-comment\">//ECN回显（发送方接受到了一个更早的拥塞通告)</span>\n            cwr:<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//拥塞窗口减（发送方降低它的发送速率)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">elif</span> defined(__BIG_ENDIAN_BITFIELD)</span>\n    __u16   doff:<span class=\"hljs-number\">4</span>,\n            res1:<span class=\"hljs-number\">4</span>,\n            cwr:<span class=\"hljs-number\">1</span>,\n            ece:<span class=\"hljs-number\">1</span>,\n            urg:<span class=\"hljs-number\">1</span>,\n            ack:<span class=\"hljs-number\">1</span>,\n            psh:<span class=\"hljs-number\">1</span>,\n            rst:<span class=\"hljs-number\">1</span>,\n            syn:<span class=\"hljs-number\">1</span>,\n            fin:<span class=\"hljs-number\">1</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">error</span> <span class=\"hljs-meta-string\">\"Adjust your &lt;asm/byteorder.h&gt; defines\"</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span>\n    __be16 window;<span class=\"hljs-comment\">//窗口大小</span>\n    __be16 check;<span class=\"hljs-comment\">//效验和</span>\n    __be16 urg_ptr;<span class=\"hljs-comment\">//紧急指针</span>\n&#125;;\n</code></pre>\n<h2 id=\"6-udp-协议\"><a class=\"markdownIt-Anchor\" href=\"#6-udp-协议\"></a> 6. UDP 协议</h2>\n<p>UDP协议是提供与IP一样的不可靠，无连接的交付服务，UDP报文可能出现丢失，重复或者乱序到达等现象。</p>\n<p>UDP协议在IP协议上增加了复用、分用和差错检测功能。UDP的特点：</p>\n<ol>\n<li>是无连接的。相比于TCP协议，UDP协议在传送数据前不需要建立连接，当然也就没有释放连接。</li>\n<li>是尽最大努力交付的。也就是说UDP协议无法保证数据能够准确的交付到目的主机。也不需要对接收到的UDP报文进行确认。</li>\n<li>是面向报文的。也就是说UDP协议将应用层传输下来的数据封装在一个UDP包中，不进行拆分或合并。因此，运输层在收到对方的UDP包后，会去掉首部后，将数据原封不动的交给应用进程。</li>\n<li>没有拥塞控制。因此UDP协议的发送速率不送网络的拥塞度影响。</li>\n<li>UDP支持一对一、一对多、多对一和多对多的交互通信。</li>\n<li>UDP的头部占用较小，只占用8个字节。</li>\n</ol>\n<p><img src=\"./resource/UDP.jpeg\" alt=\"UPD协议\" /></p>\n<ul>\n<li>源端口：源端口号。在需要对方回信时选用。不需要时可用全0。</li>\n<li>目的端口：目的端口号。这在终点交付报文时必须要使用到。</li>\n<li>长度： UDP用户数据报的长度，其最小值是8（仅有首部）。</li>\n<li>校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。</li>\n</ul>\n<pre class=\"highlight\"><code class=\"c\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">udphdr</span>\n&#123;</span>\n    u_short uh_sport;<span class=\"hljs-comment\">//源端口地址</span>\n    u_short uh_dport;<span class=\"hljs-comment\">//目的端口地址</span>\n    u_short uh_ulen;<span class=\"hljs-comment\">//UD报文长度</span>\n    u_short uh_sum;<span class=\"hljs-comment\">//16位校验和</span>\n&#125;UDP_HEADER;\n</code></pre>\n<h2 id=\"7-kcp可靠的udp\"><a class=\"markdownIt-Anchor\" href=\"#7-kcp可靠的udp\"></a> 7. KCP——可靠的UDP</h2>\n<h2 id=\"8-http-协议\"><a class=\"markdownIt-Anchor\" href=\"#8-http-协议\"></a> 8. HTTP 协议</h2>\n<p><img src=\"./resource/HTTP.png\" alt=\"HTTTP 协议\" /></p>\n<p><strong>TCP/IP、UDP(KCP)、HTTPS、HTTP2.0</strong></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html\">HTTPS 升级指南</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\">SSL/TLS协议运行机制的概述</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\">HTTP 协议入门</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/\">阮一峰网络日志</a></p>\n<p>Socket(Web socket)、XMPP</p>\n<p>RTMP</p>\n<p>FRP、UPnP、VPN、WoL</p>\n<p>DNS、(N)ARP、令牌网络、ICMP</p>\n<p>附录一：</p>\n<table>\n<thead>\n<tr>\n<th>数值</th>\n<th>值描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>保留字段，用于IPv6(跳跃点到跳跃点选项)</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Internet控制消息</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Internet组管理</td>\n</tr>\n<tr>\n<td>3</td>\n<td>网关到网关</td>\n</tr>\n<tr>\n<td>4</td>\n<td>IP中的IP(封装)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>流</td>\n</tr>\n<tr>\n<td>6</td>\n<td>传输控制</td>\n</tr>\n<tr>\n<td>7</td>\n<td>CBT</td>\n</tr>\n<tr>\n<td>8</td>\n<td>外部网关协议</td>\n</tr>\n<tr>\n<td>9</td>\n<td>任何私有内部网关(Cisco在它的IGRP实现中使用)</td>\n</tr>\n<tr>\n<td>10</td>\n<td>BBNRCC监视</td>\n</tr>\n<tr>\n<td>11</td>\n<td>网络语音协议</td>\n</tr>\n<tr>\n<td>12</td>\n<td>PUP</td>\n</tr>\n<tr>\n<td>13</td>\n<td>ARGUS</td>\n</tr>\n<tr>\n<td>14</td>\n<td>EMCON</td>\n</tr>\n<tr>\n<td>15</td>\n<td>网络诊断工具</td>\n</tr>\n<tr>\n<td>16</td>\n<td>混乱(Chaos)</td>\n</tr>\n<tr>\n<td>17</td>\n<td>用户数据报文</td>\n</tr>\n<tr>\n<td>18</td>\n<td>复用</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DCN测量子系统</td>\n</tr>\n<tr>\n<td>20</td>\n<td>主机监视</td>\n</tr>\n<tr>\n<td>21</td>\n<td>包无线测量</td>\n</tr>\n<tr>\n<td>22</td>\n<td>XEROXNSIDP</td>\n</tr>\n<tr>\n<td>23</td>\n<td>Trunk-1</td>\n</tr>\n<tr>\n<td>24</td>\n<td>Trunk-2</td>\n</tr>\n<tr>\n<td>25</td>\n<td>leaf-1</td>\n</tr>\n<tr>\n<td>26</td>\n<td>leaf-2</td>\n</tr>\n<tr>\n<td>27</td>\n<td>可靠的数据协议</td>\n</tr>\n<tr>\n<td>28</td>\n<td>Internet可靠交易</td>\n</tr>\n<tr>\n<td>29</td>\n<td>ISO传输协议第四类</td>\n</tr>\n<tr>\n<td>30</td>\n<td>大块数据传输协议</td>\n</tr>\n<tr>\n<td>31</td>\n<td>MFE网络服务协议</td>\n</tr>\n<tr>\n<td>32</td>\n<td>MERIT节点之间协议</td>\n</tr>\n<tr>\n<td>33</td>\n<td>序列交换协议</td>\n</tr>\n<tr>\n<td>34</td>\n<td>第三方连接协议</td>\n</tr>\n<tr>\n<td>35</td>\n<td>域之间策略路由协议</td>\n</tr>\n<tr>\n<td>36</td>\n<td>XTP</td>\n</tr>\n<tr>\n<td>37</td>\n<td>数据报文传递协议</td>\n</tr>\n<tr>\n<td>38</td>\n<td>IDPR控制消息传输协议</td>\n</tr>\n<tr>\n<td>39</td>\n<td>TP+ +传输协议</td>\n</tr>\n<tr>\n<td>40</td>\n<td>IL传输协议</td>\n</tr>\n<tr>\n<td>41</td>\n<td>IPv6</td>\n</tr>\n<tr>\n<td>42</td>\n<td>资源命令路由协议</td>\n</tr>\n<tr>\n<td>43</td>\n<td>IPv6的路由报头</td>\n</tr>\n<tr>\n<td>44</td>\n<td>IPv6的片报头</td>\n</tr>\n<tr>\n<td>45</td>\n<td>域之间路由协议</td>\n</tr>\n<tr>\n<td>46</td>\n<td>保留协议</td>\n</tr>\n<tr>\n<td>47</td>\n<td>通用路由封装</td>\n</tr>\n<tr>\n<td>48</td>\n<td>可移动主机路由协议</td>\n</tr>\n<tr>\n<td>49</td>\n<td>BNA</td>\n</tr>\n<tr>\n<td>50</td>\n<td>IPv6封装安全有效负载</td>\n</tr>\n<tr>\n<td>51</td>\n<td>IPv6验证报头</td>\n</tr>\n<tr>\n<td>52</td>\n<td>集成的网络层安全TUBA</td>\n</tr>\n<tr>\n<td>53</td>\n<td>带加密的IP</td>\n</tr>\n<tr>\n<td>54</td>\n<td>NBMA地址解析协议</td>\n</tr>\n<tr>\n<td>55</td>\n<td>IP可移动性</td>\n</tr>\n<tr>\n<td>56</td>\n<td>使用Kryptonet钥匙管理的传输层安全协议</td>\n</tr>\n<tr>\n<td>57</td>\n<td>SKIP</td>\n</tr>\n<tr>\n<td>58</td>\n<td>IPv6的ICMP</td>\n</tr>\n<tr>\n<td>59</td>\n<td>IPv6的无下一个报头</td>\n</tr>\n<tr>\n<td>60</td>\n<td>IPv6的信宿选项</td>\n</tr>\n<tr>\n<td>61</td>\n<td>任何主机内部协议</td>\n</tr>\n<tr>\n<td>62</td>\n<td>CFTP</td>\n</tr>\n<tr>\n<td>63</td>\n<td>任何本地网络</td>\n</tr>\n<tr>\n<td>64</td>\n<td>SATNET和BackroomEXPAK</td>\n</tr>\n<tr>\n<td>65</td>\n<td>Kryptolan</td>\n</tr>\n<tr>\n<td>66</td>\n<td>MIT远程虚拟磁盘协议</td>\n</tr>\n<tr>\n<td>67</td>\n<td>Internet Pluribus包核心</td>\n</tr>\n<tr>\n<td>68</td>\n<td>任何分布式文件系统</td>\n</tr>\n<tr>\n<td>69</td>\n<td>SATNET监视</td>\n</tr>\n<tr>\n<td>70</td>\n<td>VISA协议</td>\n</tr>\n<tr>\n<td>71</td>\n<td>Internet包核心工具</td>\n</tr>\n<tr>\n<td>72</td>\n<td>计算机协议Network Executive</td>\n</tr>\n<tr>\n<td>73</td>\n<td>计算机协议Heart Beat</td>\n</tr>\n<tr>\n<td>74</td>\n<td>Wang Span网络</td>\n</tr>\n<tr>\n<td>75</td>\n<td>包视频协议</td>\n</tr>\n<tr>\n<td>76</td>\n<td>Backroom SATNET监视</td>\n</tr>\n<tr>\n<td>77</td>\n<td>SUN ND PROTOCOL—临时</td>\n</tr>\n<tr>\n<td>78</td>\n<td>WIDEBAND监视</td>\n</tr>\n<tr>\n<td>79</td>\n<td>WIDEBAND EXPAK</td>\n</tr>\n<tr>\n<td>80</td>\n<td>ISO Internet协议</td>\n</tr>\n<tr>\n<td>81</td>\n<td>VMTP</td>\n</tr>\n<tr>\n<td>82</td>\n<td>SECURE—VMTP(安全的VMTP)</td>\n</tr>\n<tr>\n<td>83</td>\n<td>VINES</td>\n</tr>\n<tr>\n<td>84</td>\n<td>TTP</td>\n</tr>\n<tr>\n<td>85</td>\n<td>NSFNET—IGP</td>\n</tr>\n<tr>\n<td>86</td>\n<td>不同网关协议</td>\n</tr>\n<tr>\n<td>87</td>\n<td>TCF</td>\n</tr>\n<tr>\n<td>88</td>\n<td>EIGRP</td>\n</tr>\n<tr>\n<td>89</td>\n<td>OSPFIGP</td>\n</tr>\n<tr>\n<td>90</td>\n<td>Sprite RPC协议</td>\n</tr>\n<tr>\n<td>91</td>\n<td>Locus地址解析协议</td>\n</tr>\n<tr>\n<td>92</td>\n<td>多播传输协议</td>\n</tr>\n<tr>\n<td>93</td>\n<td>AX.25帧</td>\n</tr>\n<tr>\n<td>94</td>\n<td>IP内部的IP封装协议</td>\n</tr>\n<tr>\n<td>95</td>\n<td>可移动网络互连控制协议</td>\n</tr>\n<tr>\n<td>96</td>\n<td>旗语通讯安全协议</td>\n</tr>\n<tr>\n<td>97</td>\n<td>IP中的以太封装</td>\n</tr>\n<tr>\n<td>98</td>\n<td>封装报头</td>\n</tr>\n<tr>\n<td>99</td>\n<td>任何私有加密方案</td>\n</tr>\n<tr>\n<td>100</td>\n<td>GMTP</td>\n</tr>\n<tr>\n<td>101</td>\n<td>Ipsilon流量管理协议</td>\n</tr>\n<tr>\n<td>102</td>\n<td>PNNI over IP</td>\n</tr>\n<tr>\n<td>103</td>\n<td>协议独立多播</td>\n</tr>\n<tr>\n<td>104</td>\n<td>ARIS</td>\n</tr>\n<tr>\n<td>105</td>\n<td>SCPS</td>\n</tr>\n<tr>\n<td>106</td>\n<td>QNX</td>\n</tr>\n<tr>\n<td>107</td>\n<td>活动网络</td>\n</tr>\n<tr>\n<td>108</td>\n<td>IP有效负载压缩协议</td>\n</tr>\n<tr>\n<td>109</td>\n<td>Sitara网络协议</td>\n</tr>\n<tr>\n<td>110</td>\n<td>Compaq对等协议</td>\n</tr>\n<tr>\n<td>111</td>\n<td>IP中的IPX</td>\n</tr>\n<tr>\n<td>112</td>\n<td>虚拟路由器冗余协议</td>\n</tr>\n<tr>\n<td>113</td>\n<td>PGM可靠传输协议</td>\n</tr>\n<tr>\n<td>114</td>\n<td>任何0跳跃协议</td>\n</tr>\n<tr>\n<td>115</td>\n<td>第二层隧道协议</td>\n</tr>\n<tr>\n<td>116</td>\n<td>D-II数据交换(DDX)</td>\n</tr>\n<tr>\n<td>117</td>\n<td>交互式代理传输协议</td>\n</tr>\n<tr>\n<td>118</td>\n<td>日程计划传输协议</td>\n</tr>\n<tr>\n<td>119</td>\n<td>SpectraLink无线协议</td>\n</tr>\n<tr>\n<td>120</td>\n<td>UTI</td>\n</tr>\n<tr>\n<td>121</td>\n<td>简单消息协议</td>\n</tr>\n<tr>\n<td>122</td>\n<td>SM</td>\n</tr>\n<tr>\n<td>123</td>\n<td>性能透明性协议</td>\n</tr>\n<tr>\n<td>124</td>\n<td>ISIS over IPv4</td>\n</tr>\n<tr>\n<td>125</td>\n<td>FIRE</td>\n</tr>\n<tr>\n<td>126</td>\n<td>Combat无线传输协议</td>\n</tr>\n<tr>\n<td>127</td>\n<td>Combat无线用户数据报文</td>\n</tr>\n<tr>\n<td>128</td>\n<td>SSCOPMCE</td>\n</tr>\n<tr>\n<td>129</td>\n<td>IPLT</td>\n</tr>\n<tr>\n<td>130</td>\n<td>安全包防护</td>\n</tr>\n<tr>\n<td>131</td>\n<td>IP中的私有IP封装</td>\n</tr>\n<tr>\n<td>132</td>\n<td>流控制传输协议</td>\n</tr>\n<tr>\n<td>133～254</td>\n<td>未分配</td>\n</tr>\n<tr>\n<td>255</td>\n<td>保留</td>\n</tr>\n</tbody>\n</table>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>IP数据包的协议字段中，数值和所对应的协议 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n"},{"_content":"# SQLite  \n\n## 1、终端命令\n\n```sql\n.auth ON|OFF           Show authorizer callbacks\n.backup ?DB? FILE      Backup DB (default \"main\") to FILE\n                         Add \"--append\" to open using appendvfs.\n.bail on|off           Stop after hitting an error.  Default OFF\n.binary on|off         Turn binary output on or off.  Default OFF\n.cd DIRECTORY          Change the working directory to DIRECTORY\n.changes on|off        Show number of rows changed by SQL\n.check GLOB            Fail if output since .testcase does not match\n.clone NEWDB           Clone data into NEWDB from the existing database\n.databases             List names and files of attached databases\n.dbconfig ?op? ?val?   List or change sqlite3_db_config() options\n.dbinfo ?DB?           Show status information about the database\n.dump ?TABLE? ...      Dump the database in an SQL text format\n                         If TABLE specified, only dump tables matching\n                         LIKE pattern TABLE.\n.echo on|off           Turn command echo on or off\n.eqp on|off|full       Enable or disable automatic EXPLAIN QUERY PLAN\n.excel                 Display the output of next command in a spreadsheet\n.exit                  Exit this program\n.expert                EXPERIMENTAL. Suggest indexes for specified queries\n.fullschema ?--indent? Show schema and the content of sqlite_stat tables\n.headers on|off        Turn display of headers on or off\n.help                  Show this message\n.import FILE TABLE     Import data from FILE into TABLE\n.imposter INDEX TABLE  Create imposter table TABLE on index INDEX\n.indexes ?TABLE?       Show names of all indexes\n                         If TABLE specified, only show indexes for tables\n                         matching LIKE pattern TABLE.\n.limit ?LIMIT? ?VAL?   Display or change the value of an SQLITE_LIMIT\n.lint OPTIONS          Report potential schema issues. Options:\n                         fkey-indexes     Find missing foreign key indexes\n.log FILE|off          Turn logging on or off.  FILE can be stderr/stdout\n.mode MODE ?TABLE?     Set output mode where MODE is one of:\n                         ascii    Columns/rows delimited by 0x1F and 0x1E\n                         csv      Comma-separated values\n                         column   Left-aligned columns.  (See .width)\n                         html     HTML <table> code\n                         insert   SQL insert statements for TABLE\n                         line     One value per line\n                         list     Values delimited by \"|\"\n                         quote    Escape answers as for SQL\n                         tabs     Tab-separated values\n                         tcl      TCL list elements\n.nullvalue STRING      Use STRING in place of NULL values\n.once (-e|-x|FILE)     Output for the next SQL command only to FILE\n                         or invoke system text editor (-e) or spreadsheet (-x)\n                         on the output.\n.open ?OPTIONS? ?FILE? Close existing database and reopen FILE\n                         The --new option starts with an empty file\n                         Other options: --readonly --append --zip\n.output ?FILE?         Send output to FILE or stdout\n.print STRING...       Print literal STRING\n.prompt MAIN CONTINUE  Replace the standard prompts\n.quit                  Exit this program\n.read FILENAME         Execute SQL in FILENAME\n.restore ?DB? FILE     Restore content of DB (default \"main\") from FILE\n.save FILE             Write in-memory database into FILE\n.scanstats on|off      Turn sqlite3_stmt_scanstatus() metrics on or off\n.schema ?PATTERN?      Show the CREATE statements matching PATTERN\n                          Add --indent for pretty-printing\n.selftest ?--init?     Run tests defined in the SELFTEST table\n.separator COL ?ROW?   Change the column separator and optionally the row\n                         separator for both the output mode and .import\n.session CMD ...       Create or control sessions\n.sha3sum ?OPTIONS...?  Compute a SHA3 hash of database content\n.shell CMD ARGS...     Run CMD ARGS... in a system shell\n.show                  Show the current values for various settings\n.stats ?on|off?        Show stats or turn stats on or off\n.system CMD ARGS...    Run CMD ARGS... in a system shell\n.tables ?TABLE?        List names of tables\n                         If TABLE specified, only list tables matching\n                         LIKE pattern TABLE.\n.testcase NAME         Begin redirecting output to 'testcase-out.txt'\n.timeout MS            Try opening locked tables for MS milliseconds\n.timer on|off          Turn SQL timer on or off\n.trace FILE|off        Output each SQL statement as it is run\n.vfsinfo ?AUX?         Information about the top-level VFS\n.vfslist               List all available VFSes\n.vfsname ?AUX?         Print the name of the VFS stack\n.width NUM1 NUM2 ...   Set column widths for \"column\" mode\n                         Negative values right-justify\n\n```\n\n## 2、程序\n\nSQLite 语句\n\n所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。\n\n2.1 SQLite ANALYZE 语句：\n\n``` sql\nANALYZE;\nor\nANALYZE database_name;\nor\nANALYZE database_name.table_name;\n```\n\n2.2 SQLite AND/OR 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION-1 {AND|OR} CONDITION-2;\n```\n\n2.3 SQLite ALTER TABLE 语句：\n\n``` sql\nALTER TABLE table_name ADD COLUMN column_def...;\n```\n\n2.4 SQLite ALTER TABLE 语句（Rename）：\n\n``` sql\nALTER TABLE table_name RENAME TO new_table_name;\n```\n\n2.5 SQLite ATTACH DATABASE 语句：\n\n``` sql\nATTACH DATABASE 'DatabaseName' As 'Alias-Name';\n```\n\n2.6 SQLite BEGIN TRANSACTION 语句：\n\n``` sql\nBEGIN;\nor\nBEGIN EXCLUSIVE TRANSACTION;\n```\n\n2.7 SQLite BETWEEN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name BETWEEN val-1 AND val-2;\n```\n\n2.8 SQLite COMMIT 语句：\n\n``` sql\nCOMMIT;\n```\n\n2.9 SQLite CREATE INDEX 语句：\n\n``` sql\nCREATE INDEX index_name\nON table_name ( column_name COLLATE NOCASE );\n```\n\n2.10 SQLite CREATE UNIQUE INDEX 语句：\n\n``` sql\nCREATE UNIQUE INDEX index_name\nON table_name ( column1, column2,...columnN);\n```\n\n2.11 SQLite CREATE TABLE 语句：\n\n``` sql\nCREATE TABLE table_name(\n   column1 datatype,\n   column2 datatype,\n   column3 datatype,\n   .....\n   columnN datatype,\n   PRIMARY KEY( one or more columns )\n);\n```\n\n2.12 SQLite CREATE TRIGGER 语句：\n\n``` sql\nCREATE TRIGGER database_name.trigger_name\nBEFORE INSERT ON table_name FOR EACH ROW\nBEGIN\n   stmt1;\n   stmt2;\n   ....\nEND;\n```\n\n2.13 SQLite CREATE VIEW 语句：\n\n``` sql\nCREATE VIEW database_name.view_name  AS\nSELECT statement....;\n```\n\n2.14 SQLite CREATE VIRTUAL TABLE 语句：\n\n``` sql\nCREATE VIRTUAL TABLE database_name.table_name USING weblog( access.log );\nor\nCREATE VIRTUAL TABLE database_name.table_name USING fts3( );\n```\n\n2.15 SQLite COMMIT TRANSACTION 语句：\n\n``` sql\nCOMMIT;\n```\n\n2.16 SQLite COUNT 子句：\n\n``` sql\nSELECT COUNT(column_name)\nFROM   table_name\nWHERE  CONDITION;\n```\n\n2.17 SQLite DELETE 语句：\n\n``` sql\nDELETE FROM table_name\nWHERE  {CONDITION};\n```\n\n2.18 SQLite DETACH DATABASE 语句：\n\n``` sql\nDETACH DATABASE 'Alias-Name';\n```\n\n2.19 SQLite DISTINCT 子句：\n\n``` sql\nSELECT DISTINCT column1, column2....columnN\nFROM   table_name;\n```\n\n2.20 SQLite DROP INDEX 语句：\n\n``` sql\nDROP INDEX database_name.index_name;\n```\n\n2.21 SQLite DROP TABLE 语句：\n\n``` sql\nDROP TABLE database_name.table_name;\n```\n\n2.22 SQLite DROP VIEW 语句：\n\n``` sql\nDROP VIEW view_name;\n```\n\n2.23 SQLite DROP TRIGGER 语句：\n\n``` sql\nDROP TRIGGER trigger_name\n```\n\n2.24 SQLite EXISTS 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name EXISTS (SELECT * FROM   table_name );\n```\n\n2.25 SQLite EXPLAIN 语句：\n\n``` sql\nEXPLAIN INSERT statement...;\nor\nEXPLAIN QUERY PLAN SELECT statement...;\n```\n\n2.26 SQLite GLOB 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name GLOB { PATTERN };\n```\n\n2.27 SQLite GROUP BY 子句：\n\n``` sql\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name;\n```\n\n2.28 SQLite HAVING 子句：\n\n``` sql\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name\nHAVING (arithematic function condition);\n```\n\n2.29 SQLite INSERT INTO 语句：\n\n``` sql\nINSERT INTO table_name( column1, column2....columnN)\nVALUES ( value1, value2....valueN);\n```\n\n2.30 SQLite IN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name IN (val-1, val-2,...val-N);\n```\n\n2.31 SQLite Like 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name LIKE { PATTERN };\n```\n\n2.32 SQLite NOT IN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name NOT IN (val-1, val-2,...val-N);\n```\n\n2.33 SQLite ORDER BY 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION\nORDER BY column_name {ASC|DESC};\n```\n\n2.34 SQLite PRAGMA 语句：\n\n``` sql\nPRAGMA pragma_name;\n\nFor example:\nPRAGMA page_size;\nPRAGMA cache_size = 1024;\nPRAGMA table_info(table_name);\n```\n\n2.35 SQLite RELEASE SAVEPOINT 语句：\n\n``` sql\nRELEASE savepoint_name;\n```\n\n2.36 SQLite REINDEX 语句：\n\n``` sql\nREINDEX collation_name;\nREINDEX database_name.index_name;\nREINDEX database_name.table_name;\n```\n\n2.37 SQLite ROLLBACK 语句：\n\n``` sql\nROLLBACK;\nor\nROLLBACK TO SAVEPOINT savepoint_name;\n```\n\n2.38 SQLite SAVEPOINT 语句：\n\n``` sql\nSAVEPOINT savepoint_name;\n```\n\n2.39 SQLite SELECT 语句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name;\n```\n\n2.40 SQLite UPDATE 语句：\n\n``` sql\nUPDATE table_name\nSET column1 = value1, column2 = value2....columnN=valueN\n[ WHERE  CONDITION ];\n```\n\n2.41 SQLite VACUUM 语句：\n\n``` sql\nVACUUM;\n```\n\n2.42 SQLite WHERE 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION;\n```\n\n## 3、常见专有名词\n\n事务\n游标\n触发器\n存储过程\n回滚\n约束\n索引\n视图\n\n## 4、常用操作\n\n数据同步\n导入、导出\nCRUD (Create/Retrieve/Update/Delete)\n\n## 5、建表原则\n\n数据范式\n\n## 6、事务特性\n\nACID\n\n## 7、数据库\n\n常见数据库：SQLite、MySQL、SQLServer、Oracle、MOngoDB\n\n7.1 分类：\n    关系型：Oracle和MySQL\n    非关系型：NoSQL(NoSQL = Not Only SQL )\n（1）键值存储数据库（key-value）\n\n键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。\n\n键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。\n\n典型产品：Memcached、Redis、MemcacheDB\n\n（2）列存储（Column-oriented）数据库\n\n列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。\n\n这种数据库通常用来应对分布式存储海量数据。\n\n典型产品：Cassandra、HBase\n\n（3）面向文档（Document-Oriented）数据库\n\n文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。\n\n面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。\n\n典型产品：MongoDB、CouchDB\n\n（4）图形数据库\n\n图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。\n\n典型产品：Neo4J、InforGrid\n\n7.2 数据库引擎：数据库引擎是用于存储、处理和保护数据的核心服务。\nMYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。\n\n你能用的数据库引擎取决于mysql在安装的时候是如何被编译的。要添加一个新的引擎，就必须重新编译MYSQL。在缺省情况下，MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。\n\n* ISAM\n  \n>ISAM是一个定义明确且历经时间考验的数据表格管理方法，它在设计之时就考虑到数据库被查询的次数要远大于更新的次数。因此，ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错：如果你的硬盘崩溃了，那么数据文件就无法恢复了。如果你正在把ISAM用在关键任务应用程序里，那就必须经常备份你所有的实时数据，通过其复制特性，MYSQL能够支持这样的备份应用程序。\n\n* MYISAM\n  \n>MYISAM是MYSQL的ISAM扩展格式和缺省的数据库引擎。除了提供ISAM里所没有的索引和字段管理的大量功能，MYISAM还使用一种表格锁定的机制，来优化多个并发的读写操作。其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。MYISAM还有一些有用的扩展，例如用来修复数据库文件的MYISAMCHK工具和用来恢复浪费空间的MYISAMPACK工具。\nMYISAM强调了快速读取操作，这可能就是为什么MYSQL受到了WEB开发如此青睐的主要原因：在WEB开发中你所进行的大量数据操作都是读取操作。所以，大多数虚拟主机提供商和INTERNET平台提供商只允许使用MYISAM格式。\n\n* HEAP\n\n>HEAP允许只驻留在内存里的临时表格。驻留在内存里让HEAP要比ISAM和MYISAM都快，但是它所管理的数据是不稳定的，而且如果在关机之前没有进行保存，那么所有的数据都会丢失。在数据行被删除的时候，HEAP也不会浪费大量的空间。HEAP表格在你需要使用SELECT表达式来选择和操控数据的时候非常有用。要记住，在用完表格之后就删除表格。\n\n* INNODB和BERKLEYDB\n\n>INNODB和BERKLEYDB（BDB）数据库引擎都是造就MYSQL灵活性的技术的直接产品，这项技术就是MYSQL++ API。在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MYISAM数据库引擎不支持事务处理也不支持外来键。尽管要比ISAM和MYISAM引擎慢很多，但是INNODB和BDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。如前所述，如果你的设计需要这些特性中的一者或者两者，那你就要被迫使用后两个引擎中的一个了。\n","source":"_posts/学习笔记/iOS/iOS之网络及安全/iOS之数据库及其管理.md","raw":"# SQLite  \n\n## 1、终端命令\n\n```sql\n.auth ON|OFF           Show authorizer callbacks\n.backup ?DB? FILE      Backup DB (default \"main\") to FILE\n                         Add \"--append\" to open using appendvfs.\n.bail on|off           Stop after hitting an error.  Default OFF\n.binary on|off         Turn binary output on or off.  Default OFF\n.cd DIRECTORY          Change the working directory to DIRECTORY\n.changes on|off        Show number of rows changed by SQL\n.check GLOB            Fail if output since .testcase does not match\n.clone NEWDB           Clone data into NEWDB from the existing database\n.databases             List names and files of attached databases\n.dbconfig ?op? ?val?   List or change sqlite3_db_config() options\n.dbinfo ?DB?           Show status information about the database\n.dump ?TABLE? ...      Dump the database in an SQL text format\n                         If TABLE specified, only dump tables matching\n                         LIKE pattern TABLE.\n.echo on|off           Turn command echo on or off\n.eqp on|off|full       Enable or disable automatic EXPLAIN QUERY PLAN\n.excel                 Display the output of next command in a spreadsheet\n.exit                  Exit this program\n.expert                EXPERIMENTAL. Suggest indexes for specified queries\n.fullschema ?--indent? Show schema and the content of sqlite_stat tables\n.headers on|off        Turn display of headers on or off\n.help                  Show this message\n.import FILE TABLE     Import data from FILE into TABLE\n.imposter INDEX TABLE  Create imposter table TABLE on index INDEX\n.indexes ?TABLE?       Show names of all indexes\n                         If TABLE specified, only show indexes for tables\n                         matching LIKE pattern TABLE.\n.limit ?LIMIT? ?VAL?   Display or change the value of an SQLITE_LIMIT\n.lint OPTIONS          Report potential schema issues. Options:\n                         fkey-indexes     Find missing foreign key indexes\n.log FILE|off          Turn logging on or off.  FILE can be stderr/stdout\n.mode MODE ?TABLE?     Set output mode where MODE is one of:\n                         ascii    Columns/rows delimited by 0x1F and 0x1E\n                         csv      Comma-separated values\n                         column   Left-aligned columns.  (See .width)\n                         html     HTML <table> code\n                         insert   SQL insert statements for TABLE\n                         line     One value per line\n                         list     Values delimited by \"|\"\n                         quote    Escape answers as for SQL\n                         tabs     Tab-separated values\n                         tcl      TCL list elements\n.nullvalue STRING      Use STRING in place of NULL values\n.once (-e|-x|FILE)     Output for the next SQL command only to FILE\n                         or invoke system text editor (-e) or spreadsheet (-x)\n                         on the output.\n.open ?OPTIONS? ?FILE? Close existing database and reopen FILE\n                         The --new option starts with an empty file\n                         Other options: --readonly --append --zip\n.output ?FILE?         Send output to FILE or stdout\n.print STRING...       Print literal STRING\n.prompt MAIN CONTINUE  Replace the standard prompts\n.quit                  Exit this program\n.read FILENAME         Execute SQL in FILENAME\n.restore ?DB? FILE     Restore content of DB (default \"main\") from FILE\n.save FILE             Write in-memory database into FILE\n.scanstats on|off      Turn sqlite3_stmt_scanstatus() metrics on or off\n.schema ?PATTERN?      Show the CREATE statements matching PATTERN\n                          Add --indent for pretty-printing\n.selftest ?--init?     Run tests defined in the SELFTEST table\n.separator COL ?ROW?   Change the column separator and optionally the row\n                         separator for both the output mode and .import\n.session CMD ...       Create or control sessions\n.sha3sum ?OPTIONS...?  Compute a SHA3 hash of database content\n.shell CMD ARGS...     Run CMD ARGS... in a system shell\n.show                  Show the current values for various settings\n.stats ?on|off?        Show stats or turn stats on or off\n.system CMD ARGS...    Run CMD ARGS... in a system shell\n.tables ?TABLE?        List names of tables\n                         If TABLE specified, only list tables matching\n                         LIKE pattern TABLE.\n.testcase NAME         Begin redirecting output to 'testcase-out.txt'\n.timeout MS            Try opening locked tables for MS milliseconds\n.timer on|off          Turn SQL timer on or off\n.trace FILE|off        Output each SQL statement as it is run\n.vfsinfo ?AUX?         Information about the top-level VFS\n.vfslist               List all available VFSes\n.vfsname ?AUX?         Print the name of the VFS stack\n.width NUM1 NUM2 ...   Set column widths for \"column\" mode\n                         Negative values right-justify\n\n```\n\n## 2、程序\n\nSQLite 语句\n\n所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。\n\n2.1 SQLite ANALYZE 语句：\n\n``` sql\nANALYZE;\nor\nANALYZE database_name;\nor\nANALYZE database_name.table_name;\n```\n\n2.2 SQLite AND/OR 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION-1 {AND|OR} CONDITION-2;\n```\n\n2.3 SQLite ALTER TABLE 语句：\n\n``` sql\nALTER TABLE table_name ADD COLUMN column_def...;\n```\n\n2.4 SQLite ALTER TABLE 语句（Rename）：\n\n``` sql\nALTER TABLE table_name RENAME TO new_table_name;\n```\n\n2.5 SQLite ATTACH DATABASE 语句：\n\n``` sql\nATTACH DATABASE 'DatabaseName' As 'Alias-Name';\n```\n\n2.6 SQLite BEGIN TRANSACTION 语句：\n\n``` sql\nBEGIN;\nor\nBEGIN EXCLUSIVE TRANSACTION;\n```\n\n2.7 SQLite BETWEEN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name BETWEEN val-1 AND val-2;\n```\n\n2.8 SQLite COMMIT 语句：\n\n``` sql\nCOMMIT;\n```\n\n2.9 SQLite CREATE INDEX 语句：\n\n``` sql\nCREATE INDEX index_name\nON table_name ( column_name COLLATE NOCASE );\n```\n\n2.10 SQLite CREATE UNIQUE INDEX 语句：\n\n``` sql\nCREATE UNIQUE INDEX index_name\nON table_name ( column1, column2,...columnN);\n```\n\n2.11 SQLite CREATE TABLE 语句：\n\n``` sql\nCREATE TABLE table_name(\n   column1 datatype,\n   column2 datatype,\n   column3 datatype,\n   .....\n   columnN datatype,\n   PRIMARY KEY( one or more columns )\n);\n```\n\n2.12 SQLite CREATE TRIGGER 语句：\n\n``` sql\nCREATE TRIGGER database_name.trigger_name\nBEFORE INSERT ON table_name FOR EACH ROW\nBEGIN\n   stmt1;\n   stmt2;\n   ....\nEND;\n```\n\n2.13 SQLite CREATE VIEW 语句：\n\n``` sql\nCREATE VIEW database_name.view_name  AS\nSELECT statement....;\n```\n\n2.14 SQLite CREATE VIRTUAL TABLE 语句：\n\n``` sql\nCREATE VIRTUAL TABLE database_name.table_name USING weblog( access.log );\nor\nCREATE VIRTUAL TABLE database_name.table_name USING fts3( );\n```\n\n2.15 SQLite COMMIT TRANSACTION 语句：\n\n``` sql\nCOMMIT;\n```\n\n2.16 SQLite COUNT 子句：\n\n``` sql\nSELECT COUNT(column_name)\nFROM   table_name\nWHERE  CONDITION;\n```\n\n2.17 SQLite DELETE 语句：\n\n``` sql\nDELETE FROM table_name\nWHERE  {CONDITION};\n```\n\n2.18 SQLite DETACH DATABASE 语句：\n\n``` sql\nDETACH DATABASE 'Alias-Name';\n```\n\n2.19 SQLite DISTINCT 子句：\n\n``` sql\nSELECT DISTINCT column1, column2....columnN\nFROM   table_name;\n```\n\n2.20 SQLite DROP INDEX 语句：\n\n``` sql\nDROP INDEX database_name.index_name;\n```\n\n2.21 SQLite DROP TABLE 语句：\n\n``` sql\nDROP TABLE database_name.table_name;\n```\n\n2.22 SQLite DROP VIEW 语句：\n\n``` sql\nDROP VIEW view_name;\n```\n\n2.23 SQLite DROP TRIGGER 语句：\n\n``` sql\nDROP TRIGGER trigger_name\n```\n\n2.24 SQLite EXISTS 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name EXISTS (SELECT * FROM   table_name );\n```\n\n2.25 SQLite EXPLAIN 语句：\n\n``` sql\nEXPLAIN INSERT statement...;\nor\nEXPLAIN QUERY PLAN SELECT statement...;\n```\n\n2.26 SQLite GLOB 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name GLOB { PATTERN };\n```\n\n2.27 SQLite GROUP BY 子句：\n\n``` sql\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name;\n```\n\n2.28 SQLite HAVING 子句：\n\n``` sql\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name\nHAVING (arithematic function condition);\n```\n\n2.29 SQLite INSERT INTO 语句：\n\n``` sql\nINSERT INTO table_name( column1, column2....columnN)\nVALUES ( value1, value2....valueN);\n```\n\n2.30 SQLite IN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name IN (val-1, val-2,...val-N);\n```\n\n2.31 SQLite Like 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name LIKE { PATTERN };\n```\n\n2.32 SQLite NOT IN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name NOT IN (val-1, val-2,...val-N);\n```\n\n2.33 SQLite ORDER BY 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION\nORDER BY column_name {ASC|DESC};\n```\n\n2.34 SQLite PRAGMA 语句：\n\n``` sql\nPRAGMA pragma_name;\n\nFor example:\nPRAGMA page_size;\nPRAGMA cache_size = 1024;\nPRAGMA table_info(table_name);\n```\n\n2.35 SQLite RELEASE SAVEPOINT 语句：\n\n``` sql\nRELEASE savepoint_name;\n```\n\n2.36 SQLite REINDEX 语句：\n\n``` sql\nREINDEX collation_name;\nREINDEX database_name.index_name;\nREINDEX database_name.table_name;\n```\n\n2.37 SQLite ROLLBACK 语句：\n\n``` sql\nROLLBACK;\nor\nROLLBACK TO SAVEPOINT savepoint_name;\n```\n\n2.38 SQLite SAVEPOINT 语句：\n\n``` sql\nSAVEPOINT savepoint_name;\n```\n\n2.39 SQLite SELECT 语句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name;\n```\n\n2.40 SQLite UPDATE 语句：\n\n``` sql\nUPDATE table_name\nSET column1 = value1, column2 = value2....columnN=valueN\n[ WHERE  CONDITION ];\n```\n\n2.41 SQLite VACUUM 语句：\n\n``` sql\nVACUUM;\n```\n\n2.42 SQLite WHERE 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION;\n```\n\n## 3、常见专有名词\n\n事务\n游标\n触发器\n存储过程\n回滚\n约束\n索引\n视图\n\n## 4、常用操作\n\n数据同步\n导入、导出\nCRUD (Create/Retrieve/Update/Delete)\n\n## 5、建表原则\n\n数据范式\n\n## 6、事务特性\n\nACID\n\n## 7、数据库\n\n常见数据库：SQLite、MySQL、SQLServer、Oracle、MOngoDB\n\n7.1 分类：\n    关系型：Oracle和MySQL\n    非关系型：NoSQL(NoSQL = Not Only SQL )\n（1）键值存储数据库（key-value）\n\n键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。\n\n键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。\n\n典型产品：Memcached、Redis、MemcacheDB\n\n（2）列存储（Column-oriented）数据库\n\n列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。\n\n这种数据库通常用来应对分布式存储海量数据。\n\n典型产品：Cassandra、HBase\n\n（3）面向文档（Document-Oriented）数据库\n\n文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。\n\n面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。\n\n典型产品：MongoDB、CouchDB\n\n（4）图形数据库\n\n图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。\n\n典型产品：Neo4J、InforGrid\n\n7.2 数据库引擎：数据库引擎是用于存储、处理和保护数据的核心服务。\nMYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。\n\n你能用的数据库引擎取决于mysql在安装的时候是如何被编译的。要添加一个新的引擎，就必须重新编译MYSQL。在缺省情况下，MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。\n\n* ISAM\n  \n>ISAM是一个定义明确且历经时间考验的数据表格管理方法，它在设计之时就考虑到数据库被查询的次数要远大于更新的次数。因此，ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错：如果你的硬盘崩溃了，那么数据文件就无法恢复了。如果你正在把ISAM用在关键任务应用程序里，那就必须经常备份你所有的实时数据，通过其复制特性，MYSQL能够支持这样的备份应用程序。\n\n* MYISAM\n  \n>MYISAM是MYSQL的ISAM扩展格式和缺省的数据库引擎。除了提供ISAM里所没有的索引和字段管理的大量功能，MYISAM还使用一种表格锁定的机制，来优化多个并发的读写操作。其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。MYISAM还有一些有用的扩展，例如用来修复数据库文件的MYISAMCHK工具和用来恢复浪费空间的MYISAMPACK工具。\nMYISAM强调了快速读取操作，这可能就是为什么MYSQL受到了WEB开发如此青睐的主要原因：在WEB开发中你所进行的大量数据操作都是读取操作。所以，大多数虚拟主机提供商和INTERNET平台提供商只允许使用MYISAM格式。\n\n* HEAP\n\n>HEAP允许只驻留在内存里的临时表格。驻留在内存里让HEAP要比ISAM和MYISAM都快，但是它所管理的数据是不稳定的，而且如果在关机之前没有进行保存，那么所有的数据都会丢失。在数据行被删除的时候，HEAP也不会浪费大量的空间。HEAP表格在你需要使用SELECT表达式来选择和操控数据的时候非常有用。要记住，在用完表格之后就删除表格。\n\n* INNODB和BERKLEYDB\n\n>INNODB和BERKLEYDB（BDB）数据库引擎都是造就MYSQL灵活性的技术的直接产品，这项技术就是MYSQL++ API。在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MYISAM数据库引擎不支持事务处理也不支持外来键。尽管要比ISAM和MYISAM引擎慢很多，但是INNODB和BDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。如前所述，如果你的设计需要这些特性中的一者或者两者，那你就要被迫使用后两个引擎中的一个了。\n","slug":"学习笔记/iOS/iOS之网络及安全/iOS之数据库及其管理","published":1,"date":"2021-02-24T12:31:09.275Z","updated":"2021-02-24T12:31:09.275Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tia002dw37udhxbhz6r","content":"<h1 id=\"sqlite\"><a class=\"markdownIt-Anchor\" href=\"#sqlite\"></a> SQLite</h1>\n<h2 id=\"1-终端命令\"><a class=\"markdownIt-Anchor\" href=\"#1-终端命令\"></a> 1、终端命令</h2>\n<pre class=\"highlight\"><code class=\"sql\">.auth ON|OFF           <span class=\"hljs-keyword\">Show</span> authorizer callbacks\n.backup ?DB? <span class=\"hljs-keyword\">FILE</span>      <span class=\"hljs-keyword\">Backup</span> DB (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">\"main\"</span>) <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">FILE</span>\n                         <span class=\"hljs-keyword\">Add</span> <span class=\"hljs-string\">\"--append\"</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">open</span> <span class=\"hljs-keyword\">using</span> appendvfs.\n.bail <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>           <span class=\"hljs-keyword\">Stop</span> <span class=\"hljs-keyword\">after</span> hitting an error.  <span class=\"hljs-keyword\">Default</span> <span class=\"hljs-keyword\">OFF</span>\n.binary <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>         Turn <span class=\"hljs-built_in\">binary</span> <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> off.  <span class=\"hljs-keyword\">Default</span> <span class=\"hljs-keyword\">OFF</span>\n.cd <span class=\"hljs-keyword\">DIRECTORY</span>          <span class=\"hljs-keyword\">Change</span> the working <span class=\"hljs-keyword\">directory</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">DIRECTORY</span>\n.changes <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>        <span class=\"hljs-keyword\">Show</span> <span class=\"hljs-built_in\">number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">rows</span> <span class=\"hljs-keyword\">changed</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">SQL</span>\n.check GLOB            Fail <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">output</span> since .testcase does <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">match</span>\n.clone NEWDB           <span class=\"hljs-keyword\">Clone</span> <span class=\"hljs-keyword\">data</span> <span class=\"hljs-keyword\">into</span> NEWDB <span class=\"hljs-keyword\">from</span> the existing <span class=\"hljs-keyword\">database</span>\n.databases             <span class=\"hljs-keyword\">List</span> <span class=\"hljs-keyword\">names</span> <span class=\"hljs-keyword\">and</span> files <span class=\"hljs-keyword\">of</span> attached <span class=\"hljs-keyword\">databases</span>\n.dbconfig ?op? ?val?   <span class=\"hljs-keyword\">List</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">change</span> sqlite3_db_config() options\n.dbinfo ?DB?           <span class=\"hljs-keyword\">Show</span> <span class=\"hljs-keyword\">status</span> information about the <span class=\"hljs-keyword\">database</span>\n.dump ?<span class=\"hljs-keyword\">TABLE</span>? ...      Dump the <span class=\"hljs-keyword\">database</span> <span class=\"hljs-keyword\">in</span> an <span class=\"hljs-keyword\">SQL</span> <span class=\"hljs-built_in\">text</span> <span class=\"hljs-keyword\">format</span>\n                         <span class=\"hljs-keyword\">If</span> <span class=\"hljs-keyword\">TABLE</span> specified, <span class=\"hljs-keyword\">only</span> dump <span class=\"hljs-keyword\">tables</span> matching\n                         <span class=\"hljs-keyword\">LIKE</span> pattern TABLE.\n.echo <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>           Turn command echo <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">off</span>\n.eqp <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>|<span class=\"hljs-keyword\">full</span>       <span class=\"hljs-keyword\">Enable</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">disable</span> <span class=\"hljs-keyword\">automatic</span> <span class=\"hljs-keyword\">EXPLAIN</span> <span class=\"hljs-keyword\">QUERY</span> PLAN\n.excel                 Display the <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">next</span> command <span class=\"hljs-keyword\">in</span> a spreadsheet\n.exit                  <span class=\"hljs-keyword\">Exit</span> this program\n.expert                EXPERIMENTAL. Suggest <span class=\"hljs-keyword\">indexes</span> <span class=\"hljs-keyword\">for</span> specified queries\n.fullschema ?<span class=\"hljs-comment\">--indent? Show schema and the content of sqlite_stat tables</span>\n.headers <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>        Turn display <span class=\"hljs-keyword\">of</span> headers <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">off</span>\n.help                  <span class=\"hljs-keyword\">Show</span> this message\n.import <span class=\"hljs-keyword\">FILE</span> <span class=\"hljs-keyword\">TABLE</span>     <span class=\"hljs-keyword\">Import</span> <span class=\"hljs-keyword\">data</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">FILE</span> <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">TABLE</span>\n.imposter <span class=\"hljs-keyword\">INDEX</span> <span class=\"hljs-keyword\">TABLE</span>  <span class=\"hljs-keyword\">Create</span> imposter <span class=\"hljs-keyword\">table</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">index</span> <span class=\"hljs-keyword\">INDEX</span>\n.indexes ?<span class=\"hljs-keyword\">TABLE</span>?       <span class=\"hljs-keyword\">Show</span> <span class=\"hljs-keyword\">names</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">indexes</span>\n                         <span class=\"hljs-keyword\">If</span> <span class=\"hljs-keyword\">TABLE</span> specified, <span class=\"hljs-keyword\">only</span> <span class=\"hljs-keyword\">show</span> <span class=\"hljs-keyword\">indexes</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">tables</span>\n                         matching <span class=\"hljs-keyword\">LIKE</span> pattern TABLE.\n.limit ?<span class=\"hljs-keyword\">LIMIT</span>? ?VAL?   Display <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">change</span> the <span class=\"hljs-keyword\">value</span> <span class=\"hljs-keyword\">of</span> an SQLITE_LIMIT\n.lint OPTIONS          Report potential <span class=\"hljs-keyword\">schema</span> issues. Options:\n                         fkey-<span class=\"hljs-keyword\">indexes</span>     Find <span class=\"hljs-keyword\">missing</span> <span class=\"hljs-keyword\">foreign</span> <span class=\"hljs-keyword\">key</span> <span class=\"hljs-keyword\">indexes</span>\n.log <span class=\"hljs-keyword\">FILE</span>|<span class=\"hljs-keyword\">off</span>          Turn <span class=\"hljs-keyword\">logging</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> off.  <span class=\"hljs-keyword\">FILE</span> can be stderr/stdout\n.mode <span class=\"hljs-keyword\">MODE</span> ?<span class=\"hljs-keyword\">TABLE</span>?     <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">mode</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">MODE</span> <span class=\"hljs-keyword\">is</span> one <span class=\"hljs-keyword\">of</span>:\n                         <span class=\"hljs-keyword\">ascii</span>    <span class=\"hljs-keyword\">Columns</span>/<span class=\"hljs-keyword\">rows</span> <span class=\"hljs-keyword\">delimited</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-number\">0x1F</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0x1E</span>\n                         csv      Comma-separated <span class=\"hljs-keyword\">values</span>\n                         <span class=\"hljs-keyword\">column</span>   <span class=\"hljs-keyword\">Left</span>-aligned columns.  (See .width)\n                         html     HTML &lt;<span class=\"hljs-keyword\">table</span>&gt; code\n                         <span class=\"hljs-keyword\">insert</span>   <span class=\"hljs-keyword\">SQL</span> <span class=\"hljs-keyword\">insert</span> statements <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">TABLE</span>\n                         line     One <span class=\"hljs-keyword\">value</span> per line\n                         <span class=\"hljs-keyword\">list</span>     <span class=\"hljs-keyword\">Values</span> <span class=\"hljs-keyword\">delimited</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">\"|\"</span>\n                         quote    Escape answers <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">SQL</span>\n                         tabs     Tab-separated <span class=\"hljs-keyword\">values</span>\n                         tcl      TCL <span class=\"hljs-keyword\">list</span> elements\n.nullvalue <span class=\"hljs-keyword\">STRING</span>      <span class=\"hljs-keyword\">Use</span> <span class=\"hljs-keyword\">STRING</span> <span class=\"hljs-keyword\">in</span> place <span class=\"hljs-keyword\">of</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">values</span>\n.once (-e|-x|<span class=\"hljs-keyword\">FILE</span>)     <span class=\"hljs-keyword\">Output</span> <span class=\"hljs-keyword\">for</span> the <span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">SQL</span> command <span class=\"hljs-keyword\">only</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">FILE</span>\n                         <span class=\"hljs-keyword\">or</span> invoke <span class=\"hljs-keyword\">system</span> <span class=\"hljs-built_in\">text</span> editor (-e) <span class=\"hljs-keyword\">or</span> spreadsheet (-x)\n                         <span class=\"hljs-keyword\">on</span> the output.\n.open ?OPTIONS? ?<span class=\"hljs-keyword\">FILE</span>? <span class=\"hljs-keyword\">Close</span> existing <span class=\"hljs-keyword\">database</span> <span class=\"hljs-keyword\">and</span> reopen <span class=\"hljs-keyword\">FILE</span>\n                         The <span class=\"hljs-comment\">--new option starts with an empty file</span>\n                         Other options: <span class=\"hljs-comment\">--readonly --append --zip</span>\n.output ?<span class=\"hljs-keyword\">FILE</span>?         Send <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">FILE</span> <span class=\"hljs-keyword\">or</span> stdout\n.print STRING...       Print literal <span class=\"hljs-keyword\">STRING</span>\n.prompt <span class=\"hljs-keyword\">MAIN</span> CONTINUE  <span class=\"hljs-keyword\">Replace</span> the standard prompts\n.quit                  <span class=\"hljs-keyword\">Exit</span> this program\n.read FILENAME         <span class=\"hljs-keyword\">Execute</span> <span class=\"hljs-keyword\">SQL</span> <span class=\"hljs-keyword\">in</span> FILENAME\n.restore ?DB? <span class=\"hljs-keyword\">FILE</span>     <span class=\"hljs-keyword\">Restore</span> <span class=\"hljs-keyword\">content</span> <span class=\"hljs-keyword\">of</span> DB (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">\"main\"</span>) <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">FILE</span>\n.save <span class=\"hljs-keyword\">FILE</span>             Write <span class=\"hljs-keyword\">in</span>-<span class=\"hljs-keyword\">memory</span> <span class=\"hljs-keyword\">database</span> <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">FILE</span>\n.scanstats <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>      Turn sqlite3_stmt_scanstatus() metrics <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">off</span>\n.schema ?PATTERN?      <span class=\"hljs-keyword\">Show</span> the <span class=\"hljs-keyword\">CREATE</span> statements matching PATTERN\n                          <span class=\"hljs-keyword\">Add</span> <span class=\"hljs-comment\">--indent for pretty-printing</span>\n.selftest ?<span class=\"hljs-comment\">--init?     Run tests defined in the SELFTEST table</span>\n.separator <span class=\"hljs-keyword\">COL</span> ?<span class=\"hljs-keyword\">ROW</span>?   <span class=\"hljs-keyword\">Change</span> the <span class=\"hljs-keyword\">column</span> separator <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">optionally</span> the <span class=\"hljs-keyword\">row</span>\n                         separator <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">both</span> the <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">mode</span> <span class=\"hljs-keyword\">and</span> .import\n.session CMD ...       <span class=\"hljs-keyword\">Create</span> <span class=\"hljs-keyword\">or</span> control sessions\n.sha3sum ?OPTIONS...?  <span class=\"hljs-keyword\">Compute</span> a SHA3 <span class=\"hljs-keyword\">hash</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">database</span> <span class=\"hljs-keyword\">content</span>\n.shell CMD ARGS...     Run CMD ARGS... <span class=\"hljs-keyword\">in</span> a <span class=\"hljs-keyword\">system</span> shell\n.show                  <span class=\"hljs-keyword\">Show</span> the <span class=\"hljs-keyword\">current</span> <span class=\"hljs-keyword\">values</span> <span class=\"hljs-keyword\">for</span> various <span class=\"hljs-keyword\">settings</span>\n.stats ?<span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>?        <span class=\"hljs-keyword\">Show</span> stats <span class=\"hljs-keyword\">or</span> turn stats <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">off</span>\n.system CMD ARGS...    Run CMD ARGS... <span class=\"hljs-keyword\">in</span> a <span class=\"hljs-keyword\">system</span> shell\n.tables ?<span class=\"hljs-keyword\">TABLE</span>?        <span class=\"hljs-keyword\">List</span> <span class=\"hljs-keyword\">names</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">tables</span>\n                         <span class=\"hljs-keyword\">If</span> <span class=\"hljs-keyword\">TABLE</span> specified, <span class=\"hljs-keyword\">only</span> <span class=\"hljs-keyword\">list</span> <span class=\"hljs-keyword\">tables</span> matching\n                         <span class=\"hljs-keyword\">LIKE</span> pattern TABLE.\n.testcase <span class=\"hljs-keyword\">NAME</span>         <span class=\"hljs-keyword\">Begin</span> redirecting <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">'testcase-out.txt'</span>\n.timeout MS            Try opening <span class=\"hljs-keyword\">locked</span> <span class=\"hljs-keyword\">tables</span> <span class=\"hljs-keyword\">for</span> MS milliseconds\n.timer <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>          Turn <span class=\"hljs-keyword\">SQL</span> timer <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">off</span>\n.trace <span class=\"hljs-keyword\">FILE</span>|<span class=\"hljs-keyword\">off</span>        <span class=\"hljs-keyword\">Output</span> <span class=\"hljs-keyword\">each</span> <span class=\"hljs-keyword\">SQL</span> <span class=\"hljs-keyword\">statement</span> <span class=\"hljs-keyword\">as</span> it <span class=\"hljs-keyword\">is</span> run\n.vfsinfo ?AUX?         Information about the top-<span class=\"hljs-keyword\">level</span> VFS\n.vfslist               <span class=\"hljs-keyword\">List</span> <span class=\"hljs-keyword\">all</span> available VFSes\n.vfsname ?AUX?         Print the <span class=\"hljs-keyword\">name</span> <span class=\"hljs-keyword\">of</span> the VFS stack\n.width NUM1 NUM2 ...   <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">column</span> widths <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">\"column\"</span> <span class=\"hljs-keyword\">mode</span>\n                         Negative <span class=\"hljs-keyword\">values</span> <span class=\"hljs-keyword\">right</span>-justify\n\n</code></pre>\n<h2 id=\"2-程序\"><a class=\"markdownIt-Anchor\" href=\"#2-程序\"></a> 2、程序</h2>\n<p>SQLite 语句</p>\n<p>所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。</p>\n<p>2.1 SQLite ANALYZE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">ANALYZE</span>;\nor\n<span class=\"hljs-keyword\">ANALYZE</span> database_name;\nor\n<span class=\"hljs-keyword\">ANALYZE</span> database_name.table_name;\n</code></pre>\n<p>2.2 SQLite AND/OR 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  CONDITION<span class=\"hljs-number\">-1</span> &#123;<span class=\"hljs-keyword\">AND</span>|<span class=\"hljs-keyword\">OR</span>&#125; CONDITION<span class=\"hljs-number\">-2</span>;\n</code></pre>\n<p>2.3 SQLite ALTER TABLE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">COLUMN</span> column_def...;\n</code></pre>\n<p>2.4 SQLite ALTER TABLE 语句（Rename）：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">RENAME</span> <span class=\"hljs-keyword\">TO</span> new_table_name;\n</code></pre>\n<p>2.5 SQLite ATTACH DATABASE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\">ATTACH DATABASE 'DatabaseName' As 'Alias-Name';\n</code></pre>\n<p>2.6 SQLite BEGIN TRANSACTION 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">BEGIN</span>;\nor\n<span class=\"hljs-keyword\">BEGIN</span> EXCLUSIVE <span class=\"hljs-keyword\">TRANSACTION</span>;\n</code></pre>\n<p>2.7 SQLite BETWEEN 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  column_name <span class=\"hljs-keyword\">BETWEEN</span> val<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">AND</span> val<span class=\"hljs-number\">-2</span>;\n</code></pre>\n<p>2.8 SQLite COMMIT 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">COMMIT</span>;\n</code></pre>\n<p>2.9 SQLite CREATE INDEX 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">INDEX</span> index_name\n<span class=\"hljs-keyword\">ON</span> table_name ( column_name <span class=\"hljs-keyword\">COLLATE</span> NOCASE );\n</code></pre>\n<p>2.10 SQLite CREATE UNIQUE INDEX 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">INDEX</span> index_name\n<span class=\"hljs-keyword\">ON</span> table_name ( column1, column2,...columnN);\n</code></pre>\n<p>2.11 SQLite CREATE TABLE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> table_name(\n   column1 datatype,\n   column2 datatype,\n   column3 datatype,\n   .....\n   columnN datatype,\n   PRIMARY <span class=\"hljs-keyword\">KEY</span>( one <span class=\"hljs-keyword\">or</span> more <span class=\"hljs-keyword\">columns</span> )\n);\n</code></pre>\n<p>2.12 SQLite CREATE TRIGGER 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> database_name.trigger_name\n<span class=\"hljs-keyword\">BEFORE</span> <span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">ON</span> table_name <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span>\n<span class=\"hljs-keyword\">BEGIN</span>\n   stmt1;\n   stmt2;\n   ....\n<span class=\"hljs-keyword\">END</span>;\n</code></pre>\n<p>2.13 SQLite CREATE VIEW 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">VIEW</span> database_name.view_name  <span class=\"hljs-keyword\">AS</span>\n<span class=\"hljs-keyword\">SELECT</span> statement....;\n</code></pre>\n<p>2.14 SQLite CREATE VIRTUAL TABLE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">VIRTUAL</span> <span class=\"hljs-keyword\">TABLE</span> database_name.table_name <span class=\"hljs-keyword\">USING</span> weblog( access.log );\nor\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">VIRTUAL</span> <span class=\"hljs-keyword\">TABLE</span> database_name.table_name <span class=\"hljs-keyword\">USING</span> fts3( );\n</code></pre>\n<p>2.15 SQLite COMMIT TRANSACTION 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">COMMIT</span>;\n</code></pre>\n<p>2.16 SQLite COUNT 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">COUNT</span>(column_name)\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  CONDITION;\n</code></pre>\n<p>2.17 SQLite DELETE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> table_name\n<span class=\"hljs-keyword\">WHERE</span>  &#123;CONDITION&#125;;\n</code></pre>\n<p>2.18 SQLite DETACH DATABASE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\">DETACH DATABASE 'Alias-Name';\n</code></pre>\n<p>2.19 SQLite DISTINCT 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">DISTINCT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name;\n</code></pre>\n<p>2.20 SQLite DROP INDEX 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">INDEX</span> database_name.index_name;\n</code></pre>\n<p>2.21 SQLite DROP TABLE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> database_name.table_name;\n</code></pre>\n<p>2.22 SQLite DROP VIEW 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">VIEW</span> view_name;\n</code></pre>\n<p>2.23 SQLite DROP TRIGGER 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TRIGGER</span> trigger_name\n</code></pre>\n<p>2.24 SQLite EXISTS 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  column_name <span class=\"hljs-keyword\">EXISTS</span> (<span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span>   table_name );\n</code></pre>\n<p>2.25 SQLite EXPLAIN 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">EXPLAIN</span> <span class=\"hljs-keyword\">INSERT</span> statement...;\nor\n<span class=\"hljs-keyword\">EXPLAIN</span> <span class=\"hljs-keyword\">QUERY</span> PLAN <span class=\"hljs-keyword\">SELECT</span> statement...;\n</code></pre>\n<p>2.26 SQLite GLOB 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  column_name GLOB &#123; PATTERN &#125;;\n</code></pre>\n<p>2.27 SQLite GROUP BY 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">SUM</span>(column_name)\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  CONDITION\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> column_name;\n</code></pre>\n<p>2.28 SQLite HAVING 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">SUM</span>(column_name)\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  CONDITION\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> column_name\n<span class=\"hljs-keyword\">HAVING</span> (arithematic <span class=\"hljs-keyword\">function</span> condition);\n</code></pre>\n<p>2.29 SQLite INSERT INTO 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> table_name( column1, column2....columnN)\n<span class=\"hljs-keyword\">VALUES</span> ( value1, value2....valueN);\n</code></pre>\n<p>2.30 SQLite IN 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  column_name <span class=\"hljs-keyword\">IN</span> (val<span class=\"hljs-number\">-1</span>, val<span class=\"hljs-number\">-2</span>,...val-N);\n</code></pre>\n<p>2.31 SQLite Like 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  column_name <span class=\"hljs-keyword\">LIKE</span> &#123; PATTERN &#125;;\n</code></pre>\n<p>2.32 SQLite NOT IN 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  column_name <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">IN</span> (val<span class=\"hljs-number\">-1</span>, val<span class=\"hljs-number\">-2</span>,...val-N);\n</code></pre>\n<p>2.33 SQLite ORDER BY 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  CONDITION\n<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> column_name &#123;<span class=\"hljs-keyword\">ASC</span>|<span class=\"hljs-keyword\">DESC</span>&#125;;\n</code></pre>\n<p>2.34 SQLite PRAGMA 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">PRAGMA</span> pragma_name;\n\nFor example:\n<span class=\"hljs-keyword\">PRAGMA</span> page_size;\n<span class=\"hljs-keyword\">PRAGMA</span> cache_size = <span class=\"hljs-number\">1024</span>;\n<span class=\"hljs-keyword\">PRAGMA</span> table_info(table_name);\n</code></pre>\n<p>2.35 SQLite RELEASE SAVEPOINT 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">RELEASE</span> savepoint_name;\n</code></pre>\n<p>2.36 SQLite REINDEX 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\">REINDEX collation_name;\nREINDEX database_name.index_name;\nREINDEX database_name.table_name;\n</code></pre>\n<p>2.37 SQLite ROLLBACK 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">ROLLBACK</span>;\nor\n<span class=\"hljs-keyword\">ROLLBACK</span> <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-keyword\">SAVEPOINT</span> savepoint_name;\n</code></pre>\n<p>2.38 SQLite SAVEPOINT 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SAVEPOINT</span> savepoint_name;\n</code></pre>\n<p>2.39 SQLite SELECT 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name;\n</code></pre>\n<p>2.40 SQLite UPDATE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">UPDATE</span> table_name\n<span class=\"hljs-keyword\">SET</span> column1 = value1, column2 = value2....columnN=valueN\n[ <span class=\"hljs-keyword\">WHERE</span>  CONDITION ];\n</code></pre>\n<p>2.41 SQLite VACUUM 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\">VACUUM;\n</code></pre>\n<p>2.42 SQLite WHERE 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  CONDITION;\n</code></pre>\n<h2 id=\"3-常见专有名词\"><a class=\"markdownIt-Anchor\" href=\"#3-常见专有名词\"></a> 3、常见专有名词</h2>\n<p>事务<br />\n游标<br />\n触发器<br />\n存储过程<br />\n回滚<br />\n约束<br />\n索引<br />\n视图</p>\n<h2 id=\"4-常用操作\"><a class=\"markdownIt-Anchor\" href=\"#4-常用操作\"></a> 4、常用操作</h2>\n<p>数据同步<br />\n导入、导出<br />\nCRUD (Create/Retrieve/Update/Delete)</p>\n<h2 id=\"5-建表原则\"><a class=\"markdownIt-Anchor\" href=\"#5-建表原则\"></a> 5、建表原则</h2>\n<p>数据范式</p>\n<h2 id=\"6-事务特性\"><a class=\"markdownIt-Anchor\" href=\"#6-事务特性\"></a> 6、事务特性</h2>\n<p>ACID</p>\n<h2 id=\"7-数据库\"><a class=\"markdownIt-Anchor\" href=\"#7-数据库\"></a> 7、数据库</h2>\n<p>常见数据库：SQLite、MySQL、SQLServer、Oracle、MOngoDB</p>\n<p>7.1 分类：<br />\n关系型：Oracle和MySQL<br />\n非关系型：NoSQL(NoSQL = Not Only SQL )<br />\n（1）键值存储数据库（key-value）</p>\n<p>键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。</p>\n<p>键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。</p>\n<p>典型产品：Memcached、Redis、MemcacheDB</p>\n<p>（2）列存储（Column-oriented）数据库</p>\n<p>列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。</p>\n<p>这种数据库通常用来应对分布式存储海量数据。</p>\n<p>典型产品：Cassandra、HBase</p>\n<p>（3）面向文档（Document-Oriented）数据库</p>\n<p>文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。</p>\n<p>面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。</p>\n<p>典型产品：MongoDB、CouchDB</p>\n<p>（4）图形数据库</p>\n<p>图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。</p>\n<p>典型产品：Neo4J、InforGrid</p>\n<p>7.2 数据库引擎：数据库引擎是用于存储、处理和保护数据的核心服务。<br />\nMYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。</p>\n<p>你能用的数据库引擎取决于mysql在安装的时候是如何被编译的。要添加一个新的引擎，就必须重新编译MYSQL。在缺省情况下，MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。</p>\n<ul>\n<li>ISAM</li>\n</ul>\n<blockquote>\n<p>ISAM是一个定义明确且历经时间考验的数据表格管理方法，它在设计之时就考虑到数据库被查询的次数要远大于更新的次数。因此，ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错：如果你的硬盘崩溃了，那么数据文件就无法恢复了。如果你正在把ISAM用在关键任务应用程序里，那就必须经常备份你所有的实时数据，通过其复制特性，MYSQL能够支持这样的备份应用程序。</p>\n</blockquote>\n<ul>\n<li>MYISAM</li>\n</ul>\n<blockquote>\n<p>MYISAM是MYSQL的ISAM扩展格式和缺省的数据库引擎。除了提供ISAM里所没有的索引和字段管理的大量功能，MYISAM还使用一种表格锁定的机制，来优化多个并发的读写操作。其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。MYISAM还有一些有用的扩展，例如用来修复数据库文件的MYISAMCHK工具和用来恢复浪费空间的MYISAMPACK工具。<br />\nMYISAM强调了快速读取操作，这可能就是为什么MYSQL受到了WEB开发如此青睐的主要原因：在WEB开发中你所进行的大量数据操作都是读取操作。所以，大多数虚拟主机提供商和INTERNET平台提供商只允许使用MYISAM格式。</p>\n</blockquote>\n<ul>\n<li>HEAP</li>\n</ul>\n<blockquote>\n<p>HEAP允许只驻留在内存里的临时表格。驻留在内存里让HEAP要比ISAM和MYISAM都快，但是它所管理的数据是不稳定的，而且如果在关机之前没有进行保存，那么所有的数据都会丢失。在数据行被删除的时候，HEAP也不会浪费大量的空间。HEAP表格在你需要使用SELECT表达式来选择和操控数据的时候非常有用。要记住，在用完表格之后就删除表格。</p>\n</blockquote>\n<ul>\n<li>INNODB和BERKLEYDB</li>\n</ul>\n<blockquote>\n<p>INNODB和BERKLEYDB（BDB）数据库引擎都是造就MYSQL灵活性的技术的直接产品，这项技术就是MYSQL++ API。在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MYISAM数据库引擎不支持事务处理也不支持外来键。尽管要比ISAM和MYISAM引擎慢很多，但是INNODB和BDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。如前所述，如果你的设计需要这些特性中的一者或者两者，那你就要被迫使用后两个引擎中的一个了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"sqlite\"><a class=\"markdownIt-Anchor\" href=\"#sqlite\"></a> SQLite</h1>\n<h2 id=\"1-终端命令\"><a class=\"markdownIt-Anchor\" href=\"#1-终端命令\"></a> 1、终端命令</h2>\n<pre class=\"highlight\"><code class=\"sql\">.auth ON|OFF           <span class=\"hljs-keyword\">Show</span> authorizer callbacks\n.backup ?DB? <span class=\"hljs-keyword\">FILE</span>      <span class=\"hljs-keyword\">Backup</span> DB (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">\"main\"</span>) <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">FILE</span>\n                         <span class=\"hljs-keyword\">Add</span> <span class=\"hljs-string\">\"--append\"</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">open</span> <span class=\"hljs-keyword\">using</span> appendvfs.\n.bail <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>           <span class=\"hljs-keyword\">Stop</span> <span class=\"hljs-keyword\">after</span> hitting an error.  <span class=\"hljs-keyword\">Default</span> <span class=\"hljs-keyword\">OFF</span>\n.binary <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>         Turn <span class=\"hljs-built_in\">binary</span> <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> off.  <span class=\"hljs-keyword\">Default</span> <span class=\"hljs-keyword\">OFF</span>\n.cd <span class=\"hljs-keyword\">DIRECTORY</span>          <span class=\"hljs-keyword\">Change</span> the working <span class=\"hljs-keyword\">directory</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">DIRECTORY</span>\n.changes <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>        <span class=\"hljs-keyword\">Show</span> <span class=\"hljs-built_in\">number</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">rows</span> <span class=\"hljs-keyword\">changed</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-keyword\">SQL</span>\n.check GLOB            Fail <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">output</span> since .testcase does <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">match</span>\n.clone NEWDB           <span class=\"hljs-keyword\">Clone</span> <span class=\"hljs-keyword\">data</span> <span class=\"hljs-keyword\">into</span> NEWDB <span class=\"hljs-keyword\">from</span> the existing <span class=\"hljs-keyword\">database</span>\n.databases             <span class=\"hljs-keyword\">List</span> <span class=\"hljs-keyword\">names</span> <span class=\"hljs-keyword\">and</span> files <span class=\"hljs-keyword\">of</span> attached <span class=\"hljs-keyword\">databases</span>\n.dbconfig ?op? ?val?   <span class=\"hljs-keyword\">List</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">change</span> sqlite3_db_config() options\n.dbinfo ?DB?           <span class=\"hljs-keyword\">Show</span> <span class=\"hljs-keyword\">status</span> information about the <span class=\"hljs-keyword\">database</span>\n.dump ?<span class=\"hljs-keyword\">TABLE</span>? ...      Dump the <span class=\"hljs-keyword\">database</span> <span class=\"hljs-keyword\">in</span> an <span class=\"hljs-keyword\">SQL</span> <span class=\"hljs-built_in\">text</span> <span class=\"hljs-keyword\">format</span>\n                         <span class=\"hljs-keyword\">If</span> <span class=\"hljs-keyword\">TABLE</span> specified, <span class=\"hljs-keyword\">only</span> dump <span class=\"hljs-keyword\">tables</span> matching\n                         <span class=\"hljs-keyword\">LIKE</span> pattern TABLE.\n.echo <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>           Turn command echo <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">off</span>\n.eqp <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>|<span class=\"hljs-keyword\">full</span>       <span class=\"hljs-keyword\">Enable</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">disable</span> <span class=\"hljs-keyword\">automatic</span> <span class=\"hljs-keyword\">EXPLAIN</span> <span class=\"hljs-keyword\">QUERY</span> PLAN\n.excel                 Display the <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">next</span> command <span class=\"hljs-keyword\">in</span> a spreadsheet\n.exit                  <span class=\"hljs-keyword\">Exit</span> this program\n.expert                EXPERIMENTAL. Suggest <span class=\"hljs-keyword\">indexes</span> <span class=\"hljs-keyword\">for</span> specified queries\n.fullschema ?<span class=\"hljs-comment\">--indent? Show schema and the content of sqlite_stat tables</span>\n.headers <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>        Turn display <span class=\"hljs-keyword\">of</span> headers <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">off</span>\n.help                  <span class=\"hljs-keyword\">Show</span> this message\n.import <span class=\"hljs-keyword\">FILE</span> <span class=\"hljs-keyword\">TABLE</span>     <span class=\"hljs-keyword\">Import</span> <span class=\"hljs-keyword\">data</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">FILE</span> <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">TABLE</span>\n.imposter <span class=\"hljs-keyword\">INDEX</span> <span class=\"hljs-keyword\">TABLE</span>  <span class=\"hljs-keyword\">Create</span> imposter <span class=\"hljs-keyword\">table</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">index</span> <span class=\"hljs-keyword\">INDEX</span>\n.indexes ?<span class=\"hljs-keyword\">TABLE</span>?       <span class=\"hljs-keyword\">Show</span> <span class=\"hljs-keyword\">names</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">indexes</span>\n                         <span class=\"hljs-keyword\">If</span> <span class=\"hljs-keyword\">TABLE</span> specified, <span class=\"hljs-keyword\">only</span> <span class=\"hljs-keyword\">show</span> <span class=\"hljs-keyword\">indexes</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">tables</span>\n                         matching <span class=\"hljs-keyword\">LIKE</span> pattern TABLE.\n.limit ?<span class=\"hljs-keyword\">LIMIT</span>? ?VAL?   Display <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">change</span> the <span class=\"hljs-keyword\">value</span> <span class=\"hljs-keyword\">of</span> an SQLITE_LIMIT\n.lint OPTIONS          Report potential <span class=\"hljs-keyword\">schema</span> issues. Options:\n                         fkey-<span class=\"hljs-keyword\">indexes</span>     Find <span class=\"hljs-keyword\">missing</span> <span class=\"hljs-keyword\">foreign</span> <span class=\"hljs-keyword\">key</span> <span class=\"hljs-keyword\">indexes</span>\n.log <span class=\"hljs-keyword\">FILE</span>|<span class=\"hljs-keyword\">off</span>          Turn <span class=\"hljs-keyword\">logging</span> <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> off.  <span class=\"hljs-keyword\">FILE</span> can be stderr/stdout\n.mode <span class=\"hljs-keyword\">MODE</span> ?<span class=\"hljs-keyword\">TABLE</span>?     <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">mode</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">MODE</span> <span class=\"hljs-keyword\">is</span> one <span class=\"hljs-keyword\">of</span>:\n                         <span class=\"hljs-keyword\">ascii</span>    <span class=\"hljs-keyword\">Columns</span>/<span class=\"hljs-keyword\">rows</span> <span class=\"hljs-keyword\">delimited</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-number\">0x1F</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0x1E</span>\n                         csv      Comma-separated <span class=\"hljs-keyword\">values</span>\n                         <span class=\"hljs-keyword\">column</span>   <span class=\"hljs-keyword\">Left</span>-aligned columns.  (See .width)\n                         html     HTML &lt;<span class=\"hljs-keyword\">table</span>&gt; code\n                         <span class=\"hljs-keyword\">insert</span>   <span class=\"hljs-keyword\">SQL</span> <span class=\"hljs-keyword\">insert</span> statements <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">TABLE</span>\n                         line     One <span class=\"hljs-keyword\">value</span> per line\n                         <span class=\"hljs-keyword\">list</span>     <span class=\"hljs-keyword\">Values</span> <span class=\"hljs-keyword\">delimited</span> <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">\"|\"</span>\n                         quote    Escape answers <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">SQL</span>\n                         tabs     Tab-separated <span class=\"hljs-keyword\">values</span>\n                         tcl      TCL <span class=\"hljs-keyword\">list</span> elements\n.nullvalue <span class=\"hljs-keyword\">STRING</span>      <span class=\"hljs-keyword\">Use</span> <span class=\"hljs-keyword\">STRING</span> <span class=\"hljs-keyword\">in</span> place <span class=\"hljs-keyword\">of</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">values</span>\n.once (-e|-x|<span class=\"hljs-keyword\">FILE</span>)     <span class=\"hljs-keyword\">Output</span> <span class=\"hljs-keyword\">for</span> the <span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">SQL</span> command <span class=\"hljs-keyword\">only</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">FILE</span>\n                         <span class=\"hljs-keyword\">or</span> invoke <span class=\"hljs-keyword\">system</span> <span class=\"hljs-built_in\">text</span> editor (-e) <span class=\"hljs-keyword\">or</span> spreadsheet (-x)\n                         <span class=\"hljs-keyword\">on</span> the output.\n.open ?OPTIONS? ?<span class=\"hljs-keyword\">FILE</span>? <span class=\"hljs-keyword\">Close</span> existing <span class=\"hljs-keyword\">database</span> <span class=\"hljs-keyword\">and</span> reopen <span class=\"hljs-keyword\">FILE</span>\n                         The <span class=\"hljs-comment\">--new option starts with an empty file</span>\n                         Other options: <span class=\"hljs-comment\">--readonly --append --zip</span>\n.output ?<span class=\"hljs-keyword\">FILE</span>?         Send <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">FILE</span> <span class=\"hljs-keyword\">or</span> stdout\n.print STRING...       Print literal <span class=\"hljs-keyword\">STRING</span>\n.prompt <span class=\"hljs-keyword\">MAIN</span> CONTINUE  <span class=\"hljs-keyword\">Replace</span> the standard prompts\n.quit                  <span class=\"hljs-keyword\">Exit</span> this program\n.read FILENAME         <span class=\"hljs-keyword\">Execute</span> <span class=\"hljs-keyword\">SQL</span> <span class=\"hljs-keyword\">in</span> FILENAME\n.restore ?DB? <span class=\"hljs-keyword\">FILE</span>     <span class=\"hljs-keyword\">Restore</span> <span class=\"hljs-keyword\">content</span> <span class=\"hljs-keyword\">of</span> DB (<span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">\"main\"</span>) <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">FILE</span>\n.save <span class=\"hljs-keyword\">FILE</span>             Write <span class=\"hljs-keyword\">in</span>-<span class=\"hljs-keyword\">memory</span> <span class=\"hljs-keyword\">database</span> <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">FILE</span>\n.scanstats <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>      Turn sqlite3_stmt_scanstatus() metrics <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">off</span>\n.schema ?PATTERN?      <span class=\"hljs-keyword\">Show</span> the <span class=\"hljs-keyword\">CREATE</span> statements matching PATTERN\n                          <span class=\"hljs-keyword\">Add</span> <span class=\"hljs-comment\">--indent for pretty-printing</span>\n.selftest ?<span class=\"hljs-comment\">--init?     Run tests defined in the SELFTEST table</span>\n.separator <span class=\"hljs-keyword\">COL</span> ?<span class=\"hljs-keyword\">ROW</span>?   <span class=\"hljs-keyword\">Change</span> the <span class=\"hljs-keyword\">column</span> separator <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">optionally</span> the <span class=\"hljs-keyword\">row</span>\n                         separator <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">both</span> the <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">mode</span> <span class=\"hljs-keyword\">and</span> .import\n.session CMD ...       <span class=\"hljs-keyword\">Create</span> <span class=\"hljs-keyword\">or</span> control sessions\n.sha3sum ?OPTIONS...?  <span class=\"hljs-keyword\">Compute</span> a SHA3 <span class=\"hljs-keyword\">hash</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">database</span> <span class=\"hljs-keyword\">content</span>\n.shell CMD ARGS...     Run CMD ARGS... <span class=\"hljs-keyword\">in</span> a <span class=\"hljs-keyword\">system</span> shell\n.show                  <span class=\"hljs-keyword\">Show</span> the <span class=\"hljs-keyword\">current</span> <span class=\"hljs-keyword\">values</span> <span class=\"hljs-keyword\">for</span> various <span class=\"hljs-keyword\">settings</span>\n.stats ?<span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>?        <span class=\"hljs-keyword\">Show</span> stats <span class=\"hljs-keyword\">or</span> turn stats <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">off</span>\n.system CMD ARGS...    Run CMD ARGS... <span class=\"hljs-keyword\">in</span> a <span class=\"hljs-keyword\">system</span> shell\n.tables ?<span class=\"hljs-keyword\">TABLE</span>?        <span class=\"hljs-keyword\">List</span> <span class=\"hljs-keyword\">names</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">tables</span>\n                         <span class=\"hljs-keyword\">If</span> <span class=\"hljs-keyword\">TABLE</span> specified, <span class=\"hljs-keyword\">only</span> <span class=\"hljs-keyword\">list</span> <span class=\"hljs-keyword\">tables</span> matching\n                         <span class=\"hljs-keyword\">LIKE</span> pattern TABLE.\n.testcase <span class=\"hljs-keyword\">NAME</span>         <span class=\"hljs-keyword\">Begin</span> redirecting <span class=\"hljs-keyword\">output</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">'testcase-out.txt'</span>\n.timeout MS            Try opening <span class=\"hljs-keyword\">locked</span> <span class=\"hljs-keyword\">tables</span> <span class=\"hljs-keyword\">for</span> MS milliseconds\n.timer <span class=\"hljs-keyword\">on</span>|<span class=\"hljs-keyword\">off</span>          Turn <span class=\"hljs-keyword\">SQL</span> timer <span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">off</span>\n.trace <span class=\"hljs-keyword\">FILE</span>|<span class=\"hljs-keyword\">off</span>        <span class=\"hljs-keyword\">Output</span> <span class=\"hljs-keyword\">each</span> <span class=\"hljs-keyword\">SQL</span> <span class=\"hljs-keyword\">statement</span> <span class=\"hljs-keyword\">as</span> it <span class=\"hljs-keyword\">is</span> run\n.vfsinfo ?AUX?         Information about the top-<span class=\"hljs-keyword\">level</span> VFS\n.vfslist               <span class=\"hljs-keyword\">List</span> <span class=\"hljs-keyword\">all</span> available VFSes\n.vfsname ?AUX?         Print the <span class=\"hljs-keyword\">name</span> <span class=\"hljs-keyword\">of</span> the VFS stack\n.width NUM1 NUM2 ...   <span class=\"hljs-keyword\">Set</span> <span class=\"hljs-keyword\">column</span> widths <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">\"column\"</span> <span class=\"hljs-keyword\">mode</span>\n                         Negative <span class=\"hljs-keyword\">values</span> <span class=\"hljs-keyword\">right</span>-justify\n\n</code></pre>\n<h2 id=\"2-程序\"><a class=\"markdownIt-Anchor\" href=\"#2-程序\"></a> 2、程序</h2>\n<p>SQLite 语句</p>\n<p>所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。</p>\n<p>2.1 SQLite ANALYZE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">ANALYZE</span>;\nor\n<span class=\"hljs-keyword\">ANALYZE</span> database_name;\nor\n<span class=\"hljs-keyword\">ANALYZE</span> database_name.table_name;\n</code></pre>\n<p>2.2 SQLite AND/OR 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  CONDITION<span class=\"hljs-number\">-1</span> &#123;<span class=\"hljs-keyword\">AND</span>|<span class=\"hljs-keyword\">OR</span>&#125; CONDITION<span class=\"hljs-number\">-2</span>;\n</code></pre>\n<p>2.3 SQLite ALTER TABLE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">COLUMN</span> column_def...;\n</code></pre>\n<p>2.4 SQLite ALTER TABLE 语句（Rename）：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> table_name <span class=\"hljs-keyword\">RENAME</span> <span class=\"hljs-keyword\">TO</span> new_table_name;\n</code></pre>\n<p>2.5 SQLite ATTACH DATABASE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\">ATTACH DATABASE 'DatabaseName' As 'Alias-Name';\n</code></pre>\n<p>2.6 SQLite BEGIN TRANSACTION 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">BEGIN</span>;\nor\n<span class=\"hljs-keyword\">BEGIN</span> EXCLUSIVE <span class=\"hljs-keyword\">TRANSACTION</span>;\n</code></pre>\n<p>2.7 SQLite BETWEEN 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  column_name <span class=\"hljs-keyword\">BETWEEN</span> val<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">AND</span> val<span class=\"hljs-number\">-2</span>;\n</code></pre>\n<p>2.8 SQLite COMMIT 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">COMMIT</span>;\n</code></pre>\n<p>2.9 SQLite CREATE INDEX 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">INDEX</span> index_name\n<span class=\"hljs-keyword\">ON</span> table_name ( column_name <span class=\"hljs-keyword\">COLLATE</span> NOCASE );\n</code></pre>\n<p>2.10 SQLite CREATE UNIQUE INDEX 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">UNIQUE</span> <span class=\"hljs-keyword\">INDEX</span> index_name\n<span class=\"hljs-keyword\">ON</span> table_name ( column1, column2,...columnN);\n</code></pre>\n<p>2.11 SQLite CREATE TABLE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> table_name(\n   column1 datatype,\n   column2 datatype,\n   column3 datatype,\n   .....\n   columnN datatype,\n   PRIMARY <span class=\"hljs-keyword\">KEY</span>( one <span class=\"hljs-keyword\">or</span> more <span class=\"hljs-keyword\">columns</span> )\n);\n</code></pre>\n<p>2.12 SQLite CREATE TRIGGER 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TRIGGER</span> database_name.trigger_name\n<span class=\"hljs-keyword\">BEFORE</span> <span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">ON</span> table_name <span class=\"hljs-keyword\">FOR</span> <span class=\"hljs-keyword\">EACH</span> <span class=\"hljs-keyword\">ROW</span>\n<span class=\"hljs-keyword\">BEGIN</span>\n   stmt1;\n   stmt2;\n   ....\n<span class=\"hljs-keyword\">END</span>;\n</code></pre>\n<p>2.13 SQLite CREATE VIEW 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">VIEW</span> database_name.view_name  <span class=\"hljs-keyword\">AS</span>\n<span class=\"hljs-keyword\">SELECT</span> statement....;\n</code></pre>\n<p>2.14 SQLite CREATE VIRTUAL TABLE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">VIRTUAL</span> <span class=\"hljs-keyword\">TABLE</span> database_name.table_name <span class=\"hljs-keyword\">USING</span> weblog( access.log );\nor\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">VIRTUAL</span> <span class=\"hljs-keyword\">TABLE</span> database_name.table_name <span class=\"hljs-keyword\">USING</span> fts3( );\n</code></pre>\n<p>2.15 SQLite COMMIT TRANSACTION 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">COMMIT</span>;\n</code></pre>\n<p>2.16 SQLite COUNT 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">COUNT</span>(column_name)\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  CONDITION;\n</code></pre>\n<p>2.17 SQLite DELETE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> table_name\n<span class=\"hljs-keyword\">WHERE</span>  &#123;CONDITION&#125;;\n</code></pre>\n<p>2.18 SQLite DETACH DATABASE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\">DETACH DATABASE 'Alias-Name';\n</code></pre>\n<p>2.19 SQLite DISTINCT 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">DISTINCT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name;\n</code></pre>\n<p>2.20 SQLite DROP INDEX 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">INDEX</span> database_name.index_name;\n</code></pre>\n<p>2.21 SQLite DROP TABLE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TABLE</span> database_name.table_name;\n</code></pre>\n<p>2.22 SQLite DROP VIEW 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">VIEW</span> view_name;\n</code></pre>\n<p>2.23 SQLite DROP TRIGGER 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">TRIGGER</span> trigger_name\n</code></pre>\n<p>2.24 SQLite EXISTS 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  column_name <span class=\"hljs-keyword\">EXISTS</span> (<span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span>   table_name );\n</code></pre>\n<p>2.25 SQLite EXPLAIN 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">EXPLAIN</span> <span class=\"hljs-keyword\">INSERT</span> statement...;\nor\n<span class=\"hljs-keyword\">EXPLAIN</span> <span class=\"hljs-keyword\">QUERY</span> PLAN <span class=\"hljs-keyword\">SELECT</span> statement...;\n</code></pre>\n<p>2.26 SQLite GLOB 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  column_name GLOB &#123; PATTERN &#125;;\n</code></pre>\n<p>2.27 SQLite GROUP BY 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">SUM</span>(column_name)\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  CONDITION\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> column_name;\n</code></pre>\n<p>2.28 SQLite HAVING 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">SUM</span>(column_name)\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  CONDITION\n<span class=\"hljs-keyword\">GROUP</span> <span class=\"hljs-keyword\">BY</span> column_name\n<span class=\"hljs-keyword\">HAVING</span> (arithematic <span class=\"hljs-keyword\">function</span> condition);\n</code></pre>\n<p>2.29 SQLite INSERT INTO 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> table_name( column1, column2....columnN)\n<span class=\"hljs-keyword\">VALUES</span> ( value1, value2....valueN);\n</code></pre>\n<p>2.30 SQLite IN 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  column_name <span class=\"hljs-keyword\">IN</span> (val<span class=\"hljs-number\">-1</span>, val<span class=\"hljs-number\">-2</span>,...val-N);\n</code></pre>\n<p>2.31 SQLite Like 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  column_name <span class=\"hljs-keyword\">LIKE</span> &#123; PATTERN &#125;;\n</code></pre>\n<p>2.32 SQLite NOT IN 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  column_name <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-keyword\">IN</span> (val<span class=\"hljs-number\">-1</span>, val<span class=\"hljs-number\">-2</span>,...val-N);\n</code></pre>\n<p>2.33 SQLite ORDER BY 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  CONDITION\n<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> column_name &#123;<span class=\"hljs-keyword\">ASC</span>|<span class=\"hljs-keyword\">DESC</span>&#125;;\n</code></pre>\n<p>2.34 SQLite PRAGMA 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">PRAGMA</span> pragma_name;\n\nFor example:\n<span class=\"hljs-keyword\">PRAGMA</span> page_size;\n<span class=\"hljs-keyword\">PRAGMA</span> cache_size = <span class=\"hljs-number\">1024</span>;\n<span class=\"hljs-keyword\">PRAGMA</span> table_info(table_name);\n</code></pre>\n<p>2.35 SQLite RELEASE SAVEPOINT 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">RELEASE</span> savepoint_name;\n</code></pre>\n<p>2.36 SQLite REINDEX 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\">REINDEX collation_name;\nREINDEX database_name.index_name;\nREINDEX database_name.table_name;\n</code></pre>\n<p>2.37 SQLite ROLLBACK 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">ROLLBACK</span>;\nor\n<span class=\"hljs-keyword\">ROLLBACK</span> <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-keyword\">SAVEPOINT</span> savepoint_name;\n</code></pre>\n<p>2.38 SQLite SAVEPOINT 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SAVEPOINT</span> savepoint_name;\n</code></pre>\n<p>2.39 SQLite SELECT 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name;\n</code></pre>\n<p>2.40 SQLite UPDATE 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">UPDATE</span> table_name\n<span class=\"hljs-keyword\">SET</span> column1 = value1, column2 = value2....columnN=valueN\n[ <span class=\"hljs-keyword\">WHERE</span>  CONDITION ];\n</code></pre>\n<p>2.41 SQLite VACUUM 语句：</p>\n<pre class=\"highlight\"><code class=\"sql\">VACUUM;\n</code></pre>\n<p>2.42 SQLite WHERE 子句：</p>\n<pre class=\"highlight\"><code class=\"sql\"><span class=\"hljs-keyword\">SELECT</span> column1, column2....columnN\n<span class=\"hljs-keyword\">FROM</span>   table_name\n<span class=\"hljs-keyword\">WHERE</span>  CONDITION;\n</code></pre>\n<h2 id=\"3-常见专有名词\"><a class=\"markdownIt-Anchor\" href=\"#3-常见专有名词\"></a> 3、常见专有名词</h2>\n<p>事务<br />\n游标<br />\n触发器<br />\n存储过程<br />\n回滚<br />\n约束<br />\n索引<br />\n视图</p>\n<h2 id=\"4-常用操作\"><a class=\"markdownIt-Anchor\" href=\"#4-常用操作\"></a> 4、常用操作</h2>\n<p>数据同步<br />\n导入、导出<br />\nCRUD (Create/Retrieve/Update/Delete)</p>\n<h2 id=\"5-建表原则\"><a class=\"markdownIt-Anchor\" href=\"#5-建表原则\"></a> 5、建表原则</h2>\n<p>数据范式</p>\n<h2 id=\"6-事务特性\"><a class=\"markdownIt-Anchor\" href=\"#6-事务特性\"></a> 6、事务特性</h2>\n<p>ACID</p>\n<h2 id=\"7-数据库\"><a class=\"markdownIt-Anchor\" href=\"#7-数据库\"></a> 7、数据库</h2>\n<p>常见数据库：SQLite、MySQL、SQLServer、Oracle、MOngoDB</p>\n<p>7.1 分类：<br />\n关系型：Oracle和MySQL<br />\n非关系型：NoSQL(NoSQL = Not Only SQL )<br />\n（1）键值存储数据库（key-value）</p>\n<p>键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。</p>\n<p>键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。</p>\n<p>典型产品：Memcached、Redis、MemcacheDB</p>\n<p>（2）列存储（Column-oriented）数据库</p>\n<p>列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。</p>\n<p>这种数据库通常用来应对分布式存储海量数据。</p>\n<p>典型产品：Cassandra、HBase</p>\n<p>（3）面向文档（Document-Oriented）数据库</p>\n<p>文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。</p>\n<p>面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。</p>\n<p>典型产品：MongoDB、CouchDB</p>\n<p>（4）图形数据库</p>\n<p>图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。</p>\n<p>典型产品：Neo4J、InforGrid</p>\n<p>7.2 数据库引擎：数据库引擎是用于存储、处理和保护数据的核心服务。<br />\nMYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。</p>\n<p>你能用的数据库引擎取决于mysql在安装的时候是如何被编译的。要添加一个新的引擎，就必须重新编译MYSQL。在缺省情况下，MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。</p>\n<ul>\n<li>ISAM</li>\n</ul>\n<blockquote>\n<p>ISAM是一个定义明确且历经时间考验的数据表格管理方法，它在设计之时就考虑到数据库被查询的次数要远大于更新的次数。因此，ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错：如果你的硬盘崩溃了，那么数据文件就无法恢复了。如果你正在把ISAM用在关键任务应用程序里，那就必须经常备份你所有的实时数据，通过其复制特性，MYSQL能够支持这样的备份应用程序。</p>\n</blockquote>\n<ul>\n<li>MYISAM</li>\n</ul>\n<blockquote>\n<p>MYISAM是MYSQL的ISAM扩展格式和缺省的数据库引擎。除了提供ISAM里所没有的索引和字段管理的大量功能，MYISAM还使用一种表格锁定的机制，来优化多个并发的读写操作。其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。MYISAM还有一些有用的扩展，例如用来修复数据库文件的MYISAMCHK工具和用来恢复浪费空间的MYISAMPACK工具。<br />\nMYISAM强调了快速读取操作，这可能就是为什么MYSQL受到了WEB开发如此青睐的主要原因：在WEB开发中你所进行的大量数据操作都是读取操作。所以，大多数虚拟主机提供商和INTERNET平台提供商只允许使用MYISAM格式。</p>\n</blockquote>\n<ul>\n<li>HEAP</li>\n</ul>\n<blockquote>\n<p>HEAP允许只驻留在内存里的临时表格。驻留在内存里让HEAP要比ISAM和MYISAM都快，但是它所管理的数据是不稳定的，而且如果在关机之前没有进行保存，那么所有的数据都会丢失。在数据行被删除的时候，HEAP也不会浪费大量的空间。HEAP表格在你需要使用SELECT表达式来选择和操控数据的时候非常有用。要记住，在用完表格之后就删除表格。</p>\n</blockquote>\n<ul>\n<li>INNODB和BERKLEYDB</li>\n</ul>\n<blockquote>\n<p>INNODB和BERKLEYDB（BDB）数据库引擎都是造就MYSQL灵活性的技术的直接产品，这项技术就是MYSQL++ API。在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MYISAM数据库引擎不支持事务处理也不支持外来键。尽管要比ISAM和MYISAM引擎慢很多，但是INNODB和BDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。如前所述，如果你的设计需要这些特性中的一者或者两者，那你就要被迫使用后两个引擎中的一个了。</p>\n</blockquote>\n"},{"_content":"# 日志系统\n\n## 1. 日志内容\n\n```txt\n时间|日志级别|类名_函数名_行数|分类|Log内容\n```\n\n### 1.1 获取类名\n\n```objective-c\nextension NSObject {\n    var className: String {\n        return String(describing: type(of: self)).components(separatedBy: \".\").last!\n    }\n\n    class var className: String {\n        return String(describing: self).components(separatedBy: \".\").last!\n    }\n}\n```\n\n### 1.2 生成log函数\n\n```objective-c\npublic func createLog(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  _ line: Int = #line, _ function: String = #function)\n-> String {\n    let lineStr = String.init(format: \"line:%d\", line)\n    let levelStr = levelToString(level: level)\n    let separator = \"|\"\n    let classSeparator = \"_\"\n    let log: String = Date().toString() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + \"\\n\"\n    print(log)\n    return log\n}\n```\n\n### 1.3 日志文件操作\n\n```objective-c\npublic protocol LogStorageProtocol {\n\n    /// 获取日志缓存地址\n    ///\n    /// - Returns: String\n    func getCachePath() -> String\n\n    /// 删除文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Bool\n    func deleteFile(fileName: String) -> Bool\n\n    /// 清除全部日志缓存\n    ///\n    /// - Returns: Bool\n    func cleanCache() -> Bool\n\n    /// 读取日志文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Data\n    func readFile(fileName: String) -> Data?\n\n    /// 更新写入Log数据\n    ///\n    /// - Parameters:\n    ///   - fileName: String\n    ///   - data: Data\n    /// - Returns: Data\n    func updateFile(fileName: String, data: Data) -> Bool\n\n    /// 自动根据天数创建文件名\n    ///\n    /// - Returns: String\n    func createFileName() -> String\n}\n```\n\n### 1.4 策略\n\n而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，\n根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省\n资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数\n组，容量是11个元素，还有一个充当哨兵\n\n### 1.5 [自主设计日志系统](https://www.jianshu.com/p/74f121bfd9e9)\n","source":"_posts/学习笔记/iOS/iOS之网络及安全/iOS之日志系统.md","raw":"# 日志系统\n\n## 1. 日志内容\n\n```txt\n时间|日志级别|类名_函数名_行数|分类|Log内容\n```\n\n### 1.1 获取类名\n\n```objective-c\nextension NSObject {\n    var className: String {\n        return String(describing: type(of: self)).components(separatedBy: \".\").last!\n    }\n\n    class var className: String {\n        return String(describing: self).components(separatedBy: \".\").last!\n    }\n}\n```\n\n### 1.2 生成log函数\n\n```objective-c\npublic func createLog(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  _ line: Int = #line, _ function: String = #function)\n-> String {\n    let lineStr = String.init(format: \"line:%d\", line)\n    let levelStr = levelToString(level: level)\n    let separator = \"|\"\n    let classSeparator = \"_\"\n    let log: String = Date().toString() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + \"\\n\"\n    print(log)\n    return log\n}\n```\n\n### 1.3 日志文件操作\n\n```objective-c\npublic protocol LogStorageProtocol {\n\n    /// 获取日志缓存地址\n    ///\n    /// - Returns: String\n    func getCachePath() -> String\n\n    /// 删除文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Bool\n    func deleteFile(fileName: String) -> Bool\n\n    /// 清除全部日志缓存\n    ///\n    /// - Returns: Bool\n    func cleanCache() -> Bool\n\n    /// 读取日志文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Data\n    func readFile(fileName: String) -> Data?\n\n    /// 更新写入Log数据\n    ///\n    /// - Parameters:\n    ///   - fileName: String\n    ///   - data: Data\n    /// - Returns: Data\n    func updateFile(fileName: String, data: Data) -> Bool\n\n    /// 自动根据天数创建文件名\n    ///\n    /// - Returns: String\n    func createFileName() -> String\n}\n```\n\n### 1.4 策略\n\n而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，\n根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省\n资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数\n组，容量是11个元素，还有一个充当哨兵\n\n### 1.5 [自主设计日志系统](https://www.jianshu.com/p/74f121bfd9e9)\n","slug":"学习笔记/iOS/iOS之网络及安全/iOS之日志系统","published":1,"date":"2021-02-24T12:31:09.275Z","updated":"2021-04-06T13:43:09.024Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tib002ew37ud32jglay","content":"<h1 id=\"日志系统\"><a class=\"markdownIt-Anchor\" href=\"#日志系统\"></a> 日志系统</h1>\n<h2 id=\"1-日志内容\"><a class=\"markdownIt-Anchor\" href=\"#1-日志内容\"></a> 1. 日志内容</h2>\n<pre class=\"highlight\"><code class=\"txt\">时间|日志级别|类名_函数名_行数|分类|Log内容\n</code></pre>\n<h3 id=\"11-获取类名\"><a class=\"markdownIt-Anchor\" href=\"#11-获取类名\"></a> 1.1 获取类名</h3>\n<pre class=\"highlight\"><code class=\"objective-c\">extension NSObject &#123;\n    var className: String &#123;\n        return String(describing: type(of: self)).components(separatedBy: &quot;.&quot;).last!\n    &#125;\n\n    class var className: String &#123;\n        return String(describing: self).components(separatedBy: &quot;.&quot;).last!\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"12-生成log函数\"><a class=\"markdownIt-Anchor\" href=\"#12-生成log函数\"></a> 1.2 生成log函数</h3>\n<pre class=\"highlight\"><code class=\"objective-c\">public func createLog(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  _ line: Int = #line, _ function: String = #function)\n-&gt; String &#123;\n    let lineStr = String.init(format: &quot;line:%d&quot;, line)\n    let levelStr = levelToString(level: level)\n    let separator = &quot;|&quot;\n    let classSeparator = &quot;_&quot;\n    let log: String = Date().toString() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + &quot;\\n&quot;\n    print(log)\n    return log\n&#125;\n</code></pre>\n<h3 id=\"13-日志文件操作\"><a class=\"markdownIt-Anchor\" href=\"#13-日志文件操作\"></a> 1.3 日志文件操作</h3>\n<pre class=\"highlight\"><code class=\"objective-c\">public protocol LogStorageProtocol &#123;\n\n    /// 获取日志缓存地址\n    ///\n    /// - Returns: String\n    func getCachePath() -&gt; String\n\n    /// 删除文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Bool\n    func deleteFile(fileName: String) -&gt; Bool\n\n    /// 清除全部日志缓存\n    ///\n    /// - Returns: Bool\n    func cleanCache() -&gt; Bool\n\n    /// 读取日志文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Data\n    func readFile(fileName: String) -&gt; Data?\n\n    /// 更新写入Log数据\n    ///\n    /// - Parameters:\n    ///   - fileName: String\n    ///   - data: Data\n    /// - Returns: Data\n    func updateFile(fileName: String, data: Data) -&gt; Bool\n\n    /// 自动根据天数创建文件名\n    ///\n    /// - Returns: String\n    func createFileName() -&gt; String\n&#125;\n</code></pre>\n<h3 id=\"14-策略\"><a class=\"markdownIt-Anchor\" href=\"#14-策略\"></a> 1.4 策略</h3>\n<p>而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，<br />\n根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省<br />\n资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数<br />\n组，容量是11个元素，还有一个充当哨兵</p>\n<h3 id=\"15-自主设计日志系统\"><a class=\"markdownIt-Anchor\" href=\"#15-自主设计日志系统\"></a> 1.5 <a href=\"https://www.jianshu.com/p/74f121bfd9e9\">自主设计日志系统</a></h3>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"日志系统\"><a class=\"markdownIt-Anchor\" href=\"#日志系统\"></a> 日志系统</h1>\n<h2 id=\"1-日志内容\"><a class=\"markdownIt-Anchor\" href=\"#1-日志内容\"></a> 1. 日志内容</h2>\n<pre class=\"highlight\"><code class=\"txt\">时间|日志级别|类名_函数名_行数|分类|Log内容\n</code></pre>\n<h3 id=\"11-获取类名\"><a class=\"markdownIt-Anchor\" href=\"#11-获取类名\"></a> 1.1 获取类名</h3>\n<pre class=\"highlight\"><code class=\"objective-c\">extension NSObject &#123;\n    var className: String &#123;\n        return String(describing: type(of: self)).components(separatedBy: &quot;.&quot;).last!\n    &#125;\n\n    class var className: String &#123;\n        return String(describing: self).components(separatedBy: &quot;.&quot;).last!\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"12-生成log函数\"><a class=\"markdownIt-Anchor\" href=\"#12-生成log函数\"></a> 1.2 生成log函数</h3>\n<pre class=\"highlight\"><code class=\"objective-c\">public func createLog(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  _ line: Int = #line, _ function: String = #function)\n-&gt; String &#123;\n    let lineStr = String.init(format: &quot;line:%d&quot;, line)\n    let levelStr = levelToString(level: level)\n    let separator = &quot;|&quot;\n    let classSeparator = &quot;_&quot;\n    let log: String = Date().toString() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + &quot;\\n&quot;\n    print(log)\n    return log\n&#125;\n</code></pre>\n<h3 id=\"13-日志文件操作\"><a class=\"markdownIt-Anchor\" href=\"#13-日志文件操作\"></a> 1.3 日志文件操作</h3>\n<pre class=\"highlight\"><code class=\"objective-c\">public protocol LogStorageProtocol &#123;\n\n    /// 获取日志缓存地址\n    ///\n    /// - Returns: String\n    func getCachePath() -&gt; String\n\n    /// 删除文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Bool\n    func deleteFile(fileName: String) -&gt; Bool\n\n    /// 清除全部日志缓存\n    ///\n    /// - Returns: Bool\n    func cleanCache() -&gt; Bool\n\n    /// 读取日志文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Data\n    func readFile(fileName: String) -&gt; Data?\n\n    /// 更新写入Log数据\n    ///\n    /// - Parameters:\n    ///   - fileName: String\n    ///   - data: Data\n    /// - Returns: Data\n    func updateFile(fileName: String, data: Data) -&gt; Bool\n\n    /// 自动根据天数创建文件名\n    ///\n    /// - Returns: String\n    func createFileName() -&gt; String\n&#125;\n</code></pre>\n<h3 id=\"14-策略\"><a class=\"markdownIt-Anchor\" href=\"#14-策略\"></a> 1.4 策略</h3>\n<p>而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，<br />\n根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省<br />\n资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数<br />\n组，容量是11个元素，还有一个充当哨兵</p>\n<h3 id=\"15-自主设计日志系统\"><a class=\"markdownIt-Anchor\" href=\"#15-自主设计日志系统\"></a> 1.5 <a href=\"https://www.jianshu.com/p/74f121bfd9e9\">自主设计日志系统</a></h3>\n"},{"_content":"# 网络\n\n## 1. 网络库\n\n## 2. 原理及协议\n\n1. TCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\n\n2. 协议簇、协议栈\n\n## 3. HTTP 2.0\n\n### 3.1 [深入理解http2.0协议，看这篇就够了](https://zhuanlan.zhihu.com/p/89471776)\n\n### 3.2 [从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路](http://www.52im.net/thread-1709-1-1.html)\n\n### 3.3 [HTTTP 2.0原理解析](http://www.jouypub.com/2018/b75b74f86647f1eb8ca4bea6d1353236/)\n\n### [HTTP 2.0 协议详解](https://github.com/zqjflash/http2-protocol)\n","source":"_posts/学习笔记/iOS/iOS之网络及安全/iOS之网络.md","raw":"# 网络\n\n## 1. 网络库\n\n## 2. 原理及协议\n\n1. TCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\n\n2. 协议簇、协议栈\n\n## 3. HTTP 2.0\n\n### 3.1 [深入理解http2.0协议，看这篇就够了](https://zhuanlan.zhihu.com/p/89471776)\n\n### 3.2 [从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路](http://www.52im.net/thread-1709-1-1.html)\n\n### 3.3 [HTTTP 2.0原理解析](http://www.jouypub.com/2018/b75b74f86647f1eb8ca4bea6d1353236/)\n\n### [HTTP 2.0 协议详解](https://github.com/zqjflash/http2-protocol)\n","slug":"学习笔记/iOS/iOS之网络及安全/iOS之网络","published":1,"date":"2021-02-24T12:31:09.276Z","updated":"2021-04-01T15:35:57.256Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tic002fw37ue7g24oxp","content":"<h1 id=\"网络\"><a class=\"markdownIt-Anchor\" href=\"#网络\"></a> 网络</h1>\n<h2 id=\"1-网络库\"><a class=\"markdownIt-Anchor\" href=\"#1-网络库\"></a> 1. 网络库</h2>\n<h2 id=\"2-原理及协议\"><a class=\"markdownIt-Anchor\" href=\"#2-原理及协议\"></a> 2. 原理及协议</h2>\n<ol>\n<li>\n<p>TCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP</p>\n</li>\n<li>\n<p>协议簇、协议栈</p>\n</li>\n</ol>\n<h2 id=\"3-http-20\"><a class=\"markdownIt-Anchor\" href=\"#3-http-20\"></a> 3. HTTP 2.0</h2>\n<h3 id=\"31-深入理解http20协议看这篇就够了\"><a class=\"markdownIt-Anchor\" href=\"#31-深入理解http20协议看这篇就够了\"></a> 3.1 <a href=\"https://zhuanlan.zhihu.com/p/89471776\">深入理解http2.0协议，看这篇就够了</a></h3>\n<h3 id=\"32-从http09到http2一文读懂http协议的历史演变和设计思路\"><a class=\"markdownIt-Anchor\" href=\"#32-从http09到http2一文读懂http协议的历史演变和设计思路\"></a> 3.2 <a href=\"http://www.52im.net/thread-1709-1-1.html\">从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路</a></h3>\n<h3 id=\"33-htttp-20原理解析\"><a class=\"markdownIt-Anchor\" href=\"#33-htttp-20原理解析\"></a> 3.3 <a href=\"http://www.jouypub.com/2018/b75b74f86647f1eb8ca4bea6d1353236/\">HTTTP 2.0原理解析</a></h3>\n<h3 id=\"http-20-协议详解\"><a class=\"markdownIt-Anchor\" href=\"#http-20-协议详解\"></a> <a href=\"https://github.com/zqjflash/http2-protocol\">HTTP 2.0 协议详解</a></h3>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"网络\"><a class=\"markdownIt-Anchor\" href=\"#网络\"></a> 网络</h1>\n<h2 id=\"1-网络库\"><a class=\"markdownIt-Anchor\" href=\"#1-网络库\"></a> 1. 网络库</h2>\n<h2 id=\"2-原理及协议\"><a class=\"markdownIt-Anchor\" href=\"#2-原理及协议\"></a> 2. 原理及协议</h2>\n<ol>\n<li>\n<p>TCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP</p>\n</li>\n<li>\n<p>协议簇、协议栈</p>\n</li>\n</ol>\n<h2 id=\"3-http-20\"><a class=\"markdownIt-Anchor\" href=\"#3-http-20\"></a> 3. HTTP 2.0</h2>\n<h3 id=\"31-深入理解http20协议看这篇就够了\"><a class=\"markdownIt-Anchor\" href=\"#31-深入理解http20协议看这篇就够了\"></a> 3.1 <a href=\"https://zhuanlan.zhihu.com/p/89471776\">深入理解http2.0协议，看这篇就够了</a></h3>\n<h3 id=\"32-从http09到http2一文读懂http协议的历史演变和设计思路\"><a class=\"markdownIt-Anchor\" href=\"#32-从http09到http2一文读懂http协议的历史演变和设计思路\"></a> 3.2 <a href=\"http://www.52im.net/thread-1709-1-1.html\">从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路</a></h3>\n<h3 id=\"33-htttp-20原理解析\"><a class=\"markdownIt-Anchor\" href=\"#33-htttp-20原理解析\"></a> 3.3 <a href=\"http://www.jouypub.com/2018/b75b74f86647f1eb8ca4bea6d1353236/\">HTTTP 2.0原理解析</a></h3>\n<h3 id=\"http-20-协议详解\"><a class=\"markdownIt-Anchor\" href=\"#http-20-协议详解\"></a> <a href=\"https://github.com/zqjflash/http2-protocol\">HTTP 2.0 协议详解</a></h3>\n"},{"_content":"# 移动端网络优化\n\n## 1. 网络优化\n\n1. [美团点评的移动端网络优化实践：大幅提升连接成功率、速度等](https://segmentfault.com/a/1190000022781635)\n\n## 2. 弱网优化\n\n1. [弱网优化](http://www.52im.net/forum.php?mod=collection&action=view&ctid=26&fromop=all)\n\n## 3 [即时通讯网](http://www.52im.net/)\n\n### 3.1 [从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路](http://www.52im.net/thread-1709-1-1.html)\n","source":"_posts/学习笔记/iOS/iOS之网络及安全/移动端网络优化.md","raw":"# 移动端网络优化\n\n## 1. 网络优化\n\n1. [美团点评的移动端网络优化实践：大幅提升连接成功率、速度等](https://segmentfault.com/a/1190000022781635)\n\n## 2. 弱网优化\n\n1. [弱网优化](http://www.52im.net/forum.php?mod=collection&action=view&ctid=26&fromop=all)\n\n## 3 [即时通讯网](http://www.52im.net/)\n\n### 3.1 [从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路](http://www.52im.net/thread-1709-1-1.html)\n","slug":"学习笔记/iOS/iOS之网络及安全/移动端网络优化","published":1,"date":"2021-03-23T12:54:34.142Z","updated":"2021-03-23T12:54:34.142Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tic002gw37u46ql1meo","content":"<h1 id=\"移动端网络优化\"><a class=\"markdownIt-Anchor\" href=\"#移动端网络优化\"></a> 移动端网络优化</h1>\n<h2 id=\"1-网络优化\"><a class=\"markdownIt-Anchor\" href=\"#1-网络优化\"></a> 1. 网络优化</h2>\n<ol>\n<li><a href=\"https://segmentfault.com/a/1190000022781635\">美团点评的移动端网络优化实践：大幅提升连接成功率、速度等</a></li>\n</ol>\n<h2 id=\"2-弱网优化\"><a class=\"markdownIt-Anchor\" href=\"#2-弱网优化\"></a> 2. 弱网优化</h2>\n<ol>\n<li><a href=\"http://www.52im.net/forum.php?mod=collection&amp;action=view&amp;ctid=26&amp;fromop=all\">弱网优化</a></li>\n</ol>\n<h2 id=\"3-即时通讯网\"><a class=\"markdownIt-Anchor\" href=\"#3-即时通讯网\"></a> 3 <a href=\"http://www.52im.net/\">即时通讯网</a></h2>\n<h3 id=\"31-从http09到http2一文读懂http协议的历史演变和设计思路\"><a class=\"markdownIt-Anchor\" href=\"#31-从http09到http2一文读懂http协议的历史演变和设计思路\"></a> 3.1 <a href=\"http://www.52im.net/thread-1709-1-1.html\">从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路</a></h3>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"移动端网络优化\"><a class=\"markdownIt-Anchor\" href=\"#移动端网络优化\"></a> 移动端网络优化</h1>\n<h2 id=\"1-网络优化\"><a class=\"markdownIt-Anchor\" href=\"#1-网络优化\"></a> 1. 网络优化</h2>\n<ol>\n<li><a href=\"https://segmentfault.com/a/1190000022781635\">美团点评的移动端网络优化实践：大幅提升连接成功率、速度等</a></li>\n</ol>\n<h2 id=\"2-弱网优化\"><a class=\"markdownIt-Anchor\" href=\"#2-弱网优化\"></a> 2. 弱网优化</h2>\n<ol>\n<li><a href=\"http://www.52im.net/forum.php?mod=collection&amp;action=view&amp;ctid=26&amp;fromop=all\">弱网优化</a></li>\n</ol>\n<h2 id=\"3-即时通讯网\"><a class=\"markdownIt-Anchor\" href=\"#3-即时通讯网\"></a> 3 <a href=\"http://www.52im.net/\">即时通讯网</a></h2>\n<h3 id=\"31-从http09到http2一文读懂http协议的历史演变和设计思路\"><a class=\"markdownIt-Anchor\" href=\"#31-从http09到http2一文读懂http协议的历史演变和设计思路\"></a> 3.1 <a href=\"http://www.52im.net/thread-1709-1-1.html\">从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路</a></h3>\n"},{"_content":"# Mac-O 文件揭秘\n\n1、[Apple 操作系统可执行文件 Mach-O](https://ming1016.github.io/2020/03/29/apple-system-executable-file-macho/)\n\n2、[Mach-O 可执行文件](https://objccn.io/issue-6-3/)\n","source":"_posts/学习笔记/iOS/iOS之性能优化/Mac-O文件.md","raw":"# Mac-O 文件揭秘\n\n1、[Apple 操作系统可执行文件 Mach-O](https://ming1016.github.io/2020/03/29/apple-system-executable-file-macho/)\n\n2、[Mach-O 可执行文件](https://objccn.io/issue-6-3/)\n","slug":"学习笔记/iOS/iOS之性能优化/Mac-O文件","published":1,"date":"2021-02-24T12:31:09.190Z","updated":"2021-02-24T12:31:09.190Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tid002hw37u8jp56lq2","content":"<h1 id=\"mac-o-文件揭秘\"><a class=\"markdownIt-Anchor\" href=\"#mac-o-文件揭秘\"></a> Mac-O 文件揭秘</h1>\n<p>1、<a href=\"https://ming1016.github.io/2020/03/29/apple-system-executable-file-macho/\">Apple 操作系统可执行文件 Mach-O</a></p>\n<p>2、<a href=\"https://objccn.io/issue-6-3/\">Mach-O 可执行文件</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mac-o-文件揭秘\"><a class=\"markdownIt-Anchor\" href=\"#mac-o-文件揭秘\"></a> Mac-O 文件揭秘</h1>\n<p>1、<a href=\"https://ming1016.github.io/2020/03/29/apple-system-executable-file-macho/\">Apple 操作系统可执行文件 Mach-O</a></p>\n<p>2、<a href=\"https://objccn.io/issue-6-3/\">Mach-O 可执行文件</a></p>\n"},{"_content":"# iOS 之功耗优化\n\n1、[iOS进阶--App功耗优化看这篇就够了](http://www.cocoachina.com/articles/21428)\n\n2、[教你开发省电的 iOS app（WWDC17 观后）](https://www.jianshu.com/p/f0dc653d04ca)\n","source":"_posts/学习笔记/iOS/iOS之性能优化/iOS 之功耗优化.md","raw":"# iOS 之功耗优化\n\n1、[iOS进阶--App功耗优化看这篇就够了](http://www.cocoachina.com/articles/21428)\n\n2、[教你开发省电的 iOS app（WWDC17 观后）](https://www.jianshu.com/p/f0dc653d04ca)\n","slug":"学习笔记/iOS/iOS之性能优化/iOS 之功耗优化","published":1,"date":"2021-02-24T12:31:09.191Z","updated":"2021-02-24T12:31:09.191Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tie002iw37u6tnh2s4g","content":"<h1 id=\"ios-之功耗优化\"><a class=\"markdownIt-Anchor\" href=\"#ios-之功耗优化\"></a> iOS 之功耗优化</h1>\n<p>1、<a href=\"http://www.cocoachina.com/articles/21428\">iOS进阶–App功耗优化看这篇就够了</a></p>\n<p>2、<a href=\"https://www.jianshu.com/p/f0dc653d04ca\">教你开发省电的 iOS app（WWDC17 观后）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios-之功耗优化\"><a class=\"markdownIt-Anchor\" href=\"#ios-之功耗优化\"></a> iOS 之功耗优化</h1>\n<p>1、<a href=\"http://www.cocoachina.com/articles/21428\">iOS进阶–App功耗优化看这篇就够了</a></p>\n<p>2、<a href=\"https://www.jianshu.com/p/f0dc653d04ca\">教你开发省电的 iOS app（WWDC17 观后）</a></p>\n"},{"_content":"### [Xcode - 使用 dyld 环境变量进行调试](https://blog.csdn.net/lovechris00/article/details/82290773)\n\n一、使用 `DYLD_PRINT_STATISTICS` 获取启动时间\n\nedit scheme -> run -> arguments里面加入环境变量 DYLD_PRINT_STATISTICS = 1\n\n```\nTotal pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n```\n\n二、DYLD_PRINT 变量列表\n\n* 在终端通过命令：man dyld 可以列出所有的\n\n```\nDYLD_FRAMEWORK_PATH\nDYLD_FALLBACK_FRAMEWORK_PATH\nDYLD_VERSIONED_FRAMEWORK_PATH\nDYLD_LIBRARY_PATH\nDYLD_FALLBACK_LIBRARY_PATH\nDYLD_VERSIONED_LIBRARY_PATH\nDYLD_PRINT_TO_FILE\nDYLD_SHARED_REGION\nDYLD_INSERT_LIBRARIES\nDYLD_FORCE_FLAT_NAMESPACE\nDYLD_IMAGE_SUFFIX\nDYLD_PRINT_OPTS\nDYLD_PRINT_ENV\nDYLD_PRINT_LIBRARIES\nDYLD_BIND_AT_LAUNCH\nDYLD_DISABLE_DOFS\nDYLD_PRINT_APIS\nDYLD_PRINT_BINDINGS\nDYLD_PRINT_INITIALIZERS\nDYLD_PRINT_REBASINGS\nDYLD_PRINT_SEGMENTS\nDYLD_PRINT_STATISTICS\nDYLD_PRINT_DOFS\nDYLD_PRINT_RPATHS\nDYLD_SHARED_CACHE_DIR\nDYLD_SHARED_CACHE_DONT_VALIDATE\n```\n\n详情见：[dyld 命令简介](./dyld.txt)\n","source":"_posts/学习笔记/iOS/iOS之性能优化/iOS之dyld环境变量介绍.md","raw":"### [Xcode - 使用 dyld 环境变量进行调试](https://blog.csdn.net/lovechris00/article/details/82290773)\n\n一、使用 `DYLD_PRINT_STATISTICS` 获取启动时间\n\nedit scheme -> run -> arguments里面加入环境变量 DYLD_PRINT_STATISTICS = 1\n\n```\nTotal pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n```\n\n二、DYLD_PRINT 变量列表\n\n* 在终端通过命令：man dyld 可以列出所有的\n\n```\nDYLD_FRAMEWORK_PATH\nDYLD_FALLBACK_FRAMEWORK_PATH\nDYLD_VERSIONED_FRAMEWORK_PATH\nDYLD_LIBRARY_PATH\nDYLD_FALLBACK_LIBRARY_PATH\nDYLD_VERSIONED_LIBRARY_PATH\nDYLD_PRINT_TO_FILE\nDYLD_SHARED_REGION\nDYLD_INSERT_LIBRARIES\nDYLD_FORCE_FLAT_NAMESPACE\nDYLD_IMAGE_SUFFIX\nDYLD_PRINT_OPTS\nDYLD_PRINT_ENV\nDYLD_PRINT_LIBRARIES\nDYLD_BIND_AT_LAUNCH\nDYLD_DISABLE_DOFS\nDYLD_PRINT_APIS\nDYLD_PRINT_BINDINGS\nDYLD_PRINT_INITIALIZERS\nDYLD_PRINT_REBASINGS\nDYLD_PRINT_SEGMENTS\nDYLD_PRINT_STATISTICS\nDYLD_PRINT_DOFS\nDYLD_PRINT_RPATHS\nDYLD_SHARED_CACHE_DIR\nDYLD_SHARED_CACHE_DONT_VALIDATE\n```\n\n详情见：[dyld 命令简介](./dyld.txt)\n","slug":"学习笔记/iOS/iOS之性能优化/iOS之dyld环境变量介绍","published":1,"date":"2021-02-24T12:31:09.191Z","updated":"2021-02-24T12:31:09.191Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tie002jw37ud13jbvzs","content":"<h3 id=\"xcode-使用-dyld-环境变量进行调试\"><a class=\"markdownIt-Anchor\" href=\"#xcode-使用-dyld-环境变量进行调试\"></a> <a href=\"https://blog.csdn.net/lovechris00/article/details/82290773\">Xcode - 使用 dyld 环境变量进行调试</a></h3>\n<p>一、使用 <code>DYLD_PRINT_STATISTICS</code> 获取启动时间</p>\n<p>edit scheme -&gt; run -&gt; arguments里面加入环境变量 DYLD_PRINT_STATISTICS = 1</p>\n<pre class=\"highlight\"><code class=\"\">Total pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n</code></pre>\n<p>二、DYLD_PRINT 变量列表</p>\n<ul>\n<li>在终端通过命令：man dyld 可以列出所有的</li>\n</ul>\n<pre class=\"highlight\"><code class=\"\">DYLD_FRAMEWORK_PATH\nDYLD_FALLBACK_FRAMEWORK_PATH\nDYLD_VERSIONED_FRAMEWORK_PATH\nDYLD_LIBRARY_PATH\nDYLD_FALLBACK_LIBRARY_PATH\nDYLD_VERSIONED_LIBRARY_PATH\nDYLD_PRINT_TO_FILE\nDYLD_SHARED_REGION\nDYLD_INSERT_LIBRARIES\nDYLD_FORCE_FLAT_NAMESPACE\nDYLD_IMAGE_SUFFIX\nDYLD_PRINT_OPTS\nDYLD_PRINT_ENV\nDYLD_PRINT_LIBRARIES\nDYLD_BIND_AT_LAUNCH\nDYLD_DISABLE_DOFS\nDYLD_PRINT_APIS\nDYLD_PRINT_BINDINGS\nDYLD_PRINT_INITIALIZERS\nDYLD_PRINT_REBASINGS\nDYLD_PRINT_SEGMENTS\nDYLD_PRINT_STATISTICS\nDYLD_PRINT_DOFS\nDYLD_PRINT_RPATHS\nDYLD_SHARED_CACHE_DIR\nDYLD_SHARED_CACHE_DONT_VALIDATE\n</code></pre>\n<p>详情见：<a href=\"./dyld.txt\">dyld 命令简介</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"xcode-使用-dyld-环境变量进行调试\"><a class=\"markdownIt-Anchor\" href=\"#xcode-使用-dyld-环境变量进行调试\"></a> <a href=\"https://blog.csdn.net/lovechris00/article/details/82290773\">Xcode - 使用 dyld 环境变量进行调试</a></h3>\n<p>一、使用 <code>DYLD_PRINT_STATISTICS</code> 获取启动时间</p>\n<p>edit scheme -&gt; run -&gt; arguments里面加入环境变量 DYLD_PRINT_STATISTICS = 1</p>\n<pre class=\"highlight\"><code class=\"\">Total pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n</code></pre>\n<p>二、DYLD_PRINT 变量列表</p>\n<ul>\n<li>在终端通过命令：man dyld 可以列出所有的</li>\n</ul>\n<pre class=\"highlight\"><code class=\"\">DYLD_FRAMEWORK_PATH\nDYLD_FALLBACK_FRAMEWORK_PATH\nDYLD_VERSIONED_FRAMEWORK_PATH\nDYLD_LIBRARY_PATH\nDYLD_FALLBACK_LIBRARY_PATH\nDYLD_VERSIONED_LIBRARY_PATH\nDYLD_PRINT_TO_FILE\nDYLD_SHARED_REGION\nDYLD_INSERT_LIBRARIES\nDYLD_FORCE_FLAT_NAMESPACE\nDYLD_IMAGE_SUFFIX\nDYLD_PRINT_OPTS\nDYLD_PRINT_ENV\nDYLD_PRINT_LIBRARIES\nDYLD_BIND_AT_LAUNCH\nDYLD_DISABLE_DOFS\nDYLD_PRINT_APIS\nDYLD_PRINT_BINDINGS\nDYLD_PRINT_INITIALIZERS\nDYLD_PRINT_REBASINGS\nDYLD_PRINT_SEGMENTS\nDYLD_PRINT_STATISTICS\nDYLD_PRINT_DOFS\nDYLD_PRINT_RPATHS\nDYLD_SHARED_CACHE_DIR\nDYLD_SHARED_CACHE_DONT_VALIDATE\n</code></pre>\n<p>详情见：<a href=\"./dyld.txt\">dyld 命令简介</a></p>\n"},{"_content":"# 启动优化\n\n## [iOS App冷启动治理：来自美团外卖的实践](https://mp.weixin.qq.com/s/jN3jaNrvXczZoYIRCWZs7w)\n\n## [Attribute Syntax](https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html)\n\n1、[OC 中的 __attribute__](https://www.jianshu.com/p/529dc0501bd3)\n\n2、[iOS __attribute__那点小事](https://www.jianshu.com/p/abeee47e82d8)\n\n3、[优化 App 的启动时间](http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/)","source":"_posts/学习笔记/iOS/iOS之性能优化/iOS之启动优化-GCC attribute.md","raw":"# 启动优化\n\n## [iOS App冷启动治理：来自美团外卖的实践](https://mp.weixin.qq.com/s/jN3jaNrvXczZoYIRCWZs7w)\n\n## [Attribute Syntax](https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html)\n\n1、[OC 中的 __attribute__](https://www.jianshu.com/p/529dc0501bd3)\n\n2、[iOS __attribute__那点小事](https://www.jianshu.com/p/abeee47e82d8)\n\n3、[优化 App 的启动时间](http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/)","slug":"学习笔记/iOS/iOS之性能优化/iOS之启动优化-GCC attribute","published":1,"date":"2021-02-24T12:31:09.191Z","updated":"2021-03-27T08:34:10.635Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tif002kw37u721wddvc","content":"<h1 id=\"启动优化\"><a class=\"markdownIt-Anchor\" href=\"#启动优化\"></a> 启动优化</h1>\n<h2 id=\"ios-app冷启动治理来自美团外卖的实践\"><a class=\"markdownIt-Anchor\" href=\"#ios-app冷启动治理来自美团外卖的实践\"></a> <a href=\"https://mp.weixin.qq.com/s/jN3jaNrvXczZoYIRCWZs7w\">iOS App冷启动治理：来自美团外卖的实践</a></h2>\n<h2 id=\"attribute-syntax\"><a class=\"markdownIt-Anchor\" href=\"#attribute-syntax\"></a> <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html\">Attribute Syntax</a></h2>\n<p>1、<a href=\"https://www.jianshu.com/p/529dc0501bd3\">OC 中的 <strong>attribute</strong></a></p>\n<p>2、<a href=\"https://www.jianshu.com/p/abeee47e82d8\">iOS __attribute__那点小事</a></p>\n<p>3、<a href=\"http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/\">优化 App 的启动时间</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"启动优化\"><a class=\"markdownIt-Anchor\" href=\"#启动优化\"></a> 启动优化</h1>\n<h2 id=\"ios-app冷启动治理来自美团外卖的实践\"><a class=\"markdownIt-Anchor\" href=\"#ios-app冷启动治理来自美团外卖的实践\"></a> <a href=\"https://mp.weixin.qq.com/s/jN3jaNrvXczZoYIRCWZs7w\">iOS App冷启动治理：来自美团外卖的实践</a></h2>\n<h2 id=\"attribute-syntax\"><a class=\"markdownIt-Anchor\" href=\"#attribute-syntax\"></a> <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html\">Attribute Syntax</a></h2>\n<p>1、<a href=\"https://www.jianshu.com/p/529dc0501bd3\">OC 中的 <strong>attribute</strong></a></p>\n<p>2、<a href=\"https://www.jianshu.com/p/abeee47e82d8\">iOS __attribute__那点小事</a></p>\n<p>3、<a href=\"http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/\">优化 App 的启动时间</a></p>\n"},{"_content":"### 启动优化\n\n1、启动优化\n\n冷启动是指， App 点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的情况。这是一次完整的启动过程。\n\n热启动是指 ，App 在冷启动后用户将 App 退后台，在 App 的进程还在系统里的情况下，用户重新启动进入 App 的过程，这个过程做的事情非常少。\n\n* main() 函数执行前；\n\n* main() 函数执行后；\n\n* 首屏渲染完成后。\n\n####1、main() 函数执行前\n要做启动优化，就首先要知道，APP在启动前做了些什么？iOS APP 启动的时候，会做下面几件事情：\n\n* 加载可执行文件（Mac-o、App 的.o文件）；\n* 加载动态链接库，进行rebase指针调整和bind符号绑定；\n* Objc 运行时的初始化处理，包括Objc相关类的注册、category注册、selector唯一性检查等；\n* 初始化，包括 +load 方法，attribute((constructor))修饰函数的调用、创建C++静态全局变量。\n\n相应的，可以做的优化工作包括：\n\n* 减少动态库加载。每个库本身都有依赖关系，苹果公司建议使用更少的动态库，并且建议在使用动态库的数量较多时，尽量将多个动态库进行合并。数量上，苹果公司最多可以支持 6 个非系统动态库合并为一个。\n\n* 减少加载启动后不会去使用的类或者方法。\n\n* +load() 方法里的内容可以放到首屏渲染完成后再执行，或使用 +initialize() 方法替换掉。因为，在一个 +load() 方法里，进行运行时方法替换操作会带来 4 毫秒的消耗。不要小看这 4 毫秒，积少成多，执行 +load() 方法对启动速度的影响会越来越大。\n\n* 控制 C++ 全局变量的数量。\n\n\n####2、main() 函数执行后\n\n这阶段，主要是指从main函数之后到AppDelegate 的 `didFinishLuachingWithOptions` 方法里首屏渲染相关方法执行完成。主要包括：\n\n* 首屏初始化所需配置文件的读写操作；\n* 首屏列表大数据的读取；\n* 首屏渲染的大量计算等；\n\n对于这部分，做好结合业务和性能考虑，合理安排初始化。尽量不要阻塞主线程。\n\n####3、首屏渲染完成后\n这部分是指首屏渲染完成到`didFinishLuachingWithOptions`作用域结束。主要完成的是服务模块初始化、监听注册、配置文件读取等。这里分两种方式：功能级别和方法级别的启动优化。\n\n* 功能级别的优化的思路是： main() 函数开始执行后到首屏渲染完成前只处理首屏相关的业务，其他非首屏业务的初始 化、监听注册、配置文件读取等都放到首屏渲染完成后去做。\n\n* 在这之后，我们需要进一步做的，是检查首屏渲染完成前主线程上有哪些耗时方法，将没必要的耗时方法滞 后或者异步执行。通常情况下，耗时较长的方法主要发生在计算大量数据的情况下，具体的表现就是加载、 编辑、存储图片和文件等资源。\n\n目前来看，对App启动速度的监控，主要有两种手段。\n\n* 第一种方法是，定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时。Xcode 工具套件里自 带的 Time Profiler ，采用的就是这种方式。\n* 第二种方法是，对 objc_msgSend 方法进行 hook 来掌握所有方法的执行耗时。hook objc_msgSend 这种方式的优点是非常精确，而缺点是只能针对 Objective-C 的方法。当然，对于 c 方 法和 block 也不是没有办法，你可以使用 libffi 的 ffi_call 来达成 hook，但缺点就是编写维护相关工具门槛高。\n\n函数执行前(DYLD_PRINT_STATISTICS=1)，耗时：\n\n    Total pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n                    \n首屏出现时间——未登录： 0.4437880516052246\n首屏出现时间——已登录： 0.7114208936691284/0.6743890047073364\n                    end time：0.7480049133300781\n\n第一次优化：\n\n    show time: 0.2890850305557251\n    end time: 0.5157899856567383\n\n第二次优化：\n未登录：\n\n    show time: 0.27560102939605713\n    end time: 0.27729904651641846\n    mainAsynTime time: 0.3173290491104126\n    asynTime time: 0.7670600414276123\n    \n已登录：\n\n    show time: 0.3778949975967407\n    end time: 0.37808406352996826\n    mainAsynTime time: 0.7077310085296631\n    asynTime time: 0.8228110074996948\n\n冷启动加载时间：\n\n    Total pre-main time: 1.0 seconds (100.0%)\n             dylib loading time: 597.56 milliseconds (55.8%)\n            rebase/binding time:  48.35 milliseconds (4.5%)\n                ObjC setup time:  59.63 milliseconds (5.5%)\n               initializer time: 364.73 milliseconds (34.0%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.15 milliseconds (0.7%)\n        libMainThreadChecker.dylib :  34.38 milliseconds (3.2%)\n              libglInterpose.dylib :  80.59 milliseconds (7.5%)\n             libMTLInterpose.dylib :  21.72 milliseconds (2.0%)\n                     sd_doctor_ios : 320.42 milliseconds (29.9%)\n\n启动优化总结：\n\n    使用DYLD_PRINT_STATISTICS测试启动加载时间\n    减少自定义的动态库集成\n    精简原有的Objective-C类和代码\n    移除静态的初始化操作\n    使用更多的Swift代码","source":"_posts/学习笔记/iOS/iOS之性能优化/iOS之启动优化.md","raw":"### 启动优化\n\n1、启动优化\n\n冷启动是指， App 点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的情况。这是一次完整的启动过程。\n\n热启动是指 ，App 在冷启动后用户将 App 退后台，在 App 的进程还在系统里的情况下，用户重新启动进入 App 的过程，这个过程做的事情非常少。\n\n* main() 函数执行前；\n\n* main() 函数执行后；\n\n* 首屏渲染完成后。\n\n####1、main() 函数执行前\n要做启动优化，就首先要知道，APP在启动前做了些什么？iOS APP 启动的时候，会做下面几件事情：\n\n* 加载可执行文件（Mac-o、App 的.o文件）；\n* 加载动态链接库，进行rebase指针调整和bind符号绑定；\n* Objc 运行时的初始化处理，包括Objc相关类的注册、category注册、selector唯一性检查等；\n* 初始化，包括 +load 方法，attribute((constructor))修饰函数的调用、创建C++静态全局变量。\n\n相应的，可以做的优化工作包括：\n\n* 减少动态库加载。每个库本身都有依赖关系，苹果公司建议使用更少的动态库，并且建议在使用动态库的数量较多时，尽量将多个动态库进行合并。数量上，苹果公司最多可以支持 6 个非系统动态库合并为一个。\n\n* 减少加载启动后不会去使用的类或者方法。\n\n* +load() 方法里的内容可以放到首屏渲染完成后再执行，或使用 +initialize() 方法替换掉。因为，在一个 +load() 方法里，进行运行时方法替换操作会带来 4 毫秒的消耗。不要小看这 4 毫秒，积少成多，执行 +load() 方法对启动速度的影响会越来越大。\n\n* 控制 C++ 全局变量的数量。\n\n\n####2、main() 函数执行后\n\n这阶段，主要是指从main函数之后到AppDelegate 的 `didFinishLuachingWithOptions` 方法里首屏渲染相关方法执行完成。主要包括：\n\n* 首屏初始化所需配置文件的读写操作；\n* 首屏列表大数据的读取；\n* 首屏渲染的大量计算等；\n\n对于这部分，做好结合业务和性能考虑，合理安排初始化。尽量不要阻塞主线程。\n\n####3、首屏渲染完成后\n这部分是指首屏渲染完成到`didFinishLuachingWithOptions`作用域结束。主要完成的是服务模块初始化、监听注册、配置文件读取等。这里分两种方式：功能级别和方法级别的启动优化。\n\n* 功能级别的优化的思路是： main() 函数开始执行后到首屏渲染完成前只处理首屏相关的业务，其他非首屏业务的初始 化、监听注册、配置文件读取等都放到首屏渲染完成后去做。\n\n* 在这之后，我们需要进一步做的，是检查首屏渲染完成前主线程上有哪些耗时方法，将没必要的耗时方法滞 后或者异步执行。通常情况下，耗时较长的方法主要发生在计算大量数据的情况下，具体的表现就是加载、 编辑、存储图片和文件等资源。\n\n目前来看，对App启动速度的监控，主要有两种手段。\n\n* 第一种方法是，定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时。Xcode 工具套件里自 带的 Time Profiler ，采用的就是这种方式。\n* 第二种方法是，对 objc_msgSend 方法进行 hook 来掌握所有方法的执行耗时。hook objc_msgSend 这种方式的优点是非常精确，而缺点是只能针对 Objective-C 的方法。当然，对于 c 方 法和 block 也不是没有办法，你可以使用 libffi 的 ffi_call 来达成 hook，但缺点就是编写维护相关工具门槛高。\n\n函数执行前(DYLD_PRINT_STATISTICS=1)，耗时：\n\n    Total pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n                    \n首屏出现时间——未登录： 0.4437880516052246\n首屏出现时间——已登录： 0.7114208936691284/0.6743890047073364\n                    end time：0.7480049133300781\n\n第一次优化：\n\n    show time: 0.2890850305557251\n    end time: 0.5157899856567383\n\n第二次优化：\n未登录：\n\n    show time: 0.27560102939605713\n    end time: 0.27729904651641846\n    mainAsynTime time: 0.3173290491104126\n    asynTime time: 0.7670600414276123\n    \n已登录：\n\n    show time: 0.3778949975967407\n    end time: 0.37808406352996826\n    mainAsynTime time: 0.7077310085296631\n    asynTime time: 0.8228110074996948\n\n冷启动加载时间：\n\n    Total pre-main time: 1.0 seconds (100.0%)\n             dylib loading time: 597.56 milliseconds (55.8%)\n            rebase/binding time:  48.35 milliseconds (4.5%)\n                ObjC setup time:  59.63 milliseconds (5.5%)\n               initializer time: 364.73 milliseconds (34.0%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.15 milliseconds (0.7%)\n        libMainThreadChecker.dylib :  34.38 milliseconds (3.2%)\n              libglInterpose.dylib :  80.59 milliseconds (7.5%)\n             libMTLInterpose.dylib :  21.72 milliseconds (2.0%)\n                     sd_doctor_ios : 320.42 milliseconds (29.9%)\n\n启动优化总结：\n\n    使用DYLD_PRINT_STATISTICS测试启动加载时间\n    减少自定义的动态库集成\n    精简原有的Objective-C类和代码\n    移除静态的初始化操作\n    使用更多的Swift代码","slug":"学习笔记/iOS/iOS之性能优化/iOS之启动优化","published":1,"date":"2021-02-24T12:31:09.191Z","updated":"2021-02-24T12:31:09.192Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tig002lw37u2k0h6fle","content":"<h3 id=\"启动优化\"><a class=\"markdownIt-Anchor\" href=\"#启动优化\"></a> 启动优化</h3>\n<p>1、启动优化</p>\n<p>冷启动是指， App 点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的情况。这是一次完整的启动过程。</p>\n<p>热启动是指 ，App 在冷启动后用户将 App 退后台，在 App 的进程还在系统里的情况下，用户重新启动进入 App 的过程，这个过程做的事情非常少。</p>\n<ul>\n<li>\n<p>main() 函数执行前；</p>\n</li>\n<li>\n<p>main() 函数执行后；</p>\n</li>\n<li>\n<p>首屏渲染完成后。</p>\n</li>\n</ul>\n<p>####1、main() 函数执行前<br />\n要做启动优化，就首先要知道，APP在启动前做了些什么？iOS APP 启动的时候，会做下面几件事情：</p>\n<ul>\n<li>加载可执行文件（Mac-o、App 的.o文件）；</li>\n<li>加载动态链接库，进行rebase指针调整和bind符号绑定；</li>\n<li>Objc 运行时的初始化处理，包括Objc相关类的注册、category注册、selector唯一性检查等；</li>\n<li>初始化，包括 +load 方法，attribute((constructor))修饰函数的调用、创建C++静态全局变量。</li>\n</ul>\n<p>相应的，可以做的优化工作包括：</p>\n<ul>\n<li>\n<p>减少动态库加载。每个库本身都有依赖关系，苹果公司建议使用更少的动态库，并且建议在使用动态库的数量较多时，尽量将多个动态库进行合并。数量上，苹果公司最多可以支持 6 个非系统动态库合并为一个。</p>\n</li>\n<li>\n<p>减少加载启动后不会去使用的类或者方法。</p>\n</li>\n<li>\n<p>+load() 方法里的内容可以放到首屏渲染完成后再执行，或使用 +initialize() 方法替换掉。因为，在一个 +load() 方法里，进行运行时方法替换操作会带来 4 毫秒的消耗。不要小看这 4 毫秒，积少成多，执行 +load() 方法对启动速度的影响会越来越大。</p>\n</li>\n<li>\n<p>控制 C++ 全局变量的数量。</p>\n</li>\n</ul>\n<p>####2、main() 函数执行后</p>\n<p>这阶段，主要是指从main函数之后到AppDelegate 的 <code>didFinishLuachingWithOptions</code> 方法里首屏渲染相关方法执行完成。主要包括：</p>\n<ul>\n<li>首屏初始化所需配置文件的读写操作；</li>\n<li>首屏列表大数据的读取；</li>\n<li>首屏渲染的大量计算等；</li>\n</ul>\n<p>对于这部分，做好结合业务和性能考虑，合理安排初始化。尽量不要阻塞主线程。</p>\n<p>####3、首屏渲染完成后<br />\n这部分是指首屏渲染完成到<code>didFinishLuachingWithOptions</code>作用域结束。主要完成的是服务模块初始化、监听注册、配置文件读取等。这里分两种方式：功能级别和方法级别的启动优化。</p>\n<ul>\n<li>\n<p>功能级别的优化的思路是： main() 函数开始执行后到首屏渲染完成前只处理首屏相关的业务，其他非首屏业务的初始 化、监听注册、配置文件读取等都放到首屏渲染完成后去做。</p>\n</li>\n<li>\n<p>在这之后，我们需要进一步做的，是检查首屏渲染完成前主线程上有哪些耗时方法，将没必要的耗时方法滞 后或者异步执行。通常情况下，耗时较长的方法主要发生在计算大量数据的情况下，具体的表现就是加载、 编辑、存储图片和文件等资源。</p>\n</li>\n</ul>\n<p>目前来看，对App启动速度的监控，主要有两种手段。</p>\n<ul>\n<li>第一种方法是，定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时。Xcode 工具套件里自 带的 Time Profiler ，采用的就是这种方式。</li>\n<li>第二种方法是，对 objc_msgSend 方法进行 hook 来掌握所有方法的执行耗时。hook objc_msgSend 这种方式的优点是非常精确，而缺点是只能针对 Objective-C 的方法。当然，对于 c 方 法和 block 也不是没有办法，你可以使用 libffi 的 ffi_call 来达成 hook，但缺点就是编写维护相关工具门槛高。</li>\n</ul>\n<p>函数执行前(DYLD_PRINT_STATISTICS=1)，耗时：</p>\n<pre><code>Total pre-main time: 1.3 seconds (100.0%)\n         dylib loading time: 531.35 milliseconds (39.9%)\n        rebase/binding time:  46.17 milliseconds (3.4%)\n            ObjC setup time: 178.40 milliseconds (13.4%)\n           initializer time: 572.91 milliseconds (43.1%)\n           slowest intializers :\n             libSystem.B.dylib :   8.27 milliseconds (0.6%)\n    libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n          libglInterpose.dylib : 227.26 milliseconds (17.1%)\n         libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                 sd_doctor_ios : 402.81 milliseconds (30.3%)\n</code></pre>\n<p>首屏出现时间——未登录： 0.4437880516052246<br />\n首屏出现时间——已登录： 0.7114208936691284/0.6743890047073364<br />\nend time：0.7480049133300781</p>\n<p>第一次优化：</p>\n<pre><code>show time: 0.2890850305557251\nend time: 0.5157899856567383\n</code></pre>\n<p>第二次优化：<br />\n未登录：</p>\n<pre><code>show time: 0.27560102939605713\nend time: 0.27729904651641846\nmainAsynTime time: 0.3173290491104126\nasynTime time: 0.7670600414276123\n</code></pre>\n<p>已登录：</p>\n<pre><code>show time: 0.3778949975967407\nend time: 0.37808406352996826\nmainAsynTime time: 0.7077310085296631\nasynTime time: 0.8228110074996948\n</code></pre>\n<p>冷启动加载时间：</p>\n<pre><code>Total pre-main time: 1.0 seconds (100.0%)\n         dylib loading time: 597.56 milliseconds (55.8%)\n        rebase/binding time:  48.35 milliseconds (4.5%)\n            ObjC setup time:  59.63 milliseconds (5.5%)\n           initializer time: 364.73 milliseconds (34.0%)\n           slowest intializers :\n             libSystem.B.dylib :   8.15 milliseconds (0.7%)\n    libMainThreadChecker.dylib :  34.38 milliseconds (3.2%)\n          libglInterpose.dylib :  80.59 milliseconds (7.5%)\n         libMTLInterpose.dylib :  21.72 milliseconds (2.0%)\n                 sd_doctor_ios : 320.42 milliseconds (29.9%)\n</code></pre>\n<p>启动优化总结：</p>\n<pre><code>使用DYLD_PRINT_STATISTICS测试启动加载时间\n减少自定义的动态库集成\n精简原有的Objective-C类和代码\n移除静态的初始化操作\n使用更多的Swift代码</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"启动优化\"><a class=\"markdownIt-Anchor\" href=\"#启动优化\"></a> 启动优化</h3>\n<p>1、启动优化</p>\n<p>冷启动是指， App 点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的情况。这是一次完整的启动过程。</p>\n<p>热启动是指 ，App 在冷启动后用户将 App 退后台，在 App 的进程还在系统里的情况下，用户重新启动进入 App 的过程，这个过程做的事情非常少。</p>\n<ul>\n<li>\n<p>main() 函数执行前；</p>\n</li>\n<li>\n<p>main() 函数执行后；</p>\n</li>\n<li>\n<p>首屏渲染完成后。</p>\n</li>\n</ul>\n<p>####1、main() 函数执行前<br />\n要做启动优化，就首先要知道，APP在启动前做了些什么？iOS APP 启动的时候，会做下面几件事情：</p>\n<ul>\n<li>加载可执行文件（Mac-o、App 的.o文件）；</li>\n<li>加载动态链接库，进行rebase指针调整和bind符号绑定；</li>\n<li>Objc 运行时的初始化处理，包括Objc相关类的注册、category注册、selector唯一性检查等；</li>\n<li>初始化，包括 +load 方法，attribute((constructor))修饰函数的调用、创建C++静态全局变量。</li>\n</ul>\n<p>相应的，可以做的优化工作包括：</p>\n<ul>\n<li>\n<p>减少动态库加载。每个库本身都有依赖关系，苹果公司建议使用更少的动态库，并且建议在使用动态库的数量较多时，尽量将多个动态库进行合并。数量上，苹果公司最多可以支持 6 个非系统动态库合并为一个。</p>\n</li>\n<li>\n<p>减少加载启动后不会去使用的类或者方法。</p>\n</li>\n<li>\n<p>+load() 方法里的内容可以放到首屏渲染完成后再执行，或使用 +initialize() 方法替换掉。因为，在一个 +load() 方法里，进行运行时方法替换操作会带来 4 毫秒的消耗。不要小看这 4 毫秒，积少成多，执行 +load() 方法对启动速度的影响会越来越大。</p>\n</li>\n<li>\n<p>控制 C++ 全局变量的数量。</p>\n</li>\n</ul>\n<p>####2、main() 函数执行后</p>\n<p>这阶段，主要是指从main函数之后到AppDelegate 的 <code>didFinishLuachingWithOptions</code> 方法里首屏渲染相关方法执行完成。主要包括：</p>\n<ul>\n<li>首屏初始化所需配置文件的读写操作；</li>\n<li>首屏列表大数据的读取；</li>\n<li>首屏渲染的大量计算等；</li>\n</ul>\n<p>对于这部分，做好结合业务和性能考虑，合理安排初始化。尽量不要阻塞主线程。</p>\n<p>####3、首屏渲染完成后<br />\n这部分是指首屏渲染完成到<code>didFinishLuachingWithOptions</code>作用域结束。主要完成的是服务模块初始化、监听注册、配置文件读取等。这里分两种方式：功能级别和方法级别的启动优化。</p>\n<ul>\n<li>\n<p>功能级别的优化的思路是： main() 函数开始执行后到首屏渲染完成前只处理首屏相关的业务，其他非首屏业务的初始 化、监听注册、配置文件读取等都放到首屏渲染完成后去做。</p>\n</li>\n<li>\n<p>在这之后，我们需要进一步做的，是检查首屏渲染完成前主线程上有哪些耗时方法，将没必要的耗时方法滞 后或者异步执行。通常情况下，耗时较长的方法主要发生在计算大量数据的情况下，具体的表现就是加载、 编辑、存储图片和文件等资源。</p>\n</li>\n</ul>\n<p>目前来看，对App启动速度的监控，主要有两种手段。</p>\n<ul>\n<li>第一种方法是，定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时。Xcode 工具套件里自 带的 Time Profiler ，采用的就是这种方式。</li>\n<li>第二种方法是，对 objc_msgSend 方法进行 hook 来掌握所有方法的执行耗时。hook objc_msgSend 这种方式的优点是非常精确，而缺点是只能针对 Objective-C 的方法。当然，对于 c 方 法和 block 也不是没有办法，你可以使用 libffi 的 ffi_call 来达成 hook，但缺点就是编写维护相关工具门槛高。</li>\n</ul>\n<p>函数执行前(DYLD_PRINT_STATISTICS=1)，耗时：</p>\n<pre><code>Total pre-main time: 1.3 seconds (100.0%)\n         dylib loading time: 531.35 milliseconds (39.9%)\n        rebase/binding time:  46.17 milliseconds (3.4%)\n            ObjC setup time: 178.40 milliseconds (13.4%)\n           initializer time: 572.91 milliseconds (43.1%)\n           slowest intializers :\n             libSystem.B.dylib :   8.27 milliseconds (0.6%)\n    libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n          libglInterpose.dylib : 227.26 milliseconds (17.1%)\n         libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                 sd_doctor_ios : 402.81 milliseconds (30.3%)\n</code></pre>\n<p>首屏出现时间——未登录： 0.4437880516052246<br />\n首屏出现时间——已登录： 0.7114208936691284/0.6743890047073364<br />\nend time：0.7480049133300781</p>\n<p>第一次优化：</p>\n<pre><code>show time: 0.2890850305557251\nend time: 0.5157899856567383\n</code></pre>\n<p>第二次优化：<br />\n未登录：</p>\n<pre><code>show time: 0.27560102939605713\nend time: 0.27729904651641846\nmainAsynTime time: 0.3173290491104126\nasynTime time: 0.7670600414276123\n</code></pre>\n<p>已登录：</p>\n<pre><code>show time: 0.3778949975967407\nend time: 0.37808406352996826\nmainAsynTime time: 0.7077310085296631\nasynTime time: 0.8228110074996948\n</code></pre>\n<p>冷启动加载时间：</p>\n<pre><code>Total pre-main time: 1.0 seconds (100.0%)\n         dylib loading time: 597.56 milliseconds (55.8%)\n        rebase/binding time:  48.35 milliseconds (4.5%)\n            ObjC setup time:  59.63 milliseconds (5.5%)\n           initializer time: 364.73 milliseconds (34.0%)\n           slowest intializers :\n             libSystem.B.dylib :   8.15 milliseconds (0.7%)\n    libMainThreadChecker.dylib :  34.38 milliseconds (3.2%)\n          libglInterpose.dylib :  80.59 milliseconds (7.5%)\n         libMTLInterpose.dylib :  21.72 milliseconds (2.0%)\n                 sd_doctor_ios : 320.42 milliseconds (29.9%)\n</code></pre>\n<p>启动优化总结：</p>\n<pre><code>使用DYLD_PRINT_STATISTICS测试启动加载时间\n减少自定义的动态库集成\n精简原有的Objective-C类和代码\n移除静态的初始化操作\n使用更多的Swift代码</code></pre>\n"},{"_content":"# 性能优化\n\n1、[参考资料](https://github.com/skyming/iOS-Performance-Optimization.git)\n\n2、界面流畅性优化：\n\n* [facebookarchive/AsyncDisplayKit](https://github.com/facebookarchive/AsyncDisplayKit)\n* [TextureGroup/Texture](https://github.com/TextureGroup/Texture)\n\n3、webView加载优化：\n\n* [Tencent/VasSonic](https://github.com/Tencent/VasSonic)\n* 大前端？？webView\n\n工具：instrument -> Time Profiler\n\n[iOS性能优化总结](https://juejin.im/post/5ace078cf265da23994ee493)\n\n[WeRead团队博客](https://wereadteam.github.io/)\n\n[iOS性能优化](http://www.mengyueping.com/2018/08/19/iOS_optimization_all/)\n","source":"_posts/学习笔记/iOS/iOS之性能优化/iOS之性能优化.md","raw":"# 性能优化\n\n1、[参考资料](https://github.com/skyming/iOS-Performance-Optimization.git)\n\n2、界面流畅性优化：\n\n* [facebookarchive/AsyncDisplayKit](https://github.com/facebookarchive/AsyncDisplayKit)\n* [TextureGroup/Texture](https://github.com/TextureGroup/Texture)\n\n3、webView加载优化：\n\n* [Tencent/VasSonic](https://github.com/Tencent/VasSonic)\n* 大前端？？webView\n\n工具：instrument -> Time Profiler\n\n[iOS性能优化总结](https://juejin.im/post/5ace078cf265da23994ee493)\n\n[WeRead团队博客](https://wereadteam.github.io/)\n\n[iOS性能优化](http://www.mengyueping.com/2018/08/19/iOS_optimization_all/)\n","slug":"学习笔记/iOS/iOS之性能优化/iOS之性能优化","published":1,"date":"2021-02-24T12:31:09.192Z","updated":"2021-02-24T12:31:09.192Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tih002mw37uh6n22jd1","content":"<h1 id=\"性能优化\"><a class=\"markdownIt-Anchor\" href=\"#性能优化\"></a> 性能优化</h1>\n<p>1、<a href=\"https://github.com/skyming/iOS-Performance-Optimization.git\">参考资料</a></p>\n<p>2、界面流畅性优化：</p>\n<ul>\n<li><a href=\"https://github.com/facebookarchive/AsyncDisplayKit\">facebookarchive/AsyncDisplayKit</a></li>\n<li><a href=\"https://github.com/TextureGroup/Texture\">TextureGroup/Texture</a></li>\n</ul>\n<p>3、webView加载优化：</p>\n<ul>\n<li><a href=\"https://github.com/Tencent/VasSonic\">Tencent/VasSonic</a></li>\n<li>大前端？？webView</li>\n</ul>\n<p>工具：instrument -&gt; Time Profiler</p>\n<p><a href=\"https://juejin.im/post/5ace078cf265da23994ee493\">iOS性能优化总结</a></p>\n<p><a href=\"https://wereadteam.github.io/\">WeRead团队博客</a></p>\n<p><a href=\"http://www.mengyueping.com/2018/08/19/iOS_optimization_all/\">iOS性能优化</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"性能优化\"><a class=\"markdownIt-Anchor\" href=\"#性能优化\"></a> 性能优化</h1>\n<p>1、<a href=\"https://github.com/skyming/iOS-Performance-Optimization.git\">参考资料</a></p>\n<p>2、界面流畅性优化：</p>\n<ul>\n<li><a href=\"https://github.com/facebookarchive/AsyncDisplayKit\">facebookarchive/AsyncDisplayKit</a></li>\n<li><a href=\"https://github.com/TextureGroup/Texture\">TextureGroup/Texture</a></li>\n</ul>\n<p>3、webView加载优化：</p>\n<ul>\n<li><a href=\"https://github.com/Tencent/VasSonic\">Tencent/VasSonic</a></li>\n<li>大前端？？webView</li>\n</ul>\n<p>工具：instrument -&gt; Time Profiler</p>\n<p><a href=\"https://juejin.im/post/5ace078cf265da23994ee493\">iOS性能优化总结</a></p>\n<p><a href=\"https://wereadteam.github.io/\">WeRead团队博客</a></p>\n<p><a href=\"http://www.mengyueping.com/2018/08/19/iOS_optimization_all/\">iOS性能优化</a></p>\n"},{"_content":"commit代码规范\n\n基本样式：[type] [module] : --bug=1000627 Message\n\n//空一行\n\ndetail\n\n//空一行\n\n说明：\n\n\n其中：\ntype, module 和 message 是必选。\ndetail 为可选。\n\ntype 用于说明 commit 的类别，使用下面标识：\n  bug-fix：修复bug\n\n  feature：新功能实现\n\n  optimize：重构，优化，工程配置等\n\n  merge: 用于替换自动生成合并分支log\n\n\nmodule 用于说明commit内容所属的业务模块（如果不属于任何模块，使用“通用”）\n\nmessage 修改的内容\n\ndetail 用于在该commit有多条内容的时候，加以说明\nbug-fix需要添加关键字：--bug=bugid\nfeature需要添加关键字：--story=storyid\n\n\n样例1、\n\n[fixbug] [咨询] : 修复会话页面在iOS10上显示异常的问题\n\n\n样例2、\n\n[fixbug] [咨询] [tapd id: 1009080,1090900] : 修复以下bug：\n\n\n1.修复会话页面在iOS10上显示异常的问题\n\n2.修复tabbarItem小红点显示逻辑不正确bug\n\n3.修复navigationbar高度不正确的问题\n\n\n样例3、\n\n[feature] [登陆] : 导入微信SDK，实现微信登陆\n\n\n样例4、\n\n[optimize] [工程配置] : 增加会话创建失败后的重连，降低失败概率\n\n\n样例5、\n\n[merge] : Merge branch 'releaseV0.2.0' into ‘develop’\n","source":"_posts/学习笔记/iOS/iOS之开发工具/Git提交代码规范.md","raw":"commit代码规范\n\n基本样式：[type] [module] : --bug=1000627 Message\n\n//空一行\n\ndetail\n\n//空一行\n\n说明：\n\n\n其中：\ntype, module 和 message 是必选。\ndetail 为可选。\n\ntype 用于说明 commit 的类别，使用下面标识：\n  bug-fix：修复bug\n\n  feature：新功能实现\n\n  optimize：重构，优化，工程配置等\n\n  merge: 用于替换自动生成合并分支log\n\n\nmodule 用于说明commit内容所属的业务模块（如果不属于任何模块，使用“通用”）\n\nmessage 修改的内容\n\ndetail 用于在该commit有多条内容的时候，加以说明\nbug-fix需要添加关键字：--bug=bugid\nfeature需要添加关键字：--story=storyid\n\n\n样例1、\n\n[fixbug] [咨询] : 修复会话页面在iOS10上显示异常的问题\n\n\n样例2、\n\n[fixbug] [咨询] [tapd id: 1009080,1090900] : 修复以下bug：\n\n\n1.修复会话页面在iOS10上显示异常的问题\n\n2.修复tabbarItem小红点显示逻辑不正确bug\n\n3.修复navigationbar高度不正确的问题\n\n\n样例3、\n\n[feature] [登陆] : 导入微信SDK，实现微信登陆\n\n\n样例4、\n\n[optimize] [工程配置] : 增加会话创建失败后的重连，降低失败概率\n\n\n样例5、\n\n[merge] : Merge branch 'releaseV0.2.0' into ‘develop’\n","slug":"学习笔记/iOS/iOS之开发工具/Git提交代码规范","published":1,"date":"2021-02-24T12:31:09.184Z","updated":"2021-02-24T12:31:09.185Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tii002nw37ue6aecrl5","content":"<p>commit代码规范</p>\n<p>基本样式：[type] [module] : --bug=1000627 Message</p>\n<p>//空一行</p>\n<p>detail</p>\n<p>//空一行</p>\n<p>说明：</p>\n<p>其中：<br />\ntype, module 和 message 是必选。<br />\ndetail 为可选。</p>\n<p>type 用于说明 commit 的类别，使用下面标识：<br />\nbug-fix：修复bug</p>\n<p>feature：新功能实现</p>\n<p>optimize：重构，优化，工程配置等</p>\n<p>merge: 用于替换自动生成合并分支log</p>\n<p>module 用于说明commit内容所属的业务模块（如果不属于任何模块，使用“通用”）</p>\n<p>message 修改的内容</p>\n<p>detail 用于在该commit有多条内容的时候，加以说明<br />\nbug-fix需要添加关键字：–bug=bugid<br />\nfeature需要添加关键字：–story=storyid</p>\n<p>样例1、</p>\n<p>[fixbug] [咨询] : 修复会话页面在iOS10上显示异常的问题</p>\n<p>样例2、</p>\n<p>[fixbug] [咨询] [tapd id: 1009080,1090900] : 修复以下bug：</p>\n<p>1.修复会话页面在iOS10上显示异常的问题</p>\n<p>2.修复tabbarItem小红点显示逻辑不正确bug</p>\n<p>3.修复navigationbar高度不正确的问题</p>\n<p>样例3、</p>\n<p>[feature] [登陆] : 导入微信SDK，实现微信登陆</p>\n<p>样例4、</p>\n<p>[optimize] [工程配置] : 增加会话创建失败后的重连，降低失败概率</p>\n<p>样例5、</p>\n<p>[merge] : Merge branch ‘releaseV0.2.0’ into ‘develop’</p>\n","site":{"data":{}},"excerpt":"","more":"<p>commit代码规范</p>\n<p>基本样式：[type] [module] : --bug=1000627 Message</p>\n<p>//空一行</p>\n<p>detail</p>\n<p>//空一行</p>\n<p>说明：</p>\n<p>其中：<br />\ntype, module 和 message 是必选。<br />\ndetail 为可选。</p>\n<p>type 用于说明 commit 的类别，使用下面标识：<br />\nbug-fix：修复bug</p>\n<p>feature：新功能实现</p>\n<p>optimize：重构，优化，工程配置等</p>\n<p>merge: 用于替换自动生成合并分支log</p>\n<p>module 用于说明commit内容所属的业务模块（如果不属于任何模块，使用“通用”）</p>\n<p>message 修改的内容</p>\n<p>detail 用于在该commit有多条内容的时候，加以说明<br />\nbug-fix需要添加关键字：–bug=bugid<br />\nfeature需要添加关键字：–story=storyid</p>\n<p>样例1、</p>\n<p>[fixbug] [咨询] : 修复会话页面在iOS10上显示异常的问题</p>\n<p>样例2、</p>\n<p>[fixbug] [咨询] [tapd id: 1009080,1090900] : 修复以下bug：</p>\n<p>1.修复会话页面在iOS10上显示异常的问题</p>\n<p>2.修复tabbarItem小红点显示逻辑不正确bug</p>\n<p>3.修复navigationbar高度不正确的问题</p>\n<p>样例3、</p>\n<p>[feature] [登陆] : 导入微信SDK，实现微信登陆</p>\n<p>样例4、</p>\n<p>[optimize] [工程配置] : 增加会话创建失败后的重连，降低失败概率</p>\n<p>样例5、</p>\n<p>[merge] : Merge branch ‘releaseV0.2.0’ into ‘develop’</p>\n"},{"_content":"Debugger commands:\n  apropos           -- List debugger commands related to a word or subject.\n  breakpoint        -- Commands for operating on breakpoints (see 'help b' for shorthand.)\n  bugreport         -- Commands for creating domain-specific bug reports.\n  command           -- Commands for managing custom LLDB commands.\n  disassemble       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  expression        -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  frame             -- Commands for selecting and examing the current thread's stack frames.\n  gdb-remote        -- Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.\n  gui               -- Switch into the curses based GUI mode.\n  help              -- Show a list of all debugger commands, or give details about a specific command.\n  kdp-remote        -- Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.\n  language          -- Commands specific to a source language.\n  log               -- Commands controlling LLDB internal logging.\n  memory            -- Commands for operating on memory in the current target process.\n  platform          -- Commands to manage and create platforms.\n  plugin            -- Commands for managing LLDB plugins.\n  process           -- Commands for interacting with processes on the current platform.\n  quit              -- Quit the LLDB debugger.\n  register          -- Commands to access registers for the current thread and stack frame.\n  script            -- Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.\n  settings          -- Commands for managing LLDB settings.\n  source            -- Commands for examining source code described by debug information for the current target process.\n  statistics        -- Print statistics about a debugging session\n  target            -- Commands for operating on debugger targets.\n  thread            -- Commands for operating on one or more threads in the current process.\n  type              -- Commands for operating on the type system.\n  version           -- Show the LLDB debugger version.\n  watchpoint        -- Commands for operating on watchpoints.\nCurrent command abbreviations (type 'help command alias' for more info):\n  add-dsym  -- Add a debug symbol file to one of the target's current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.\n  attach    -- Attach to process by ID or name.\n  b         -- Set a breakpoint using one of several shorthand formats.\n  bt        -- Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.\n  c         -- Continue execution of all threads in the current process.\n  call      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  continue  -- Continue execution of all threads in the current process.\n  detach    -- Detach from the current target process.\n  di        -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  dis       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  display   -- Evaluate an expression at every stop (see 'help target stop-hook'.)\n  down      -- Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  env       -- Shorthand for viewing and setting environment variables.\n  exit      -- Quit the LLDB debugger.\n  f         -- Select the current stack frame by index from within the current thread (see 'thread backtrace'.)\n  file      -- Create a target using the argument as the main executable.\n  finish    -- Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.\n  image     -- Commands for accessing information for one or more target modules.\n  j         -- Set the program counter to a new address.\n  jump      -- Set the program counter to a new address.\n  kill      -- Terminate the current target process.\n  l         -- List relevant source code using one of several shorthand formats.\n  list      -- List relevant source code using one of several shorthand formats.\n  n         -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  next      -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  nexti     -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  ni        -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  p         -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  parray    -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  po        -- Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type's author.\n  poarray   -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  print     -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  q         -- Quit the LLDB debugger.\n  r         -- Launch the executable in the debugger.\n  rbreak    -- Sets a breakpoint or set of breakpoints in the executable.\n  repl      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  run       -- Launch the executable in the debugger.\n  s         -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  si        -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  sif       -- Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.\n  step      -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  stepi     -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  t         -- Change the currently selected thread.\n  tbreak    -- Set a one-shot breakpoint using one of several shorthand formats.\n  undisplay -- Stop displaying expression at every stop (specified by stop-hook index.)\n  up        -- Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  v         -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  var       -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  vo        -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  x         -- Read from the memory of the current target process.\nFor more information on any command, type 'help <command-name>'.","source":"_posts/学习笔记/iOS/iOS之开发工具/LLDB.md","raw":"Debugger commands:\n  apropos           -- List debugger commands related to a word or subject.\n  breakpoint        -- Commands for operating on breakpoints (see 'help b' for shorthand.)\n  bugreport         -- Commands for creating domain-specific bug reports.\n  command           -- Commands for managing custom LLDB commands.\n  disassemble       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  expression        -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  frame             -- Commands for selecting and examing the current thread's stack frames.\n  gdb-remote        -- Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.\n  gui               -- Switch into the curses based GUI mode.\n  help              -- Show a list of all debugger commands, or give details about a specific command.\n  kdp-remote        -- Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.\n  language          -- Commands specific to a source language.\n  log               -- Commands controlling LLDB internal logging.\n  memory            -- Commands for operating on memory in the current target process.\n  platform          -- Commands to manage and create platforms.\n  plugin            -- Commands for managing LLDB plugins.\n  process           -- Commands for interacting with processes on the current platform.\n  quit              -- Quit the LLDB debugger.\n  register          -- Commands to access registers for the current thread and stack frame.\n  script            -- Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.\n  settings          -- Commands for managing LLDB settings.\n  source            -- Commands for examining source code described by debug information for the current target process.\n  statistics        -- Print statistics about a debugging session\n  target            -- Commands for operating on debugger targets.\n  thread            -- Commands for operating on one or more threads in the current process.\n  type              -- Commands for operating on the type system.\n  version           -- Show the LLDB debugger version.\n  watchpoint        -- Commands for operating on watchpoints.\nCurrent command abbreviations (type 'help command alias' for more info):\n  add-dsym  -- Add a debug symbol file to one of the target's current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.\n  attach    -- Attach to process by ID or name.\n  b         -- Set a breakpoint using one of several shorthand formats.\n  bt        -- Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.\n  c         -- Continue execution of all threads in the current process.\n  call      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  continue  -- Continue execution of all threads in the current process.\n  detach    -- Detach from the current target process.\n  di        -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  dis       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  display   -- Evaluate an expression at every stop (see 'help target stop-hook'.)\n  down      -- Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  env       -- Shorthand for viewing and setting environment variables.\n  exit      -- Quit the LLDB debugger.\n  f         -- Select the current stack frame by index from within the current thread (see 'thread backtrace'.)\n  file      -- Create a target using the argument as the main executable.\n  finish    -- Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.\n  image     -- Commands for accessing information for one or more target modules.\n  j         -- Set the program counter to a new address.\n  jump      -- Set the program counter to a new address.\n  kill      -- Terminate the current target process.\n  l         -- List relevant source code using one of several shorthand formats.\n  list      -- List relevant source code using one of several shorthand formats.\n  n         -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  next      -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  nexti     -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  ni        -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  p         -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  parray    -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  po        -- Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type's author.\n  poarray   -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  print     -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  q         -- Quit the LLDB debugger.\n  r         -- Launch the executable in the debugger.\n  rbreak    -- Sets a breakpoint or set of breakpoints in the executable.\n  repl      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  run       -- Launch the executable in the debugger.\n  s         -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  si        -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  sif       -- Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.\n  step      -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  stepi     -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  t         -- Change the currently selected thread.\n  tbreak    -- Set a one-shot breakpoint using one of several shorthand formats.\n  undisplay -- Stop displaying expression at every stop (specified by stop-hook index.)\n  up        -- Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  v         -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  var       -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  vo        -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  x         -- Read from the memory of the current target process.\nFor more information on any command, type 'help <command-name>'.","slug":"学习笔记/iOS/iOS之开发工具/LLDB","published":1,"date":"2021-02-24T12:31:09.185Z","updated":"2021-02-24T12:31:09.185Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tij002ow37ucije6q6b","content":"<p>Debugger commands:<br />\napropos           – List debugger commands related to a word or subject.<br />\nbreakpoint        – Commands for operating on breakpoints (see ‘help b’ for shorthand.)<br />\nbugreport         – Commands for creating domain-specific bug reports.<br />\ncommand           – Commands for managing custom LLDB commands.<br />\ndisassemble       – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br />\nexpression        – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\nframe             – Commands for selecting and examing the current thread’s stack frames.<br />\ngdb-remote        – Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.<br />\ngui               – Switch into the curses based GUI mode.<br />\nhelp              – Show a list of all debugger commands, or give details about a specific command.<br />\nkdp-remote        – Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.<br />\nlanguage          – Commands specific to a source language.<br />\nlog               – Commands controlling LLDB internal logging.<br />\nmemory            – Commands for operating on memory in the current target process.<br />\nplatform          – Commands to manage and create platforms.<br />\nplugin            – Commands for managing LLDB plugins.<br />\nprocess           – Commands for interacting with processes on the current platform.<br />\nquit              – Quit the LLDB debugger.<br />\nregister          – Commands to access registers for the current thread and stack frame.<br />\nscript            – Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.<br />\nsettings          – Commands for managing LLDB settings.<br />\nsource            – Commands for examining source code described by debug information for the current target process.<br />\nstatistics        – Print statistics about a debugging session<br />\ntarget            – Commands for operating on debugger targets.<br />\nthread            – Commands for operating on one or more threads in the current process.<br />\ntype              – Commands for operating on the type system.<br />\nversion           – Show the LLDB debugger version.<br />\nwatchpoint        – Commands for operating on watchpoints.<br />\nCurrent command abbreviations (type ‘help command alias’ for more info):<br />\nadd-dsym  – Add a debug symbol file to one of the target’s current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.<br />\nattach    – Attach to process by ID or name.<br />\nb         – Set a breakpoint using one of several shorthand formats.<br />\nbt        – Show the current thread’s call stack.  Any numeric argument displays at most that many frames.  The argument ‘all’ displays all threads.<br />\nc         – Continue execution of all threads in the current process.<br />\ncall      – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\ncontinue  – Continue execution of all threads in the current process.<br />\ndetach    – Detach from the current target process.<br />\ndi        – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br />\ndis       – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br />\ndisplay   – Evaluate an expression at every stop (see ‘help target stop-hook’.)<br />\ndown      – Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.<br />\nenv       – Shorthand for viewing and setting environment variables.<br />\nexit      – Quit the LLDB debugger.<br />\nf         – Select the current stack frame by index from within the current thread (see ‘thread backtrace’.)<br />\nfile      – Create a target using the argument as the main executable.<br />\nfinish    – Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.<br />\nimage     – Commands for accessing information for one or more target modules.<br />\nj         – Set the program counter to a new address.<br />\njump      – Set the program counter to a new address.<br />\nkill      – Terminate the current target process.<br />\nl         – List relevant source code using one of several shorthand formats.<br />\nlist      – List relevant source code using one of several shorthand formats.<br />\nn         – Source level single step, stepping over calls.  Defaults to current thread unless specified.<br />\nnext      – Source level single step, stepping over calls.  Defaults to current thread unless specified.<br />\nnexti     – Instruction level single step, stepping over calls.  Defaults to current thread unless specified.<br />\nni        – Instruction level single step, stepping over calls.  Defaults to current thread unless specified.<br />\np         – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\nparray    – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\npo        – Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type’s author.<br />\npoarray   – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\nprint     – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\nq         – Quit the LLDB debugger.<br />\nr         – Launch the executable in the debugger.<br />\nrbreak    – Sets a breakpoint or set of breakpoints in the executable.<br />\nrepl      – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\nrun       – Launch the executable in the debugger.<br />\ns         – Source level single step, stepping into calls.  Defaults to current thread unless specified.<br />\nsi        – Instruction level single step, stepping into calls.  Defaults to current thread unless specified.<br />\nsif       – Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.<br />\nstep      – Source level single step, stepping into calls.  Defaults to current thread unless specified.<br />\nstepi     – Instruction level single step, stepping into calls.  Defaults to current thread unless specified.<br />\nt         – Change the currently selected thread.<br />\ntbreak    – Set a one-shot breakpoint using one of several shorthand formats.<br />\nundisplay – Stop displaying expression at every stop (specified by stop-hook index.)<br />\nup        – Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.<br />\nv         – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br />\n‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br />\ninstead.<br />\nIt is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br />\nreads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br />\nvar       – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br />\n‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br />\ninstead.<br />\nIt is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br />\nreads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br />\nvo        – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br />\n‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br />\ninstead.<br />\nIt is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br />\nreads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br />\nx         – Read from the memory of the current target process.<br />\nFor more information on any command, type 'help <command-name>'.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Debugger commands:<br />\napropos           – List debugger commands related to a word or subject.<br />\nbreakpoint        – Commands for operating on breakpoints (see ‘help b’ for shorthand.)<br />\nbugreport         – Commands for creating domain-specific bug reports.<br />\ncommand           – Commands for managing custom LLDB commands.<br />\ndisassemble       – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br />\nexpression        – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\nframe             – Commands for selecting and examing the current thread’s stack frames.<br />\ngdb-remote        – Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.<br />\ngui               – Switch into the curses based GUI mode.<br />\nhelp              – Show a list of all debugger commands, or give details about a specific command.<br />\nkdp-remote        – Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.<br />\nlanguage          – Commands specific to a source language.<br />\nlog               – Commands controlling LLDB internal logging.<br />\nmemory            – Commands for operating on memory in the current target process.<br />\nplatform          – Commands to manage and create platforms.<br />\nplugin            – Commands for managing LLDB plugins.<br />\nprocess           – Commands for interacting with processes on the current platform.<br />\nquit              – Quit the LLDB debugger.<br />\nregister          – Commands to access registers for the current thread and stack frame.<br />\nscript            – Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.<br />\nsettings          – Commands for managing LLDB settings.<br />\nsource            – Commands for examining source code described by debug information for the current target process.<br />\nstatistics        – Print statistics about a debugging session<br />\ntarget            – Commands for operating on debugger targets.<br />\nthread            – Commands for operating on one or more threads in the current process.<br />\ntype              – Commands for operating on the type system.<br />\nversion           – Show the LLDB debugger version.<br />\nwatchpoint        – Commands for operating on watchpoints.<br />\nCurrent command abbreviations (type ‘help command alias’ for more info):<br />\nadd-dsym  – Add a debug symbol file to one of the target’s current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.<br />\nattach    – Attach to process by ID or name.<br />\nb         – Set a breakpoint using one of several shorthand formats.<br />\nbt        – Show the current thread’s call stack.  Any numeric argument displays at most that many frames.  The argument ‘all’ displays all threads.<br />\nc         – Continue execution of all threads in the current process.<br />\ncall      – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\ncontinue  – Continue execution of all threads in the current process.<br />\ndetach    – Detach from the current target process.<br />\ndi        – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br />\ndis       – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br />\ndisplay   – Evaluate an expression at every stop (see ‘help target stop-hook’.)<br />\ndown      – Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.<br />\nenv       – Shorthand for viewing and setting environment variables.<br />\nexit      – Quit the LLDB debugger.<br />\nf         – Select the current stack frame by index from within the current thread (see ‘thread backtrace’.)<br />\nfile      – Create a target using the argument as the main executable.<br />\nfinish    – Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.<br />\nimage     – Commands for accessing information for one or more target modules.<br />\nj         – Set the program counter to a new address.<br />\njump      – Set the program counter to a new address.<br />\nkill      – Terminate the current target process.<br />\nl         – List relevant source code using one of several shorthand formats.<br />\nlist      – List relevant source code using one of several shorthand formats.<br />\nn         – Source level single step, stepping over calls.  Defaults to current thread unless specified.<br />\nnext      – Source level single step, stepping over calls.  Defaults to current thread unless specified.<br />\nnexti     – Instruction level single step, stepping over calls.  Defaults to current thread unless specified.<br />\nni        – Instruction level single step, stepping over calls.  Defaults to current thread unless specified.<br />\np         – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\nparray    – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\npo        – Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type’s author.<br />\npoarray   – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\nprint     – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\nq         – Quit the LLDB debugger.<br />\nr         – Launch the executable in the debugger.<br />\nrbreak    – Sets a breakpoint or set of breakpoints in the executable.<br />\nrepl      – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br />\nrun       – Launch the executable in the debugger.<br />\ns         – Source level single step, stepping into calls.  Defaults to current thread unless specified.<br />\nsi        – Instruction level single step, stepping into calls.  Defaults to current thread unless specified.<br />\nsif       – Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.<br />\nstep      – Source level single step, stepping into calls.  Defaults to current thread unless specified.<br />\nstepi     – Instruction level single step, stepping into calls.  Defaults to current thread unless specified.<br />\nt         – Change the currently selected thread.<br />\ntbreak    – Set a one-shot breakpoint using one of several shorthand formats.<br />\nundisplay – Stop displaying expression at every stop (specified by stop-hook index.)<br />\nup        – Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.<br />\nv         – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br />\n‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br />\ninstead.<br />\nIt is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br />\nreads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br />\nvar       – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br />\n‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br />\ninstead.<br />\nIt is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br />\nreads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br />\nvo        – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br />\n‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br />\ninstead.<br />\nIt is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br />\nreads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br />\nx         – Read from the memory of the current target process.<br />\nFor more information on any command, type 'help <command-name>'.</p>\n"},{"_content":"# cocoaPod\n\n## 一、pod 公开库\n\n### 1. 索引库\n\n#### 1.1 添加索引库\n\n```shell\npod repo add WTSpecs https://coding.net/wtlucky/WTSpecs.git\n```\n\n#### 1.2 删除索引库\n\n```shell\npod repo remove WTSpecs\n```\n\n#### 2. pod库\n\n##### 2.1 创建pod库\n\n```shell\npod lib create podTestLibrary\n```\n\n##### 2.2 添加到远程\n\n```shell\ngit add .\ngit commit -s -m \"Initial Commit of Library\"\ngit remote add origin git@coding.net:wtlucky/podTestLibrary.git\ngit push origin master\n```\n\n##### 2.3 打tag\n\n```shell\ngit tag -a 0.1.0 -m \"first release\"\ngit push --tags / git push origin tag 0.1.0\n```\n\n##### 2.4 修改podspec文件\n\n##### 2.5 检验pod库、podspec\n\n```shell\npod lib lint\n```\n\n##### 2.6 提交pod库\n\n```shell\npod repo push WTSpecs PodTestLibrary.podspec  #前面是本地Repo名字 后面是podspec名字\n```\n\n##### 2.7 检索pod库\n\n```shell\npod search PodTestLibrary\n```\n\n##### 2.8 使用pod库\n\n```shel\npod 'PodTestLibrary', '~> 0.1.0'\n```\n  \n## 二、私有库\n\n### 1. 检验\n  \n```shell\npod lib lint --allow-warnings --sources=<https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git>\n```\n\n### 2. 远程检验\n  \n```shell\npod spec lint --allow-warnings --sources=<https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git>\n```\n\n### 3. 提交\n\n```shell\npod repo push sumian sm_ios_base.podspec --allow-warnings --sources='http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs'\n```\n\n## 3. pod 命令\n\n```shell\nUsage:\n\n    $ pod COMMAND\n\n      CocoaPods, the Cocoa library package manager.\n\nCommands:\n\n    + cache         Manipulate the CocoaPods cache\n    + deintegrate   Deintegrate CocoaPods from your project\n    + env           Display pod environment\n    + init          Generate a Podfile for the current directory\n    + install       Install project dependencies according to versions from a\n                    Podfile.lock\n    + ipc           Inter-process communication\n    + lib           Develop pods\n    + list          List pods\n    + outdated      Show outdated project dependencies\n    + package       Package a podspec into a static library.\n    + plugins       Show available CocoaPods plugins\n    + repo          Manage spec-repositories\n    + search        Search for pods\n    + setup         Setup the CocoaPods environment\n    + spec          Manage pod specs\n    + trunk         Interact with the CocoaPods API (e.g. publishing new specs)\n    + try           Try a Pod!\n    + update        Update outdated project dependencies and create new Podfile.lock\n\nOptions:\n\n    --silent        Show nothing\n    --version       Show the version of the tool\n    --verbose       Show more debugging information\n    --no-ansi       Show output without ANSI codes\n    --help          Show help banner of specified command\n```\n\n## 4. pod lib lint 命令\n\n```shell\nUsage:\n\n    $ pod lib lint\n\n      Validates the Pod using the files in the working directory.\n\nOptions:\n\n    --quick                                           Lint skips checks that would\n                                                      require to download and build\n                                                      the spec\n    --allow-warnings                                  Lint validates even if warnings\n                                                      are present\n    --subspec=NAME                                    Lint validates only the given\n                                                      subspec\n    --no-subspecs                                     Lint skips validation of\n                                                      subspecs\n    --no-clean                                        Lint leaves the build directory\n                                                      intact for inspection\n    --fail-fast                                       Lint stops on the first failing\n                                                      platform or subspec\n    --use-libraries                                   Lint uses static libraries to\n                                                      install the spec\n    --use-modular-headers                             Lint uses modular headers during\n                                                      installation\n    --sources=https://github.com/artsy/Specs,master   The sources from which to pull\n                                                      dependent pods (defaults to\n                                                      https://github.com/CocoaPods/Specs.git).\n                                                      Multiple sources must be\n                                                      comma-delimited.\n    --platforms=ios,macos                             Lint against specific\n                                                      platforms(defaults to all\n                                                      platforms supported by the\n                                                      podspec).Multiple platforms must\n                                                      be comma-delimited\n    --private                                         Lint skips checks that apply\n                                                      only to public specs\n    --swift-version=VERSION                           The SWIFT_VERSION that should be\n                                                      used to lint the spec. This\n                                                      takes precedence over a\n                                                      .swift-version file.\n    --skip-import-validation                          Lint skips validating that the\n                                                      pod can be imported\n    --skip-tests                                      Lint skips building and running\n                                                      tests during validation\n    --silent                                          Show nothing\n    --verbose                                         Show more debugging information\n    --no-ansi                                         Show output without ANSI codes\n    --help                                            Show help banner of specified\n                                                      command\n```\n\n## 5. pod 修改工程配置\n\n```shell\npost_install do |installer_representation|\n\n    installer_representation.pods_project.targets.each do |target|\n        target.build_configurations.each do |config|\n            #去警告\n            config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'\n            #判断scheme\n            if config.name.include?(\"SchemeAppTest_Release\")\n                #添加scheme对应的预编译宏\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTRELEASE=3'\n            end\n            if config.name.include?(\"SchemeAppTest_Debug\")\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTDEBUG=2'\n                #指定scheme的调试模式可见变量\n                config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'\n                #某些情况由于编译器不支持无法debug（可选）\n                config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'\n            end\n          end\n    end    \nend\n  ```\n","source":"_posts/学习笔记/iOS/iOS之开发工具/cocoapod 库.md","raw":"# cocoaPod\n\n## 一、pod 公开库\n\n### 1. 索引库\n\n#### 1.1 添加索引库\n\n```shell\npod repo add WTSpecs https://coding.net/wtlucky/WTSpecs.git\n```\n\n#### 1.2 删除索引库\n\n```shell\npod repo remove WTSpecs\n```\n\n#### 2. pod库\n\n##### 2.1 创建pod库\n\n```shell\npod lib create podTestLibrary\n```\n\n##### 2.2 添加到远程\n\n```shell\ngit add .\ngit commit -s -m \"Initial Commit of Library\"\ngit remote add origin git@coding.net:wtlucky/podTestLibrary.git\ngit push origin master\n```\n\n##### 2.3 打tag\n\n```shell\ngit tag -a 0.1.0 -m \"first release\"\ngit push --tags / git push origin tag 0.1.0\n```\n\n##### 2.4 修改podspec文件\n\n##### 2.5 检验pod库、podspec\n\n```shell\npod lib lint\n```\n\n##### 2.6 提交pod库\n\n```shell\npod repo push WTSpecs PodTestLibrary.podspec  #前面是本地Repo名字 后面是podspec名字\n```\n\n##### 2.7 检索pod库\n\n```shell\npod search PodTestLibrary\n```\n\n##### 2.8 使用pod库\n\n```shel\npod 'PodTestLibrary', '~> 0.1.0'\n```\n  \n## 二、私有库\n\n### 1. 检验\n  \n```shell\npod lib lint --allow-warnings --sources=<https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git>\n```\n\n### 2. 远程检验\n  \n```shell\npod spec lint --allow-warnings --sources=<https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git>\n```\n\n### 3. 提交\n\n```shell\npod repo push sumian sm_ios_base.podspec --allow-warnings --sources='http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs'\n```\n\n## 3. pod 命令\n\n```shell\nUsage:\n\n    $ pod COMMAND\n\n      CocoaPods, the Cocoa library package manager.\n\nCommands:\n\n    + cache         Manipulate the CocoaPods cache\n    + deintegrate   Deintegrate CocoaPods from your project\n    + env           Display pod environment\n    + init          Generate a Podfile for the current directory\n    + install       Install project dependencies according to versions from a\n                    Podfile.lock\n    + ipc           Inter-process communication\n    + lib           Develop pods\n    + list          List pods\n    + outdated      Show outdated project dependencies\n    + package       Package a podspec into a static library.\n    + plugins       Show available CocoaPods plugins\n    + repo          Manage spec-repositories\n    + search        Search for pods\n    + setup         Setup the CocoaPods environment\n    + spec          Manage pod specs\n    + trunk         Interact with the CocoaPods API (e.g. publishing new specs)\n    + try           Try a Pod!\n    + update        Update outdated project dependencies and create new Podfile.lock\n\nOptions:\n\n    --silent        Show nothing\n    --version       Show the version of the tool\n    --verbose       Show more debugging information\n    --no-ansi       Show output without ANSI codes\n    --help          Show help banner of specified command\n```\n\n## 4. pod lib lint 命令\n\n```shell\nUsage:\n\n    $ pod lib lint\n\n      Validates the Pod using the files in the working directory.\n\nOptions:\n\n    --quick                                           Lint skips checks that would\n                                                      require to download and build\n                                                      the spec\n    --allow-warnings                                  Lint validates even if warnings\n                                                      are present\n    --subspec=NAME                                    Lint validates only the given\n                                                      subspec\n    --no-subspecs                                     Lint skips validation of\n                                                      subspecs\n    --no-clean                                        Lint leaves the build directory\n                                                      intact for inspection\n    --fail-fast                                       Lint stops on the first failing\n                                                      platform or subspec\n    --use-libraries                                   Lint uses static libraries to\n                                                      install the spec\n    --use-modular-headers                             Lint uses modular headers during\n                                                      installation\n    --sources=https://github.com/artsy/Specs,master   The sources from which to pull\n                                                      dependent pods (defaults to\n                                                      https://github.com/CocoaPods/Specs.git).\n                                                      Multiple sources must be\n                                                      comma-delimited.\n    --platforms=ios,macos                             Lint against specific\n                                                      platforms(defaults to all\n                                                      platforms supported by the\n                                                      podspec).Multiple platforms must\n                                                      be comma-delimited\n    --private                                         Lint skips checks that apply\n                                                      only to public specs\n    --swift-version=VERSION                           The SWIFT_VERSION that should be\n                                                      used to lint the spec. This\n                                                      takes precedence over a\n                                                      .swift-version file.\n    --skip-import-validation                          Lint skips validating that the\n                                                      pod can be imported\n    --skip-tests                                      Lint skips building and running\n                                                      tests during validation\n    --silent                                          Show nothing\n    --verbose                                         Show more debugging information\n    --no-ansi                                         Show output without ANSI codes\n    --help                                            Show help banner of specified\n                                                      command\n```\n\n## 5. pod 修改工程配置\n\n```shell\npost_install do |installer_representation|\n\n    installer_representation.pods_project.targets.each do |target|\n        target.build_configurations.each do |config|\n            #去警告\n            config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'\n            #判断scheme\n            if config.name.include?(\"SchemeAppTest_Release\")\n                #添加scheme对应的预编译宏\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTRELEASE=3'\n            end\n            if config.name.include?(\"SchemeAppTest_Debug\")\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTDEBUG=2'\n                #指定scheme的调试模式可见变量\n                config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'\n                #某些情况由于编译器不支持无法debug（可选）\n                config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'\n            end\n          end\n    end    \nend\n  ```\n","slug":"学习笔记/iOS/iOS之开发工具/cocoapod 库","published":1,"date":"2021-04-06T13:37:55.717Z","updated":"2021-04-06T13:37:55.717Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tij002pw37uadjoe8wn","content":"<h1 id=\"cocoapod\"><a class=\"markdownIt-Anchor\" href=\"#cocoapod\"></a> cocoaPod</h1>\n<h2 id=\"一-pod-公开库\"><a class=\"markdownIt-Anchor\" href=\"#一-pod-公开库\"></a> 一、pod 公开库</h2>\n<h3 id=\"1-索引库\"><a class=\"markdownIt-Anchor\" href=\"#1-索引库\"></a> 1. 索引库</h3>\n<h4 id=\"11-添加索引库\"><a class=\"markdownIt-Anchor\" href=\"#11-添加索引库\"></a> 1.1 添加索引库</h4>\n<pre class=\"highlight\"><code class=\"shell\">pod repo add WTSpecs https://coding.net/wtlucky/WTSpecs.git\n</code></pre>\n<h4 id=\"12-删除索引库\"><a class=\"markdownIt-Anchor\" href=\"#12-删除索引库\"></a> 1.2 删除索引库</h4>\n<pre class=\"highlight\"><code class=\"shell\">pod repo remove WTSpecs\n</code></pre>\n<h4 id=\"2-pod库\"><a class=\"markdownIt-Anchor\" href=\"#2-pod库\"></a> 2. pod库</h4>\n<h5 id=\"21-创建pod库\"><a class=\"markdownIt-Anchor\" href=\"#21-创建pod库\"></a> 2.1 创建pod库</h5>\n<pre class=\"highlight\"><code class=\"shell\">pod lib create podTestLibrary\n</code></pre>\n<h5 id=\"22-添加到远程\"><a class=\"markdownIt-Anchor\" href=\"#22-添加到远程\"></a> 2.2 添加到远程</h5>\n<pre class=\"highlight\"><code class=\"shell\">git add .\ngit commit -s -m \"Initial Commit of Library\"\ngit remote add origin git@coding.net:wtlucky/podTestLibrary.git\ngit push origin master\n</code></pre>\n<h5 id=\"23-打tag\"><a class=\"markdownIt-Anchor\" href=\"#23-打tag\"></a> 2.3 打tag</h5>\n<pre class=\"highlight\"><code class=\"shell\">git tag -a 0.1.0 -m \"first release\"\ngit push --tags / git push origin tag 0.1.0\n</code></pre>\n<h5 id=\"24-修改podspec文件\"><a class=\"markdownIt-Anchor\" href=\"#24-修改podspec文件\"></a> 2.4 修改podspec文件</h5>\n<h5 id=\"25-检验pod库-podspec\"><a class=\"markdownIt-Anchor\" href=\"#25-检验pod库-podspec\"></a> 2.5 检验pod库、podspec</h5>\n<pre class=\"highlight\"><code class=\"shell\">pod lib lint\n</code></pre>\n<h5 id=\"26-提交pod库\"><a class=\"markdownIt-Anchor\" href=\"#26-提交pod库\"></a> 2.6 提交pod库</h5>\n<pre class=\"highlight\"><code class=\"shell\">pod repo push WTSpecs PodTestLibrary.podspec  #前面是本地Repo名字 后面是podspec名字\n</code></pre>\n<h5 id=\"27-检索pod库\"><a class=\"markdownIt-Anchor\" href=\"#27-检索pod库\"></a> 2.7 检索pod库</h5>\n<pre class=\"highlight\"><code class=\"shell\">pod search PodTestLibrary\n</code></pre>\n<h5 id=\"28-使用pod库\"><a class=\"markdownIt-Anchor\" href=\"#28-使用pod库\"></a> 2.8 使用pod库</h5>\n<pre class=\"highlight\"><code class=\"shel\">pod 'PodTestLibrary', '~&gt; 0.1.0'\n</code></pre>\n<h2 id=\"二-私有库\"><a class=\"markdownIt-Anchor\" href=\"#二-私有库\"></a> 二、私有库</h2>\n<h3 id=\"1-检验\"><a class=\"markdownIt-Anchor\" href=\"#1-检验\"></a> 1. 检验</h3>\n<pre class=\"highlight\"><code class=\"shell\">pod lib lint --allow-warnings --sources=&lt;https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git&gt;\n</code></pre>\n<h3 id=\"2-远程检验\"><a class=\"markdownIt-Anchor\" href=\"#2-远程检验\"></a> 2. 远程检验</h3>\n<pre class=\"highlight\"><code class=\"shell\">pod spec lint --allow-warnings --sources=&lt;https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git&gt;\n</code></pre>\n<h3 id=\"3-提交\"><a class=\"markdownIt-Anchor\" href=\"#3-提交\"></a> 3. 提交</h3>\n<pre class=\"highlight\"><code class=\"shell\">pod repo push sumian sm_ios_base.podspec --allow-warnings --sources='http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs'\n</code></pre>\n<h2 id=\"3-pod-命令\"><a class=\"markdownIt-Anchor\" href=\"#3-pod-命令\"></a> 3. pod 命令</h2>\n<pre class=\"highlight\"><code class=\"shell\">Usage:\n\n    $ pod COMMAND\n\n      CocoaPods, the Cocoa library package manager.\n\nCommands:\n\n    + cache         Manipulate the CocoaPods cache\n    + deintegrate   Deintegrate CocoaPods from your project\n    + env           Display pod environment\n    + init          Generate a Podfile for the current directory\n    + install       Install project dependencies according to versions from a\n                    Podfile.lock\n    + ipc           Inter-process communication\n    + lib           Develop pods\n    + list          List pods\n    + outdated      Show outdated project dependencies\n    + package       Package a podspec into a static library.\n    + plugins       Show available CocoaPods plugins\n    + repo          Manage spec-repositories\n    + search        Search for pods\n    + setup         Setup the CocoaPods environment\n    + spec          Manage pod specs\n    + trunk         Interact with the CocoaPods API (e.g. publishing new specs)\n    + try           Try a Pod!\n    + update        Update outdated project dependencies and create new Podfile.lock\n\nOptions:\n\n    --silent        Show nothing\n    --version       Show the version of the tool\n    --verbose       Show more debugging information\n    --no-ansi       Show output without ANSI codes\n    --help          Show help banner of specified command\n</code></pre>\n<h2 id=\"4-pod-lib-lint-命令\"><a class=\"markdownIt-Anchor\" href=\"#4-pod-lib-lint-命令\"></a> 4. pod lib lint 命令</h2>\n<pre class=\"highlight\"><code class=\"shell\">Usage:\n\n    $ pod lib lint\n\n      Validates the Pod using the files in the working directory.\n\nOptions:\n\n    --quick                                           Lint skips checks that would\n                                                      require to download and build\n                                                      the spec\n    --allow-warnings                                  Lint validates even if warnings\n                                                      are present\n    --subspec=NAME                                    Lint validates only the given\n                                                      subspec\n    --no-subspecs                                     Lint skips validation of\n                                                      subspecs\n    --no-clean                                        Lint leaves the build directory\n                                                      intact for inspection\n    --fail-fast                                       Lint stops on the first failing\n                                                      platform or subspec\n    --use-libraries                                   Lint uses static libraries to\n                                                      install the spec\n    --use-modular-headers                             Lint uses modular headers during\n                                                      installation\n    --sources=https://github.com/artsy/Specs,master   The sources from which to pull\n                                                      dependent pods (defaults to\n                                                      https://github.com/CocoaPods/Specs.git).\n                                                      Multiple sources must be\n                                                      comma-delimited.\n    --platforms=ios,macos                             Lint against specific\n                                                      platforms(defaults to all\n                                                      platforms supported by the\n                                                      podspec).Multiple platforms must\n                                                      be comma-delimited\n    --private                                         Lint skips checks that apply\n                                                      only to public specs\n    --swift-version=VERSION                           The SWIFT_VERSION that should be\n                                                      used to lint the spec. This\n                                                      takes precedence over a\n                                                      .swift-version file.\n    --skip-import-validation                          Lint skips validating that the\n                                                      pod can be imported\n    --skip-tests                                      Lint skips building and running\n                                                      tests during validation\n    --silent                                          Show nothing\n    --verbose                                         Show more debugging information\n    --no-ansi                                         Show output without ANSI codes\n    --help                                            Show help banner of specified\n                                                      command\n</code></pre>\n<h2 id=\"5-pod-修改工程配置\"><a class=\"markdownIt-Anchor\" href=\"#5-pod-修改工程配置\"></a> 5. pod 修改工程配置</h2>\n<pre class=\"highlight\"><code class=\"shell\">post_install do |installer_representation|\n\n    installer_representation.pods_project.targets.each do |target|\n        target.build_configurations.each do |config|\n            #去警告\n            config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'\n            #判断scheme\n            if config.name.include?(\"SchemeAppTest_Release\")\n                #添加scheme对应的预编译宏\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] &lt;&lt; 'SCHEMEAPPTESTRELEASE=3'\n            end\n            if config.name.include?(\"SchemeAppTest_Debug\")\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] &lt;&lt; 'SCHEMEAPPTESTDEBUG=2'\n                #指定scheme的调试模式可见变量\n                config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'\n                #某些情况由于编译器不支持无法debug（可选）\n                config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'\n            end\n          end\n    end    \nend\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"cocoapod\"><a class=\"markdownIt-Anchor\" href=\"#cocoapod\"></a> cocoaPod</h1>\n<h2 id=\"一-pod-公开库\"><a class=\"markdownIt-Anchor\" href=\"#一-pod-公开库\"></a> 一、pod 公开库</h2>\n<h3 id=\"1-索引库\"><a class=\"markdownIt-Anchor\" href=\"#1-索引库\"></a> 1. 索引库</h3>\n<h4 id=\"11-添加索引库\"><a class=\"markdownIt-Anchor\" href=\"#11-添加索引库\"></a> 1.1 添加索引库</h4>\n<pre class=\"highlight\"><code class=\"shell\">pod repo add WTSpecs https://coding.net/wtlucky/WTSpecs.git\n</code></pre>\n<h4 id=\"12-删除索引库\"><a class=\"markdownIt-Anchor\" href=\"#12-删除索引库\"></a> 1.2 删除索引库</h4>\n<pre class=\"highlight\"><code class=\"shell\">pod repo remove WTSpecs\n</code></pre>\n<h4 id=\"2-pod库\"><a class=\"markdownIt-Anchor\" href=\"#2-pod库\"></a> 2. pod库</h4>\n<h5 id=\"21-创建pod库\"><a class=\"markdownIt-Anchor\" href=\"#21-创建pod库\"></a> 2.1 创建pod库</h5>\n<pre class=\"highlight\"><code class=\"shell\">pod lib create podTestLibrary\n</code></pre>\n<h5 id=\"22-添加到远程\"><a class=\"markdownIt-Anchor\" href=\"#22-添加到远程\"></a> 2.2 添加到远程</h5>\n<pre class=\"highlight\"><code class=\"shell\">git add .\ngit commit -s -m \"Initial Commit of Library\"\ngit remote add origin git@coding.net:wtlucky/podTestLibrary.git\ngit push origin master\n</code></pre>\n<h5 id=\"23-打tag\"><a class=\"markdownIt-Anchor\" href=\"#23-打tag\"></a> 2.3 打tag</h5>\n<pre class=\"highlight\"><code class=\"shell\">git tag -a 0.1.0 -m \"first release\"\ngit push --tags / git push origin tag 0.1.0\n</code></pre>\n<h5 id=\"24-修改podspec文件\"><a class=\"markdownIt-Anchor\" href=\"#24-修改podspec文件\"></a> 2.4 修改podspec文件</h5>\n<h5 id=\"25-检验pod库-podspec\"><a class=\"markdownIt-Anchor\" href=\"#25-检验pod库-podspec\"></a> 2.5 检验pod库、podspec</h5>\n<pre class=\"highlight\"><code class=\"shell\">pod lib lint\n</code></pre>\n<h5 id=\"26-提交pod库\"><a class=\"markdownIt-Anchor\" href=\"#26-提交pod库\"></a> 2.6 提交pod库</h5>\n<pre class=\"highlight\"><code class=\"shell\">pod repo push WTSpecs PodTestLibrary.podspec  #前面是本地Repo名字 后面是podspec名字\n</code></pre>\n<h5 id=\"27-检索pod库\"><a class=\"markdownIt-Anchor\" href=\"#27-检索pod库\"></a> 2.7 检索pod库</h5>\n<pre class=\"highlight\"><code class=\"shell\">pod search PodTestLibrary\n</code></pre>\n<h5 id=\"28-使用pod库\"><a class=\"markdownIt-Anchor\" href=\"#28-使用pod库\"></a> 2.8 使用pod库</h5>\n<pre class=\"highlight\"><code class=\"shel\">pod 'PodTestLibrary', '~&gt; 0.1.0'\n</code></pre>\n<h2 id=\"二-私有库\"><a class=\"markdownIt-Anchor\" href=\"#二-私有库\"></a> 二、私有库</h2>\n<h3 id=\"1-检验\"><a class=\"markdownIt-Anchor\" href=\"#1-检验\"></a> 1. 检验</h3>\n<pre class=\"highlight\"><code class=\"shell\">pod lib lint --allow-warnings --sources=&lt;https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git&gt;\n</code></pre>\n<h3 id=\"2-远程检验\"><a class=\"markdownIt-Anchor\" href=\"#2-远程检验\"></a> 2. 远程检验</h3>\n<pre class=\"highlight\"><code class=\"shell\">pod spec lint --allow-warnings --sources=&lt;https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git&gt;\n</code></pre>\n<h3 id=\"3-提交\"><a class=\"markdownIt-Anchor\" href=\"#3-提交\"></a> 3. 提交</h3>\n<pre class=\"highlight\"><code class=\"shell\">pod repo push sumian sm_ios_base.podspec --allow-warnings --sources='http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs'\n</code></pre>\n<h2 id=\"3-pod-命令\"><a class=\"markdownIt-Anchor\" href=\"#3-pod-命令\"></a> 3. pod 命令</h2>\n<pre class=\"highlight\"><code class=\"shell\">Usage:\n\n    $ pod COMMAND\n\n      CocoaPods, the Cocoa library package manager.\n\nCommands:\n\n    + cache         Manipulate the CocoaPods cache\n    + deintegrate   Deintegrate CocoaPods from your project\n    + env           Display pod environment\n    + init          Generate a Podfile for the current directory\n    + install       Install project dependencies according to versions from a\n                    Podfile.lock\n    + ipc           Inter-process communication\n    + lib           Develop pods\n    + list          List pods\n    + outdated      Show outdated project dependencies\n    + package       Package a podspec into a static library.\n    + plugins       Show available CocoaPods plugins\n    + repo          Manage spec-repositories\n    + search        Search for pods\n    + setup         Setup the CocoaPods environment\n    + spec          Manage pod specs\n    + trunk         Interact with the CocoaPods API (e.g. publishing new specs)\n    + try           Try a Pod!\n    + update        Update outdated project dependencies and create new Podfile.lock\n\nOptions:\n\n    --silent        Show nothing\n    --version       Show the version of the tool\n    --verbose       Show more debugging information\n    --no-ansi       Show output without ANSI codes\n    --help          Show help banner of specified command\n</code></pre>\n<h2 id=\"4-pod-lib-lint-命令\"><a class=\"markdownIt-Anchor\" href=\"#4-pod-lib-lint-命令\"></a> 4. pod lib lint 命令</h2>\n<pre class=\"highlight\"><code class=\"shell\">Usage:\n\n    $ pod lib lint\n\n      Validates the Pod using the files in the working directory.\n\nOptions:\n\n    --quick                                           Lint skips checks that would\n                                                      require to download and build\n                                                      the spec\n    --allow-warnings                                  Lint validates even if warnings\n                                                      are present\n    --subspec=NAME                                    Lint validates only the given\n                                                      subspec\n    --no-subspecs                                     Lint skips validation of\n                                                      subspecs\n    --no-clean                                        Lint leaves the build directory\n                                                      intact for inspection\n    --fail-fast                                       Lint stops on the first failing\n                                                      platform or subspec\n    --use-libraries                                   Lint uses static libraries to\n                                                      install the spec\n    --use-modular-headers                             Lint uses modular headers during\n                                                      installation\n    --sources=https://github.com/artsy/Specs,master   The sources from which to pull\n                                                      dependent pods (defaults to\n                                                      https://github.com/CocoaPods/Specs.git).\n                                                      Multiple sources must be\n                                                      comma-delimited.\n    --platforms=ios,macos                             Lint against specific\n                                                      platforms(defaults to all\n                                                      platforms supported by the\n                                                      podspec).Multiple platforms must\n                                                      be comma-delimited\n    --private                                         Lint skips checks that apply\n                                                      only to public specs\n    --swift-version=VERSION                           The SWIFT_VERSION that should be\n                                                      used to lint the spec. This\n                                                      takes precedence over a\n                                                      .swift-version file.\n    --skip-import-validation                          Lint skips validating that the\n                                                      pod can be imported\n    --skip-tests                                      Lint skips building and running\n                                                      tests during validation\n    --silent                                          Show nothing\n    --verbose                                         Show more debugging information\n    --no-ansi                                         Show output without ANSI codes\n    --help                                            Show help banner of specified\n                                                      command\n</code></pre>\n<h2 id=\"5-pod-修改工程配置\"><a class=\"markdownIt-Anchor\" href=\"#5-pod-修改工程配置\"></a> 5. pod 修改工程配置</h2>\n<pre class=\"highlight\"><code class=\"shell\">post_install do |installer_representation|\n\n    installer_representation.pods_project.targets.each do |target|\n        target.build_configurations.each do |config|\n            #去警告\n            config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'\n            #判断scheme\n            if config.name.include?(\"SchemeAppTest_Release\")\n                #添加scheme对应的预编译宏\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] &lt;&lt; 'SCHEMEAPPTESTRELEASE=3'\n            end\n            if config.name.include?(\"SchemeAppTest_Debug\")\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] &lt;&lt; 'SCHEMEAPPTESTDEBUG=2'\n                #指定scheme的调试模式可见变量\n                config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'\n                #某些情况由于编译器不支持无法debug（可选）\n                config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'\n            end\n          end\n    end    \nend\n</code></pre>\n"},{"_content":"# [cocoapod 官网](https://guides.cocoapods.org/)\n\n## 1. cocoapod 之私有化仓库\n\n1. [iOS 私有化 pod](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)\n\n2. [Swift创建CocoaPod【转】](https://my.oschina.net/are1OfBlog/blog/488939)\n\n3. [Swift创建CocoaPod](https://www.raywenderlich.com/5823-how-to-create-a-cocoapod-in-swift)\n\n4. [Swift 如何建立自己的 CocoaPod 库](https://www.jianshu.com/p/777b0755480c)\n\n5. [模块化之路（cocoapod VS framework）](https://www.jianshu.com/p/9d49216682f4)\n\n## 2. cocoapod 开源仓库\n","source":"_posts/学习笔记/iOS/iOS之开发工具/cocoapod.md","raw":"# [cocoapod 官网](https://guides.cocoapods.org/)\n\n## 1. cocoapod 之私有化仓库\n\n1. [iOS 私有化 pod](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)\n\n2. [Swift创建CocoaPod【转】](https://my.oschina.net/are1OfBlog/blog/488939)\n\n3. [Swift创建CocoaPod](https://www.raywenderlich.com/5823-how-to-create-a-cocoapod-in-swift)\n\n4. [Swift 如何建立自己的 CocoaPod 库](https://www.jianshu.com/p/777b0755480c)\n\n5. [模块化之路（cocoapod VS framework）](https://www.jianshu.com/p/9d49216682f4)\n\n## 2. cocoapod 开源仓库\n","slug":"学习笔记/iOS/iOS之开发工具/cocoapod","published":1,"date":"2021-04-08T00:31:46.339Z","updated":"2021-04-08T00:31:46.339Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tit002qw37uea5g8bfa","content":"<h1 id=\"cocoapod-官网\"><a class=\"markdownIt-Anchor\" href=\"#cocoapod-官网\"></a> <a href=\"https://guides.cocoapods.org/\">cocoapod 官网</a></h1>\n<h2 id=\"1-cocoapod-之私有化仓库\"><a class=\"markdownIt-Anchor\" href=\"#1-cocoapod-之私有化仓库\"></a> 1. cocoapod 之私有化仓库</h2>\n<ol>\n<li>\n<p><a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\">iOS 私有化 pod</a></p>\n</li>\n<li>\n<p><a href=\"https://my.oschina.net/are1OfBlog/blog/488939\">Swift创建CocoaPod【转】</a></p>\n</li>\n<li>\n<p><a href=\"https://www.raywenderlich.com/5823-how-to-create-a-cocoapod-in-swift\">Swift创建CocoaPod</a></p>\n</li>\n<li>\n<p><a href=\"https://www.jianshu.com/p/777b0755480c\">Swift 如何建立自己的 CocoaPod 库</a></p>\n</li>\n<li>\n<p><a href=\"https://www.jianshu.com/p/9d49216682f4\">模块化之路（cocoapod VS framework）</a></p>\n</li>\n</ol>\n<h2 id=\"2-cocoapod-开源仓库\"><a class=\"markdownIt-Anchor\" href=\"#2-cocoapod-开源仓库\"></a> 2. cocoapod 开源仓库</h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"cocoapod-官网\"><a class=\"markdownIt-Anchor\" href=\"#cocoapod-官网\"></a> <a href=\"https://guides.cocoapods.org/\">cocoapod 官网</a></h1>\n<h2 id=\"1-cocoapod-之私有化仓库\"><a class=\"markdownIt-Anchor\" href=\"#1-cocoapod-之私有化仓库\"></a> 1. cocoapod 之私有化仓库</h2>\n<ol>\n<li>\n<p><a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\">iOS 私有化 pod</a></p>\n</li>\n<li>\n<p><a href=\"https://my.oschina.net/are1OfBlog/blog/488939\">Swift创建CocoaPod【转】</a></p>\n</li>\n<li>\n<p><a href=\"https://www.raywenderlich.com/5823-how-to-create-a-cocoapod-in-swift\">Swift创建CocoaPod</a></p>\n</li>\n<li>\n<p><a href=\"https://www.jianshu.com/p/777b0755480c\">Swift 如何建立自己的 CocoaPod 库</a></p>\n</li>\n<li>\n<p><a href=\"https://www.jianshu.com/p/9d49216682f4\">模块化之路（cocoapod VS framework）</a></p>\n</li>\n</ol>\n<h2 id=\"2-cocoapod-开源仓库\"><a class=\"markdownIt-Anchor\" href=\"#2-cocoapod-开源仓库\"></a> 2. cocoapod 开源仓库</h2>\n"},{"_content":"# 1、开发工具\n\n* 抓包工具：Charles\n* 快捷键工具：cheatsheet\n* 流程图工具：OmniGraffle\n* IPA安装工具：iTools\n* Applescript 编辑器：ScriptDebug\n* 翻墙工具：Lantern\n* 命令行工具：Terminal（平时要多用）\n* MarkDown编辑器：MacDown (免费的)\n* 代码编辑器：Sublime（收费）、Atom（开源免费）\n","source":"_posts/学习笔记/iOS/iOS之开发工具/iOS之开发工具.md","raw":"# 1、开发工具\n\n* 抓包工具：Charles\n* 快捷键工具：cheatsheet\n* 流程图工具：OmniGraffle\n* IPA安装工具：iTools\n* Applescript 编辑器：ScriptDebug\n* 翻墙工具：Lantern\n* 命令行工具：Terminal（平时要多用）\n* MarkDown编辑器：MacDown (免费的)\n* 代码编辑器：Sublime（收费）、Atom（开源免费）\n","slug":"学习笔记/iOS/iOS之开发工具/iOS之开发工具","published":1,"date":"2021-02-24T12:31:09.186Z","updated":"2021-02-24T12:31:09.186Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tiu002rw37u2i0zhsje","content":"<h1 id=\"1-开发工具\"><a class=\"markdownIt-Anchor\" href=\"#1-开发工具\"></a> 1、开发工具</h1>\n<ul>\n<li>抓包工具：Charles</li>\n<li>快捷键工具：cheatsheet</li>\n<li>流程图工具：OmniGraffle</li>\n<li>IPA安装工具：iTools</li>\n<li>Applescript 编辑器：ScriptDebug</li>\n<li>翻墙工具：Lantern</li>\n<li>命令行工具：Terminal（平时要多用）</li>\n<li>MarkDown编辑器：MacDown (免费的)</li>\n<li>代码编辑器：Sublime（收费）、Atom（开源免费）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-开发工具\"><a class=\"markdownIt-Anchor\" href=\"#1-开发工具\"></a> 1、开发工具</h1>\n<ul>\n<li>抓包工具：Charles</li>\n<li>快捷键工具：cheatsheet</li>\n<li>流程图工具：OmniGraffle</li>\n<li>IPA安装工具：iTools</li>\n<li>Applescript 编辑器：ScriptDebug</li>\n<li>翻墙工具：Lantern</li>\n<li>命令行工具：Terminal（平时要多用）</li>\n<li>MarkDown编辑器：MacDown (免费的)</li>\n<li>代码编辑器：Sublime（收费）、Atom（开源免费）</li>\n</ul>\n"},{"_content":"# iOS逆向工程\n\n## 1. IPA 包\n\n### 1.1 [获取IPA包](~Library/Group\\ Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/)\n\n### 1.2 [Mac-o](http://www.cocoachina.com/mac/20150122/10988.html)\n\n### 1.3 [MachOView](https://sourceforge.net/projects/machoview/files/?source)\n\n### 1.4  [iOS注入动态库](https://www.jianshu.com/p/6c45da26040d)\n\n### 1.5 [Mac install IPA](https://www.jianshu.com/p/8568a8897489)\n\n#### 1.5.1 解决方案\n\n```shell\nbrew uninstall --ignore-dependencies \nlibimobiledevice\nbrew uninstall --ignore-dependencies usbmuxd\nbrew install --HEAD usbmuxd\nbrew unlink usbmux\ndbrew link usbmuxd\nbrew install --HEAD libimobiledevice\n```\n\n#### 1.5.2 [libimobiledevice 源码](https://github.com/libimobiledevice)\n\n### 1.6 工具集\n\n```markdown\nidevice\natos\notool\nsigh\nmokeyDev、OpenDev\nTheOS\nrvictl\nwireshark\ncharles\n```\n\n### 1.7 逆向工程师\n\n#### 1.7.1 要求\n\n```txt\n“硬件构成、iOS系统的运行原理，还要具备丰富的iOS开发经验。”\n```\n\n#### 1.7.2 逆向作用\n\n```txt\n恶意软件\n去除限制\n评定安全等级\n检查后门\n逆向iOS SDK？\n借鉴\n  WireLurker\n```\n\n#### 1.7.3 病毒\n\n```txt\nIkee -> iOS：alpine\nWireLurker\n```\n\n#### 1.7.4 团队\n\n```txt\n“evad3rs、盘古、太极”\n```\n\n#### 1.7.5 iOS 逆向工具\n\n```txt\n 1、监测工具\n    Reveal\n    snoop-it\n    introspy\n\n  2、反汇编工具（disassembler）\n    IDA\n    Hopper\n    Cydia:\n      xsellize\n      iFile（MAcOS: AFC2、iFunBox）\n      SMSNinja\n\n  3、调试工具（debugger）\n    LLDB\n    LLVM\n\n  4、以及开发工具\n    iOSOpenDev（Xcode）\n    TheOS（command line）\n```\n\n#### 1.7.6 获取 APP bundleID\n\n```shell\nsudo plutil -p smartpark.app/Info.plist | grep CFBundleIdentifier\n\"CFBundleIdentifier\" => \"com.jieshun.hatc\"\n```\n\n#### 1.7.7 逆向工程师招聘信息示例\n\n示例一：\n\n```txt\niOS高级安全工程师/专家\n岗位要求\n1.熟悉IDA Pro、GDB、JEB、lldb等常用逆向分析工具，具备较强的逆向分析能力，熟悉ARM、x86/64等指令集；\n2.熟练掌握应用逆向的静态分析、动态调试、代码跟踪等；\n3.负责对接业务安全需求与工具研发；\n4.熟悉C/C++、Objective-C、python语言之中一个或多个；熟悉各种通用加密算法；\n5.良好的逻辑思维能力和团队合作精神，善于交流和表达；\n\n加分项：\n1.有一定的iOS越狱开发经验；\n2.有安全编程相关经验, 熟悉业务安全技术对抗的常见技术手段；\n3.多平台逆向经验(iOS/Android/Windows)\n4.了解业务安全黑灰产；\n\n工作地点：北京/杭州\n简历请投: lanjun007@alibaba-inc.com (简历快到碗里来吧)\n\n公司信息\n上海某广告公司\n\n联系方式\n电话:13818882062\n```\n\n示例二：\n\n```txt\n职位名称\niOS逆向工程师\n\n职位职责\n网络协议层逆向兼顾iOS远程控制开发\n\n职位要求\n0.2-3年iOS开发经验\n1.静态分析 IDA pro、Hopper Disassembler\n2.动态分析 lldb、cycript、frida\n3.网络分析 Charles(https)、Wireshark(socket)\n4.视图分析 Reveal、Flex\n5.编译工具 clang、cmake、theos、\n6.注入工具 cynject、yololib、insert_dylib、optool、install_name_tool\n7.砸壳工具 clutch、dumpdecrypted、dumpexec\n8.Hook工具 MobileSubstrate、fishhook、HookZz、substitute、libcapstone\n9.基础技能 签名、脱壳、class-dump、常用的命令行工具例如ssh、ps等\n10.熟悉SpringBoard以及它依赖的framework加分\na.熟悉VideoToolBox编解码加分\nb.熟悉Unity3D和cocos2D逆向或者正向开发加分\nc.熟悉AppStore以及它交互的几个进程加分\nd.自我驱动力强，态度比能力更重要\ne.邮箱地址 请调试该app <https://www.pgyer.com/crackme_> 15\nPS:0和d是硬性要求，不过要是0-1年时间技能到达了2-3年的也ok，还会加分。1-9项中的工具，单独掌握一种即可，自己研发的加分。a-c的经验多多益善\n\n工作地点: 上海徐汇\n简历请投: 参考e项\n```\n","source":"_posts/学习笔记/iOS/iOS之开发工具/iOS之逆向.md","raw":"# iOS逆向工程\n\n## 1. IPA 包\n\n### 1.1 [获取IPA包](~Library/Group\\ Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/)\n\n### 1.2 [Mac-o](http://www.cocoachina.com/mac/20150122/10988.html)\n\n### 1.3 [MachOView](https://sourceforge.net/projects/machoview/files/?source)\n\n### 1.4  [iOS注入动态库](https://www.jianshu.com/p/6c45da26040d)\n\n### 1.5 [Mac install IPA](https://www.jianshu.com/p/8568a8897489)\n\n#### 1.5.1 解决方案\n\n```shell\nbrew uninstall --ignore-dependencies \nlibimobiledevice\nbrew uninstall --ignore-dependencies usbmuxd\nbrew install --HEAD usbmuxd\nbrew unlink usbmux\ndbrew link usbmuxd\nbrew install --HEAD libimobiledevice\n```\n\n#### 1.5.2 [libimobiledevice 源码](https://github.com/libimobiledevice)\n\n### 1.6 工具集\n\n```markdown\nidevice\natos\notool\nsigh\nmokeyDev、OpenDev\nTheOS\nrvictl\nwireshark\ncharles\n```\n\n### 1.7 逆向工程师\n\n#### 1.7.1 要求\n\n```txt\n“硬件构成、iOS系统的运行原理，还要具备丰富的iOS开发经验。”\n```\n\n#### 1.7.2 逆向作用\n\n```txt\n恶意软件\n去除限制\n评定安全等级\n检查后门\n逆向iOS SDK？\n借鉴\n  WireLurker\n```\n\n#### 1.7.3 病毒\n\n```txt\nIkee -> iOS：alpine\nWireLurker\n```\n\n#### 1.7.4 团队\n\n```txt\n“evad3rs、盘古、太极”\n```\n\n#### 1.7.5 iOS 逆向工具\n\n```txt\n 1、监测工具\n    Reveal\n    snoop-it\n    introspy\n\n  2、反汇编工具（disassembler）\n    IDA\n    Hopper\n    Cydia:\n      xsellize\n      iFile（MAcOS: AFC2、iFunBox）\n      SMSNinja\n\n  3、调试工具（debugger）\n    LLDB\n    LLVM\n\n  4、以及开发工具\n    iOSOpenDev（Xcode）\n    TheOS（command line）\n```\n\n#### 1.7.6 获取 APP bundleID\n\n```shell\nsudo plutil -p smartpark.app/Info.plist | grep CFBundleIdentifier\n\"CFBundleIdentifier\" => \"com.jieshun.hatc\"\n```\n\n#### 1.7.7 逆向工程师招聘信息示例\n\n示例一：\n\n```txt\niOS高级安全工程师/专家\n岗位要求\n1.熟悉IDA Pro、GDB、JEB、lldb等常用逆向分析工具，具备较强的逆向分析能力，熟悉ARM、x86/64等指令集；\n2.熟练掌握应用逆向的静态分析、动态调试、代码跟踪等；\n3.负责对接业务安全需求与工具研发；\n4.熟悉C/C++、Objective-C、python语言之中一个或多个；熟悉各种通用加密算法；\n5.良好的逻辑思维能力和团队合作精神，善于交流和表达；\n\n加分项：\n1.有一定的iOS越狱开发经验；\n2.有安全编程相关经验, 熟悉业务安全技术对抗的常见技术手段；\n3.多平台逆向经验(iOS/Android/Windows)\n4.了解业务安全黑灰产；\n\n工作地点：北京/杭州\n简历请投: lanjun007@alibaba-inc.com (简历快到碗里来吧)\n\n公司信息\n上海某广告公司\n\n联系方式\n电话:13818882062\n```\n\n示例二：\n\n```txt\n职位名称\niOS逆向工程师\n\n职位职责\n网络协议层逆向兼顾iOS远程控制开发\n\n职位要求\n0.2-3年iOS开发经验\n1.静态分析 IDA pro、Hopper Disassembler\n2.动态分析 lldb、cycript、frida\n3.网络分析 Charles(https)、Wireshark(socket)\n4.视图分析 Reveal、Flex\n5.编译工具 clang、cmake、theos、\n6.注入工具 cynject、yololib、insert_dylib、optool、install_name_tool\n7.砸壳工具 clutch、dumpdecrypted、dumpexec\n8.Hook工具 MobileSubstrate、fishhook、HookZz、substitute、libcapstone\n9.基础技能 签名、脱壳、class-dump、常用的命令行工具例如ssh、ps等\n10.熟悉SpringBoard以及它依赖的framework加分\na.熟悉VideoToolBox编解码加分\nb.熟悉Unity3D和cocos2D逆向或者正向开发加分\nc.熟悉AppStore以及它交互的几个进程加分\nd.自我驱动力强，态度比能力更重要\ne.邮箱地址 请调试该app <https://www.pgyer.com/crackme_> 15\nPS:0和d是硬性要求，不过要是0-1年时间技能到达了2-3年的也ok，还会加分。1-9项中的工具，单独掌握一种即可，自己研发的加分。a-c的经验多多益善\n\n工作地点: 上海徐汇\n简历请投: 参考e项\n```\n","slug":"学习笔记/iOS/iOS之开发工具/iOS之逆向","published":1,"date":"2021-04-06T13:37:55.717Z","updated":"2021-04-09T13:30:01.622Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tiv002sw37uhwur3ra7","content":"<h1 id=\"ios逆向工程\"><a class=\"markdownIt-Anchor\" href=\"#ios逆向工程\"></a> iOS逆向工程</h1>\n<h2 id=\"1-ipa-包\"><a class=\"markdownIt-Anchor\" href=\"#1-ipa-包\"></a> 1. IPA 包</h2>\n<h3 id=\"11-获取ipa包\"><a class=\"markdownIt-Anchor\" href=\"#11-获取ipa包\"></a> 1.1 <a href=\"~Library/Group%5C%20Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/\">获取IPA包</a></h3>\n<h3 id=\"12-mac-o\"><a class=\"markdownIt-Anchor\" href=\"#12-mac-o\"></a> 1.2 <a href=\"http://www.cocoachina.com/mac/20150122/10988.html\">Mac-o</a></h3>\n<h3 id=\"13-machoview\"><a class=\"markdownIt-Anchor\" href=\"#13-machoview\"></a> 1.3 <a href=\"https://sourceforge.net/projects/machoview/files/?source\">MachOView</a></h3>\n<h3 id=\"14-ios注入动态库\"><a class=\"markdownIt-Anchor\" href=\"#14-ios注入动态库\"></a> 1.4  <a href=\"https://www.jianshu.com/p/6c45da26040d\">iOS注入动态库</a></h3>\n<h3 id=\"15-mac-install-ipa\"><a class=\"markdownIt-Anchor\" href=\"#15-mac-install-ipa\"></a> 1.5 <a href=\"https://www.jianshu.com/p/8568a8897489\">Mac install IPA</a></h3>\n<h4 id=\"151-解决方案\"><a class=\"markdownIt-Anchor\" href=\"#151-解决方案\"></a> 1.5.1 解决方案</h4>\n<pre class=\"highlight\"><code class=\"shell\">brew uninstall --ignore-dependencies \nlibimobiledevice\nbrew uninstall --ignore-dependencies usbmuxd\nbrew install --HEAD usbmuxd\nbrew unlink usbmux\ndbrew link usbmuxd\nbrew install --HEAD libimobiledevice\n</code></pre>\n<h4 id=\"152-libimobiledevice-源码\"><a class=\"markdownIt-Anchor\" href=\"#152-libimobiledevice-源码\"></a> 1.5.2 <a href=\"https://github.com/libimobiledevice\">libimobiledevice 源码</a></h4>\n<h3 id=\"16-工具集\"><a class=\"markdownIt-Anchor\" href=\"#16-工具集\"></a> 1.6 工具集</h3>\n<pre class=\"highlight\"><code class=\"markdown\">idevice\natos\notool\nsigh\nmokeyDev、OpenDev\nTheOS\nrvictl\nwireshark\ncharles\n</code></pre>\n<h3 id=\"17-逆向工程师\"><a class=\"markdownIt-Anchor\" href=\"#17-逆向工程师\"></a> 1.7 逆向工程师</h3>\n<h4 id=\"171-要求\"><a class=\"markdownIt-Anchor\" href=\"#171-要求\"></a> 1.7.1 要求</h4>\n<pre class=\"highlight\"><code class=\"txt\">“硬件构成、iOS系统的运行原理，还要具备丰富的iOS开发经验。”\n</code></pre>\n<h4 id=\"172-逆向作用\"><a class=\"markdownIt-Anchor\" href=\"#172-逆向作用\"></a> 1.7.2 逆向作用</h4>\n<pre class=\"highlight\"><code class=\"txt\">恶意软件\n去除限制\n评定安全等级\n检查后门\n逆向iOS SDK？\n借鉴\n  WireLurker\n</code></pre>\n<h4 id=\"173-病毒\"><a class=\"markdownIt-Anchor\" href=\"#173-病毒\"></a> 1.7.3 病毒</h4>\n<pre class=\"highlight\"><code class=\"txt\">Ikee -&gt; iOS：alpine\nWireLurker\n</code></pre>\n<h4 id=\"174-团队\"><a class=\"markdownIt-Anchor\" href=\"#174-团队\"></a> 1.7.4 团队</h4>\n<pre class=\"highlight\"><code class=\"txt\">“evad3rs、盘古、太极”\n</code></pre>\n<h4 id=\"175-ios-逆向工具\"><a class=\"markdownIt-Anchor\" href=\"#175-ios-逆向工具\"></a> 1.7.5 iOS 逆向工具</h4>\n<pre class=\"highlight\"><code class=\"txt\"> 1、监测工具\n    Reveal\n    snoop-it\n    introspy\n\n  2、反汇编工具（disassembler）\n    IDA\n    Hopper\n    Cydia:\n      xsellize\n      iFile（MAcOS: AFC2、iFunBox）\n      SMSNinja\n\n  3、调试工具（debugger）\n    LLDB\n    LLVM\n\n  4、以及开发工具\n    iOSOpenDev（Xcode）\n    TheOS（command line）\n</code></pre>\n<h4 id=\"176-获取-app-bundleid\"><a class=\"markdownIt-Anchor\" href=\"#176-获取-app-bundleid\"></a> 1.7.6 获取 APP bundleID</h4>\n<pre class=\"highlight\"><code class=\"shell\">sudo plutil -p smartpark.app/Info.plist | grep CFBundleIdentifier\n\"CFBundleIdentifier\" =&gt; \"com.jieshun.hatc\"\n</code></pre>\n<h4 id=\"177-逆向工程师招聘信息示例\"><a class=\"markdownIt-Anchor\" href=\"#177-逆向工程师招聘信息示例\"></a> 1.7.7 逆向工程师招聘信息示例</h4>\n<p>示例一：</p>\n<pre class=\"highlight\"><code class=\"txt\">iOS高级安全工程师/专家\n岗位要求\n1.熟悉IDA Pro、GDB、JEB、lldb等常用逆向分析工具，具备较强的逆向分析能力，熟悉ARM、x86/64等指令集；\n2.熟练掌握应用逆向的静态分析、动态调试、代码跟踪等；\n3.负责对接业务安全需求与工具研发；\n4.熟悉C/C++、Objective-C、python语言之中一个或多个；熟悉各种通用加密算法；\n5.良好的逻辑思维能力和团队合作精神，善于交流和表达；\n\n加分项：\n1.有一定的iOS越狱开发经验；\n2.有安全编程相关经验, 熟悉业务安全技术对抗的常见技术手段；\n3.多平台逆向经验(iOS/Android/Windows)\n4.了解业务安全黑灰产；\n\n工作地点：北京/杭州\n简历请投: lanjun007@alibaba-inc.com (简历快到碗里来吧)\n\n公司信息\n上海某广告公司\n\n联系方式\n电话:13818882062\n</code></pre>\n<p>示例二：</p>\n<pre class=\"highlight\"><code class=\"txt\">职位名称\niOS逆向工程师\n\n职位职责\n网络协议层逆向兼顾iOS远程控制开发\n\n职位要求\n0.2-3年iOS开发经验\n1.静态分析 IDA pro、Hopper Disassembler\n2.动态分析 lldb、cycript、frida\n3.网络分析 Charles(https)、Wireshark(socket)\n4.视图分析 Reveal、Flex\n5.编译工具 clang、cmake、theos、\n6.注入工具 cynject、yololib、insert_dylib、optool、install_name_tool\n7.砸壳工具 clutch、dumpdecrypted、dumpexec\n8.Hook工具 MobileSubstrate、fishhook、HookZz、substitute、libcapstone\n9.基础技能 签名、脱壳、class-dump、常用的命令行工具例如ssh、ps等\n10.熟悉SpringBoard以及它依赖的framework加分\na.熟悉VideoToolBox编解码加分\nb.熟悉Unity3D和cocos2D逆向或者正向开发加分\nc.熟悉AppStore以及它交互的几个进程加分\nd.自我驱动力强，态度比能力更重要\ne.邮箱地址 请调试该app &lt;https://www.pgyer.com/crackme_&gt; 15\nPS:0和d是硬性要求，不过要是0-1年时间技能到达了2-3年的也ok，还会加分。1-9项中的工具，单独掌握一种即可，自己研发的加分。a-c的经验多多益善\n\n工作地点: 上海徐汇\n简历请投: 参考e项\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios逆向工程\"><a class=\"markdownIt-Anchor\" href=\"#ios逆向工程\"></a> iOS逆向工程</h1>\n<h2 id=\"1-ipa-包\"><a class=\"markdownIt-Anchor\" href=\"#1-ipa-包\"></a> 1. IPA 包</h2>\n<h3 id=\"11-获取ipa包\"><a class=\"markdownIt-Anchor\" href=\"#11-获取ipa包\"></a> 1.1 <a href=\"~Library/Group%5C%20Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/\">获取IPA包</a></h3>\n<h3 id=\"12-mac-o\"><a class=\"markdownIt-Anchor\" href=\"#12-mac-o\"></a> 1.2 <a href=\"http://www.cocoachina.com/mac/20150122/10988.html\">Mac-o</a></h3>\n<h3 id=\"13-machoview\"><a class=\"markdownIt-Anchor\" href=\"#13-machoview\"></a> 1.3 <a href=\"https://sourceforge.net/projects/machoview/files/?source\">MachOView</a></h3>\n<h3 id=\"14-ios注入动态库\"><a class=\"markdownIt-Anchor\" href=\"#14-ios注入动态库\"></a> 1.4  <a href=\"https://www.jianshu.com/p/6c45da26040d\">iOS注入动态库</a></h3>\n<h3 id=\"15-mac-install-ipa\"><a class=\"markdownIt-Anchor\" href=\"#15-mac-install-ipa\"></a> 1.5 <a href=\"https://www.jianshu.com/p/8568a8897489\">Mac install IPA</a></h3>\n<h4 id=\"151-解决方案\"><a class=\"markdownIt-Anchor\" href=\"#151-解决方案\"></a> 1.5.1 解决方案</h4>\n<pre class=\"highlight\"><code class=\"shell\">brew uninstall --ignore-dependencies \nlibimobiledevice\nbrew uninstall --ignore-dependencies usbmuxd\nbrew install --HEAD usbmuxd\nbrew unlink usbmux\ndbrew link usbmuxd\nbrew install --HEAD libimobiledevice\n</code></pre>\n<h4 id=\"152-libimobiledevice-源码\"><a class=\"markdownIt-Anchor\" href=\"#152-libimobiledevice-源码\"></a> 1.5.2 <a href=\"https://github.com/libimobiledevice\">libimobiledevice 源码</a></h4>\n<h3 id=\"16-工具集\"><a class=\"markdownIt-Anchor\" href=\"#16-工具集\"></a> 1.6 工具集</h3>\n<pre class=\"highlight\"><code class=\"markdown\">idevice\natos\notool\nsigh\nmokeyDev、OpenDev\nTheOS\nrvictl\nwireshark\ncharles\n</code></pre>\n<h3 id=\"17-逆向工程师\"><a class=\"markdownIt-Anchor\" href=\"#17-逆向工程师\"></a> 1.7 逆向工程师</h3>\n<h4 id=\"171-要求\"><a class=\"markdownIt-Anchor\" href=\"#171-要求\"></a> 1.7.1 要求</h4>\n<pre class=\"highlight\"><code class=\"txt\">“硬件构成、iOS系统的运行原理，还要具备丰富的iOS开发经验。”\n</code></pre>\n<h4 id=\"172-逆向作用\"><a class=\"markdownIt-Anchor\" href=\"#172-逆向作用\"></a> 1.7.2 逆向作用</h4>\n<pre class=\"highlight\"><code class=\"txt\">恶意软件\n去除限制\n评定安全等级\n检查后门\n逆向iOS SDK？\n借鉴\n  WireLurker\n</code></pre>\n<h4 id=\"173-病毒\"><a class=\"markdownIt-Anchor\" href=\"#173-病毒\"></a> 1.7.3 病毒</h4>\n<pre class=\"highlight\"><code class=\"txt\">Ikee -&gt; iOS：alpine\nWireLurker\n</code></pre>\n<h4 id=\"174-团队\"><a class=\"markdownIt-Anchor\" href=\"#174-团队\"></a> 1.7.4 团队</h4>\n<pre class=\"highlight\"><code class=\"txt\">“evad3rs、盘古、太极”\n</code></pre>\n<h4 id=\"175-ios-逆向工具\"><a class=\"markdownIt-Anchor\" href=\"#175-ios-逆向工具\"></a> 1.7.5 iOS 逆向工具</h4>\n<pre class=\"highlight\"><code class=\"txt\"> 1、监测工具\n    Reveal\n    snoop-it\n    introspy\n\n  2、反汇编工具（disassembler）\n    IDA\n    Hopper\n    Cydia:\n      xsellize\n      iFile（MAcOS: AFC2、iFunBox）\n      SMSNinja\n\n  3、调试工具（debugger）\n    LLDB\n    LLVM\n\n  4、以及开发工具\n    iOSOpenDev（Xcode）\n    TheOS（command line）\n</code></pre>\n<h4 id=\"176-获取-app-bundleid\"><a class=\"markdownIt-Anchor\" href=\"#176-获取-app-bundleid\"></a> 1.7.6 获取 APP bundleID</h4>\n<pre class=\"highlight\"><code class=\"shell\">sudo plutil -p smartpark.app/Info.plist | grep CFBundleIdentifier\n\"CFBundleIdentifier\" =&gt; \"com.jieshun.hatc\"\n</code></pre>\n<h4 id=\"177-逆向工程师招聘信息示例\"><a class=\"markdownIt-Anchor\" href=\"#177-逆向工程师招聘信息示例\"></a> 1.7.7 逆向工程师招聘信息示例</h4>\n<p>示例一：</p>\n<pre class=\"highlight\"><code class=\"txt\">iOS高级安全工程师/专家\n岗位要求\n1.熟悉IDA Pro、GDB、JEB、lldb等常用逆向分析工具，具备较强的逆向分析能力，熟悉ARM、x86/64等指令集；\n2.熟练掌握应用逆向的静态分析、动态调试、代码跟踪等；\n3.负责对接业务安全需求与工具研发；\n4.熟悉C/C++、Objective-C、python语言之中一个或多个；熟悉各种通用加密算法；\n5.良好的逻辑思维能力和团队合作精神，善于交流和表达；\n\n加分项：\n1.有一定的iOS越狱开发经验；\n2.有安全编程相关经验, 熟悉业务安全技术对抗的常见技术手段；\n3.多平台逆向经验(iOS/Android/Windows)\n4.了解业务安全黑灰产；\n\n工作地点：北京/杭州\n简历请投: lanjun007@alibaba-inc.com (简历快到碗里来吧)\n\n公司信息\n上海某广告公司\n\n联系方式\n电话:13818882062\n</code></pre>\n<p>示例二：</p>\n<pre class=\"highlight\"><code class=\"txt\">职位名称\niOS逆向工程师\n\n职位职责\n网络协议层逆向兼顾iOS远程控制开发\n\n职位要求\n0.2-3年iOS开发经验\n1.静态分析 IDA pro、Hopper Disassembler\n2.动态分析 lldb、cycript、frida\n3.网络分析 Charles(https)、Wireshark(socket)\n4.视图分析 Reveal、Flex\n5.编译工具 clang、cmake、theos、\n6.注入工具 cynject、yololib、insert_dylib、optool、install_name_tool\n7.砸壳工具 clutch、dumpdecrypted、dumpexec\n8.Hook工具 MobileSubstrate、fishhook、HookZz、substitute、libcapstone\n9.基础技能 签名、脱壳、class-dump、常用的命令行工具例如ssh、ps等\n10.熟悉SpringBoard以及它依赖的framework加分\na.熟悉VideoToolBox编解码加分\nb.熟悉Unity3D和cocos2D逆向或者正向开发加分\nc.熟悉AppStore以及它交互的几个进程加分\nd.自我驱动力强，态度比能力更重要\ne.邮箱地址 请调试该app &lt;https://www.pgyer.com/crackme_&gt; 15\nPS:0和d是硬性要求，不过要是0-1年时间技能到达了2-3年的也ok，还会加分。1-9项中的工具，单独掌握一种即可，自己研发的加分。a-c的经验多多益善\n\n工作地点: 上海徐汇\n简历请投: 参考e项\n</code></pre>\n"},{"_content":"# Flutter 技术可行性调研\n\n界面：\n1、适配；\n2、项目视图组件；\n3、音视频播放；\n4、导航栏；\n5、动画；\n\n数据：\n1、数据库；\n2、数据序列化[json]；\n3、异步；\n4、埋点；\n\nAPP：\n1、webview：[用户协议，]事件，https证书认证，重定向；\n2、网络 http[s] 协议方法支持等；\n3、第三方app交互；\n4、后台任务；\n\n工程：\n1、图片等资源；\n2、国际化；\n3、性能监控：日志上报与及时处理；\n4、工程配置：开发/测试/正式环境及资源；\n5、[Flutter开发规范](https://github.com/alibaba/flutter-go/blob/develop/Flutter_Go%20%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md);\n\n原生交互：\n1、编解码器；\n2、原生通道；\n3、原生第三方服务：客服、推送等；\n4、渠道分发包；\n\n* 设计模式层面\n1、设计模式；\n2、工程分层设计\n\n     网络层\n     数据层\n     UI层\n     原生[通道层]\n\n* 组件化层面\n1、功能组件化；\n2、业务模块化；\n","source":"_posts/学习笔记/Flutters/Flutter可行性技术调研/Resources/flutter.md","raw":"# Flutter 技术可行性调研\n\n界面：\n1、适配；\n2、项目视图组件；\n3、音视频播放；\n4、导航栏；\n5、动画；\n\n数据：\n1、数据库；\n2、数据序列化[json]；\n3、异步；\n4、埋点；\n\nAPP：\n1、webview：[用户协议，]事件，https证书认证，重定向；\n2、网络 http[s] 协议方法支持等；\n3、第三方app交互；\n4、后台任务；\n\n工程：\n1、图片等资源；\n2、国际化；\n3、性能监控：日志上报与及时处理；\n4、工程配置：开发/测试/正式环境及资源；\n5、[Flutter开发规范](https://github.com/alibaba/flutter-go/blob/develop/Flutter_Go%20%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md);\n\n原生交互：\n1、编解码器；\n2、原生通道；\n3、原生第三方服务：客服、推送等；\n4、渠道分发包；\n\n* 设计模式层面\n1、设计模式；\n2、工程分层设计\n\n     网络层\n     数据层\n     UI层\n     原生[通道层]\n\n* 组件化层面\n1、功能组件化；\n2、业务模块化；\n","slug":"学习笔记/Flutters/Flutter可行性技术调研/Resources/flutter","published":1,"date":"2021-02-24T12:31:09.180Z","updated":"2021-02-24T12:31:09.180Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tiv002tw37u121v4ozl","content":"<h1 id=\"flutter-技术可行性调研\"><a class=\"markdownIt-Anchor\" href=\"#flutter-技术可行性调研\"></a> Flutter 技术可行性调研</h1>\n<p>界面：<br />\n1、适配；<br />\n2、项目视图组件；<br />\n3、音视频播放；<br />\n4、导航栏；<br />\n5、动画；</p>\n<p>数据：<br />\n1、数据库；<br />\n2、数据序列化[json]；<br />\n3、异步；<br />\n4、埋点；</p>\n<p>APP：<br />\n1、webview：[用户协议，]事件，https证书认证，重定向；<br />\n2、网络 http[s] 协议方法支持等；<br />\n3、第三方app交互；<br />\n4、后台任务；</p>\n<p>工程：<br />\n1、图片等资源；<br />\n2、国际化；<br />\n3、性能监控：日志上报与及时处理；<br />\n4、工程配置：开发/测试/正式环境及资源；<br />\n5、<a href=\"https://github.com/alibaba/flutter-go/blob/develop/Flutter_Go%20%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md\">Flutter开发规范</a>;</p>\n<p>原生交互：<br />\n1、编解码器；<br />\n2、原生通道；<br />\n3、原生第三方服务：客服、推送等；<br />\n4、渠道分发包；</p>\n<ul>\n<li>\n<p>设计模式层面<br />\n1、设计模式；<br />\n2、工程分层设计</p>\n<p>网络层<br />\n数据层<br />\nUI层<br />\n原生[通道层]</p>\n</li>\n<li>\n<p>组件化层面<br />\n1、功能组件化；<br />\n2、业务模块化；</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"flutter-技术可行性调研\"><a class=\"markdownIt-Anchor\" href=\"#flutter-技术可行性调研\"></a> Flutter 技术可行性调研</h1>\n<p>界面：<br />\n1、适配；<br />\n2、项目视图组件；<br />\n3、音视频播放；<br />\n4、导航栏；<br />\n5、动画；</p>\n<p>数据：<br />\n1、数据库；<br />\n2、数据序列化[json]；<br />\n3、异步；<br />\n4、埋点；</p>\n<p>APP：<br />\n1、webview：[用户协议，]事件，https证书认证，重定向；<br />\n2、网络 http[s] 协议方法支持等；<br />\n3、第三方app交互；<br />\n4、后台任务；</p>\n<p>工程：<br />\n1、图片等资源；<br />\n2、国际化；<br />\n3、性能监控：日志上报与及时处理；<br />\n4、工程配置：开发/测试/正式环境及资源；<br />\n5、<a href=\"https://github.com/alibaba/flutter-go/blob/develop/Flutter_Go%20%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md\">Flutter开发规范</a>;</p>\n<p>原生交互：<br />\n1、编解码器；<br />\n2、原生通道；<br />\n3、原生第三方服务：客服、推送等；<br />\n4、渠道分发包；</p>\n<ul>\n<li>\n<p>设计模式层面<br />\n1、设计模式；<br />\n2、工程分层设计</p>\n<p>网络层<br />\n数据层<br />\nUI层<br />\n原生[通道层]</p>\n</li>\n<li>\n<p>组件化层面<br />\n1、功能组件化；<br />\n2、业务模块化；</p>\n</li>\n</ul>\n"},{"_content":"# 与原生端通信\n\n## 1. 属性\n\n### 1.1 从原生组件传递属性到 React Native\n\n#### 1.1.1 初始化参数: initialProperties\n\niOS 端：\n\n```objective-c\nNSArray *imageList = @[@\"http://foo.com/bar1.png\",\n                       @\"http://foo.com/bar2.png\"];\n\nNSDictionary *props = @{@\"images\" : imageList};\n\nRCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge\n                                                 moduleName:@\"ImageBrowserApp\"\n                                          initialProperties:props];\n```\n\nWeb 端：\n\n```javascript\nimport React from 'react';\nimport {\n  View,\n  Image\n} from 'react-native';\n\nexport default class ImageBrowserApp extends React.Component {\n  renderImage(imgURI) {\n    return (\n      <Image source={{uri: imgURI}} />\n    );\n  }\n  render() {\n    return (\n      <View>\n        {this.props.images.map(this.renderImage)}\n      </View>\n    );\n  }\n}\n\n```\n\n#### 1.1.2 可读写参数: appProperties\n\n```objective-c\nNSArray *imageList = @[@\"http://foo.com/bar3.png\",\n                       @\"http://foo.com/bar4.png\"];\n\nrootView.appProperties = @{@\"images\" : imageList};\n```\n\n**可以随时更新属性，但是更新必须在主线程中进行，读取则可以在任何线程中进行。**\n\n### 1.2 从 React Native 传递属性到原生组件\n\n## 2. 跨端交互\n\nReact Native 允许使用跨语言的函数调用。你可以在 JS 中调用原生代码，也可以在原生代码中调用 JS。在不同端需要用不同的方法来实现相同的目的。在原生代码中我们使用事件机制来调度 JS 中的处理函数，而在 React Native 中我们直接使用原生模块导出的方法。\n\n### 2.1 事件\n\n从原生代码调用 React Natvie 函数。\n\n事件很强大，它可以不需要引用直接修改 React Native 组件。但是，当你使用时要注意下面这些陷阱：\n\n* 由于事件可以从各种地方产生，它们可能导致混乱的依赖。\n* 事件共享相同的命名空间，因此你可能遇到名字冲突。冲突不会在编写代码时被探测到，因此很难排错。\n* 如果你使用了同一个 React Native 组件的多个引用，然后想在事件中区分它们，name 你很可能需要在事件中同时传递一些标识（你可以使用原生视图中的reactTag作为标识）。\n  \n在 React Native 中嵌入原生组件时，通常的做法是用原生组件的 RCTViewManager 作为视图的代理，通过 bridge 向 JS 发送事件。这样可以集中在一处调用相关的事件。\n\n### 2.2 原生模块\n\n从 React Native 中调用原生方法。\n\n原生模块是 JS 中也可以使用的 Objective-C 类。一般来说这样的每一个模块的实例都是在每一次通过 JS bridge 通信时创建的。他们可以导出任意的函数和常量给 React Native。相关细节可以参阅这篇文章。\n\n事实上原生模块的单实例模式限制了嵌入。假设我们有一个 React Native 组件被嵌入了一个原生视图，并且我们希望更新原生的父视图。使用原生模块机制，我们可以导出一个函数，不仅要接收预设参数，还要接收父视图的标识。这个标识将会用来获得父视图的引用以更新父视图。那样的话，我们需要维持模块中标识到原生模块的映射。虽然这个解决办法很复杂，它仍被用在了管理所有 React Native 视图的RCTUIManager类中，\n\n## 3. 布局计算流\n\n### 3.1 在 React Native 中嵌入一个原生组件：[iOS 原生UI组件](https://www.react-native.cn/docs/native-components-ios)\n\n### 3.2 在原生中嵌入一个 React Native 组件\n\n#### 3.2.1 固定大小的 React Native 内容\n\nflexbox 是最简单的办法。\n\n#### 3.2.2 弹性大小的 React Native\n\n有时候我们需要渲染一些不知道大小的内容。假设尺寸将会在 JS 中动态指定。我们有两个解决办法。\n\n* 你可以将 React Native 视图包裹在ScrollView中。这样可以保证你的内容总是可以访问，并且不会和原生视图重叠。\n* React Native 允许你在 JS 中决定 RN 应用的尺寸，并且将它传递给宿主视图RCTRootView。然后宿主视图将重新布局子视图，保证 UI 统一。我们通过RCTRootView的弹性模式来达到目的。\n\nRCTRootView支持 4 种不同的弹性模式：\n\n```objective-c\n// RCTRootView.h\n\ntypedef NS_ENUM(NSInteger, RCTRootViewSizeFlexibility) {\n  RCTRootViewSizeFlexibilityNone = 0,\n  RCTRootViewSizeFlexibilityWidth,\n  RCTRootViewSizeFlexibilityHeight,\n  RCTRootViewSizeFlexibilityWidthAndHeight,\n};\n```\n\n> 注意： 在 JS 和原生中都设置弹性尺寸可能导致不确定的行为。比如--不要在设置RCTRootView为RCTRootViewSizeFlexibilityWidth时同时指定最顶层的 RN 组件宽度可变（使用 Flexbox）。\n\n> 注意： React Native 布局是通过一个单独的线程进行计算，而原生 UI 视图是通过主线程更新。这可能导致短暂的原生端和 React Native 端的不一致。\n","source":"_posts/学习笔记/iOS/iOS之大前端/React-Native/与原生端通信.md","raw":"# 与原生端通信\n\n## 1. 属性\n\n### 1.1 从原生组件传递属性到 React Native\n\n#### 1.1.1 初始化参数: initialProperties\n\niOS 端：\n\n```objective-c\nNSArray *imageList = @[@\"http://foo.com/bar1.png\",\n                       @\"http://foo.com/bar2.png\"];\n\nNSDictionary *props = @{@\"images\" : imageList};\n\nRCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge\n                                                 moduleName:@\"ImageBrowserApp\"\n                                          initialProperties:props];\n```\n\nWeb 端：\n\n```javascript\nimport React from 'react';\nimport {\n  View,\n  Image\n} from 'react-native';\n\nexport default class ImageBrowserApp extends React.Component {\n  renderImage(imgURI) {\n    return (\n      <Image source={{uri: imgURI}} />\n    );\n  }\n  render() {\n    return (\n      <View>\n        {this.props.images.map(this.renderImage)}\n      </View>\n    );\n  }\n}\n\n```\n\n#### 1.1.2 可读写参数: appProperties\n\n```objective-c\nNSArray *imageList = @[@\"http://foo.com/bar3.png\",\n                       @\"http://foo.com/bar4.png\"];\n\nrootView.appProperties = @{@\"images\" : imageList};\n```\n\n**可以随时更新属性，但是更新必须在主线程中进行，读取则可以在任何线程中进行。**\n\n### 1.2 从 React Native 传递属性到原生组件\n\n## 2. 跨端交互\n\nReact Native 允许使用跨语言的函数调用。你可以在 JS 中调用原生代码，也可以在原生代码中调用 JS。在不同端需要用不同的方法来实现相同的目的。在原生代码中我们使用事件机制来调度 JS 中的处理函数，而在 React Native 中我们直接使用原生模块导出的方法。\n\n### 2.1 事件\n\n从原生代码调用 React Natvie 函数。\n\n事件很强大，它可以不需要引用直接修改 React Native 组件。但是，当你使用时要注意下面这些陷阱：\n\n* 由于事件可以从各种地方产生，它们可能导致混乱的依赖。\n* 事件共享相同的命名空间，因此你可能遇到名字冲突。冲突不会在编写代码时被探测到，因此很难排错。\n* 如果你使用了同一个 React Native 组件的多个引用，然后想在事件中区分它们，name 你很可能需要在事件中同时传递一些标识（你可以使用原生视图中的reactTag作为标识）。\n  \n在 React Native 中嵌入原生组件时，通常的做法是用原生组件的 RCTViewManager 作为视图的代理，通过 bridge 向 JS 发送事件。这样可以集中在一处调用相关的事件。\n\n### 2.2 原生模块\n\n从 React Native 中调用原生方法。\n\n原生模块是 JS 中也可以使用的 Objective-C 类。一般来说这样的每一个模块的实例都是在每一次通过 JS bridge 通信时创建的。他们可以导出任意的函数和常量给 React Native。相关细节可以参阅这篇文章。\n\n事实上原生模块的单实例模式限制了嵌入。假设我们有一个 React Native 组件被嵌入了一个原生视图，并且我们希望更新原生的父视图。使用原生模块机制，我们可以导出一个函数，不仅要接收预设参数，还要接收父视图的标识。这个标识将会用来获得父视图的引用以更新父视图。那样的话，我们需要维持模块中标识到原生模块的映射。虽然这个解决办法很复杂，它仍被用在了管理所有 React Native 视图的RCTUIManager类中，\n\n## 3. 布局计算流\n\n### 3.1 在 React Native 中嵌入一个原生组件：[iOS 原生UI组件](https://www.react-native.cn/docs/native-components-ios)\n\n### 3.2 在原生中嵌入一个 React Native 组件\n\n#### 3.2.1 固定大小的 React Native 内容\n\nflexbox 是最简单的办法。\n\n#### 3.2.2 弹性大小的 React Native\n\n有时候我们需要渲染一些不知道大小的内容。假设尺寸将会在 JS 中动态指定。我们有两个解决办法。\n\n* 你可以将 React Native 视图包裹在ScrollView中。这样可以保证你的内容总是可以访问，并且不会和原生视图重叠。\n* React Native 允许你在 JS 中决定 RN 应用的尺寸，并且将它传递给宿主视图RCTRootView。然后宿主视图将重新布局子视图，保证 UI 统一。我们通过RCTRootView的弹性模式来达到目的。\n\nRCTRootView支持 4 种不同的弹性模式：\n\n```objective-c\n// RCTRootView.h\n\ntypedef NS_ENUM(NSInteger, RCTRootViewSizeFlexibility) {\n  RCTRootViewSizeFlexibilityNone = 0,\n  RCTRootViewSizeFlexibilityWidth,\n  RCTRootViewSizeFlexibilityHeight,\n  RCTRootViewSizeFlexibilityWidthAndHeight,\n};\n```\n\n> 注意： 在 JS 和原生中都设置弹性尺寸可能导致不确定的行为。比如--不要在设置RCTRootView为RCTRootViewSizeFlexibilityWidth时同时指定最顶层的 RN 组件宽度可变（使用 Flexbox）。\n\n> 注意： React Native 布局是通过一个单独的线程进行计算，而原生 UI 视图是通过主线程更新。这可能导致短暂的原生端和 React Native 端的不一致。\n","slug":"学习笔记/iOS/iOS之大前端/React-Native/与原生端通信","published":1,"date":"2021-04-09T13:04:02.238Z","updated":"2021-04-09T13:04:02.238Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tiw002uw37ud14z2nlu","content":"<h1 id=\"与原生端通信\"><a class=\"markdownIt-Anchor\" href=\"#与原生端通信\"></a> 与原生端通信</h1>\n<h2 id=\"1-属性\"><a class=\"markdownIt-Anchor\" href=\"#1-属性\"></a> 1. 属性</h2>\n<h3 id=\"11-从原生组件传递属性到-react-native\"><a class=\"markdownIt-Anchor\" href=\"#11-从原生组件传递属性到-react-native\"></a> 1.1 从原生组件传递属性到 React Native</h3>\n<h4 id=\"111-初始化参数-initialproperties\"><a class=\"markdownIt-Anchor\" href=\"#111-初始化参数-initialproperties\"></a> 1.1.1 初始化参数: initialProperties</h4>\n<p>iOS 端：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">NSArray *imageList = @[@&quot;http://foo.com/bar1.png&quot;,\n                       @&quot;http://foo.com/bar2.png&quot;];\n\nNSDictionary *props = @&#123;@&quot;images&quot; : imageList&#125;;\n\nRCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge\n                                                 moduleName:@&quot;ImageBrowserApp&quot;\n                                          initialProperties:props];\n</code></pre>\n<p>Web 端：</p>\n<pre class=\"highlight\"><code class=\"javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> &#123;\n  View,\n  Image\n&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ImageBrowserApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n  renderImage(imgURI) &#123;\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Image</span> <span class=\"hljs-attr\">source</span>=&lt;!<span class=\"hljs-attr\">--swig</span>￼<span class=\"hljs-attr\">0--</span>&gt;</span> /&gt;</span>\n    );\n  &#125;\n  render() &#123;\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">View</span>&gt;</span>\n        &#123;this.props.images.map(this.renderImage)&#125;\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">View</span>&gt;</span></span>\n    );\n  &#125;\n&#125;\n\n</code></pre>\n<h4 id=\"112-可读写参数-appproperties\"><a class=\"markdownIt-Anchor\" href=\"#112-可读写参数-appproperties\"></a> 1.1.2 可读写参数: appProperties</h4>\n<pre class=\"highlight\"><code class=\"objective-c\">NSArray *imageList = @[@&quot;http://foo.com/bar3.png&quot;,\n                       @&quot;http://foo.com/bar4.png&quot;];\n\nrootView.appProperties = @&#123;@&quot;images&quot; : imageList&#125;;\n</code></pre>\n<p><strong>可以随时更新属性，但是更新必须在主线程中进行，读取则可以在任何线程中进行。</strong></p>\n<h3 id=\"12-从-react-native-传递属性到原生组件\"><a class=\"markdownIt-Anchor\" href=\"#12-从-react-native-传递属性到原生组件\"></a> 1.2 从 React Native 传递属性到原生组件</h3>\n<h2 id=\"2-跨端交互\"><a class=\"markdownIt-Anchor\" href=\"#2-跨端交互\"></a> 2. 跨端交互</h2>\n<p>React Native 允许使用跨语言的函数调用。你可以在 JS 中调用原生代码，也可以在原生代码中调用 JS。在不同端需要用不同的方法来实现相同的目的。在原生代码中我们使用事件机制来调度 JS 中的处理函数，而在 React Native 中我们直接使用原生模块导出的方法。</p>\n<h3 id=\"21-事件\"><a class=\"markdownIt-Anchor\" href=\"#21-事件\"></a> 2.1 事件</h3>\n<p>从原生代码调用 React Natvie 函数。</p>\n<p>事件很强大，它可以不需要引用直接修改 React Native 组件。但是，当你使用时要注意下面这些陷阱：</p>\n<ul>\n<li>由于事件可以从各种地方产生，它们可能导致混乱的依赖。</li>\n<li>事件共享相同的命名空间，因此你可能遇到名字冲突。冲突不会在编写代码时被探测到，因此很难排错。</li>\n<li>如果你使用了同一个 React Native 组件的多个引用，然后想在事件中区分它们，name 你很可能需要在事件中同时传递一些标识（你可以使用原生视图中的reactTag作为标识）。</li>\n</ul>\n<p>在 React Native 中嵌入原生组件时，通常的做法是用原生组件的 RCTViewManager 作为视图的代理，通过 bridge 向 JS 发送事件。这样可以集中在一处调用相关的事件。</p>\n<h3 id=\"22-原生模块\"><a class=\"markdownIt-Anchor\" href=\"#22-原生模块\"></a> 2.2 原生模块</h3>\n<p>从 React Native 中调用原生方法。</p>\n<p>原生模块是 JS 中也可以使用的 Objective-C 类。一般来说这样的每一个模块的实例都是在每一次通过 JS bridge 通信时创建的。他们可以导出任意的函数和常量给 React Native。相关细节可以参阅这篇文章。</p>\n<p>事实上原生模块的单实例模式限制了嵌入。假设我们有一个 React Native 组件被嵌入了一个原生视图，并且我们希望更新原生的父视图。使用原生模块机制，我们可以导出一个函数，不仅要接收预设参数，还要接收父视图的标识。这个标识将会用来获得父视图的引用以更新父视图。那样的话，我们需要维持模块中标识到原生模块的映射。虽然这个解决办法很复杂，它仍被用在了管理所有 React Native 视图的RCTUIManager类中，</p>\n<h2 id=\"3-布局计算流\"><a class=\"markdownIt-Anchor\" href=\"#3-布局计算流\"></a> 3. 布局计算流</h2>\n<h3 id=\"31-在-react-native-中嵌入一个原生组件ios-原生ui组件\"><a class=\"markdownIt-Anchor\" href=\"#31-在-react-native-中嵌入一个原生组件ios-原生ui组件\"></a> 3.1 在 React Native 中嵌入一个原生组件：<a href=\"https://www.react-native.cn/docs/native-components-ios\">iOS 原生UI组件</a></h3>\n<h3 id=\"32-在原生中嵌入一个-react-native-组件\"><a class=\"markdownIt-Anchor\" href=\"#32-在原生中嵌入一个-react-native-组件\"></a> 3.2 在原生中嵌入一个 React Native 组件</h3>\n<h4 id=\"321-固定大小的-react-native-内容\"><a class=\"markdownIt-Anchor\" href=\"#321-固定大小的-react-native-内容\"></a> 3.2.1 固定大小的 React Native 内容</h4>\n<p>flexbox 是最简单的办法。</p>\n<h4 id=\"322-弹性大小的-react-native\"><a class=\"markdownIt-Anchor\" href=\"#322-弹性大小的-react-native\"></a> 3.2.2 弹性大小的 React Native</h4>\n<p>有时候我们需要渲染一些不知道大小的内容。假设尺寸将会在 JS 中动态指定。我们有两个解决办法。</p>\n<ul>\n<li>你可以将 React Native 视图包裹在ScrollView中。这样可以保证你的内容总是可以访问，并且不会和原生视图重叠。</li>\n<li>React Native 允许你在 JS 中决定 RN 应用的尺寸，并且将它传递给宿主视图RCTRootView。然后宿主视图将重新布局子视图，保证 UI 统一。我们通过RCTRootView的弹性模式来达到目的。</li>\n</ul>\n<p>RCTRootView支持 4 种不同的弹性模式：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">// RCTRootView.h\n\ntypedef NS_ENUM(NSInteger, RCTRootViewSizeFlexibility) &#123;\n  RCTRootViewSizeFlexibilityNone = 0,\n  RCTRootViewSizeFlexibilityWidth,\n  RCTRootViewSizeFlexibilityHeight,\n  RCTRootViewSizeFlexibilityWidthAndHeight,\n&#125;;\n</code></pre>\n<blockquote>\n<p>注意： 在 JS 和原生中都设置弹性尺寸可能导致不确定的行为。比如–不要在设置RCTRootView为RCTRootViewSizeFlexibilityWidth时同时指定最顶层的 RN 组件宽度可变（使用 Flexbox）。</p>\n</blockquote>\n<blockquote>\n<p>注意： React Native 布局是通过一个单独的线程进行计算，而原生 UI 视图是通过主线程更新。这可能导致短暂的原生端和 React Native 端的不一致。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"与原生端通信\"><a class=\"markdownIt-Anchor\" href=\"#与原生端通信\"></a> 与原生端通信</h1>\n<h2 id=\"1-属性\"><a class=\"markdownIt-Anchor\" href=\"#1-属性\"></a> 1. 属性</h2>\n<h3 id=\"11-从原生组件传递属性到-react-native\"><a class=\"markdownIt-Anchor\" href=\"#11-从原生组件传递属性到-react-native\"></a> 1.1 从原生组件传递属性到 React Native</h3>\n<h4 id=\"111-初始化参数-initialproperties\"><a class=\"markdownIt-Anchor\" href=\"#111-初始化参数-initialproperties\"></a> 1.1.1 初始化参数: initialProperties</h4>\n<p>iOS 端：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">NSArray *imageList = @[@&quot;http://foo.com/bar1.png&quot;,\n                       @&quot;http://foo.com/bar2.png&quot;];\n\nNSDictionary *props = @&#123;@&quot;images&quot; : imageList&#125;;\n\nRCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge\n                                                 moduleName:@&quot;ImageBrowserApp&quot;\n                                          initialProperties:props];\n</code></pre>\n<p>Web 端：</p>\n<pre class=\"highlight\"><code class=\"javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> &#123;\n  View,\n  Image\n&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ImageBrowserApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>&#123;\n  renderImage(imgURI) &#123;\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Image</span> <span class=\"hljs-attr\">source</span>=&lt;!<span class=\"hljs-attr\">--swig</span>￼<span class=\"hljs-attr\">0--</span>&gt;</span> /&gt;</span>\n    );\n  &#125;\n  render() &#123;\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">View</span>&gt;</span>\n        &#123;this.props.images.map(this.renderImage)&#125;\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">View</span>&gt;</span></span>\n    );\n  &#125;\n&#125;\n\n</code></pre>\n<h4 id=\"112-可读写参数-appproperties\"><a class=\"markdownIt-Anchor\" href=\"#112-可读写参数-appproperties\"></a> 1.1.2 可读写参数: appProperties</h4>\n<pre class=\"highlight\"><code class=\"objective-c\">NSArray *imageList = @[@&quot;http://foo.com/bar3.png&quot;,\n                       @&quot;http://foo.com/bar4.png&quot;];\n\nrootView.appProperties = @&#123;@&quot;images&quot; : imageList&#125;;\n</code></pre>\n<p><strong>可以随时更新属性，但是更新必须在主线程中进行，读取则可以在任何线程中进行。</strong></p>\n<h3 id=\"12-从-react-native-传递属性到原生组件\"><a class=\"markdownIt-Anchor\" href=\"#12-从-react-native-传递属性到原生组件\"></a> 1.2 从 React Native 传递属性到原生组件</h3>\n<h2 id=\"2-跨端交互\"><a class=\"markdownIt-Anchor\" href=\"#2-跨端交互\"></a> 2. 跨端交互</h2>\n<p>React Native 允许使用跨语言的函数调用。你可以在 JS 中调用原生代码，也可以在原生代码中调用 JS。在不同端需要用不同的方法来实现相同的目的。在原生代码中我们使用事件机制来调度 JS 中的处理函数，而在 React Native 中我们直接使用原生模块导出的方法。</p>\n<h3 id=\"21-事件\"><a class=\"markdownIt-Anchor\" href=\"#21-事件\"></a> 2.1 事件</h3>\n<p>从原生代码调用 React Natvie 函数。</p>\n<p>事件很强大，它可以不需要引用直接修改 React Native 组件。但是，当你使用时要注意下面这些陷阱：</p>\n<ul>\n<li>由于事件可以从各种地方产生，它们可能导致混乱的依赖。</li>\n<li>事件共享相同的命名空间，因此你可能遇到名字冲突。冲突不会在编写代码时被探测到，因此很难排错。</li>\n<li>如果你使用了同一个 React Native 组件的多个引用，然后想在事件中区分它们，name 你很可能需要在事件中同时传递一些标识（你可以使用原生视图中的reactTag作为标识）。</li>\n</ul>\n<p>在 React Native 中嵌入原生组件时，通常的做法是用原生组件的 RCTViewManager 作为视图的代理，通过 bridge 向 JS 发送事件。这样可以集中在一处调用相关的事件。</p>\n<h3 id=\"22-原生模块\"><a class=\"markdownIt-Anchor\" href=\"#22-原生模块\"></a> 2.2 原生模块</h3>\n<p>从 React Native 中调用原生方法。</p>\n<p>原生模块是 JS 中也可以使用的 Objective-C 类。一般来说这样的每一个模块的实例都是在每一次通过 JS bridge 通信时创建的。他们可以导出任意的函数和常量给 React Native。相关细节可以参阅这篇文章。</p>\n<p>事实上原生模块的单实例模式限制了嵌入。假设我们有一个 React Native 组件被嵌入了一个原生视图，并且我们希望更新原生的父视图。使用原生模块机制，我们可以导出一个函数，不仅要接收预设参数，还要接收父视图的标识。这个标识将会用来获得父视图的引用以更新父视图。那样的话，我们需要维持模块中标识到原生模块的映射。虽然这个解决办法很复杂，它仍被用在了管理所有 React Native 视图的RCTUIManager类中，</p>\n<h2 id=\"3-布局计算流\"><a class=\"markdownIt-Anchor\" href=\"#3-布局计算流\"></a> 3. 布局计算流</h2>\n<h3 id=\"31-在-react-native-中嵌入一个原生组件ios-原生ui组件\"><a class=\"markdownIt-Anchor\" href=\"#31-在-react-native-中嵌入一个原生组件ios-原生ui组件\"></a> 3.1 在 React Native 中嵌入一个原生组件：<a href=\"https://www.react-native.cn/docs/native-components-ios\">iOS 原生UI组件</a></h3>\n<h3 id=\"32-在原生中嵌入一个-react-native-组件\"><a class=\"markdownIt-Anchor\" href=\"#32-在原生中嵌入一个-react-native-组件\"></a> 3.2 在原生中嵌入一个 React Native 组件</h3>\n<h4 id=\"321-固定大小的-react-native-内容\"><a class=\"markdownIt-Anchor\" href=\"#321-固定大小的-react-native-内容\"></a> 3.2.1 固定大小的 React Native 内容</h4>\n<p>flexbox 是最简单的办法。</p>\n<h4 id=\"322-弹性大小的-react-native\"><a class=\"markdownIt-Anchor\" href=\"#322-弹性大小的-react-native\"></a> 3.2.2 弹性大小的 React Native</h4>\n<p>有时候我们需要渲染一些不知道大小的内容。假设尺寸将会在 JS 中动态指定。我们有两个解决办法。</p>\n<ul>\n<li>你可以将 React Native 视图包裹在ScrollView中。这样可以保证你的内容总是可以访问，并且不会和原生视图重叠。</li>\n<li>React Native 允许你在 JS 中决定 RN 应用的尺寸，并且将它传递给宿主视图RCTRootView。然后宿主视图将重新布局子视图，保证 UI 统一。我们通过RCTRootView的弹性模式来达到目的。</li>\n</ul>\n<p>RCTRootView支持 4 种不同的弹性模式：</p>\n<pre class=\"highlight\"><code class=\"objective-c\">// RCTRootView.h\n\ntypedef NS_ENUM(NSInteger, RCTRootViewSizeFlexibility) &#123;\n  RCTRootViewSizeFlexibilityNone = 0,\n  RCTRootViewSizeFlexibilityWidth,\n  RCTRootViewSizeFlexibilityHeight,\n  RCTRootViewSizeFlexibilityWidthAndHeight,\n&#125;;\n</code></pre>\n<blockquote>\n<p>注意： 在 JS 和原生中都设置弹性尺寸可能导致不确定的行为。比如–不要在设置RCTRootView为RCTRootViewSizeFlexibilityWidth时同时指定最顶层的 RN 组件宽度可变（使用 Flexbox）。</p>\n</blockquote>\n<blockquote>\n<p>注意： React Native 布局是通过一个单独的线程进行计算，而原生 UI 视图是通过主线程更新。这可能导致短暂的原生端和 React Native 端的不一致。</p>\n</blockquote>\n"},{"_content":"# React-Native\n\n## React\n\nNative\n","source":"_posts/学习笔记/iOS/iOS之大前端/React-Native/React-Native.md","raw":"# React-Native\n\n## React\n\nNative\n","slug":"学习笔记/iOS/iOS之大前端/React-Native/React-Native","published":1,"date":"2021-04-09T13:04:02.238Z","updated":"2021-04-09T13:04:02.239Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tix002vw37u7zbggdgu","content":"<h1 id=\"react-native\"><a class=\"markdownIt-Anchor\" href=\"#react-native\"></a> React-Native</h1>\n<h2 id=\"react\"><a class=\"markdownIt-Anchor\" href=\"#react\"></a> React</h2>\n<p>Native</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"react-native\"><a class=\"markdownIt-Anchor\" href=\"#react-native\"></a> React-Native</h1>\n<h2 id=\"react\"><a class=\"markdownIt-Anchor\" href=\"#react\"></a> React</h2>\n<p>Native</p>\n"},{"_content":"# Native Module\n\n## 1 [原生模块配置](https://www.react-native.cn/docs/native-modules-setup)\n\n    npx @react-native-community/bob create react-native-awesome-module\n\n    yarn bootstrap\n\n    # Android app\n    yarn example android\n    # iOS app\n    yarn example ios\n\n## 2. [create-react-native-module](https://github.com/brodybits/create-react-native-module)\n\n这个工具，配置内容少一些。\n\n## 3. [原生模块](https://www.react-native.cn/docs/native-modules-ios/)\n\n* 实现了```RCTBridgeModule```协议；\n\n* 类需要包含RCT_EXPORT_MODULE()宏，导出模块；\n\n* 通过RCT_EXPORT_METHOD()宏导出方法；\n\n    RCT_REMAP_METHOD()宏, 处理方法重载的情况\n\n* Javascript 里使用；\n\n    import { NativeModules } from 'react-native';\n    const CalendarManager = NativeModules.CalendarManager;\n    CalendarManager.addEvent(\n      'Birthday Party',\n      '4 Privet Drive, Surrey'\n    );\n\n* 桥接到 JavaScript 的方法返回值类型必须是void。React Native 的桥接操作是异步的，所以要返回结果给 JavaScript，你必须通过回调或者触发事件来进行\n","source":"_posts/学习笔记/iOS/iOS之大前端/React-Native/原生模块.md","raw":"# Native Module\n\n## 1 [原生模块配置](https://www.react-native.cn/docs/native-modules-setup)\n\n    npx @react-native-community/bob create react-native-awesome-module\n\n    yarn bootstrap\n\n    # Android app\n    yarn example android\n    # iOS app\n    yarn example ios\n\n## 2. [create-react-native-module](https://github.com/brodybits/create-react-native-module)\n\n这个工具，配置内容少一些。\n\n## 3. [原生模块](https://www.react-native.cn/docs/native-modules-ios/)\n\n* 实现了```RCTBridgeModule```协议；\n\n* 类需要包含RCT_EXPORT_MODULE()宏，导出模块；\n\n* 通过RCT_EXPORT_METHOD()宏导出方法；\n\n    RCT_REMAP_METHOD()宏, 处理方法重载的情况\n\n* Javascript 里使用；\n\n    import { NativeModules } from 'react-native';\n    const CalendarManager = NativeModules.CalendarManager;\n    CalendarManager.addEvent(\n      'Birthday Party',\n      '4 Privet Drive, Surrey'\n    );\n\n* 桥接到 JavaScript 的方法返回值类型必须是void。React Native 的桥接操作是异步的，所以要返回结果给 JavaScript，你必须通过回调或者触发事件来进行\n","slug":"学习笔记/iOS/iOS之大前端/React-Native/原生模块","published":1,"date":"2021-04-09T13:04:02.237Z","updated":"2021-04-09T13:04:02.237Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tiy002ww37u23wf4ns7","content":"<h1 id=\"native-module\"><a class=\"markdownIt-Anchor\" href=\"#native-module\"></a> Native Module</h1>\n<h2 id=\"1-原生模块配置\"><a class=\"markdownIt-Anchor\" href=\"#1-原生模块配置\"></a> 1 <a href=\"https://www.react-native.cn/docs/native-modules-setup\">原生模块配置</a></h2>\n<pre><code>npx @react-native-community/bob create react-native-awesome-module\n\nyarn bootstrap\n\n# Android app\nyarn example android\n# iOS app\nyarn example ios\n</code></pre>\n<h2 id=\"2-create-react-native-module\"><a class=\"markdownIt-Anchor\" href=\"#2-create-react-native-module\"></a> 2. <a href=\"https://github.com/brodybits/create-react-native-module\">create-react-native-module</a></h2>\n<p>这个工具，配置内容少一些。</p>\n<h2 id=\"3-原生模块\"><a class=\"markdownIt-Anchor\" href=\"#3-原生模块\"></a> 3. <a href=\"https://www.react-native.cn/docs/native-modules-ios/\">原生模块</a></h2>\n<ul>\n<li>\n<p>实现了<code>RCTBridgeModule</code>协议；</p>\n</li>\n<li>\n<p>类需要包含RCT_EXPORT_MODULE()宏，导出模块；</p>\n</li>\n<li>\n<p>通过RCT_EXPORT_METHOD()宏导出方法；</p>\n<p>RCT_REMAP_METHOD()宏, 处理方法重载的情况</p>\n</li>\n<li>\n<p>Javascript 里使用；</p>\n<p>import { NativeModules } from ‘react-native’;<br />\nconst CalendarManager = NativeModules.CalendarManager;<br />\nCalendarManager.addEvent(<br />\n‘Birthday Party’,<br />\n‘4 Privet Drive, Surrey’<br />\n);</p>\n</li>\n<li>\n<p>桥接到 JavaScript 的方法返回值类型必须是void。React Native 的桥接操作是异步的，所以要返回结果给 JavaScript，你必须通过回调或者触发事件来进行</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"native-module\"><a class=\"markdownIt-Anchor\" href=\"#native-module\"></a> Native Module</h1>\n<h2 id=\"1-原生模块配置\"><a class=\"markdownIt-Anchor\" href=\"#1-原生模块配置\"></a> 1 <a href=\"https://www.react-native.cn/docs/native-modules-setup\">原生模块配置</a></h2>\n<pre><code>npx @react-native-community/bob create react-native-awesome-module\n\nyarn bootstrap\n\n# Android app\nyarn example android\n# iOS app\nyarn example ios\n</code></pre>\n<h2 id=\"2-create-react-native-module\"><a class=\"markdownIt-Anchor\" href=\"#2-create-react-native-module\"></a> 2. <a href=\"https://github.com/brodybits/create-react-native-module\">create-react-native-module</a></h2>\n<p>这个工具，配置内容少一些。</p>\n<h2 id=\"3-原生模块\"><a class=\"markdownIt-Anchor\" href=\"#3-原生模块\"></a> 3. <a href=\"https://www.react-native.cn/docs/native-modules-ios/\">原生模块</a></h2>\n<ul>\n<li>\n<p>实现了<code>RCTBridgeModule</code>协议；</p>\n</li>\n<li>\n<p>类需要包含RCT_EXPORT_MODULE()宏，导出模块；</p>\n</li>\n<li>\n<p>通过RCT_EXPORT_METHOD()宏导出方法；</p>\n<p>RCT_REMAP_METHOD()宏, 处理方法重载的情况</p>\n</li>\n<li>\n<p>Javascript 里使用；</p>\n<p>import { NativeModules } from ‘react-native’;<br />\nconst CalendarManager = NativeModules.CalendarManager;<br />\nCalendarManager.addEvent(<br />\n‘Birthday Party’,<br />\n‘4 Privet Drive, Surrey’<br />\n);</p>\n</li>\n<li>\n<p>桥接到 JavaScript 的方法返回值类型必须是void。React Native 的桥接操作是异步的，所以要返回结果给 JavaScript，你必须通过回调或者触发事件来进行</p>\n</li>\n</ul>\n"},{"_content":"[汇编语言入门教程](http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html)\n\n```\n_add_a_and_b:\n   push   %ebx\n   mov    %eax, [%esp+8] \n   mov    %ebx, [%esp+12]\n   add    %eax, %ebx \n   pop    %ebx \n   ret  \n\n_main:\n   push   3\n   push   2\n   call   _add_a_and_b \n   add    %esp, 8\n   ret\n```\n\nhttps://blog.nelhage.com/2010/10/amd64-and-va_arg/\n\nhttp://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf\n\nhttps://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html\n\n","source":"_posts/学习笔记/iOS/iOS之编程语言/Assemble/Assemble.md","raw":"[汇编语言入门教程](http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html)\n\n```\n_add_a_and_b:\n   push   %ebx\n   mov    %eax, [%esp+8] \n   mov    %ebx, [%esp+12]\n   add    %eax, %ebx \n   pop    %ebx \n   ret  \n\n_main:\n   push   3\n   push   2\n   call   _add_a_and_b \n   add    %esp, 8\n   ret\n```\n\nhttps://blog.nelhage.com/2010/10/amd64-and-va_arg/\n\nhttp://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf\n\nhttps://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html\n\n","slug":"学习笔记/iOS/iOS之编程语言/Assemble/Assemble","published":1,"date":"2021-02-24T12:31:09.238Z","updated":"2021-02-24T12:31:09.238Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tiz002xw37u8xk80wix","content":"<p><a href=\"http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html\">汇编语言入门教程</a></p>\n<pre class=\"highlight\"><code class=\"\">_add_a_and_b:\n   push   %ebx\n   mov    %eax, [%esp+8] \n   mov    %ebx, [%esp+12]\n   add    %eax, %ebx \n   pop    %ebx \n   ret  \n\n_main:\n   push   3\n   push   2\n   call   _add_a_and_b \n   add    %esp, 8\n   ret\n</code></pre>\n<p><a href=\"https://blog.nelhage.com/2010/10/amd64-and-va_arg/\">https://blog.nelhage.com/2010/10/amd64-and-va_arg/</a></p>\n<p><a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf\">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf</a></p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html\">https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html\">汇编语言入门教程</a></p>\n<pre class=\"highlight\"><code class=\"\">_add_a_and_b:\n   push   %ebx\n   mov    %eax, [%esp+8] \n   mov    %ebx, [%esp+12]\n   add    %eax, %ebx \n   pop    %ebx \n   ret  \n\n_main:\n   push   3\n   push   2\n   call   _add_a_and_b \n   add    %esp, 8\n   ret\n</code></pre>\n<p><a href=\"https://blog.nelhage.com/2010/10/amd64-and-va_arg/\">https://blog.nelhage.com/2010/10/amd64-and-va_arg/</a></p>\n<p><a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf\">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf</a></p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html\">https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html</a></p>\n"},{"_content":"kill -l 查看信号列表\n\nConstant    Explanation\nSIGTERM    termination request, sent to the program\nSIGSEGV    invalid memory access (segmentation fault)\nSIGINT    external interrupt, usually initiated by the user\nSIGILL    invalid program image, such as invalid instruction\nSIGABRT    abnormal termination condition, as is e.g. initiated by abort()\nSIGFPE       erroneous arithmetic operation such as divide by zero\n","source":"_posts/学习笔记/iOS/iOS之编程语言/CAlians/C_Catalog.md","raw":"kill -l 查看信号列表\n\nConstant    Explanation\nSIGTERM    termination request, sent to the program\nSIGSEGV    invalid memory access (segmentation fault)\nSIGINT    external interrupt, usually initiated by the user\nSIGILL    invalid program image, such as invalid instruction\nSIGABRT    abnormal termination condition, as is e.g. initiated by abort()\nSIGFPE       erroneous arithmetic operation such as divide by zero\n","slug":"学习笔记/iOS/iOS之编程语言/CAlians/C_Catalog","published":1,"date":"2021-02-24T12:31:09.244Z","updated":"2021-02-24T16:00:38.197Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tj2002yw37u1cwzbltb","content":"<p>kill -l 查看信号列表</p>\n<p>Constant    Explanation<br />\nSIGTERM    termination request, sent to the program<br />\nSIGSEGV    invalid memory access (segmentation fault)<br />\nSIGINT    external interrupt, usually initiated by the user<br />\nSIGILL    invalid program image, such as invalid instruction<br />\nSIGABRT    abnormal termination condition, as is e.g. initiated by abort()<br />\nSIGFPE       erroneous arithmetic operation such as divide by zero</p>\n","site":{"data":{}},"excerpt":"","more":"<p>kill -l 查看信号列表</p>\n<p>Constant    Explanation<br />\nSIGTERM    termination request, sent to the program<br />\nSIGSEGV    invalid memory access (segmentation fault)<br />\nSIGINT    external interrupt, usually initiated by the user<br />\nSIGILL    invalid program image, such as invalid instruction<br />\nSIGABRT    abnormal termination condition, as is e.g. initiated by abort()<br />\nSIGFPE       erroneous arithmetic operation such as divide by zero</p>\n"},{"_content":"# boost 编译器 b2\n\n```sh\n./b2 --help\n```\n\n```sh\nBoost.Build 2018.02-git\n\nProject-specific help:\n\n  Project has jamfile at Jamroot\n\nUsage:\n\n  b2 [options] [properties] [install|stage]\n\n  Builds and installs Boost.\n\nTargets and Related Options:\n\n  install                 Install headers and compiled library files to the\n  =======                 configured locations (below).\n\n  --prefix=<PREFIX>       Install architecture independent files here.\n                          Default; C:\\Boost on Win32\n                          Default; /usr/local on Unix. Linux, etc.\n\n  --exec-prefix=<EPREFIX> Install architecture dependent files here.\n                          Default; <PREFIX>\n\n  --libdir=<DIR>          Install library files here.\n                          Default; <EPREFIX>/lib\n\n  --includedir=<HDRDIR>   Install header files here.\n                          Default; <PREFIX>/include\n\n  stage                   Build and install only compiled library files to the\n  =====                   stage directory.\n\n  --stagedir=<STAGEDIR>   Install library files here\n                          Default; ./stage\n\nOther Options:\n\n  --build-type=<type>     Build the specified pre-defined set of variations of\n                          the libraries. Note, that which variants get built\n                          depends on what each library supports.\n\n                              -- minimal -- (default) Builds a minimal set of\n                              variants. On Windows, these are static\n                              multithreaded libraries in debug and release\n                              modes, using shared runtime. On Linux, these are\n                              static and shared multithreaded libraries in\n                              release mode.\n\n                              -- complete -- Build all possible variations.\n\n  --build-dir=DIR         Build in this location instead of building within\n                          the distribution tree. Recommended!\n\n  --show-libraries        Display the list of Boost libraries that require\n                          build and installation steps, and then exit.\n\n  --layout=<layout>       Determine whether to choose library names and header\n                          locations such that multiple versions of Boost or\n                          multiple compilers can be used on the same system.\n\n                              -- versioned -- Names of boost binaries include\n                              the Boost version number, name and version of\n                              the compiler and encoded build properties. Boost\n                              headers are installed in a subdirectory of\n                              <HDRDIR> whose name contains the Boost version\n                              number.\n\n                              -- tagged -- Names of boost binaries include the\n                              encoded build properties such as variant and\n                              threading, but do not including compiler name\n                              and version, or Boost version. This option is\n                              useful if you build several variants of Boost,\n                              using the same compiler.\n\n                              -- system -- Binaries names do not include the\n                              Boost version number or the name and version\n                              number of the compiler. Boost headers are\n                              installed directly into <HDRDIR>. This option is\n                              intended for system integrators building\n                              distribution packages.\n\n                          The default value is 'versioned' on Windows, and\n                          'system' on Unix.\n\n  --buildid=ID            Add the specified ID to the name of built libraries.\n                          The default is to not add anything.\n\n  --python-buildid=ID     Add the specified ID to the name of built libraries\n                          that depend on Python. The default is to not add\n                          anything. This ID is added in addition to --buildid.\n\n  --help                  This message.\n\n  --with-<library>        Build and install the specified <library>. If this\n                          option is used, only libraries specified using this\n                          option will be built.\n\n  --without-<library>     Do not build, stage, or install the specified\n                          <library>. By default, all libraries are built.\n\nProperties:\n\n  toolset=toolset         Indicate the toolset to build with.\n\n  variant=debug|release   Select the build variant\n\n  link=static|shared      Whether to build static or shared libraries\n\n  threading=single|multi  Whether to build single or multithreaded binaries\n\n  runtime-link=static|shared\n                          Whether to link to static or shared C and C++\n                          runtime.\n\n\nGeneral command line usage:\n\n    b2 [options] [properties] [targets]\n\n  Options, properties and targets can be specified in any order.\n      \nImportant Options:\n\n  * --clean Remove targets instead of building\n  * -a Rebuild everything\n  * -n Don't execute the commands, only print them\n  * -d+2 Show commands as they are executed\n  * -d0 Suppress all informational messages\n  * -q Stop at first error\n  * --reconfigure Rerun all configuration checks\n  * --debug-configuration Diagnose configuration\n  * --debug-building Report which targets are built with what properties\n  * --debug-generator Diagnose generator search/execution\n\nFurther Help:\n\n  The following options can be used to obtain additional documentation.\n\n  * --help-options Print more obscure command line options.\n  * --help-internal Boost.Build implementation details.\n  * --help-doc-options Implementation details doc formatting.\n\n...found 1 target...\n\n```\n\n1.69.0 需要编译部分：\n\n```sh\n./b2 --show-libraries\n```\n\n```sh\n- atomic\n- chrono\n- container\n- context\n- contract\n- coroutine\n- date_time\n- exception\n- fiber\n- filesystem\n- graph\n- graph_parallel\n- iostreams\n- locale\n- log\n- math\n- mpi\n- program_options\n- python\n- random\n- regex\n- serialization\n- stacktrace\n- system\n- test\n- thread\n- timer\n- type_erasure\n- wave\n```\n","source":"_posts/学习笔记/iOS/iOS之编程语言/CAlians/boost-b2.md","raw":"# boost 编译器 b2\n\n```sh\n./b2 --help\n```\n\n```sh\nBoost.Build 2018.02-git\n\nProject-specific help:\n\n  Project has jamfile at Jamroot\n\nUsage:\n\n  b2 [options] [properties] [install|stage]\n\n  Builds and installs Boost.\n\nTargets and Related Options:\n\n  install                 Install headers and compiled library files to the\n  =======                 configured locations (below).\n\n  --prefix=<PREFIX>       Install architecture independent files here.\n                          Default; C:\\Boost on Win32\n                          Default; /usr/local on Unix. Linux, etc.\n\n  --exec-prefix=<EPREFIX> Install architecture dependent files here.\n                          Default; <PREFIX>\n\n  --libdir=<DIR>          Install library files here.\n                          Default; <EPREFIX>/lib\n\n  --includedir=<HDRDIR>   Install header files here.\n                          Default; <PREFIX>/include\n\n  stage                   Build and install only compiled library files to the\n  =====                   stage directory.\n\n  --stagedir=<STAGEDIR>   Install library files here\n                          Default; ./stage\n\nOther Options:\n\n  --build-type=<type>     Build the specified pre-defined set of variations of\n                          the libraries. Note, that which variants get built\n                          depends on what each library supports.\n\n                              -- minimal -- (default) Builds a minimal set of\n                              variants. On Windows, these are static\n                              multithreaded libraries in debug and release\n                              modes, using shared runtime. On Linux, these are\n                              static and shared multithreaded libraries in\n                              release mode.\n\n                              -- complete -- Build all possible variations.\n\n  --build-dir=DIR         Build in this location instead of building within\n                          the distribution tree. Recommended!\n\n  --show-libraries        Display the list of Boost libraries that require\n                          build and installation steps, and then exit.\n\n  --layout=<layout>       Determine whether to choose library names and header\n                          locations such that multiple versions of Boost or\n                          multiple compilers can be used on the same system.\n\n                              -- versioned -- Names of boost binaries include\n                              the Boost version number, name and version of\n                              the compiler and encoded build properties. Boost\n                              headers are installed in a subdirectory of\n                              <HDRDIR> whose name contains the Boost version\n                              number.\n\n                              -- tagged -- Names of boost binaries include the\n                              encoded build properties such as variant and\n                              threading, but do not including compiler name\n                              and version, or Boost version. This option is\n                              useful if you build several variants of Boost,\n                              using the same compiler.\n\n                              -- system -- Binaries names do not include the\n                              Boost version number or the name and version\n                              number of the compiler. Boost headers are\n                              installed directly into <HDRDIR>. This option is\n                              intended for system integrators building\n                              distribution packages.\n\n                          The default value is 'versioned' on Windows, and\n                          'system' on Unix.\n\n  --buildid=ID            Add the specified ID to the name of built libraries.\n                          The default is to not add anything.\n\n  --python-buildid=ID     Add the specified ID to the name of built libraries\n                          that depend on Python. The default is to not add\n                          anything. This ID is added in addition to --buildid.\n\n  --help                  This message.\n\n  --with-<library>        Build and install the specified <library>. If this\n                          option is used, only libraries specified using this\n                          option will be built.\n\n  --without-<library>     Do not build, stage, or install the specified\n                          <library>. By default, all libraries are built.\n\nProperties:\n\n  toolset=toolset         Indicate the toolset to build with.\n\n  variant=debug|release   Select the build variant\n\n  link=static|shared      Whether to build static or shared libraries\n\n  threading=single|multi  Whether to build single or multithreaded binaries\n\n  runtime-link=static|shared\n                          Whether to link to static or shared C and C++\n                          runtime.\n\n\nGeneral command line usage:\n\n    b2 [options] [properties] [targets]\n\n  Options, properties and targets can be specified in any order.\n      \nImportant Options:\n\n  * --clean Remove targets instead of building\n  * -a Rebuild everything\n  * -n Don't execute the commands, only print them\n  * -d+2 Show commands as they are executed\n  * -d0 Suppress all informational messages\n  * -q Stop at first error\n  * --reconfigure Rerun all configuration checks\n  * --debug-configuration Diagnose configuration\n  * --debug-building Report which targets are built with what properties\n  * --debug-generator Diagnose generator search/execution\n\nFurther Help:\n\n  The following options can be used to obtain additional documentation.\n\n  * --help-options Print more obscure command line options.\n  * --help-internal Boost.Build implementation details.\n  * --help-doc-options Implementation details doc formatting.\n\n...found 1 target...\n\n```\n\n1.69.0 需要编译部分：\n\n```sh\n./b2 --show-libraries\n```\n\n```sh\n- atomic\n- chrono\n- container\n- context\n- contract\n- coroutine\n- date_time\n- exception\n- fiber\n- filesystem\n- graph\n- graph_parallel\n- iostreams\n- locale\n- log\n- math\n- mpi\n- program_options\n- python\n- random\n- regex\n- serialization\n- stacktrace\n- system\n- test\n- thread\n- timer\n- type_erasure\n- wave\n```\n","slug":"学习笔记/iOS/iOS之编程语言/CAlians/boost-b2","published":1,"date":"2021-02-24T12:31:09.255Z","updated":"2021-02-24T12:31:09.255Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tj3002zw37ucjhd82tl","content":"<h1 id=\"boost-编译器-b2\"><a class=\"markdownIt-Anchor\" href=\"#boost-编译器-b2\"></a> boost 编译器 b2</h1>\n<pre class=\"highlight\"><code class=\"sh\">./b2 --<span class=\"hljs-built_in\">help</span>\n</code></pre>\n<pre class=\"highlight\"><code class=\"sh\">Boost.Build 2018.02-git\n\nProject-specific <span class=\"hljs-built_in\">help</span>:\n\n  Project has jamfile at Jamroot\n\nUsage:\n\n  b2 [options] [properties] [install|stage]\n\n  Builds and installs Boost.\n\nTargets and Related Options:\n\n  install                 Install headers and compiled library files to the\n  =======                 configured locations (below).\n\n  --prefix=&lt;PREFIX&gt;       Install architecture independent files here.\n                          Default; C:\\Boost on Win32\n                          Default; /usr/<span class=\"hljs-built_in\">local</span> on Unix. Linux, etc.\n\n  --<span class=\"hljs-built_in\">exec</span>-prefix=&lt;EPREFIX&gt; Install architecture dependent files here.\n                          Default; &lt;PREFIX&gt;\n\n  --libdir=&lt;DIR&gt;          Install library files here.\n                          Default; &lt;EPREFIX&gt;/lib\n\n  --includedir=&lt;HDRDIR&gt;   Install header files here.\n                          Default; &lt;PREFIX&gt;/include\n\n  stage                   Build and install only compiled library files to the\n  =====                   stage directory.\n\n  --stagedir=&lt;STAGEDIR&gt;   Install library files here\n                          Default; ./stage\n\nOther Options:\n\n  --build-type=&lt;<span class=\"hljs-built_in\">type</span>&gt;     Build the specified pre-defined <span class=\"hljs-built_in\">set</span> of variations of\n                          the libraries. Note, that <span class=\"hljs-built_in\">which</span> variants get built\n                          depends on what each library supports.\n\n                              -- minimal -- (default) Builds a minimal <span class=\"hljs-built_in\">set</span> of\n                              variants. On Windows, these are static\n                              multithreaded libraries <span class=\"hljs-keyword\">in</span> debug and release\n                              modes, using shared runtime. On Linux, these are\n                              static and shared multithreaded libraries <span class=\"hljs-keyword\">in</span>\n                              release mode.\n\n                              -- complete -- Build all possible variations.\n\n  --build-dir=DIR         Build <span class=\"hljs-keyword\">in</span> this location instead of building within\n                          the distribution tree. Recommended!\n\n  --show-libraries        Display the list of Boost libraries that require\n                          build and installation steps, and <span class=\"hljs-keyword\">then</span> <span class=\"hljs-built_in\">exit</span>.\n\n  --layout=&lt;layout&gt;       Determine whether to choose library names and header\n                          locations such that multiple versions of Boost or\n                          multiple compilers can be used on the same system.\n\n                              -- versioned -- Names of boost binaries include\n                              the Boost version number, name and version of\n                              the compiler and encoded build properties. Boost\n                              headers are installed <span class=\"hljs-keyword\">in</span> a subdirectory of\n                              &lt;HDRDIR&gt; whose name contains the Boost version\n                              number.\n\n                              -- tagged -- Names of boost binaries include the\n                              encoded build properties such as variant and\n                              threading, but <span class=\"hljs-keyword\">do</span> not including compiler name\n                              and version, or Boost version. This option is\n                              useful <span class=\"hljs-keyword\">if</span> you build several variants of Boost,\n                              using the same compiler.\n\n                              -- system -- Binaries names <span class=\"hljs-keyword\">do</span> not include the\n                              Boost version number or the name and version\n                              number of the compiler. Boost headers are\n                              installed directly into &lt;HDRDIR&gt;. This option is\n                              intended <span class=\"hljs-keyword\">for</span> system integrators building\n                              distribution packages.\n\n                          The default value is <span class=\"hljs-string\">'versioned'</span> on Windows, and\n                          <span class=\"hljs-string\">'system'</span> on Unix.\n\n  --buildid=ID            Add the specified ID to the name of built libraries.\n                          The default is to not add anything.\n\n  --python-buildid=ID     Add the specified ID to the name of built libraries\n                          that depend on Python. The default is to not add\n                          anything. This ID is added <span class=\"hljs-keyword\">in</span> addition to --buildid.\n\n  --<span class=\"hljs-built_in\">help</span>                  This message.\n\n  --with-&lt;library&gt;        Build and install the specified &lt;library&gt;. If this\n                          option is used, only libraries specified using this\n                          option will be built.\n\n  --without-&lt;library&gt;     Do not build, stage, or install the specified\n                          &lt;library&gt;. By default, all libraries are built.\n\nProperties:\n\n  toolset=toolset         Indicate the toolset to build with.\n\n  variant=debug|release   Select the build variant\n\n  link=static|shared      Whether to build static or shared libraries\n\n  threading=single|multi  Whether to build single or multithreaded binaries\n\n  runtime-link=static|shared\n                          Whether to link to static or shared C and C++\n                          runtime.\n\n\nGeneral <span class=\"hljs-built_in\">command</span> line usage:\n\n    b2 [options] [properties] [targets]\n\n  Options, properties and targets can be specified <span class=\"hljs-keyword\">in</span> any order.\n      \nImportant Options:\n\n  * --clean Remove targets instead of building\n  * -a Rebuild everything\n  * -n Don<span class=\"hljs-string\">'t execute the commands, only print them\n  * -d+2 Show commands as they are executed\n  * -d0 Suppress all informational messages\n  * -q Stop at first error\n  * --reconfigure Rerun all configuration checks\n  * --debug-configuration Diagnose configuration\n  * --debug-building Report which targets are built with what properties\n  * --debug-generator Diagnose generator search/execution\n\nFurther Help:\n\n  The following options can be used to obtain additional documentation.\n\n  * --help-options Print more obscure command line options.\n  * --help-internal Boost.Build implementation details.\n  * --help-doc-options Implementation details doc formatting.\n\n...found 1 target...\n\n</span></code></pre>\n<p>1.69.0 需要编译部分：</p>\n<pre class=\"highlight\"><code class=\"sh\">./b2 --show-libraries\n</code></pre>\n<pre class=\"highlight\"><code class=\"sh\">- atomic\n- chrono\n- container\n- context\n- contract\n- coroutine\n- date_time\n- exception\n- fiber\n- filesystem\n- graph\n- graph_parallel\n- iostreams\n- locale\n- <span class=\"hljs-built_in\">log</span>\n- math\n- mpi\n- program_options\n- python\n- random\n- regex\n- serialization\n- stacktrace\n- system\n- <span class=\"hljs-built_in\">test</span>\n- thread\n- timer\n- type_erasure\n- wave\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"boost-编译器-b2\"><a class=\"markdownIt-Anchor\" href=\"#boost-编译器-b2\"></a> boost 编译器 b2</h1>\n<pre class=\"highlight\"><code class=\"sh\">./b2 --<span class=\"hljs-built_in\">help</span>\n</code></pre>\n<pre class=\"highlight\"><code class=\"sh\">Boost.Build 2018.02-git\n\nProject-specific <span class=\"hljs-built_in\">help</span>:\n\n  Project has jamfile at Jamroot\n\nUsage:\n\n  b2 [options] [properties] [install|stage]\n\n  Builds and installs Boost.\n\nTargets and Related Options:\n\n  install                 Install headers and compiled library files to the\n  =======                 configured locations (below).\n\n  --prefix=&lt;PREFIX&gt;       Install architecture independent files here.\n                          Default; C:\\Boost on Win32\n                          Default; /usr/<span class=\"hljs-built_in\">local</span> on Unix. Linux, etc.\n\n  --<span class=\"hljs-built_in\">exec</span>-prefix=&lt;EPREFIX&gt; Install architecture dependent files here.\n                          Default; &lt;PREFIX&gt;\n\n  --libdir=&lt;DIR&gt;          Install library files here.\n                          Default; &lt;EPREFIX&gt;/lib\n\n  --includedir=&lt;HDRDIR&gt;   Install header files here.\n                          Default; &lt;PREFIX&gt;/include\n\n  stage                   Build and install only compiled library files to the\n  =====                   stage directory.\n\n  --stagedir=&lt;STAGEDIR&gt;   Install library files here\n                          Default; ./stage\n\nOther Options:\n\n  --build-type=&lt;<span class=\"hljs-built_in\">type</span>&gt;     Build the specified pre-defined <span class=\"hljs-built_in\">set</span> of variations of\n                          the libraries. Note, that <span class=\"hljs-built_in\">which</span> variants get built\n                          depends on what each library supports.\n\n                              -- minimal -- (default) Builds a minimal <span class=\"hljs-built_in\">set</span> of\n                              variants. On Windows, these are static\n                              multithreaded libraries <span class=\"hljs-keyword\">in</span> debug and release\n                              modes, using shared runtime. On Linux, these are\n                              static and shared multithreaded libraries <span class=\"hljs-keyword\">in</span>\n                              release mode.\n\n                              -- complete -- Build all possible variations.\n\n  --build-dir=DIR         Build <span class=\"hljs-keyword\">in</span> this location instead of building within\n                          the distribution tree. Recommended!\n\n  --show-libraries        Display the list of Boost libraries that require\n                          build and installation steps, and <span class=\"hljs-keyword\">then</span> <span class=\"hljs-built_in\">exit</span>.\n\n  --layout=&lt;layout&gt;       Determine whether to choose library names and header\n                          locations such that multiple versions of Boost or\n                          multiple compilers can be used on the same system.\n\n                              -- versioned -- Names of boost binaries include\n                              the Boost version number, name and version of\n                              the compiler and encoded build properties. Boost\n                              headers are installed <span class=\"hljs-keyword\">in</span> a subdirectory of\n                              &lt;HDRDIR&gt; whose name contains the Boost version\n                              number.\n\n                              -- tagged -- Names of boost binaries include the\n                              encoded build properties such as variant and\n                              threading, but <span class=\"hljs-keyword\">do</span> not including compiler name\n                              and version, or Boost version. This option is\n                              useful <span class=\"hljs-keyword\">if</span> you build several variants of Boost,\n                              using the same compiler.\n\n                              -- system -- Binaries names <span class=\"hljs-keyword\">do</span> not include the\n                              Boost version number or the name and version\n                              number of the compiler. Boost headers are\n                              installed directly into &lt;HDRDIR&gt;. This option is\n                              intended <span class=\"hljs-keyword\">for</span> system integrators building\n                              distribution packages.\n\n                          The default value is <span class=\"hljs-string\">'versioned'</span> on Windows, and\n                          <span class=\"hljs-string\">'system'</span> on Unix.\n\n  --buildid=ID            Add the specified ID to the name of built libraries.\n                          The default is to not add anything.\n\n  --python-buildid=ID     Add the specified ID to the name of built libraries\n                          that depend on Python. The default is to not add\n                          anything. This ID is added <span class=\"hljs-keyword\">in</span> addition to --buildid.\n\n  --<span class=\"hljs-built_in\">help</span>                  This message.\n\n  --with-&lt;library&gt;        Build and install the specified &lt;library&gt;. If this\n                          option is used, only libraries specified using this\n                          option will be built.\n\n  --without-&lt;library&gt;     Do not build, stage, or install the specified\n                          &lt;library&gt;. By default, all libraries are built.\n\nProperties:\n\n  toolset=toolset         Indicate the toolset to build with.\n\n  variant=debug|release   Select the build variant\n\n  link=static|shared      Whether to build static or shared libraries\n\n  threading=single|multi  Whether to build single or multithreaded binaries\n\n  runtime-link=static|shared\n                          Whether to link to static or shared C and C++\n                          runtime.\n\n\nGeneral <span class=\"hljs-built_in\">command</span> line usage:\n\n    b2 [options] [properties] [targets]\n\n  Options, properties and targets can be specified <span class=\"hljs-keyword\">in</span> any order.\n      \nImportant Options:\n\n  * --clean Remove targets instead of building\n  * -a Rebuild everything\n  * -n Don<span class=\"hljs-string\">'t execute the commands, only print them\n  * -d+2 Show commands as they are executed\n  * -d0 Suppress all informational messages\n  * -q Stop at first error\n  * --reconfigure Rerun all configuration checks\n  * --debug-configuration Diagnose configuration\n  * --debug-building Report which targets are built with what properties\n  * --debug-generator Diagnose generator search/execution\n\nFurther Help:\n\n  The following options can be used to obtain additional documentation.\n\n  * --help-options Print more obscure command line options.\n  * --help-internal Boost.Build implementation details.\n  * --help-doc-options Implementation details doc formatting.\n\n...found 1 target...\n\n</span></code></pre>\n<p>1.69.0 需要编译部分：</p>\n<pre class=\"highlight\"><code class=\"sh\">./b2 --show-libraries\n</code></pre>\n<pre class=\"highlight\"><code class=\"sh\">- atomic\n- chrono\n- container\n- context\n- contract\n- coroutine\n- date_time\n- exception\n- fiber\n- filesystem\n- graph\n- graph_parallel\n- iostreams\n- locale\n- <span class=\"hljs-built_in\">log</span>\n- math\n- mpi\n- program_options\n- python\n- random\n- regex\n- serialization\n- stacktrace\n- system\n- <span class=\"hljs-built_in\">test</span>\n- thread\n- timer\n- type_erasure\n- wave\n</code></pre>\n"},{"_content":"# OC 进阶\n\n## 1. [iOS底层原理总结 - 探寻OC对象的本质](https://juejin.cn/post/6844903588150378509)\n","source":"_posts/学习笔记/iOS/iOS之编程语言/Objective-C/OC进阶.md","raw":"# OC 进阶\n\n## 1. [iOS底层原理总结 - 探寻OC对象的本质](https://juejin.cn/post/6844903588150378509)\n","slug":"学习笔记/iOS/iOS之编程语言/Objective-C/OC进阶","published":1,"date":"2021-03-13T03:22:06.938Z","updated":"2021-03-13T03:22:38.078Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tj30030w37uh9q405n0","content":"<h1 id=\"oc-进阶\"><a class=\"markdownIt-Anchor\" href=\"#oc-进阶\"></a> OC 进阶</h1>\n<h2 id=\"1-ios底层原理总结-探寻oc对象的本质\"><a class=\"markdownIt-Anchor\" href=\"#1-ios底层原理总结-探寻oc对象的本质\"></a> 1. <a href=\"https://juejin.cn/post/6844903588150378509\">iOS底层原理总结 - 探寻OC对象的本质</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"oc-进阶\"><a class=\"markdownIt-Anchor\" href=\"#oc-进阶\"></a> OC 进阶</h1>\n<h2 id=\"1-ios底层原理总结-探寻oc对象的本质\"><a class=\"markdownIt-Anchor\" href=\"#1-ios底层原理总结-探寻oc对象的本质\"></a> 1. <a href=\"https://juejin.cn/post/6844903588150378509\">iOS底层原理总结 - 探寻OC对象的本质</a></h2>\n"},{"_content":"# Objective-C 运行时基本类型\n\n## 1. Class\n\n```Objective-C\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n/* Use `Class` instead of `struct objc_class *` */\n\n/// An opaque type that represents an Objective-C class.\ntypedef struct objc_class *Class;\n```\n\n## 2. id\n\n```Objective-C\n/// Represents an instance of a class.\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n\n/// A pointer to an instance of a class.\ntypedef struct objc_object *id;\n```\n\n## 3. Category\n\n```Objective-C\nstruct objc_category {\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n} \n\n/// An opaque type that represents a category.\ntypedef struct objc_category *Category;\n```\n\n## 4. 属性变量\n\n### 4.1 IVar\n\n```Objective-C\nstruct objc_ivar {\n    char * _Nullable ivar_name                               OBJC2_UNAVAILABLE;\n    char * _Nullable ivar_type                               OBJC2_UNAVAILABLE;\n    int ivar_offset                                          OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_ivar_list {\n    int ivar_count                                           OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;\n} \n\n/// An opaque type that represents an instance variable.\ntypedef struct objc_ivar *Ivar;\n```\n\n## 4.2 attribute_t\n\n```Objective-C\n/// Defines a property attribute\ntypedef struct {\n    const char * _Nonnull name;           /**< The name of the attribute */\n    const char * _Nonnull value;          /**< The value of the attribute (usually empty) */\n} objc_property_attribute_t;\n```\n\n## 5. Method\n\n```Objective-C\n/**\n* objc_selector 在 iOS 的开发文档中没有找到，这段 objc_selector 的定义是在 gnustep/libobjc2 中找的，链接地址：https://github.com/gnustep/libobjc2/blob/master/selector.h \n*/       \nstruct objc_selector\n{\n  union\n {\n  /**\n   * The name of this selector.  Used for unregistered selectors.\n   */\n  const char *name;\n  /**\n   * The index of this selector in the selector table.  When a selector\n   * is registered with the runtime, its name is replaced by an index\n   * uniquely identifying this selector.  The index is used for dispatch.\n   */\n  uintptr_t index;\n };\n /**\n  * The Objective-C type encoding of the message identified by this selector.\n  */\n const char * types;\n};\n\n/// An opaque type that represents a method selector.\ntypedef struct objc_selector *SEL;\n\n/// A pointer to the function of a method implementation. \n#if !OBJC_OLD_DISPATCH_PROTOTYPES\ntypedef void (*IMP)(void /* id, SEL, ... */ ); \n#else\ntypedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); \n#endif\n\nstruct objc_method {\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_method_list {\n    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n} \n\nstruct objc_method_description_list {\n    int count;\n    struct objc_method_description list[1];\n};\n\n/// An opaque type that represents a method in a class definition.\ntypedef struct objc_method *Method;\n```\n\n## 6、Cache\n\n```Objective-C\n#define CACHE_BUCKET_NAME(B)  ((B)->method_name)\n#define CACHE_BUCKET_IMP(B)   ((B)->method_imp)\n#define CACHE_BUCKET_VALID(B) (B)\n#ifndef __LP64__\n#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)>>2) & (mask))\n#else\n#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)>>3)) & (mask))\n#endif\nstruct objc_cache {\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;\n};\n\ntypedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;\n```\n\n## 7. Module\n\n```Objective-C\nstruct objc_module {\n    unsigned long version                                    OBJC2_UNAVAILABLE;\n    unsigned long size                                       OBJC2_UNAVAILABLE;\n    const char * _Nullable name                              OBJC2_UNAVAILABLE;\n    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;\n} \n\ntypedef struct objc_module *Module                           OBJC2_UNAVAILABLE;\n```\n\n## 8. Symtab\n\n```Objective-C\nstruct objc_symtab {\n    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;\n    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;\n    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;\n    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;\n    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;\n} \n\ntypedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;\n```\n\n## 9. 协议\n\n```Objective-C\n/// Represents an instance of a class.\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n\nstruct objc_protocol_list {\n    struct objc_protocol_list * _Nullable next;\n    long count;\n    __unsafe_unretained Protocol * _Nullable list[1];\n};\n\n#ifdef __OBJC__\n@class Protocol;\n#else\ntypedef struct objc_object Protocol;\n#endif\n```\n\n## 10. NSObject 定义\n\n### 10.1 NSObject Protocol\n\n```Objective-C\n@protocol NSObject\n\n- (BOOL)isEqual:(id)object;\n@property (readonly) NSUInteger hash;\n\n@property (readonly) Class superclass;\n- (Class)class OBJC_SWIFT_UNAVAILABLE(\"use 'type(of: anObject)' instead\");\n- (instancetype)self;\n\n- (id)performSelector:(SEL)aSelector;\n- (id)performSelector:(SEL)aSelector withObject:(id)object;\n- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;\n\n- (BOOL)isProxy;\n\n- (BOOL)isKindOfClass:(Class)aClass;\n- (BOOL)isMemberOfClass:(Class)aClass;\n- (BOOL)conformsToProtocol:(Protocol *)aProtocol;\n\n- (BOOL)respondsToSelector:(SEL)aSelector;\n\n- (instancetype)retain OBJC_ARC_UNAVAILABLE;\n- (oneway void)release OBJC_ARC_UNAVAILABLE;\n- (instancetype)autorelease OBJC_ARC_UNAVAILABLE;\n- (NSUInteger)retainCount OBJC_ARC_UNAVAILABLE;\n\n- (struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n\n@property (readonly, copy) NSString *description;\n@optional\n@property (readonly, copy) NSString *debugDescription;\n\n@end\n```\n\n### 10.2 NSObject\n\n```Objective-C\nOBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0)\nOBJC_ROOT_CLASS\nOBJC_EXPORT\n@interface NSObject <NSObject> {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wobjc-interface-ivars\"\n    Class isa  OBJC_ISA_AVAILABILITY;\n#pragma clang diagnostic pop\n}\n\n+ (void)load;\n\n+ (void)initialize;\n- (instancetype)init\n#if NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER\n    NS_DESIGNATED_INITIALIZER\n#endif\n    ;\n\n+ (instancetype)new OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n- (void)dealloc OBJC_SWIFT_UNAVAILABLE(\"use 'deinit' to define a de-initializer\");\n\n- (void)finalize OBJC_DEPRECATED(\"Objective-C garbage collection is no longer supported\");\n\n- (id)copy;\n- (id)mutableCopy;\n\n+ (id)copyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n+ (id)mutableCopyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n\n+ (BOOL)instancesRespondToSelector:(SEL)aSelector;\n+ (BOOL)conformsToProtocol:(Protocol *)protocol;\n- (IMP)methodForSelector:(SEL)aSelector;\n+ (IMP)instanceMethodForSelector:(SEL)aSelector;\n- (void)doesNotRecognizeSelector:(SEL)aSelector;\n\n- (id)forwardingTargetForSelector:(SEL)aSelector OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n- (void)forwardInvocation:(NSInvocation *)anInvocation OBJC_SWIFT_UNAVAILABLE(\"\");\n- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(\"\");\n\n+ (NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(\"\");\n\n- (BOOL)allowsWeakReference UNAVAILABLE_ATTRIBUTE;\n- (BOOL)retainWeakReference UNAVAILABLE_ATTRIBUTE;\n\n+ (BOOL)isSubclassOfClass:(Class)aClass;\n\n+ (BOOL)resolveClassMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n+ (BOOL)resolveInstanceMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n\n+ (NSUInteger)hash;\n+ (Class)superclass;\n+ (Class)class OBJC_SWIFT_UNAVAILABLE(\"use 'aClass.self' instead\");\n+ (NSString *)description;\n+ (NSString *)debugDescription;\n\n@end\n```\n\n### 10.2.1 Foundation 运行时支持\n\n```Objective-C\ntypedef NSString * NSExceptionName NS_EXTENSIBLE_STRING_ENUM;\ntypedef NSString * NSRunLoopMode NS_EXTENSIBLE_STRING_ENUM;\n\nFOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);\nFOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);\n\nFOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);\nFOUNDATION_EXPORT Class _Nullable NSClassFromString(NSString *aClassName);\n\nFOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));\nFOUNDATION_EXPORT Protocol * _Nullable NSProtocolFromString(NSString *namestr) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));\n\nFOUNDATION_EXPORT const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger * _Nullable sizep, NSUInteger * _Nullable alignp);\n\nFOUNDATION_EXPORT void NSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2) NS_NO_TAIL_CALL;\nFOUNDATION_EXPORT void NSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0) NS_NO_TAIL_CALL;\n```\n","source":"_posts/学习笔记/iOS/iOS之编程语言/Objective-C/Objective-C基本类型.md","raw":"# Objective-C 运行时基本类型\n\n## 1. Class\n\n```Objective-C\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n/* Use `Class` instead of `struct objc_class *` */\n\n/// An opaque type that represents an Objective-C class.\ntypedef struct objc_class *Class;\n```\n\n## 2. id\n\n```Objective-C\n/// Represents an instance of a class.\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n\n/// A pointer to an instance of a class.\ntypedef struct objc_object *id;\n```\n\n## 3. Category\n\n```Objective-C\nstruct objc_category {\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n} \n\n/// An opaque type that represents a category.\ntypedef struct objc_category *Category;\n```\n\n## 4. 属性变量\n\n### 4.1 IVar\n\n```Objective-C\nstruct objc_ivar {\n    char * _Nullable ivar_name                               OBJC2_UNAVAILABLE;\n    char * _Nullable ivar_type                               OBJC2_UNAVAILABLE;\n    int ivar_offset                                          OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_ivar_list {\n    int ivar_count                                           OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;\n} \n\n/// An opaque type that represents an instance variable.\ntypedef struct objc_ivar *Ivar;\n```\n\n## 4.2 attribute_t\n\n```Objective-C\n/// Defines a property attribute\ntypedef struct {\n    const char * _Nonnull name;           /**< The name of the attribute */\n    const char * _Nonnull value;          /**< The value of the attribute (usually empty) */\n} objc_property_attribute_t;\n```\n\n## 5. Method\n\n```Objective-C\n/**\n* objc_selector 在 iOS 的开发文档中没有找到，这段 objc_selector 的定义是在 gnustep/libobjc2 中找的，链接地址：https://github.com/gnustep/libobjc2/blob/master/selector.h \n*/       \nstruct objc_selector\n{\n  union\n {\n  /**\n   * The name of this selector.  Used for unregistered selectors.\n   */\n  const char *name;\n  /**\n   * The index of this selector in the selector table.  When a selector\n   * is registered with the runtime, its name is replaced by an index\n   * uniquely identifying this selector.  The index is used for dispatch.\n   */\n  uintptr_t index;\n };\n /**\n  * The Objective-C type encoding of the message identified by this selector.\n  */\n const char * types;\n};\n\n/// An opaque type that represents a method selector.\ntypedef struct objc_selector *SEL;\n\n/// A pointer to the function of a method implementation. \n#if !OBJC_OLD_DISPATCH_PROTOTYPES\ntypedef void (*IMP)(void /* id, SEL, ... */ ); \n#else\ntypedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); \n#endif\n\nstruct objc_method {\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_method_list {\n    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n} \n\nstruct objc_method_description_list {\n    int count;\n    struct objc_method_description list[1];\n};\n\n/// An opaque type that represents a method in a class definition.\ntypedef struct objc_method *Method;\n```\n\n## 6、Cache\n\n```Objective-C\n#define CACHE_BUCKET_NAME(B)  ((B)->method_name)\n#define CACHE_BUCKET_IMP(B)   ((B)->method_imp)\n#define CACHE_BUCKET_VALID(B) (B)\n#ifndef __LP64__\n#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)>>2) & (mask))\n#else\n#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)>>3)) & (mask))\n#endif\nstruct objc_cache {\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;\n};\n\ntypedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;\n```\n\n## 7. Module\n\n```Objective-C\nstruct objc_module {\n    unsigned long version                                    OBJC2_UNAVAILABLE;\n    unsigned long size                                       OBJC2_UNAVAILABLE;\n    const char * _Nullable name                              OBJC2_UNAVAILABLE;\n    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;\n} \n\ntypedef struct objc_module *Module                           OBJC2_UNAVAILABLE;\n```\n\n## 8. Symtab\n\n```Objective-C\nstruct objc_symtab {\n    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;\n    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;\n    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;\n    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;\n    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;\n} \n\ntypedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;\n```\n\n## 9. 协议\n\n```Objective-C\n/// Represents an instance of a class.\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n\nstruct objc_protocol_list {\n    struct objc_protocol_list * _Nullable next;\n    long count;\n    __unsafe_unretained Protocol * _Nullable list[1];\n};\n\n#ifdef __OBJC__\n@class Protocol;\n#else\ntypedef struct objc_object Protocol;\n#endif\n```\n\n## 10. NSObject 定义\n\n### 10.1 NSObject Protocol\n\n```Objective-C\n@protocol NSObject\n\n- (BOOL)isEqual:(id)object;\n@property (readonly) NSUInteger hash;\n\n@property (readonly) Class superclass;\n- (Class)class OBJC_SWIFT_UNAVAILABLE(\"use 'type(of: anObject)' instead\");\n- (instancetype)self;\n\n- (id)performSelector:(SEL)aSelector;\n- (id)performSelector:(SEL)aSelector withObject:(id)object;\n- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;\n\n- (BOOL)isProxy;\n\n- (BOOL)isKindOfClass:(Class)aClass;\n- (BOOL)isMemberOfClass:(Class)aClass;\n- (BOOL)conformsToProtocol:(Protocol *)aProtocol;\n\n- (BOOL)respondsToSelector:(SEL)aSelector;\n\n- (instancetype)retain OBJC_ARC_UNAVAILABLE;\n- (oneway void)release OBJC_ARC_UNAVAILABLE;\n- (instancetype)autorelease OBJC_ARC_UNAVAILABLE;\n- (NSUInteger)retainCount OBJC_ARC_UNAVAILABLE;\n\n- (struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n\n@property (readonly, copy) NSString *description;\n@optional\n@property (readonly, copy) NSString *debugDescription;\n\n@end\n```\n\n### 10.2 NSObject\n\n```Objective-C\nOBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0)\nOBJC_ROOT_CLASS\nOBJC_EXPORT\n@interface NSObject <NSObject> {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wobjc-interface-ivars\"\n    Class isa  OBJC_ISA_AVAILABILITY;\n#pragma clang diagnostic pop\n}\n\n+ (void)load;\n\n+ (void)initialize;\n- (instancetype)init\n#if NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER\n    NS_DESIGNATED_INITIALIZER\n#endif\n    ;\n\n+ (instancetype)new OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n- (void)dealloc OBJC_SWIFT_UNAVAILABLE(\"use 'deinit' to define a de-initializer\");\n\n- (void)finalize OBJC_DEPRECATED(\"Objective-C garbage collection is no longer supported\");\n\n- (id)copy;\n- (id)mutableCopy;\n\n+ (id)copyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n+ (id)mutableCopyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n\n+ (BOOL)instancesRespondToSelector:(SEL)aSelector;\n+ (BOOL)conformsToProtocol:(Protocol *)protocol;\n- (IMP)methodForSelector:(SEL)aSelector;\n+ (IMP)instanceMethodForSelector:(SEL)aSelector;\n- (void)doesNotRecognizeSelector:(SEL)aSelector;\n\n- (id)forwardingTargetForSelector:(SEL)aSelector OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n- (void)forwardInvocation:(NSInvocation *)anInvocation OBJC_SWIFT_UNAVAILABLE(\"\");\n- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(\"\");\n\n+ (NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(\"\");\n\n- (BOOL)allowsWeakReference UNAVAILABLE_ATTRIBUTE;\n- (BOOL)retainWeakReference UNAVAILABLE_ATTRIBUTE;\n\n+ (BOOL)isSubclassOfClass:(Class)aClass;\n\n+ (BOOL)resolveClassMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n+ (BOOL)resolveInstanceMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n\n+ (NSUInteger)hash;\n+ (Class)superclass;\n+ (Class)class OBJC_SWIFT_UNAVAILABLE(\"use 'aClass.self' instead\");\n+ (NSString *)description;\n+ (NSString *)debugDescription;\n\n@end\n```\n\n### 10.2.1 Foundation 运行时支持\n\n```Objective-C\ntypedef NSString * NSExceptionName NS_EXTENSIBLE_STRING_ENUM;\ntypedef NSString * NSRunLoopMode NS_EXTENSIBLE_STRING_ENUM;\n\nFOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);\nFOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);\n\nFOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);\nFOUNDATION_EXPORT Class _Nullable NSClassFromString(NSString *aClassName);\n\nFOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));\nFOUNDATION_EXPORT Protocol * _Nullable NSProtocolFromString(NSString *namestr) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));\n\nFOUNDATION_EXPORT const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger * _Nullable sizep, NSUInteger * _Nullable alignp);\n\nFOUNDATION_EXPORT void NSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2) NS_NO_TAIL_CALL;\nFOUNDATION_EXPORT void NSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0) NS_NO_TAIL_CALL;\n```\n","slug":"学习笔记/iOS/iOS之编程语言/Objective-C/Objective-C基本类型","published":1,"date":"2021-02-28T02:27:29.623Z","updated":"2021-04-09T13:33:08.363Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tjh0031w37ud3ui6rt3","content":"<h1 id=\"objective-c-运行时基本类型\"><a class=\"markdownIt-Anchor\" href=\"#objective-c-运行时基本类型\"></a> Objective-C 运行时基本类型</h1>\n<h2 id=\"1-class\"><a class=\"markdownIt-Anchor\" href=\"#1-class\"></a> 1. Class</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">struct objc_class &#123;\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n&#125; OBJC2_UNAVAILABLE;\n/* Use `Class` instead of `struct objc_class *` */\n\n/// An opaque type that represents an Objective-C class.\ntypedef struct objc_class *Class;\n</code></pre>\n<h2 id=\"2-id\"><a class=\"markdownIt-Anchor\" href=\"#2-id\"></a> 2. id</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">/// Represents an instance of a class.\nstruct objc_object &#123;\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n&#125;;\n\n/// A pointer to an instance of a class.\ntypedef struct objc_object *id;\n</code></pre>\n<h2 id=\"3-category\"><a class=\"markdownIt-Anchor\" href=\"#3-category\"></a> 3. Category</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">struct objc_category &#123;\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n&#125; \n\n/// An opaque type that represents a category.\ntypedef struct objc_category *Category;\n</code></pre>\n<h2 id=\"4-属性变量\"><a class=\"markdownIt-Anchor\" href=\"#4-属性变量\"></a> 4. 属性变量</h2>\n<h3 id=\"41-ivar\"><a class=\"markdownIt-Anchor\" href=\"#41-ivar\"></a> 4.1 IVar</h3>\n<pre class=\"highlight\"><code class=\"Objective-C\">struct objc_ivar &#123;\n    char * _Nullable ivar_name                               OBJC2_UNAVAILABLE;\n    char * _Nullable ivar_type                               OBJC2_UNAVAILABLE;\n    int ivar_offset                                          OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n&#125;                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_ivar_list &#123;\n    int ivar_count                                           OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;\n&#125; \n\n/// An opaque type that represents an instance variable.\ntypedef struct objc_ivar *Ivar;\n</code></pre>\n<h2 id=\"42-attribute_t\"><a class=\"markdownIt-Anchor\" href=\"#42-attribute_t\"></a> 4.2 attribute_t</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">/// Defines a property attribute\ntypedef struct &#123;\n    const char * _Nonnull name;           /**&lt; The name of the attribute */\n    const char * _Nonnull value;          /**&lt; The value of the attribute (usually empty) */\n&#125; objc_property_attribute_t;\n</code></pre>\n<h2 id=\"5-method\"><a class=\"markdownIt-Anchor\" href=\"#5-method\"></a> 5. Method</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">/**\n* objc_selector 在 iOS 的开发文档中没有找到，这段 objc_selector 的定义是在 gnustep/libobjc2 中找的，链接地址：https://github.com/gnustep/libobjc2/blob/master/selector.h \n*/       \nstruct objc_selector\n&#123;\n  union\n &#123;\n  /**\n   * The name of this selector.  Used for unregistered selectors.\n   */\n  const char *name;\n  /**\n   * The index of this selector in the selector table.  When a selector\n   * is registered with the runtime, its name is replaced by an index\n   * uniquely identifying this selector.  The index is used for dispatch.\n   */\n  uintptr_t index;\n &#125;;\n /**\n  * The Objective-C type encoding of the message identified by this selector.\n  */\n const char * types;\n&#125;;\n\n/// An opaque type that represents a method selector.\ntypedef struct objc_selector *SEL;\n\n/// A pointer to the function of a method implementation. \n#if !OBJC_OLD_DISPATCH_PROTOTYPES\ntypedef void (*IMP)(void /* id, SEL, ... */ ); \n#else\ntypedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); \n#endif\n\nstruct objc_method &#123;\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;\n&#125;                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_method_list &#123;\n    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n&#125; \n\nstruct objc_method_description_list &#123;\n    int count;\n    struct objc_method_description list[1];\n&#125;;\n\n/// An opaque type that represents a method in a class definition.\ntypedef struct objc_method *Method;\n</code></pre>\n<h2 id=\"6-cache\"><a class=\"markdownIt-Anchor\" href=\"#6-cache\"></a> 6、Cache</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">#define CACHE_BUCKET_NAME(B)  ((B)-&gt;method_name)\n#define CACHE_BUCKET_IMP(B)   ((B)-&gt;method_imp)\n#define CACHE_BUCKET_VALID(B) (B)\n#ifndef __LP64__\n#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)&gt;&gt;2) &amp; (mask))\n#else\n#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)&gt;&gt;3)) &amp; (mask))\n#endif\nstruct objc_cache &#123;\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;\n&#125;;\n\ntypedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;\n</code></pre>\n<h2 id=\"7-module\"><a class=\"markdownIt-Anchor\" href=\"#7-module\"></a> 7. Module</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">struct objc_module &#123;\n    unsigned long version                                    OBJC2_UNAVAILABLE;\n    unsigned long size                                       OBJC2_UNAVAILABLE;\n    const char * _Nullable name                              OBJC2_UNAVAILABLE;\n    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;\n&#125; \n\ntypedef struct objc_module *Module                           OBJC2_UNAVAILABLE;\n</code></pre>\n<h2 id=\"8-symtab\"><a class=\"markdownIt-Anchor\" href=\"#8-symtab\"></a> 8. Symtab</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">struct objc_symtab &#123;\n    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;\n    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;\n    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;\n    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;\n    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;\n&#125; \n\ntypedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;\n</code></pre>\n<h2 id=\"9-协议\"><a class=\"markdownIt-Anchor\" href=\"#9-协议\"></a> 9. 协议</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">/// Represents an instance of a class.\nstruct objc_object &#123;\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n&#125;;\n\nstruct objc_protocol_list &#123;\n    struct objc_protocol_list * _Nullable next;\n    long count;\n    __unsafe_unretained Protocol * _Nullable list[1];\n&#125;;\n\n#ifdef __OBJC__\n@class Protocol;\n#else\ntypedef struct objc_object Protocol;\n#endif\n</code></pre>\n<h2 id=\"10-nsobject-定义\"><a class=\"markdownIt-Anchor\" href=\"#10-nsobject-定义\"></a> 10. NSObject 定义</h2>\n<h3 id=\"101-nsobject-protocol\"><a class=\"markdownIt-Anchor\" href=\"#101-nsobject-protocol\"></a> 10.1 NSObject Protocol</h3>\n<pre class=\"highlight\"><code class=\"Objective-C\">@protocol NSObject\n\n- (BOOL)isEqual:(id)object;\n@property (readonly) NSUInteger hash;\n\n@property (readonly) Class superclass;\n- (Class)class OBJC_SWIFT_UNAVAILABLE(&quot;use 'type(of: anObject)' instead&quot;);\n- (instancetype)self;\n\n- (id)performSelector:(SEL)aSelector;\n- (id)performSelector:(SEL)aSelector withObject:(id)object;\n- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;\n\n- (BOOL)isProxy;\n\n- (BOOL)isKindOfClass:(Class)aClass;\n- (BOOL)isMemberOfClass:(Class)aClass;\n- (BOOL)conformsToProtocol:(Protocol *)aProtocol;\n\n- (BOOL)respondsToSelector:(SEL)aSelector;\n\n- (instancetype)retain OBJC_ARC_UNAVAILABLE;\n- (oneway void)release OBJC_ARC_UNAVAILABLE;\n- (instancetype)autorelease OBJC_ARC_UNAVAILABLE;\n- (NSUInteger)retainCount OBJC_ARC_UNAVAILABLE;\n\n- (struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n\n@property (readonly, copy) NSString *description;\n@optional\n@property (readonly, copy) NSString *debugDescription;\n\n@end\n</code></pre>\n<h3 id=\"102-nsobject\"><a class=\"markdownIt-Anchor\" href=\"#102-nsobject\"></a> 10.2 NSObject</h3>\n<pre class=\"highlight\"><code class=\"Objective-C\">OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0)\nOBJC_ROOT_CLASS\nOBJC_EXPORT\n@interface NSObject &lt;NSObject&gt; &#123;\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored &quot;-Wobjc-interface-ivars&quot;\n    Class isa  OBJC_ISA_AVAILABILITY;\n#pragma clang diagnostic pop\n&#125;\n\n+ (void)load;\n\n+ (void)initialize;\n- (instancetype)init\n#if NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER\n    NS_DESIGNATED_INITIALIZER\n#endif\n    ;\n\n+ (instancetype)new OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);\n+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);\n+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);\n- (void)dealloc OBJC_SWIFT_UNAVAILABLE(&quot;use 'deinit' to define a de-initializer&quot;);\n\n- (void)finalize OBJC_DEPRECATED(&quot;Objective-C garbage collection is no longer supported&quot;);\n\n- (id)copy;\n- (id)mutableCopy;\n\n+ (id)copyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n+ (id)mutableCopyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n\n+ (BOOL)instancesRespondToSelector:(SEL)aSelector;\n+ (BOOL)conformsToProtocol:(Protocol *)protocol;\n- (IMP)methodForSelector:(SEL)aSelector;\n+ (IMP)instanceMethodForSelector:(SEL)aSelector;\n- (void)doesNotRecognizeSelector:(SEL)aSelector;\n\n- (id)forwardingTargetForSelector:(SEL)aSelector OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n- (void)forwardInvocation:(NSInvocation *)anInvocation OBJC_SWIFT_UNAVAILABLE(&quot;&quot;);\n- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(&quot;&quot;);\n\n+ (NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(&quot;&quot;);\n\n- (BOOL)allowsWeakReference UNAVAILABLE_ATTRIBUTE;\n- (BOOL)retainWeakReference UNAVAILABLE_ATTRIBUTE;\n\n+ (BOOL)isSubclassOfClass:(Class)aClass;\n\n+ (BOOL)resolveClassMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n+ (BOOL)resolveInstanceMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n\n+ (NSUInteger)hash;\n+ (Class)superclass;\n+ (Class)class OBJC_SWIFT_UNAVAILABLE(&quot;use 'aClass.self' instead&quot;);\n+ (NSString *)description;\n+ (NSString *)debugDescription;\n\n@end\n</code></pre>\n<h3 id=\"1021-foundation-运行时支持\"><a class=\"markdownIt-Anchor\" href=\"#1021-foundation-运行时支持\"></a> 10.2.1 Foundation 运行时支持</h3>\n<pre class=\"highlight\"><code class=\"Objective-C\">typedef NSString * NSExceptionName NS_EXTENSIBLE_STRING_ENUM;\ntypedef NSString * NSRunLoopMode NS_EXTENSIBLE_STRING_ENUM;\n\nFOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);\nFOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);\n\nFOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);\nFOUNDATION_EXPORT Class _Nullable NSClassFromString(NSString *aClassName);\n\nFOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));\nFOUNDATION_EXPORT Protocol * _Nullable NSProtocolFromString(NSString *namestr) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));\n\nFOUNDATION_EXPORT const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger * _Nullable sizep, NSUInteger * _Nullable alignp);\n\nFOUNDATION_EXPORT void NSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2) NS_NO_TAIL_CALL;\nFOUNDATION_EXPORT void NSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0) NS_NO_TAIL_CALL;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"objective-c-运行时基本类型\"><a class=\"markdownIt-Anchor\" href=\"#objective-c-运行时基本类型\"></a> Objective-C 运行时基本类型</h1>\n<h2 id=\"1-class\"><a class=\"markdownIt-Anchor\" href=\"#1-class\"></a> 1. Class</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">struct objc_class &#123;\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n&#125; OBJC2_UNAVAILABLE;\n/* Use `Class` instead of `struct objc_class *` */\n\n/// An opaque type that represents an Objective-C class.\ntypedef struct objc_class *Class;\n</code></pre>\n<h2 id=\"2-id\"><a class=\"markdownIt-Anchor\" href=\"#2-id\"></a> 2. id</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">/// Represents an instance of a class.\nstruct objc_object &#123;\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n&#125;;\n\n/// A pointer to an instance of a class.\ntypedef struct objc_object *id;\n</code></pre>\n<h2 id=\"3-category\"><a class=\"markdownIt-Anchor\" href=\"#3-category\"></a> 3. Category</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">struct objc_category &#123;\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n&#125; \n\n/// An opaque type that represents a category.\ntypedef struct objc_category *Category;\n</code></pre>\n<h2 id=\"4-属性变量\"><a class=\"markdownIt-Anchor\" href=\"#4-属性变量\"></a> 4. 属性变量</h2>\n<h3 id=\"41-ivar\"><a class=\"markdownIt-Anchor\" href=\"#41-ivar\"></a> 4.1 IVar</h3>\n<pre class=\"highlight\"><code class=\"Objective-C\">struct objc_ivar &#123;\n    char * _Nullable ivar_name                               OBJC2_UNAVAILABLE;\n    char * _Nullable ivar_type                               OBJC2_UNAVAILABLE;\n    int ivar_offset                                          OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n&#125;                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_ivar_list &#123;\n    int ivar_count                                           OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;\n&#125; \n\n/// An opaque type that represents an instance variable.\ntypedef struct objc_ivar *Ivar;\n</code></pre>\n<h2 id=\"42-attribute_t\"><a class=\"markdownIt-Anchor\" href=\"#42-attribute_t\"></a> 4.2 attribute_t</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">/// Defines a property attribute\ntypedef struct &#123;\n    const char * _Nonnull name;           /**&lt; The name of the attribute */\n    const char * _Nonnull value;          /**&lt; The value of the attribute (usually empty) */\n&#125; objc_property_attribute_t;\n</code></pre>\n<h2 id=\"5-method\"><a class=\"markdownIt-Anchor\" href=\"#5-method\"></a> 5. Method</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">/**\n* objc_selector 在 iOS 的开发文档中没有找到，这段 objc_selector 的定义是在 gnustep/libobjc2 中找的，链接地址：https://github.com/gnustep/libobjc2/blob/master/selector.h \n*/       \nstruct objc_selector\n&#123;\n  union\n &#123;\n  /**\n   * The name of this selector.  Used for unregistered selectors.\n   */\n  const char *name;\n  /**\n   * The index of this selector in the selector table.  When a selector\n   * is registered with the runtime, its name is replaced by an index\n   * uniquely identifying this selector.  The index is used for dispatch.\n   */\n  uintptr_t index;\n &#125;;\n /**\n  * The Objective-C type encoding of the message identified by this selector.\n  */\n const char * types;\n&#125;;\n\n/// An opaque type that represents a method selector.\ntypedef struct objc_selector *SEL;\n\n/// A pointer to the function of a method implementation. \n#if !OBJC_OLD_DISPATCH_PROTOTYPES\ntypedef void (*IMP)(void /* id, SEL, ... */ ); \n#else\ntypedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); \n#endif\n\nstruct objc_method &#123;\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;\n&#125;                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_method_list &#123;\n    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n&#125; \n\nstruct objc_method_description_list &#123;\n    int count;\n    struct objc_method_description list[1];\n&#125;;\n\n/// An opaque type that represents a method in a class definition.\ntypedef struct objc_method *Method;\n</code></pre>\n<h2 id=\"6-cache\"><a class=\"markdownIt-Anchor\" href=\"#6-cache\"></a> 6、Cache</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">#define CACHE_BUCKET_NAME(B)  ((B)-&gt;method_name)\n#define CACHE_BUCKET_IMP(B)   ((B)-&gt;method_imp)\n#define CACHE_BUCKET_VALID(B) (B)\n#ifndef __LP64__\n#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)&gt;&gt;2) &amp; (mask))\n#else\n#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)&gt;&gt;3)) &amp; (mask))\n#endif\nstruct objc_cache &#123;\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;\n&#125;;\n\ntypedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;\n</code></pre>\n<h2 id=\"7-module\"><a class=\"markdownIt-Anchor\" href=\"#7-module\"></a> 7. Module</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">struct objc_module &#123;\n    unsigned long version                                    OBJC2_UNAVAILABLE;\n    unsigned long size                                       OBJC2_UNAVAILABLE;\n    const char * _Nullable name                              OBJC2_UNAVAILABLE;\n    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;\n&#125; \n\ntypedef struct objc_module *Module                           OBJC2_UNAVAILABLE;\n</code></pre>\n<h2 id=\"8-symtab\"><a class=\"markdownIt-Anchor\" href=\"#8-symtab\"></a> 8. Symtab</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">struct objc_symtab &#123;\n    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;\n    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;\n    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;\n    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;\n    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;\n&#125; \n\ntypedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;\n</code></pre>\n<h2 id=\"9-协议\"><a class=\"markdownIt-Anchor\" href=\"#9-协议\"></a> 9. 协议</h2>\n<pre class=\"highlight\"><code class=\"Objective-C\">/// Represents an instance of a class.\nstruct objc_object &#123;\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n&#125;;\n\nstruct objc_protocol_list &#123;\n    struct objc_protocol_list * _Nullable next;\n    long count;\n    __unsafe_unretained Protocol * _Nullable list[1];\n&#125;;\n\n#ifdef __OBJC__\n@class Protocol;\n#else\ntypedef struct objc_object Protocol;\n#endif\n</code></pre>\n<h2 id=\"10-nsobject-定义\"><a class=\"markdownIt-Anchor\" href=\"#10-nsobject-定义\"></a> 10. NSObject 定义</h2>\n<h3 id=\"101-nsobject-protocol\"><a class=\"markdownIt-Anchor\" href=\"#101-nsobject-protocol\"></a> 10.1 NSObject Protocol</h3>\n<pre class=\"highlight\"><code class=\"Objective-C\">@protocol NSObject\n\n- (BOOL)isEqual:(id)object;\n@property (readonly) NSUInteger hash;\n\n@property (readonly) Class superclass;\n- (Class)class OBJC_SWIFT_UNAVAILABLE(&quot;use 'type(of: anObject)' instead&quot;);\n- (instancetype)self;\n\n- (id)performSelector:(SEL)aSelector;\n- (id)performSelector:(SEL)aSelector withObject:(id)object;\n- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;\n\n- (BOOL)isProxy;\n\n- (BOOL)isKindOfClass:(Class)aClass;\n- (BOOL)isMemberOfClass:(Class)aClass;\n- (BOOL)conformsToProtocol:(Protocol *)aProtocol;\n\n- (BOOL)respondsToSelector:(SEL)aSelector;\n\n- (instancetype)retain OBJC_ARC_UNAVAILABLE;\n- (oneway void)release OBJC_ARC_UNAVAILABLE;\n- (instancetype)autorelease OBJC_ARC_UNAVAILABLE;\n- (NSUInteger)retainCount OBJC_ARC_UNAVAILABLE;\n\n- (struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n\n@property (readonly, copy) NSString *description;\n@optional\n@property (readonly, copy) NSString *debugDescription;\n\n@end\n</code></pre>\n<h3 id=\"102-nsobject\"><a class=\"markdownIt-Anchor\" href=\"#102-nsobject\"></a> 10.2 NSObject</h3>\n<pre class=\"highlight\"><code class=\"Objective-C\">OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0)\nOBJC_ROOT_CLASS\nOBJC_EXPORT\n@interface NSObject &lt;NSObject&gt; &#123;\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored &quot;-Wobjc-interface-ivars&quot;\n    Class isa  OBJC_ISA_AVAILABILITY;\n#pragma clang diagnostic pop\n&#125;\n\n+ (void)load;\n\n+ (void)initialize;\n- (instancetype)init\n#if NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER\n    NS_DESIGNATED_INITIALIZER\n#endif\n    ;\n\n+ (instancetype)new OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);\n+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);\n+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);\n- (void)dealloc OBJC_SWIFT_UNAVAILABLE(&quot;use 'deinit' to define a de-initializer&quot;);\n\n- (void)finalize OBJC_DEPRECATED(&quot;Objective-C garbage collection is no longer supported&quot;);\n\n- (id)copy;\n- (id)mutableCopy;\n\n+ (id)copyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n+ (id)mutableCopyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n\n+ (BOOL)instancesRespondToSelector:(SEL)aSelector;\n+ (BOOL)conformsToProtocol:(Protocol *)protocol;\n- (IMP)methodForSelector:(SEL)aSelector;\n+ (IMP)instanceMethodForSelector:(SEL)aSelector;\n- (void)doesNotRecognizeSelector:(SEL)aSelector;\n\n- (id)forwardingTargetForSelector:(SEL)aSelector OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n- (void)forwardInvocation:(NSInvocation *)anInvocation OBJC_SWIFT_UNAVAILABLE(&quot;&quot;);\n- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(&quot;&quot;);\n\n+ (NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(&quot;&quot;);\n\n- (BOOL)allowsWeakReference UNAVAILABLE_ATTRIBUTE;\n- (BOOL)retainWeakReference UNAVAILABLE_ATTRIBUTE;\n\n+ (BOOL)isSubclassOfClass:(Class)aClass;\n\n+ (BOOL)resolveClassMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n+ (BOOL)resolveInstanceMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n\n+ (NSUInteger)hash;\n+ (Class)superclass;\n+ (Class)class OBJC_SWIFT_UNAVAILABLE(&quot;use 'aClass.self' instead&quot;);\n+ (NSString *)description;\n+ (NSString *)debugDescription;\n\n@end\n</code></pre>\n<h3 id=\"1021-foundation-运行时支持\"><a class=\"markdownIt-Anchor\" href=\"#1021-foundation-运行时支持\"></a> 10.2.1 Foundation 运行时支持</h3>\n<pre class=\"highlight\"><code class=\"Objective-C\">typedef NSString * NSExceptionName NS_EXTENSIBLE_STRING_ENUM;\ntypedef NSString * NSRunLoopMode NS_EXTENSIBLE_STRING_ENUM;\n\nFOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);\nFOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);\n\nFOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);\nFOUNDATION_EXPORT Class _Nullable NSClassFromString(NSString *aClassName);\n\nFOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));\nFOUNDATION_EXPORT Protocol * _Nullable NSProtocolFromString(NSString *namestr) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));\n\nFOUNDATION_EXPORT const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger * _Nullable sizep, NSUInteger * _Nullable alignp);\n\nFOUNDATION_EXPORT void NSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2) NS_NO_TAIL_CALL;\nFOUNDATION_EXPORT void NSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0) NS_NO_TAIL_CALL;\n</code></pre>\n"},{"_content":"# iOS 技术点\n\n并发编程\n\n内存管理\n\nBlock\n\n消息转发\n\n算法、安全、逆向、证书\n\n网络协议\n\n设计模式（工程、代码）\n\n工程化\n\n组件化\n\n性能优化、瘦身\n\n架构\n\n大前端：WebKit、Flutter、React-Native、Dcloud、Capacitor、小程序\n\n归档\n\n编译器、调试器\n\nOS 内核\n\n布局\n\nView 渲染及流程\n\n日志、埋点、异常捕获、符号化、Mac-O 文件\n\niOS SDKs\n\n第三方库源码阅读\n\nSwift\n\nSwfit 与 OC 混编相关研究\n\n蓝牙及协议\n","source":"_posts/学习笔记/iOS/iOS之编程语言/Objective-C/iOS编程语言之Objective-C.md","raw":"# iOS 技术点\n\n并发编程\n\n内存管理\n\nBlock\n\n消息转发\n\n算法、安全、逆向、证书\n\n网络协议\n\n设计模式（工程、代码）\n\n工程化\n\n组件化\n\n性能优化、瘦身\n\n架构\n\n大前端：WebKit、Flutter、React-Native、Dcloud、Capacitor、小程序\n\n归档\n\n编译器、调试器\n\nOS 内核\n\n布局\n\nView 渲染及流程\n\n日志、埋点、异常捕获、符号化、Mac-O 文件\n\niOS SDKs\n\n第三方库源码阅读\n\nSwift\n\nSwfit 与 OC 混编相关研究\n\n蓝牙及协议\n","slug":"学习笔记/iOS/iOS之编程语言/Objective-C/iOS编程语言之Objective-C","published":1,"date":"2021-02-24T12:31:09.260Z","updated":"2021-03-01T00:12:20.417Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tjq0032w37u1eo192r7","content":"<h1 id=\"ios-技术点\"><a class=\"markdownIt-Anchor\" href=\"#ios-技术点\"></a> iOS 技术点</h1>\n<p>并发编程</p>\n<p>内存管理</p>\n<p>Block</p>\n<p>消息转发</p>\n<p>算法、安全、逆向、证书</p>\n<p>网络协议</p>\n<p>设计模式（工程、代码）</p>\n<p>工程化</p>\n<p>组件化</p>\n<p>性能优化、瘦身</p>\n<p>架构</p>\n<p>大前端：WebKit、Flutter、React-Native、Dcloud、Capacitor、小程序</p>\n<p>归档</p>\n<p>编译器、调试器</p>\n<p>OS 内核</p>\n<p>布局</p>\n<p>View 渲染及流程</p>\n<p>日志、埋点、异常捕获、符号化、Mac-O 文件</p>\n<p>iOS SDKs</p>\n<p>第三方库源码阅读</p>\n<p>Swift</p>\n<p>Swfit 与 OC 混编相关研究</p>\n<p>蓝牙及协议</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios-技术点\"><a class=\"markdownIt-Anchor\" href=\"#ios-技术点\"></a> iOS 技术点</h1>\n<p>并发编程</p>\n<p>内存管理</p>\n<p>Block</p>\n<p>消息转发</p>\n<p>算法、安全、逆向、证书</p>\n<p>网络协议</p>\n<p>设计模式（工程、代码）</p>\n<p>工程化</p>\n<p>组件化</p>\n<p>性能优化、瘦身</p>\n<p>架构</p>\n<p>大前端：WebKit、Flutter、React-Native、Dcloud、Capacitor、小程序</p>\n<p>归档</p>\n<p>编译器、调试器</p>\n<p>OS 内核</p>\n<p>布局</p>\n<p>View 渲染及流程</p>\n<p>日志、埋点、异常捕获、符号化、Mac-O 文件</p>\n<p>iOS SDKs</p>\n<p>第三方库源码阅读</p>\n<p>Swift</p>\n<p>Swfit 与 OC 混编相关研究</p>\n<p>蓝牙及协议</p>\n"},{"_content":"# swift 构造器\n\n1、默认初始化器\nSwift 为所有没有提供初始化器的结构体或类提供了一个默认的初始化器来给所有的属性提供了默认值。\n这个默认的初始化器只是简单地创建了一个所有属性都有默认值的新实例\n\n2、结构体类型的成员初始化器\n如果结构体类型中没有定义任何自定义初始化器，它会自动获得一个成员初始化器。\n不同于默认初始化器，结构体会接收成员初始化器即使它的存储属性没有默认值。\n\n3、值类型的初始化器委托\n初始化器可以调用其他初始化器来执行部分实例的初始化。这个过程，就是所谓的初始化器委托，避免了多个初始化器里冗余代码。\n\n初始化器委托的运作，以及允许那些形式的委托，这些规则对于值类型和类类型是不同的。值类型(结构体和枚举)不支持继承，\n所以他它们的初始化器委托的过程相当简单，因为它们只能提供它们自己为另一个初始化器委托。如同继承里描述的那样，\n总之，类可以从其他类继承。这就意味着类有额外的责任来确保它们继承的所有存储属性在初始化期间都分配了一个合适的值。\n这些责任在下边的类的继承和初始化里做详述。\n\n4、类的继承和初始化\n所有类的存储属性——包括从它的父类继承的所有属性——都必须在初始化期间分配初始值。\n\nSwift 为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值。这些就是所谓的指定初始化器和便捷初始化器。\n*指定初始化器\n\n*便利构造器\n   convenience:便利，使用convenience修饰的构造函数叫做便利构造函数\n   便利构造函数通常用在对系统的类进行构造函数的扩充时使用。\n   便利构造函数的特点：\n   1、便利构造函数通常都是写在extension里面\n   2、便利函数init前面需要加载convenience\n   3、在便利构造函数中需要明确的调用self.init()\n\n4.1、类类型的初始化器委托\n为了简化指定和便捷初始化器之间的调用关系，Swift 在初始化器之间的委托调用有下面的三个规则:\n\n规则 1\n指定初始化器必须从它的直系父类调用指定初始化器。\n\n规则 2\n便捷初始化器必须从相同的类里调用另一个初始化器。\n\n规则 3\n便捷初始化器最终必须调用一个指定初始化器。\n\n4.2、两段式初始化\nSwift 的类初始化是一个两段式过程。在第一个阶段，每一个存储属性被引入类为分配了一个初始值。\n一旦每个存储属性的初始状态被确定，第二个阶段就开始了，每个类都有机会在新的实例准备使用之前来定制它的存储属性。\n\nSwift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成：\n\n安全检查 1\n指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。\n\n如上所述，一个对象的内存只有在其所有储存型属性确定之后才能完全初始化。为了满足这一规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。\n\n安全检查 2\n指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值。如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖。\n\n安全检查 3\n便捷初始化器必须先委托同类中的其它初始化器，然后再为任意属性赋新值（包括同类里定义的属性）。如果没这么做，\n便捷构初始化器赋予的新值将被自己类中其它指定初始化器所覆盖。\n\n安全检查 4\n初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用 self 作为值。\n\n直到第一阶段结束类实例才完全合法。属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。\n\n以下是两段初始化过程，基于上述四种检查的流程：\n\n4.3、两端初始化总结：\n阶段 1\n指定或便捷初始化器在类中被调用；\n为这个类的新实例分配内存。内存还没有被初始化；\n这个类的指定初始化器确保所有由此类引入的存储属性都有一个值。现在这些存储属性的内存被初始化了；\n指定初始化器上交父类的初始化器为其存储属性执行相同的任务；\n这个调用父类初始化器的过程将沿着初始化器链一直向上进行，直到到达初始化器链的最顶部；\n一旦达了初始化器链的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成。\n\n阶段 2\n从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问 self 并且可以修改它的属性，调用它的实例方法等等；\n最终，链中任何便捷初始化器都有机会定制实例以及使用 slef 。\n\n5、初始化器的继承和重写\n\n不像在 Objective-C 中的子类，Swift 的子类不会默认继承父类的初始化器。\nSwift 的这种机制防止父类的简单初始化器被一个更专用的子类继承并被用来创建一个没有完全或错误初始化的新实例的情况发生。\n\n初始化器的自动继承\n如上所述，子类默认不会继承父类初始化器。总之，在特定的情况下父类初始化器是可以被自动继承的。实际上，这意味着在许多场景中你不必重写父类初始化器，只要可以安全操作，你就可以毫不费力地继承父类的初始化器。\n\n假设你为你子类引入的任何新的属性都提供了默认值，请遵守以下2个规则：\n\n规则1\n如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器。\n\n规则2\n如果你的子类提供了所有父类指定初始化器的实现——要么是通过规则1继承来的，要么通过在定义中提供自定义实现的——那么它自动继承所有的父类便捷初始化器。\n\n就算你的子类添加了更多的便捷初始化器，这些规则仍然适用。\n\n*注意\n子类能够以便捷初始化器的形式实现父类指定初始化器来作为满足规则2的一部分。\n\n6、可失败初始化器\n定义类、结构体或枚举初始化时可以失败在某些情况下会管大用。这个失败可能由以下几种方式触发，包括给初始化传入无效的形式参数值，\n或缺少某种外部所需的资源，又或是其他阻止初始化的情况。\n\n6.1、枚举的可失败初始化器\n你可以使用一个可失败初始化器来在带一个或多个形式参数的枚举中选择合适的情况。如果提供的形式参数没有匹配合适的情况初始化器就可能失败。\n\n6.2、带有原始值枚举的可失败初始化器\n带有原始值的枚举会自动获得一个可失败初始化器 init?(rawValue:) ，\n该可失败初始化器接收一个名为 rawValue 的合适的原始值类型形式参数如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就触发初始化失败。\n\n为了妥善处理这种可能失败的情况，在类、结构体或枚举中定义一个或多个可失败的初始化器。通过在 init 关键字后面添加问号( init? )来写。\n\n6.3、初始化失败的传递\n类，结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器。\n类似地，子类的可失败初始化器可以向上委托到父类的可失败初始化器。\n\n无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。\n\n6.4、重写可失败初始化器\n你可以在子类里重写父类的可失败初始化器。就好比其他的初始化器。或者，你可以用子类的非可失败初始化器来重写父类可失败初始化器。\n这样允许你定义一个初始化不会失败的子类，尽管父类的初始化允许失败。\n\n注意如果你用非可失败的子类初始化器重写了一个可失败初始化器，向上委托到父类初始化器的唯一办法是强制展开父类可失败初始化器的结果。\n\n6.5、可失败初始化器 init!\n通常来讲我们通过在 init 关键字后添加问号 ( init? )的方式来定义一个可失败初始化器以创建一个合适类型的可选项实例。\n另外，你也可以使用可失败初始化器创建一个隐式展开具有合适类型的可选项实例。通过在 init 后面添加惊叹号( init! )是不是问号。\n\n你可以在 init? 初始化器中委托调用 init! 初始化器，反之亦然。 你也可以用 init! 重写 init? ，反之亦然。\n你还可以用 init 委托调用 init! ，尽管当 init! 初始化器导致初始化失败时会触发断言。\n\n7、必要初始化器\n在类的初始化器前添加 required  修饰符来表明所有该类的子类都必须实现该初始化器：\n","source":"_posts/学习笔记/iOS/iOS之编程语言/Swift/Swift 构造器.md","raw":"# swift 构造器\n\n1、默认初始化器\nSwift 为所有没有提供初始化器的结构体或类提供了一个默认的初始化器来给所有的属性提供了默认值。\n这个默认的初始化器只是简单地创建了一个所有属性都有默认值的新实例\n\n2、结构体类型的成员初始化器\n如果结构体类型中没有定义任何自定义初始化器，它会自动获得一个成员初始化器。\n不同于默认初始化器，结构体会接收成员初始化器即使它的存储属性没有默认值。\n\n3、值类型的初始化器委托\n初始化器可以调用其他初始化器来执行部分实例的初始化。这个过程，就是所谓的初始化器委托，避免了多个初始化器里冗余代码。\n\n初始化器委托的运作，以及允许那些形式的委托，这些规则对于值类型和类类型是不同的。值类型(结构体和枚举)不支持继承，\n所以他它们的初始化器委托的过程相当简单，因为它们只能提供它们自己为另一个初始化器委托。如同继承里描述的那样，\n总之，类可以从其他类继承。这就意味着类有额外的责任来确保它们继承的所有存储属性在初始化期间都分配了一个合适的值。\n这些责任在下边的类的继承和初始化里做详述。\n\n4、类的继承和初始化\n所有类的存储属性——包括从它的父类继承的所有属性——都必须在初始化期间分配初始值。\n\nSwift 为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值。这些就是所谓的指定初始化器和便捷初始化器。\n*指定初始化器\n\n*便利构造器\n   convenience:便利，使用convenience修饰的构造函数叫做便利构造函数\n   便利构造函数通常用在对系统的类进行构造函数的扩充时使用。\n   便利构造函数的特点：\n   1、便利构造函数通常都是写在extension里面\n   2、便利函数init前面需要加载convenience\n   3、在便利构造函数中需要明确的调用self.init()\n\n4.1、类类型的初始化器委托\n为了简化指定和便捷初始化器之间的调用关系，Swift 在初始化器之间的委托调用有下面的三个规则:\n\n规则 1\n指定初始化器必须从它的直系父类调用指定初始化器。\n\n规则 2\n便捷初始化器必须从相同的类里调用另一个初始化器。\n\n规则 3\n便捷初始化器最终必须调用一个指定初始化器。\n\n4.2、两段式初始化\nSwift 的类初始化是一个两段式过程。在第一个阶段，每一个存储属性被引入类为分配了一个初始值。\n一旦每个存储属性的初始状态被确定，第二个阶段就开始了，每个类都有机会在新的实例准备使用之前来定制它的存储属性。\n\nSwift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成：\n\n安全检查 1\n指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。\n\n如上所述，一个对象的内存只有在其所有储存型属性确定之后才能完全初始化。为了满足这一规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。\n\n安全检查 2\n指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值。如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖。\n\n安全检查 3\n便捷初始化器必须先委托同类中的其它初始化器，然后再为任意属性赋新值（包括同类里定义的属性）。如果没这么做，\n便捷构初始化器赋予的新值将被自己类中其它指定初始化器所覆盖。\n\n安全检查 4\n初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用 self 作为值。\n\n直到第一阶段结束类实例才完全合法。属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。\n\n以下是两段初始化过程，基于上述四种检查的流程：\n\n4.3、两端初始化总结：\n阶段 1\n指定或便捷初始化器在类中被调用；\n为这个类的新实例分配内存。内存还没有被初始化；\n这个类的指定初始化器确保所有由此类引入的存储属性都有一个值。现在这些存储属性的内存被初始化了；\n指定初始化器上交父类的初始化器为其存储属性执行相同的任务；\n这个调用父类初始化器的过程将沿着初始化器链一直向上进行，直到到达初始化器链的最顶部；\n一旦达了初始化器链的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成。\n\n阶段 2\n从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问 self 并且可以修改它的属性，调用它的实例方法等等；\n最终，链中任何便捷初始化器都有机会定制实例以及使用 slef 。\n\n5、初始化器的继承和重写\n\n不像在 Objective-C 中的子类，Swift 的子类不会默认继承父类的初始化器。\nSwift 的这种机制防止父类的简单初始化器被一个更专用的子类继承并被用来创建一个没有完全或错误初始化的新实例的情况发生。\n\n初始化器的自动继承\n如上所述，子类默认不会继承父类初始化器。总之，在特定的情况下父类初始化器是可以被自动继承的。实际上，这意味着在许多场景中你不必重写父类初始化器，只要可以安全操作，你就可以毫不费力地继承父类的初始化器。\n\n假设你为你子类引入的任何新的属性都提供了默认值，请遵守以下2个规则：\n\n规则1\n如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器。\n\n规则2\n如果你的子类提供了所有父类指定初始化器的实现——要么是通过规则1继承来的，要么通过在定义中提供自定义实现的——那么它自动继承所有的父类便捷初始化器。\n\n就算你的子类添加了更多的便捷初始化器，这些规则仍然适用。\n\n*注意\n子类能够以便捷初始化器的形式实现父类指定初始化器来作为满足规则2的一部分。\n\n6、可失败初始化器\n定义类、结构体或枚举初始化时可以失败在某些情况下会管大用。这个失败可能由以下几种方式触发，包括给初始化传入无效的形式参数值，\n或缺少某种外部所需的资源，又或是其他阻止初始化的情况。\n\n6.1、枚举的可失败初始化器\n你可以使用一个可失败初始化器来在带一个或多个形式参数的枚举中选择合适的情况。如果提供的形式参数没有匹配合适的情况初始化器就可能失败。\n\n6.2、带有原始值枚举的可失败初始化器\n带有原始值的枚举会自动获得一个可失败初始化器 init?(rawValue:) ，\n该可失败初始化器接收一个名为 rawValue 的合适的原始值类型形式参数如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就触发初始化失败。\n\n为了妥善处理这种可能失败的情况，在类、结构体或枚举中定义一个或多个可失败的初始化器。通过在 init 关键字后面添加问号( init? )来写。\n\n6.3、初始化失败的传递\n类，结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器。\n类似地，子类的可失败初始化器可以向上委托到父类的可失败初始化器。\n\n无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。\n\n6.4、重写可失败初始化器\n你可以在子类里重写父类的可失败初始化器。就好比其他的初始化器。或者，你可以用子类的非可失败初始化器来重写父类可失败初始化器。\n这样允许你定义一个初始化不会失败的子类，尽管父类的初始化允许失败。\n\n注意如果你用非可失败的子类初始化器重写了一个可失败初始化器，向上委托到父类初始化器的唯一办法是强制展开父类可失败初始化器的结果。\n\n6.5、可失败初始化器 init!\n通常来讲我们通过在 init 关键字后添加问号 ( init? )的方式来定义一个可失败初始化器以创建一个合适类型的可选项实例。\n另外，你也可以使用可失败初始化器创建一个隐式展开具有合适类型的可选项实例。通过在 init 后面添加惊叹号( init! )是不是问号。\n\n你可以在 init? 初始化器中委托调用 init! 初始化器，反之亦然。 你也可以用 init! 重写 init? ，反之亦然。\n你还可以用 init 委托调用 init! ，尽管当 init! 初始化器导致初始化失败时会触发断言。\n\n7、必要初始化器\n在类的初始化器前添加 required  修饰符来表明所有该类的子类都必须实现该初始化器：\n","slug":"学习笔记/iOS/iOS之编程语言/Swift/Swift 构造器","published":1,"date":"2021-02-24T12:31:09.272Z","updated":"2021-02-24T12:31:09.272Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tjs0033w37ugafs71y3","content":"<h1 id=\"swift-构造器\"><a class=\"markdownIt-Anchor\" href=\"#swift-构造器\"></a> swift 构造器</h1>\n<p>1、默认初始化器<br />\nSwift 为所有没有提供初始化器的结构体或类提供了一个默认的初始化器来给所有的属性提供了默认值。<br />\n这个默认的初始化器只是简单地创建了一个所有属性都有默认值的新实例</p>\n<p>2、结构体类型的成员初始化器<br />\n如果结构体类型中没有定义任何自定义初始化器，它会自动获得一个成员初始化器。<br />\n不同于默认初始化器，结构体会接收成员初始化器即使它的存储属性没有默认值。</p>\n<p>3、值类型的初始化器委托<br />\n初始化器可以调用其他初始化器来执行部分实例的初始化。这个过程，就是所谓的初始化器委托，避免了多个初始化器里冗余代码。</p>\n<p>初始化器委托的运作，以及允许那些形式的委托，这些规则对于值类型和类类型是不同的。值类型(结构体和枚举)不支持继承，<br />\n所以他它们的初始化器委托的过程相当简单，因为它们只能提供它们自己为另一个初始化器委托。如同继承里描述的那样，<br />\n总之，类可以从其他类继承。这就意味着类有额外的责任来确保它们继承的所有存储属性在初始化期间都分配了一个合适的值。<br />\n这些责任在下边的类的继承和初始化里做详述。</p>\n<p>4、类的继承和初始化<br />\n所有类的存储属性——包括从它的父类继承的所有属性——都必须在初始化期间分配初始值。</p>\n<p>Swift 为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值。这些就是所谓的指定初始化器和便捷初始化器。<br />\n*指定初始化器</p>\n<p>*便利构造器<br />\nconvenience:便利，使用convenience修饰的构造函数叫做便利构造函数<br />\n便利构造函数通常用在对系统的类进行构造函数的扩充时使用。<br />\n便利构造函数的特点：<br />\n1、便利构造函数通常都是写在extension里面<br />\n2、便利函数init前面需要加载convenience<br />\n3、在便利构造函数中需要明确的调用self.init()</p>\n<p>4.1、类类型的初始化器委托<br />\n为了简化指定和便捷初始化器之间的调用关系，Swift 在初始化器之间的委托调用有下面的三个规则:</p>\n<p>规则 1<br />\n指定初始化器必须从它的直系父类调用指定初始化器。</p>\n<p>规则 2<br />\n便捷初始化器必须从相同的类里调用另一个初始化器。</p>\n<p>规则 3<br />\n便捷初始化器最终必须调用一个指定初始化器。</p>\n<p>4.2、两段式初始化<br />\nSwift 的类初始化是一个两段式过程。在第一个阶段，每一个存储属性被引入类为分配了一个初始值。<br />\n一旦每个存储属性的初始状态被确定，第二个阶段就开始了，每个类都有机会在新的实例准备使用之前来定制它的存储属性。</p>\n<p>Swift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成：</p>\n<p>安全检查 1<br />\n指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。</p>\n<p>如上所述，一个对象的内存只有在其所有储存型属性确定之后才能完全初始化。为了满足这一规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。</p>\n<p>安全检查 2<br />\n指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值。如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖。</p>\n<p>安全检查 3<br />\n便捷初始化器必须先委托同类中的其它初始化器，然后再为任意属性赋新值（包括同类里定义的属性）。如果没这么做，<br />\n便捷构初始化器赋予的新值将被自己类中其它指定初始化器所覆盖。</p>\n<p>安全检查 4<br />\n初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用 self 作为值。</p>\n<p>直到第一阶段结束类实例才完全合法。属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。</p>\n<p>以下是两段初始化过程，基于上述四种检查的流程：</p>\n<p>4.3、两端初始化总结：<br />\n阶段 1<br />\n指定或便捷初始化器在类中被调用；<br />\n为这个类的新实例分配内存。内存还没有被初始化；<br />\n这个类的指定初始化器确保所有由此类引入的存储属性都有一个值。现在这些存储属性的内存被初始化了；<br />\n指定初始化器上交父类的初始化器为其存储属性执行相同的任务；<br />\n这个调用父类初始化器的过程将沿着初始化器链一直向上进行，直到到达初始化器链的最顶部；<br />\n一旦达了初始化器链的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成。</p>\n<p>阶段 2<br />\n从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问 self 并且可以修改它的属性，调用它的实例方法等等；<br />\n最终，链中任何便捷初始化器都有机会定制实例以及使用 slef 。</p>\n<p>5、初始化器的继承和重写</p>\n<p>不像在 Objective-C 中的子类，Swift 的子类不会默认继承父类的初始化器。<br />\nSwift 的这种机制防止父类的简单初始化器被一个更专用的子类继承并被用来创建一个没有完全或错误初始化的新实例的情况发生。</p>\n<p>初始化器的自动继承<br />\n如上所述，子类默认不会继承父类初始化器。总之，在特定的情况下父类初始化器是可以被自动继承的。实际上，这意味着在许多场景中你不必重写父类初始化器，只要可以安全操作，你就可以毫不费力地继承父类的初始化器。</p>\n<p>假设你为你子类引入的任何新的属性都提供了默认值，请遵守以下2个规则：</p>\n<p>规则1<br />\n如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器。</p>\n<p>规则2<br />\n如果你的子类提供了所有父类指定初始化器的实现——要么是通过规则1继承来的，要么通过在定义中提供自定义实现的——那么它自动继承所有的父类便捷初始化器。</p>\n<p>就算你的子类添加了更多的便捷初始化器，这些规则仍然适用。</p>\n<p>*注意<br />\n子类能够以便捷初始化器的形式实现父类指定初始化器来作为满足规则2的一部分。</p>\n<p>6、可失败初始化器<br />\n定义类、结构体或枚举初始化时可以失败在某些情况下会管大用。这个失败可能由以下几种方式触发，包括给初始化传入无效的形式参数值，<br />\n或缺少某种外部所需的资源，又或是其他阻止初始化的情况。</p>\n<p>6.1、枚举的可失败初始化器<br />\n你可以使用一个可失败初始化器来在带一个或多个形式参数的枚举中选择合适的情况。如果提供的形式参数没有匹配合适的情况初始化器就可能失败。</p>\n<p>6.2、带有原始值枚举的可失败初始化器<br />\n带有原始值的枚举会自动获得一个可失败初始化器 init?(rawValue:) ，<br />\n该可失败初始化器接收一个名为 rawValue 的合适的原始值类型形式参数如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就触发初始化失败。</p>\n<p>为了妥善处理这种可能失败的情况，在类、结构体或枚举中定义一个或多个可失败的初始化器。通过在 init 关键字后面添加问号( init? )来写。</p>\n<p>6.3、初始化失败的传递<br />\n类，结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器。<br />\n类似地，子类的可失败初始化器可以向上委托到父类的可失败初始化器。</p>\n<p>无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。</p>\n<p>6.4、重写可失败初始化器<br />\n你可以在子类里重写父类的可失败初始化器。就好比其他的初始化器。或者，你可以用子类的非可失败初始化器来重写父类可失败初始化器。<br />\n这样允许你定义一个初始化不会失败的子类，尽管父类的初始化允许失败。</p>\n<p>注意如果你用非可失败的子类初始化器重写了一个可失败初始化器，向上委托到父类初始化器的唯一办法是强制展开父类可失败初始化器的结果。</p>\n<p>6.5、可失败初始化器 init!<br />\n通常来讲我们通过在 init 关键字后添加问号 ( init? )的方式来定义一个可失败初始化器以创建一个合适类型的可选项实例。<br />\n另外，你也可以使用可失败初始化器创建一个隐式展开具有合适类型的可选项实例。通过在 init 后面添加惊叹号( init! )是不是问号。</p>\n<p>你可以在 init? 初始化器中委托调用 init! 初始化器，反之亦然。 你也可以用 init! 重写 init? ，反之亦然。<br />\n你还可以用 init 委托调用 init! ，尽管当 init! 初始化器导致初始化失败时会触发断言。</p>\n<p>7、必要初始化器<br />\n在类的初始化器前添加 required  修饰符来表明所有该类的子类都必须实现该初始化器：</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"swift-构造器\"><a class=\"markdownIt-Anchor\" href=\"#swift-构造器\"></a> swift 构造器</h1>\n<p>1、默认初始化器<br />\nSwift 为所有没有提供初始化器的结构体或类提供了一个默认的初始化器来给所有的属性提供了默认值。<br />\n这个默认的初始化器只是简单地创建了一个所有属性都有默认值的新实例</p>\n<p>2、结构体类型的成员初始化器<br />\n如果结构体类型中没有定义任何自定义初始化器，它会自动获得一个成员初始化器。<br />\n不同于默认初始化器，结构体会接收成员初始化器即使它的存储属性没有默认值。</p>\n<p>3、值类型的初始化器委托<br />\n初始化器可以调用其他初始化器来执行部分实例的初始化。这个过程，就是所谓的初始化器委托，避免了多个初始化器里冗余代码。</p>\n<p>初始化器委托的运作，以及允许那些形式的委托，这些规则对于值类型和类类型是不同的。值类型(结构体和枚举)不支持继承，<br />\n所以他它们的初始化器委托的过程相当简单，因为它们只能提供它们自己为另一个初始化器委托。如同继承里描述的那样，<br />\n总之，类可以从其他类继承。这就意味着类有额外的责任来确保它们继承的所有存储属性在初始化期间都分配了一个合适的值。<br />\n这些责任在下边的类的继承和初始化里做详述。</p>\n<p>4、类的继承和初始化<br />\n所有类的存储属性——包括从它的父类继承的所有属性——都必须在初始化期间分配初始值。</p>\n<p>Swift 为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值。这些就是所谓的指定初始化器和便捷初始化器。<br />\n*指定初始化器</p>\n<p>*便利构造器<br />\nconvenience:便利，使用convenience修饰的构造函数叫做便利构造函数<br />\n便利构造函数通常用在对系统的类进行构造函数的扩充时使用。<br />\n便利构造函数的特点：<br />\n1、便利构造函数通常都是写在extension里面<br />\n2、便利函数init前面需要加载convenience<br />\n3、在便利构造函数中需要明确的调用self.init()</p>\n<p>4.1、类类型的初始化器委托<br />\n为了简化指定和便捷初始化器之间的调用关系，Swift 在初始化器之间的委托调用有下面的三个规则:</p>\n<p>规则 1<br />\n指定初始化器必须从它的直系父类调用指定初始化器。</p>\n<p>规则 2<br />\n便捷初始化器必须从相同的类里调用另一个初始化器。</p>\n<p>规则 3<br />\n便捷初始化器最终必须调用一个指定初始化器。</p>\n<p>4.2、两段式初始化<br />\nSwift 的类初始化是一个两段式过程。在第一个阶段，每一个存储属性被引入类为分配了一个初始值。<br />\n一旦每个存储属性的初始状态被确定，第二个阶段就开始了，每个类都有机会在新的实例准备使用之前来定制它的存储属性。</p>\n<p>Swift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成：</p>\n<p>安全检查 1<br />\n指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。</p>\n<p>如上所述，一个对象的内存只有在其所有储存型属性确定之后才能完全初始化。为了满足这一规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。</p>\n<p>安全检查 2<br />\n指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值。如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖。</p>\n<p>安全检查 3<br />\n便捷初始化器必须先委托同类中的其它初始化器，然后再为任意属性赋新值（包括同类里定义的属性）。如果没这么做，<br />\n便捷构初始化器赋予的新值将被自己类中其它指定初始化器所覆盖。</p>\n<p>安全检查 4<br />\n初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用 self 作为值。</p>\n<p>直到第一阶段结束类实例才完全合法。属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。</p>\n<p>以下是两段初始化过程，基于上述四种检查的流程：</p>\n<p>4.3、两端初始化总结：<br />\n阶段 1<br />\n指定或便捷初始化器在类中被调用；<br />\n为这个类的新实例分配内存。内存还没有被初始化；<br />\n这个类的指定初始化器确保所有由此类引入的存储属性都有一个值。现在这些存储属性的内存被初始化了；<br />\n指定初始化器上交父类的初始化器为其存储属性执行相同的任务；<br />\n这个调用父类初始化器的过程将沿着初始化器链一直向上进行，直到到达初始化器链的最顶部；<br />\n一旦达了初始化器链的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成。</p>\n<p>阶段 2<br />\n从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问 self 并且可以修改它的属性，调用它的实例方法等等；<br />\n最终，链中任何便捷初始化器都有机会定制实例以及使用 slef 。</p>\n<p>5、初始化器的继承和重写</p>\n<p>不像在 Objective-C 中的子类，Swift 的子类不会默认继承父类的初始化器。<br />\nSwift 的这种机制防止父类的简单初始化器被一个更专用的子类继承并被用来创建一个没有完全或错误初始化的新实例的情况发生。</p>\n<p>初始化器的自动继承<br />\n如上所述，子类默认不会继承父类初始化器。总之，在特定的情况下父类初始化器是可以被自动继承的。实际上，这意味着在许多场景中你不必重写父类初始化器，只要可以安全操作，你就可以毫不费力地继承父类的初始化器。</p>\n<p>假设你为你子类引入的任何新的属性都提供了默认值，请遵守以下2个规则：</p>\n<p>规则1<br />\n如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器。</p>\n<p>规则2<br />\n如果你的子类提供了所有父类指定初始化器的实现——要么是通过规则1继承来的，要么通过在定义中提供自定义实现的——那么它自动继承所有的父类便捷初始化器。</p>\n<p>就算你的子类添加了更多的便捷初始化器，这些规则仍然适用。</p>\n<p>*注意<br />\n子类能够以便捷初始化器的形式实现父类指定初始化器来作为满足规则2的一部分。</p>\n<p>6、可失败初始化器<br />\n定义类、结构体或枚举初始化时可以失败在某些情况下会管大用。这个失败可能由以下几种方式触发，包括给初始化传入无效的形式参数值，<br />\n或缺少某种外部所需的资源，又或是其他阻止初始化的情况。</p>\n<p>6.1、枚举的可失败初始化器<br />\n你可以使用一个可失败初始化器来在带一个或多个形式参数的枚举中选择合适的情况。如果提供的形式参数没有匹配合适的情况初始化器就可能失败。</p>\n<p>6.2、带有原始值枚举的可失败初始化器<br />\n带有原始值的枚举会自动获得一个可失败初始化器 init?(rawValue:) ，<br />\n该可失败初始化器接收一个名为 rawValue 的合适的原始值类型形式参数如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就触发初始化失败。</p>\n<p>为了妥善处理这种可能失败的情况，在类、结构体或枚举中定义一个或多个可失败的初始化器。通过在 init 关键字后面添加问号( init? )来写。</p>\n<p>6.3、初始化失败的传递<br />\n类，结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器。<br />\n类似地，子类的可失败初始化器可以向上委托到父类的可失败初始化器。</p>\n<p>无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。</p>\n<p>6.4、重写可失败初始化器<br />\n你可以在子类里重写父类的可失败初始化器。就好比其他的初始化器。或者，你可以用子类的非可失败初始化器来重写父类可失败初始化器。<br />\n这样允许你定义一个初始化不会失败的子类，尽管父类的初始化允许失败。</p>\n<p>注意如果你用非可失败的子类初始化器重写了一个可失败初始化器，向上委托到父类初始化器的唯一办法是强制展开父类可失败初始化器的结果。</p>\n<p>6.5、可失败初始化器 init!<br />\n通常来讲我们通过在 init 关键字后添加问号 ( init? )的方式来定义一个可失败初始化器以创建一个合适类型的可选项实例。<br />\n另外，你也可以使用可失败初始化器创建一个隐式展开具有合适类型的可选项实例。通过在 init 后面添加惊叹号( init! )是不是问号。</p>\n<p>你可以在 init? 初始化器中委托调用 init! 初始化器，反之亦然。 你也可以用 init! 重写 init? ，反之亦然。<br />\n你还可以用 init 委托调用 init! ，尽管当 init! 初始化器导致初始化失败时会触发断言。</p>\n<p>7、必要初始化器<br />\n在类的初始化器前添加 required  修饰符来表明所有该类的子类都必须实现该初始化器：</p>\n"},{"_content":"# 值类型与引用类型\n\n1、[Swift 中的值类型与引用类型使用指北](https://juejin.cn/post/6844903550653480968#heading-17)\n","source":"_posts/学习笔记/iOS/iOS之编程语言/Swift/值类型与引用类型.md","raw":"# 值类型与引用类型\n\n1、[Swift 中的值类型与引用类型使用指北](https://juejin.cn/post/6844903550653480968#heading-17)\n","slug":"学习笔记/iOS/iOS之编程语言/Swift/值类型与引用类型","published":1,"date":"2021-02-24T12:31:09.272Z","updated":"2021-02-24T12:31:09.272Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tjt0034w37u8l1e83w5","content":"<h1 id=\"值类型与引用类型\"><a class=\"markdownIt-Anchor\" href=\"#值类型与引用类型\"></a> 值类型与引用类型</h1>\n<p>1、<a href=\"https://juejin.cn/post/6844903550653480968#heading-17\">Swift 中的值类型与引用类型使用指北</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"值类型与引用类型\"><a class=\"markdownIt-Anchor\" href=\"#值类型与引用类型\"></a> 值类型与引用类型</h1>\n<p>1、<a href=\"https://juejin.cn/post/6844903550653480968#heading-17\">Swift 中的值类型与引用类型使用指北</a></p>\n"},{"_content":"# iOS 自动化\n\n## 1. 模拟器\n\n### 1.1 模拟器列表\n\n```shell\ninstruments -s\n\n// or \n\nxcrun xctrace --list devices\n```\n\n### 1.2 启动模拟器\n\n```shell\nxcrun instruments -w 'iPhone X'\n\n// or\n\nopen -a Simulator\n```\n\n## 2. 模拟器应用\n\n### 2.1 安装 App\n\n```xcrun simctl install booted /Users/builder/builder/document/other/551/Payload/DYZB.app```\n\n### 2.2 启动 App\n\n```xcrun simctl launch booted 'com.tencent.live4iphone'```\n\n### 2.3 卸载 App\n\n```xcrun simctl uninstall booted 'com.tencent.live4iphone'```\n\n## 3. 附注\n\n另外一套工具 idevice[^idevice].\n\n[^idevice]: [idevice](https://github.com/libimobiledevice/libimobiledevice)\n","source":"_posts/学习笔记/iOS/iOS之项目管理/ShellScripts/iOS之模拟器.md","raw":"# iOS 自动化\n\n## 1. 模拟器\n\n### 1.1 模拟器列表\n\n```shell\ninstruments -s\n\n// or \n\nxcrun xctrace --list devices\n```\n\n### 1.2 启动模拟器\n\n```shell\nxcrun instruments -w 'iPhone X'\n\n// or\n\nopen -a Simulator\n```\n\n## 2. 模拟器应用\n\n### 2.1 安装 App\n\n```xcrun simctl install booted /Users/builder/builder/document/other/551/Payload/DYZB.app```\n\n### 2.2 启动 App\n\n```xcrun simctl launch booted 'com.tencent.live4iphone'```\n\n### 2.3 卸载 App\n\n```xcrun simctl uninstall booted 'com.tencent.live4iphone'```\n\n## 3. 附注\n\n另外一套工具 idevice[^idevice].\n\n[^idevice]: [idevice](https://github.com/libimobiledevice/libimobiledevice)\n","slug":"学习笔记/iOS/iOS之项目管理/ShellScripts/iOS之模拟器","published":1,"date":"2021-04-08T00:31:46.340Z","updated":"2021-04-08T00:31:46.341Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tjt0035w37u92r98cdx","content":"<h1 id=\"ios-自动化\"><a class=\"markdownIt-Anchor\" href=\"#ios-自动化\"></a> iOS 自动化</h1>\n<h2 id=\"1-模拟器\"><a class=\"markdownIt-Anchor\" href=\"#1-模拟器\"></a> 1. 模拟器</h2>\n<h3 id=\"11-模拟器列表\"><a class=\"markdownIt-Anchor\" href=\"#11-模拟器列表\"></a> 1.1 模拟器列表</h3>\n<pre class=\"highlight\"><code class=\"shell\">instruments -s\n\n// or \n\nxcrun xctrace --list devices\n</code></pre>\n<h3 id=\"12-启动模拟器\"><a class=\"markdownIt-Anchor\" href=\"#12-启动模拟器\"></a> 1.2 启动模拟器</h3>\n<pre class=\"highlight\"><code class=\"shell\">xcrun instruments -w 'iPhone X'\n\n// or\n\nopen -a Simulator\n</code></pre>\n<h2 id=\"2-模拟器应用\"><a class=\"markdownIt-Anchor\" href=\"#2-模拟器应用\"></a> 2. 模拟器应用</h2>\n<h3 id=\"21-安装-app\"><a class=\"markdownIt-Anchor\" href=\"#21-安装-app\"></a> 2.1 安装 App</h3>\n<p><code>xcrun simctl install booted /Users/builder/builder/document/other/551/Payload/DYZB.app</code></p>\n<h3 id=\"22-启动-app\"><a class=\"markdownIt-Anchor\" href=\"#22-启动-app\"></a> 2.2 启动 App</h3>\n<p><code>xcrun simctl launch booted 'com.tencent.live4iphone'</code></p>\n<h3 id=\"23-卸载-app\"><a class=\"markdownIt-Anchor\" href=\"#23-卸载-app\"></a> 2.3 卸载 App</h3>\n<p><code>xcrun simctl uninstall booted 'com.tencent.live4iphone'</code></p>\n<h2 id=\"3-附注\"><a class=\"markdownIt-Anchor\" href=\"#3-附注\"></a> 3. 附注</h2>\n<p>另外一套工具 idevice<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>.</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://github.com/libimobiledevice/libimobiledevice\">idevice</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ios-自动化\"><a class=\"markdownIt-Anchor\" href=\"#ios-自动化\"></a> iOS 自动化</h1>\n<h2 id=\"1-模拟器\"><a class=\"markdownIt-Anchor\" href=\"#1-模拟器\"></a> 1. 模拟器</h2>\n<h3 id=\"11-模拟器列表\"><a class=\"markdownIt-Anchor\" href=\"#11-模拟器列表\"></a> 1.1 模拟器列表</h3>\n<pre class=\"highlight\"><code class=\"shell\">instruments -s\n\n// or \n\nxcrun xctrace --list devices\n</code></pre>\n<h3 id=\"12-启动模拟器\"><a class=\"markdownIt-Anchor\" href=\"#12-启动模拟器\"></a> 1.2 启动模拟器</h3>\n<pre class=\"highlight\"><code class=\"shell\">xcrun instruments -w 'iPhone X'\n\n// or\n\nopen -a Simulator\n</code></pre>\n<h2 id=\"2-模拟器应用\"><a class=\"markdownIt-Anchor\" href=\"#2-模拟器应用\"></a> 2. 模拟器应用</h2>\n<h3 id=\"21-安装-app\"><a class=\"markdownIt-Anchor\" href=\"#21-安装-app\"></a> 2.1 安装 App</h3>\n<p><code>xcrun simctl install booted /Users/builder/builder/document/other/551/Payload/DYZB.app</code></p>\n<h3 id=\"22-启动-app\"><a class=\"markdownIt-Anchor\" href=\"#22-启动-app\"></a> 2.2 启动 App</h3>\n<p><code>xcrun simctl launch booted 'com.tencent.live4iphone'</code></p>\n<h3 id=\"23-卸载-app\"><a class=\"markdownIt-Anchor\" href=\"#23-卸载-app\"></a> 2.3 卸载 App</h3>\n<p><code>xcrun simctl uninstall booted 'com.tencent.live4iphone'</code></p>\n<h2 id=\"3-附注\"><a class=\"markdownIt-Anchor\" href=\"#3-附注\"></a> 3. 附注</h2>\n<p>另外一套工具 idevice<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>.</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p><a href=\"https://github.com/libimobiledevice/libimobiledevice\">idevice</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n"},{"_content":"1、KSCrash 简明教程\nA Brief Tour of the KSCrash Code and Architecture\n\n\nKSCrash used to be simple enough that a quick perusal of the source code would be enough to understand how it worked, but it's gotten big enough now that there should be some guideposts to help readers along. This document introduces you to the main code areas of KSCrash.\n\nThe Heart of KSCrash\nThe heart of KSCrash lives in KSCrashC.c\n\nThis file contains all of the most important access points to the KSCrash system.\n\nKSCrashC.c functions are also Objective-C/Swift wrapped in KSCrash.m\n\nThese are the main parts of KSCrashC.c:\n\nInstallation\nkscrash_install() installs and prepares the KSCrash system to handle crashes. You can configure KSCrash using the various configuration functions in this file (kscrash_setMonitoring() and such) before or after install.\n\nConfiguration\nAll of the main configuration settings are set via kscrash_setXYZ().\n\nApp State\nApple operating environments offer a number of notifications that tell you the current app state. These are hooked into various kscrash_notifyXYZ() functions.\n\nCrash Entry Point\nThe function onCrash is the main function called after a crash is reported. It handles examining the application state, writing the JSON crash report, and then allowing the crash to take its natural course.\n\nReport Management\nThis file also contains the low level primitive functions for managing crash reports: kscrash_getReportCount(), kscrash_getReportIDs(), kscrash_readReport(), kscrash_deleteReportWithID()\n\nEnabling / Disabling KSCrash\nYou can use kscrash_setMonitoring() to effectively enable or disable crash reporting at runtime.\n\nDetecting Crashes\nCrashes are detected via one of the monitors, which set up the data in a consistent way before passing control to the function onCrash(). These files are a bit tricky because some of them have to jump through a few hoops to get around OS differences, system idiosyncrasies, and just plain bugs.\n\nRecording Crashes\nCrashes are recorded to a JSON file via kscrashreport_writeStandardReport() in KSCrashReport.c. It makes use of a number of tools to accomplish this.\n\nReport Management\nReport management is primarily done in KSCrashReportStore.c\n\nReporting\nReporting is done using a probably-overcomplicated system of filters and sinks. Generally, to adapt KSCrash to your needs, you'd create your own sink.\n\nInstallations\nThe installation system was an attempt to make the user API a little easier by hiding most of the filter/sink stuff behind a simpler interface. Its success is debatable...\n\nNo code depends on the installation code, and KSCrash can actually work just fine without it.\n\n","source":"_posts/学习笔记/iOS/iOS之性能优化/KSCrash/KSCrash 简明教程.md","raw":"1、KSCrash 简明教程\nA Brief Tour of the KSCrash Code and Architecture\n\n\nKSCrash used to be simple enough that a quick perusal of the source code would be enough to understand how it worked, but it's gotten big enough now that there should be some guideposts to help readers along. This document introduces you to the main code areas of KSCrash.\n\nThe Heart of KSCrash\nThe heart of KSCrash lives in KSCrashC.c\n\nThis file contains all of the most important access points to the KSCrash system.\n\nKSCrashC.c functions are also Objective-C/Swift wrapped in KSCrash.m\n\nThese are the main parts of KSCrashC.c:\n\nInstallation\nkscrash_install() installs and prepares the KSCrash system to handle crashes. You can configure KSCrash using the various configuration functions in this file (kscrash_setMonitoring() and such) before or after install.\n\nConfiguration\nAll of the main configuration settings are set via kscrash_setXYZ().\n\nApp State\nApple operating environments offer a number of notifications that tell you the current app state. These are hooked into various kscrash_notifyXYZ() functions.\n\nCrash Entry Point\nThe function onCrash is the main function called after a crash is reported. It handles examining the application state, writing the JSON crash report, and then allowing the crash to take its natural course.\n\nReport Management\nThis file also contains the low level primitive functions for managing crash reports: kscrash_getReportCount(), kscrash_getReportIDs(), kscrash_readReport(), kscrash_deleteReportWithID()\n\nEnabling / Disabling KSCrash\nYou can use kscrash_setMonitoring() to effectively enable or disable crash reporting at runtime.\n\nDetecting Crashes\nCrashes are detected via one of the monitors, which set up the data in a consistent way before passing control to the function onCrash(). These files are a bit tricky because some of them have to jump through a few hoops to get around OS differences, system idiosyncrasies, and just plain bugs.\n\nRecording Crashes\nCrashes are recorded to a JSON file via kscrashreport_writeStandardReport() in KSCrashReport.c. It makes use of a number of tools to accomplish this.\n\nReport Management\nReport management is primarily done in KSCrashReportStore.c\n\nReporting\nReporting is done using a probably-overcomplicated system of filters and sinks. Generally, to adapt KSCrash to your needs, you'd create your own sink.\n\nInstallations\nThe installation system was an attempt to make the user API a little easier by hiding most of the filter/sink stuff behind a simpler interface. Its success is debatable...\n\nNo code depends on the installation code, and KSCrash can actually work just fine without it.\n\n","slug":"学习笔记/iOS/iOS之性能优化/KSCrash/KSCrash 简明教程","published":1,"date":"2021-02-24T12:31:09.187Z","updated":"2021-03-13T03:23:37.586Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tjw0036w37ucz184zzc","content":"<p>1、KSCrash 简明教程<br />\nA Brief Tour of the KSCrash Code and Architecture</p>\n<p>KSCrash used to be simple enough that a quick perusal of the source code would be enough to understand how it worked, but it’s gotten big enough now that there should be some guideposts to help readers along. This document introduces you to the main code areas of KSCrash.</p>\n<p>The Heart of KSCrash<br />\nThe heart of KSCrash lives in KSCrashC.c</p>\n<p>This file contains all of the most important access points to the KSCrash system.</p>\n<p>KSCrashC.c functions are also Objective-C/Swift wrapped in KSCrash.m</p>\n<p>These are the main parts of KSCrashC.c:</p>\n<p>Installation<br />\nkscrash_install() installs and prepares the KSCrash system to handle crashes. You can configure KSCrash using the various configuration functions in this file (kscrash_setMonitoring() and such) before or after install.</p>\n<p>Configuration<br />\nAll of the main configuration settings are set via kscrash_setXYZ().</p>\n<p>App State<br />\nApple operating environments offer a number of notifications that tell you the current app state. These are hooked into various kscrash_notifyXYZ() functions.</p>\n<p>Crash Entry Point<br />\nThe function onCrash is the main function called after a crash is reported. It handles examining the application state, writing the JSON crash report, and then allowing the crash to take its natural course.</p>\n<p>Report Management<br />\nThis file also contains the low level primitive functions for managing crash reports: kscrash_getReportCount(), kscrash_getReportIDs(), kscrash_readReport(), kscrash_deleteReportWithID()</p>\n<p>Enabling / Disabling KSCrash<br />\nYou can use kscrash_setMonitoring() to effectively enable or disable crash reporting at runtime.</p>\n<p>Detecting Crashes<br />\nCrashes are detected via one of the monitors, which set up the data in a consistent way before passing control to the function onCrash(). These files are a bit tricky because some of them have to jump through a few hoops to get around OS differences, system idiosyncrasies, and just plain bugs.</p>\n<p>Recording Crashes<br />\nCrashes are recorded to a JSON file via kscrashreport_writeStandardReport() in KSCrashReport.c. It makes use of a number of tools to accomplish this.</p>\n<p>Report Management<br />\nReport management is primarily done in KSCrashReportStore.c</p>\n<p>Reporting<br />\nReporting is done using a probably-overcomplicated system of filters and sinks. Generally, to adapt KSCrash to your needs, you’d create your own sink.</p>\n<p>Installations<br />\nThe installation system was an attempt to make the user API a little easier by hiding most of the filter/sink stuff behind a simpler interface. Its success is debatable…</p>\n<p>No code depends on the installation code, and KSCrash can actually work just fine without it.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、KSCrash 简明教程<br />\nA Brief Tour of the KSCrash Code and Architecture</p>\n<p>KSCrash used to be simple enough that a quick perusal of the source code would be enough to understand how it worked, but it’s gotten big enough now that there should be some guideposts to help readers along. This document introduces you to the main code areas of KSCrash.</p>\n<p>The Heart of KSCrash<br />\nThe heart of KSCrash lives in KSCrashC.c</p>\n<p>This file contains all of the most important access points to the KSCrash system.</p>\n<p>KSCrashC.c functions are also Objective-C/Swift wrapped in KSCrash.m</p>\n<p>These are the main parts of KSCrashC.c:</p>\n<p>Installation<br />\nkscrash_install() installs and prepares the KSCrash system to handle crashes. You can configure KSCrash using the various configuration functions in this file (kscrash_setMonitoring() and such) before or after install.</p>\n<p>Configuration<br />\nAll of the main configuration settings are set via kscrash_setXYZ().</p>\n<p>App State<br />\nApple operating environments offer a number of notifications that tell you the current app state. These are hooked into various kscrash_notifyXYZ() functions.</p>\n<p>Crash Entry Point<br />\nThe function onCrash is the main function called after a crash is reported. It handles examining the application state, writing the JSON crash report, and then allowing the crash to take its natural course.</p>\n<p>Report Management<br />\nThis file also contains the low level primitive functions for managing crash reports: kscrash_getReportCount(), kscrash_getReportIDs(), kscrash_readReport(), kscrash_deleteReportWithID()</p>\n<p>Enabling / Disabling KSCrash<br />\nYou can use kscrash_setMonitoring() to effectively enable or disable crash reporting at runtime.</p>\n<p>Detecting Crashes<br />\nCrashes are detected via one of the monitors, which set up the data in a consistent way before passing control to the function onCrash(). These files are a bit tricky because some of them have to jump through a few hoops to get around OS differences, system idiosyncrasies, and just plain bugs.</p>\n<p>Recording Crashes<br />\nCrashes are recorded to a JSON file via kscrashreport_writeStandardReport() in KSCrashReport.c. It makes use of a number of tools to accomplish this.</p>\n<p>Report Management<br />\nReport management is primarily done in KSCrashReportStore.c</p>\n<p>Reporting<br />\nReporting is done using a probably-overcomplicated system of filters and sinks. Generally, to adapt KSCrash to your needs, you’d create your own sink.</p>\n<p>Installations<br />\nThe installation system was an attempt to make the user API a little easier by hiding most of the filter/sink stuff behind a simpler interface. Its success is debatable…</p>\n<p>No code depends on the installation code, and KSCrash can actually work just fine without it.</p>\n"},{"_content":"# KSCrahs 原理\n\n## 1. [KSCrash崩溃收集原理浅析](https://www.it610.com/article/1191455498289913856.htm)\n","source":"_posts/学习笔记/iOS/iOS之性能优化/KSCrash/原理.md","raw":"# KSCrahs 原理\n\n## 1. [KSCrash崩溃收集原理浅析](https://www.it610.com/article/1191455498289913856.htm)\n","slug":"学习笔记/iOS/iOS之性能优化/KSCrash/原理","published":1,"date":"2021-03-13T03:23:48.045Z","updated":"2021-03-13T03:24:15.998Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tjx0037w37ug8uj6vrp","content":"<h1 id=\"kscrahs-原理\"><a class=\"markdownIt-Anchor\" href=\"#kscrahs-原理\"></a> KSCrahs 原理</h1>\n<h2 id=\"1-kscrash崩溃收集原理浅析\"><a class=\"markdownIt-Anchor\" href=\"#1-kscrash崩溃收集原理浅析\"></a> 1. <a href=\"https://www.it610.com/article/1191455498289913856.htm\">KSCrash崩溃收集原理浅析</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"kscrahs-原理\"><a class=\"markdownIt-Anchor\" href=\"#kscrahs-原理\"></a> KSCrahs 原理</h1>\n<h2 id=\"1-kscrash崩溃收集原理浅析\"><a class=\"markdownIt-Anchor\" href=\"#1-kscrash崩溃收集原理浅析\"></a> 1. <a href=\"https://www.it610.com/article/1191455498289913856.htm\">KSCrash崩溃收集原理浅析</a></h2>\n"},{"_content":"# 异常处理\n\n1、异常日志收集\n\n* Xcode、App Store\n* 第三方\n* 自己收集\n        跟踪异常产生的时机并捕捉、处理：上报之类\n        [iOS Swift Crash的捕获](http://www.cocoachina.com/ios/20170816/20270.html)\n        [漫谈iOS Crash收集框架](https://nianxi.net/ios/ios-crash-reporter.html)\n        [dSYMTools](https://blog.csdn.net/wiseuc_jianghai/article/details/78031638)\n        [DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)[DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)\n\n2、异常日志分析\n\n一、.dSYM\n\n.dSYM(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的DWARF（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：\n\n    .xcarchive\n    --dSYMs\n      |--Your.app.dSYM\n        |--Contents\n          |--Resources\n            |--DWARF\n\n二、确定符号表和崩溃日志的一致性\n\n有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。\n\n1、从崩溃日志中获取UUID\n\n崩溃日志比较靠下的位置有个Binary Images模块，其第一行内容如下：\n\n```log\nBinary Images:\n0x1f000 - 0x906fff sd_doctor_ios armv7  <eef4e325f9d6393f93e87b7ee327a5ea> /var/containers/Bundle/Application/8BEEC659-8263-4092-A2DC-EF48060BB142/sd_doctor_ios.app/sd_doctor_ios\n```\n\n从中可以看到关于你应用的若干信息：\n\n代码段的起终地址为：0x1f000 - 0x906fff\n\n运行你应用的CPU指令集为：armv7\n\n应用的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（不区分大小写）\n\n2、从符号表中获取UUID\n\n执行以下命令从符号表中提取UUID：\n\n    dwarfdump --uuid Your.app.dSYM\n    dwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your\n由此得到armv7指令集的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。\n\n三、计算崩溃符号表地址\n以下面的崩溃堆栈为例：\n\n    Thread 0:\n    0   libobjc.A.dylib                   0x33f10f60 0x33efe000 + 77664\n    1   Foundation                        0x273526ac 0x2734a000 + 34476\n    2   Foundation                        0x27355c3e 0x2734a000 + 48190\n    3   UIKit                             0x29ef9d1c 0x29bbc000 + 3398940\n    4   UIKit                             0x29ef9c9a 0x29bbc000 + 3398810\n    5   UIKit                             0x29ef954c 0x29bbc000 + 3396940\n    6   UIKit                             0x29c3a16a 0x29bbc000 + 516458\n    7   UIKit                             0x29e4b8e6 0x29bbc000 + 2685158\n    8   UIKit                             0x29c3a128 0x29bbc000 + 516392\n    9   Your                              0x000f0846 0xa2000 + 321606\n    10  UIKit                             0x29e90fb2 0x29bbc000 + 2969522\n    11  UIKit                             0x29e91076 0x29bbc000 + 2969718\n    12  UIKit                             0x29e867cc 0x29bbc000 + 2926540\n    13  UIKit                             0x29c9e8ea 0x29bbc000 + 927978\n    14  UIKit                             0x29bc8a6a 0x29bbc000 + 51818\n    15  QuartzCore                        0x295f0a08 0x295e4000 + 51720\n    16  QuartzCore                        0x295ec3e0 0x295e4000 + 33760\n    17  QuartzCore                        0x295ec268 0x295e4000 + 33384\n    18  QuartzCore                        0x295ebc4c 0x295e4000 + 31820\n    19  QuartzCore                        0x295eba50 0x295e4000 + 31312\n    20  QuartzCore                        0x295e5928 0x295e4000 + 6440\n    21  CoreFoundation                    0x266d0d92 0x26604000 + 839058\n    22  CoreFoundation                    0x266ce44e 0x26604000 + 828494\n    23  CoreFoundation                    0x266ce856 0x26604000 + 829526\n    24  CoreFoundation                    0x2661c3bc 0x26604000 + 99260\n    25  CoreFoundation                    0x2661c1ce 0x26604000 + 98766\n    26  GraphicsServices                  0x2da1a0a4 0x2da11000 + 37028\n    27  UIKit                             0x29c2a7ac 0x29bbc000 + 452524\n    28  Your                              0x0024643a 0xa2000 + 1721402\n    29  libdyld.dylib                     0x34484aac 0x34483000 + 6828\n\n1、 符号表堆栈地址计算方式\n\n要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址0x000f0846，该进程的运行时起始地址是0xa2000，崩溃处距离进程起始地址的偏移量为十进制的321606(对应十六进制为0x4E846)。三者对应关系：\n\n    0x000f0846 = 0xa2000 + 0x4E846\n\n对应的公式为：\n\n    运行时堆栈地址 = 运行时起始地址 + 偏移量\n\n崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：\n\n    符号表堆栈地址 = 符号表起始地址 + 偏移量\n\n2、获取符号表中的TEXT段起始地址\n\n符号表中TEXT段的起始地址可以通过以下命令获得：\n\n    $otool -l Your.app.dSYM/Contents/Resources/DWARF/Your\n\n运行结果中的片段如下：\n\n    Load command 3\n          cmd LC_SEGMENT\n      cmdsize 736\n      segname __TEXT\n       vmaddr 0x00004000\n       vmsize 0x00700000\n      fileoff 0\n     filesize 0\n      maxprot 0x00000005\n     initprot 0x00000005\n       nsects 10\n        flags 0x0\n\n其中的vmaddr 0x00004000字段即为TEXT段的起始地址。\n\n3、计算符号表地址\n\n由公式：\n\n    符号表堆栈地址 = 符号表起始地址 + 偏移量\n可得：\n\n    0x52846 = 0x4E846 + 0x4000\n\n即符号表中的崩溃地址为0x52846，接下来就可以根据这个地址解析出崩溃位置了。\n\n四、崩溃信息还原\n\n有了符号表的崩溃地址，有以下几种方式解析崩溃信息：\n\n1、dwarfdump\n\n命令如下：\n\n    $dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep 'Line table'\n\n需要注意的是：\n\n    这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集\n\n比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。\n\n—lookup后面跟的一定是经过准确计算的符号表中的崩溃地址\n\n使用dwarfdump解析的结果较杂乱，因此使用grep命令抓取其中关键点展示出来\n\n运行结果如下：\n\n    Line table dir : '/data/.../Src/OBDConnectSetting/Controller'\n    Line table file: 'OBDFirstConnectViewController.m' line 882, column 5 with start address 0x000000000052768\n\n其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。\n\n2、atos\n\natos是另一种更加简洁的崩溃日志解析方法，使用方式如下：\n\n     $atos -o LuBao -arch armv7 0x52846\n其执行结果如下：\n\n    -[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n相对dwarfdump命令的解析结果，更加简洁直观的指出了崩溃发生的位置。\n\n3、无需符号表崩溃地址的解析方式\n\n实际上，atos还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：\n\n    $atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846\n其中-l选项指定了二进制文件在运行时的起始地址0xa2000（获取方式见Binary Images相关内容）,后面跟的是崩溃发生的运行时地址0x000f0846，解析结果和使用计算得到的符号表中崩溃地址一致：\n\n    -[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n五、参考文档\n\n* [How to Match a Crash Report to a Build](https://developer.apple.com/library/mac/qa/qa1765/_index.html)\n\n* [CrashReporter](https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html)\n\n* [Understanding and Analyzing iOS Application Crash Reports](https://developer.apple.com/library/ios/technotes/tn2151/_index.html)\n\n* [atos and dwarfdump won’t symbolicate my address](http://stackoverflow.com/a/12464678/2293677)\n\n**原文参考：**[手动解析CrashLog](http://www.cocoachina.com/ios/20150803/12806.html)\n\n3、异常处理\n4、异常规避\n\n* 内存地址分配\n* 日志源文件\n* 异常产生\n\nLinux系统中，支持两类信号\n\n1.POSIX标准的规则信号(regular signal，编号1－31)\n\n2.实时信号(real-time signal，编号32－63)\n\n对于regular signal来说，无论发送多少次，在接收进程处理之前，重复的信号会被合并为一个（每一种regular signal对应于系统进程表项中软中断字段的一个比特，因此不同的信号可以同时存在，同一信号仅能表示有或无而不能表示重复的次数)；\n\n而real-time signal发送多少次，就会在接收进程的信号队列中出现多少次。\nLinux在i386上的31个规则信号(regular signal)\n\n    kill -l\n\n| 编号 | 信号名称  | 缺省动作 | 说明 |\n| --- | --- | --- | ---|\n|1 |SIGHUP |终止 |终止控制终端或进程|\n|2| SIGINT |终止| 键盘产生的中断(Ctrl-C)|\n|3 |SIGQUIT |dump| 键盘产生的退出|\n|4| SIGILL |dump| 非法指令|\n|5| SIGTRAP |dump| debug中断|\n|6 |SIGABRT／SIGIOT| dump| 异常中止|\n|7| SIGBUS／SIGEMT |dump| 总线异常/EMT指令|\n|8| SIGFPE |dump| 浮点运算溢出|\n|9 |SIGKILL |终止| 强制进程终止|\n|10| SIGUSR1 |终止| 用户信号,进程可自定义用途|\n|11| SIGSEGV |dump| 非法内存地址引用|\n|12| SIGUSR2 |终止| 用户信号，进程可自定义用途|\n|13| SIGPIPE |终止| 向某个没有读取的管道中写入数据|\n|14| SIGALRM |终止| 时钟中断(闹钟)|\n|15| SIGTERM |终止| 进程终止|\n|16| SIGSTKFLT |终止| 协处理器栈错误|\n|17| SIGCHLD |忽略| 子进程退出或中断|\n|18| SIGCONT |继续| 如进程停止状态则开始运行|\n|19| SIGSTOP |停止| 停止进程运行|\n|20| SIGSTP |停止| 键盘产生的停止|\n|21| SIGTTIN |停止| 后台进程请求输入|\n|22| SIGTTOU |停止| 后台进程请求输出|\n|23| SIGURG |忽略 |socket发生紧急情况|\n|24| SIGXCPU |dump| CPU时间限制被打破|\n|25| SIGXFSZ |dump| 文件大小限制被打破|\n|26| SIGVTALRM| 终止| 虚拟定时时钟|\n|27| SIGPROF |终止| profile timer clock|\n|28| SIGWINCH |忽略| 窗口尺寸调整|\n|29| SIGIO/SIGPOLL| 终止| I/O可用|\n|30| SIGPWR |终止| 电源异常|\n|31| SIGSYS／SYSUNUSED| dump| 系统调用异常|\n\n在不同系统中同一数值可能会代表不同的信号，因此，最好使用信号名而不是信号值。\n\n信号的数值越小，则优先级越高。当进程收到多个待处理信号时，总是先处理优先级别高的信号。\n","source":"_posts/学习笔记/iOS/iOS之性能优化/异常处理/iOS之异常处理.md","raw":"# 异常处理\n\n1、异常日志收集\n\n* Xcode、App Store\n* 第三方\n* 自己收集\n        跟踪异常产生的时机并捕捉、处理：上报之类\n        [iOS Swift Crash的捕获](http://www.cocoachina.com/ios/20170816/20270.html)\n        [漫谈iOS Crash收集框架](https://nianxi.net/ios/ios-crash-reporter.html)\n        [dSYMTools](https://blog.csdn.net/wiseuc_jianghai/article/details/78031638)\n        [DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)[DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)\n\n2、异常日志分析\n\n一、.dSYM\n\n.dSYM(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的DWARF（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：\n\n    .xcarchive\n    --dSYMs\n      |--Your.app.dSYM\n        |--Contents\n          |--Resources\n            |--DWARF\n\n二、确定符号表和崩溃日志的一致性\n\n有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。\n\n1、从崩溃日志中获取UUID\n\n崩溃日志比较靠下的位置有个Binary Images模块，其第一行内容如下：\n\n```log\nBinary Images:\n0x1f000 - 0x906fff sd_doctor_ios armv7  <eef4e325f9d6393f93e87b7ee327a5ea> /var/containers/Bundle/Application/8BEEC659-8263-4092-A2DC-EF48060BB142/sd_doctor_ios.app/sd_doctor_ios\n```\n\n从中可以看到关于你应用的若干信息：\n\n代码段的起终地址为：0x1f000 - 0x906fff\n\n运行你应用的CPU指令集为：armv7\n\n应用的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（不区分大小写）\n\n2、从符号表中获取UUID\n\n执行以下命令从符号表中提取UUID：\n\n    dwarfdump --uuid Your.app.dSYM\n    dwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your\n由此得到armv7指令集的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。\n\n三、计算崩溃符号表地址\n以下面的崩溃堆栈为例：\n\n    Thread 0:\n    0   libobjc.A.dylib                   0x33f10f60 0x33efe000 + 77664\n    1   Foundation                        0x273526ac 0x2734a000 + 34476\n    2   Foundation                        0x27355c3e 0x2734a000 + 48190\n    3   UIKit                             0x29ef9d1c 0x29bbc000 + 3398940\n    4   UIKit                             0x29ef9c9a 0x29bbc000 + 3398810\n    5   UIKit                             0x29ef954c 0x29bbc000 + 3396940\n    6   UIKit                             0x29c3a16a 0x29bbc000 + 516458\n    7   UIKit                             0x29e4b8e6 0x29bbc000 + 2685158\n    8   UIKit                             0x29c3a128 0x29bbc000 + 516392\n    9   Your                              0x000f0846 0xa2000 + 321606\n    10  UIKit                             0x29e90fb2 0x29bbc000 + 2969522\n    11  UIKit                             0x29e91076 0x29bbc000 + 2969718\n    12  UIKit                             0x29e867cc 0x29bbc000 + 2926540\n    13  UIKit                             0x29c9e8ea 0x29bbc000 + 927978\n    14  UIKit                             0x29bc8a6a 0x29bbc000 + 51818\n    15  QuartzCore                        0x295f0a08 0x295e4000 + 51720\n    16  QuartzCore                        0x295ec3e0 0x295e4000 + 33760\n    17  QuartzCore                        0x295ec268 0x295e4000 + 33384\n    18  QuartzCore                        0x295ebc4c 0x295e4000 + 31820\n    19  QuartzCore                        0x295eba50 0x295e4000 + 31312\n    20  QuartzCore                        0x295e5928 0x295e4000 + 6440\n    21  CoreFoundation                    0x266d0d92 0x26604000 + 839058\n    22  CoreFoundation                    0x266ce44e 0x26604000 + 828494\n    23  CoreFoundation                    0x266ce856 0x26604000 + 829526\n    24  CoreFoundation                    0x2661c3bc 0x26604000 + 99260\n    25  CoreFoundation                    0x2661c1ce 0x26604000 + 98766\n    26  GraphicsServices                  0x2da1a0a4 0x2da11000 + 37028\n    27  UIKit                             0x29c2a7ac 0x29bbc000 + 452524\n    28  Your                              0x0024643a 0xa2000 + 1721402\n    29  libdyld.dylib                     0x34484aac 0x34483000 + 6828\n\n1、 符号表堆栈地址计算方式\n\n要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址0x000f0846，该进程的运行时起始地址是0xa2000，崩溃处距离进程起始地址的偏移量为十进制的321606(对应十六进制为0x4E846)。三者对应关系：\n\n    0x000f0846 = 0xa2000 + 0x4E846\n\n对应的公式为：\n\n    运行时堆栈地址 = 运行时起始地址 + 偏移量\n\n崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：\n\n    符号表堆栈地址 = 符号表起始地址 + 偏移量\n\n2、获取符号表中的TEXT段起始地址\n\n符号表中TEXT段的起始地址可以通过以下命令获得：\n\n    $otool -l Your.app.dSYM/Contents/Resources/DWARF/Your\n\n运行结果中的片段如下：\n\n    Load command 3\n          cmd LC_SEGMENT\n      cmdsize 736\n      segname __TEXT\n       vmaddr 0x00004000\n       vmsize 0x00700000\n      fileoff 0\n     filesize 0\n      maxprot 0x00000005\n     initprot 0x00000005\n       nsects 10\n        flags 0x0\n\n其中的vmaddr 0x00004000字段即为TEXT段的起始地址。\n\n3、计算符号表地址\n\n由公式：\n\n    符号表堆栈地址 = 符号表起始地址 + 偏移量\n可得：\n\n    0x52846 = 0x4E846 + 0x4000\n\n即符号表中的崩溃地址为0x52846，接下来就可以根据这个地址解析出崩溃位置了。\n\n四、崩溃信息还原\n\n有了符号表的崩溃地址，有以下几种方式解析崩溃信息：\n\n1、dwarfdump\n\n命令如下：\n\n    $dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep 'Line table'\n\n需要注意的是：\n\n    这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集\n\n比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。\n\n—lookup后面跟的一定是经过准确计算的符号表中的崩溃地址\n\n使用dwarfdump解析的结果较杂乱，因此使用grep命令抓取其中关键点展示出来\n\n运行结果如下：\n\n    Line table dir : '/data/.../Src/OBDConnectSetting/Controller'\n    Line table file: 'OBDFirstConnectViewController.m' line 882, column 5 with start address 0x000000000052768\n\n其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。\n\n2、atos\n\natos是另一种更加简洁的崩溃日志解析方法，使用方式如下：\n\n     $atos -o LuBao -arch armv7 0x52846\n其执行结果如下：\n\n    -[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n相对dwarfdump命令的解析结果，更加简洁直观的指出了崩溃发生的位置。\n\n3、无需符号表崩溃地址的解析方式\n\n实际上，atos还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：\n\n    $atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846\n其中-l选项指定了二进制文件在运行时的起始地址0xa2000（获取方式见Binary Images相关内容）,后面跟的是崩溃发生的运行时地址0x000f0846，解析结果和使用计算得到的符号表中崩溃地址一致：\n\n    -[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n五、参考文档\n\n* [How to Match a Crash Report to a Build](https://developer.apple.com/library/mac/qa/qa1765/_index.html)\n\n* [CrashReporter](https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html)\n\n* [Understanding and Analyzing iOS Application Crash Reports](https://developer.apple.com/library/ios/technotes/tn2151/_index.html)\n\n* [atos and dwarfdump won’t symbolicate my address](http://stackoverflow.com/a/12464678/2293677)\n\n**原文参考：**[手动解析CrashLog](http://www.cocoachina.com/ios/20150803/12806.html)\n\n3、异常处理\n4、异常规避\n\n* 内存地址分配\n* 日志源文件\n* 异常产生\n\nLinux系统中，支持两类信号\n\n1.POSIX标准的规则信号(regular signal，编号1－31)\n\n2.实时信号(real-time signal，编号32－63)\n\n对于regular signal来说，无论发送多少次，在接收进程处理之前，重复的信号会被合并为一个（每一种regular signal对应于系统进程表项中软中断字段的一个比特，因此不同的信号可以同时存在，同一信号仅能表示有或无而不能表示重复的次数)；\n\n而real-time signal发送多少次，就会在接收进程的信号队列中出现多少次。\nLinux在i386上的31个规则信号(regular signal)\n\n    kill -l\n\n| 编号 | 信号名称  | 缺省动作 | 说明 |\n| --- | --- | --- | ---|\n|1 |SIGHUP |终止 |终止控制终端或进程|\n|2| SIGINT |终止| 键盘产生的中断(Ctrl-C)|\n|3 |SIGQUIT |dump| 键盘产生的退出|\n|4| SIGILL |dump| 非法指令|\n|5| SIGTRAP |dump| debug中断|\n|6 |SIGABRT／SIGIOT| dump| 异常中止|\n|7| SIGBUS／SIGEMT |dump| 总线异常/EMT指令|\n|8| SIGFPE |dump| 浮点运算溢出|\n|9 |SIGKILL |终止| 强制进程终止|\n|10| SIGUSR1 |终止| 用户信号,进程可自定义用途|\n|11| SIGSEGV |dump| 非法内存地址引用|\n|12| SIGUSR2 |终止| 用户信号，进程可自定义用途|\n|13| SIGPIPE |终止| 向某个没有读取的管道中写入数据|\n|14| SIGALRM |终止| 时钟中断(闹钟)|\n|15| SIGTERM |终止| 进程终止|\n|16| SIGSTKFLT |终止| 协处理器栈错误|\n|17| SIGCHLD |忽略| 子进程退出或中断|\n|18| SIGCONT |继续| 如进程停止状态则开始运行|\n|19| SIGSTOP |停止| 停止进程运行|\n|20| SIGSTP |停止| 键盘产生的停止|\n|21| SIGTTIN |停止| 后台进程请求输入|\n|22| SIGTTOU |停止| 后台进程请求输出|\n|23| SIGURG |忽略 |socket发生紧急情况|\n|24| SIGXCPU |dump| CPU时间限制被打破|\n|25| SIGXFSZ |dump| 文件大小限制被打破|\n|26| SIGVTALRM| 终止| 虚拟定时时钟|\n|27| SIGPROF |终止| profile timer clock|\n|28| SIGWINCH |忽略| 窗口尺寸调整|\n|29| SIGIO/SIGPOLL| 终止| I/O可用|\n|30| SIGPWR |终止| 电源异常|\n|31| SIGSYS／SYSUNUSED| dump| 系统调用异常|\n\n在不同系统中同一数值可能会代表不同的信号，因此，最好使用信号名而不是信号值。\n\n信号的数值越小，则优先级越高。当进程收到多个待处理信号时，总是先处理优先级别高的信号。\n","slug":"学习笔记/iOS/iOS之性能优化/异常处理/iOS之异常处理","published":1,"date":"2021-02-24T12:31:09.187Z","updated":"2021-03-12T15:34:15.500Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tjx0038w37u8w8r32sf","content":"<h1 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\"></a> 异常处理</h1>\n<p>1、异常日志收集</p>\n<ul>\n<li>Xcode、App Store</li>\n<li>第三方</li>\n<li>自己收集<br />\n跟踪异常产生的时机并捕捉、处理：上报之类<br />\n<a href=\"http://www.cocoachina.com/ios/20170816/20270.html\">iOS Swift Crash的捕获</a><br />\n<a href=\"https://nianxi.net/ios/ios-crash-reporter.html\">漫谈iOS Crash收集框架</a><br />\n<a href=\"https://blog.csdn.net/wiseuc_jianghai/article/details/78031638\">dSYMTools</a><br />\n<a href=\"https://www.jianshu.com/p/20dfe4fe1b3f\">DWARF 介绍</a><a href=\"https://www.jianshu.com/p/20dfe4fe1b3f\">DWARF 介绍</a></li>\n</ul>\n<p>2、异常日志分析</p>\n<p>一、.dSYM</p>\n<p>.dSYM(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的DWARF（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：</p>\n<pre><code>.xcarchive\n--dSYMs\n  |--Your.app.dSYM\n    |--Contents\n      |--Resources\n        |--DWARF\n</code></pre>\n<p>二、确定符号表和崩溃日志的一致性</p>\n<p>有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。</p>\n<p>1、从崩溃日志中获取UUID</p>\n<p>崩溃日志比较靠下的位置有个Binary Images模块，其第一行内容如下：</p>\n<pre class=\"highlight\"><code class=\"log\">Binary Images:\n0x1f000 - 0x906fff sd_doctor_ios armv7  &lt;eef4e325f9d6393f93e87b7ee327a5ea&gt; /var/containers/Bundle/Application/8BEEC659-8263-4092-A2DC-EF48060BB142/sd_doctor_ios.app/sd_doctor_ios\n</code></pre>\n<p>从中可以看到关于你应用的若干信息：</p>\n<p>代码段的起终地址为：0x1f000 - 0x906fff</p>\n<p>运行你应用的CPU指令集为：armv7</p>\n<p>应用的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（不区分大小写）</p>\n<p>2、从符号表中获取UUID</p>\n<p>执行以下命令从符号表中提取UUID：</p>\n<pre><code>dwarfdump --uuid Your.app.dSYM\ndwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your\n</code></pre>\n<p>由此得到armv7指令集的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。</p>\n<p>三、计算崩溃符号表地址<br />\n以下面的崩溃堆栈为例：</p>\n<pre><code>Thread 0:\n0   libobjc.A.dylib                   0x33f10f60 0x33efe000 + 77664\n1   Foundation                        0x273526ac 0x2734a000 + 34476\n2   Foundation                        0x27355c3e 0x2734a000 + 48190\n3   UIKit                             0x29ef9d1c 0x29bbc000 + 3398940\n4   UIKit                             0x29ef9c9a 0x29bbc000 + 3398810\n5   UIKit                             0x29ef954c 0x29bbc000 + 3396940\n6   UIKit                             0x29c3a16a 0x29bbc000 + 516458\n7   UIKit                             0x29e4b8e6 0x29bbc000 + 2685158\n8   UIKit                             0x29c3a128 0x29bbc000 + 516392\n9   Your                              0x000f0846 0xa2000 + 321606\n10  UIKit                             0x29e90fb2 0x29bbc000 + 2969522\n11  UIKit                             0x29e91076 0x29bbc000 + 2969718\n12  UIKit                             0x29e867cc 0x29bbc000 + 2926540\n13  UIKit                             0x29c9e8ea 0x29bbc000 + 927978\n14  UIKit                             0x29bc8a6a 0x29bbc000 + 51818\n15  QuartzCore                        0x295f0a08 0x295e4000 + 51720\n16  QuartzCore                        0x295ec3e0 0x295e4000 + 33760\n17  QuartzCore                        0x295ec268 0x295e4000 + 33384\n18  QuartzCore                        0x295ebc4c 0x295e4000 + 31820\n19  QuartzCore                        0x295eba50 0x295e4000 + 31312\n20  QuartzCore                        0x295e5928 0x295e4000 + 6440\n21  CoreFoundation                    0x266d0d92 0x26604000 + 839058\n22  CoreFoundation                    0x266ce44e 0x26604000 + 828494\n23  CoreFoundation                    0x266ce856 0x26604000 + 829526\n24  CoreFoundation                    0x2661c3bc 0x26604000 + 99260\n25  CoreFoundation                    0x2661c1ce 0x26604000 + 98766\n26  GraphicsServices                  0x2da1a0a4 0x2da11000 + 37028\n27  UIKit                             0x29c2a7ac 0x29bbc000 + 452524\n28  Your                              0x0024643a 0xa2000 + 1721402\n29  libdyld.dylib                     0x34484aac 0x34483000 + 6828\n</code></pre>\n<p>1、 符号表堆栈地址计算方式</p>\n<p>要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址0x000f0846，该进程的运行时起始地址是0xa2000，崩溃处距离进程起始地址的偏移量为十进制的321606(对应十六进制为0x4E846)。三者对应关系：</p>\n<pre><code>0x000f0846 = 0xa2000 + 0x4E846\n</code></pre>\n<p>对应的公式为：</p>\n<pre><code>运行时堆栈地址 = 运行时起始地址 + 偏移量\n</code></pre>\n<p>崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：</p>\n<pre><code>符号表堆栈地址 = 符号表起始地址 + 偏移量\n</code></pre>\n<p>2、获取符号表中的TEXT段起始地址</p>\n<p>符号表中TEXT段的起始地址可以通过以下命令获得：</p>\n<pre><code>$otool -l Your.app.dSYM/Contents/Resources/DWARF/Your\n</code></pre>\n<p>运行结果中的片段如下：</p>\n<pre><code>Load command 3\n      cmd LC_SEGMENT\n  cmdsize 736\n  segname __TEXT\n   vmaddr 0x00004000\n   vmsize 0x00700000\n  fileoff 0\n filesize 0\n  maxprot 0x00000005\n initprot 0x00000005\n   nsects 10\n    flags 0x0\n</code></pre>\n<p>其中的vmaddr 0x00004000字段即为TEXT段的起始地址。</p>\n<p>3、计算符号表地址</p>\n<p>由公式：</p>\n<pre><code>符号表堆栈地址 = 符号表起始地址 + 偏移量\n</code></pre>\n<p>可得：</p>\n<pre><code>0x52846 = 0x4E846 + 0x4000\n</code></pre>\n<p>即符号表中的崩溃地址为0x52846，接下来就可以根据这个地址解析出崩溃位置了。</p>\n<p>四、崩溃信息还原</p>\n<p>有了符号表的崩溃地址，有以下几种方式解析崩溃信息：</p>\n<p>1、dwarfdump</p>\n<p>命令如下：</p>\n<pre><code>$dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep 'Line table'\n</code></pre>\n<p>需要注意的是：</p>\n<pre><code>这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集\n</code></pre>\n<p>比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。</p>\n<p>—lookup后面跟的一定是经过准确计算的符号表中的崩溃地址</p>\n<p>使用dwarfdump解析的结果较杂乱，因此使用grep命令抓取其中关键点展示出来</p>\n<p>运行结果如下：</p>\n<pre><code>Line table dir : '/data/.../Src/OBDConnectSetting/Controller'\nLine table file: 'OBDFirstConnectViewController.m' line 882, column 5 with start address 0x000000000052768\n</code></pre>\n<p>其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。</p>\n<p>2、atos</p>\n<p>atos是另一种更加简洁的崩溃日志解析方法，使用方式如下：</p>\n<pre><code> $atos -o LuBao -arch armv7 0x52846\n</code></pre>\n<p>其执行结果如下：</p>\n<pre><code>-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n</code></pre>\n<p>相对dwarfdump命令的解析结果，更加简洁直观的指出了崩溃发生的位置。</p>\n<p>3、无需符号表崩溃地址的解析方式</p>\n<p>实际上，atos还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：</p>\n<pre><code>$atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846\n</code></pre>\n<p>其中-l选项指定了二进制文件在运行时的起始地址0xa2000（获取方式见Binary Images相关内容）,后面跟的是崩溃发生的运行时地址0x000f0846，解析结果和使用计算得到的符号表中崩溃地址一致：</p>\n<pre><code>-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n</code></pre>\n<p>五、参考文档</p>\n<ul>\n<li>\n<p><a href=\"https://developer.apple.com/library/mac/qa/qa1765/_index.html\">How to Match a Crash Report to a Build</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html\">CrashReporter</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/library/ios/technotes/tn2151/_index.html\">Understanding and Analyzing iOS Application Crash Reports</a></p>\n</li>\n<li>\n<p><a href=\"http://stackoverflow.com/a/12464678/2293677\">atos and dwarfdump won’t symbolicate my address</a></p>\n</li>\n</ul>\n<p><strong>原文参考：</strong><a href=\"http://www.cocoachina.com/ios/20150803/12806.html\">手动解析CrashLog</a></p>\n<p>3、异常处理<br />\n4、异常规避</p>\n<ul>\n<li>内存地址分配</li>\n<li>日志源文件</li>\n<li>异常产生</li>\n</ul>\n<p>Linux系统中，支持两类信号</p>\n<p>1.POSIX标准的规则信号(regular signal，编号1－31)</p>\n<p>2.实时信号(real-time signal，编号32－63)</p>\n<p>对于regular signal来说，无论发送多少次，在接收进程处理之前，重复的信号会被合并为一个（每一种regular signal对应于系统进程表项中软中断字段的一个比特，因此不同的信号可以同时存在，同一信号仅能表示有或无而不能表示重复的次数)；</p>\n<p>而real-time signal发送多少次，就会在接收进程的信号队列中出现多少次。<br />\nLinux在i386上的31个规则信号(regular signal)</p>\n<pre><code>kill -l\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>编号</th>\n<th>信号名称</th>\n<th>缺省动作</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>SIGHUP</td>\n<td>终止</td>\n<td>终止控制终端或进程</td>\n</tr>\n<tr>\n<td>2</td>\n<td>SIGINT</td>\n<td>终止</td>\n<td>键盘产生的中断(Ctrl-C)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>SIGQUIT</td>\n<td>dump</td>\n<td>键盘产生的退出</td>\n</tr>\n<tr>\n<td>4</td>\n<td>SIGILL</td>\n<td>dump</td>\n<td>非法指令</td>\n</tr>\n<tr>\n<td>5</td>\n<td>SIGTRAP</td>\n<td>dump</td>\n<td>debug中断</td>\n</tr>\n<tr>\n<td>6</td>\n<td>SIGABRT／SIGIOT</td>\n<td>dump</td>\n<td>异常中止</td>\n</tr>\n<tr>\n<td>7</td>\n<td>SIGBUS／SIGEMT</td>\n<td>dump</td>\n<td>总线异常/EMT指令</td>\n</tr>\n<tr>\n<td>8</td>\n<td>SIGFPE</td>\n<td>dump</td>\n<td>浮点运算溢出</td>\n</tr>\n<tr>\n<td>9</td>\n<td>SIGKILL</td>\n<td>终止</td>\n<td>强制进程终止</td>\n</tr>\n<tr>\n<td>10</td>\n<td>SIGUSR1</td>\n<td>终止</td>\n<td>用户信号,进程可自定义用途</td>\n</tr>\n<tr>\n<td>11</td>\n<td>SIGSEGV</td>\n<td>dump</td>\n<td>非法内存地址引用</td>\n</tr>\n<tr>\n<td>12</td>\n<td>SIGUSR2</td>\n<td>终止</td>\n<td>用户信号，进程可自定义用途</td>\n</tr>\n<tr>\n<td>13</td>\n<td>SIGPIPE</td>\n<td>终止</td>\n<td>向某个没有读取的管道中写入数据</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SIGALRM</td>\n<td>终止</td>\n<td>时钟中断(闹钟)</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SIGTERM</td>\n<td>终止</td>\n<td>进程终止</td>\n</tr>\n<tr>\n<td>16</td>\n<td>SIGSTKFLT</td>\n<td>终止</td>\n<td>协处理器栈错误</td>\n</tr>\n<tr>\n<td>17</td>\n<td>SIGCHLD</td>\n<td>忽略</td>\n<td>子进程退出或中断</td>\n</tr>\n<tr>\n<td>18</td>\n<td>SIGCONT</td>\n<td>继续</td>\n<td>如进程停止状态则开始运行</td>\n</tr>\n<tr>\n<td>19</td>\n<td>SIGSTOP</td>\n<td>停止</td>\n<td>停止进程运行</td>\n</tr>\n<tr>\n<td>20</td>\n<td>SIGSTP</td>\n<td>停止</td>\n<td>键盘产生的停止</td>\n</tr>\n<tr>\n<td>21</td>\n<td>SIGTTIN</td>\n<td>停止</td>\n<td>后台进程请求输入</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SIGTTOU</td>\n<td>停止</td>\n<td>后台进程请求输出</td>\n</tr>\n<tr>\n<td>23</td>\n<td>SIGURG</td>\n<td>忽略</td>\n<td>socket发生紧急情况</td>\n</tr>\n<tr>\n<td>24</td>\n<td>SIGXCPU</td>\n<td>dump</td>\n<td>CPU时间限制被打破</td>\n</tr>\n<tr>\n<td>25</td>\n<td>SIGXFSZ</td>\n<td>dump</td>\n<td>文件大小限制被打破</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SIGVTALRM</td>\n<td>终止</td>\n<td>虚拟定时时钟</td>\n</tr>\n<tr>\n<td>27</td>\n<td>SIGPROF</td>\n<td>终止</td>\n<td>profile timer clock</td>\n</tr>\n<tr>\n<td>28</td>\n<td>SIGWINCH</td>\n<td>忽略</td>\n<td>窗口尺寸调整</td>\n</tr>\n<tr>\n<td>29</td>\n<td>SIGIO/SIGPOLL</td>\n<td>终止</td>\n<td>I/O可用</td>\n</tr>\n<tr>\n<td>30</td>\n<td>SIGPWR</td>\n<td>终止</td>\n<td>电源异常</td>\n</tr>\n<tr>\n<td>31</td>\n<td>SIGSYS／SYSUNUSED</td>\n<td>dump</td>\n<td>系统调用异常</td>\n</tr>\n</tbody>\n</table>\n<p>在不同系统中同一数值可能会代表不同的信号，因此，最好使用信号名而不是信号值。</p>\n<p>信号的数值越小，则优先级越高。当进程收到多个待处理信号时，总是先处理优先级别高的信号。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\"></a> 异常处理</h1>\n<p>1、异常日志收集</p>\n<ul>\n<li>Xcode、App Store</li>\n<li>第三方</li>\n<li>自己收集<br />\n跟踪异常产生的时机并捕捉、处理：上报之类<br />\n<a href=\"http://www.cocoachina.com/ios/20170816/20270.html\">iOS Swift Crash的捕获</a><br />\n<a href=\"https://nianxi.net/ios/ios-crash-reporter.html\">漫谈iOS Crash收集框架</a><br />\n<a href=\"https://blog.csdn.net/wiseuc_jianghai/article/details/78031638\">dSYMTools</a><br />\n<a href=\"https://www.jianshu.com/p/20dfe4fe1b3f\">DWARF 介绍</a><a href=\"https://www.jianshu.com/p/20dfe4fe1b3f\">DWARF 介绍</a></li>\n</ul>\n<p>2、异常日志分析</p>\n<p>一、.dSYM</p>\n<p>.dSYM(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的DWARF（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：</p>\n<pre><code>.xcarchive\n--dSYMs\n  |--Your.app.dSYM\n    |--Contents\n      |--Resources\n        |--DWARF\n</code></pre>\n<p>二、确定符号表和崩溃日志的一致性</p>\n<p>有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。</p>\n<p>1、从崩溃日志中获取UUID</p>\n<p>崩溃日志比较靠下的位置有个Binary Images模块，其第一行内容如下：</p>\n<pre class=\"highlight\"><code class=\"log\">Binary Images:\n0x1f000 - 0x906fff sd_doctor_ios armv7  &lt;eef4e325f9d6393f93e87b7ee327a5ea&gt; /var/containers/Bundle/Application/8BEEC659-8263-4092-A2DC-EF48060BB142/sd_doctor_ios.app/sd_doctor_ios\n</code></pre>\n<p>从中可以看到关于你应用的若干信息：</p>\n<p>代码段的起终地址为：0x1f000 - 0x906fff</p>\n<p>运行你应用的CPU指令集为：armv7</p>\n<p>应用的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（不区分大小写）</p>\n<p>2、从符号表中获取UUID</p>\n<p>执行以下命令从符号表中提取UUID：</p>\n<pre><code>dwarfdump --uuid Your.app.dSYM\ndwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your\n</code></pre>\n<p>由此得到armv7指令集的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。</p>\n<p>三、计算崩溃符号表地址<br />\n以下面的崩溃堆栈为例：</p>\n<pre><code>Thread 0:\n0   libobjc.A.dylib                   0x33f10f60 0x33efe000 + 77664\n1   Foundation                        0x273526ac 0x2734a000 + 34476\n2   Foundation                        0x27355c3e 0x2734a000 + 48190\n3   UIKit                             0x29ef9d1c 0x29bbc000 + 3398940\n4   UIKit                             0x29ef9c9a 0x29bbc000 + 3398810\n5   UIKit                             0x29ef954c 0x29bbc000 + 3396940\n6   UIKit                             0x29c3a16a 0x29bbc000 + 516458\n7   UIKit                             0x29e4b8e6 0x29bbc000 + 2685158\n8   UIKit                             0x29c3a128 0x29bbc000 + 516392\n9   Your                              0x000f0846 0xa2000 + 321606\n10  UIKit                             0x29e90fb2 0x29bbc000 + 2969522\n11  UIKit                             0x29e91076 0x29bbc000 + 2969718\n12  UIKit                             0x29e867cc 0x29bbc000 + 2926540\n13  UIKit                             0x29c9e8ea 0x29bbc000 + 927978\n14  UIKit                             0x29bc8a6a 0x29bbc000 + 51818\n15  QuartzCore                        0x295f0a08 0x295e4000 + 51720\n16  QuartzCore                        0x295ec3e0 0x295e4000 + 33760\n17  QuartzCore                        0x295ec268 0x295e4000 + 33384\n18  QuartzCore                        0x295ebc4c 0x295e4000 + 31820\n19  QuartzCore                        0x295eba50 0x295e4000 + 31312\n20  QuartzCore                        0x295e5928 0x295e4000 + 6440\n21  CoreFoundation                    0x266d0d92 0x26604000 + 839058\n22  CoreFoundation                    0x266ce44e 0x26604000 + 828494\n23  CoreFoundation                    0x266ce856 0x26604000 + 829526\n24  CoreFoundation                    0x2661c3bc 0x26604000 + 99260\n25  CoreFoundation                    0x2661c1ce 0x26604000 + 98766\n26  GraphicsServices                  0x2da1a0a4 0x2da11000 + 37028\n27  UIKit                             0x29c2a7ac 0x29bbc000 + 452524\n28  Your                              0x0024643a 0xa2000 + 1721402\n29  libdyld.dylib                     0x34484aac 0x34483000 + 6828\n</code></pre>\n<p>1、 符号表堆栈地址计算方式</p>\n<p>要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址0x000f0846，该进程的运行时起始地址是0xa2000，崩溃处距离进程起始地址的偏移量为十进制的321606(对应十六进制为0x4E846)。三者对应关系：</p>\n<pre><code>0x000f0846 = 0xa2000 + 0x4E846\n</code></pre>\n<p>对应的公式为：</p>\n<pre><code>运行时堆栈地址 = 运行时起始地址 + 偏移量\n</code></pre>\n<p>崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：</p>\n<pre><code>符号表堆栈地址 = 符号表起始地址 + 偏移量\n</code></pre>\n<p>2、获取符号表中的TEXT段起始地址</p>\n<p>符号表中TEXT段的起始地址可以通过以下命令获得：</p>\n<pre><code>$otool -l Your.app.dSYM/Contents/Resources/DWARF/Your\n</code></pre>\n<p>运行结果中的片段如下：</p>\n<pre><code>Load command 3\n      cmd LC_SEGMENT\n  cmdsize 736\n  segname __TEXT\n   vmaddr 0x00004000\n   vmsize 0x00700000\n  fileoff 0\n filesize 0\n  maxprot 0x00000005\n initprot 0x00000005\n   nsects 10\n    flags 0x0\n</code></pre>\n<p>其中的vmaddr 0x00004000字段即为TEXT段的起始地址。</p>\n<p>3、计算符号表地址</p>\n<p>由公式：</p>\n<pre><code>符号表堆栈地址 = 符号表起始地址 + 偏移量\n</code></pre>\n<p>可得：</p>\n<pre><code>0x52846 = 0x4E846 + 0x4000\n</code></pre>\n<p>即符号表中的崩溃地址为0x52846，接下来就可以根据这个地址解析出崩溃位置了。</p>\n<p>四、崩溃信息还原</p>\n<p>有了符号表的崩溃地址，有以下几种方式解析崩溃信息：</p>\n<p>1、dwarfdump</p>\n<p>命令如下：</p>\n<pre><code>$dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep 'Line table'\n</code></pre>\n<p>需要注意的是：</p>\n<pre><code>这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集\n</code></pre>\n<p>比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。</p>\n<p>—lookup后面跟的一定是经过准确计算的符号表中的崩溃地址</p>\n<p>使用dwarfdump解析的结果较杂乱，因此使用grep命令抓取其中关键点展示出来</p>\n<p>运行结果如下：</p>\n<pre><code>Line table dir : '/data/.../Src/OBDConnectSetting/Controller'\nLine table file: 'OBDFirstConnectViewController.m' line 882, column 5 with start address 0x000000000052768\n</code></pre>\n<p>其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。</p>\n<p>2、atos</p>\n<p>atos是另一种更加简洁的崩溃日志解析方法，使用方式如下：</p>\n<pre><code> $atos -o LuBao -arch armv7 0x52846\n</code></pre>\n<p>其执行结果如下：</p>\n<pre><code>-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n</code></pre>\n<p>相对dwarfdump命令的解析结果，更加简洁直观的指出了崩溃发生的位置。</p>\n<p>3、无需符号表崩溃地址的解析方式</p>\n<p>实际上，atos还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：</p>\n<pre><code>$atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846\n</code></pre>\n<p>其中-l选项指定了二进制文件在运行时的起始地址0xa2000（获取方式见Binary Images相关内容）,后面跟的是崩溃发生的运行时地址0x000f0846，解析结果和使用计算得到的符号表中崩溃地址一致：</p>\n<pre><code>-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n</code></pre>\n<p>五、参考文档</p>\n<ul>\n<li>\n<p><a href=\"https://developer.apple.com/library/mac/qa/qa1765/_index.html\">How to Match a Crash Report to a Build</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html\">CrashReporter</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/library/ios/technotes/tn2151/_index.html\">Understanding and Analyzing iOS Application Crash Reports</a></p>\n</li>\n<li>\n<p><a href=\"http://stackoverflow.com/a/12464678/2293677\">atos and dwarfdump won’t symbolicate my address</a></p>\n</li>\n</ul>\n<p><strong>原文参考：</strong><a href=\"http://www.cocoachina.com/ios/20150803/12806.html\">手动解析CrashLog</a></p>\n<p>3、异常处理<br />\n4、异常规避</p>\n<ul>\n<li>内存地址分配</li>\n<li>日志源文件</li>\n<li>异常产生</li>\n</ul>\n<p>Linux系统中，支持两类信号</p>\n<p>1.POSIX标准的规则信号(regular signal，编号1－31)</p>\n<p>2.实时信号(real-time signal，编号32－63)</p>\n<p>对于regular signal来说，无论发送多少次，在接收进程处理之前，重复的信号会被合并为一个（每一种regular signal对应于系统进程表项中软中断字段的一个比特，因此不同的信号可以同时存在，同一信号仅能表示有或无而不能表示重复的次数)；</p>\n<p>而real-time signal发送多少次，就会在接收进程的信号队列中出现多少次。<br />\nLinux在i386上的31个规则信号(regular signal)</p>\n<pre><code>kill -l\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>编号</th>\n<th>信号名称</th>\n<th>缺省动作</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>SIGHUP</td>\n<td>终止</td>\n<td>终止控制终端或进程</td>\n</tr>\n<tr>\n<td>2</td>\n<td>SIGINT</td>\n<td>终止</td>\n<td>键盘产生的中断(Ctrl-C)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>SIGQUIT</td>\n<td>dump</td>\n<td>键盘产生的退出</td>\n</tr>\n<tr>\n<td>4</td>\n<td>SIGILL</td>\n<td>dump</td>\n<td>非法指令</td>\n</tr>\n<tr>\n<td>5</td>\n<td>SIGTRAP</td>\n<td>dump</td>\n<td>debug中断</td>\n</tr>\n<tr>\n<td>6</td>\n<td>SIGABRT／SIGIOT</td>\n<td>dump</td>\n<td>异常中止</td>\n</tr>\n<tr>\n<td>7</td>\n<td>SIGBUS／SIGEMT</td>\n<td>dump</td>\n<td>总线异常/EMT指令</td>\n</tr>\n<tr>\n<td>8</td>\n<td>SIGFPE</td>\n<td>dump</td>\n<td>浮点运算溢出</td>\n</tr>\n<tr>\n<td>9</td>\n<td>SIGKILL</td>\n<td>终止</td>\n<td>强制进程终止</td>\n</tr>\n<tr>\n<td>10</td>\n<td>SIGUSR1</td>\n<td>终止</td>\n<td>用户信号,进程可自定义用途</td>\n</tr>\n<tr>\n<td>11</td>\n<td>SIGSEGV</td>\n<td>dump</td>\n<td>非法内存地址引用</td>\n</tr>\n<tr>\n<td>12</td>\n<td>SIGUSR2</td>\n<td>终止</td>\n<td>用户信号，进程可自定义用途</td>\n</tr>\n<tr>\n<td>13</td>\n<td>SIGPIPE</td>\n<td>终止</td>\n<td>向某个没有读取的管道中写入数据</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SIGALRM</td>\n<td>终止</td>\n<td>时钟中断(闹钟)</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SIGTERM</td>\n<td>终止</td>\n<td>进程终止</td>\n</tr>\n<tr>\n<td>16</td>\n<td>SIGSTKFLT</td>\n<td>终止</td>\n<td>协处理器栈错误</td>\n</tr>\n<tr>\n<td>17</td>\n<td>SIGCHLD</td>\n<td>忽略</td>\n<td>子进程退出或中断</td>\n</tr>\n<tr>\n<td>18</td>\n<td>SIGCONT</td>\n<td>继续</td>\n<td>如进程停止状态则开始运行</td>\n</tr>\n<tr>\n<td>19</td>\n<td>SIGSTOP</td>\n<td>停止</td>\n<td>停止进程运行</td>\n</tr>\n<tr>\n<td>20</td>\n<td>SIGSTP</td>\n<td>停止</td>\n<td>键盘产生的停止</td>\n</tr>\n<tr>\n<td>21</td>\n<td>SIGTTIN</td>\n<td>停止</td>\n<td>后台进程请求输入</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SIGTTOU</td>\n<td>停止</td>\n<td>后台进程请求输出</td>\n</tr>\n<tr>\n<td>23</td>\n<td>SIGURG</td>\n<td>忽略</td>\n<td>socket发生紧急情况</td>\n</tr>\n<tr>\n<td>24</td>\n<td>SIGXCPU</td>\n<td>dump</td>\n<td>CPU时间限制被打破</td>\n</tr>\n<tr>\n<td>25</td>\n<td>SIGXFSZ</td>\n<td>dump</td>\n<td>文件大小限制被打破</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SIGVTALRM</td>\n<td>终止</td>\n<td>虚拟定时时钟</td>\n</tr>\n<tr>\n<td>27</td>\n<td>SIGPROF</td>\n<td>终止</td>\n<td>profile timer clock</td>\n</tr>\n<tr>\n<td>28</td>\n<td>SIGWINCH</td>\n<td>忽略</td>\n<td>窗口尺寸调整</td>\n</tr>\n<tr>\n<td>29</td>\n<td>SIGIO/SIGPOLL</td>\n<td>终止</td>\n<td>I/O可用</td>\n</tr>\n<tr>\n<td>30</td>\n<td>SIGPWR</td>\n<td>终止</td>\n<td>电源异常</td>\n</tr>\n<tr>\n<td>31</td>\n<td>SIGSYS／SYSUNUSED</td>\n<td>dump</td>\n<td>系统调用异常</td>\n</tr>\n</tbody>\n</table>\n<p>在不同系统中同一数值可能会代表不同的信号，因此，最好使用信号名而不是信号值。</p>\n<p>信号的数值越小，则优先级越高。当进程收到多个待处理信号时，总是先处理优先级别高的信号。</p>\n"},{"_content":"# 手动解析 crash 日志\n\n## 1. 符号化方式\n\n* Xcode\n* symbolicatecrash\n* atos\n* otool\n\n## 2. [如何手动解析CrashLog](http://www.cocoachina.com/articles/12806)\n","source":"_posts/学习笔记/iOS/iOS之性能优化/异常处理/手动解析 iOS crash 日志.md","raw":"# 手动解析 crash 日志\n\n## 1. 符号化方式\n\n* Xcode\n* symbolicatecrash\n* atos\n* otool\n\n## 2. [如何手动解析CrashLog](http://www.cocoachina.com/articles/12806)\n","slug":"学习笔记/iOS/iOS之性能优化/异常处理/手动解析 iOS crash 日志","published":1,"date":"2021-03-12T15:27:46.952Z","updated":"2021-03-12T15:36:12.662Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tjz0039w37ucgrc6uw6","content":"<h1 id=\"手动解析-crash-日志\"><a class=\"markdownIt-Anchor\" href=\"#手动解析-crash-日志\"></a> 手动解析 crash 日志</h1>\n<h2 id=\"1-符号化方式\"><a class=\"markdownIt-Anchor\" href=\"#1-符号化方式\"></a> 1. 符号化方式</h2>\n<ul>\n<li>Xcode</li>\n<li>symbolicatecrash</li>\n<li>atos</li>\n<li>otool</li>\n</ul>\n<h2 id=\"2-如何手动解析crashlog\"><a class=\"markdownIt-Anchor\" href=\"#2-如何手动解析crashlog\"></a> 2. <a href=\"http://www.cocoachina.com/articles/12806\">如何手动解析CrashLog</a></h2>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"手动解析-crash-日志\"><a class=\"markdownIt-Anchor\" href=\"#手动解析-crash-日志\"></a> 手动解析 crash 日志</h1>\n<h2 id=\"1-符号化方式\"><a class=\"markdownIt-Anchor\" href=\"#1-符号化方式\"></a> 1. 符号化方式</h2>\n<ul>\n<li>Xcode</li>\n<li>symbolicatecrash</li>\n<li>atos</li>\n<li>otool</li>\n</ul>\n<h2 id=\"2-如何手动解析crashlog\"><a class=\"markdownIt-Anchor\" href=\"#2-如何手动解析crashlog\"></a> 2. <a href=\"http://www.cocoachina.com/articles/12806\">如何手动解析CrashLog</a></h2>\n"},{"_content":"# Appium 快速上手\n\n## 1. 参考\n\n### 1.1 [Appium教程](https://blog.csdn.net/qq_32502511/article/details/106082084)\n","source":"_posts/学习笔记/iOS/iOS之开发工具/Appium/Appium 快速上手.md","raw":"# Appium 快速上手\n\n## 1. 参考\n\n### 1.1 [Appium教程](https://blog.csdn.net/qq_32502511/article/details/106082084)\n","slug":"学习笔记/iOS/iOS之开发工具/Appium/Appium 快速上手","published":1,"date":"2021-04-06T13:37:55.716Z","updated":"2021-04-06T13:37:55.716Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tk2003aw37u0y4t5jhk","content":"<h1 id=\"appium-快速上手\"><a class=\"markdownIt-Anchor\" href=\"#appium-快速上手\"></a> Appium 快速上手</h1>\n<h2 id=\"1-参考\"><a class=\"markdownIt-Anchor\" href=\"#1-参考\"></a> 1. 参考</h2>\n<h3 id=\"11-appium教程\"><a class=\"markdownIt-Anchor\" href=\"#11-appium教程\"></a> 1.1 <a href=\"https://blog.csdn.net/qq_32502511/article/details/106082084\">Appium教程</a></h3>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"appium-快速上手\"><a class=\"markdownIt-Anchor\" href=\"#appium-快速上手\"></a> Appium 快速上手</h1>\n<h2 id=\"1-参考\"><a class=\"markdownIt-Anchor\" href=\"#1-参考\"></a> 1. 参考</h2>\n<h3 id=\"11-appium教程\"><a class=\"markdownIt-Anchor\" href=\"#11-appium教程\"></a> 1.1 <a href=\"https://blog.csdn.net/qq_32502511/article/details/106082084\">Appium教程</a></h3>\n"},{"_content":"# vim 常用操作\n\n## 1. vim 常用操作\n\n![vim 常用操作](../resources/vim.png)\n","source":"_posts/学习笔记/iOS/iOS之开发工具/Vim/vim 常用操作.md","raw":"# vim 常用操作\n\n## 1. vim 常用操作\n\n![vim 常用操作](../resources/vim.png)\n","slug":"学习笔记/iOS/iOS之开发工具/Vim/vim 常用操作","published":1,"date":"2021-04-06T13:37:55.716Z","updated":"2021-04-06T13:37:55.717Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tk4003bw37u2r9ffx5t","content":"<h1 id=\"vim-常用操作\"><a class=\"markdownIt-Anchor\" href=\"#vim-常用操作\"></a> vim 常用操作</h1>\n<h2 id=\"1-vim-常用操作\"><a class=\"markdownIt-Anchor\" href=\"#1-vim-常用操作\"></a> 1. vim 常用操作</h2>\n<p><img src=\"../resources/vim.png\" alt=\"vim 常用操作\" /></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vim-常用操作\"><a class=\"markdownIt-Anchor\" href=\"#vim-常用操作\"></a> vim 常用操作</h1>\n<h2 id=\"1-vim-常用操作\"><a class=\"markdownIt-Anchor\" href=\"#1-vim-常用操作\"></a> 1. vim 常用操作</h2>\n<p><img src=\"../resources/vim.png\" alt=\"vim 常用操作\" /></p>\n"},{"_content":"# C++\n\nC++\n","source":"_posts/学习笔记/iOS/iOS之编程语言/CAlians/C++/C++.md","raw":"# C++\n\nC++\n","slug":"学习笔记/iOS/iOS之编程语言/CAlians/C++/C++","published":1,"date":"2021-02-24T12:31:09.253Z","updated":"2021-02-25T11:57:20.327Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tke003cw37u00hx6c39","content":"<h1 id=\"c\"><a class=\"markdownIt-Anchor\" href=\"#c\"></a> C++</h1>\n<p>C++</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"c\"><a class=\"markdownIt-Anchor\" href=\"#c\"></a> C++</h1>\n<p>C++</p>\n"},{"_content":"# App Store Connect API\n\n1、[App Store Connect API 使用指南](https://www.dazhuanlan.com/2019/10/08/5d9c54747a775/)\n\n2、[App Store Connect的新特性](https://blog.csdn.net/TuGeLe/article/details/81037228)\n\n3、[如何自动化获取AppStore的销售和趋势报告](https://juejin.im/post/5df75e38f265da33e0568f29)\n","source":"_posts/学习笔记/iOS/iOS之项目管理/CI/Applestore Connect/App Store Connect API.md","raw":"# App Store Connect API\n\n1、[App Store Connect API 使用指南](https://www.dazhuanlan.com/2019/10/08/5d9c54747a775/)\n\n2、[App Store Connect的新特性](https://blog.csdn.net/TuGeLe/article/details/81037228)\n\n3、[如何自动化获取AppStore的销售和趋势报告](https://juejin.im/post/5df75e38f265da33e0568f29)\n","slug":"学习笔记/iOS/iOS之项目管理/CI/Applestore Connect/App Store Connect API","published":1,"date":"2021-04-06T13:37:55.720Z","updated":"2021-04-06T13:37:55.720Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tkf003dw37u3j2l9rev","content":"<h1 id=\"app-store-connect-api\"><a class=\"markdownIt-Anchor\" href=\"#app-store-connect-api\"></a> App Store Connect API</h1>\n<p>1、<a href=\"https://www.dazhuanlan.com/2019/10/08/5d9c54747a775/\">App Store Connect API 使用指南</a></p>\n<p>2、<a href=\"https://blog.csdn.net/TuGeLe/article/details/81037228\">App Store Connect的新特性</a></p>\n<p>3、<a href=\"https://juejin.im/post/5df75e38f265da33e0568f29\">如何自动化获取AppStore的销售和趋势报告</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"app-store-connect-api\"><a class=\"markdownIt-Anchor\" href=\"#app-store-connect-api\"></a> App Store Connect API</h1>\n<p>1、<a href=\"https://www.dazhuanlan.com/2019/10/08/5d9c54747a775/\">App Store Connect API 使用指南</a></p>\n<p>2、<a href=\"https://blog.csdn.net/TuGeLe/article/details/81037228\">App Store Connect的新特性</a></p>\n<p>3、<a href=\"https://juejin.im/post/5df75e38f265da33e0568f29\">如何自动化获取AppStore的销售和趋势报告</a></p>\n"},{"_content":"# Flutter\n\n## 1、入门\n\n### 1.1 语言\n\n1.1.1 Dart：[学习路线](https://dart.dev/tools/sdk)\n\n![Dart](./Dart.png)\n\n1.1.2 Dart [概述](http://dart.goodev.org/guides/language)\n\n1.1.3 Dart [库预览](http://dart.goodev.org/guides/libraries)\n\n### 1.2 工具集\n\n2.1 通用工具\n\n2.1.1 [DartPad](https://dartpad.dartlang.org/)\n\n>DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.\n\n2.1.2 IDEs 与 编辑器\n\n2.1.2.1 IDE： [Android Studio](https://dart.dev/tools/jetbrains-plugin)、[IntelliJ IDEA](https://dart.dev/tools/jetbrains-plugin)、[Visual Studio Code](https://code.visualstudio.com/)\n\n2.1.2.2 IDEDart 社区维护的编辑器：[Emacs](https://github.com/bradyt/dart-mode)、[Atom](https://github.com/dart-atom/dart)、[Vim](https://github.com/dart-lang/dart-vim-plugin)\n\n2.1.3 命令行工具\n\n```shell\ndartanalyzer\n    A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\ndartdoc\n    Generates API reference documentation.\n\ndartfmt\n    Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\npub\n    Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n    Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\nbuild_runner\n    A code generator.\n\ndartfix\n    A tool for migrating Dart source code and fixing common issues.\n```\n\n2.2 Web工具集\n\n```shell\nwebdev\n    A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\ndart2js\n    The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\ndartdevc\n    The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\nbuild_runner\n    A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n```\n\n2.3 命令行工具集与服务器工具集\n\n```shell\nStandalone Dart VM: dart\n    Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\nAOT compiler and runtime: dart2aot, dartaotruntime\n    Support ahead-of-time compilation of Dart code to native x64 machine code.\n\nPub package manager: pub\n    Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n```\n\n## 2、Flutter\n\n### 2.1 Flutter是什么\n\n```markdown\nFlutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\nFlutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。\nDart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。\n\nFlutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n```\n\n### 2.2 核心原则\n\nFlutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。\n\n一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。\n\n![widget_Render_Object](./Flutter_Render_Object.png)\n\n### 2.3 Widget如何工作\n\n1. **Widget** 实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。\n\n2. 一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。\n  \n3. 最终的UI树其实是由一个个独立的Element节点构成。组件最终的Layout、渲染都是通过RenderObject来完成的，从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。\n\n4. Element就是Widget在UI树具体位置的一个实例化对象，大多数Element只有唯一的renderObject，但还有一些Element会有多个子节点，如继承自RenderObjectElement的一些类，比如MultiChildRenderObjectElement。最终所有Element的RenderObject构成一棵树，我们称之为渲染树，即render tree。\n\n5. Element的生命周期如下：\n\n    1. Framework 调用Widget.createElement 创建一个Element实例，记为element。\n    2. Framework 调用 element.mount(parentElement,newSlot) ，mount方法中首先调用elment所对应Widget的createRenderObject方法创建与element相关联的RenderObject对象，然后调用element.attachRenderObject方法将element.renderObject添加到渲染树中插槽指定的位置（这一步不是必须的，一般发生在Element树结构发生变化时才需要重新attach）。插入到渲染树后的element就处于“active”状态，处于“active”状态后就可以显示在屏幕上了（可以隐藏）。\n    3. 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n    4. 当有父Widget的配置数据改变时，同时其State.build返回的Widget结构与之前不同，此时就需要重新构建对应的Element树。为了进行Element复用，在Element重新构建前会先尝试是否可以复用旧树上相同位置的element，element节点在更新前都会调用其对应Widget的canUpdate方法，如果返回true，则复用旧Element，旧的Element会使用新Widget配置数据更新，反之则会创建一个新的Element。Widget.canUpdate主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来避免复用。\n    5. 当有祖先Element决定要移除element 时（如Widget树结构发生了变化，导致element对应的Widget被移除），这时该祖先Element就会调用deactivateChild 方法来移除它，移除后element.renderObject也会被从渲染树中移除，然后Framework会调用element.deactivate 方法，这时element状态变为“inactive”状态。\n    6. “inactive”态的element将不会再显示到屏幕。为了避免在一次动画执行过程中反复创建、移除某个特定element，“inactive”态的element在当前动画最后一帧结束前都会保留，如果在动画执行结束后它还未能重新变成”active“状态，Framework就会调用其unmount方法将其彻底移除，这时element的状态为defunct,它将永远不会再被插入到树中。\n    7. 如果element要重新插入到Element树的其它位置，如element或element的祖先拥有一个GlobalKey（用于全局复用元素），那么Framework会先将element从现有位置移除，然后再调用其activate方法，并将其renderObject重新attach到渲染树。\n\n### 2.4 框架\n\n![Flutter框架](./Flutter_Frameworks.png)\n\n**Flutter Framework:** 这是一个纯 Dart实现的 SDK。它实现了一套基础库， 用于处理动画、绘图和手势。并且基于绘图封装了一套 UI组件库，然后根据 Material 和Cupertino两种视觉风格区分开来。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。\n\n**Flutter Engine:** 这是一个纯 C++实现的 SDK，其中囊括了 Skia引擎、Dart运行时、文字排版引擎等。不过说白了，它就是 Dart的一个运行时，它可以以 JIT、JIT Snapshot 或者 AOT的模式运行 Dart代码。在代码调用 dart:ui库时，提供 dart:ui库中 Native Binding 实现。 不过别忘了，这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码。\n\n### 2.5 界面渲染\n\n2.5.1 Flutter 如何渲染界面\n\n在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：\n\n![iOS_Render_flow](./iOS_Render_flow.webp)\n\nCPU、GPU和显示器以一种特定的方式协作：\n\n> CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。\n\n![Rendering_pipeline](./Rendering_pipeline.png)\n\n> GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。\n\n* Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。\n\n* Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。\n\n渲染树生成：\n\n![Rendering_pipeline](./Rendering_pipe.png)\n\n2.5.2、Flutter 如何更新界面（Diff）\n\n当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。\n\n![Rendering_pipeline](./Widget_update.png)\n\n> 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。\n>\n> Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n\n### 2.6 跨平台、与原生平台通讯\n\n![Flutter_iOS_Android](./Flutter_iOS_Android.png)\n\nFlutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：\n\n* 应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。\n\n* 宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。\n\n* 硬件交互、推送等服务\n  \n* e.g：获取iOS电量\n  \n2.6.1 Flutter跨端——iOS\n\n> Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。\n>\n> 但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。\n\nFlutter 在iOS 上的启动流程：\n![Launch_flow_ios](./Launch_flow_ios.webp)\n\n> 在应用的 View Controller 初始化后，会实例化一个 Flutter project的抽象（以下简称 project）。project会初始化一个 platform view的抽象实例，这个抽象实例会负责创建 Flutter 的运行时（以下简称 engine）。\n>\n> 当 View Controller将要显示时，调用 project查找和组合 Flutter的应用资源 bundle，并且把资源提供给 engine。\nengine在真正需要执行资源 bundle时才会创建 Dart执行的环境（懒加载，以下简称 Dart Controller），然后设置视图窗口的一些属性等东西（这是绘图引擎必需的）。\n然后 engine中的 Dart Controller会加载 Dart代码并执行，执行的过程中会调用 dart:ui的 native binding实现向 GPU提供数据。\n\n2.6.2 Android\n\n## 3、深入Flutter\n\n### 3.1 体积\n\nFlutter应用的体积由两部分组成：应用代码和 SDK代码。应用代码是 Dart编译后的代码，如果做成可动态下发，那么这部分可以不计。\nSDK代码比较大就有点无奈了，SDK的组成部分有 Dart VM，Dart标准库，libwebp、libpng、libboringssl等第三方库，libskia，Dart UI库，然后再加上 icu_data，可能在单 arch下（iOS），SDK体积达到 40+MB。其中仅仅 Dart VM（不包含标准库）就达到了 7MB。\n\nFlutter SDK是 dynamic framework，如此大的二进制体积可能会造成动态链接耗时长。而如果静态链接，可能原来比较大的 App很有可能造成 TEXT段（iOS默认60M）超标。\n\n### 3.2 帧率\n\nDart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。\n\n在任何系统的UI框架中，动画实现的原理都是相同的，即：\n>在一段时间内，快速地多次改变UI外观，由于人眼会产生视觉暂留，最终看到的就是一个“连续”的动画，这和电影的原理是一样的，而UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），指每秒的动画帧数。很明显，帧率越高则动画就会越流畅。一般情况下，对于人眼来说，动画帧率超过16FPS，就比较流畅了，超过32FPS就会非常的细腻平滑，而超过32FPS基本就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用动画基本是持平的。\n\n### 3.3 [Dart线程和异步](https://flutterchina.club/flutter-for-ios/#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5)\n\n**Isolates：** 现代的浏览器以及移动浏览器都运行在多核 CPU 系统上。 要充分利用这些 CPU，开发者一般使用共享内存 数据来保证多线程的正确执行。然而， 多线程共享数据通常会导致很多潜在的问题，并导致代码运行出错。\n\n所有的 Dart 代码在 isolates 中运行而不是线程。 每个 isolate 都有自己的堆内存，并且确保每个 isolate 的状态都不能被其他 isolate 访问。因此，也不存在资源锁的问题。\n\nDart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。\n\nDart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。\n\n* 多线程示例：[isolate_example](./isolate.dart)\n\n### 3.4 [EventLoop、事件分发](https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a)\n\nFlutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。\n\n事件总线（EventBus）通过流控制器（StreamController）控制 事件流（Stream），事件流可以被监听、唤醒、停止、关闭、下沉，订阅者可以通过流控制器订阅流事件。\n\n### 3.5 事件响应\n\n一个对象是否可以响应事件，取决于其对命中测试的返回，当发生用户事件时，会从根节点（RenderView）开始进行命中测试，下面是RenderView的hitTest()源码：\n\n```dart\nbool hitTest(HitTestResult result, { Offset position }) {\n  if (child != null)\n    child.hitTest(result, position: position); //递归子RenderBox进行命中测试\n  result.add(HitTestEntry(this)); //将测试结果添加到result中\n  return true;\n}\n```\n\nRenderBox默认的hitTest()实现：\n\n```dart\nbool hitTest(HitTestResult result, { @required Offset position }) {\n  ...  \n  if (_size.contains(position)) {\n    if (hitTestChildren(result, position: position) || hitTestSelf(position)) {\n      result.add(BoxHitTestEntry(this, position));\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n我们看到默认的实现里调用了hitTestSelf()和hitTestChildren()两个方法，这两个方法默认实现如下：\n\n```dart\n@protected\nbool hitTestSelf(Offset position) => false;\n\n@protected\nbool hitTestChildren(HitTestResult result, { Offset position }) => false;\n```\n\n> hitTest 方法用来判断该 RenderObject 是否在被点击的范围内，同时负责将被点击的 RenderBox 添加到 HitTestResult 列表中，参数 position 为事件触发的坐标（如果有的话），返回 true 则表示有 RenderBox 通过了命中测试，需要响应事件，反之则认为当前RenderBox没有命中。\n>\n> 在继承RenderBox时，可以直接重写hitTest()方法，也可以重写 hitTestSelf() 或 hitTestChildren(), 唯一不同的是 hitTest()中需要将通过命中测试的节点信息添加到命中测试结果列表中，而 hitTestSelf() 和 hitTestChildren()则只需要简单的返回true或false。\n\n### 3.6 Runtime（AOT）、JIT、Dart VM\n\n### 3.7 性能（CPU、GPU、Network、battery、Disk）\n\n### 3.8 [内存管理](https://mp.weixin.qq.com/s/efKCpCtvvHDHUiAsizobBQ)\n\nDart VM将内存管理分为新生代(New Generation)和老年代(Old Generation)。\n\n* 新生代(New Generation): 通常初次分配的对象都位于新生代中，该区域主要是存放内存较小并且生命周期较短的对象，比如局部变量。新生代会频繁执行内存回收(GC)，回收采用“复制-清除”算法，将内存分为两块(图中的from 和 to)，运行时每次只使用其中的一块(图中的from)，另一块备用(图中的to)。当发生GC时，将当前使用的内存块中存活的对象拷贝到备用内存块中，然后清除当前使用内存块，最后，交换两块内存的角色。\n\n![Memory_Manager](./Memory_Manager_01.webp)\n\n* 老年代(Old Generation): 在新生代的GC中“幸存”下来的对象，它们会被转移到老年代中。老年代存放生命力周期较长，内存较大的对象。老年代通常比新生代要大很多。老年代的GC回收采用“标记-清除”算法，分成标记和清除两个阶段。在标记阶段，所有线程参与并发的完成对回收对象的标记，降低标记阶段耗时。在清理阶段，由GC线程负责清理回收对象，和应用线程同时执行，不影响应用运行。\n![Memory_Manager](./Memory_Manager_02.webp)\n\n### 3.9 技术生态圈\n\n## 4、[Flutter & 原生](https://blog.codemagic.io/flutter-vs-swift/)\n\n1. 界面\n   解决移动端信息展示的目的；\n   都基于声明式、响应式的方式、热重载的方式；\n\n## 5、未来与憧憬\n\n当下的移动端、前端开发技术越来越多样化，复杂化。\n\n就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；\nAndroid的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等。\n\n大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。\n\n前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。\n\n前不久Facebook 又推出了新的[Hermes](https://juejin.im/entry/5d2e6d1ce51d4510664d178e)，用于在React Native应用提高性能的。\n\n个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。\n\n统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。\n\n据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！\n","source":"_posts/学习笔记/Flutters/Flutters指南/Flutter指南.md","raw":"# Flutter\n\n## 1、入门\n\n### 1.1 语言\n\n1.1.1 Dart：[学习路线](https://dart.dev/tools/sdk)\n\n![Dart](./Dart.png)\n\n1.1.2 Dart [概述](http://dart.goodev.org/guides/language)\n\n1.1.3 Dart [库预览](http://dart.goodev.org/guides/libraries)\n\n### 1.2 工具集\n\n2.1 通用工具\n\n2.1.1 [DartPad](https://dartpad.dartlang.org/)\n\n>DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.\n\n2.1.2 IDEs 与 编辑器\n\n2.1.2.1 IDE： [Android Studio](https://dart.dev/tools/jetbrains-plugin)、[IntelliJ IDEA](https://dart.dev/tools/jetbrains-plugin)、[Visual Studio Code](https://code.visualstudio.com/)\n\n2.1.2.2 IDEDart 社区维护的编辑器：[Emacs](https://github.com/bradyt/dart-mode)、[Atom](https://github.com/dart-atom/dart)、[Vim](https://github.com/dart-lang/dart-vim-plugin)\n\n2.1.3 命令行工具\n\n```shell\ndartanalyzer\n    A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\ndartdoc\n    Generates API reference documentation.\n\ndartfmt\n    Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\npub\n    Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n    Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\nbuild_runner\n    A code generator.\n\ndartfix\n    A tool for migrating Dart source code and fixing common issues.\n```\n\n2.2 Web工具集\n\n```shell\nwebdev\n    A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\ndart2js\n    The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\ndartdevc\n    The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\nbuild_runner\n    A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n```\n\n2.3 命令行工具集与服务器工具集\n\n```shell\nStandalone Dart VM: dart\n    Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\nAOT compiler and runtime: dart2aot, dartaotruntime\n    Support ahead-of-time compilation of Dart code to native x64 machine code.\n\nPub package manager: pub\n    Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n```\n\n## 2、Flutter\n\n### 2.1 Flutter是什么\n\n```markdown\nFlutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\nFlutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。\nDart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。\n\nFlutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n```\n\n### 2.2 核心原则\n\nFlutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。\n\n一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。\n\n![widget_Render_Object](./Flutter_Render_Object.png)\n\n### 2.3 Widget如何工作\n\n1. **Widget** 实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。\n\n2. 一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。\n  \n3. 最终的UI树其实是由一个个独立的Element节点构成。组件最终的Layout、渲染都是通过RenderObject来完成的，从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。\n\n4. Element就是Widget在UI树具体位置的一个实例化对象，大多数Element只有唯一的renderObject，但还有一些Element会有多个子节点，如继承自RenderObjectElement的一些类，比如MultiChildRenderObjectElement。最终所有Element的RenderObject构成一棵树，我们称之为渲染树，即render tree。\n\n5. Element的生命周期如下：\n\n    1. Framework 调用Widget.createElement 创建一个Element实例，记为element。\n    2. Framework 调用 element.mount(parentElement,newSlot) ，mount方法中首先调用elment所对应Widget的createRenderObject方法创建与element相关联的RenderObject对象，然后调用element.attachRenderObject方法将element.renderObject添加到渲染树中插槽指定的位置（这一步不是必须的，一般发生在Element树结构发生变化时才需要重新attach）。插入到渲染树后的element就处于“active”状态，处于“active”状态后就可以显示在屏幕上了（可以隐藏）。\n    3. 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n    4. 当有父Widget的配置数据改变时，同时其State.build返回的Widget结构与之前不同，此时就需要重新构建对应的Element树。为了进行Element复用，在Element重新构建前会先尝试是否可以复用旧树上相同位置的element，element节点在更新前都会调用其对应Widget的canUpdate方法，如果返回true，则复用旧Element，旧的Element会使用新Widget配置数据更新，反之则会创建一个新的Element。Widget.canUpdate主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来避免复用。\n    5. 当有祖先Element决定要移除element 时（如Widget树结构发生了变化，导致element对应的Widget被移除），这时该祖先Element就会调用deactivateChild 方法来移除它，移除后element.renderObject也会被从渲染树中移除，然后Framework会调用element.deactivate 方法，这时element状态变为“inactive”状态。\n    6. “inactive”态的element将不会再显示到屏幕。为了避免在一次动画执行过程中反复创建、移除某个特定element，“inactive”态的element在当前动画最后一帧结束前都会保留，如果在动画执行结束后它还未能重新变成”active“状态，Framework就会调用其unmount方法将其彻底移除，这时element的状态为defunct,它将永远不会再被插入到树中。\n    7. 如果element要重新插入到Element树的其它位置，如element或element的祖先拥有一个GlobalKey（用于全局复用元素），那么Framework会先将element从现有位置移除，然后再调用其activate方法，并将其renderObject重新attach到渲染树。\n\n### 2.4 框架\n\n![Flutter框架](./Flutter_Frameworks.png)\n\n**Flutter Framework:** 这是一个纯 Dart实现的 SDK。它实现了一套基础库， 用于处理动画、绘图和手势。并且基于绘图封装了一套 UI组件库，然后根据 Material 和Cupertino两种视觉风格区分开来。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。\n\n**Flutter Engine:** 这是一个纯 C++实现的 SDK，其中囊括了 Skia引擎、Dart运行时、文字排版引擎等。不过说白了，它就是 Dart的一个运行时，它可以以 JIT、JIT Snapshot 或者 AOT的模式运行 Dart代码。在代码调用 dart:ui库时，提供 dart:ui库中 Native Binding 实现。 不过别忘了，这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码。\n\n### 2.5 界面渲染\n\n2.5.1 Flutter 如何渲染界面\n\n在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：\n\n![iOS_Render_flow](./iOS_Render_flow.webp)\n\nCPU、GPU和显示器以一种特定的方式协作：\n\n> CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。\n\n![Rendering_pipeline](./Rendering_pipeline.png)\n\n> GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。\n\n* Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。\n\n* Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。\n\n渲染树生成：\n\n![Rendering_pipeline](./Rendering_pipe.png)\n\n2.5.2、Flutter 如何更新界面（Diff）\n\n当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。\n\n![Rendering_pipeline](./Widget_update.png)\n\n> 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。\n>\n> Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n\n### 2.6 跨平台、与原生平台通讯\n\n![Flutter_iOS_Android](./Flutter_iOS_Android.png)\n\nFlutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：\n\n* 应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。\n\n* 宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。\n\n* 硬件交互、推送等服务\n  \n* e.g：获取iOS电量\n  \n2.6.1 Flutter跨端——iOS\n\n> Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。\n>\n> 但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。\n\nFlutter 在iOS 上的启动流程：\n![Launch_flow_ios](./Launch_flow_ios.webp)\n\n> 在应用的 View Controller 初始化后，会实例化一个 Flutter project的抽象（以下简称 project）。project会初始化一个 platform view的抽象实例，这个抽象实例会负责创建 Flutter 的运行时（以下简称 engine）。\n>\n> 当 View Controller将要显示时，调用 project查找和组合 Flutter的应用资源 bundle，并且把资源提供给 engine。\nengine在真正需要执行资源 bundle时才会创建 Dart执行的环境（懒加载，以下简称 Dart Controller），然后设置视图窗口的一些属性等东西（这是绘图引擎必需的）。\n然后 engine中的 Dart Controller会加载 Dart代码并执行，执行的过程中会调用 dart:ui的 native binding实现向 GPU提供数据。\n\n2.6.2 Android\n\n## 3、深入Flutter\n\n### 3.1 体积\n\nFlutter应用的体积由两部分组成：应用代码和 SDK代码。应用代码是 Dart编译后的代码，如果做成可动态下发，那么这部分可以不计。\nSDK代码比较大就有点无奈了，SDK的组成部分有 Dart VM，Dart标准库，libwebp、libpng、libboringssl等第三方库，libskia，Dart UI库，然后再加上 icu_data，可能在单 arch下（iOS），SDK体积达到 40+MB。其中仅仅 Dart VM（不包含标准库）就达到了 7MB。\n\nFlutter SDK是 dynamic framework，如此大的二进制体积可能会造成动态链接耗时长。而如果静态链接，可能原来比较大的 App很有可能造成 TEXT段（iOS默认60M）超标。\n\n### 3.2 帧率\n\nDart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。\n\n在任何系统的UI框架中，动画实现的原理都是相同的，即：\n>在一段时间内，快速地多次改变UI外观，由于人眼会产生视觉暂留，最终看到的就是一个“连续”的动画，这和电影的原理是一样的，而UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），指每秒的动画帧数。很明显，帧率越高则动画就会越流畅。一般情况下，对于人眼来说，动画帧率超过16FPS，就比较流畅了，超过32FPS就会非常的细腻平滑，而超过32FPS基本就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用动画基本是持平的。\n\n### 3.3 [Dart线程和异步](https://flutterchina.club/flutter-for-ios/#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5)\n\n**Isolates：** 现代的浏览器以及移动浏览器都运行在多核 CPU 系统上。 要充分利用这些 CPU，开发者一般使用共享内存 数据来保证多线程的正确执行。然而， 多线程共享数据通常会导致很多潜在的问题，并导致代码运行出错。\n\n所有的 Dart 代码在 isolates 中运行而不是线程。 每个 isolate 都有自己的堆内存，并且确保每个 isolate 的状态都不能被其他 isolate 访问。因此，也不存在资源锁的问题。\n\nDart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。\n\nDart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。\n\n* 多线程示例：[isolate_example](./isolate.dart)\n\n### 3.4 [EventLoop、事件分发](https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a)\n\nFlutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。\n\n事件总线（EventBus）通过流控制器（StreamController）控制 事件流（Stream），事件流可以被监听、唤醒、停止、关闭、下沉，订阅者可以通过流控制器订阅流事件。\n\n### 3.5 事件响应\n\n一个对象是否可以响应事件，取决于其对命中测试的返回，当发生用户事件时，会从根节点（RenderView）开始进行命中测试，下面是RenderView的hitTest()源码：\n\n```dart\nbool hitTest(HitTestResult result, { Offset position }) {\n  if (child != null)\n    child.hitTest(result, position: position); //递归子RenderBox进行命中测试\n  result.add(HitTestEntry(this)); //将测试结果添加到result中\n  return true;\n}\n```\n\nRenderBox默认的hitTest()实现：\n\n```dart\nbool hitTest(HitTestResult result, { @required Offset position }) {\n  ...  \n  if (_size.contains(position)) {\n    if (hitTestChildren(result, position: position) || hitTestSelf(position)) {\n      result.add(BoxHitTestEntry(this, position));\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n我们看到默认的实现里调用了hitTestSelf()和hitTestChildren()两个方法，这两个方法默认实现如下：\n\n```dart\n@protected\nbool hitTestSelf(Offset position) => false;\n\n@protected\nbool hitTestChildren(HitTestResult result, { Offset position }) => false;\n```\n\n> hitTest 方法用来判断该 RenderObject 是否在被点击的范围内，同时负责将被点击的 RenderBox 添加到 HitTestResult 列表中，参数 position 为事件触发的坐标（如果有的话），返回 true 则表示有 RenderBox 通过了命中测试，需要响应事件，反之则认为当前RenderBox没有命中。\n>\n> 在继承RenderBox时，可以直接重写hitTest()方法，也可以重写 hitTestSelf() 或 hitTestChildren(), 唯一不同的是 hitTest()中需要将通过命中测试的节点信息添加到命中测试结果列表中，而 hitTestSelf() 和 hitTestChildren()则只需要简单的返回true或false。\n\n### 3.6 Runtime（AOT）、JIT、Dart VM\n\n### 3.7 性能（CPU、GPU、Network、battery、Disk）\n\n### 3.8 [内存管理](https://mp.weixin.qq.com/s/efKCpCtvvHDHUiAsizobBQ)\n\nDart VM将内存管理分为新生代(New Generation)和老年代(Old Generation)。\n\n* 新生代(New Generation): 通常初次分配的对象都位于新生代中，该区域主要是存放内存较小并且生命周期较短的对象，比如局部变量。新生代会频繁执行内存回收(GC)，回收采用“复制-清除”算法，将内存分为两块(图中的from 和 to)，运行时每次只使用其中的一块(图中的from)，另一块备用(图中的to)。当发生GC时，将当前使用的内存块中存活的对象拷贝到备用内存块中，然后清除当前使用内存块，最后，交换两块内存的角色。\n\n![Memory_Manager](./Memory_Manager_01.webp)\n\n* 老年代(Old Generation): 在新生代的GC中“幸存”下来的对象，它们会被转移到老年代中。老年代存放生命力周期较长，内存较大的对象。老年代通常比新生代要大很多。老年代的GC回收采用“标记-清除”算法，分成标记和清除两个阶段。在标记阶段，所有线程参与并发的完成对回收对象的标记，降低标记阶段耗时。在清理阶段，由GC线程负责清理回收对象，和应用线程同时执行，不影响应用运行。\n![Memory_Manager](./Memory_Manager_02.webp)\n\n### 3.9 技术生态圈\n\n## 4、[Flutter & 原生](https://blog.codemagic.io/flutter-vs-swift/)\n\n1. 界面\n   解决移动端信息展示的目的；\n   都基于声明式、响应式的方式、热重载的方式；\n\n## 5、未来与憧憬\n\n当下的移动端、前端开发技术越来越多样化，复杂化。\n\n就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；\nAndroid的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等。\n\n大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。\n\n前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。\n\n前不久Facebook 又推出了新的[Hermes](https://juejin.im/entry/5d2e6d1ce51d4510664d178e)，用于在React Native应用提高性能的。\n\n个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。\n\n统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。\n\n据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！\n","slug":"学习笔记/Flutters/Flutters指南/Flutter指南","published":1,"date":"2021-02-24T12:31:09.172Z","updated":"2021-02-24T13:04:12.629Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tkm003ew37ue0xhci3n","content":"<h1 id=\"flutter\"><a class=\"markdownIt-Anchor\" href=\"#flutter\"></a> Flutter</h1>\n<h2 id=\"1-入门\"><a class=\"markdownIt-Anchor\" href=\"#1-入门\"></a> 1、入门</h2>\n<h3 id=\"11-语言\"><a class=\"markdownIt-Anchor\" href=\"#11-语言\"></a> 1.1 语言</h3>\n<p>1.1.1 Dart：<a href=\"https://dart.dev/tools/sdk\">学习路线</a></p>\n<p><img src=\"./Dart.png\" alt=\"Dart\" /></p>\n<p>1.1.2 Dart <a href=\"http://dart.goodev.org/guides/language\">概述</a></p>\n<p>1.1.3 Dart <a href=\"http://dart.goodev.org/guides/libraries\">库预览</a></p>\n<h3 id=\"12-工具集\"><a class=\"markdownIt-Anchor\" href=\"#12-工具集\"></a> 1.2 工具集</h3>\n<p>2.1 通用工具</p>\n<p>2.1.1 <a href=\"https://dartpad.dartlang.org/\">DartPad</a></p>\n<blockquote>\n<p>DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.</p>\n</blockquote>\n<p>2.1.2 IDEs 与 编辑器</p>\n<p>2.1.2.1 IDE： <a href=\"https://dart.dev/tools/jetbrains-plugin\">Android Studio</a>、<a href=\"https://dart.dev/tools/jetbrains-plugin\">IntelliJ IDEA</a>、<a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></p>\n<p>2.1.2.2 IDEDart 社区维护的编辑器：<a href=\"https://github.com/bradyt/dart-mode\">Emacs</a>、<a href=\"https://github.com/dart-atom/dart\">Atom</a>、<a href=\"https://github.com/dart-lang/dart-vim-plugin\">Vim</a></p>\n<p>2.1.3 命令行工具</p>\n<pre class=\"highlight\"><code class=\"shell\">dartanalyzer\n    A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\ndartdoc\n    Generates API reference documentation.\n\ndartfmt\n    Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\npub\n    Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n    Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\nbuild_runner\n    A code generator.\n\ndartfix\n    A tool for migrating Dart source code and fixing common issues.\n</code></pre>\n<p>2.2 Web工具集</p>\n<pre class=\"highlight\"><code class=\"shell\">webdev\n    A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\ndart2js\n    The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\ndartdevc\n    The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\nbuild_runner\n    A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n</code></pre>\n<p>2.3 命令行工具集与服务器工具集</p>\n<pre class=\"highlight\"><code class=\"shell\">Standalone Dart VM: dart\n    Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\nAOT compiler and runtime: dart2aot, dartaotruntime\n    Support ahead-of-time compilation of Dart code to native x64 machine code.\n\nPub package manager: pub\n    Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n</code></pre>\n<h2 id=\"2-flutter\"><a class=\"markdownIt-Anchor\" href=\"#2-flutter\"></a> 2、Flutter</h2>\n<h3 id=\"21-flutter是什么\"><a class=\"markdownIt-Anchor\" href=\"#21-flutter是什么\"></a> 2.1 Flutter是什么</h3>\n<pre class=\"highlight\"><code class=\"markdown\">Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\nFlutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。\nDart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。\n\nFlutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n</code></pre>\n<h3 id=\"22-核心原则\"><a class=\"markdownIt-Anchor\" href=\"#22-核心原则\"></a> 2.2 核心原则</h3>\n<p>Flutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。</p>\n<p>一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。</p>\n<p><img src=\"./Flutter_Render_Object.png\" alt=\"widget_Render_Object\" /></p>\n<h3 id=\"23-widget如何工作\"><a class=\"markdownIt-Anchor\" href=\"#23-widget如何工作\"></a> 2.3 Widget如何工作</h3>\n<ol>\n<li>\n<p><strong>Widget</strong> 实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。</p>\n</li>\n<li>\n<p>一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。</p>\n</li>\n<li>\n<p>最终的UI树其实是由一个个独立的Element节点构成。组件最终的Layout、渲染都是通过RenderObject来完成的，从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。</p>\n</li>\n<li>\n<p>Element就是Widget在UI树具体位置的一个实例化对象，大多数Element只有唯一的renderObject，但还有一些Element会有多个子节点，如继承自RenderObjectElement的一些类，比如MultiChildRenderObjectElement。最终所有Element的RenderObject构成一棵树，我们称之为渲染树，即render tree。</p>\n</li>\n<li>\n<p>Element的生命周期如下：</p>\n<ol>\n<li>Framework 调用Widget.createElement 创建一个Element实例，记为element。</li>\n<li>Framework 调用 element.mount(parentElement,newSlot) ，mount方法中首先调用elment所对应Widget的createRenderObject方法创建与element相关联的RenderObject对象，然后调用element.attachRenderObject方法将element.renderObject添加到渲染树中插槽指定的位置（这一步不是必须的，一般发生在Element树结构发生变化时才需要重新attach）。插入到渲染树后的element就处于“active”状态，处于“active”状态后就可以显示在屏幕上了（可以隐藏）。</li>\n<li>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</li>\n<li>当有父Widget的配置数据改变时，同时其State.build返回的Widget结构与之前不同，此时就需要重新构建对应的Element树。为了进行Element复用，在Element重新构建前会先尝试是否可以复用旧树上相同位置的element，element节点在更新前都会调用其对应Widget的canUpdate方法，如果返回true，则复用旧Element，旧的Element会使用新Widget配置数据更新，反之则会创建一个新的Element。Widget.canUpdate主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来避免复用。</li>\n<li>当有祖先Element决定要移除element 时（如Widget树结构发生了变化，导致element对应的Widget被移除），这时该祖先Element就会调用deactivateChild 方法来移除它，移除后element.renderObject也会被从渲染树中移除，然后Framework会调用element.deactivate 方法，这时element状态变为“inactive”状态。</li>\n<li>“inactive”态的element将不会再显示到屏幕。为了避免在一次动画执行过程中反复创建、移除某个特定element，“inactive”态的element在当前动画最后一帧结束前都会保留，如果在动画执行结束后它还未能重新变成”active“状态，Framework就会调用其unmount方法将其彻底移除，这时element的状态为defunct,它将永远不会再被插入到树中。</li>\n<li>如果element要重新插入到Element树的其它位置，如element或element的祖先拥有一个GlobalKey（用于全局复用元素），那么Framework会先将element从现有位置移除，然后再调用其activate方法，并将其renderObject重新attach到渲染树。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"24-框架\"><a class=\"markdownIt-Anchor\" href=\"#24-框架\"></a> 2.4 框架</h3>\n<p><img src=\"./Flutter_Frameworks.png\" alt=\"Flutter框架\" /></p>\n<p><strong>Flutter Framework:</strong> 这是一个纯 Dart实现的 SDK。它实现了一套基础库， 用于处理动画、绘图和手势。并且基于绘图封装了一套 UI组件库，然后根据 Material 和Cupertino两种视觉风格区分开来。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。</p>\n<p><strong>Flutter Engine:</strong> 这是一个纯 C++实现的 SDK，其中囊括了 Skia引擎、Dart运行时、文字排版引擎等。不过说白了，它就是 Dart的一个运行时，它可以以 JIT、JIT Snapshot 或者 AOT的模式运行 Dart代码。在代码调用 dart:ui库时，提供 dart:ui库中 Native Binding 实现。 不过别忘了，这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码。</p>\n<h3 id=\"25-界面渲染\"><a class=\"markdownIt-Anchor\" href=\"#25-界面渲染\"></a> 2.5 界面渲染</h3>\n<p>2.5.1 Flutter 如何渲染界面</p>\n<p>在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：</p>\n<p><img src=\"./iOS_Render_flow.webp\" alt=\"iOS_Render_flow\" /></p>\n<p>CPU、GPU和显示器以一种特定的方式协作：</p>\n<blockquote>\n<p>CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。</p>\n</blockquote>\n<p><img src=\"./Rendering_pipeline.png\" alt=\"Rendering_pipeline\" /></p>\n<blockquote>\n<p>GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。</p>\n</blockquote>\n<ul>\n<li>\n<p>Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。</p>\n</li>\n<li>\n<p>Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。</p>\n</li>\n</ul>\n<p>渲染树生成：</p>\n<p><img src=\"./Rendering_pipe.png\" alt=\"Rendering_pipeline\" /></p>\n<p>2.5.2、Flutter 如何更新界面（Diff）</p>\n<p>当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p>\n<p><img src=\"./Widget_update.png\" alt=\"Rendering_pipeline\" /></p>\n<blockquote>\n<p>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。</p>\n<p>Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</p>\n</blockquote>\n<h3 id=\"26-跨平台-与原生平台通讯\"><a class=\"markdownIt-Anchor\" href=\"#26-跨平台-与原生平台通讯\"></a> 2.6 跨平台、与原生平台通讯</h3>\n<p><img src=\"./Flutter_iOS_Android.png\" alt=\"Flutter_iOS_Android\" /></p>\n<p>Flutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：</p>\n<ul>\n<li>\n<p>应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。</p>\n</li>\n<li>\n<p>宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。</p>\n</li>\n<li>\n<p>硬件交互、推送等服务</p>\n</li>\n<li>\n<p>e.g：获取iOS电量</p>\n</li>\n</ul>\n<p>2.6.1 Flutter跨端——iOS</p>\n<blockquote>\n<p>Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。</p>\n<p>但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。</p>\n</blockquote>\n<p>Flutter 在iOS 上的启动流程：<br />\n<img src=\"./Launch_flow_ios.webp\" alt=\"Launch_flow_ios\" /></p>\n<blockquote>\n<p>在应用的 View Controller 初始化后，会实例化一个 Flutter project的抽象（以下简称 project）。project会初始化一个 platform view的抽象实例，这个抽象实例会负责创建 Flutter 的运行时（以下简称 engine）。</p>\n<p>当 View Controller将要显示时，调用 project查找和组合 Flutter的应用资源 bundle，并且把资源提供给 engine。<br />\nengine在真正需要执行资源 bundle时才会创建 Dart执行的环境（懒加载，以下简称 Dart Controller），然后设置视图窗口的一些属性等东西（这是绘图引擎必需的）。<br />\n然后 engine中的 Dart Controller会加载 Dart代码并执行，执行的过程中会调用 dart:ui的 native binding实现向 GPU提供数据。</p>\n</blockquote>\n<p>2.6.2 Android</p>\n<h2 id=\"3-深入flutter\"><a class=\"markdownIt-Anchor\" href=\"#3-深入flutter\"></a> 3、深入Flutter</h2>\n<h3 id=\"31-体积\"><a class=\"markdownIt-Anchor\" href=\"#31-体积\"></a> 3.1 体积</h3>\n<p>Flutter应用的体积由两部分组成：应用代码和 SDK代码。应用代码是 Dart编译后的代码，如果做成可动态下发，那么这部分可以不计。<br />\nSDK代码比较大就有点无奈了，SDK的组成部分有 Dart VM，Dart标准库，libwebp、libpng、libboringssl等第三方库，libskia，Dart UI库，然后再加上 icu_data，可能在单 arch下（iOS），SDK体积达到 40+MB。其中仅仅 Dart VM（不包含标准库）就达到了 7MB。</p>\n<p>Flutter SDK是 dynamic framework，如此大的二进制体积可能会造成动态链接耗时长。而如果静态链接，可能原来比较大的 App很有可能造成 TEXT段（iOS默认60M）超标。</p>\n<h3 id=\"32-帧率\"><a class=\"markdownIt-Anchor\" href=\"#32-帧率\"></a> 3.2 帧率</h3>\n<p>Dart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。</p>\n<p>在任何系统的UI框架中，动画实现的原理都是相同的，即：</p>\n<blockquote>\n<p>在一段时间内，快速地多次改变UI外观，由于人眼会产生视觉暂留，最终看到的就是一个“连续”的动画，这和电影的原理是一样的，而UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），指每秒的动画帧数。很明显，帧率越高则动画就会越流畅。一般情况下，对于人眼来说，动画帧率超过16FPS，就比较流畅了，超过32FPS就会非常的细腻平滑，而超过32FPS基本就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用动画基本是持平的。</p>\n</blockquote>\n<h3 id=\"33-dart线程和异步\"><a class=\"markdownIt-Anchor\" href=\"#33-dart线程和异步\"></a> 3.3 <a href=\"https://flutterchina.club/flutter-for-ios/#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5\">Dart线程和异步</a></h3>\n<p><strong>Isolates：</strong> 现代的浏览器以及移动浏览器都运行在多核 CPU 系统上。 要充分利用这些 CPU，开发者一般使用共享内存 数据来保证多线程的正确执行。然而， 多线程共享数据通常会导致很多潜在的问题，并导致代码运行出错。</p>\n<p>所有的 Dart 代码在 isolates 中运行而不是线程。 每个 isolate 都有自己的堆内存，并且确保每个 isolate 的状态都不能被其他 isolate 访问。因此，也不存在资源锁的问题。</p>\n<p>Dart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。</p>\n<p>Dart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。</p>\n<ul>\n<li>多线程示例：<a href=\"./isolate.dart\">isolate_example</a></li>\n</ul>\n<h3 id=\"34-eventloop-事件分发\"><a class=\"markdownIt-Anchor\" href=\"#34-eventloop-事件分发\"></a> 3.4 <a href=\"https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a\">EventLoop、事件分发</a></h3>\n<p>Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。</p>\n<p>事件总线（EventBus）通过流控制器（StreamController）控制 事件流（Stream），事件流可以被监听、唤醒、停止、关闭、下沉，订阅者可以通过流控制器订阅流事件。</p>\n<h3 id=\"35-事件响应\"><a class=\"markdownIt-Anchor\" href=\"#35-事件响应\"></a> 3.5 事件响应</h3>\n<p>一个对象是否可以响应事件，取决于其对命中测试的返回，当发生用户事件时，会从根节点（RenderView）开始进行命中测试，下面是RenderView的hitTest()源码：</p>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-built_in\">bool</span> hitTest(HitTestResult result, &#123; Offset position &#125;) &#123;\n  <span class=\"hljs-keyword\">if</span> (child != <span class=\"hljs-keyword\">null</span>)\n    child.hitTest(result, position: position); <span class=\"hljs-comment\">//递归子RenderBox进行命中测试</span>\n  result.add(HitTestEntry(<span class=\"hljs-keyword\">this</span>)); <span class=\"hljs-comment\">//将测试结果添加到result中</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n&#125;\n</code></pre>\n<p>RenderBox默认的hitTest()实现：</p>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-built_in\">bool</span> hitTest(HitTestResult result, &#123; <span class=\"hljs-meta\">@required</span> Offset position &#125;) &#123;\n  ...  \n  <span class=\"hljs-keyword\">if</span> (_size.contains(position)) &#123;\n    <span class=\"hljs-keyword\">if</span> (hitTestChildren(result, position: position) || hitTestSelf(position)) &#123;\n      result.add(BoxHitTestEntry(<span class=\"hljs-keyword\">this</span>, position));\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    &#125;\n  &#125;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n&#125;\n</code></pre>\n<p>我们看到默认的实现里调用了hitTestSelf()和hitTestChildren()两个方法，这两个方法默认实现如下：</p>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-meta\">@protected</span>\n<span class=\"hljs-built_in\">bool</span> hitTestSelf(Offset position) =&gt; <span class=\"hljs-keyword\">false</span>;\n\n<span class=\"hljs-meta\">@protected</span>\n<span class=\"hljs-built_in\">bool</span> hitTestChildren(HitTestResult result, &#123; Offset position &#125;) =&gt; <span class=\"hljs-keyword\">false</span>;\n</code></pre>\n<blockquote>\n<p>hitTest 方法用来判断该 RenderObject 是否在被点击的范围内，同时负责将被点击的 RenderBox 添加到 HitTestResult 列表中，参数 position 为事件触发的坐标（如果有的话），返回 true 则表示有 RenderBox 通过了命中测试，需要响应事件，反之则认为当前RenderBox没有命中。</p>\n<p>在继承RenderBox时，可以直接重写hitTest()方法，也可以重写 hitTestSelf() 或 hitTestChildren(), 唯一不同的是 hitTest()中需要将通过命中测试的节点信息添加到命中测试结果列表中，而 hitTestSelf() 和 hitTestChildren()则只需要简单的返回true或false。</p>\n</blockquote>\n<h3 id=\"36-runtimeaot-jit-dart-vm\"><a class=\"markdownIt-Anchor\" href=\"#36-runtimeaot-jit-dart-vm\"></a> 3.6 Runtime（AOT）、JIT、Dart VM</h3>\n<h3 id=\"37-性能cpu-gpu-network-battery-disk\"><a class=\"markdownIt-Anchor\" href=\"#37-性能cpu-gpu-network-battery-disk\"></a> 3.7 性能（CPU、GPU、Network、battery、Disk）</h3>\n<h3 id=\"38-内存管理\"><a class=\"markdownIt-Anchor\" href=\"#38-内存管理\"></a> 3.8 <a href=\"https://mp.weixin.qq.com/s/efKCpCtvvHDHUiAsizobBQ\">内存管理</a></h3>\n<p>Dart VM将内存管理分为新生代(New Generation)和老年代(Old Generation)。</p>\n<ul>\n<li>新生代(New Generation): 通常初次分配的对象都位于新生代中，该区域主要是存放内存较小并且生命周期较短的对象，比如局部变量。新生代会频繁执行内存回收(GC)，回收采用“复制-清除”算法，将内存分为两块(图中的from 和 to)，运行时每次只使用其中的一块(图中的from)，另一块备用(图中的to)。当发生GC时，将当前使用的内存块中存活的对象拷贝到备用内存块中，然后清除当前使用内存块，最后，交换两块内存的角色。</li>\n</ul>\n<p><img src=\"./Memory_Manager_01.webp\" alt=\"Memory_Manager\" /></p>\n<ul>\n<li>老年代(Old Generation): 在新生代的GC中“幸存”下来的对象，它们会被转移到老年代中。老年代存放生命力周期较长，内存较大的对象。老年代通常比新生代要大很多。老年代的GC回收采用“标记-清除”算法，分成标记和清除两个阶段。在标记阶段，所有线程参与并发的完成对回收对象的标记，降低标记阶段耗时。在清理阶段，由GC线程负责清理回收对象，和应用线程同时执行，不影响应用运行。<br />\n<img src=\"./Memory_Manager_02.webp\" alt=\"Memory_Manager\" /></li>\n</ul>\n<h3 id=\"39-技术生态圈\"><a class=\"markdownIt-Anchor\" href=\"#39-技术生态圈\"></a> 3.9 技术生态圈</h3>\n<h2 id=\"4-flutter-原生\"><a class=\"markdownIt-Anchor\" href=\"#4-flutter-原生\"></a> 4、<a href=\"https://blog.codemagic.io/flutter-vs-swift/\">Flutter &amp; 原生</a></h2>\n<ol>\n<li>界面<br />\n解决移动端信息展示的目的；<br />\n都基于声明式、响应式的方式、热重载的方式；</li>\n</ol>\n<h2 id=\"5-未来与憧憬\"><a class=\"markdownIt-Anchor\" href=\"#5-未来与憧憬\"></a> 5、未来与憧憬</h2>\n<p>当下的移动端、前端开发技术越来越多样化，复杂化。</p>\n<p>就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；<br />\nAndroid的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等。</p>\n<p>大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。</p>\n<p>前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。</p>\n<p>前不久Facebook 又推出了新的<a href=\"https://juejin.im/entry/5d2e6d1ce51d4510664d178e\">Hermes</a>，用于在React Native应用提高性能的。</p>\n<p>个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。</p>\n<p>统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。</p>\n<p>据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"flutter\"><a class=\"markdownIt-Anchor\" href=\"#flutter\"></a> Flutter</h1>\n<h2 id=\"1-入门\"><a class=\"markdownIt-Anchor\" href=\"#1-入门\"></a> 1、入门</h2>\n<h3 id=\"11-语言\"><a class=\"markdownIt-Anchor\" href=\"#11-语言\"></a> 1.1 语言</h3>\n<p>1.1.1 Dart：<a href=\"https://dart.dev/tools/sdk\">学习路线</a></p>\n<p><img src=\"./Dart.png\" alt=\"Dart\" /></p>\n<p>1.1.2 Dart <a href=\"http://dart.goodev.org/guides/language\">概述</a></p>\n<p>1.1.3 Dart <a href=\"http://dart.goodev.org/guides/libraries\">库预览</a></p>\n<h3 id=\"12-工具集\"><a class=\"markdownIt-Anchor\" href=\"#12-工具集\"></a> 1.2 工具集</h3>\n<p>2.1 通用工具</p>\n<p>2.1.1 <a href=\"https://dartpad.dartlang.org/\">DartPad</a></p>\n<blockquote>\n<p>DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.</p>\n</blockquote>\n<p>2.1.2 IDEs 与 编辑器</p>\n<p>2.1.2.1 IDE： <a href=\"https://dart.dev/tools/jetbrains-plugin\">Android Studio</a>、<a href=\"https://dart.dev/tools/jetbrains-plugin\">IntelliJ IDEA</a>、<a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></p>\n<p>2.1.2.2 IDEDart 社区维护的编辑器：<a href=\"https://github.com/bradyt/dart-mode\">Emacs</a>、<a href=\"https://github.com/dart-atom/dart\">Atom</a>、<a href=\"https://github.com/dart-lang/dart-vim-plugin\">Vim</a></p>\n<p>2.1.3 命令行工具</p>\n<pre class=\"highlight\"><code class=\"shell\">dartanalyzer\n    A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\ndartdoc\n    Generates API reference documentation.\n\ndartfmt\n    Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\npub\n    Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n    Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\nbuild_runner\n    A code generator.\n\ndartfix\n    A tool for migrating Dart source code and fixing common issues.\n</code></pre>\n<p>2.2 Web工具集</p>\n<pre class=\"highlight\"><code class=\"shell\">webdev\n    A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\ndart2js\n    The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\ndartdevc\n    The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\nbuild_runner\n    A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n</code></pre>\n<p>2.3 命令行工具集与服务器工具集</p>\n<pre class=\"highlight\"><code class=\"shell\">Standalone Dart VM: dart\n    Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\nAOT compiler and runtime: dart2aot, dartaotruntime\n    Support ahead-of-time compilation of Dart code to native x64 machine code.\n\nPub package manager: pub\n    Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n</code></pre>\n<h2 id=\"2-flutter\"><a class=\"markdownIt-Anchor\" href=\"#2-flutter\"></a> 2、Flutter</h2>\n<h3 id=\"21-flutter是什么\"><a class=\"markdownIt-Anchor\" href=\"#21-flutter是什么\"></a> 2.1 Flutter是什么</h3>\n<pre class=\"highlight\"><code class=\"markdown\">Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\nFlutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。\nDart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。\n\nFlutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n</code></pre>\n<h3 id=\"22-核心原则\"><a class=\"markdownIt-Anchor\" href=\"#22-核心原则\"></a> 2.2 核心原则</h3>\n<p>Flutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。</p>\n<p>一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。</p>\n<p><img src=\"./Flutter_Render_Object.png\" alt=\"widget_Render_Object\" /></p>\n<h3 id=\"23-widget如何工作\"><a class=\"markdownIt-Anchor\" href=\"#23-widget如何工作\"></a> 2.3 Widget如何工作</h3>\n<ol>\n<li>\n<p><strong>Widget</strong> 实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。</p>\n</li>\n<li>\n<p>一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。</p>\n</li>\n<li>\n<p>最终的UI树其实是由一个个独立的Element节点构成。组件最终的Layout、渲染都是通过RenderObject来完成的，从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。</p>\n</li>\n<li>\n<p>Element就是Widget在UI树具体位置的一个实例化对象，大多数Element只有唯一的renderObject，但还有一些Element会有多个子节点，如继承自RenderObjectElement的一些类，比如MultiChildRenderObjectElement。最终所有Element的RenderObject构成一棵树，我们称之为渲染树，即render tree。</p>\n</li>\n<li>\n<p>Element的生命周期如下：</p>\n<ol>\n<li>Framework 调用Widget.createElement 创建一个Element实例，记为element。</li>\n<li>Framework 调用 element.mount(parentElement,newSlot) ，mount方法中首先调用elment所对应Widget的createRenderObject方法创建与element相关联的RenderObject对象，然后调用element.attachRenderObject方法将element.renderObject添加到渲染树中插槽指定的位置（这一步不是必须的，一般发生在Element树结构发生变化时才需要重新attach）。插入到渲染树后的element就处于“active”状态，处于“active”状态后就可以显示在屏幕上了（可以隐藏）。</li>\n<li>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</li>\n<li>当有父Widget的配置数据改变时，同时其State.build返回的Widget结构与之前不同，此时就需要重新构建对应的Element树。为了进行Element复用，在Element重新构建前会先尝试是否可以复用旧树上相同位置的element，element节点在更新前都会调用其对应Widget的canUpdate方法，如果返回true，则复用旧Element，旧的Element会使用新Widget配置数据更新，反之则会创建一个新的Element。Widget.canUpdate主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来避免复用。</li>\n<li>当有祖先Element决定要移除element 时（如Widget树结构发生了变化，导致element对应的Widget被移除），这时该祖先Element就会调用deactivateChild 方法来移除它，移除后element.renderObject也会被从渲染树中移除，然后Framework会调用element.deactivate 方法，这时element状态变为“inactive”状态。</li>\n<li>“inactive”态的element将不会再显示到屏幕。为了避免在一次动画执行过程中反复创建、移除某个特定element，“inactive”态的element在当前动画最后一帧结束前都会保留，如果在动画执行结束后它还未能重新变成”active“状态，Framework就会调用其unmount方法将其彻底移除，这时element的状态为defunct,它将永远不会再被插入到树中。</li>\n<li>如果element要重新插入到Element树的其它位置，如element或element的祖先拥有一个GlobalKey（用于全局复用元素），那么Framework会先将element从现有位置移除，然后再调用其activate方法，并将其renderObject重新attach到渲染树。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"24-框架\"><a class=\"markdownIt-Anchor\" href=\"#24-框架\"></a> 2.4 框架</h3>\n<p><img src=\"./Flutter_Frameworks.png\" alt=\"Flutter框架\" /></p>\n<p><strong>Flutter Framework:</strong> 这是一个纯 Dart实现的 SDK。它实现了一套基础库， 用于处理动画、绘图和手势。并且基于绘图封装了一套 UI组件库，然后根据 Material 和Cupertino两种视觉风格区分开来。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。</p>\n<p><strong>Flutter Engine:</strong> 这是一个纯 C++实现的 SDK，其中囊括了 Skia引擎、Dart运行时、文字排版引擎等。不过说白了，它就是 Dart的一个运行时，它可以以 JIT、JIT Snapshot 或者 AOT的模式运行 Dart代码。在代码调用 dart:ui库时，提供 dart:ui库中 Native Binding 实现。 不过别忘了，这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码。</p>\n<h3 id=\"25-界面渲染\"><a class=\"markdownIt-Anchor\" href=\"#25-界面渲染\"></a> 2.5 界面渲染</h3>\n<p>2.5.1 Flutter 如何渲染界面</p>\n<p>在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：</p>\n<p><img src=\"./iOS_Render_flow.webp\" alt=\"iOS_Render_flow\" /></p>\n<p>CPU、GPU和显示器以一种特定的方式协作：</p>\n<blockquote>\n<p>CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。</p>\n</blockquote>\n<p><img src=\"./Rendering_pipeline.png\" alt=\"Rendering_pipeline\" /></p>\n<blockquote>\n<p>GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。</p>\n</blockquote>\n<ul>\n<li>\n<p>Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。</p>\n</li>\n<li>\n<p>Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。</p>\n</li>\n</ul>\n<p>渲染树生成：</p>\n<p><img src=\"./Rendering_pipe.png\" alt=\"Rendering_pipeline\" /></p>\n<p>2.5.2、Flutter 如何更新界面（Diff）</p>\n<p>当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p>\n<p><img src=\"./Widget_update.png\" alt=\"Rendering_pipeline\" /></p>\n<blockquote>\n<p>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。</p>\n<p>Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</p>\n</blockquote>\n<h3 id=\"26-跨平台-与原生平台通讯\"><a class=\"markdownIt-Anchor\" href=\"#26-跨平台-与原生平台通讯\"></a> 2.6 跨平台、与原生平台通讯</h3>\n<p><img src=\"./Flutter_iOS_Android.png\" alt=\"Flutter_iOS_Android\" /></p>\n<p>Flutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：</p>\n<ul>\n<li>\n<p>应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。</p>\n</li>\n<li>\n<p>宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。</p>\n</li>\n<li>\n<p>硬件交互、推送等服务</p>\n</li>\n<li>\n<p>e.g：获取iOS电量</p>\n</li>\n</ul>\n<p>2.6.1 Flutter跨端——iOS</p>\n<blockquote>\n<p>Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。</p>\n<p>但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。</p>\n</blockquote>\n<p>Flutter 在iOS 上的启动流程：<br />\n<img src=\"./Launch_flow_ios.webp\" alt=\"Launch_flow_ios\" /></p>\n<blockquote>\n<p>在应用的 View Controller 初始化后，会实例化一个 Flutter project的抽象（以下简称 project）。project会初始化一个 platform view的抽象实例，这个抽象实例会负责创建 Flutter 的运行时（以下简称 engine）。</p>\n<p>当 View Controller将要显示时，调用 project查找和组合 Flutter的应用资源 bundle，并且把资源提供给 engine。<br />\nengine在真正需要执行资源 bundle时才会创建 Dart执行的环境（懒加载，以下简称 Dart Controller），然后设置视图窗口的一些属性等东西（这是绘图引擎必需的）。<br />\n然后 engine中的 Dart Controller会加载 Dart代码并执行，执行的过程中会调用 dart:ui的 native binding实现向 GPU提供数据。</p>\n</blockquote>\n<p>2.6.2 Android</p>\n<h2 id=\"3-深入flutter\"><a class=\"markdownIt-Anchor\" href=\"#3-深入flutter\"></a> 3、深入Flutter</h2>\n<h3 id=\"31-体积\"><a class=\"markdownIt-Anchor\" href=\"#31-体积\"></a> 3.1 体积</h3>\n<p>Flutter应用的体积由两部分组成：应用代码和 SDK代码。应用代码是 Dart编译后的代码，如果做成可动态下发，那么这部分可以不计。<br />\nSDK代码比较大就有点无奈了，SDK的组成部分有 Dart VM，Dart标准库，libwebp、libpng、libboringssl等第三方库，libskia，Dart UI库，然后再加上 icu_data，可能在单 arch下（iOS），SDK体积达到 40+MB。其中仅仅 Dart VM（不包含标准库）就达到了 7MB。</p>\n<p>Flutter SDK是 dynamic framework，如此大的二进制体积可能会造成动态链接耗时长。而如果静态链接，可能原来比较大的 App很有可能造成 TEXT段（iOS默认60M）超标。</p>\n<h3 id=\"32-帧率\"><a class=\"markdownIt-Anchor\" href=\"#32-帧率\"></a> 3.2 帧率</h3>\n<p>Dart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。</p>\n<p>在任何系统的UI框架中，动画实现的原理都是相同的，即：</p>\n<blockquote>\n<p>在一段时间内，快速地多次改变UI外观，由于人眼会产生视觉暂留，最终看到的就是一个“连续”的动画，这和电影的原理是一样的，而UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），指每秒的动画帧数。很明显，帧率越高则动画就会越流畅。一般情况下，对于人眼来说，动画帧率超过16FPS，就比较流畅了，超过32FPS就会非常的细腻平滑，而超过32FPS基本就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用动画基本是持平的。</p>\n</blockquote>\n<h3 id=\"33-dart线程和异步\"><a class=\"markdownIt-Anchor\" href=\"#33-dart线程和异步\"></a> 3.3 <a href=\"https://flutterchina.club/flutter-for-ios/#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5\">Dart线程和异步</a></h3>\n<p><strong>Isolates：</strong> 现代的浏览器以及移动浏览器都运行在多核 CPU 系统上。 要充分利用这些 CPU，开发者一般使用共享内存 数据来保证多线程的正确执行。然而， 多线程共享数据通常会导致很多潜在的问题，并导致代码运行出错。</p>\n<p>所有的 Dart 代码在 isolates 中运行而不是线程。 每个 isolate 都有自己的堆内存，并且确保每个 isolate 的状态都不能被其他 isolate 访问。因此，也不存在资源锁的问题。</p>\n<p>Dart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。</p>\n<p>Dart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。</p>\n<ul>\n<li>多线程示例：<a href=\"./isolate.dart\">isolate_example</a></li>\n</ul>\n<h3 id=\"34-eventloop-事件分发\"><a class=\"markdownIt-Anchor\" href=\"#34-eventloop-事件分发\"></a> 3.4 <a href=\"https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a\">EventLoop、事件分发</a></h3>\n<p>Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。</p>\n<p>事件总线（EventBus）通过流控制器（StreamController）控制 事件流（Stream），事件流可以被监听、唤醒、停止、关闭、下沉，订阅者可以通过流控制器订阅流事件。</p>\n<h3 id=\"35-事件响应\"><a class=\"markdownIt-Anchor\" href=\"#35-事件响应\"></a> 3.5 事件响应</h3>\n<p>一个对象是否可以响应事件，取决于其对命中测试的返回，当发生用户事件时，会从根节点（RenderView）开始进行命中测试，下面是RenderView的hitTest()源码：</p>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-built_in\">bool</span> hitTest(HitTestResult result, &#123; Offset position &#125;) &#123;\n  <span class=\"hljs-keyword\">if</span> (child != <span class=\"hljs-keyword\">null</span>)\n    child.hitTest(result, position: position); <span class=\"hljs-comment\">//递归子RenderBox进行命中测试</span>\n  result.add(HitTestEntry(<span class=\"hljs-keyword\">this</span>)); <span class=\"hljs-comment\">//将测试结果添加到result中</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n&#125;\n</code></pre>\n<p>RenderBox默认的hitTest()实现：</p>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-built_in\">bool</span> hitTest(HitTestResult result, &#123; <span class=\"hljs-meta\">@required</span> Offset position &#125;) &#123;\n  ...  \n  <span class=\"hljs-keyword\">if</span> (_size.contains(position)) &#123;\n    <span class=\"hljs-keyword\">if</span> (hitTestChildren(result, position: position) || hitTestSelf(position)) &#123;\n      result.add(BoxHitTestEntry(<span class=\"hljs-keyword\">this</span>, position));\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    &#125;\n  &#125;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n&#125;\n</code></pre>\n<p>我们看到默认的实现里调用了hitTestSelf()和hitTestChildren()两个方法，这两个方法默认实现如下：</p>\n<pre class=\"highlight\"><code class=\"dart\"><span class=\"hljs-meta\">@protected</span>\n<span class=\"hljs-built_in\">bool</span> hitTestSelf(Offset position) =&gt; <span class=\"hljs-keyword\">false</span>;\n\n<span class=\"hljs-meta\">@protected</span>\n<span class=\"hljs-built_in\">bool</span> hitTestChildren(HitTestResult result, &#123; Offset position &#125;) =&gt; <span class=\"hljs-keyword\">false</span>;\n</code></pre>\n<blockquote>\n<p>hitTest 方法用来判断该 RenderObject 是否在被点击的范围内，同时负责将被点击的 RenderBox 添加到 HitTestResult 列表中，参数 position 为事件触发的坐标（如果有的话），返回 true 则表示有 RenderBox 通过了命中测试，需要响应事件，反之则认为当前RenderBox没有命中。</p>\n<p>在继承RenderBox时，可以直接重写hitTest()方法，也可以重写 hitTestSelf() 或 hitTestChildren(), 唯一不同的是 hitTest()中需要将通过命中测试的节点信息添加到命中测试结果列表中，而 hitTestSelf() 和 hitTestChildren()则只需要简单的返回true或false。</p>\n</blockquote>\n<h3 id=\"36-runtimeaot-jit-dart-vm\"><a class=\"markdownIt-Anchor\" href=\"#36-runtimeaot-jit-dart-vm\"></a> 3.6 Runtime（AOT）、JIT、Dart VM</h3>\n<h3 id=\"37-性能cpu-gpu-network-battery-disk\"><a class=\"markdownIt-Anchor\" href=\"#37-性能cpu-gpu-network-battery-disk\"></a> 3.7 性能（CPU、GPU、Network、battery、Disk）</h3>\n<h3 id=\"38-内存管理\"><a class=\"markdownIt-Anchor\" href=\"#38-内存管理\"></a> 3.8 <a href=\"https://mp.weixin.qq.com/s/efKCpCtvvHDHUiAsizobBQ\">内存管理</a></h3>\n<p>Dart VM将内存管理分为新生代(New Generation)和老年代(Old Generation)。</p>\n<ul>\n<li>新生代(New Generation): 通常初次分配的对象都位于新生代中，该区域主要是存放内存较小并且生命周期较短的对象，比如局部变量。新生代会频繁执行内存回收(GC)，回收采用“复制-清除”算法，将内存分为两块(图中的from 和 to)，运行时每次只使用其中的一块(图中的from)，另一块备用(图中的to)。当发生GC时，将当前使用的内存块中存活的对象拷贝到备用内存块中，然后清除当前使用内存块，最后，交换两块内存的角色。</li>\n</ul>\n<p><img src=\"./Memory_Manager_01.webp\" alt=\"Memory_Manager\" /></p>\n<ul>\n<li>老年代(Old Generation): 在新生代的GC中“幸存”下来的对象，它们会被转移到老年代中。老年代存放生命力周期较长，内存较大的对象。老年代通常比新生代要大很多。老年代的GC回收采用“标记-清除”算法，分成标记和清除两个阶段。在标记阶段，所有线程参与并发的完成对回收对象的标记，降低标记阶段耗时。在清理阶段，由GC线程负责清理回收对象，和应用线程同时执行，不影响应用运行。<br />\n<img src=\"./Memory_Manager_02.webp\" alt=\"Memory_Manager\" /></li>\n</ul>\n<h3 id=\"39-技术生态圈\"><a class=\"markdownIt-Anchor\" href=\"#39-技术生态圈\"></a> 3.9 技术生态圈</h3>\n<h2 id=\"4-flutter-原生\"><a class=\"markdownIt-Anchor\" href=\"#4-flutter-原生\"></a> 4、<a href=\"https://blog.codemagic.io/flutter-vs-swift/\">Flutter &amp; 原生</a></h2>\n<ol>\n<li>界面<br />\n解决移动端信息展示的目的；<br />\n都基于声明式、响应式的方式、热重载的方式；</li>\n</ol>\n<h2 id=\"5-未来与憧憬\"><a class=\"markdownIt-Anchor\" href=\"#5-未来与憧憬\"></a> 5、未来与憧憬</h2>\n<p>当下的移动端、前端开发技术越来越多样化，复杂化。</p>\n<p>就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；<br />\nAndroid的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等。</p>\n<p>大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。</p>\n<p>前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。</p>\n<p>前不久Facebook 又推出了新的<a href=\"https://juejin.im/entry/5d2e6d1ce51d4510664d178e\">Hermes</a>，用于在React Native应用提高性能的。</p>\n<p>个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。</p>\n<p>统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。</p>\n<p>据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！</p>\n"},{"_content":"# G++\n\nMacBook-P:~ sumian$ g++ --help\n\n```shell\nOVERVIEW: clang LLVM compiler\n\nUSAGE: clang [options] <inputs>\n\nOPTIONS:\n  -###                    Print (but do not run) the commands to run for this compilation\n  --analyzer-output <value>\n                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).\n  --analyze               Run the static analyzer\n  -arcmt-migrate-emit-errors\n                          Emit ARC errors even if the migrator can fix them\n  -arcmt-migrate-report-output <value>\n                          Output path for the plist report\n  -B <dir>                Add <dir> to search path for binaries and object files used implicitly\n  -CC                     Include comments from within macros in preprocessed output\n  -cfguard                Emit tables required for Windows Control Flow Guard.\n  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.\n  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.\n  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.\n  -cl-fp32-correctly-rounded-divide-sqrt\n                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.\n  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.\n  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.\n  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.\n  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.\n  -cl-single-precision-constant\n                          OpenCL only. Treat double precision floating-point constant as single precision constant.\n  -cl-std=<value>         OpenCL language standard to compile for.\n  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.\n  -cl-uniform-work-group-size\n                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel\n  -cl-unsafe-math-optimizations\n                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.\n  --config <value>        Specifies configuration file\n  --cuda-compile-host-device\n                          Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.\n  --cuda-device-only      Compile CUDA code for device only\n  --cuda-gpu-arch=<value> CUDA GPU architecture (e.g. sm_35).  May be specified more than once.\n  --cuda-host-only        Compile CUDA code for host only.  Has no effect on non-CUDA compilations.\n  --cuda-include-ptx=<value>\n                          Include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --cuda-noopt-device-debug\n                          Enable device-side debug info generation. Disables ptxas optimizations.\n  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation\n  --cuda-path=<value>     CUDA installation path\n  -cxx-isystem <directory>\n                          Add directory to the C++ SYSTEM include search path\n  -C                      Include comments in preprocessed output\n  -c                      Only run preprocess, compile, and assemble steps\n  -dD                     Print macro definitions in -E mode in addition to normal output\n  -dependency-dot <value> Filename to write DOT-formatted header dependencies to\n  -dependency-file <value>\n                          Filename (or -) to write dependency output to\n  -dI                     Print include directives in -E mode in addition to normal output\n  -dM                     Print macro definitions in -E mode instead of normal output\n  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)\n  -emit-ast               Emit Clang AST files for source inputs\n  -emit-llvm              Use the LLVM representation for assembler and object files\n  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang<value>\n                          Trivial automatic variable initialization to zero is only here for benchmarks, it'll eventually be removed, and I'm OK with that because I'm only using it to benchmark\n  -E                      Only run the preprocessor\n  -faddrsig               Emit an address-significance table\n  -faligned-allocation    Enable C++17 aligned allocation functions\n  -fallow-editor-placeholders\n                          Treat editor placeholders as valid source code\n  -fansi-escape-codes     Use ANSI escape codes for diagnostics\n  -fapinotes-cache-path=<directory>\n                          Does nothing; API notes are no longer cached separately from modules\n  -fapinotes-modules      Enable module-based external API notes support\n  -fapinotes-swift-version=<version>\n                          Specify the Swift version to use when filtering API notes\n  -fapinotes              Enable external API notes support\n  -fapple-kext            Use Apple's kernel extensions ABI\n  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling\n  -fapplication-extension Restrict code to those available for App Extensions\n  -fblocks                Enable the 'blocks' language feature\n  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler\n  -fbuild-session-file=<file>\n                          Use the last modification time of <file> as the build session timestamp\n  -fbuild-session-timestamp=<time since Epoch in seconds>\n                          Time when the current build session started\n  -fbuiltin-module-map    Load the clang builtins module map file.\n  -fc++-static-destructors\n                          Enable C++ static destructor registration (the default)\n  -fcf-protection=<value> Instrument control-flow architecture protection. Options: return, branch, full, none.\n  -fcf-protection         Enable cf-protection in 'full' mode\n  -fchar8_t               Enable C++ builtin type char8_t\n  -fclang-abi-compat=<version>\n                          Attempt to match the ABI of Clang <version>\n  -fcolor-diagnostics     Use colors in diagnostics\n  -fcomment-block-commands=<arg>\n                          Treat each comma separated argument in <arg> as a documentation comment block command\n  -fcomplete-member-pointers\n                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fcoroutines-ts         Enable support for the C++ Coroutines TS\n  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis\n  -fcuda-approx-transcendentals\n                          Use approximate transcendental functions\n  -fcuda-flush-denormals-to-zero\n                          Flush denormal floating point values to zero in CUDA device mode.\n  -fcuda-rdc              Generate relocatable device code, also known as separate compilation mode.\n  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces.\n  -fcxx-exceptions        Enable C++ exceptions\n  -fdata-sections         Place each data in its own section (ELF Only)\n  -fdebug-info-for-profiling\n                          Emit extra debug info to make sample profile more accurate.\n  -fdebug-macro           Emit macro debug information\n  -fdebug-prefix-map=<value>\n                          remap file source paths in debug info\n  -fdebug-types-section   Place debug types in their own section (ELF Only)\n  -fdeclspec              Allow __declspec as a keyword\n  -fdelayed-template-parsing\n                          Parse templated function definitions at the end of the translation unit\n  -fdelete-null-pointer-checks\n                          Treat usage of null pointers as undefined behavior.\n  -fdiagnostics-absolute-paths\n                          Print absolute paths in diagnostics\n  -fdiagnostics-hotness-threshold=<number>\n                          Prevent optimization remarks from being output if they do not have at least this profile count\n  -fdiagnostics-parseable-fixits\n                          Print fix-its in machine parseable form\n  -fdiagnostics-print-source-range-info\n                          Print source range spans in numeric form\n  -fdiagnostics-show-hotness\n                          Enable profile hotness information in diagnostic line\n  -fdiagnostics-show-note-include-stack\n                          Display include stacks for diagnostic notes\n  -fdiagnostics-show-option\n                          Print option name with mappable diagnostics\n  -fdiagnostics-show-template-tree\n                          Print a template comparison tree for differing templates\n  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)\n  -fdiscard-value-names   Discard value names in LLVM IR\n  -fdollars-in-identifiers\n                          Allow '$' in identifiers\n  -fdouble-square-bracket-attributes\n                          Enable '[[]]' attributes in all C and C++ language modes\n  -fdwarf-exceptions      Use DWARF style exceptions\n  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker\n  -fembed-bitcode=<option>\n                          Embed LLVM bitcode (option: off, all, bitcode, marker)\n  -fembed-bitcode         Embed LLVM IR bitcode as data\n  -femit-all-decls        Emit all declarations, even if unused\n  -femulated-tls          Use emutls functions to access thread_local variables\n  -fenable-matrix         Enable matrix data type and related builtin functions\n  -fexceptions            Enable support for exception handling\n  -fexperimental-isel     Enables the experimental global instruction selector\n  -fexperimental-new-pass-manager\n                          Enables an experimental new pass manager in LLVM.\n  -ffast-math             Allow aggressive, lossy floating-point optimizations\n  -ffine-grained-bitfield-accesses\n                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.\n  -ffixed-point           Enable fixed point types\n  -ffixed-r19             Reserve register r19 (Hexagon only)\n  -ffixed-r9              Reserve the r9 register (ARM only)\n  -ffixed-x18             Reserve the x18 register (AArch64 only)\n  -ffixed-x20             Reserve the x20 register (AArch64 only)\n  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization\n  -fforce-enable-int128   Enable support for int128_t type\n  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)\n  -ffreestanding          Assert that the compilation takes place in a freestanding environment\n  -ffunction-sections     Place each function in its own section (ELF Only)\n  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard\n  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime\n  -fgnu89-inline          Use the gnu89 inline semantics\n  -fimplicit-module-maps  Implicitly search the file system for module map files.\n  -finline-functions      Inline suitable functions\n  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline\n  -finstrument-function-entry-bare\n                          Instrument function entry only, after inlining, without arguments to the instrumentation call\n  -finstrument-functions-after-inlining\n                          Like -finstrument-functions, but insert the calls after inlining\n  -finstrument-functions  Generate calls to instrument function entry and exit\n  -fintegrated-as         Enable the integrated assembler\n  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)\n  -flto=<value>           Set LTO mode to either 'full' or 'thin'\n  -flto                   Enable LTO in 'full' mode\n  -fmath-errno            Require math functions to indicate errors by setting errno\n  -fmax-type-align=<value>\n                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment\n  -fmerge-all-constants   Allow merging of constants\n  -fmodule-file=[<name>=]<file>\n                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.\n  -fmodule-map-file=<file>\n                          Load this module map file\n  -fmodule-name=<name>    Specify the name of the module to build\n  -fmodules-cache-path=<directory>\n                          Specify the module cache path\n  -fmodules-decluse       Require declaration of modules used within a module\n  -fmodules-disable-diagnostic-validation\n                          Disable validation of the diagnostic options when loading the module\n  -fmodules-ignore-macro=<value>\n                          Ignore the definition of the given macro when building and loading modules\n  -fmodules-prune-after=<seconds>\n                          Specify the interval (in seconds) after which a module file will be considered unused\n  -fmodules-prune-interval=<seconds>\n                          Specify the interval (in seconds) between attempts to prune the module cache\n  -fmodules-search-all    Search even non-imported modules to resolve references\n  -fmodules-strict-decluse\n                          Like -fmodules-decluse but requires all headers to be in modules\n  -fmodules-ts            Enable support for the C++ Modules TS\n  -fmodules-user-build-path <directory>\n                          Specify the module user build path\n  -fmodules-validate-once-per-build-session\n                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session\n  -fmodules-validate-system-headers\n                          Validate the system headers that a module depends on when loading the module\n  -fmodules               Enable the 'modules' language feature\n  -fms-compatibility-version=<value>\n                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fms-compatibility      Enable full Microsoft Visual C++ compatibility\n  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler\n  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'\n  -fno-access-control     Disable C++ access control\n  -fno-addrsig            Don't emit an address-significance table\n  -fno-apinotes-modules   Disable module-based external API notes support\n  -fno-apinotes           Disable external API notes support\n  -fno-assume-sane-operator-new\n                          Don't assume that C++'s global operator new can't alias any pointer\n  -fno-autolink           Disable generation of linker directives for automatic library linking\n  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function\n  -fno-builtin            Disable implicit builtin knowledge of functions\n  -fno-c++-static-destructors\n                          Disable C++ static destructor registration\n  -fno-char8_t            Disable C++ builtin type char8_t\n  -fno-common             Compile common globals like normal definitions\n  -fno-complete-member-pointers\n                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings\n  -fno-coverage-mapping   Disable code coverage analysis\n  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash\n  -fno-debug-info-for-profiling\n                          Do not emit extra debug info for sample profiler.\n  -fno-debug-macro        Do not emit macro debug information\n  -fno-declspec           Disallow __declspec as a keyword\n  -fno-delayed-template-parsing\n                          Disable delayed template parsing\n  -fno-delete-null-pointer-checks\n                          Do not treat usage of null pointers as undefined behavior.\n  -fno-diagnostics-fixit-info\n                          Do not include fixit information in diagnostics\n  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'\n  -fno-discard-value-names\n                          Do not discard value names in LLVM IR\n  -fno-dollars-in-identifiers\n                          Disallow '$' in identifiers\n  -fno-double-square-bracket-attributes\n                          Disable '[[]]' attributes in all C and C++ language modes\n  -fno-elide-constructors Disable C++ copy constructor elision\n  -fno-elide-type         Do not elide types when printing diagnostics\n  -fno-experimental-isel  Disables the experimental global instruction selector\n  -fno-experimental-new-pass-manager\n                          Disables an experimental new pass manager in LLVM.\n  -fno-fine-grained-bitfield-accesses\n                          Use large-integer access for consecutive bitfield runs.\n  -fno-fixed-point        Disable fixed point types\n  -fno-force-enable-int128\n                          Disable support for int128_t type\n  -fno-gnu-inline-asm     Disable GNU style inline asm\n  -fno-integrated-as      Disable the integrated assembler\n  -fno-jump-tables        Do not use jump tables for lowering switches\n  -fno-lax-vector-conversions\n                          Disallow implicit conversions between vectors with a different number of elements or different element types\n  -fno-lto                Disable LTO mode (default)\n  -fno-merge-all-constants\n                          Disallow merging of constants\n  -fno-objc-infer-related-result-type\n                          do not infer Objective-C related result type based on method family\n  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators\n  -fno-plt                Do not use the PLT to make function calls\n  -fno-preserve-as-comments\n                          Do not preserve comments in inline assembly\n  -fno-profile-generate   Disable generation of profile instrumentation.\n  -fno-profile-instr-generate\n                          Disable generation of profile instrumentation.\n  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization\n  -fno-register-global-dtors-with-atexit\n                          Don't use atexit or __cxa_atexit to register global destructors\n  -fno-reroll-loops       Turn off loop reroller\n  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags\n  -fno-rtti-data          Control emission of RTTI data\n  -fno-rtti               Disable generation of rtti information\n  -fno-sanitize-address-poison-class-member-array-new-cookie\n                          Disable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fno-sanitize-address-use-after-scope\n                          Disable use-after-scope detection in AddressSanitizer\n  -fno-sanitize-blacklist Don't use blacklist file for sanitizers\n  -fno-sanitize-cfi-cross-dso\n                          Disable control flow integrity (CFI) checks for cross-DSO calls.\n  -fno-sanitize-coverage=<value>\n                          Disable specified features of coverage instrumentation for Sanitizers\n  -fno-sanitize-memory-track-origins\n                          Disable origins tracking in MemorySanitizer\n  -fno-sanitize-memory-use-after-dtor\n                          Disable use-after-destroy detection in MemorySanitizer\n  -fno-sanitize-recover=<value>\n                          Disable recovery for specified sanitizers\n  -fno-sanitize-stats     Disable sanitizer statistics gathering.\n  -fno-sanitize-thread-atomics\n                          Disable atomic operations instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-func-entry-exit\n                          Disable function entry/exit instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-memory-access\n                          Disable memory access instrumentation in ThreadSanitizer\n  -fno-sanitize-trap=<value>\n                          Disable trapping for specified sanitizers\n  -fno-short-wchar        Force wchar_t to be an unsigned int\n  -fno-show-column        Do not include column number on diagnostics\n  -fno-show-source-location\n                          Do not include source location information with diagnostics\n  -fno-signed-char        Char is unsigned\n  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros\n  -fno-spell-checking     Disable spell-checking\n  -fno-stack-check        Disable stack checking\n  -fno-stack-protector    Disable the use of stack protectors\n  -fno-stack-size-section Don't emit section containing metadata on function stack sizes\n  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary\n  -fno-strict-float-cast-overflow\n                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions\n  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe\n  -fno-trigraphs          Do not process trigraph sequences\n  -fno-unroll-loops       Turn off loop unroller\n  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors\n  -fno-use-init-array     Don't use .init_array instead of .ctors\n  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc\n  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers\n  -fobjc-exceptions       Enable Objective-C exceptions\n  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version\n  -fobjc-weak             Enable ARC-style weak references in Objective-C\n  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.\n  -fopenmp-targets=<value>\n                          Specify comma-separated list of triples OpenMP offloading targets to be supported\n  -fopenmp                Parse OpenMP pragmas and generate parallel code.\n  -foptimization-record-file=<value>\n                          Specify the file name of any generated YAML optimization record\n  -fpack-struct=<value>   Specify the default maximum struct packing alignment\n  -fpascal-strings        Recognize and construct Pascal-style string literals\n  -fpcc-struct-return     Override the default ABI to return all structs on the stack\n  -fplt                   Use the PLT to make function calls\n  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)\n  -fprebuilt-module-path=<directory>\n                          Specify the prebuilt module path\n  -fprofile-generate=<directory>\n                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate=<file>\n                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate\n                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)\n  -fprofile-instr-use=<value>\n                          Use instrumentation data for profile-guided optimization\n  -fprofile-sample-accurate\n                          Specifies that the sample profile is accurate\n  -fprofile-sample-use=<value>\n                          Enable sample-based profile guided optimizations\n  -fprofile-use=<pathname>\n                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.\n  -fptrauth-calls         Enable signing and authentication of all indirect calls\n  -fptrauth-intrinsics    Enable pointer-authentication intrinsics\n  -fptrauth-returns       Enable signing and authentication of return addresses\n  -fptrauth-soft          Enable software lowering of pointer authentication\n  -freciprocal-math       Allow division operations to be reassociated\n  -freg-struct-return     Override the default ABI to return small structs in registers\n  -fregister-global-dtors-with-atexit\n                          Use atexit or __cxa_atexit to register global destructors\n  -frelaxed-template-template-args\n                          Enable C++17 relaxed template template argument matching\n  -freroll-loops          Turn on loop reroller\n  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags\n  -fsanitize-address-field-padding=<value>\n                          Level of field padding for AddressSanitizer\n  -fsanitize-address-globals-dead-stripping\n                          Enable linker dead stripping of globals in AddressSanitizer\n  -fsanitize-address-poison-class-member-array-new-cookie\n                          Enable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fsanitize-address-use-after-scope\n                          Enable use-after-scope detection in AddressSanitizer\n  -fsanitize-blacklist=<value>\n                          Path to blacklist file for sanitizers\n  -fsanitize-cfi-cross-dso\n                          Enable control flow integrity (CFI) checks for cross-DSO calls.\n  -fsanitize-cfi-icall-generalize-pointers\n                          Generalize pointers in CFI indirect call type signature checks\n  -fsanitize-coverage=<value>\n                          Specify the type of coverage instrumentation for Sanitizers\n  -fsanitize-memory-track-origins=<value>\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-track-origins\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-use-after-dtor\n                          Enable use-after-destroy detection in MemorySanitizer\n  -fsanitize-recover=<value>\n                          Enable recovery for specified sanitizers\n  -fsanitize-stats        Enable sanitizer statistics gathering.\n  -fsanitize-thread-atomics\n                          Enable atomic operations instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-func-entry-exit\n                          Enable function entry/exit instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-memory-access\n                          Enable memory access instrumentation in ThreadSanitizer (default)\n  -fsanitize-trap=<value> Enable trapping for specified sanitizers\n  -fsanitize-undefined-strip-path-components=<number>\n                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.\n  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks\n  -fsave-optimization-record\n                          Generate a YAML optimization record file\n  -fseh-exceptions        Use SEH style exceptions\n  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values\n  -fshort-wchar           Force wchar_t to be a short unsigned int\n  -fshow-overloads=<value>\n                          Which overload candidates to show when overload resolution fails: best|all; defaults to all\n  -fsized-deallocation    Enable C++14 sized global deallocation functions\n  -fsjlj-exceptions       Use SjLj style exceptions\n  -fslp-vectorize         Enable the superword-level parallelism vectorization passes\n  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n  -fstack-check           Enable stack checking\n  -fstack-protector-all   Force the usage of stack protectors for all functions\n  -fstack-protector-strong\n                          Use a strong heuristic to apply stack protectors to functions\n  -fstack-protector       Enable stack protectors for functions potentially vulnerable to stack smashing\n  -fstack-size-section    Emit section containing metadata on function stack sizes\n  -fstandalone-debug      Emit full debug info for all types used by the program\n  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range\n  -fstrict-float-cast-overflow\n                          Assume that overflowing float-to-int casts are undefined (default)\n  -fstrict-return         Always treat control flow paths that fall off the end of a non-void function as unreachable\n  -fstrict-vtable-pointers\n                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects\n  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index\n  -ftrap-function=<value> Issue call to specified function rather than a trap instruction\n  -ftrapv-handler=<function name>\n                          Specify the function to be called on overflow\n  -ftrapv                 Trap on integer overflow\n  -ftrigraphs             Process trigraph sequences\n  -ftrivial-auto-var-init=<value>\n                          Initialize trivial automatic stack variables: uninitialized (default) | pattern\n  -funique-section-names  Use unique names for text and data sections (ELF Only)\n  -funroll-loops          Turn on loop unroller\n  -fuse-init-array        Use .init_array instead of .ctors\n  -fveclib=<value>        Use the given vector functions library\n  -fvectorize             Enable the loop vectorization passes\n  -fvisibility-inlines-hidden\n                          Give inline C++ member functions hidden visibility by default\n  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default\n  -fvisibility=<value>    Set the default symbol visibility for all global declarations\n  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto\n  -fwrapv                 Treat signed integer overflow as two's complement\n  -fwritable-strings      Store string literals as writable data\n  -fxray-always-emit-customevents\n                          Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-emit-typedevents\n                          Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-instrument= <value>\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.\n  -fxray-attr-list= <value>\n                          Filename defining the list of functions/types for imbuing XRay attributes.\n  -fxray-instruction-threshold= <value>\n                          Sets the minimum function size to instrument with XRay\n  -fxray-instrumentation-bundle= <value>\n                          Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is 'all'.\n  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit\n  -fxray-link-deps        Tells clang to add the link dependencies for XRay.\n  -fxray-modes= <value>   List of modes to link in by default into XRay instrumented binaries.\n  -fxray-never-instrument= <value>\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.\n  -fzvector               Enable System z vector language extension\n  -F <value>              Add directory to framework include search path\n  --gcc-toolchain=<value> Use the gcc toolchain at the given directory\n  -gcodeview              Generate CodeView debug information\n  -gdwarf-2               Generate source-level debug information with dwarf version 2\n  -gdwarf-3               Generate source-level debug information with dwarf version 3\n  -gdwarf-4               Generate source-level debug information with dwarf version 4\n  -gdwarf-5               Generate source-level debug information with dwarf version 5\n  -gembed-source          Embed source text in DWARF debug sections\n  -gline-tables-only      Emit debug line number tables only\n  -gmodules               Generate debug info with external references to clang modules or precompiled headers\n  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections\n  -gz=<value>             DWARF debug sections compression type\n  -gz                     DWARF debug sections compression type\n  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)\n  -g                      Generate source-level debug information\n  --help-hidden           Display help for hidden options\n  -help                   Display available options\n  --hip-device-lib-path=<value>\n                          HIP device library path\n  --hip-device-lib=<value>\n                          HIP device library\n  --hip-link              Link clang-offload-bundler bundles for HIP\n  -H                      Show header includes and nesting depth\n  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path\n  -iapinotes-modules <directory>\n                          Add directory to the API notes search path referenced by module name\n  -idirafter <value>      Add directory to AFTER include search path\n  -iframeworkwithsysroot <directory>\n                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot\n  -iframework <value>     Add directory to SYSTEM framework search path\n  -imacros <file>         Include macros from file before parsing\n  -include-pch <file>     Include precompiled header file\n  -include <file>         Include file before parsing\n  -index-header-map       Make the next included directory (-I or -F) an indexer header map\n  -index-ignore-system-symbols\n                          Ignore symbols from system headers\n  -index-record-codegen-name\n                          Record the codegen name for symbols\n  -index-store-path <value>\n                          Enable indexing with the specified data store path\n  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix\n  -iquote <directory>     Add directory to QUOTE include search path\n  -isysroot <dir>         Set the system root directory (usually /)\n  -isystem-after <directory>\n                          Add directory to end of the SYSTEM include search path\n  -isystem <directory>    Add directory to SYSTEM include search path\n  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system\n  -iwithprefixbefore <dir>\n                          Set directory to include search path with prefix\n  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix\n  -iwithsysroot <directory>\n                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot\n  -I <dir>                Add directory to include search path\n  -L <dir>                Add directory to library search path\n  -mabicalls              Enable SVR4-style position-independent code (Mips only)\n  -malign-double          Align doubles to two words in structs (x86 only)\n  -mbackchain             Link stack frames through backchain on System Z\n  -mcrc                   Allow use of CRC instructions (ARM/Mips only)\n  -MD                     Write a depfile containing user and system headers\n  -meabi <value>          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)\n  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)\n  -mexecute-only          Disallow generation of data access to code sections (ARM only)\n  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n  -mfentry                Insert calls to fentry at function entry (x86 only)\n  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mfp32                  Use 32-bit floating point registers (MIPS only)\n  -mfp64                  Use 64-bit floating point registers (MIPS only)\n  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>\n  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64 only)\n  -mglobal-merge          Enable merging of globals\n  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -MG                     Add missing headers to depfile\n  -mhvx-length=<value>    Set Hexagon Vector Length\n  -mhvx=<value>           Enable Hexagon Vector eXtensions\n  -mhvx                   Enable Hexagon Vector eXtensions\n  -miamcu                 Use Intel MCU ABI\n  --migrate               Run the migrator\n  -mincremental-linker-compatible\n                          (integrated-as) Emit an object file which can be used with an incremental linker\n  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation\n  -mios-version-min=<value>\n                          Set iOS deployment target\n  -MJ <value>             Write a compilation database entry per input\n  -mllvm <value>          Additional arguments to forward to LLVM's option processing\n  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)\n  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.\n  -mmacosx-version-min=<value>\n                          Set Mac OS X deployment target\n  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.\n  -MMD                    Write a depfile containing user headers\n  -mmemops                Enable generation of memop instructions\n  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard\n  -mmsa                   Enable MSA ASE (MIPS only)\n  -mmt                    Enable MT ASE (MIPS only)\n  -MM                     Like -MMD, but also implies -E and writes to stdout by default\n  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)\n  -mno-crc                Disallow use of CRC instructions (Mips only)\n  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)\n  -mno-execute-only       Allow generation of data access to code sections (ARM only)\n  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n  -mno-fix-cortex-a53-835769\n                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mno-global-merge       Disable merging of globals\n  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -mno-hvx                Disable Hexagon Vector eXtensions\n  -mno-implicit-float     Don't generate implicit floating point instructions\n  -mno-incremental-linker-compatible\n                          (integrated-as) Emit an object file which cannot be used with an incremental linker\n  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)\n  -mno-long-calls         Restore the default behaviour of not generating long calls\n  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.\n  -mno-memops             Disable generation of memop instructions\n  -mno-movt               Disallow use of movt/movw pairs (ARM only)\n  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard\n  -mno-msa                Disable MSA ASE (MIPS only)\n  -mno-mt                 Disable MT ASE (MIPS only)\n  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.\n  -mno-nvj                Disable generation of new-value jumps\n  -mno-nvs                Disable generation of new-value stores\n  -mno-outline            Disable function outlining (AArch64 only)\n  -mno-packets            Disable generation of instruction packets\n  -mno-relax              Disable linker relaxation\n  -mno-restrict-it        Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode\n  -mno-stack-arg-probe    Disable stack probes which are enabled by default\n  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)\n  -mno-xnack              Disable XNACK (AMDGPU only)\n  -mnocrc                 Disallow use of CRC instructions (ARM only)\n  -mnvj                   Enable generation of new-value jumps\n  -mnvs                   Enable generation of new-value stores\n  -module-dependency-dir <value>\n                          Directory to dump module dependencies to\n  -module-file-info       Provide information about a particular module file\n  -momit-leaf-frame-pointer\n                          Omit frame pointer setup for leaf functions\n  -moutline               Enable function outlining (AArch64 only)\n  -mpackets               Enable generation of instruction packets\n  -mpie-copy-relocations  Use copy relocations support for PIE builds\n  -mprefer-vector-width=<value>\n                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.\n  -MP                     Create phony target for each dependency (other than main file)\n  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility\n  -MQ <value>             Specify name of main file output to quote in depfile\n  -mrelax-all             (integrated-as) Relax all machine instructions\n  -mrelax                 Enable linker relaxation\n  -mrestrict-it           Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.\n  -mrtd                   Make StdCall calling convention the default\n  -msoft-float            Use software floating point\n  -mstack-alignment=<value>\n                          Set the stack alignment\n  -mstack-arg-probe       Enable stack probes\n  -mstack-probe-size=<value>\n                          Set the stack probe size\n  -mstackrealign          Force realign the stack at entry to every function\n  -mthread-model <value>  The thread model to use, e.g. posix, single (posix by default)\n  -mtp=<value>            Read thread pointer from coprocessor register (ARM only)\n  -MT <value>             Specify name of main file output in depfile\n  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)\n  -MV                     Use NMake/Jom format for the depfile\n  -mxnack                 Enable XNACK (AMDGPU only)\n  -M                      Like -MD, but also implies -E and writes to stdout by default\n  --no-cuda-gpu-arch=<value>\n                          Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. 'all' resets the list to its default value.\n  --no-cuda-include-ptx=<value>\n                          Do not include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.\n  --no-system-header-prefix=<prefix>\n                          Treat all #include paths starting with <prefix> as not including a system header.\n  -nobuiltininc           Disable builtin #include directories\n  -nostdinc++             Disable standard #include directories for the C++ standard library\n  -ObjC++                 Treat source input files as Objective-C++ inputs\n  -objcmt-atomic-property Make migration to 'atomic' properties\n  -objcmt-migrate-all     Enable migration to modern ObjC\n  -objcmt-migrate-annotation\n                          Enable migration to property and method annotations\n  -objcmt-migrate-designated-init\n                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods\n  -objcmt-migrate-instancetype\n                          Enable migration to infer instancetype for method result type\n  -objcmt-migrate-literals\n                          Enable migration to modern ObjC literals\n  -objcmt-migrate-ns-macros\n                          Enable migration to NS_ENUM/NS_OPTIONS macros\n  -objcmt-migrate-property-dot-syntax\n                          Enable migration of setter/getter messages to property-dot syntax\n  -objcmt-migrate-property\n                          Enable migration to modern ObjC property\n  -objcmt-migrate-protocol-conformance\n                          Enable migration to add protocol conformance on classes\n  -objcmt-migrate-readonly-property\n                          Enable migration to modern ObjC readonly property\n  -objcmt-migrate-readwrite-property\n                          Enable migration to modern ObjC readwrite property\n  -objcmt-migrate-subscripting\n                          Enable migration to modern ObjC subscripting\n  -objcmt-ns-nonatomic-iosonly\n                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute\n  -objcmt-returns-innerpointer-property\n                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER\n  -objcmt-whitelist-dir-path=<value>\n                          Only modify files with a filename contained in the provided directory path\n  -ObjC                   Treat source input files as Objective-C inputs\n  -o <file>               Write output to <file>\n  -pg                     Enable mcount instrumentation\n  -pipe                   Use pipes between commands, when possible\n  --precompile            Only precompile the input\n  -print-file-name=<file> Print the full library path of <file>\n  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace\n  -print-libgcc-file-name Print the library path for the currently used compiler runtime library (\"libgcc.a\" or \"libclang_rt.builtins.*.a\")\n  -print-prog-name=<name> Print the full program path of <name>\n  -print-resource-dir     Print the resource directory pathname\n  -print-search-dirs      Print the paths used for finding libraries and programs\n  -pthread                Support POSIX threads in generated code\n  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)\n  -P                      Disable linemarker output in -E mode\n  -Qn                     Do not emit metadata containing compiler name and version\n  -Qunused-arguments      Don't emit warning for unused driver arguments\n  -Qy                     Emit metadata containing compiler name and version\n  -relocatable-pch        Whether to build a relocatable precompiled header\n  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++\n  -rewrite-objc           Rewrite Objective-C source to C++\n  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression\n  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression\n  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression\n  -rtlib=<value>          Compiler runtime library to use\n  -R<remark>              Enable the specified remark\n  -save-stats=<value>     Save llvm statistics.\n  -save-stats             Save llvm statistics.\n  -save-temps=<value>     Save intermediate compilation results.\n  -save-temps             Save intermediate compilation results\n  -serialize-diagnostics <value>\n                          Serialize compiler diagnostics to a file\n  -std=<value>            Language standard to compile for\n  -stdlib=<value>         C++ standard library to use\n  --system-header-prefix=<prefix>\n                          Treat all #include paths starting with <prefix> as including a system header.\n  -S                      Only run preprocess and compilation steps\n  -target-variant <value> Generate code that may run on a particular variant of the deployment target\n  --target=<value>        Generate code for the given target\n  -Tbss <addr>            Set starting address of BSS to <addr>\n  -Tdata <addr>           Set starting address of DATA to <addr>\n  -time                   Time individual commands\n  -traditional-cpp        Enable some traditional CPP emulation\n  -trigraphs              Process trigraph sequences\n  -Ttext <addr>           Set starting address of TEXT to <addr>\n  -T <script>             Specify <script> as linker script\n  -undef                  undef all system defines\n  -U <macro>              Undefine macro <macro>\n  --verify-debug-info     Verify the binary representation of debug output\n  -verify-pch             Load and verify that a pre-compiled header file is not stale\n  --version               Print version information\n  -v                      Show commands to run and use verbose output\n  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler\n  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED\n  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker\n  -working-directory <value>\n                          Resolve file paths relative to the specified directory\n  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor\n  -W<warning>             Enable the specified warning\n  -w                      Suppress all warnings\n  -Xanalyzer <arg>        Pass <arg> to the static analyzer\n  -Xassembler <arg>       Pass <arg> to the assembler\n  -Xclang <arg>           Pass <arg> to the clang compiler\n  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation\n  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler\n  -Xlinker <arg>          Pass <arg> to the linker\n  -Xopenmp-target=<triple> <arg>\n                          Pass <arg> to the target offloading toolchain identified by <triple>.\n  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.\n  -Xpreprocessor <arg>    Pass <arg> to the preprocessor\n  -x <language>           Treat subsequent input files as having type <language>\n  -z <arg>                Pass -z <arg> to the linker\n```\n","source":"_posts/学习笔记/iOS/iOS之编程语言/CAlians/g++.md","raw":"# G++\n\nMacBook-P:~ sumian$ g++ --help\n\n```shell\nOVERVIEW: clang LLVM compiler\n\nUSAGE: clang [options] <inputs>\n\nOPTIONS:\n  -###                    Print (but do not run) the commands to run for this compilation\n  --analyzer-output <value>\n                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).\n  --analyze               Run the static analyzer\n  -arcmt-migrate-emit-errors\n                          Emit ARC errors even if the migrator can fix them\n  -arcmt-migrate-report-output <value>\n                          Output path for the plist report\n  -B <dir>                Add <dir> to search path for binaries and object files used implicitly\n  -CC                     Include comments from within macros in preprocessed output\n  -cfguard                Emit tables required for Windows Control Flow Guard.\n  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.\n  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.\n  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.\n  -cl-fp32-correctly-rounded-divide-sqrt\n                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.\n  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.\n  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.\n  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.\n  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.\n  -cl-single-precision-constant\n                          OpenCL only. Treat double precision floating-point constant as single precision constant.\n  -cl-std=<value>         OpenCL language standard to compile for.\n  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.\n  -cl-uniform-work-group-size\n                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel\n  -cl-unsafe-math-optimizations\n                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.\n  --config <value>        Specifies configuration file\n  --cuda-compile-host-device\n                          Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.\n  --cuda-device-only      Compile CUDA code for device only\n  --cuda-gpu-arch=<value> CUDA GPU architecture (e.g. sm_35).  May be specified more than once.\n  --cuda-host-only        Compile CUDA code for host only.  Has no effect on non-CUDA compilations.\n  --cuda-include-ptx=<value>\n                          Include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --cuda-noopt-device-debug\n                          Enable device-side debug info generation. Disables ptxas optimizations.\n  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation\n  --cuda-path=<value>     CUDA installation path\n  -cxx-isystem <directory>\n                          Add directory to the C++ SYSTEM include search path\n  -C                      Include comments in preprocessed output\n  -c                      Only run preprocess, compile, and assemble steps\n  -dD                     Print macro definitions in -E mode in addition to normal output\n  -dependency-dot <value> Filename to write DOT-formatted header dependencies to\n  -dependency-file <value>\n                          Filename (or -) to write dependency output to\n  -dI                     Print include directives in -E mode in addition to normal output\n  -dM                     Print macro definitions in -E mode instead of normal output\n  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)\n  -emit-ast               Emit Clang AST files for source inputs\n  -emit-llvm              Use the LLVM representation for assembler and object files\n  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang<value>\n                          Trivial automatic variable initialization to zero is only here for benchmarks, it'll eventually be removed, and I'm OK with that because I'm only using it to benchmark\n  -E                      Only run the preprocessor\n  -faddrsig               Emit an address-significance table\n  -faligned-allocation    Enable C++17 aligned allocation functions\n  -fallow-editor-placeholders\n                          Treat editor placeholders as valid source code\n  -fansi-escape-codes     Use ANSI escape codes for diagnostics\n  -fapinotes-cache-path=<directory>\n                          Does nothing; API notes are no longer cached separately from modules\n  -fapinotes-modules      Enable module-based external API notes support\n  -fapinotes-swift-version=<version>\n                          Specify the Swift version to use when filtering API notes\n  -fapinotes              Enable external API notes support\n  -fapple-kext            Use Apple's kernel extensions ABI\n  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling\n  -fapplication-extension Restrict code to those available for App Extensions\n  -fblocks                Enable the 'blocks' language feature\n  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler\n  -fbuild-session-file=<file>\n                          Use the last modification time of <file> as the build session timestamp\n  -fbuild-session-timestamp=<time since Epoch in seconds>\n                          Time when the current build session started\n  -fbuiltin-module-map    Load the clang builtins module map file.\n  -fc++-static-destructors\n                          Enable C++ static destructor registration (the default)\n  -fcf-protection=<value> Instrument control-flow architecture protection. Options: return, branch, full, none.\n  -fcf-protection         Enable cf-protection in 'full' mode\n  -fchar8_t               Enable C++ builtin type char8_t\n  -fclang-abi-compat=<version>\n                          Attempt to match the ABI of Clang <version>\n  -fcolor-diagnostics     Use colors in diagnostics\n  -fcomment-block-commands=<arg>\n                          Treat each comma separated argument in <arg> as a documentation comment block command\n  -fcomplete-member-pointers\n                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fcoroutines-ts         Enable support for the C++ Coroutines TS\n  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis\n  -fcuda-approx-transcendentals\n                          Use approximate transcendental functions\n  -fcuda-flush-denormals-to-zero\n                          Flush denormal floating point values to zero in CUDA device mode.\n  -fcuda-rdc              Generate relocatable device code, also known as separate compilation mode.\n  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces.\n  -fcxx-exceptions        Enable C++ exceptions\n  -fdata-sections         Place each data in its own section (ELF Only)\n  -fdebug-info-for-profiling\n                          Emit extra debug info to make sample profile more accurate.\n  -fdebug-macro           Emit macro debug information\n  -fdebug-prefix-map=<value>\n                          remap file source paths in debug info\n  -fdebug-types-section   Place debug types in their own section (ELF Only)\n  -fdeclspec              Allow __declspec as a keyword\n  -fdelayed-template-parsing\n                          Parse templated function definitions at the end of the translation unit\n  -fdelete-null-pointer-checks\n                          Treat usage of null pointers as undefined behavior.\n  -fdiagnostics-absolute-paths\n                          Print absolute paths in diagnostics\n  -fdiagnostics-hotness-threshold=<number>\n                          Prevent optimization remarks from being output if they do not have at least this profile count\n  -fdiagnostics-parseable-fixits\n                          Print fix-its in machine parseable form\n  -fdiagnostics-print-source-range-info\n                          Print source range spans in numeric form\n  -fdiagnostics-show-hotness\n                          Enable profile hotness information in diagnostic line\n  -fdiagnostics-show-note-include-stack\n                          Display include stacks for diagnostic notes\n  -fdiagnostics-show-option\n                          Print option name with mappable diagnostics\n  -fdiagnostics-show-template-tree\n                          Print a template comparison tree for differing templates\n  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)\n  -fdiscard-value-names   Discard value names in LLVM IR\n  -fdollars-in-identifiers\n                          Allow '$' in identifiers\n  -fdouble-square-bracket-attributes\n                          Enable '[[]]' attributes in all C and C++ language modes\n  -fdwarf-exceptions      Use DWARF style exceptions\n  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker\n  -fembed-bitcode=<option>\n                          Embed LLVM bitcode (option: off, all, bitcode, marker)\n  -fembed-bitcode         Embed LLVM IR bitcode as data\n  -femit-all-decls        Emit all declarations, even if unused\n  -femulated-tls          Use emutls functions to access thread_local variables\n  -fenable-matrix         Enable matrix data type and related builtin functions\n  -fexceptions            Enable support for exception handling\n  -fexperimental-isel     Enables the experimental global instruction selector\n  -fexperimental-new-pass-manager\n                          Enables an experimental new pass manager in LLVM.\n  -ffast-math             Allow aggressive, lossy floating-point optimizations\n  -ffine-grained-bitfield-accesses\n                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.\n  -ffixed-point           Enable fixed point types\n  -ffixed-r19             Reserve register r19 (Hexagon only)\n  -ffixed-r9              Reserve the r9 register (ARM only)\n  -ffixed-x18             Reserve the x18 register (AArch64 only)\n  -ffixed-x20             Reserve the x20 register (AArch64 only)\n  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization\n  -fforce-enable-int128   Enable support for int128_t type\n  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)\n  -ffreestanding          Assert that the compilation takes place in a freestanding environment\n  -ffunction-sections     Place each function in its own section (ELF Only)\n  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard\n  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime\n  -fgnu89-inline          Use the gnu89 inline semantics\n  -fimplicit-module-maps  Implicitly search the file system for module map files.\n  -finline-functions      Inline suitable functions\n  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline\n  -finstrument-function-entry-bare\n                          Instrument function entry only, after inlining, without arguments to the instrumentation call\n  -finstrument-functions-after-inlining\n                          Like -finstrument-functions, but insert the calls after inlining\n  -finstrument-functions  Generate calls to instrument function entry and exit\n  -fintegrated-as         Enable the integrated assembler\n  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)\n  -flto=<value>           Set LTO mode to either 'full' or 'thin'\n  -flto                   Enable LTO in 'full' mode\n  -fmath-errno            Require math functions to indicate errors by setting errno\n  -fmax-type-align=<value>\n                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment\n  -fmerge-all-constants   Allow merging of constants\n  -fmodule-file=[<name>=]<file>\n                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.\n  -fmodule-map-file=<file>\n                          Load this module map file\n  -fmodule-name=<name>    Specify the name of the module to build\n  -fmodules-cache-path=<directory>\n                          Specify the module cache path\n  -fmodules-decluse       Require declaration of modules used within a module\n  -fmodules-disable-diagnostic-validation\n                          Disable validation of the diagnostic options when loading the module\n  -fmodules-ignore-macro=<value>\n                          Ignore the definition of the given macro when building and loading modules\n  -fmodules-prune-after=<seconds>\n                          Specify the interval (in seconds) after which a module file will be considered unused\n  -fmodules-prune-interval=<seconds>\n                          Specify the interval (in seconds) between attempts to prune the module cache\n  -fmodules-search-all    Search even non-imported modules to resolve references\n  -fmodules-strict-decluse\n                          Like -fmodules-decluse but requires all headers to be in modules\n  -fmodules-ts            Enable support for the C++ Modules TS\n  -fmodules-user-build-path <directory>\n                          Specify the module user build path\n  -fmodules-validate-once-per-build-session\n                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session\n  -fmodules-validate-system-headers\n                          Validate the system headers that a module depends on when loading the module\n  -fmodules               Enable the 'modules' language feature\n  -fms-compatibility-version=<value>\n                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fms-compatibility      Enable full Microsoft Visual C++ compatibility\n  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler\n  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'\n  -fno-access-control     Disable C++ access control\n  -fno-addrsig            Don't emit an address-significance table\n  -fno-apinotes-modules   Disable module-based external API notes support\n  -fno-apinotes           Disable external API notes support\n  -fno-assume-sane-operator-new\n                          Don't assume that C++'s global operator new can't alias any pointer\n  -fno-autolink           Disable generation of linker directives for automatic library linking\n  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function\n  -fno-builtin            Disable implicit builtin knowledge of functions\n  -fno-c++-static-destructors\n                          Disable C++ static destructor registration\n  -fno-char8_t            Disable C++ builtin type char8_t\n  -fno-common             Compile common globals like normal definitions\n  -fno-complete-member-pointers\n                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings\n  -fno-coverage-mapping   Disable code coverage analysis\n  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash\n  -fno-debug-info-for-profiling\n                          Do not emit extra debug info for sample profiler.\n  -fno-debug-macro        Do not emit macro debug information\n  -fno-declspec           Disallow __declspec as a keyword\n  -fno-delayed-template-parsing\n                          Disable delayed template parsing\n  -fno-delete-null-pointer-checks\n                          Do not treat usage of null pointers as undefined behavior.\n  -fno-diagnostics-fixit-info\n                          Do not include fixit information in diagnostics\n  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'\n  -fno-discard-value-names\n                          Do not discard value names in LLVM IR\n  -fno-dollars-in-identifiers\n                          Disallow '$' in identifiers\n  -fno-double-square-bracket-attributes\n                          Disable '[[]]' attributes in all C and C++ language modes\n  -fno-elide-constructors Disable C++ copy constructor elision\n  -fno-elide-type         Do not elide types when printing diagnostics\n  -fno-experimental-isel  Disables the experimental global instruction selector\n  -fno-experimental-new-pass-manager\n                          Disables an experimental new pass manager in LLVM.\n  -fno-fine-grained-bitfield-accesses\n                          Use large-integer access for consecutive bitfield runs.\n  -fno-fixed-point        Disable fixed point types\n  -fno-force-enable-int128\n                          Disable support for int128_t type\n  -fno-gnu-inline-asm     Disable GNU style inline asm\n  -fno-integrated-as      Disable the integrated assembler\n  -fno-jump-tables        Do not use jump tables for lowering switches\n  -fno-lax-vector-conversions\n                          Disallow implicit conversions between vectors with a different number of elements or different element types\n  -fno-lto                Disable LTO mode (default)\n  -fno-merge-all-constants\n                          Disallow merging of constants\n  -fno-objc-infer-related-result-type\n                          do not infer Objective-C related result type based on method family\n  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators\n  -fno-plt                Do not use the PLT to make function calls\n  -fno-preserve-as-comments\n                          Do not preserve comments in inline assembly\n  -fno-profile-generate   Disable generation of profile instrumentation.\n  -fno-profile-instr-generate\n                          Disable generation of profile instrumentation.\n  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization\n  -fno-register-global-dtors-with-atexit\n                          Don't use atexit or __cxa_atexit to register global destructors\n  -fno-reroll-loops       Turn off loop reroller\n  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags\n  -fno-rtti-data          Control emission of RTTI data\n  -fno-rtti               Disable generation of rtti information\n  -fno-sanitize-address-poison-class-member-array-new-cookie\n                          Disable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fno-sanitize-address-use-after-scope\n                          Disable use-after-scope detection in AddressSanitizer\n  -fno-sanitize-blacklist Don't use blacklist file for sanitizers\n  -fno-sanitize-cfi-cross-dso\n                          Disable control flow integrity (CFI) checks for cross-DSO calls.\n  -fno-sanitize-coverage=<value>\n                          Disable specified features of coverage instrumentation for Sanitizers\n  -fno-sanitize-memory-track-origins\n                          Disable origins tracking in MemorySanitizer\n  -fno-sanitize-memory-use-after-dtor\n                          Disable use-after-destroy detection in MemorySanitizer\n  -fno-sanitize-recover=<value>\n                          Disable recovery for specified sanitizers\n  -fno-sanitize-stats     Disable sanitizer statistics gathering.\n  -fno-sanitize-thread-atomics\n                          Disable atomic operations instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-func-entry-exit\n                          Disable function entry/exit instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-memory-access\n                          Disable memory access instrumentation in ThreadSanitizer\n  -fno-sanitize-trap=<value>\n                          Disable trapping for specified sanitizers\n  -fno-short-wchar        Force wchar_t to be an unsigned int\n  -fno-show-column        Do not include column number on diagnostics\n  -fno-show-source-location\n                          Do not include source location information with diagnostics\n  -fno-signed-char        Char is unsigned\n  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros\n  -fno-spell-checking     Disable spell-checking\n  -fno-stack-check        Disable stack checking\n  -fno-stack-protector    Disable the use of stack protectors\n  -fno-stack-size-section Don't emit section containing metadata on function stack sizes\n  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary\n  -fno-strict-float-cast-overflow\n                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions\n  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe\n  -fno-trigraphs          Do not process trigraph sequences\n  -fno-unroll-loops       Turn off loop unroller\n  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors\n  -fno-use-init-array     Don't use .init_array instead of .ctors\n  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc\n  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers\n  -fobjc-exceptions       Enable Objective-C exceptions\n  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version\n  -fobjc-weak             Enable ARC-style weak references in Objective-C\n  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.\n  -fopenmp-targets=<value>\n                          Specify comma-separated list of triples OpenMP offloading targets to be supported\n  -fopenmp                Parse OpenMP pragmas and generate parallel code.\n  -foptimization-record-file=<value>\n                          Specify the file name of any generated YAML optimization record\n  -fpack-struct=<value>   Specify the default maximum struct packing alignment\n  -fpascal-strings        Recognize and construct Pascal-style string literals\n  -fpcc-struct-return     Override the default ABI to return all structs on the stack\n  -fplt                   Use the PLT to make function calls\n  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)\n  -fprebuilt-module-path=<directory>\n                          Specify the prebuilt module path\n  -fprofile-generate=<directory>\n                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate=<file>\n                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate\n                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)\n  -fprofile-instr-use=<value>\n                          Use instrumentation data for profile-guided optimization\n  -fprofile-sample-accurate\n                          Specifies that the sample profile is accurate\n  -fprofile-sample-use=<value>\n                          Enable sample-based profile guided optimizations\n  -fprofile-use=<pathname>\n                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.\n  -fptrauth-calls         Enable signing and authentication of all indirect calls\n  -fptrauth-intrinsics    Enable pointer-authentication intrinsics\n  -fptrauth-returns       Enable signing and authentication of return addresses\n  -fptrauth-soft          Enable software lowering of pointer authentication\n  -freciprocal-math       Allow division operations to be reassociated\n  -freg-struct-return     Override the default ABI to return small structs in registers\n  -fregister-global-dtors-with-atexit\n                          Use atexit or __cxa_atexit to register global destructors\n  -frelaxed-template-template-args\n                          Enable C++17 relaxed template template argument matching\n  -freroll-loops          Turn on loop reroller\n  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags\n  -fsanitize-address-field-padding=<value>\n                          Level of field padding for AddressSanitizer\n  -fsanitize-address-globals-dead-stripping\n                          Enable linker dead stripping of globals in AddressSanitizer\n  -fsanitize-address-poison-class-member-array-new-cookie\n                          Enable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fsanitize-address-use-after-scope\n                          Enable use-after-scope detection in AddressSanitizer\n  -fsanitize-blacklist=<value>\n                          Path to blacklist file for sanitizers\n  -fsanitize-cfi-cross-dso\n                          Enable control flow integrity (CFI) checks for cross-DSO calls.\n  -fsanitize-cfi-icall-generalize-pointers\n                          Generalize pointers in CFI indirect call type signature checks\n  -fsanitize-coverage=<value>\n                          Specify the type of coverage instrumentation for Sanitizers\n  -fsanitize-memory-track-origins=<value>\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-track-origins\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-use-after-dtor\n                          Enable use-after-destroy detection in MemorySanitizer\n  -fsanitize-recover=<value>\n                          Enable recovery for specified sanitizers\n  -fsanitize-stats        Enable sanitizer statistics gathering.\n  -fsanitize-thread-atomics\n                          Enable atomic operations instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-func-entry-exit\n                          Enable function entry/exit instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-memory-access\n                          Enable memory access instrumentation in ThreadSanitizer (default)\n  -fsanitize-trap=<value> Enable trapping for specified sanitizers\n  -fsanitize-undefined-strip-path-components=<number>\n                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.\n  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks\n  -fsave-optimization-record\n                          Generate a YAML optimization record file\n  -fseh-exceptions        Use SEH style exceptions\n  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values\n  -fshort-wchar           Force wchar_t to be a short unsigned int\n  -fshow-overloads=<value>\n                          Which overload candidates to show when overload resolution fails: best|all; defaults to all\n  -fsized-deallocation    Enable C++14 sized global deallocation functions\n  -fsjlj-exceptions       Use SjLj style exceptions\n  -fslp-vectorize         Enable the superword-level parallelism vectorization passes\n  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n  -fstack-check           Enable stack checking\n  -fstack-protector-all   Force the usage of stack protectors for all functions\n  -fstack-protector-strong\n                          Use a strong heuristic to apply stack protectors to functions\n  -fstack-protector       Enable stack protectors for functions potentially vulnerable to stack smashing\n  -fstack-size-section    Emit section containing metadata on function stack sizes\n  -fstandalone-debug      Emit full debug info for all types used by the program\n  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range\n  -fstrict-float-cast-overflow\n                          Assume that overflowing float-to-int casts are undefined (default)\n  -fstrict-return         Always treat control flow paths that fall off the end of a non-void function as unreachable\n  -fstrict-vtable-pointers\n                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects\n  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index\n  -ftrap-function=<value> Issue call to specified function rather than a trap instruction\n  -ftrapv-handler=<function name>\n                          Specify the function to be called on overflow\n  -ftrapv                 Trap on integer overflow\n  -ftrigraphs             Process trigraph sequences\n  -ftrivial-auto-var-init=<value>\n                          Initialize trivial automatic stack variables: uninitialized (default) | pattern\n  -funique-section-names  Use unique names for text and data sections (ELF Only)\n  -funroll-loops          Turn on loop unroller\n  -fuse-init-array        Use .init_array instead of .ctors\n  -fveclib=<value>        Use the given vector functions library\n  -fvectorize             Enable the loop vectorization passes\n  -fvisibility-inlines-hidden\n                          Give inline C++ member functions hidden visibility by default\n  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default\n  -fvisibility=<value>    Set the default symbol visibility for all global declarations\n  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto\n  -fwrapv                 Treat signed integer overflow as two's complement\n  -fwritable-strings      Store string literals as writable data\n  -fxray-always-emit-customevents\n                          Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-emit-typedevents\n                          Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-instrument= <value>\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.\n  -fxray-attr-list= <value>\n                          Filename defining the list of functions/types for imbuing XRay attributes.\n  -fxray-instruction-threshold= <value>\n                          Sets the minimum function size to instrument with XRay\n  -fxray-instrumentation-bundle= <value>\n                          Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is 'all'.\n  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit\n  -fxray-link-deps        Tells clang to add the link dependencies for XRay.\n  -fxray-modes= <value>   List of modes to link in by default into XRay instrumented binaries.\n  -fxray-never-instrument= <value>\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.\n  -fzvector               Enable System z vector language extension\n  -F <value>              Add directory to framework include search path\n  --gcc-toolchain=<value> Use the gcc toolchain at the given directory\n  -gcodeview              Generate CodeView debug information\n  -gdwarf-2               Generate source-level debug information with dwarf version 2\n  -gdwarf-3               Generate source-level debug information with dwarf version 3\n  -gdwarf-4               Generate source-level debug information with dwarf version 4\n  -gdwarf-5               Generate source-level debug information with dwarf version 5\n  -gembed-source          Embed source text in DWARF debug sections\n  -gline-tables-only      Emit debug line number tables only\n  -gmodules               Generate debug info with external references to clang modules or precompiled headers\n  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections\n  -gz=<value>             DWARF debug sections compression type\n  -gz                     DWARF debug sections compression type\n  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)\n  -g                      Generate source-level debug information\n  --help-hidden           Display help for hidden options\n  -help                   Display available options\n  --hip-device-lib-path=<value>\n                          HIP device library path\n  --hip-device-lib=<value>\n                          HIP device library\n  --hip-link              Link clang-offload-bundler bundles for HIP\n  -H                      Show header includes and nesting depth\n  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path\n  -iapinotes-modules <directory>\n                          Add directory to the API notes search path referenced by module name\n  -idirafter <value>      Add directory to AFTER include search path\n  -iframeworkwithsysroot <directory>\n                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot\n  -iframework <value>     Add directory to SYSTEM framework search path\n  -imacros <file>         Include macros from file before parsing\n  -include-pch <file>     Include precompiled header file\n  -include <file>         Include file before parsing\n  -index-header-map       Make the next included directory (-I or -F) an indexer header map\n  -index-ignore-system-symbols\n                          Ignore symbols from system headers\n  -index-record-codegen-name\n                          Record the codegen name for symbols\n  -index-store-path <value>\n                          Enable indexing with the specified data store path\n  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix\n  -iquote <directory>     Add directory to QUOTE include search path\n  -isysroot <dir>         Set the system root directory (usually /)\n  -isystem-after <directory>\n                          Add directory to end of the SYSTEM include search path\n  -isystem <directory>    Add directory to SYSTEM include search path\n  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system\n  -iwithprefixbefore <dir>\n                          Set directory to include search path with prefix\n  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix\n  -iwithsysroot <directory>\n                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot\n  -I <dir>                Add directory to include search path\n  -L <dir>                Add directory to library search path\n  -mabicalls              Enable SVR4-style position-independent code (Mips only)\n  -malign-double          Align doubles to two words in structs (x86 only)\n  -mbackchain             Link stack frames through backchain on System Z\n  -mcrc                   Allow use of CRC instructions (ARM/Mips only)\n  -MD                     Write a depfile containing user and system headers\n  -meabi <value>          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)\n  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)\n  -mexecute-only          Disallow generation of data access to code sections (ARM only)\n  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n  -mfentry                Insert calls to fentry at function entry (x86 only)\n  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mfp32                  Use 32-bit floating point registers (MIPS only)\n  -mfp64                  Use 64-bit floating point registers (MIPS only)\n  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>\n  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64 only)\n  -mglobal-merge          Enable merging of globals\n  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -MG                     Add missing headers to depfile\n  -mhvx-length=<value>    Set Hexagon Vector Length\n  -mhvx=<value>           Enable Hexagon Vector eXtensions\n  -mhvx                   Enable Hexagon Vector eXtensions\n  -miamcu                 Use Intel MCU ABI\n  --migrate               Run the migrator\n  -mincremental-linker-compatible\n                          (integrated-as) Emit an object file which can be used with an incremental linker\n  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation\n  -mios-version-min=<value>\n                          Set iOS deployment target\n  -MJ <value>             Write a compilation database entry per input\n  -mllvm <value>          Additional arguments to forward to LLVM's option processing\n  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)\n  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.\n  -mmacosx-version-min=<value>\n                          Set Mac OS X deployment target\n  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.\n  -MMD                    Write a depfile containing user headers\n  -mmemops                Enable generation of memop instructions\n  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard\n  -mmsa                   Enable MSA ASE (MIPS only)\n  -mmt                    Enable MT ASE (MIPS only)\n  -MM                     Like -MMD, but also implies -E and writes to stdout by default\n  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)\n  -mno-crc                Disallow use of CRC instructions (Mips only)\n  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)\n  -mno-execute-only       Allow generation of data access to code sections (ARM only)\n  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n  -mno-fix-cortex-a53-835769\n                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mno-global-merge       Disable merging of globals\n  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -mno-hvx                Disable Hexagon Vector eXtensions\n  -mno-implicit-float     Don't generate implicit floating point instructions\n  -mno-incremental-linker-compatible\n                          (integrated-as) Emit an object file which cannot be used with an incremental linker\n  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)\n  -mno-long-calls         Restore the default behaviour of not generating long calls\n  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.\n  -mno-memops             Disable generation of memop instructions\n  -mno-movt               Disallow use of movt/movw pairs (ARM only)\n  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard\n  -mno-msa                Disable MSA ASE (MIPS only)\n  -mno-mt                 Disable MT ASE (MIPS only)\n  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.\n  -mno-nvj                Disable generation of new-value jumps\n  -mno-nvs                Disable generation of new-value stores\n  -mno-outline            Disable function outlining (AArch64 only)\n  -mno-packets            Disable generation of instruction packets\n  -mno-relax              Disable linker relaxation\n  -mno-restrict-it        Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode\n  -mno-stack-arg-probe    Disable stack probes which are enabled by default\n  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)\n  -mno-xnack              Disable XNACK (AMDGPU only)\n  -mnocrc                 Disallow use of CRC instructions (ARM only)\n  -mnvj                   Enable generation of new-value jumps\n  -mnvs                   Enable generation of new-value stores\n  -module-dependency-dir <value>\n                          Directory to dump module dependencies to\n  -module-file-info       Provide information about a particular module file\n  -momit-leaf-frame-pointer\n                          Omit frame pointer setup for leaf functions\n  -moutline               Enable function outlining (AArch64 only)\n  -mpackets               Enable generation of instruction packets\n  -mpie-copy-relocations  Use copy relocations support for PIE builds\n  -mprefer-vector-width=<value>\n                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.\n  -MP                     Create phony target for each dependency (other than main file)\n  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility\n  -MQ <value>             Specify name of main file output to quote in depfile\n  -mrelax-all             (integrated-as) Relax all machine instructions\n  -mrelax                 Enable linker relaxation\n  -mrestrict-it           Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.\n  -mrtd                   Make StdCall calling convention the default\n  -msoft-float            Use software floating point\n  -mstack-alignment=<value>\n                          Set the stack alignment\n  -mstack-arg-probe       Enable stack probes\n  -mstack-probe-size=<value>\n                          Set the stack probe size\n  -mstackrealign          Force realign the stack at entry to every function\n  -mthread-model <value>  The thread model to use, e.g. posix, single (posix by default)\n  -mtp=<value>            Read thread pointer from coprocessor register (ARM only)\n  -MT <value>             Specify name of main file output in depfile\n  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)\n  -MV                     Use NMake/Jom format for the depfile\n  -mxnack                 Enable XNACK (AMDGPU only)\n  -M                      Like -MD, but also implies -E and writes to stdout by default\n  --no-cuda-gpu-arch=<value>\n                          Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. 'all' resets the list to its default value.\n  --no-cuda-include-ptx=<value>\n                          Do not include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.\n  --no-system-header-prefix=<prefix>\n                          Treat all #include paths starting with <prefix> as not including a system header.\n  -nobuiltininc           Disable builtin #include directories\n  -nostdinc++             Disable standard #include directories for the C++ standard library\n  -ObjC++                 Treat source input files as Objective-C++ inputs\n  -objcmt-atomic-property Make migration to 'atomic' properties\n  -objcmt-migrate-all     Enable migration to modern ObjC\n  -objcmt-migrate-annotation\n                          Enable migration to property and method annotations\n  -objcmt-migrate-designated-init\n                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods\n  -objcmt-migrate-instancetype\n                          Enable migration to infer instancetype for method result type\n  -objcmt-migrate-literals\n                          Enable migration to modern ObjC literals\n  -objcmt-migrate-ns-macros\n                          Enable migration to NS_ENUM/NS_OPTIONS macros\n  -objcmt-migrate-property-dot-syntax\n                          Enable migration of setter/getter messages to property-dot syntax\n  -objcmt-migrate-property\n                          Enable migration to modern ObjC property\n  -objcmt-migrate-protocol-conformance\n                          Enable migration to add protocol conformance on classes\n  -objcmt-migrate-readonly-property\n                          Enable migration to modern ObjC readonly property\n  -objcmt-migrate-readwrite-property\n                          Enable migration to modern ObjC readwrite property\n  -objcmt-migrate-subscripting\n                          Enable migration to modern ObjC subscripting\n  -objcmt-ns-nonatomic-iosonly\n                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute\n  -objcmt-returns-innerpointer-property\n                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER\n  -objcmt-whitelist-dir-path=<value>\n                          Only modify files with a filename contained in the provided directory path\n  -ObjC                   Treat source input files as Objective-C inputs\n  -o <file>               Write output to <file>\n  -pg                     Enable mcount instrumentation\n  -pipe                   Use pipes between commands, when possible\n  --precompile            Only precompile the input\n  -print-file-name=<file> Print the full library path of <file>\n  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace\n  -print-libgcc-file-name Print the library path for the currently used compiler runtime library (\"libgcc.a\" or \"libclang_rt.builtins.*.a\")\n  -print-prog-name=<name> Print the full program path of <name>\n  -print-resource-dir     Print the resource directory pathname\n  -print-search-dirs      Print the paths used for finding libraries and programs\n  -pthread                Support POSIX threads in generated code\n  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)\n  -P                      Disable linemarker output in -E mode\n  -Qn                     Do not emit metadata containing compiler name and version\n  -Qunused-arguments      Don't emit warning for unused driver arguments\n  -Qy                     Emit metadata containing compiler name and version\n  -relocatable-pch        Whether to build a relocatable precompiled header\n  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++\n  -rewrite-objc           Rewrite Objective-C source to C++\n  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression\n  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression\n  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression\n  -rtlib=<value>          Compiler runtime library to use\n  -R<remark>              Enable the specified remark\n  -save-stats=<value>     Save llvm statistics.\n  -save-stats             Save llvm statistics.\n  -save-temps=<value>     Save intermediate compilation results.\n  -save-temps             Save intermediate compilation results\n  -serialize-diagnostics <value>\n                          Serialize compiler diagnostics to a file\n  -std=<value>            Language standard to compile for\n  -stdlib=<value>         C++ standard library to use\n  --system-header-prefix=<prefix>\n                          Treat all #include paths starting with <prefix> as including a system header.\n  -S                      Only run preprocess and compilation steps\n  -target-variant <value> Generate code that may run on a particular variant of the deployment target\n  --target=<value>        Generate code for the given target\n  -Tbss <addr>            Set starting address of BSS to <addr>\n  -Tdata <addr>           Set starting address of DATA to <addr>\n  -time                   Time individual commands\n  -traditional-cpp        Enable some traditional CPP emulation\n  -trigraphs              Process trigraph sequences\n  -Ttext <addr>           Set starting address of TEXT to <addr>\n  -T <script>             Specify <script> as linker script\n  -undef                  undef all system defines\n  -U <macro>              Undefine macro <macro>\n  --verify-debug-info     Verify the binary representation of debug output\n  -verify-pch             Load and verify that a pre-compiled header file is not stale\n  --version               Print version information\n  -v                      Show commands to run and use verbose output\n  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler\n  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED\n  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker\n  -working-directory <value>\n                          Resolve file paths relative to the specified directory\n  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor\n  -W<warning>             Enable the specified warning\n  -w                      Suppress all warnings\n  -Xanalyzer <arg>        Pass <arg> to the static analyzer\n  -Xassembler <arg>       Pass <arg> to the assembler\n  -Xclang <arg>           Pass <arg> to the clang compiler\n  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation\n  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler\n  -Xlinker <arg>          Pass <arg> to the linker\n  -Xopenmp-target=<triple> <arg>\n                          Pass <arg> to the target offloading toolchain identified by <triple>.\n  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.\n  -Xpreprocessor <arg>    Pass <arg> to the preprocessor\n  -x <language>           Treat subsequent input files as having type <language>\n  -z <arg>                Pass -z <arg> to the linker\n```\n","slug":"学习笔记/iOS/iOS之编程语言/CAlians/g++","published":1,"date":"2021-02-24T12:31:09.255Z","updated":"2021-02-24T12:31:09.256Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cknad3tkn003fw37u67qfez6s","content":"<h1 id=\"g\"><a class=\"markdownIt-Anchor\" href=\"#g\"></a> G++</h1>\n<p>MacBook-P:~ sumian$ g++ --help</p>\n<pre class=\"highlight\"><code class=\"shell\">OVERVIEW: clang LLVM compiler\n\nUSAGE: clang [options] &lt;inputs&gt;\n\nOPTIONS:\n<span class=\"hljs-meta\">  -#</span><span class=\"bash\"><span class=\"hljs-comment\">##                    Print (but do not run) the commands to run for this compilation</span></span>\n  --analyzer-output &lt;value&gt;\n                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).\n  --analyze               Run the static analyzer\n  -arcmt-migrate-emit-errors\n                          Emit ARC errors even if the migrator can fix them\n  -arcmt-migrate-report-output &lt;value&gt;\n                          Output path for the plist report\n  -B &lt;dir&gt;                Add &lt;dir&gt; to search path for binaries and object files used implicitly\n  -CC                     Include comments from within macros in preprocessed output\n  -cfguard                Emit tables required for Windows Control Flow Guard.\n  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.\n  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.\n  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.\n  -cl-fp32-correctly-rounded-divide-sqrt\n                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.\n  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.\n  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.\n  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.\n  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.\n  -cl-single-precision-constant\n                          OpenCL only. Treat double precision floating-point constant as single precision constant.\n  -cl-std=&lt;value&gt;         OpenCL language standard to compile for.\n  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.\n  -cl-uniform-work-group-size\n                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel\n  -cl-unsafe-math-optimizations\n                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.\n  --config &lt;value&gt;        Specifies configuration file\n  --cuda-compile-host-device\n                          Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.\n  --cuda-device-only      Compile CUDA code for device only\n  --cuda-gpu-arch=&lt;value&gt; CUDA GPU architecture (e.g. sm_35).  May be specified more than once.\n  --cuda-host-only        Compile CUDA code for host only.  Has no effect on non-CUDA compilations.\n  --cuda-include-ptx=&lt;value&gt;\n                          Include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --cuda-noopt-device-debug\n                          Enable device-side debug info generation. Disables ptxas optimizations.\n  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation\n  --cuda-path=&lt;value&gt;     CUDA installation path\n  -cxx-isystem &lt;directory&gt;\n                          Add directory to the C++ SYSTEM include search path\n  -C                      Include comments in preprocessed output\n  -c                      Only run preprocess, compile, and assemble steps\n  -dD                     Print macro definitions in -E mode in addition to normal output\n  -dependency-dot &lt;value&gt; Filename to write DOT-formatted header dependencies to\n  -dependency-file &lt;value&gt;\n                          Filename (or -) to write dependency output to\n  -dI                     Print include directives in -E mode in addition to normal output\n  -dM                     Print macro definitions in -E mode instead of normal output\n  -D &lt;macro&gt;=&lt;value&gt;      Define &lt;macro&gt; to &lt;value&gt; (or 1 if &lt;value&gt; omitted)\n  -emit-ast               Emit Clang AST files for source inputs\n  -emit-llvm              Use the LLVM representation for assembler and object files\n  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang&lt;value&gt;\n                          Trivial automatic variable initialization to zero is only here for benchmarks, it'll eventually be removed, and I'm OK with that because I'm only using it to benchmark\n  -E                      Only run the preprocessor\n  -faddrsig               Emit an address-significance table\n  -faligned-allocation    Enable C++17 aligned allocation functions\n  -fallow-editor-placeholders\n                          Treat editor placeholders as valid source code\n  -fansi-escape-codes     Use ANSI escape codes for diagnostics\n  -fapinotes-cache-path=&lt;directory&gt;\n                          Does nothing; API notes are no longer cached separately from modules\n  -fapinotes-modules      Enable module-based external API notes support\n  -fapinotes-swift-version=&lt;version&gt;\n                          Specify the Swift version to use when filtering API notes\n  -fapinotes              Enable external API notes support\n  -fapple-kext            Use Apple's kernel extensions ABI\n  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling\n  -fapplication-extension Restrict code to those available for App Extensions\n  -fblocks                Enable the 'blocks' language feature\n  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler\n  -fbuild-session-file=&lt;file&gt;\n                          Use the last modification time of &lt;file&gt; as the build session timestamp\n  -fbuild-session-timestamp=&lt;time since Epoch in seconds&gt;\n                          Time when the current build session started\n  -fbuiltin-module-map    Load the clang builtins module map file.\n  -fc++-static-destructors\n                          Enable C++ static destructor registration (the default)\n  -fcf-protection=&lt;value&gt; Instrument control-flow architecture protection. Options: return, branch, full, none.\n  -fcf-protection         Enable cf-protection in 'full' mode\n  -fchar8_t               Enable C++ builtin type char8_t\n  -fclang-abi-compat=&lt;version&gt;\n                          Attempt to match the ABI of Clang &lt;version&gt;\n  -fcolor-diagnostics     Use colors in diagnostics\n  -fcomment-block-commands=&lt;arg&gt;\n                          Treat each comma separated argument in &lt;arg&gt; as a documentation comment block command\n  -fcomplete-member-pointers\n                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fcoroutines-ts         Enable support for the C++ Coroutines TS\n  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis\n  -fcuda-approx-transcendentals\n                          Use approximate transcendental functions\n  -fcuda-flush-denormals-to-zero\n                          Flush denormal floating point values to zero in CUDA device mode.\n  -fcuda-rdc              Generate relocatable device code, also known as separate compilation mode.\n  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces.\n  -fcxx-exceptions        Enable C++ exceptions\n  -fdata-sections         Place each data in its own section (ELF Only)\n  -fdebug-info-for-profiling\n                          Emit extra debug info to make sample profile more accurate.\n  -fdebug-macro           Emit macro debug information\n  -fdebug-prefix-map=&lt;value&gt;\n                          remap file source paths in debug info\n  -fdebug-types-section   Place debug types in their own section (ELF Only)\n  -fdeclspec              Allow __declspec as a keyword\n  -fdelayed-template-parsing\n                          Parse templated function definitions at the end of the translation unit\n  -fdelete-null-pointer-checks\n                          Treat usage of null pointers as undefined behavior.\n  -fdiagnostics-absolute-paths\n                          Print absolute paths in diagnostics\n  -fdiagnostics-hotness-threshold=&lt;number&gt;\n                          Prevent optimization remarks from being output if they do not have at least this profile count\n  -fdiagnostics-parseable-fixits\n                          Print fix-its in machine parseable form\n  -fdiagnostics-print-source-range-info\n                          Print source range spans in numeric form\n  -fdiagnostics-show-hotness\n                          Enable profile hotness information in diagnostic line\n  -fdiagnostics-show-note-include-stack\n                          Display include stacks for diagnostic notes\n  -fdiagnostics-show-option\n                          Print option name with mappable diagnostics\n  -fdiagnostics-show-template-tree\n                          Print a template comparison tree for differing templates\n  -fdigraphs              Enable alternative token representations '&lt;:', ':&gt;', '&lt;%', '%&gt;', '%:', '%:%:' (default)\n  -fdiscard-value-names   Discard value names in LLVM IR\n  -fdollars-in-identifiers\n                          Allow '$' in identifiers\n  -fdouble-square-bracket-attributes\n                          Enable '[[]]' attributes in all C and C++ language modes\n  -fdwarf-exceptions      Use DWARF style exceptions\n  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker\n  -fembed-bitcode=&lt;option&gt;\n                          Embed LLVM bitcode (option: off, all, bitcode, marker)\n  -fembed-bitcode         Embed LLVM IR bitcode as data\n  -femit-all-decls        Emit all declarations, even if unused\n  -femulated-tls          Use emutls functions to access thread_local variables\n  -fenable-matrix         Enable matrix data type and related builtin functions\n  -fexceptions            Enable support for exception handling\n  -fexperimental-isel     Enables the experimental global instruction selector\n  -fexperimental-new-pass-manager\n                          Enables an experimental new pass manager in LLVM.\n  -ffast-math             Allow aggressive, lossy floating-point optimizations\n  -ffine-grained-bitfield-accesses\n                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.\n  -ffixed-point           Enable fixed point types\n  -ffixed-r19             Reserve register r19 (Hexagon only)\n  -ffixed-r9              Reserve the r9 register (ARM only)\n  -ffixed-x18             Reserve the x18 register (AArch64 only)\n  -ffixed-x20             Reserve the x20 register (AArch64 only)\n  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization\n  -fforce-enable-int128   Enable support for int128_t type\n  -ffp-contract=&lt;value&gt;   Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)\n  -ffreestanding          Assert that the compilation takes place in a freestanding environment\n  -ffunction-sections     Place each function in its own section (ELF Only)\n  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard\n  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime\n  -fgnu89-inline          Use the gnu89 inline semantics\n  -fimplicit-module-maps  Implicitly search the file system for module map files.\n  -finline-functions      Inline suitable functions\n  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline\n  -finstrument-function-entry-bare\n                          Instrument function entry only, after inlining, without arguments to the instrumentation call\n  -finstrument-functions-after-inlining\n                          Like -finstrument-functions, but insert the calls after inlining\n  -finstrument-functions  Generate calls to instrument function entry and exit\n  -fintegrated-as         Enable the integrated assembler\n  -flto-jobs=&lt;value&gt;      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)\n  -flto=&lt;value&gt;           Set LTO mode to either 'full' or 'thin'\n  -flto                   Enable LTO in 'full' mode\n  -fmath-errno            Require math functions to indicate errors by setting errno\n  -fmax-type-align=&lt;value&gt;\n                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment\n  -fmerge-all-constants   Allow merging of constants\n  -fmodule-file=[&lt;name&gt;=]&lt;file&gt;\n                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.\n  -fmodule-map-file=&lt;file&gt;\n                          Load this module map file\n  -fmodule-name=&lt;name&gt;    Specify the name of the module to build\n  -fmodules-cache-path=&lt;directory&gt;\n                          Specify the module cache path\n  -fmodules-decluse       Require declaration of modules used within a module\n  -fmodules-disable-diagnostic-validation\n                          Disable validation of the diagnostic options when loading the module\n  -fmodules-ignore-macro=&lt;value&gt;\n                          Ignore the definition of the given macro when building and loading modules\n  -fmodules-prune-after=&lt;seconds&gt;\n                          Specify the interval (in seconds) after which a module file will be considered unused\n  -fmodules-prune-interval=&lt;seconds&gt;\n                          Specify the interval (in seconds) between attempts to prune the module cache\n  -fmodules-search-all    Search even non-imported modules to resolve references\n  -fmodules-strict-decluse\n                          Like -fmodules-decluse but requires all headers to be in modules\n  -fmodules-ts            Enable support for the C++ Modules TS\n  -fmodules-user-build-path &lt;directory&gt;\n                          Specify the module user build path\n  -fmodules-validate-once-per-build-session\n                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session\n  -fmodules-validate-system-headers\n                          Validate the system headers that a module depends on when loading the module\n  -fmodules               Enable the 'modules' language feature\n  -fms-compatibility-version=&lt;value&gt;\n                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fms-compatibility      Enable full Microsoft Visual C++ compatibility\n  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler\n  -fmsc-version=&lt;value&gt;   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fnew-alignment=&lt;align&gt; Specifies the largest alignment guaranteed by '::operator new(size_t)'\n  -fno-access-control     Disable C++ access control\n  -fno-addrsig            Don't emit an address-significance table\n  -fno-apinotes-modules   Disable module-based external API notes support\n  -fno-apinotes           Disable external API notes support\n  -fno-assume-sane-operator-new\n                          Don't assume that C++'s global operator new can't alias any pointer\n  -fno-autolink           Disable generation of linker directives for automatic library linking\n  -fno-builtin-&lt;value&gt;    Disable implicit builtin knowledge of a specific function\n  -fno-builtin            Disable implicit builtin knowledge of functions\n  -fno-c++-static-destructors\n                          Disable C++ static destructor registration\n  -fno-char8_t            Disable C++ builtin type char8_t\n  -fno-common             Compile common globals like normal definitions\n  -fno-complete-member-pointers\n                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings\n  -fno-coverage-mapping   Disable code coverage analysis\n  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash\n  -fno-debug-info-for-profiling\n                          Do not emit extra debug info for sample profiler.\n  -fno-debug-macro        Do not emit macro debug information\n  -fno-declspec           Disallow __declspec as a keyword\n  -fno-delayed-template-parsing\n                          Disable delayed template parsing\n  -fno-delete-null-pointer-checks\n                          Do not treat usage of null pointers as undefined behavior.\n  -fno-diagnostics-fixit-info\n                          Do not include fixit information in diagnostics\n  -fno-digraphs           Disallow alternative token representations '&lt;:', ':&gt;', '&lt;%', '%&gt;', '%:', '%:%:'\n  -fno-discard-value-names\n                          Do not discard value names in LLVM IR\n  -fno-dollars-in-identifiers\n                          Disallow '$' in identifiers\n  -fno-double-square-bracket-attributes\n                          Disable '[[]]' attributes in all C and C++ language modes\n  -fno-elide-constructors Disable C++ copy constructor elision\n  -fno-elide-type         Do not elide types when printing diagnostics\n  -fno-experimental-isel  Disables the experimental global instruction selector\n  -fno-experimental-new-pass-manager\n                          Disables an experimental new pass manager in LLVM.\n  -fno-fine-grained-bitfield-accesses\n                          Use large-integer access for consecutive bitfield runs.\n  -fno-fixed-point        Disable fixed point types\n  -fno-force-enable-int128\n                          Disable support for int128_t type\n  -fno-gnu-inline-asm     Disable GNU style inline asm\n  -fno-integrated-as      Disable the integrated assembler\n  -fno-jump-tables        Do not use jump tables for lowering switches\n  -fno-lax-vector-conversions\n                          Disallow implicit conversions between vectors with a different number of elements or different element types\n  -fno-lto                Disable LTO mode (default)\n  -fno-merge-all-constants\n                          Disallow merging of constants\n  -fno-objc-infer-related-result-type\n                          do not infer Objective-C related result type based on method family\n  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators\n  -fno-plt                Do not use the PLT to make function calls\n  -fno-preserve-as-comments\n                          Do not preserve comments in inline assembly\n  -fno-profile-generate   Disable generation of profile instrumentation.\n  -fno-profile-instr-generate\n                          Disable generation of profile instrumentation.\n  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization\n  -fno-register-global-dtors-with-atexit\n                          Don't use atexit or __cxa_atexit to register global destructors\n  -fno-reroll-loops       Turn off loop reroller\n  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags\n  -fno-rtti-data          Control emission of RTTI data\n  -fno-rtti               Disable generation of rtti information\n  -fno-sanitize-address-poison-class-member-array-new-cookie\n                          Disable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fno-sanitize-address-use-after-scope\n                          Disable use-after-scope detection in AddressSanitizer\n  -fno-sanitize-blacklist Don't use blacklist file for sanitizers\n  -fno-sanitize-cfi-cross-dso\n                          Disable control flow integrity (CFI) checks for cross-DSO calls.\n  -fno-sanitize-coverage=&lt;value&gt;\n                          Disable specified features of coverage instrumentation for Sanitizers\n  -fno-sanitize-memory-track-origins\n                          Disable origins tracking in MemorySanitizer\n  -fno-sanitize-memory-use-after-dtor\n                          Disable use-after-destroy detection in MemorySanitizer\n  -fno-sanitize-recover=&lt;value&gt;\n                          Disable recovery for specified sanitizers\n  -fno-sanitize-stats     Disable sanitizer statistics gathering.\n  -fno-sanitize-thread-atomics\n                          Disable atomic operations instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-func-entry-exit\n                          Disable function entry/exit instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-memory-access\n                          Disable memory access instrumentation in ThreadSanitizer\n  -fno-sanitize-trap=&lt;value&gt;\n                          Disable trapping for specified sanitizers\n  -fno-short-wchar        Force wchar_t to be an unsigned int\n  -fno-show-column        Do not include column number on diagnostics\n  -fno-show-source-location\n                          Do not include source location information with diagnostics\n  -fno-signed-char        Char is unsigned\n  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros\n  -fno-spell-checking     Disable spell-checking\n  -fno-stack-check        Disable stack checking\n  -fno-stack-protector    Disable the use of stack protectors\n  -fno-stack-size-section Don't emit section containing metadata on function stack sizes\n  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary\n  -fno-strict-float-cast-overflow\n                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions\n  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe\n  -fno-trigraphs          Do not process trigraph sequences\n  -fno-unroll-loops       Turn off loop unroller\n  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors\n  -fno-use-init-array     Don't use .init_array instead of .ctors\n  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc\n  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers\n  -fobjc-exceptions       Enable Objective-C exceptions\n  -fobjc-runtime=&lt;value&gt;  Specify the target Objective-C runtime kind and version\n  -fobjc-weak             Enable ARC-style weak references in Objective-C\n  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.\n  -fopenmp-targets=&lt;value&gt;\n                          Specify comma-separated list of triples OpenMP offloading targets to be supported\n  -fopenmp                Parse OpenMP pragmas and generate parallel code.\n  -foptimization-record-file=&lt;value&gt;\n                          Specify the file name of any generated YAML optimization record\n  -fpack-struct=&lt;value&gt;   Specify the default maximum struct packing alignment\n  -fpascal-strings        Recognize and construct Pascal-style string literals\n  -fpcc-struct-return     Override the default ABI to return all structs on the stack\n  -fplt                   Use the PLT to make function calls\n  -fplugin=&lt;dsopath&gt;      Load the named plugin (dynamic shared object)\n  -fprebuilt-module-path=&lt;directory&gt;\n                          Specify the prebuilt module path\n  -fprofile-generate=&lt;directory&gt;\n                          Generate instrumented code to collect execution counts into &lt;directory&gt;/default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate=&lt;file&gt;\n                          Generate instrumented code to collect execution counts into &lt;file&gt; (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate\n                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)\n  -fprofile-instr-use=&lt;value&gt;\n                          Use instrumentation data for profile-guided optimization\n  -fprofile-sample-accurate\n                          Specifies that the sample profile is accurate\n  -fprofile-sample-use=&lt;value&gt;\n                          Enable sample-based profile guided optimizations\n  -fprofile-use=&lt;pathname&gt;\n                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from &lt;pathname&gt;/default.profdata. Otherwise, it reads from file &lt;pathname&gt;.\n  -fptrauth-calls         Enable signing and authentication of all indirect calls\n  -fptrauth-intrinsics    Enable pointer-authentication intrinsics\n  -fptrauth-returns       Enable signing and authentication of return addresses\n  -fptrauth-soft          Enable software lowering of pointer authentication\n  -freciprocal-math       Allow division operations to be reassociated\n  -freg-struct-return     Override the default ABI to return small structs in registers\n  -fregister-global-dtors-with-atexit\n                          Use atexit or __cxa_atexit to register global destructors\n  -frelaxed-template-template-args\n                          Enable C++17 relaxed template template argument matching\n  -freroll-loops          Turn on loop reroller\n  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags\n  -fsanitize-address-field-padding=&lt;value&gt;\n                          Level of field padding for AddressSanitizer\n  -fsanitize-address-globals-dead-stripping\n                          Enable linker dead stripping of globals in AddressSanitizer\n  -fsanitize-address-poison-class-member-array-new-cookie\n                          Enable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fsanitize-address-use-after-scope\n                          Enable use-after-scope detection in AddressSanitizer\n  -fsanitize-blacklist=&lt;value&gt;\n                          Path to blacklist file for sanitizers\n  -fsanitize-cfi-cross-dso\n                          Enable control flow integrity (CFI) checks for cross-DSO calls.\n  -fsanitize-cfi-icall-generalize-pointers\n                          Generalize pointers in CFI indirect call type signature checks\n  -fsanitize-coverage=&lt;value&gt;\n                          Specify the type of coverage instrumentation for Sanitizers\n  -fsanitize-memory-track-origins=&lt;value&gt;\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-track-origins\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-use-after-dtor\n                          Enable use-after-destroy detection in MemorySanitizer\n  -fsanitize-recover=&lt;value&gt;\n                          Enable recovery for specified sanitizers\n  -fsanitize-stats        Enable sanitizer statistics gathering.\n  -fsanitize-thread-atomics\n                          Enable atomic operations instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-func-entry-exit\n                          Enable function entry/exit instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-memory-access\n                          Enable memory access instrumentation in ThreadSanitizer (default)\n  -fsanitize-trap=&lt;value&gt; Enable trapping for specified sanitizers\n  -fsanitize-undefined-strip-path-components=&lt;number&gt;\n                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.\n  -fsanitize=&lt;check&gt;      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks\n  -fsave-optimization-record\n                          Generate a YAML optimization record file\n  -fseh-exceptions        Use SEH style exceptions\n  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values\n  -fshort-wchar           Force wchar_t to be a short unsigned int\n  -fshow-overloads=&lt;value&gt;\n                          Which overload candidates to show when overload resolution fails: best|all; defaults to all\n  -fsized-deallocation    Enable C++14 sized global deallocation functions\n  -fsjlj-exceptions       Use SjLj style exceptions\n  -fslp-vectorize         Enable the superword-level parallelism vectorization passes\n  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n  -fstack-check           Enable stack checking\n  -fstack-protector-all   Force the usage of stack protectors for all functions\n  -fstack-protector-strong\n                          Use a strong heuristic to apply stack protectors to functions\n  -fstack-protector       Enable stack protectors for functions potentially vulnerable to stack smashing\n  -fstack-size-section    Emit section containing metadata on function stack sizes\n  -fstandalone-debug      Emit full debug info for all types used by the program\n  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range\n  -fstrict-float-cast-overflow\n                          Assume that overflowing float-to-int casts are undefined (default)\n  -fstrict-return         Always treat control flow paths that fall off the end of a non-void function as unreachable\n  -fstrict-vtable-pointers\n                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects\n  -fthinlto-index=&lt;value&gt; Perform ThinLTO importing using provided function summary index\n  -ftrap-function=&lt;value&gt; Issue call to specified function rather than a trap instruction\n  -ftrapv-handler=&lt;function name&gt;\n                          Specify the function to be called on overflow\n  -ftrapv                 Trap on integer overflow\n  -ftrigraphs             Process trigraph sequences\n  -ftrivial-auto-var-init=&lt;value&gt;\n                          Initialize trivial automatic stack variables: uninitialized (default) | pattern\n  -funique-section-names  Use unique names for text and data sections (ELF Only)\n  -funroll-loops          Turn on loop unroller\n  -fuse-init-array        Use .init_array instead of .ctors\n  -fveclib=&lt;value&gt;        Use the given vector functions library\n  -fvectorize             Enable the loop vectorization passes\n  -fvisibility-inlines-hidden\n                          Give inline C++ member functions hidden visibility by default\n  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default\n  -fvisibility=&lt;value&gt;    Set the default symbol visibility for all global declarations\n  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto\n  -fwrapv                 Treat signed integer overflow as two's complement\n  -fwritable-strings      Store string literals as writable data\n  -fxray-always-emit-customevents\n                          Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-emit-typedevents\n                          Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-instrument= &lt;value&gt;\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.\n  -fxray-attr-list= &lt;value&gt;\n                          Filename defining the list of functions/types for imbuing XRay attributes.\n  -fxray-instruction-threshold= &lt;value&gt;\n                          Sets the minimum function size to instrument with XRay\n  -fxray-instrumentation-bundle= &lt;value&gt;\n                          Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is 'all'.\n  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit\n  -fxray-link-deps        Tells clang to add the link dependencies for XRay.\n  -fxray-modes= &lt;value&gt;   List of modes to link in by default into XRay instrumented binaries.\n  -fxray-never-instrument= &lt;value&gt;\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.\n  -fzvector               Enable System z vector language extension\n  -F &lt;value&gt;              Add directory to framework include search path\n  --gcc-toolchain=&lt;value&gt; Use the gcc toolchain at the given directory\n  -gcodeview              Generate CodeView debug information\n  -gdwarf-2               Generate source-level debug information with dwarf version 2\n  -gdwarf-3               Generate source-level debug information with dwarf version 3\n  -gdwarf-4               Generate source-level debug information with dwarf version 4\n  -gdwarf-5               Generate source-level debug information with dwarf version 5\n  -gembed-source          Embed source text in DWARF debug sections\n  -gline-tables-only      Emit debug line number tables only\n  -gmodules               Generate debug info with external references to clang modules or precompiled headers\n  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections\n  -gz=&lt;value&gt;             DWARF debug sections compression type\n  -gz                     DWARF debug sections compression type\n  -G &lt;size&gt;               Put objects of at most &lt;size&gt; bytes into small data section (MIPS / Hexagon)\n  -g                      Generate source-level debug information\n  --help-hidden           Display help for hidden options\n  -help                   Display available options\n  --hip-device-lib-path=&lt;value&gt;\n                          HIP device library path\n  --hip-device-lib=&lt;value&gt;\n                          HIP device library\n  --hip-link              Link clang-offload-bundler bundles for HIP\n  -H                      Show header includes and nesting depth\n  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path\n  -iapinotes-modules &lt;directory&gt;\n                          Add directory to the API notes search path referenced by module name\n  -idirafter &lt;value&gt;      Add directory to AFTER include search path\n  -iframeworkwithsysroot &lt;directory&gt;\n                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot\n  -iframework &lt;value&gt;     Add directory to SYSTEM framework search path\n  -imacros &lt;file&gt;         Include macros from file before parsing\n  -include-pch &lt;file&gt;     Include precompiled header file\n  -include &lt;file&gt;         Include file before parsing\n  -index-header-map       Make the next included directory (-I or -F) an indexer header map\n  -index-ignore-system-symbols\n                          Ignore symbols from system headers\n  -index-record-codegen-name\n                          Record the codegen name for symbols\n  -index-store-path &lt;value&gt;\n                          Enable indexing with the specified data store path\n  -iprefix &lt;dir&gt;          Set the -iwithprefix/-iwithprefixbefore prefix\n  -iquote &lt;directory&gt;     Add directory to QUOTE include search path\n  -isysroot &lt;dir&gt;         Set the system root directory (usually /)\n  -isystem-after &lt;directory&gt;\n                          Add directory to end of the SYSTEM include search path\n  -isystem &lt;directory&gt;    Add directory to SYSTEM include search path\n  -ivfsoverlay &lt;value&gt;    Overlay the virtual filesystem described by file over the real file system\n  -iwithprefixbefore &lt;dir&gt;\n                          Set directory to include search path with prefix\n  -iwithprefix &lt;dir&gt;      Set directory to SYSTEM include search path with prefix\n  -iwithsysroot &lt;directory&gt;\n                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot\n  -I &lt;dir&gt;                Add directory to include search path\n  -L &lt;dir&gt;                Add directory to library search path\n  -mabicalls              Enable SVR4-style position-independent code (Mips only)\n  -malign-double          Align doubles to two words in structs (x86 only)\n  -mbackchain             Link stack frames through backchain on System Z\n  -mcrc                   Allow use of CRC instructions (ARM/Mips only)\n  -MD                     Write a depfile containing user and system headers\n  -meabi &lt;value&gt;          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)\n  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G &lt;size&gt; threshold (MIPS)\n  -mexecute-only          Disallow generation of data access to code sections (ARM only)\n  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G &lt;size&gt; threshold (MIPS)\n  -mfentry                Insert calls to fentry at function entry (x86 only)\n  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mfp32                  Use 32-bit floating point registers (MIPS only)\n  -mfp64                  Use 64-bit floating point registers (MIPS only)\n  -MF &lt;file&gt;              Write depfile output from -MMD, -MD, -MM, or -M to &lt;file&gt;\n  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64 only)\n  -mglobal-merge          Enable merging of globals\n  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -MG                     Add missing headers to depfile\n  -mhvx-length=&lt;value&gt;    Set Hexagon Vector Length\n  -mhvx=&lt;value&gt;           Enable Hexagon Vector eXtensions\n  -mhvx                   Enable Hexagon Vector eXtensions\n  -miamcu                 Use Intel MCU ABI\n  --migrate               Run the migrator\n  -mincremental-linker-compatible\n                          (integrated-as) Emit an object file which can be used with an incremental linker\n  -mindirect-jump=&lt;value&gt; Change indirect jump instructions to inhibit speculation\n  -mios-version-min=&lt;value&gt;\n                          Set iOS deployment target\n  -MJ &lt;value&gt;             Write a compilation database entry per input\n  -mllvm &lt;value&gt;          Additional arguments to forward to LLVM's option processing\n  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)\n  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.\n  -mmacosx-version-min=&lt;value&gt;\n                          Set Mac OS X deployment target\n  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.\n  -MMD                    Write a depfile containing user headers\n  -mmemops                Enable generation of memop instructions\n  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard\n  -mmsa                   Enable MSA ASE (MIPS only)\n  -mmt                    Enable MT ASE (MIPS only)\n  -MM                     Like -MMD, but also implies -E and writes to stdout by default\n  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)\n  -mno-crc                Disallow use of CRC instructions (Mips only)\n  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G &lt;size&gt; threshold (MIPS)\n  -mno-execute-only       Allow generation of data access to code sections (ARM only)\n  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G &lt;size&gt; threshold (MIPS)\n  -mno-fix-cortex-a53-835769\n                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mno-global-merge       Disable merging of globals\n  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -mno-hvx                Disable Hexagon Vector eXtensions\n  -mno-implicit-float     Don't generate implicit floating point instructions\n  -mno-incremental-linker-compatible\n                          (integrated-as) Emit an object file which cannot be used with an incremental linker\n  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)\n  -mno-long-calls         Restore the default behaviour of not generating long calls\n  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.\n  -mno-memops             Disable generation of memop instructions\n  -mno-movt               Disallow use of movt/movw pairs (ARM only)\n  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard\n  -mno-msa                Disable MSA ASE (MIPS only)\n  -mno-mt                 Disable MT ASE (MIPS only)\n  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.\n  -mno-nvj                Disable generation of new-value jumps\n  -mno-nvs                Disable generation of new-value stores\n  -mno-outline            Disable function outlining (AArch64 only)\n  -mno-packets            Disable generation of instruction packets\n  -mno-relax              Disable linker relaxation\n  -mno-restrict-it        Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode\n  -mno-stack-arg-probe    Disable stack probes which are enabled by default\n  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)\n  -mno-xnack              Disable XNACK (AMDGPU only)\n  -mnocrc                 Disallow use of CRC instructions (ARM only)\n  -mnvj                   Enable generation of new-value jumps\n  -mnvs                   Enable generation of new-value stores\n  -module-dependency-dir &lt;value&gt;\n                          Directory to dump module dependencies to\n  -module-file-info       Provide information about a particular module file\n  -momit-leaf-frame-pointer\n                          Omit frame pointer setup for leaf functions\n  -moutline               Enable function outlining (AArch64 only)\n  -mpackets               Enable generation of instruction packets\n  -mpie-copy-relocations  Use copy relocations support for PIE builds\n  -mprefer-vector-width=&lt;value&gt;\n                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.\n  -MP                     Create phony target for each dependency (other than main file)\n  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility\n  -MQ &lt;value&gt;             Specify name of main file output to quote in depfile\n  -mrelax-all             (integrated-as) Relax all machine instructions\n  -mrelax                 Enable linker relaxation\n  -mrestrict-it           Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.\n  -mrtd                   Make StdCall calling convention the default\n  -msoft-float            Use software floating point\n  -mstack-alignment=&lt;value&gt;\n                          Set the stack alignment\n  -mstack-arg-probe       Enable stack probes\n  -mstack-probe-size=&lt;value&gt;\n                          Set the stack probe size\n  -mstackrealign          Force realign the stack at entry to every function\n  -mthread-model &lt;value&gt;  The thread model to use, e.g. posix, single (posix by default)\n  -mtp=&lt;value&gt;            Read thread pointer from coprocessor register (ARM only)\n  -MT &lt;value&gt;             Specify name of main file output in depfile\n  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)\n  -MV                     Use NMake/Jom format for the depfile\n  -mxnack                 Enable XNACK (AMDGPU only)\n  -M                      Like -MD, but also implies -E and writes to stdout by default\n  --no-cuda-gpu-arch=&lt;value&gt;\n                          Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. 'all' resets the list to its default value.\n  --no-cuda-include-ptx=&lt;value&gt;\n                          Do not include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.\n  --no-system-header-prefix=&lt;prefix&gt;\n                          Treat all #include paths starting with &lt;prefix&gt; as not including a system header.\n  -nobuiltininc           Disable builtin #include directories\n  -nostdinc++             Disable standard #include directories for the C++ standard library\n  -ObjC++                 Treat source input files as Objective-C++ inputs\n  -objcmt-atomic-property Make migration to 'atomic' properties\n  -objcmt-migrate-all     Enable migration to modern ObjC\n  -objcmt-migrate-annotation\n                          Enable migration to property and method annotations\n  -objcmt-migrate-designated-init\n                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods\n  -objcmt-migrate-instancetype\n                          Enable migration to infer instancetype for method result type\n  -objcmt-migrate-literals\n                          Enable migration to modern ObjC literals\n  -objcmt-migrate-ns-macros\n                          Enable migration to NS_ENUM/NS_OPTIONS macros\n  -objcmt-migrate-property-dot-syntax\n                          Enable migration of setter/getter messages to property-dot syntax\n  -objcmt-migrate-property\n                          Enable migration to modern ObjC property\n  -objcmt-migrate-protocol-conformance\n                          Enable migration to add protocol conformance on classes\n  -objcmt-migrate-readonly-property\n                          Enable migration to modern ObjC readonly property\n  -objcmt-migrate-readwrite-property\n                          Enable migration to modern ObjC readwrite property\n  -objcmt-migrate-subscripting\n                          Enable migration to modern ObjC subscripting\n  -objcmt-ns-nonatomic-iosonly\n                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute\n  -objcmt-returns-innerpointer-property\n                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER\n  -objcmt-whitelist-dir-path=&lt;value&gt;\n                          Only modify files with a filename contained in the provided directory path\n  -ObjC                   Treat source input files as Objective-C inputs\n  -o &lt;file&gt;               Write output to &lt;file&gt;\n  -pg                     Enable mcount instrumentation\n  -pipe                   Use pipes between commands, when possible\n  --precompile            Only precompile the input\n  -print-file-name=&lt;file&gt; Print the full library path of &lt;file&gt;\n  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace\n  -print-libgcc-file-name Print the library path for the currently used compiler runtime library (\"libgcc.a\" or \"libclang_rt.builtins.*.a\")\n  -print-prog-name=&lt;name&gt; Print the full program path of &lt;name&gt;\n  -print-resource-dir     Print the resource directory pathname\n  -print-search-dirs      Print the paths used for finding libraries and programs\n  -pthread                Support POSIX threads in generated code\n  --ptxas-path=&lt;value&gt;    Path to ptxas (used for compiling CUDA code)\n  -P                      Disable linemarker output in -E mode\n  -Qn                     Do not emit metadata containing compiler name and version\n  -Qunused-arguments      Don't emit warning for unused driver arguments\n  -Qy                     Emit metadata containing compiler name and version\n  -relocatable-pch        Whether to build a relocatable precompiled header\n  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++\n  -rewrite-objc           Rewrite Objective-C source to C++\n  -Rpass-analysis=&lt;value&gt; Report transformation analysis from optimization passes whose name matches the given POSIX regular expression\n  -Rpass-missed=&lt;value&gt;   Report missed transformations by optimization passes whose name matches the given POSIX regular expression\n  -Rpass=&lt;value&gt;          Report transformations performed by optimization passes whose name matches the given POSIX regular expression\n  -rtlib=&lt;value&gt;          Compiler runtime library to use\n  -R&lt;remark&gt;              Enable the specified remark\n  -save-stats=&lt;value&gt;     Save llvm statistics.\n  -save-stats             Save llvm statistics.\n  -save-temps=&lt;value&gt;     Save intermediate compilation results.\n  -save-temps             Save intermediate compilation results\n  -serialize-diagnostics &lt;value&gt;\n                          Serialize compiler diagnostics to a file\n  -std=&lt;value&gt;            Language standard to compile for\n  -stdlib=&lt;value&gt;         C++ standard library to use\n  --system-header-prefix=&lt;prefix&gt;\n                          Treat all #include paths starting with &lt;prefix&gt; as including a system header.\n  -S                      Only run preprocess and compilation steps\n  -target-variant &lt;value&gt; Generate code that may run on a particular variant of the deployment target\n  --target=&lt;value&gt;        Generate code for the given target\n  -Tbss &lt;addr&gt;            Set starting address of BSS to &lt;addr&gt;\n  -Tdata &lt;addr&gt;           Set starting address of DATA to &lt;addr&gt;\n  -time                   Time individual commands\n  -traditional-cpp        Enable some traditional CPP emulation\n  -trigraphs              Process trigraph sequences\n  -Ttext &lt;addr&gt;           Set starting address of TEXT to &lt;addr&gt;\n  -T &lt;script&gt;             Specify &lt;script&gt; as linker script\n  -undef                  undef all system defines\n  -U &lt;macro&gt;              Undefine macro &lt;macro&gt;\n  --verify-debug-info     Verify the binary representation of debug output\n  -verify-pch             Load and verify that a pre-compiled header file is not stale\n  --version               Print version information\n  -v                      Show commands to run and use verbose output\n  -Wa,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the assembler\n  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED\n  -Wl,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the linker\n  -working-directory &lt;value&gt;\n                          Resolve file paths relative to the specified directory\n  -Wp,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the preprocessor\n  -W&lt;warning&gt;             Enable the specified warning\n  -w                      Suppress all warnings\n  -Xanalyzer &lt;arg&gt;        Pass &lt;arg&gt; to the static analyzer\n  -Xassembler &lt;arg&gt;       Pass &lt;arg&gt; to the assembler\n  -Xclang &lt;arg&gt;           Pass &lt;arg&gt; to the clang compiler\n  -Xcuda-fatbinary &lt;arg&gt;  Pass &lt;arg&gt; to fatbinary invocation\n  -Xcuda-ptxas &lt;arg&gt;      Pass &lt;arg&gt; to the ptxas assembler\n  -Xlinker &lt;arg&gt;          Pass &lt;arg&gt; to the linker\n  -Xopenmp-target=&lt;triple&gt; &lt;arg&gt;\n                          Pass &lt;arg&gt; to the target offloading toolchain identified by &lt;triple&gt;.\n  -Xopenmp-target &lt;arg&gt;   Pass &lt;arg&gt; to the target offloading toolchain.\n  -Xpreprocessor &lt;arg&gt;    Pass &lt;arg&gt; to the preprocessor\n  -x &lt;language&gt;           Treat subsequent input files as having type &lt;language&gt;\n  -z &lt;arg&gt;                Pass -z &lt;arg&gt; to the linker\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"g\"><a class=\"markdownIt-Anchor\" href=\"#g\"></a> G++</h1>\n<p>MacBook-P:~ sumian$ g++ --help</p>\n<pre class=\"highlight\"><code class=\"shell\">OVERVIEW: clang LLVM compiler\n\nUSAGE: clang [options] &lt;inputs&gt;\n\nOPTIONS:\n<span class=\"hljs-meta\">  -#</span><span class=\"bash\"><span class=\"hljs-comment\">##                    Print (but do not run) the commands to run for this compilation</span></span>\n  --analyzer-output &lt;value&gt;\n                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).\n  --analyze               Run the static analyzer\n  -arcmt-migrate-emit-errors\n                          Emit ARC errors even if the migrator can fix them\n  -arcmt-migrate-report-output &lt;value&gt;\n                          Output path for the plist report\n  -B &lt;dir&gt;                Add &lt;dir&gt; to search path for binaries and object files used implicitly\n  -CC                     Include comments from within macros in preprocessed output\n  -cfguard                Emit tables required for Windows Control Flow Guard.\n  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.\n  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.\n  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.\n  -cl-fp32-correctly-rounded-divide-sqrt\n                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.\n  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.\n  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.\n  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.\n  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.\n  -cl-single-precision-constant\n                          OpenCL only. Treat double precision floating-point constant as single precision constant.\n  -cl-std=&lt;value&gt;         OpenCL language standard to compile for.\n  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.\n  -cl-uniform-work-group-size\n                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel\n  -cl-unsafe-math-optimizations\n                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.\n  --config &lt;value&gt;        Specifies configuration file\n  --cuda-compile-host-device\n                          Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.\n  --cuda-device-only      Compile CUDA code for device only\n  --cuda-gpu-arch=&lt;value&gt; CUDA GPU architecture (e.g. sm_35).  May be specified more than once.\n  --cuda-host-only        Compile CUDA code for host only.  Has no effect on non-CUDA compilations.\n  --cuda-include-ptx=&lt;value&gt;\n                          Include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --cuda-noopt-device-debug\n                          Enable device-side debug info generation. Disables ptxas optimizations.\n  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation\n  --cuda-path=&lt;value&gt;     CUDA installation path\n  -cxx-isystem &lt;directory&gt;\n                          Add directory to the C++ SYSTEM include search path\n  -C                      Include comments in preprocessed output\n  -c                      Only run preprocess, compile, and assemble steps\n  -dD                     Print macro definitions in -E mode in addition to normal output\n  -dependency-dot &lt;value&gt; Filename to write DOT-formatted header dependencies to\n  -dependency-file &lt;value&gt;\n                          Filename (or -) to write dependency output to\n  -dI                     Print include directives in -E mode in addition to normal output\n  -dM                     Print macro definitions in -E mode instead of normal output\n  -D &lt;macro&gt;=&lt;value&gt;      Define &lt;macro&gt; to &lt;value&gt; (or 1 if &lt;value&gt; omitted)\n  -emit-ast               Emit Clang AST files for source inputs\n  -emit-llvm              Use the LLVM representation for assembler and object files\n  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang&lt;value&gt;\n                          Trivial automatic variable initialization to zero is only here for benchmarks, it'll eventually be removed, and I'm OK with that because I'm only using it to benchmark\n  -E                      Only run the preprocessor\n  -faddrsig               Emit an address-significance table\n  -faligned-allocation    Enable C++17 aligned allocation functions\n  -fallow-editor-placeholders\n                          Treat editor placeholders as valid source code\n  -fansi-escape-codes     Use ANSI escape codes for diagnostics\n  -fapinotes-cache-path=&lt;directory&gt;\n                          Does nothing; API notes are no longer cached separately from modules\n  -fapinotes-modules      Enable module-based external API notes support\n  -fapinotes-swift-version=&lt;version&gt;\n                          Specify the Swift version to use when filtering API notes\n  -fapinotes              Enable external API notes support\n  -fapple-kext            Use Apple's kernel extensions ABI\n  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling\n  -fapplication-extension Restrict code to those available for App Extensions\n  -fblocks                Enable the 'blocks' language feature\n  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler\n  -fbuild-session-file=&lt;file&gt;\n                          Use the last modification time of &lt;file&gt; as the build session timestamp\n  -fbuild-session-timestamp=&lt;time since Epoch in seconds&gt;\n                          Time when the current build session started\n  -fbuiltin-module-map    Load the clang builtins module map file.\n  -fc++-static-destructors\n                          Enable C++ static destructor registration (the default)\n  -fcf-protection=&lt;value&gt; Instrument control-flow architecture protection. Options: return, branch, full, none.\n  -fcf-protection         Enable cf-protection in 'full' mode\n  -fchar8_t               Enable C++ builtin type char8_t\n  -fclang-abi-compat=&lt;version&gt;\n                          Attempt to match the ABI of Clang &lt;version&gt;\n  -fcolor-diagnostics     Use colors in diagnostics\n  -fcomment-block-commands=&lt;arg&gt;\n                          Treat each comma separated argument in &lt;arg&gt; as a documentation comment block command\n  -fcomplete-member-pointers\n                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fcoroutines-ts         Enable support for the C++ Coroutines TS\n  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis\n  -fcuda-approx-transcendentals\n                          Use approximate transcendental functions\n  -fcuda-flush-denormals-to-zero\n                          Flush denormal floating point values to zero in CUDA device mode.\n  -fcuda-rdc              Generate relocatable device code, also known as separate compilation mode.\n  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces.\n  -fcxx-exceptions        Enable C++ exceptions\n  -fdata-sections         Place each data in its own section (ELF Only)\n  -fdebug-info-for-profiling\n                          Emit extra debug info to make sample profile more accurate.\n  -fdebug-macro           Emit macro debug information\n  -fdebug-prefix-map=&lt;value&gt;\n                          remap file source paths in debug info\n  -fdebug-types-section   Place debug types in their own section (ELF Only)\n  -fdeclspec              Allow __declspec as a keyword\n  -fdelayed-template-parsing\n                          Parse templated function definitions at the end of the translation unit\n  -fdelete-null-pointer-checks\n                          Treat usage of null pointers as undefined behavior.\n  -fdiagnostics-absolute-paths\n                          Print absolute paths in diagnostics\n  -fdiagnostics-hotness-threshold=&lt;number&gt;\n                          Prevent optimization remarks from being output if they do not have at least this profile count\n  -fdiagnostics-parseable-fixits\n                          Print fix-its in machine parseable form\n  -fdiagnostics-print-source-range-info\n                          Print source range spans in numeric form\n  -fdiagnostics-show-hotness\n                          Enable profile hotness information in diagnostic line\n  -fdiagnostics-show-note-include-stack\n                          Display include stacks for diagnostic notes\n  -fdiagnostics-show-option\n                          Print option name with mappable diagnostics\n  -fdiagnostics-show-template-tree\n                          Print a template comparison tree for differing templates\n  -fdigraphs              Enable alternative token representations '&lt;:', ':&gt;', '&lt;%', '%&gt;', '%:', '%:%:' (default)\n  -fdiscard-value-names   Discard value names in LLVM IR\n  -fdollars-in-identifiers\n                          Allow '$' in identifiers\n  -fdouble-square-bracket-attributes\n                          Enable '[[]]' attributes in all C and C++ language modes\n  -fdwarf-exceptions      Use DWARF style exceptions\n  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker\n  -fembed-bitcode=&lt;option&gt;\n                          Embed LLVM bitcode (option: off, all, bitcode, marker)\n  -fembed-bitcode         Embed LLVM IR bitcode as data\n  -femit-all-decls        Emit all declarations, even if unused\n  -femulated-tls          Use emutls functions to access thread_local variables\n  -fenable-matrix         Enable matrix data type and related builtin functions\n  -fexceptions            Enable support for exception handling\n  -fexperimental-isel     Enables the experimental global instruction selector\n  -fexperimental-new-pass-manager\n                          Enables an experimental new pass manager in LLVM.\n  -ffast-math             Allow aggressive, lossy floating-point optimizations\n  -ffine-grained-bitfield-accesses\n                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.\n  -ffixed-point           Enable fixed point types\n  -ffixed-r19             Reserve register r19 (Hexagon only)\n  -ffixed-r9              Reserve the r9 register (ARM only)\n  -ffixed-x18             Reserve the x18 register (AArch64 only)\n  -ffixed-x20             Reserve the x20 register (AArch64 only)\n  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization\n  -fforce-enable-int128   Enable support for int128_t type\n  -ffp-contract=&lt;value&gt;   Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)\n  -ffreestanding          Assert that the compilation takes place in a freestanding environment\n  -ffunction-sections     Place each function in its own section (ELF Only)\n  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard\n  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime\n  -fgnu89-inline          Use the gnu89 inline semantics\n  -fimplicit-module-maps  Implicitly search the file system for module map files.\n  -finline-functions      Inline suitable functions\n  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline\n  -finstrument-function-entry-bare\n                          Instrument function entry only, after inlining, without arguments to the instrumentation call\n  -finstrument-functions-after-inlining\n                          Like -finstrument-functions, but insert the calls after inlining\n  -finstrument-functions  Generate calls to instrument function entry and exit\n  -fintegrated-as         Enable the integrated assembler\n  -flto-jobs=&lt;value&gt;      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)\n  -flto=&lt;value&gt;           Set LTO mode to either 'full' or 'thin'\n  -flto                   Enable LTO in 'full' mode\n  -fmath-errno            Require math functions to indicate errors by setting errno\n  -fmax-type-align=&lt;value&gt;\n                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment\n  -fmerge-all-constants   Allow merging of constants\n  -fmodule-file=[&lt;name&gt;=]&lt;file&gt;\n                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.\n  -fmodule-map-file=&lt;file&gt;\n                          Load this module map file\n  -fmodule-name=&lt;name&gt;    Specify the name of the module to build\n  -fmodules-cache-path=&lt;directory&gt;\n                          Specify the module cache path\n  -fmodules-decluse       Require declaration of modules used within a module\n  -fmodules-disable-diagnostic-validation\n                          Disable validation of the diagnostic options when loading the module\n  -fmodules-ignore-macro=&lt;value&gt;\n                          Ignore the definition of the given macro when building and loading modules\n  -fmodules-prune-after=&lt;seconds&gt;\n                          Specify the interval (in seconds) after which a module file will be considered unused\n  -fmodules-prune-interval=&lt;seconds&gt;\n                          Specify the interval (in seconds) between attempts to prune the module cache\n  -fmodules-search-all    Search even non-imported modules to resolve references\n  -fmodules-strict-decluse\n                          Like -fmodules-decluse but requires all headers to be in modules\n  -fmodules-ts            Enable support for the C++ Modules TS\n  -fmodules-user-build-path &lt;directory&gt;\n                          Specify the module user build path\n  -fmodules-validate-once-per-build-session\n                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session\n  -fmodules-validate-system-headers\n                          Validate the system headers that a module depends on when loading the module\n  -fmodules               Enable the 'modules' language feature\n  -fms-compatibility-version=&lt;value&gt;\n                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fms-compatibility      Enable full Microsoft Visual C++ compatibility\n  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler\n  -fmsc-version=&lt;value&gt;   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fnew-alignment=&lt;align&gt; Specifies the largest alignment guaranteed by '::operator new(size_t)'\n  -fno-access-control     Disable C++ access control\n  -fno-addrsig            Don't emit an address-significance table\n  -fno-apinotes-modules   Disable module-based external API notes support\n  -fno-apinotes           Disable external API notes support\n  -fno-assume-sane-operator-new\n                          Don't assume that C++'s global operator new can't alias any pointer\n  -fno-autolink           Disable generation of linker directives for automatic library linking\n  -fno-builtin-&lt;value&gt;    Disable implicit builtin knowledge of a specific function\n  -fno-builtin            Disable implicit builtin knowledge of functions\n  -fno-c++-static-destructors\n                          Disable C++ static destructor registration\n  -fno-char8_t            Disable C++ builtin type char8_t\n  -fno-common             Compile common globals like normal definitions\n  -fno-complete-member-pointers\n                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings\n  -fno-coverage-mapping   Disable code coverage analysis\n  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash\n  -fno-debug-info-for-profiling\n                          Do not emit extra debug info for sample profiler.\n  -fno-debug-macro        Do not emit macro debug information\n  -fno-declspec           Disallow __declspec as a keyword\n  -fno-delayed-template-parsing\n                          Disable delayed template parsing\n  -fno-delete-null-pointer-checks\n                          Do not treat usage of null pointers as undefined behavior.\n  -fno-diagnostics-fixit-info\n                          Do not include fixit information in diagnostics\n  -fno-digraphs           Disallow alternative token representations '&lt;:', ':&gt;', '&lt;%', '%&gt;', '%:', '%:%:'\n  -fno-discard-value-names\n                          Do not discard value names in LLVM IR\n  -fno-dollars-in-identifiers\n                          Disallow '$' in identifiers\n  -fno-double-square-bracket-attributes\n                          Disable '[[]]' attributes in all C and C++ language modes\n  -fno-elide-constructors Disable C++ copy constructor elision\n  -fno-elide-type         Do not elide types when printing diagnostics\n  -fno-experimental-isel  Disables the experimental global instruction selector\n  -fno-experimental-new-pass-manager\n                          Disables an experimental new pass manager in LLVM.\n  -fno-fine-grained-bitfield-accesses\n                          Use large-integer access for consecutive bitfield runs.\n  -fno-fixed-point        Disable fixed point types\n  -fno-force-enable-int128\n                          Disable support for int128_t type\n  -fno-gnu-inline-asm     Disable GNU style inline asm\n  -fno-integrated-as      Disable the integrated assembler\n  -fno-jump-tables        Do not use jump tables for lowering switches\n  -fno-lax-vector-conversions\n                          Disallow implicit conversions between vectors with a different number of elements or different element types\n  -fno-lto                Disable LTO mode (default)\n  -fno-merge-all-constants\n                          Disallow merging of constants\n  -fno-objc-infer-related-result-type\n                          do not infer Objective-C related result type based on method family\n  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators\n  -fno-plt                Do not use the PLT to make function calls\n  -fno-preserve-as-comments\n                          Do not preserve comments in inline assembly\n  -fno-profile-generate   Disable generation of profile instrumentation.\n  -fno-profile-instr-generate\n                          Disable generation of profile instrumentation.\n  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization\n  -fno-register-global-dtors-with-atexit\n                          Don't use atexit or __cxa_atexit to register global destructors\n  -fno-reroll-loops       Turn off loop reroller\n  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags\n  -fno-rtti-data          Control emission of RTTI data\n  -fno-rtti               Disable generation of rtti information\n  -fno-sanitize-address-poison-class-member-array-new-cookie\n                          Disable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fno-sanitize-address-use-after-scope\n                          Disable use-after-scope detection in AddressSanitizer\n  -fno-sanitize-blacklist Don't use blacklist file for sanitizers\n  -fno-sanitize-cfi-cross-dso\n                          Disable control flow integrity (CFI) checks for cross-DSO calls.\n  -fno-sanitize-coverage=&lt;value&gt;\n                          Disable specified features of coverage instrumentation for Sanitizers\n  -fno-sanitize-memory-track-origins\n                          Disable origins tracking in MemorySanitizer\n  -fno-sanitize-memory-use-after-dtor\n                          Disable use-after-destroy detection in MemorySanitizer\n  -fno-sanitize-recover=&lt;value&gt;\n                          Disable recovery for specified sanitizers\n  -fno-sanitize-stats     Disable sanitizer statistics gathering.\n  -fno-sanitize-thread-atomics\n                          Disable atomic operations instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-func-entry-exit\n                          Disable function entry/exit instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-memory-access\n                          Disable memory access instrumentation in ThreadSanitizer\n  -fno-sanitize-trap=&lt;value&gt;\n                          Disable trapping for specified sanitizers\n  -fno-short-wchar        Force wchar_t to be an unsigned int\n  -fno-show-column        Do not include column number on diagnostics\n  -fno-show-source-location\n                          Do not include source location information with diagnostics\n  -fno-signed-char        Char is unsigned\n  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros\n  -fno-spell-checking     Disable spell-checking\n  -fno-stack-check        Disable stack checking\n  -fno-stack-protector    Disable the use of stack protectors\n  -fno-stack-size-section Don't emit section containing metadata on function stack sizes\n  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary\n  -fno-strict-float-cast-overflow\n                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions\n  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe\n  -fno-trigraphs          Do not process trigraph sequences\n  -fno-unroll-loops       Turn off loop unroller\n  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors\n  -fno-use-init-array     Don't use .init_array instead of .ctors\n  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc\n  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers\n  -fobjc-exceptions       Enable Objective-C exceptions\n  -fobjc-runtime=&lt;value&gt;  Specify the target Objective-C runtime kind and version\n  -fobjc-weak             Enable ARC-style weak references in Objective-C\n  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.\n  -fopenmp-targets=&lt;value&gt;\n                          Specify comma-separated list of triples OpenMP offloading targets to be supported\n  -fopenmp                Parse OpenMP pragmas and generate parallel code.\n  -foptimization-record-file=&lt;value&gt;\n                          Specify the file name of any generated YAML optimization record\n  -fpack-struct=&lt;value&gt;   Specify the default maximum struct packing alignment\n  -fpascal-strings        Recognize and construct Pascal-style string literals\n  -fpcc-struct-return     Override the default ABI to return all structs on the stack\n  -fplt                   Use the PLT to make function calls\n  -fplugin=&lt;dsopath&gt;      Load the named plugin (dynamic shared object)\n  -fprebuilt-module-path=&lt;directory&gt;\n                          Specify the prebuilt module path\n  -fprofile-generate=&lt;directory&gt;\n                          Generate instrumented code to collect execution counts into &lt;directory&gt;/default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate=&lt;file&gt;\n                          Generate instrumented code to collect execution counts into &lt;file&gt; (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate\n                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)\n  -fprofile-instr-use=&lt;value&gt;\n                          Use instrumentation data for profile-guided optimization\n  -fprofile-sample-accurate\n                          Specifies that the sample profile is accurate\n  -fprofile-sample-use=&lt;value&gt;\n                          Enable sample-based profile guided optimizations\n  -fprofile-use=&lt;pathname&gt;\n                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from &lt;pathname&gt;/default.profdata. Otherwise, it reads from file &lt;pathname&gt;.\n  -fptrauth-calls         Enable signing and authentication of all indirect calls\n  -fptrauth-intrinsics    Enable pointer-authentication intrinsics\n  -fptrauth-returns       Enable signing and authentication of return addresses\n  -fptrauth-soft          Enable software lowering of pointer authentication\n  -freciprocal-math       Allow division operations to be reassociated\n  -freg-struct-return     Override the default ABI to return small structs in registers\n  -fregister-global-dtors-with-atexit\n                          Use atexit or __cxa_atexit to register global destructors\n  -frelaxed-template-template-args\n                          Enable C++17 relaxed template template argument matching\n  -freroll-loops          Turn on loop reroller\n  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags\n  -fsanitize-address-field-padding=&lt;value&gt;\n                          Level of field padding for AddressSanitizer\n  -fsanitize-address-globals-dead-stripping\n                          Enable linker dead stripping of globals in AddressSanitizer\n  -fsanitize-address-poison-class-member-array-new-cookie\n                          Enable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fsanitize-address-use-after-scope\n                          Enable use-after-scope detection in AddressSanitizer\n  -fsanitize-blacklist=&lt;value&gt;\n                          Path to blacklist file for sanitizers\n  -fsanitize-cfi-cross-dso\n                          Enable control flow integrity (CFI) checks for cross-DSO calls.\n  -fsanitize-cfi-icall-generalize-pointers\n                          Generalize pointers in CFI indirect call type signature checks\n  -fsanitize-coverage=&lt;value&gt;\n                          Specify the type of coverage instrumentation for Sanitizers\n  -fsanitize-memory-track-origins=&lt;value&gt;\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-track-origins\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-use-after-dtor\n                          Enable use-after-destroy detection in MemorySanitizer\n  -fsanitize-recover=&lt;value&gt;\n                          Enable recovery for specified sanitizers\n  -fsanitize-stats        Enable sanitizer statistics gathering.\n  -fsanitize-thread-atomics\n                          Enable atomic operations instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-func-entry-exit\n                          Enable function entry/exit instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-memory-access\n                          Enable memory access instrumentation in ThreadSanitizer (default)\n  -fsanitize-trap=&lt;value&gt; Enable trapping for specified sanitizers\n  -fsanitize-undefined-strip-path-components=&lt;number&gt;\n                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.\n  -fsanitize=&lt;check&gt;      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks\n  -fsave-optimization-record\n                          Generate a YAML optimization record file\n  -fseh-exceptions        Use SEH style exceptions\n  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values\n  -fshort-wchar           Force wchar_t to be a short unsigned int\n  -fshow-overloads=&lt;value&gt;\n                          Which overload candidates to show when overload resolution fails: best|all; defaults to all\n  -fsized-deallocation    Enable C++14 sized global deallocation functions\n  -fsjlj-exceptions       Use SjLj style exceptions\n  -fslp-vectorize         Enable the superword-level parallelism vectorization passes\n  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n  -fstack-check           Enable stack checking\n  -fstack-protector-all   Force the usage of stack protectors for all functions\n  -fstack-protector-strong\n                          Use a strong heuristic to apply stack protectors to functions\n  -fstack-protector       Enable stack protectors for functions potentially vulnerable to stack smashing\n  -fstack-size-section    Emit section containing metadata on function stack sizes\n  -fstandalone-debug      Emit full debug info for all types used by the program\n  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range\n  -fstrict-float-cast-overflow\n                          Assume that overflowing float-to-int casts are undefined (default)\n  -fstrict-return         Always treat control flow paths that fall off the end of a non-void function as unreachable\n  -fstrict-vtable-pointers\n                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects\n  -fthinlto-index=&lt;value&gt; Perform ThinLTO importing using provided function summary index\n  -ftrap-function=&lt;value&gt; Issue call to specified function rather than a trap instruction\n  -ftrapv-handler=&lt;function name&gt;\n                          Specify the function to be called on overflow\n  -ftrapv                 Trap on integer overflow\n  -ftrigraphs             Process trigraph sequences\n  -ftrivial-auto-var-init=&lt;value&gt;\n                          Initialize trivial automatic stack variables: uninitialized (default) | pattern\n  -funique-section-names  Use unique names for text and data sections (ELF Only)\n  -funroll-loops          Turn on loop unroller\n  -fuse-init-array        Use .init_array instead of .ctors\n  -fveclib=&lt;value&gt;        Use the given vector functions library\n  -fvectorize             Enable the loop vectorization passes\n  -fvisibility-inlines-hidden\n                          Give inline C++ member functions hidden visibility by default\n  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default\n  -fvisibility=&lt;value&gt;    Set the default symbol visibility for all global declarations\n  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto\n  -fwrapv                 Treat signed integer overflow as two's complement\n  -fwritable-strings      Store string literals as writable data\n  -fxray-always-emit-customevents\n                          Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-emit-typedevents\n                          Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-instrument= &lt;value&gt;\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.\n  -fxray-attr-list= &lt;value&gt;\n                          Filename defining the list of functions/types for imbuing XRay attributes.\n  -fxray-instruction-threshold= &lt;value&gt;\n                          Sets the minimum function size to instrument with XRay\n  -fxray-instrumentation-bundle= &lt;value&gt;\n                          Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is 'all'.\n  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit\n  -fxray-link-deps        Tells clang to add the link dependencies for XRay.\n  -fxray-modes= &lt;value&gt;   List of modes to link in by default into XRay instrumented binaries.\n  -fxray-never-instrument= &lt;value&gt;\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.\n  -fzvector               Enable System z vector language extension\n  -F &lt;value&gt;              Add directory to framework include search path\n  --gcc-toolchain=&lt;value&gt; Use the gcc toolchain at the given directory\n  -gcodeview              Generate CodeView debug information\n  -gdwarf-2               Generate source-level debug information with dwarf version 2\n  -gdwarf-3               Generate source-level debug information with dwarf version 3\n  -gdwarf-4               Generate source-level debug information with dwarf version 4\n  -gdwarf-5               Generate source-level debug information with dwarf version 5\n  -gembed-source          Embed source text in DWARF debug sections\n  -gline-tables-only      Emit debug line number tables only\n  -gmodules               Generate debug info with external references to clang modules or precompiled headers\n  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections\n  -gz=&lt;value&gt;             DWARF debug sections compression type\n  -gz                     DWARF debug sections compression type\n  -G &lt;size&gt;               Put objects of at most &lt;size&gt; bytes into small data section (MIPS / Hexagon)\n  -g                      Generate source-level debug information\n  --help-hidden           Display help for hidden options\n  -help                   Display available options\n  --hip-device-lib-path=&lt;value&gt;\n                          HIP device library path\n  --hip-device-lib=&lt;value&gt;\n                          HIP device library\n  --hip-link              Link clang-offload-bundler bundles for HIP\n  -H                      Show header includes and nesting depth\n  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path\n  -iapinotes-modules &lt;directory&gt;\n                          Add directory to the API notes search path referenced by module name\n  -idirafter &lt;value&gt;      Add directory to AFTER include search path\n  -iframeworkwithsysroot &lt;directory&gt;\n                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot\n  -iframework &lt;value&gt;     Add directory to SYSTEM framework search path\n  -imacros &lt;file&gt;         Include macros from file before parsing\n  -include-pch &lt;file&gt;     Include precompiled header file\n  -include &lt;file&gt;         Include file before parsing\n  -index-header-map       Make the next included directory (-I or -F) an indexer header map\n  -index-ignore-system-symbols\n                          Ignore symbols from system headers\n  -index-record-codegen-name\n                          Record the codegen name for symbols\n  -index-store-path &lt;value&gt;\n                          Enable indexing with the specified data store path\n  -iprefix &lt;dir&gt;          Set the -iwithprefix/-iwithprefixbefore prefix\n  -iquote &lt;directory&gt;     Add directory to QUOTE include search path\n  -isysroot &lt;dir&gt;         Set the system root directory (usually /)\n  -isystem-after &lt;directory&gt;\n                          Add directory to end of the SYSTEM include search path\n  -isystem &lt;directory&gt;    Add directory to SYSTEM include search path\n  -ivfsoverlay &lt;value&gt;    Overlay the virtual filesystem described by file over the real file system\n  -iwithprefixbefore &lt;dir&gt;\n                          Set directory to include search path with prefix\n  -iwithprefix &lt;dir&gt;      Set directory to SYSTEM include search path with prefix\n  -iwithsysroot &lt;directory&gt;\n                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot\n  -I &lt;dir&gt;                Add directory to include search path\n  -L &lt;dir&gt;                Add directory to library search path\n  -mabicalls              Enable SVR4-style position-independent code (Mips only)\n  -malign-double          Align doubles to two words in structs (x86 only)\n  -mbackchain             Link stack frames through backchain on System Z\n  -mcrc                   Allow use of CRC instructions (ARM/Mips only)\n  -MD                     Write a depfile containing user and system headers\n  -meabi &lt;value&gt;          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)\n  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G &lt;size&gt; threshold (MIPS)\n  -mexecute-only          Disallow generation of data access to code sections (ARM only)\n  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G &lt;size&gt; threshold (MIPS)\n  -mfentry                Insert calls to fentry at function entry (x86 only)\n  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mfp32                  Use 32-bit floating point registers (MIPS only)\n  -mfp64                  Use 64-bit floating point registers (MIPS only)\n  -MF &lt;file&gt;              Write depfile output from -MMD, -MD, -MM, or -M to &lt;file&gt;\n  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64 only)\n  -mglobal-merge          Enable merging of globals\n  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -MG                     Add missing headers to depfile\n  -mhvx-length=&lt;value&gt;    Set Hexagon Vector Length\n  -mhvx=&lt;value&gt;           Enable Hexagon Vector eXtensions\n  -mhvx                   Enable Hexagon Vector eXtensions\n  -miamcu                 Use Intel MCU ABI\n  --migrate               Run the migrator\n  -mincremental-linker-compatible\n                          (integrated-as) Emit an object file which can be used with an incremental linker\n  -mindirect-jump=&lt;value&gt; Change indirect jump instructions to inhibit speculation\n  -mios-version-min=&lt;value&gt;\n                          Set iOS deployment target\n  -MJ &lt;value&gt;             Write a compilation database entry per input\n  -mllvm &lt;value&gt;          Additional arguments to forward to LLVM's option processing\n  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)\n  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.\n  -mmacosx-version-min=&lt;value&gt;\n                          Set Mac OS X deployment target\n  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.\n  -MMD                    Write a depfile containing user headers\n  -mmemops                Enable generation of memop instructions\n  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard\n  -mmsa                   Enable MSA ASE (MIPS only)\n  -mmt                    Enable MT ASE (MIPS only)\n  -MM                     Like -MMD, but also implies -E and writes to stdout by default\n  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)\n  -mno-crc                Disallow use of CRC instructions (Mips only)\n  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G &lt;size&gt; threshold (MIPS)\n  -mno-execute-only       Allow generation of data access to code sections (ARM only)\n  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G &lt;size&gt; threshold (MIPS)\n  -mno-fix-cortex-a53-835769\n                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mno-global-merge       Disable merging of globals\n  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -mno-hvx                Disable Hexagon Vector eXtensions\n  -mno-implicit-float     Don't generate implicit floating point instructions\n  -mno-incremental-linker-compatible\n                          (integrated-as) Emit an object file which cannot be used with an incremental linker\n  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)\n  -mno-long-calls         Restore the default behaviour of not generating long calls\n  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.\n  -mno-memops             Disable generation of memop instructions\n  -mno-movt               Disallow use of movt/movw pairs (ARM only)\n  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard\n  -mno-msa                Disable MSA ASE (MIPS only)\n  -mno-mt                 Disable MT ASE (MIPS only)\n  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.\n  -mno-nvj                Disable generation of new-value jumps\n  -mno-nvs                Disable generation of new-value stores\n  -mno-outline            Disable function outlining (AArch64 only)\n  -mno-packets            Disable generation of instruction packets\n  -mno-relax              Disable linker relaxation\n  -mno-restrict-it        Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode\n  -mno-stack-arg-probe    Disable stack probes which are enabled by default\n  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)\n  -mno-xnack              Disable XNACK (AMDGPU only)\n  -mnocrc                 Disallow use of CRC instructions (ARM only)\n  -mnvj                   Enable generation of new-value jumps\n  -mnvs                   Enable generation of new-value stores\n  -module-dependency-dir &lt;value&gt;\n                          Directory to dump module dependencies to\n  -module-file-info       Provide information about a particular module file\n  -momit-leaf-frame-pointer\n                          Omit frame pointer setup for leaf functions\n  -moutline               Enable function outlining (AArch64 only)\n  -mpackets               Enable generation of instruction packets\n  -mpie-copy-relocations  Use copy relocations support for PIE builds\n  -mprefer-vector-width=&lt;value&gt;\n                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.\n  -MP                     Create phony target for each dependency (other than main file)\n  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility\n  -MQ &lt;value&gt;             Specify name of main file output to quote in depfile\n  -mrelax-all             (integrated-as) Relax all machine instructions\n  -mrelax                 Enable linker relaxation\n  -mrestrict-it           Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.\n  -mrtd                   Make StdCall calling convention the default\n  -msoft-float            Use software floating point\n  -mstack-alignment=&lt;value&gt;\n                          Set the stack alignment\n  -mstack-arg-probe       Enable stack probes\n  -mstack-probe-size=&lt;value&gt;\n                          Set the stack probe size\n  -mstackrealign          Force realign the stack at entry to every function\n  -mthread-model &lt;value&gt;  The thread model to use, e.g. posix, single (posix by default)\n  -mtp=&lt;value&gt;            Read thread pointer from coprocessor register (ARM only)\n  -MT &lt;value&gt;             Specify name of main file output in depfile\n  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)\n  -MV                     Use NMake/Jom format for the depfile\n  -mxnack                 Enable XNACK (AMDGPU only)\n  -M                      Like -MD, but also implies -E and writes to stdout by default\n  --no-cuda-gpu-arch=&lt;value&gt;\n                          Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. 'all' resets the list to its default value.\n  --no-cuda-include-ptx=&lt;value&gt;\n                          Do not include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.\n  --no-system-header-prefix=&lt;prefix&gt;\n                          Treat all #include paths starting with &lt;prefix&gt; as not including a system header.\n  -nobuiltininc           Disable builtin #include directories\n  -nostdinc++             Disable standard #include directories for the C++ standard library\n  -ObjC++                 Treat source input files as Objective-C++ inputs\n  -objcmt-atomic-property Make migration to 'atomic' properties\n  -objcmt-migrate-all     Enable migration to modern ObjC\n  -objcmt-migrate-annotation\n                          Enable migration to property and method annotations\n  -objcmt-migrate-designated-init\n                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods\n  -objcmt-migrate-instancetype\n                          Enable migration to infer instancetype for method result type\n  -objcmt-migrate-literals\n                          Enable migration to modern ObjC literals\n  -objcmt-migrate-ns-macros\n                          Enable migration to NS_ENUM/NS_OPTIONS macros\n  -objcmt-migrate-property-dot-syntax\n                          Enable migration of setter/getter messages to property-dot syntax\n  -objcmt-migrate-property\n                          Enable migration to modern ObjC property\n  -objcmt-migrate-protocol-conformance\n                          Enable migration to add protocol conformance on classes\n  -objcmt-migrate-readonly-property\n                          Enable migration to modern ObjC readonly property\n  -objcmt-migrate-readwrite-property\n                          Enable migration to modern ObjC readwrite property\n  -objcmt-migrate-subscripting\n                          Enable migration to modern ObjC subscripting\n  -objcmt-ns-nonatomic-iosonly\n                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute\n  -objcmt-returns-innerpointer-property\n                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER\n  -objcmt-whitelist-dir-path=&lt;value&gt;\n                          Only modify files with a filename contained in the provided directory path\n  -ObjC                   Treat source input files as Objective-C inputs\n  -o &lt;file&gt;               Write output to &lt;file&gt;\n  -pg                     Enable mcount instrumentation\n  -pipe                   Use pipes between commands, when possible\n  --precompile            Only precompile the input\n  -print-file-name=&lt;file&gt; Print the full library path of &lt;file&gt;\n  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace\n  -print-libgcc-file-name Print the library path for the currently used compiler runtime library (\"libgcc.a\" or \"libclang_rt.builtins.*.a\")\n  -print-prog-name=&lt;name&gt; Print the full program path of &lt;name&gt;\n  -print-resource-dir     Print the resource directory pathname\n  -print-search-dirs      Print the paths used for finding libraries and programs\n  -pthread                Support POSIX threads in generated code\n  --ptxas-path=&lt;value&gt;    Path to ptxas (used for compiling CUDA code)\n  -P                      Disable linemarker output in -E mode\n  -Qn                     Do not emit metadata containing compiler name and version\n  -Qunused-arguments      Don't emit warning for unused driver arguments\n  -Qy                     Emit metadata containing compiler name and version\n  -relocatable-pch        Whether to build a relocatable precompiled header\n  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++\n  -rewrite-objc           Rewrite Objective-C source to C++\n  -Rpass-analysis=&lt;value&gt; Report transformation analysis from optimization passes whose name matches the given POSIX regular expression\n  -Rpass-missed=&lt;value&gt;   Report missed transformations by optimization passes whose name matches the given POSIX regular expression\n  -Rpass=&lt;value&gt;          Report transformations performed by optimization passes whose name matches the given POSIX regular expression\n  -rtlib=&lt;value&gt;          Compiler runtime library to use\n  -R&lt;remark&gt;              Enable the specified remark\n  -save-stats=&lt;value&gt;     Save llvm statistics.\n  -save-stats             Save llvm statistics.\n  -save-temps=&lt;value&gt;     Save intermediate compilation results.\n  -save-temps             Save intermediate compilation results\n  -serialize-diagnostics &lt;value&gt;\n                          Serialize compiler diagnostics to a file\n  -std=&lt;value&gt;            Language standard to compile for\n  -stdlib=&lt;value&gt;         C++ standard library to use\n  --system-header-prefix=&lt;prefix&gt;\n                          Treat all #include paths starting with &lt;prefix&gt; as including a system header.\n  -S                      Only run preprocess and compilation steps\n  -target-variant &lt;value&gt; Generate code that may run on a particular variant of the deployment target\n  --target=&lt;value&gt;        Generate code for the given target\n  -Tbss &lt;addr&gt;            Set starting address of BSS to &lt;addr&gt;\n  -Tdata &lt;addr&gt;           Set starting address of DATA to &lt;addr&gt;\n  -time                   Time individual commands\n  -traditional-cpp        Enable some traditional CPP emulation\n  -trigraphs              Process trigraph sequences\n  -Ttext &lt;addr&gt;           Set starting address of TEXT to &lt;addr&gt;\n  -T &lt;script&gt;             Specify &lt;script&gt; as linker script\n  -undef                  undef all system defines\n  -U &lt;macro&gt;              Undefine macro &lt;macro&gt;\n  --verify-debug-info     Verify the binary representation of debug output\n  -verify-pch             Load and verify that a pre-compiled header file is not stale\n  --version               Print version information\n  -v                      Show commands to run and use verbose output\n  -Wa,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the assembler\n  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED\n  -Wl,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the linker\n  -working-directory &lt;value&gt;\n                          Resolve file paths relative to the specified directory\n  -Wp,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the preprocessor\n  -W&lt;warning&gt;             Enable the specified warning\n  -w                      Suppress all warnings\n  -Xanalyzer &lt;arg&gt;        Pass &lt;arg&gt; to the static analyzer\n  -Xassembler &lt;arg&gt;       Pass &lt;arg&gt; to the assembler\n  -Xclang &lt;arg&gt;           Pass &lt;arg&gt; to the clang compiler\n  -Xcuda-fatbinary &lt;arg&gt;  Pass &lt;arg&gt; to fatbinary invocation\n  -Xcuda-ptxas &lt;arg&gt;      Pass &lt;arg&gt; to the ptxas assembler\n  -Xlinker &lt;arg&gt;          Pass &lt;arg&gt; to the linker\n  -Xopenmp-target=&lt;triple&gt; &lt;arg&gt;\n                          Pass &lt;arg&gt; to the target offloading toolchain identified by &lt;triple&gt;.\n  -Xopenmp-target &lt;arg&gt;   Pass &lt;arg&gt; to the target offloading toolchain.\n  -Xpreprocessor &lt;arg&gt;    Pass &lt;arg&gt; to the preprocessor\n  -x &lt;language&gt;           Treat subsequent input files as having type &lt;language&gt;\n  -z &lt;arg&gt;                Pass -z &lt;arg&gt; to the linker\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}