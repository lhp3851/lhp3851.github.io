{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/beian.png","path":"assets/beian.png","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/wechat_qr.jpg","path":"assets/wechat_qr.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/avatar.jpg","path":"avatar/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/css/dark.css","path":"css/dark.css","modified":1,"renderable":1},{"_id":"themes/archer/source/css/dark.css.map","path":"css/dark.css.map","modified":1,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":1,"renderable":1},{"_id":"themes/archer/source/css/mobile.css.map","path":"css/mobile.css.map","modified":1,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/archer/source/css/style.css.map","path":"css/style.css.map","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/dark.js","path":"scripts/dark.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/dark.js.map","path":"scripts/dark.js.map","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/main.js.LICENSE.txt","path":"scripts/main.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/main.js.map","path":"scripts/main.js.map","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/search.js.LICENSE.txt","path":"scripts/search.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/search.js.map","path":"scripts/search.js.map","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/share.js.map","path":"scripts/share.js.map","modified":1,"renderable":1}],"Cache":[{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1631775930069},{"_id":"themes/archer/.eslintrc.json","hash":"34f6a83be470e97487f8cb623bbb9547e41b53d6","modified":1631775929586},{"_id":"themes/archer/.babelrc","hash":"23dbc7234215ee8799e6a29ca80a1850d00a9ce8","modified":1631775929585},{"_id":"themes/archer/.gitignore","hash":"b5de96e5158df11ad8c49d149f45ec014e18971a","modified":1631775929590},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1631775929587},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1631775929592},{"_id":"themes/archer/.prettierrc.js","hash":"bae1d8dab7bf8b68207386f366e092778940540c","modified":1631775929593},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1631775929594},{"_id":"themes/archer/_config.yml","hash":"ae63db95d7607179287b5183b84abfe776057287","modified":1631775930049},{"_id":"themes/archer/README.md","hash":"fd761e278f8c15cee2c8e709e0048cdbaa57f6ed","modified":1631775929595},{"_id":"themes/archer/gulpfile.js","hash":"ee1ad57aa5113a084091fd86fca2c34e1b9e4b95","modified":1631775930057},{"_id":"themes/archer/webpack.config.js","hash":"0fc48fe70d64f89b8aae34d65defcb6e9e7af535","modified":1631775930252},{"_id":"themes/archer/webpack.prod.js","hash":"a34abc06d6cd8fa4e267069468726322a3656e2b","modified":1631775930254},{"_id":"themes/archer/webpack.dev.js","hash":"7c740341894bd584f72145512a58703bb134ea60","modified":1631775930253},{"_id":"themes/archer/_.git/COMMIT_EDITMSG","hash":"dc67bd5bdd7fa1686806be5878f2ee1a9e346c89","modified":1631775929596},{"_id":"themes/archer/_.git/FETCH_HEAD","hash":"1b0b5c19e9847f014f209fc51fed1dbde2bd4526","modified":1631775929596},{"_id":"themes/archer/package.json","hash":"aace08454f9f0366c11c84b77f7aa61d0d02743b","modified":1631775930140},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1631775930050},{"_id":"themes/archer/_.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1631775929598},{"_id":"themes/archer/_.git/ORIG_HEAD","hash":"07067b8504d9b4eebb03397c8c7316118076e5b5","modified":1631775929599},{"_id":"themes/archer/_.git/config","hash":"6998f51f0cc705be211a46fe87abdcd373a68c70","modified":1631775929601},{"_id":"themes/archer/_.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1631775929602},{"_id":"themes/archer/_.git/index","hash":"b6c13257b682f7d4e39a0beb5f3e98a0872df73f","modified":1631775929618},{"_id":"themes/archer/_.git/packed-refs","hash":"5a7c8ae0fafce4b82ae11c0417e962f1b6aef35e","modified":1631775930024},{"_id":"themes/archer/_.git/shallow","hash":"7cc8f9c837554fcb2770d586f77954648665b784","modified":1631775930048},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1631775930051},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1631775930052},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"3f78e34331c4ad8457ee832e9b69d36871986d95","modified":1631775930053},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1631775930058},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1631775930059},{"_id":"themes/archer/layout/404.ejs","hash":"9137c0b1153ca8cd32e60a38fd79b7e4b91c8bf4","modified":1631775930061},{"_id":"themes/archer/layout/about.ejs","hash":"748786bebad03b1ef79c551f26522fa2bee1b9dd","modified":1631775930083},{"_id":"themes/archer/layout/index.ejs","hash":"45603895c143e939f976454737e34e12689587cd","modified":1631775930086},{"_id":"themes/archer/layout/layout.ejs","hash":"8c5907fe96dc2de520add5a405537b972addfb79","modified":1631775930087},{"_id":"themes/archer/layout/post.ejs","hash":"944daff66345d99bf30f80f90319693fb97056db","modified":1631775930090},{"_id":"themes/archer/layout/site-meta.ejs","hash":"3da84db48d552d3d335c853a00fc9a7b082e14ec","modified":1631775930133},{"_id":"themes/archer/source/.DS_Store","hash":"901dcf0406b58d3fa17caa5561fbb00e0bf9c54c","modified":1627456794575},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1631775929587},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1631775929588},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1631775929589},{"_id":"themes/archer/_.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1631775929606},{"_id":"themes/archer/_.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1631775929607},{"_id":"themes/archer/_.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1631775929608},{"_id":"themes/archer/_.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1631775929608},{"_id":"themes/archer/_.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1631775929610},{"_id":"themes/archer/_.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1631775929612},{"_id":"themes/archer/_.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1631775929614},{"_id":"themes/archer/_.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1631775929613},{"_id":"themes/archer/_.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1631775929615},{"_id":"themes/archer/_.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1631775929616},{"_id":"themes/archer/_.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1631775929617},{"_id":"themes/archer/_.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1631775929616},{"_id":"themes/archer/_.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1631775929617},{"_id":"themes/archer/_.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1631775929620},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"c7bf50dd6e60fd8e8dfbeab9960172359af7307e","modified":1631775930062},{"_id":"themes/archer/_.git/logs/HEAD","hash":"96a9ae51c1cc5cead7afda6564f5c5aeb001bfcc","modified":1627613853556},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"4e6091b81f7f327cffee6275174c52918cd1789a","modified":1631775930062},{"_id":"themes/archer/layout/_partial/base-footer-fixed.ejs","hash":"e4dbde6594c0c2d1c5de71ddf968be0879ceddb7","modified":1631775930063},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"d8f4236166d058421c2e4ff00660be75a3494704","modified":1631775930064},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"083dbb7a84a5d41737b55e4c73f130e8b21775a8","modified":1631775930064},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"57d1ae0fd6f9f1ab52a64c44a8ae17ee71de22ef","modified":1631775930065},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"d046322674052b0667775dca0886f14e0d812897","modified":1631775930066},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"00330669a44bcbcd794499a462308e86ba416533","modified":1631775930067},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"0190f06c2f0345cec00eba2074bbfd1b56a7fdc9","modified":1631775930068},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"c90bace4bc584a3ecd591a5bfc9ab13db25d6f97","modified":1631775930069},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"7b8b078b1c1e5b216e46b32a0cab67330c92c734","modified":1631775930076},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1631775930141},{"_id":"themes/archer/source/assets/beian.png","hash":"a99df13e8eb11db86edebf6e5ac246eb59f4b3c4","modified":1631775930141},{"_id":"themes/archer/source/assets/.DS_Store","hash":"6855542ff9e6e6725abe81c178c655edab54b297","modified":1627456864054},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1632293185087},{"_id":"themes/archer/source/assets/favicon.ico","hash":"7628d7a1d9c55b26bb6261da027eff00f7cf2b7b","modified":1631775930142},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1631775930142},{"_id":"themes/archer/source/assets/wechat_qr.jpg","hash":"2714bee173c8e78e2ffd7d04bae9dd36e0058032","modified":1631775930143},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1632293185087},{"_id":"themes/archer/source/avatar/avatar.jpg","hash":"bf10362b5f6a970423c103cc380d7eabcc29d1ff","modified":1631775930143},{"_id":"themes/archer/source/css/dark.css","hash":"f4ce28cfaa1b80ab4f573c08eb32ae7aa9212304","modified":1631775930146},{"_id":"themes/archer/source/css/dark.css.map","hash":"7c29f49c57186d5fd6210095bda6285dfd9837da","modified":1631775930147},{"_id":"themes/archer/source/css/mobile.css","hash":"0733eb86d1889746a47a9032ec8b67c7bdd29548","modified":1631775930148},{"_id":"themes/archer/source/css/mobile.css.map","hash":"b533eb1869c721246c49109f34df3c7404c65bc1","modified":1631775930149},{"_id":"themes/archer/source/css/style.css","hash":"80af49529ae479c3e08bb3e87cb3ce8d9900c6a9","modified":1631775930150},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1631775930155},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1631775930156},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"4c69aeb4e4f355912503d1c460e8e7aa6ea6963e","modified":1631775930182},{"_id":"themes/archer/source/scripts/dark.js","hash":"a96e728bda9b341190dd80c9392a5113225b8ab6","modified":1631775930183},{"_id":"themes/archer/source/scripts/dark.js.map","hash":"3438723e916b0747d1e8505683788060747170e4","modified":1631775930184},{"_id":"themes/archer/source/scripts/main.js.LICENSE.txt","hash":"0d926638cb6182c9d0e5b33d09ed0cc2c7b6ef15","modified":1631775930186},{"_id":"themes/archer/source/scripts/search.js.LICENSE.txt","hash":"f98b4df48bbadc7ab1e8f9fc4618b86d33bdf44f","modified":1631775930193},{"_id":"themes/archer/source/scripts/share.js","hash":"468359fbd0253d737f0818a6e03931c7db6d1367","modified":1631775930204},{"_id":"themes/archer/src/js/dark.js","hash":"e1e41b3711b00be8241707b2217401464517f9f7","modified":1631775930207},{"_id":"themes/archer/src/js/fancybox.js","hash":"6dfc8015d6000c76806424876f5472f39e5485af","modified":1631775930207},{"_id":"themes/archer/src/js/initSidebar.js","hash":"c9c030a451ed394934c1858c7d55ec5a7b588305","modified":1631775930209},{"_id":"themes/archer/src/js/scroll.js","hash":"91b924e8b1b5b8d50cd4b12c2b7f0bff27ac1848","modified":1631775930210},{"_id":"themes/archer/src/js/init.js","hash":"23dce8a373965b2867e61b0c894e1da5f98a763e","modified":1631775930208},{"_id":"themes/archer/src/js/main.js","hash":"6318facd6dcec6192d431a787689a85fd061cba1","modified":1631775930209},{"_id":"themes/archer/src/js/mobile.js","hash":"729b070412852571c5f4133b5fbb97c151b55ed1","modified":1631775930210},{"_id":"themes/archer/src/js/search.js","hash":"675bb310a8c385c7cdf53782a045b9210ddd77a3","modified":1631775930211},{"_id":"themes/archer/src/js/share.js","hash":"298043be0e0bc38770f981ed130dc928881bfa57","modified":1631775930212},{"_id":"themes/archer/src/js/sidebar.js","hash":"3f917f2fb5c5b9db1660458899506547b1767746","modified":1631775930212},{"_id":"themes/archer/src/js/tag.js","hash":"f785fe63b9ea27acb2c5300c6d873876f84ac086","modified":1631775930213},{"_id":"themes/archer/src/js/toc.js","hash":"489e9ed14dfc1b2e3d0e29e2081c51e91beece69","modified":1631775930213},{"_id":"themes/archer/src/js/util.js","hash":"1cf38f8e3e3f46d885d4fa519d8b14f5b3a44cbf","modified":1631775930214},{"_id":"themes/archer/src/js/browser.js","hash":"c56e0094a04d6f20564f8f0da1496cb7631d4dc2","modified":1631775930206},{"_id":"themes/archer/src/scss/_common.scss","hash":"3022bdb9025a1383010bd7a5e0d3640977159b0c","modified":1631775930215},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"78da2632e7150baa0fd1f6d04fc59ca5e304903d","modified":1631775930224},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1631775930229},{"_id":"themes/archer/src/scss/_variables.scss","hash":"9c11e87ce97cd1f7a687a9747cb1f62944c6af1b","modified":1631775930249},{"_id":"themes/archer/src/scss/dark.scss","hash":"739af46f0ef8c0c89c3e78ec577e844678f737b5","modified":1631775930249},{"_id":"themes/archer/src/scss/mobile.scss","hash":"82453efca84b002c6f3651e7b3e4cbd062f41cef","modified":1631775930250},{"_id":"themes/archer/src/scss/style.scss","hash":"e208f8a12086e862b30c7f55ea1becb1c193afb9","modified":1631775930251},{"_id":"themes/archer/_.git/objects/3b/b7084eaf93a31ca58d0b7ba40e1894effa3770","hash":"b68976cdcc3626537d003992b6d67e4dce0acea8","modified":1631775929621},{"_id":"themes/archer/_.git/objects/02/78c304b7f648ec69adf48330852edd2ee09341","hash":"24d7498fbfc8f36b428eea28ff3101b2ec4732e5","modified":1631775929620},{"_id":"themes/archer/_.git/objects/3c/df5643b73a1fa14d9f1a80d51b613fcb4005c5","hash":"4e2ec303645cfd4470dea38d8ed7a542cd0628c2","modified":1631775929622},{"_id":"themes/archer/_.git/objects/55/cfa43447c5de6c6cdc1993b60b73931ab981f7","hash":"a2e17dc842094f698640c7b6cd9c94124cf5f6e0","modified":1631775929624},{"_id":"themes/archer/_.git/objects/47/47437f415c106e7b4ec5afd4777a269c13042b","hash":"7ed94c0c16fb87e62951942967d4acd9529904e1","modified":1631775929623},{"_id":"themes/archer/_.git/objects/74/5a6154bc48557df674fd7a102854f8626f3492","hash":"f13bb31e4ce6cc4a7c97464c95eb76d73a9f4aba","modified":1631775929626},{"_id":"themes/archer/_.git/objects/a1/f58608a4b6e6c039985a31b33a26d2c7f9a6a9","hash":"dbaa48d9fb77cf67ca4161e889694278cf62df7d","modified":1631775929627},{"_id":"themes/archer/_.git/objects/a2/13b08efeee173ef2bc270ad1f612ce0bfe06dd","hash":"85293f767ff2eeb2c612376ff89c4725297a8edd","modified":1631775929630},{"_id":"themes/archer/_.git/objects/62/1e7fcd719aa1a90c326dfcf3878a4188d84a27","hash":"bb4648545d53da116235e2fbc816cbad111eae07","modified":1631775929625},{"_id":"themes/archer/_.git/objects/d0/6397cc8da03a021a1a89d520aaec7dc53a058c","hash":"45a36a812fe61d835f531a3f66941ae5eabc82bc","modified":1631775929632},{"_id":"themes/archer/_.git/objects/ee/38ffd7cd55acca57b985496a09f0bc11912b71","hash":"1da87221ed1cad2a56e7bb38dd6120b1ecbd9754","modified":1631775929639},{"_id":"themes/archer/_.git/objects/pack/pack-2db5a9e2ba995d40660b0afd8518c1c99455d5de.idx","hash":"ee5880cac824c504b7ee74c2749dd393e1c374f2","modified":1631775929642},{"_id":"themes/archer/_.git/refs/heads/master","hash":"491ad9c65b758dc7f1e569e6a282815276bebfed","modified":1631775930030},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"cc02b3cf9586135d2d7f822c7ad97d81fdf6d4e5","modified":1631775930069},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"0f0612ce9ca5c3dc349153a87fdc9dba5f93c52c","modified":1631775930070},{"_id":"themes/archer/layout/_partial/comment/gitalk.ejs","hash":"840279fd3e21dc1cdb1932fe4d9a3be5f670e764","modified":1631775930071},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"eda79ada5171ed44e4f3ae4d8a345ad2c7adb2df","modified":1631775930072},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"d65d9372fca4b316b94ae511f8ccfb0b92d7b065","modified":1631775930073},{"_id":"themes/archer/layout/_partial/comment/utteranc.ejs","hash":"f4ec58c74e6870b8c22032ad3a3c1ee33e5ec41d","modified":1631775930074},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"24cd7b9e28ceb4b2083ddccce26517de64b35119","modified":1631775930074},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"2f4ef49a74a8d63310af60ecda6d765b8c386ff4","modified":1631775930075},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"e67a7a2f6bcbfd97e95577446872e217e0c48e80","modified":1631775930076},{"_id":"themes/archer/layout/_partial/math/mathjax.ejs","hash":"84c40a07765e95213045e9b9f7a8c9aaa9c69161","modified":1631775930077},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"0473335774025d185dcbaf641496b25a8f33f7af","modified":1631775930078},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"bdf08beebbe454da9d4c55b35efd317d5f222be5","modified":1631775930079},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"6360da867c23b8daa5e34e62c5c5552e2974e360","modified":1631775930080},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"1ab81fdae8f210501471e387add90fb78fb1f577","modified":1631775930081},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"469455994771da166ddecb4839efa9ef28f2775d","modified":1631775930083},{"_id":"themes/archer/_.git/refs/tags/1.0.0","hash":"2fe3c9d3276db4942bc473027ae7a77e61565570","modified":1627613823582},{"_id":"themes/archer/_.git/refs/tags/1.1.0","hash":"bd9d71b26b7206f811dc28a3ee3e98e701999508","modified":1627613823582},{"_id":"themes/archer/_.git/refs/tags/1.4.0","hash":"40d813ccd91e66a5c9a2db9a8d79516fadb8b1b0","modified":1627613823584},{"_id":"themes/archer/_.git/refs/tags/1.3.0","hash":"951643341a28e3f554c651d71dd75e2c14809060","modified":1627613823583},{"_id":"themes/archer/_.git/refs/tags/1.4.1","hash":"406900f154e1a3894a7fb316e0bfb9f202ec6cd2","modified":1627613823584},{"_id":"themes/archer/_.git/refs/tags/1.2.0","hash":"912b782d09b294432c7173bd2367363bad2048fd","modified":1627613823583},{"_id":"themes/archer/_.git/refs/tags/1.4.2","hash":"d1c94afaa1bd71a4436c43f786cffd0e4fc889b7","modified":1627613823585},{"_id":"themes/archer/_.git/refs/tags/1.4.3","hash":"33154e4f6995f692797c6c737c705fc545390897","modified":1627613823586},{"_id":"themes/archer/_.git/refs/tags/1.5.0","hash":"fc85ebaa479239d147a8457f5973e187f1ff7c6c","modified":1627613823586},{"_id":"themes/archer/_.git/refs/tags/1.6.3","hash":"23d7a56bfd90a4619cd7261bb5a3dc1895346e7f","modified":1627613823547},{"_id":"themes/archer/_.git/refs/tags/1.6.2","hash":"7cc8f9c837554fcb2770d586f77954648665b784","modified":1627453104322},{"_id":"themes/archer/src/scss/_dark/_common-dark.scss","hash":"3ad2178f52f07fa15aea616a2a6645488de8b206","modified":1631775930215},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"98d8e090a272909e523f97eef8537d79de9a63a9","modified":1631775930230},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"fd7716d8559a9f58f7caef576c553ca7ba1a85e1","modified":1631775930230},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"e61bfece54d421bc5656e2ae30c7529b67103b85","modified":1631775930232},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"f4a0df86246c97e517a603e1a489c1958817b606","modified":1631775930244},{"_id":"themes/archer/_.git/logs/refs/heads/master","hash":"96a9ae51c1cc5cead7afda6564f5c5aeb001bfcc","modified":1627613853557},{"_id":"themes/archer/_.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1631775930042},{"_id":"themes/archer/_.git/refs/remotes/origin/master","hash":"23d7a56bfd90a4619cd7261bb5a3dc1895346e7f","modified":1631775930048},{"_id":"themes/archer/src/scss/_dark/_partial/_algolia-dark.scss","hash":"02ffb27c54ff48409447ed97954f06467507529f","modified":1631775930216},{"_id":"themes/archer/src/scss/_dark/_partial/_index-page-dark.scss","hash":"10eb7d001cdaa2749153a162dba19908eed2f9c5","modified":1631775930217},{"_id":"themes/archer/src/scss/_dark/_partial/_post-page-dark.scss","hash":"e3239ebab2baf9331a04d0928fc7127ef0763130","modified":1631775930220},{"_id":"themes/archer/src/scss/_partial/_comment/_gitalk.scss","hash":"6c101a73d49bb2ce57f43440f2b3fc13cc52818e","modified":1631775930231},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"13a89e0b2cb983cb26690324bb90c8e5d19b9c55","modified":1631775930245},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"4a9ad89bfce9555b0daac42cc62f8ed81a276a86","modified":1631775930246},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"93cc82cb56663e83e90fbd6fe31ffdd38e694f3b","modified":1631775930247},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"4f56484f59139cef1a690669db46abb3c9c9634c","modified":1631775930248},{"_id":"themes/archer/src/scss/_partial/_partial/_footer-fixed.scss","hash":"1eb918f6c16054ef2b53b9eea60c751ad89bbd55","modified":1631775930233},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"f42b385d70294c255e903b6e3edccb61a291be8b","modified":1631775930234},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"26d7f2ab2549b8dc15e1cb9318b5c41a94b7a5d0","modified":1631775930235},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"14e875d8d92d4161055b2453104d288aff1bbdca","modified":1631775930236},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1631775930237},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"dce5a2675a849bbb707911c45435e3bba5ca0726","modified":1631775930237},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"424c08f4acc3f643567f138ffea7d8337791d2c4","modified":1631775930238},{"_id":"themes/archer/_.git/logs/refs/remotes/origin/HEAD","hash":"b5892a47e61ba0f2f80f27d5064f7d8e68bf76c4","modified":1627453104324},{"_id":"themes/archer/_.git/logs/refs/remotes/origin/master","hash":"04f4e53217a99ca2b43e6313d19fc1deb5497be9","modified":1627613823547},{"_id":"themes/archer/src/scss/_dark/_partial/_comment/_gitalk-dark.scss","hash":"7e2dd323d2b3c3fa8a4f759ccd18f8abdeb9d731","modified":1631775930216},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_footer-dark.scss","hash":"d074a8fef75ba626dd3448cc42290a8c722fd182","modified":1631775930218},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_footer-fixed-dark.scss","hash":"f4e3eb7aa19c1061b5d9df4f6a7745902e5843f2","modified":1631775930218},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_header-dark.scss","hash":"ed815d959a37cccdf9137ace91c68bea8ca922c2","modified":1631775930219},{"_id":"themes/archer/src/scss/_dark/_partial/_partial/_profile-dark.scss","hash":"606f238b7ed1cda86ba5802245e519fe0f338c6e","modified":1631775930220},{"_id":"themes/archer/src/scss/_dark/_partial/_sidebar/_sidebar-dark.scss","hash":"8e77738f83a425eebb00513ee98e487fe71fdc22","modified":1631775930222},{"_id":"themes/archer/src/scss/_dark/_partial/_sidebar/_sidebar-archive-dark.scss","hash":"79b7548214339807ff713f0c7454a227d24d6d0d","modified":1631775930222},{"_id":"themes/archer/src/scss/_dark/_partial/_sidebar/_sidebar-tags-dark.scss","hash":"6621db2ff1182e3cd14286af4b8f3d8c5bd14e2a","modified":1631775930223},{"_id":"themes/archer/src/scss/_dark/_partial/_post/_code-dark.scss","hash":"9ded8203699f816558fd1493a3ce7cf3d38818e9","modified":1631775930221},{"_id":"themes/archer/source/css/style.css.map","hash":"5b828e90b5fca71d92816ccafd0abaa93ee809de","modified":1631775930152},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1631775930155},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1631775930159},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1631775930160},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1631775930163},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"ad886e472b3557f3dc7dfa2bc43468ab8d1cef5b","modified":1631775930181},{"_id":"themes/archer/source/scripts/main.js","hash":"368cc76ba7e895e6adbc79c8a4e3481425267acd","modified":1631775930185},{"_id":"themes/archer/_.git/objects/pack/pack-505068187f6bcf52a01fd309be56269d169744c4.idx","hash":"1a468739751277a240e1dc5357dcbccbcaa768b0","modified":1631775929703},{"_id":"themes/archer/source/scripts/share.js.map","hash":"fdb3d5963555d7a0e17556a005828250b504e40f","modified":1631775930206},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1631775930168},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1631775930179},{"_id":"themes/archer/source/scripts/search.js","hash":"e1cebcb3df101eb50008739443e1a7b121d00b62","modified":1631775930192},{"_id":"themes/archer/source/scripts/main.js.map","hash":"09cff7fee6cce865416b93e735466ad6a4246bc9","modified":1631775930190},{"_id":"themes/archer/package-lock.json","hash":"b7795b8e60311c437a6f46b2b9ec1e43931e0bc5","modified":1631775930139},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1631775930056},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1631775930174},{"_id":"source/tags/index.md","hash":"99c65113753614eaa6d3707ec5a114bcfad98c54","modified":1619576292073},{"_id":"source/about/index.md","hash":"029272b86f607e45013e75e1158badf36057b21e","modified":1619576292072},{"_id":"source/_drafts/gitSubmodule.md","hash":"3a2f0b55dc962af2565aa7330824eb11d3d8f529","modified":1631774550058},{"_id":"source/.DS_Store","hash":"bcf2e3653c5cb9a9a1f3998b12628409cbf87f9c","modified":1614219500384},{"_id":"source/_posts/Invest/HIllHouse.md","hash":"5034ba316ed6eb6fce5f1a9326dc361b263a82c3","modified":1632294067548},{"_id":"source/_posts/.DS_Store","hash":"c6fc0e414923433ed806405ef0e0a41dd3f41921","modified":1627460982762},{"_id":"source/_posts/Invest/index.md","hash":"f663da0abce6749b8be99868e675c168c8186e15","modified":1632293800371},{"_id":"source/_posts/Flutters/.DS_Store","hash":"f99eab481aff79d520ac20a01447f72ee440ee05","modified":1627460973232},{"_id":"source/_posts/Web/.DS_Store","hash":"8f9c8413223d6bc056f1ec0d7c4694b18e423baf","modified":1627460976013},{"_id":"source/_posts/iOS/AppleService.md","hash":"3961c3a6fb657af904999a37b83784daa37e9776","modified":1627541160833},{"_id":"source/_posts/iOS/CodeManager.md","hash":"37f8aa895cada27842c0eb9155aa8ecb6bbe828e","modified":1627541156819},{"_id":"source/_posts/iOS/Blogs&Blogger.md","hash":"cfe37aea1cce38e0f291140e83021e28f3c9a20a","modified":1632293800376},{"_id":"source/_posts/iOS/CodeRestructure.md","hash":"bad742d15fdf18902739be6cd8786cb44ef1e0fe","modified":1627541156819},{"_id":"source/_posts/iOS/Concepts.md","hash":"9265cbbd387c0cabf61a58964b71f57dcccd8292","modified":1627541156824},{"_id":"source/_posts/iOS/Components.md","hash":"e312f09626b02edd1cb6214b63605e00ed82b3f9","modified":1627541156821},{"_id":"source/_posts/iOS/DesignPattern.md","hash":"8e2efaa61ffe7cad565c1228f9632d2373d53f3d","modified":1627541156850},{"_id":"source/_posts/iOS/Events&Responder.md","hash":"b90db59ce3d3aae65b52c41d160d8f4d5c91312f","modified":1627541156862},{"_id":"source/_posts/iOS/Ecosystem.md","hash":"43865ac208fff1d0081870961ca167d6ff01822e","modified":1627541156861},{"_id":"source/_posts/iOS/FrameWorks.md","hash":"ce08bb5976735704ae5ee721a52476ab226822f9","modified":1627541156863},{"_id":"source/_posts/iOS/Guidelines.md","hash":"0dde9668b223aa73b7767e74df3f73d968696113","modified":1627541160821},{"_id":"source/_posts/iOS/MessageDispatch.md","hash":"29c2bb9675c2b3743dbf41dbbc21745d877214a8","modified":1627541160693},{"_id":"source/_posts/iOS/SDK.md","hash":"d6a0b4ee40263723c8003646e228ddc99c55636e","modified":1627541158355},{"_id":"source/_posts/iOS/UnitTest.md","hash":"d09626a48a46a62cf5b3482cfc2cc9fa90099c53","modified":1627541159428},{"_id":"source/_drafts/IMSystems/IMSystemDesign.md","hash":"c1514ad19ddb63cf52b1342902ebd76da33f0dd2","modified":1627541160907},{"_id":"source/_posts/iOS/Architecture.md","hash":"070af7f7fae79a6b85f434ec101c49540932eee6","modified":1632293800376},{"_id":"source/_drafts/Computers/Interview.md","hash":"b037fa6c47d86e0fb28e79ba0627b3e5206f31f1","modified":1627541156729},{"_id":"source/_drafts/Computers/Commons.md","hash":"2f5af8f2a14ef8b9fe7b37b1e502328e35a39e27","modified":1627541156728},{"_id":"source/_drafts/Computers/UML.md","hash":"f0b17c1c79637432b69873fe5ef3fcad25e43b3a","modified":1627541160908},{"_id":"source/_drafts/React-Native/MobileUIFramworks.md","hash":"5fa4f231fdaccfd37fbf23eb18d3cbc745422f3e","modified":1627541156769},{"_id":"source/_drafts/React-Native/React-Native.md","hash":"146c7efe3322925781d77771c3959438b17a64c3","modified":1619576291452},{"_id":"source/_drafts/BlogsPlan/BlogsPlan.md","hash":"cf01d1e5d216d59eb4996239db4ce8802044b64e","modified":1627541161061},{"_id":"source/_posts/iOS/Xcode.md","hash":"d6a0b4ee40263723c8003646e228ddc99c55636e","modified":1627541158479},{"_id":"source/_posts/iOS/.DS_Store","hash":"c212c2d65c24589275ff4032ef5ef88494bfbb59","modified":1628566771351},{"_id":"source/_drafts/BlogsPlan/ShortPlan.md","hash":"fb8d5af5a2db84963688cc9323466e53c910437e","modified":1627541161058},{"_id":"source/_posts/iOS/_index.md","hash":"da32e8b9bba39894c34ff7fc0b6e8207f8b13cc1","modified":1627541159420},{"_id":"source/_drafts/BlogsPlan/StudyPlan.md","hash":"2a04ab6230a0d27f4e81186d5937d52f130acd46","modified":1627541161057},{"_id":"source/_drafts/BlogsPlan/iOSShortSlab.md","hash":"856571c3d8c1b954c9b5be5d6298d8fc5e75c387","modified":1627541161054},{"_id":"source/_posts/Web/CSS/CSSGuidance.md","hash":"3ee28c20564cb30f3b7819ffbf1bd27b2a7a01b0","modified":1627541160835},{"_id":"source/_posts/Flutters/TechnologyFeasibility/TechnologyFeasibility.md","hash":"ed5ba9920ea05b55828c58beb8754fa55e2df0a3","modified":1627541160836},{"_id":"source/_posts/Flutters/Guidance/Flutter_Render_Object.png","hash":"65cfd19cd2486a32191c096cf15a608a056e09f1","modified":1627541160878},{"_id":"source/_posts/Flutters/Guidance/Guidance.md","hash":"a838060cbc0744a677af0aa76c179491c4325f05","modified":1627541160871},{"_id":"source/_posts/Flutters/Guidance/Flutter_iOS_Android.png","hash":"98ffd3b697dc442f1c3f675fa31f045c09a2c036","modified":1627541160877},{"_id":"source/_posts/Flutters/Guidance/Flutter_Frameworks.png","hash":"b5dca9eb8afaf9416f23281990e67e3c3f678bd8","modified":1627541160878},{"_id":"source/_posts/Flutters/Guidance/Launch_flow_ios.webp","hash":"ef2a43e957cde6e50b02686215b25cdd42d77472","modified":1627541160870},{"_id":"source/_posts/Flutters/Guidance/Render_flow.webp","hash":"873ddcafb6c1ea7a8706ece78e3f464c95f70edf","modified":1627541160863},{"_id":"source/_posts/Flutters/Guidance/Memory_Manager_01.webp","hash":"cdb847954e6905453a7228adc54cd4ea8c5eca92","modified":1627541160869},{"_id":"source/_posts/Flutters/TechnologyFeasibility/Technologies.md","hash":"3b2c42d5f81ac2dc69f95f8410b07b43176951ef","modified":1627541160836},{"_id":"source/_posts/Flutters/Guidance/Rendering_pipeline.png","hash":"dd6c572e6e5b47bb8d1f5cd42d9044631cdd7452","modified":1627541160861},{"_id":"source/_posts/Flutters/Guidance/iOS_Render_flow.webp","hash":"995b43e8e9728f536b540db7a1e85397ecf9dd0b","modified":1627541160857},{"_id":"source/_posts/Web/JavaScript/JavaScript.md","hash":"b26712c52a95d9310d6501bb3daa0840a2c8d1da","modified":1627541160834},{"_id":"source/_posts/Web/JavaScript/Technologies.md","hash":"8d41a262506a82dc044783257ad47e5d3ed652c6","modified":1627541160833},{"_id":"source/_posts/Web/ChromeExtentions/Guidlines.md","hash":"8c6e8efd06c53104ab1e211f0c2e64ad55a4f8c5","modified":1632293800373},{"_id":"source/_posts/Flutters/Guidance/Memory_Manager_02.webp","hash":"20c2775fd7398e6e7165c2f7852acaa61900d8eb","modified":1627541160868},{"_id":"source/_posts/iOS/Concurrency/Concurrency.md","hash":"1af38a61b1f2bede817c5127adee64c00b6a5efa","modified":1627541160827},{"_id":"source/_posts/iOS/Concurrency/MultiThread.md","hash":"221f908405c43d0fbb42538f9a087ec12e7be3ab","modified":1627541160826},{"_id":"source/_posts/iOS/Concurrency/RunLoop.md","hash":"cb809c539664569e0388d1d8f3da4dd9aec5dc8c","modified":1627541156842},{"_id":"source/_posts/iOS/Documents/Jazzy.md","hash":"314ff01f2f14815996cf884fb347851d9cc48ab2","modified":1627541160824},{"_id":"source/_posts/iOS/DataPersistence/DataBase.md","hash":"c0b68a7b555f2dcdf88fc4f2ac3d9a2353511da2","modified":1627541160825},{"_id":"source/_posts/iOS/DataPersistence/DataPersistence.md","hash":"c05732d34b5da9c647f3ccde21169ed0c3089a5e","modified":1627541160825},{"_id":"source/_posts/iOS/Frameworks/FramworkProgramme.md","hash":"7002a8774a61e1557d2ff72cc4e46a4e38c45e38","modified":1631774550064},{"_id":"source/_posts/iOS/Interview/InterviewPre.md","hash":"4611b3d7f0c1fa66e9b3c60d0a57022ccd227855","modified":1631774550070},{"_id":"source/_posts/iOS/Interview/InterviewQuestions.md","hash":"6efd50447cf7e4226c3b38df3ef862ec7aaa6163","modified":1627541157012},{"_id":"source/_posts/iOS/Interview/Interviewes.md","hash":"c2f1209aa494f8760132028343eeb2a84f250b3e","modified":1631774550070},{"_id":"source/_posts/iOS/Interview/Summery.md","hash":"489dcd7ecebce9f8070a47da578595b85593f61c","modified":1632293800378},{"_id":"source/_posts/iOS/Interview/Summery2.md","hash":"47713c23a5c4ca8f986625b4bf8676bbf7de15ab","modified":1631774550073},{"_id":"source/_posts/iOS/Interview/Uncommon.md","hash":"fc0c64543e96f6f317955e11b27dc6caaed475e4","modified":1627541157019},{"_id":"source/_posts/iOS/Libraries/OpenLibs.md","hash":"621860b9a698b6a85aad3d1eba458f048c6f9e76","modified":1627541160698},{"_id":"source/_posts/iOS/Libraries/WebViewJavascriptBridge.md","hash":"b354e67d1f48fc92352b6e35e9f15e755e7a829d","modified":1627541160697},{"_id":"source/_posts/iOS/Languages/.DS_Store","hash":"717fc713630861f23df767d755a6e6ff113a96fe","modified":1630483873225},{"_id":"source/_posts/iOS/Medias/Audio.md","hash":"0859dfac7e69d3d591904f11219e49310e042ded","modified":1627541160696},{"_id":"source/_posts/iOS/Medias/Images.md","hash":"f37e2f2d52e860d10df8430370cb30cf1cd05f01","modified":1627541160696},{"_id":"source/_posts/iOS/Medias/Medias.md","hash":"748fe2c6aa9018a59142f721dba9191815ff777c","modified":1627541160695},{"_id":"source/_posts/iOS/Medias/Vedio.md","hash":"0b15f88891216eccd15dbd75c99ff8738d606b70","modified":1627541160695},{"_id":"source/_posts/iOS/Network/AppSign.md","hash":"bb94362f1974aa3ee2718f8fada43a0eafd2a748","modified":1627541157057},{"_id":"source/_posts/iOS/Network/BLuetooth.md","hash":"935bb5fb83dd5abaa6284eaf0613d5521c960a04","modified":1632293800415},{"_id":"source/_posts/iOS/Network/Logs.md","hash":"b30d01f6a1fb058e1a1151422508d138ad33fc31","modified":1627541160689},{"_id":"source/_posts/iOS/Network/HTTP.md","hash":"0aab973f58dbec39e5680b3d8f9eab0aad6cda4d","modified":1632293800416},{"_id":"source/_posts/iOS/Network/NetSecure.md","hash":"93b9f5dc446d4149d27c4213ca42d3336e888ee3","modified":1627541160688},{"_id":"source/_posts/iOS/Network/Network.md","hash":"9d0b9869426c4c5191d88eb808697f2e7f09d6e6","modified":1631774550083},{"_id":"source/_posts/iOS/Network/NetworkOptimize.md","hash":"265b67a41a4330de53ce8eea98224adc041374f8","modified":1632293800417},{"_id":"source/_posts/iOS/Network/Protocols.md","hash":"5c1a2565df1e708a955e09cb8496e9f2a9fe7cb4","modified":1627541160687},{"_id":"source/_posts/iOS/Performance/.DS_Store","hash":"6905c93908b6b9fac50bf524d8d6137989dfc6a0","modified":1627460973229},{"_id":"source/_posts/iOS/Network/服务认证.md","hash":"60509d26a8b7cdb5ac4e2b0cb79fa87f244a1437","modified":1632293800646},{"_id":"source/_posts/iOS/Performance/AppThin.md","hash":"f5d20525271941402bd3222552f4e4006a7b2432","modified":1627541157087},{"_id":"source/_posts/iOS/Performance/GCCAttribute.md","hash":"12f451aa2c5a352b9677b148232450aafe0c5a1f","modified":1627541160633},{"_id":"source/_posts/iOS/Performance/LaunchOptimize.md","hash":"704a9ffb561b48bd5d9dc00a248c8540f31046ae","modified":1627541160631},{"_id":"source/_posts/iOS/Performance/LaunchOptimize2.md","hash":"4e60ba2cd0e36646e1875d4547ecd140adcc1740","modified":1627541157094},{"_id":"source/_posts/iOS/Performance/MacOFiles.md","hash":"15fd44fe859214271cc211c64a07705d6cd543f6","modified":1627541160630},{"_id":"source/_posts/iOS/Performance/Performance.md","hash":"071b67b9ac897106b02a2ea841c0ffa43c9a76ff","modified":1627541160630},{"_id":"source/_posts/iOS/Performance/PowerOptimize.md","hash":"d1ca94276f7902243c0182167b192819ab71f918","modified":1627541160629},{"_id":"source/_posts/iOS/Performance/dyldVariables.md","hash":"3f3d81ed272faa6f45968615551d02b3321faf9f","modified":1627541160625},{"_id":"source/_posts/iOS/Performance/iOS 之离屏渲染.md","hash":"ff200aaf403a35646494564ff72cb66b5a2a47d2","modified":1632293800659},{"_id":"source/_posts/iOS/OS/Linux.md","hash":"f028fab9bf232cb3e265b8d68aec9bd884556171","modified":1627541160659},{"_id":"source/_posts/iOS/OS/OS.md","hash":"76953690595412d75658b05f96f7f077e3951a4b","modified":1627541157086},{"_id":"source/_posts/iOS/OS/ShellConfigs.md","hash":"95d01da59b4dd246e049425a4b6855002cd3cec4","modified":1627541160657},{"_id":"source/_posts/iOS/OS/Unix.md","hash":"de12c848b8e748566ea98f7112e8f2eb029e288d","modified":1627541160656},{"_id":"source/_posts/iOS/ProjectManager/.DS_Store","hash":"051df0b2d4204e8101819ce15cfd76d6257b7b6b","modified":1627460975999},{"_id":"source/_posts/iOS/Performance/dyld.md","hash":"50a00bf73485652063e0287b9f6fb34c7d12fedc","modified":1632293800648},{"_id":"source/_posts/iOS/ProjectManager/AutoRelease.md","hash":"45d1905663fdf5116e00ef664a46ae1e42b865e8","modified":1627541160622},{"_id":"source/_posts/iOS/ProjectManager/EnvironmentsVaraible.md","hash":"f5f872ef71cc0df6c1af05c8a0eeec97506ed519","modified":1631774550088},{"_id":"source/_posts/iOS/ProjectManager/Fir&PGYing.md","hash":"69a6f00e05d7bf18f3df449afe612a3f94ab84fd","modified":1627541160619},{"_id":"source/_posts/iOS/ProjectManager/CI.md","hash":"fcf6bacb8090d69602e707c8d6a31d3cafa5e9c2","modified":1627541160622},{"_id":"source/_posts/iOS/ProjectManager/ProjectManager.md","hash":"e2ab00df7c39291f5925081ad191869be00e4803","modified":1632293800730},{"_id":"source/_posts/iOS/ProjectManager/Tapd.md","hash":"43fe3b4e300fde5bd12210ffe236fcabf7c30a42","modified":1627541160615},{"_id":"source/_posts/iOS/ProjectManager/ZenTao.md","hash":"90f250b0b56e11ed20b42e42794bf4c37f2c0a7b","modified":1627541160614},{"_id":"source/_posts/iOS/Resources/.DS_Store","hash":"16f8a37445f7a910eacd3b346ccd5ac72473651a","modified":1627460976007},{"_id":"source/_posts/iOS/Resources/MVC_Stanford.webp","hash":"8a3e6248ece887606bb679a5455f3876a051b0c0","modified":1631774550090},{"_id":"source/_posts/iOS/Resources/model_view_controller_2x.png","hash":"e3cf85737e09222ec95fd771a5e7e0f5c10590b5","modified":1631774550090},{"_id":"source/_posts/iOS/Tools/.DS_Store","hash":"5445eb70d16ec194e170841cb53598c4b2461e46","modified":1627460973226},{"_id":"source/_posts/iOS/Tools/Charles.md","hash":"3b12935c442f83e531e0f47a6d57797b1a63448e","modified":1627541159475},{"_id":"source/_posts/iOS/Tools/CocoapodGuidance.md","hash":"427916336f2ae51c70cf647c986904ceea3d9f69","modified":1627541159472},{"_id":"source/_posts/iOS/Tools/CocoapodMaker.md","hash":"3a8820b231672252446f288adcd749c365cc9190","modified":1627541159471},{"_id":"source/_posts/iOS/Tools/Fastlane.md","hash":"b8476258669698842dabdeb370ece1194c9a43ea","modified":1627541159470},{"_id":"source/_posts/iOS/Tools/GitSpecification.md","hash":"ec9b538eb03d19edcf7b2f61a8d04b6769293890","modified":1627541159470},{"_id":"source/_posts/iOS/Tools/LLDB.md","hash":"1a3297465bb717768c098115a29499cb6ec1d0d3","modified":1627541159469},{"_id":"source/_posts/iOS/Tools/Monitors.md","hash":"2c0d3c1253bb2f23ce8a768a60e6c714a67993e5","modified":1627541159468},{"_id":"source/_posts/iOS/Tools/Reverse.md","hash":"b30c40b7531ffeb90699ee687f7b2095319c9955","modified":1627541159465},{"_id":"source/_posts/iOS/Tools/OmniGraffle.md","hash":"23d2cf7005f19a527ba993df4ec163287e2890f2","modified":1627541159467},{"_id":"source/_posts/iOS/Tools/Xcode.md","hash":"781cda49a153ea6651c560d4dd0f70a5516d0a3a","modified":1632293800748},{"_id":"source/_posts/iOS/Tools/iOSTools.md","hash":"c88069ee3940a044ff5eddeb219823bead6b9fff","modified":1627541159460},{"_id":"source/_posts/iOS/Webs/.DS_Store","hash":"408942bed5f6b806dc9f2cd0f04d62e46acf15dc","modified":1627460976009},{"_id":"source/_posts/iOS/Webs/Hybrids.md","hash":"affeb7b17f6f945e7d208e24be0e8fb3f9bf3106","modified":1627541159425},{"_id":"source/_posts/iOS/Webs/JSPatchPrinciple.md","hash":"3317812888e541afc83abee165918d6e748cf930","modified":1627541159424},{"_id":"source/_posts/iOS/Webs/JavaScriptCore.md","hash":"ef07dd947fc240bed9c30974b0bd97d7eb5d0fef","modified":1627541158471},{"_id":"source/_posts/iOS/Webs/Vue.md","hash":"6a2d1c007279433dd6697b586526c50efc01b57d","modified":1627541159420},{"_id":"source/_posts/iOS/WWDC/WWDC2019.md","hash":"fed79313c5dc4b4a93c893a0dd367ad1d6533fd0","modified":1627541159428},{"_id":"source/_posts/iOS/Games/Engine.md","hash":"cd4b8a0091ec773c582fef556738a8d2043ccf1f","modified":1627541160823},{"_id":"source/_posts/iOS/Games/Games.md","hash":"d6df02b51e5089bb6b647c4d0b99c29192292c83","modified":1627541156873},{"_id":"source/_posts/iOS/Games/Lua.md","hash":"8de3dbe2eb99dad300a93c52a73a71b6ab008590","modified":1627541160822},{"_id":"source/_posts/iOS/UI/Animation.md","hash":"05bfb25804ea7f7367a490583d3001a6feb7e1a9","modified":1632293800763},{"_id":"source/_posts/iOS/UI/CoreImageFilter.md","hash":"dae2f0d493010d6e83f6e158beb41ac4bc02e0da","modified":1631774550094},{"_id":"source/_posts/iOS/UI/CoreText.md","hash":"5a2f4b26c31c27e2a2283883ba6b9de17b2e34b2","modified":1631774550095},{"_id":"source/_posts/iOS/UI/TextKit.md","hash":"98d25ec80e07aac18ddede62fa172520a938f31c","modified":1631774550103},{"_id":"source/_posts/iOS/UI/UI.md","hash":"3ec1a1d9284eb83d303c3221567037121d0a5e21","modified":1631774550103},{"_id":"source/_posts/iOS/UI/UserExperences.md","hash":"3eac8ed090a6e5f46d507d02d7b81b10b61c407b","modified":1631774550104},{"_id":"source/_posts/iOS/Tools/a-shell.md","hash":"3058dddcea0e5b42f5c72f00e733a4d836eb4ae9","modified":1632293800762},{"_id":"source/_drafts/Computers/Algorithm/Algorithm.md","hash":"bf3e00e3c4a683254bc2879e603bdd9e6e8d2313","modified":1627541161034},{"_id":"source/_drafts/Computers/Algorithm/Hash.md","hash":"5e9956f87fd2fe450021d2ffa4c0ada18251b26b","modified":1627541161024},{"_id":"source/_drafts/Computers/Algorithm/LinkList.md","hash":"6686f197496d6a607303a4d988469d7410ae53fc","modified":1631774550058},{"_id":"source/_drafts/Computers/Algorithm/LRU.md","hash":"98ad672f6858451768f8ec4843ddd444c100674e","modified":1627541156726},{"_id":"source/_drafts/Computers/Algorithm/Pre.md","hash":"900df81090e2fa91068cb1c5a614c2e48c0b2379","modified":1627541156727},{"_id":"source/_drafts/Computers/Algorithm/QuickSort.cpp","hash":"aa9fb597ccef6f97446fb32afc8e1049ef1644b2","modified":1627541156727},{"_id":"source/_posts/Flutters/TechnologyFeasibility/Resources/BinaryMessenger.jpg","hash":"239477753c1f8fdbfd91c885e4a3163d03ed0737","modified":1627541160856},{"_id":"source/_posts/Flutters/TechnologyFeasibility/Resources/Codec.jpg","hash":"229aa78887c44e32c2409595cd43485abc9a55c7","modified":1627541160855},{"_id":"source/_posts/Flutters/Guidance/Widget_update.png","hash":"f697ec1645a57163a7d424131e78a5e3e9fc5bff","modified":1627541160860},{"_id":"source/_posts/Flutters/Guidance/Widgets.png","hash":"b30a2c8bce0df0b107c9fdc65ba78380c7c6c5e2","modified":1627541160858},{"_id":"source/_posts/iOS/Concurrency/.GCD.md","hash":"c75e256e787159b0fd8590b6a620ca2d18698908","modified":1627541160827},{"_id":"source/_posts/Flutters/TechnologyFeasibility/Resources/flutter.md","hash":"e6f385caa974abf6b3d236f0357b2d20cdd853d7","modified":1627541160844},{"_id":"source/_posts/Flutters/TechnologyFeasibility/Resources/Projects.png","hash":"064a0ce36a94c936269080a215496bc0680ff7c8","modified":1627541160854},{"_id":"source/_posts/Flutters/TechnologyFeasibility/Resources/message-dart-native.jpg","hash":"532396a215beb2a412b4b051ad255fa9ca7ce8d1","modified":1627541160841},{"_id":"source/_posts/Flutters/TechnologyFeasibility/Resources/files-module.png","hash":"7393c4ee6ba2538f34e2c6b39c98a1c2deb97d58","modified":1627541160853},{"_id":"source/_posts/Web/JavaScript/TypeScript/GuideLine.md","hash":"1a2d69119adc32b94b2f7ead428b8bef67ef1d09","modified":1632293800375},{"_id":"source/_posts/iOS/Languages/AppleScript/AppleScript.md","hash":"9b546ae4ab6b874b35ba3287c31a6fab69720dd9","modified":1627541157020},{"_id":"source/_posts/Flutters/TechnologyFeasibility/Resources/type.jpg","hash":"731002ab142c7d1edd7f6007eabdb00537003712","modified":1627541160837},{"_id":"source/_posts/iOS/Documents/_Configs/Jazzy.yaml","hash":"b461d30906910aa2a9f76fb3ada09e1f5027ec92","modified":1627541160824},{"_id":"source/_posts/iOS/Languages/CAlians/Interupt.md","hash":"8ea6ea5a3103c5d3e353c64af671a801e9d92484","modified":1631774550080},{"_id":"source/_posts/iOS/Languages/CAlians/CMake.md","hash":"2726394c2c03e62a8ef860fdc5f10c6180a3c7f9","modified":1632293800381},{"_id":"source/_posts/iOS/Languages/CAlians/ToolChain.md","hash":"dc8a16f91d386b4d7dc655e7ba482a6524e8362b","modified":1632293800381},{"_id":"source/_posts/iOS/Languages/CAlians/boost-b2.md","hash":"2065c0d737569edd6b44fc6117d35669948b0970","modified":1627541160809},{"_id":"source/_posts/iOS/Languages/Java/Java.md","hash":"c4954e52df2fdf73959d173e44949af4e3cdc6fc","modified":1627541157033},{"_id":"source/_posts/iOS/Languages/Assemble/Assemble.md","hash":"12eae98dc53ba5c1b1944d6f61ac69ea46251719","modified":1627541160820},{"_id":"source/_posts/iOS/Languages/Objective-C/Category.md","hash":"51692a3c8b19edd5ecb247451728f871213fb56d","modified":1632293800409},{"_id":"source/_posts/iOS/Languages/Objective-C/ClassProtoType.png","hash":"793cd3d4c3e61baff1b6d00ed0c336a82fa47ca1","modified":1627541160802},{"_id":"source/_posts/iOS/Languages/Objective-C/Block.md","hash":"b02f708e2ad687d291db256eb0f72ef21d1f0082","modified":1632293800408},{"_id":"source/_posts/iOS/Languages/Objective-C/KVC.md","hash":"ec856c5e610510a7151b6fea1b078e2d648181b9","modified":1632293800409},{"_id":"source/_posts/iOS/Languages/Objective-C/Memory.md","hash":"f8284875cf196f9ad927d98626099a349e3c739d","modified":1632293800410},{"_id":"source/_posts/iOS/Languages/Objective-C/MemoryManagement.md","hash":"ba2f6ef006d057bdfb29eeab89108720f692c266","modified":1632293800411},{"_id":"source/_posts/iOS/Languages/Objective-C/KVO.md","hash":"cf95978ea5bb723b777b10a1e944dc961037f0e1","modified":1627541157037},{"_id":"source/_posts/iOS/Languages/Objective-C/NSDIctionary.md","hash":"3819afc373550440d15cc64fa8fa59a2aa573354","modified":1627541157038},{"_id":"source/_posts/iOS/Languages/Objective-C/NSTimer.md","hash":"93c42fdcb4366fbf8c3272c4e742869307411264","modified":1627541157039},{"_id":"source/_posts/iOS/Languages/Objective-C/OCAdvance.md","hash":"759c9fb25c69ba0dc431c86bd314976883a4a80b","modified":1627541157040},{"_id":"source/_posts/iOS/Languages/Objective-C/Objective-C.md","hash":"88aa4bbbec1b21ffb487d82a8c373a5e45e1dad8","modified":1627541160737},{"_id":"source/_posts/iOS/Languages/Objective-C/Runtime.md","hash":"de4646d6fa6f3dd302b921adef49bed7678ea8d8","modified":1627541157041},{"_id":"source/_posts/iOS/Languages/Objective-C/Types.md","hash":"f4581b186e0aa252405d63f42db7f646d73a74ba","modified":1627541160736},{"_id":"source/_posts/iOS/Languages/Objective-C/iOS之KVC.md","hash":"12e348a9ca6cebcf892f630e95fd1d2646c12710","modified":1632293800412},{"_id":"source/_posts/iOS/Languages/PHP/PHP.md","hash":"cc5f6b0a3c1a0f145a85afd75881b482d3bb1dda","modified":1627541160735},{"_id":"source/_posts/iOS/Languages/Python/Pyhon.md","hash":"5d11c8577336fcaf8927309858f6bbb90ee31bca","modified":1627541160734},{"_id":"source/_posts/iOS/Languages/Resources/charicteristics.gif","hash":"8122438ad1cd5d92e100ed52936a0c53aac1d5ea","modified":1627541160733},{"_id":"source/_posts/iOS/Languages/Resources/oc_memory_struct.webp","hash":"ae95067752c180a320911302b8707cf539e5a3eb","modified":1632293800413},{"_id":"source/_posts/iOS/Languages/Shell/Shell.md","hash":"cc72a071023a6228fb085f84378a68ecbfe98518","modified":1627541160702},{"_id":"source/_posts/iOS/Languages/Swift/Constructor.md","hash":"851544221537821753bedd7848440fe757d32fda","modified":1627541160701},{"_id":"source/_posts/iOS/Languages/Swift/Class.md","hash":"954061765d08b97ca1b2a38ff9ec2fca0a47bd60","modified":1632293800414},{"_id":"source/_posts/iOS/Languages/Swift/Generic.md","hash":"fac4c4d34f5964f3b3174df5b4368801bad8a9d1","modified":1627541157049},{"_id":"source/_posts/iOS/Languages/Swift/Value&Reference.md","hash":"aa0208908e8940ac4e02b8bb8f6e80e7b6d86a90","modified":1627541160700},{"_id":"source/_posts/iOS/Languages/Swift/Swift.md","hash":"08d1f267124a5d1344d0fa274931e1a75293b009","modified":1627541157049},{"_id":"source/_posts/iOS/Languages/Swift/Codable.md","hash":"047f83cc5fd888fef72f4b196de908c558ac2b39","modified":1627541157047},{"_id":"source/_posts/iOS/Network/Resource/Ethernet.png","hash":"fa101d484986507ff8fec409538e6345f7c91d2e","modified":1627541160686},{"_id":"source/_posts/Flutters/TechnologyFeasibility/Resources/message-native-dart.jpg","hash":"45123fe86cf603a24511cc3f87365a0164b19490","modified":1627541160840},{"_id":"source/_posts/iOS/Network/Resource/HTTP.png","hash":"719ea5db5519afd1755fe2e80200345eafc92efe","modified":1627541160685},{"_id":"source/_posts/iOS/Network/Resource/TCP.gif","hash":"9c5db8ec14506d4fc7274bc3e2c65acf30782068","modified":1627541160678},{"_id":"source/_posts/iOS/Network/Resource/protocols.png","hash":"592a706b8f37aec9f6f5ddb746e97e2de7d24335","modified":1627541160669},{"_id":"source/_posts/iOS/Network/Resource/stream.png","hash":"32505642d82a40259daba7cee56c7d60a54d14bb","modified":1627541160668},{"_id":"source/_posts/iOS/Network/Resource/stream2.jpg","hash":"b69d70c0dce95e5664a6861e5f152c1cbf24442a","modified":1627541160664},{"_id":"source/_posts/iOS/Network/Resource/NetLayer.jpg","hash":"d843f4d6632ab41b36fd614df844f3cee412fe56","modified":1627541160680},{"_id":"source/_posts/iOS/Performance/Exceptions/Excetions.md","hash":"b0d970c6817aa2dd9dd7ea2076a5e1909b51ade3","modified":1627541160653},{"_id":"source/_posts/iOS/Performance/Exceptions/CrashLogManuelResolve.md","hash":"82002b3698d3c478a0e7e749e204022ff68cf738","modified":1627541160654},{"_id":"source/_posts/iOS/Performance/Exceptions/ ZombieObject.md","hash":"bac9a31f1d5a17e3186a97cd269313e5d283e5e7","modified":1627541157088},{"_id":"source/_posts/iOS/Performance/Exceptions/WiredPointer.md","hash":"128807f5db1321a36da936d0a91ee7a5005dac51","modified":1627541157090},{"_id":"source/_posts/iOS/Performance/KSCrash/Princeples.md","hash":"2e98c000a0d73a68d93e275bc1e03569148f91e6","modified":1627541160632},{"_id":"source/_posts/iOS/Performance/KSCrash/KSCrashGuidline.md","hash":"f45073649f78a04013b9ebd0c80c367ddd49e7a1","modified":1627541160632},{"_id":"source/_posts/iOS/Interview/InterviewCollections/Baidu.md","hash":"9c6a0415ac8d0a5684358fd94a601212c5b8a104","modified":1631774550068},{"_id":"source/_posts/iOS/Interview/InterviewCollections/Tencent.md","hash":"2d0226c66c00a967a23c5ff5b0f582fbb56f3a62","modified":1631774550069},{"_id":"source/_posts/iOS/Interview/InterviewCollections/InterviewCollections.md","hash":"d49f989dc8dd4680387bf90fa27fd11bed3bf96c","modified":1632293800377},{"_id":"source/_posts/iOS/ProjectManager/Cocoapod/Cocoapod.md","hash":"c180941ac4148a115ccc7a67d5a70183ab659c94","modified":1632293800660},{"_id":"source/_posts/iOS/ProjectManager/Cocoapod/UmbrellaFramework.md","hash":"314bb27f22df6efd563c80597ca95dccf7fd3972","modified":1632293800661},{"_id":"source/_posts/iOS/ProjectManager/ShellScripts/Simulator.md","hash":"0f687302a05192ad9eec1f09430f23c150597d3b","modified":1627541160616},{"_id":"source/_posts/iOS/Performance/Resources/text_segments.png","hash":"9574afd9565bf1a026dcbe100976ba012c65a838","modified":1627541157100},{"_id":"source/_posts/Flutters/Guidance/Flutter_Framework.png","hash":"ec6e8c964e1e0668e7559f2e7ebffbc549538dd4","modified":1627541160880},{"_id":"source/_posts/iOS/Performance/Resources/dyld.jpg","hash":"d8f67b920fd777e387a67c37d5811a421e977f15","modified":1627541157098},{"_id":"source/_posts/iOS/ProjectManager/ShellScripts/boot_ios_simulator.sh","hash":"3b25a28516e7c0143e267f6fbb1f0eda1bcac5f6","modified":1627541160615},{"_id":"source/_posts/iOS/Resources/Interview/mac-o.jpg","hash":"6ce13f0e546a39776ea1c0c1a6d9b05c35a71fb0","modified":1627541158343},{"_id":"source/_posts/iOS/Tools/Appium/AppiumGuidance.md","hash":"6d63651b4a2cb40fbbecbb08444384b208729165","modified":1627541159475},{"_id":"source/_posts/iOS/Tools/Vim/VimOperation.md","hash":"9cb09783d42d7d173446d3e64b22bdfcb7db40ac","modified":1627541159464},{"_id":"source/_posts/iOS/Webs/React-Native/DualComunication.md","hash":"e7f259a761be6e7bd44d86167595465c85c85c61","modified":1632293800772},{"_id":"source/_posts/iOS/Webs/React-Native/NativeCommunication.md","hash":"790580ef42ffba0ec968d34a72c49fb22fff5e53","modified":1627541159424},{"_id":"source/_posts/iOS/Webs/React-Native/NativeModule.md","hash":"e757ad7a54e215ca3f0f88c554998ea75eb7d1c9","modified":1627541159422},{"_id":"source/_posts/iOS/Webs/React-Native/NativeComponents.md","hash":"af129818895797e9e5904512d1be5d55c0cd5006","modified":1627541159423},{"_id":"source/_posts/iOS/Webs/React-Native/Navigation.md","hash":"4b7de49de881513be7a70dd35bb88d67073ca1bc","modified":1632293800774},{"_id":"source/_posts/iOS/Webs/React-Native/React-Native.md","hash":"036f75bead2fb90e8b0721a1b1753b4950cca8e2","modified":1631774550108},{"_id":"source/_posts/iOS/Webs/Flutter/Flutter.md","hash":"a640d1e3e76cbfde3d7f53e765c9354ee7b805f7","modified":1627541159426},{"_id":"source/_posts/iOS/UI/Layouts/Layouts.md","hash":"7943420a4484d578dddf64b7a37435f4f75c6435","modified":1631774550097},{"_id":"source/_posts/iOS/UI/Layouts/AutoLayout.md","hash":"c86c817ec6fcb226e3e5ffe71a996a56b52574a3","modified":1632293800768},{"_id":"source/_posts/iOS/UI/Render/OffScreenRender.md","hash":"7df401703321580c087fbb79567717bf0fcc1dd8","modified":1631774550098},{"_id":"source/_posts/iOS/UI/Render/Render.md","hash":"1783e06078004f7799f83cc3837ceabd84040393","modified":1631774550098},{"_id":"source/_posts/学习笔记/iOS/iOS之并发编程/RunLoop.md","hash":"55d5f1bae227d9afd554e62905bfd1aeea0134bf","modified":1632293800776},{"_id":"source/_posts/iOS/Resources/MessageForward/swift_function_dispatch.png","hash":"ccb2e334e8a648118354f8eace8bc6735e067636","modified":1627541159482},{"_id":"source/_posts/iOS/UI/Resources/text_glpy_info_1.gif","hash":"21997f431ef1983d6fdd9e4da44e62eee640ea60","modified":1631774550101},{"_id":"source/_posts/iOS/UI/Resources/textkit_archtecture.png","hash":"79fb1eecfc1814847ceb496eebcfa74a9ceacb92","modified":1631774550102},{"_id":"source/_posts/iOS/UI/Resources/autolayout_hugging.png","hash":"ada86b34e6e810076b33a99283ea6495eed907ea","modified":1631774550099},{"_id":"source/_posts/iOS/UI/WebKit/WebKit.md","hash":"ac38e69d437efc1bb96bf337422ee4d2232ad700","modified":1631774550105},{"_id":"source/_posts/iOS/UI/Resources/text_glpy_info.gif","hash":"21fad40ffdf116a7655f7f3385c52e4c99dfc1cf","modified":1631774550100},{"_id":"source/_drafts/Computers/NetWork/DNS/DNS.md","hash":"debffc2907a3726a97ef1464abc9d5f8f1614f7f","modified":1627541160984},{"_id":"source/_posts/iOS/UI/Resources/ctframe.png","hash":"51b576625be2458f4674686b66dce1baa01f2bd5","modified":1631774550100},{"_id":"source/_posts/iOS/UI/WebKit/WKWebView.md","hash":"c50922b9823be18ebe0f9215473362b45a1a1f6f","modified":1632293800769},{"_id":"source/_drafts/Computers/OS/Linux/rsync.md","hash":"e22d780d6b423f7760a52c23c75641b9e4dd7725","modified":1627541160908},{"_id":"source/_posts/iOS/Languages/CAlians/C++/C++.md","hash":"8d0b4575893301c7e6b3fa57a066640a07c30c97","modified":1631774550074},{"_id":"source/_posts/iOS/ProjectManager/CI/Applestore Connect/App Store Connect API.md","hash":"22de8f29d3af745386e435ffc4ec4bbbd8b78e25","modified":1627541160621},{"_id":"source/_posts/iOS/Languages/CAlians/Compiler/g++.md","hash":"4c474463cb690a23746d53120a520036eefbf116","modified":1631774550079},{"_id":"source/_posts/iOS/ProjectManager/CI/Jira/Jira.md","hash":"eab9d9eaf3ff8f71976101d6c276d8e533fe793d","modified":1627541157106},{"_id":"source/_posts/iOS/ProjectManager/CI/Jenkins/Jenkins.md","hash":"918dd53e1c6f1dedbe521734e4cb182be44fe336","modified":1627541160620},{"_id":"source/_posts/iOS/Webs/Flutter/Dart/Dart.md","hash":"7616184ef84eac5cac66472feec978ddb8c3cd81","modified":1627541159427},{"_id":"source/_posts/学习笔记/iOS/iOS之UI界面/UI布局/布局.md","hash":"2b46354c652354f257ed169dda6db89ca6b1b0ff","modified":1632293800775},{"_id":"source/_posts/iOS/Languages/CAlians/C/size_t.c","hash":"f3cd48d82e372ad6ab2a0ebf1d03880b6fac668a","modified":1631774550077},{"_id":"source/_posts/iOS/Languages/CAlians/C++/Guidelines/Guidelines.md","hash":"32eb148416f4836ff5a97afb4cf7d84536609105","modified":1632293800379},{"_id":"source/_posts/iOS/Languages/MySQL/MySQL.md","hash":"ece48008ba323b1ec37a8e44d29d82dd896d09f6","modified":1627541157034},{"_id":"source/_posts/iOS/Languages/CAlians/C++/Guidelines/FuncPtr.md","hash":"6ea26371abb9bb45ace27de162d9d7f000831f51","modified":1632293800379},{"_id":"source/_posts/iOS/Languages/CAlians/C++/Guidelines/using.md","hash":"47d87f7a58d03f00fc44a947ef47ac6f4339e9ae","modified":1632293800380},{"_id":"source/_posts/iOS/Resources/CrashLog/sd_doctor_ios.app.dSYM/Contents/Info.plist","hash":"e72eb6d7c67ededd19ef0a7d4f6e550874ad5ac1","modified":1627541160595},{"_id":"themes/archer/source/scripts/search.js.map","hash":"4af430eb16cf1d01aa675105ba5d2307b89f1ccb","modified":1631775930203},{"_id":"source/_posts/iOS/Webs/DCloud/DCloudGuideline.md","hash":"d6293a79838e680241cc1fa676255961b7ad2d5d","modified":1632294030836},{"_id":"source/_posts/iOS/ProjectManager/CI/_Shell/fastlane.sh","hash":"eac80d31d38d750f15578a4bdaecd857e4435286","modified":1627541160619},{"_id":"source/_posts/Flutters/Guidance/Rendering_pipe.png","hash":"18dd57b8110ae1be02fe637faed066cd5b0774a3","modified":1627541160862},{"_id":"source/_posts/iOS/Languages/Resources/category_association.webp","hash":"672db875a90b58bc42173f9c3c25463ea8cbc762","modified":1632293800413},{"_id":"source/_posts/Flutters/TechnologyFeasibility/Resources/files.png","hash":"8a394d03a63df69a210df23b0a5e1b06fae87ae3","modified":1627541160852},{"_id":"source/_posts/iOS/Network/Resource/IP.png","hash":"d1e2d3d8913024b6e04273dbd265d67c31f6da82","modified":1627541160684},{"_id":"source/_posts/iOS/Network/Resource/UDP.jpeg","hash":"8ed5d7dc77203f9c76e9a3d86955e12c2acf598d","modified":1627541160673},{"_id":"source/_posts/iOS/Network/Resource/IP1.png","hash":"9b2dd2e9a330e97ed7347890e4ee5fd7fe9b2a8a","modified":1627541160681},{"_id":"source/_posts/iOS/Network/Resource/falkHead.jpg","hash":"3f8d4dd0627ad5d0798d6a6dd40328a9f88e5ab1","modified":1627541160671},{"_id":"source/_posts/iOS/Network/Resource/stream1.png","hash":"45a1969058909965cb4c7f47e802f16c7a45837b","modified":1627541160668},{"_id":"source/_posts/iOS/Resources/CrashLog/sd_doctor_ios  2019-3-26, 7-02 PM.crash","hash":"84c28c21349ba4870f91676cc600c9737a1ef40f","modified":1627541160609},{"_id":"source/_posts/iOS/Resources/MessageForward/oc_message_froware.png","hash":"4038e408b9563622cad50fe73bd869154e405f62","modified":1627541159484},{"_id":"source/_posts/iOS/Tools/Resources/vim.png","hash":"7b585200bb64048c738af838d70f34ded726954f","modified":1627541159466},{"_id":"source/_posts/Flutters/Guidance/Dart.png","hash":"489b2a968c93125bed2c2ad34231a96ea4a75655","modified":1627541160883},{"_id":"source/_posts/iOS/Resources/universal_link.png","hash":"e845749355e15e5cc48bbe5fa55ef2e261234577","modified":1627541159477},{"_id":"source/_posts/iOS/Frameworks/FramworkProgramme/universal_link.png","hash":"e845749355e15e5cc48bbe5fa55ef2e261234577","modified":1631774550067},{"_id":"source/_posts/iOS/Resources/Interview/RunLoop_1.png","hash":"74a7af62610b92b8373b38a260815a370d8bfca0","modified":1627541158341},{"_id":"source/_posts/iOS/Languages/Assemble/assemble.pdf","hash":"ce3ce2c52d734de42cdf924fdafd78116e06bdc1","modified":1627541160818},{"_id":"source/_posts/iOS/Resources/iOSMap/ios_study.png","hash":"f063e0e8c518d3b0ad964bfe6bc74edbf3974fc5","modified":1627541159480},{"_id":"source/_posts/iOS/ProjectManager/resources/Screen Shot 2019-05-19 at 4.20.37 PM.png","hash":"c55e40684bed6756b4e3a2b92299528e908f93b4","modified":1627541160612},{"_id":"source/_drafts/Computers/NetWork/Protocols/TCP-IPStack.png","hash":"b680b274d62949a9d44ad48fb1228496ce059053","modified":1627541160918},{"_id":"source/_posts/Android/Adaptor.pptx","hash":"0a5dbf1f95a6f65e28264e6b892083ae1b2edd06","modified":1627541160887},{"_id":"source/_drafts/Computers/NetWork/Protocols/Protocols_2020.pdf","hash":"9a18efc16fa2f43953b7db63a6a17d87cbdada17","modified":1627541160923},{"_id":"themes/archer/_.git/objects/pack/pack-2db5a9e2ba995d40660b0afd8518c1c99455d5de.pack","hash":"a7252717dbcef89b4e56594724a83f5c59778086","modified":1631775929700},{"_id":"source/_drafts/Computers/NetWork/Protocols/ProtocolStack.png","hash":"389cfc2e539e6d76d5844fe740e1274fa77e6241","modified":1627541160951},{"_id":"source/_posts/iOS/Network/documents/BLE权威教程.pdf","hash":"a9189d6fef9c8c1b7d1ffe0aa4be3fba22d715ea","modified":1632293800634},{"_id":"source/_posts/iOS/Network/documents/BLE4.0低功耗蓝牙协议总结.pdf","hash":"843335e9d7a5974dea8b4e97b3248c233eafb2f9","modified":1632293800560},{"_id":"themes/archer/_.git/objects/pack/pack-505068187f6bcf52a01fd309be56269d169744c4.pack","hash":"f2dbafb4177ce55f63ce1c8e54117796925a2ceb","modified":1631775930009},{"_id":"source/_posts/iOS/Resources/CrashLog/sd_doctor_ios.app.dSYM/Contents/Resources/DWARF/sd_doctor_ios","hash":"8adb8f885cf7463ef6192d22e4e56615c3e4a1c7","modified":1627541160184},{"_id":"public/content.json","hash":"9157e6bd198a7f144416d60588dc1e4c4458ee04","modified":1632294107428},{"_id":"public/about/index.html","hash":"4e5831439d719f0c2b08aaabc9e091a75e72abaf","modified":1632294107428},{"_id":"public/2021/09/22/iOS/Webs/DCloud/DCloudGuideline/index.html","hash":"fa68ac28151b6b42e52e1656993464b9d33eb58f","modified":1632294107428},{"_id":"public/tags/index.html","hash":"b6805aae674547484fbba6e300eb3877a703b330","modified":1632294107428},{"_id":"public/2021/09/19/iOS/Network/BLuetooth/index.html","hash":"394663a43bc640e88342651f467b304148649bfa","modified":1632294107428},{"_id":"public/2021/09/16/iOS/Languages/Objective-C/MemoryManagement/index.html","hash":"ceb4ed919b19fd696e7fe15e15670cf174efea29","modified":1632294107428},{"_id":"public/2021/09/13/iOS/ProjectManager/Cocoapod/UmbrellaFramework/index.html","hash":"03ebb93df73d007da7f90e8645a2089b5a0f422a","modified":1632294107428},{"_id":"public/2021/09/09/iOS/ProjectManager/Cocoapod/Cocoapod/index.html","hash":"d1cb4c401ad0d6c9b8bb861219043fac24c871ba","modified":1632294107428},{"_id":"public/2021/09/02/Invest/HIllHouse/index.html","hash":"3f5ae3cf1d9b48aaeb2d457a2c7183f719623519","modified":1632294107428},{"_id":"public/2021/09/02/Invest/index/index.html","hash":"ccdc8e674fc3c46039f0bc1173128ab79c012b3d","modified":1632294107428},{"_id":"public/2021/09/01/iOS/Languages/CAlians/CMake/index.html","hash":"d3d96b166defbb70299c43dedf014de6c468c00b","modified":1632294107428},{"_id":"public/2021/08/28/iOS/Languages/CAlians/C++/Guidelines/FuncPtr/index.html","hash":"829b19b8a2610fdcc12ca795145b478c30ba186d","modified":1632294107428},{"_id":"public/2021/08/28/iOS/Languages/CAlians/C++/Guidelines/using/index.html","hash":"71100cdd402663c498e682f33ce8e2fddbd5516a","modified":1632294107428},{"_id":"public/2021/08/28/Web/ChromeExtentions/Guidlines/index.html","hash":"b8bf682526f100c15ee12549bc84f531b98d179e","modified":1632294107428},{"_id":"public/2021/08/25/iOS/Languages/CAlians/ToolChain/index.html","hash":"ad1f53f9dd718d4966ea9a5b7b93048469404c19","modified":1632294107428},{"_id":"public/2021/08/24/iOS/Languages/CAlians/C++/Guidelines/Guidelines/index.html","hash":"8329c1804fc9e523aa580ea4d2b64d25282481c9","modified":1632294107428},{"_id":"public/2021/08/24/iOS/Webs/React-Native/DualComunication/index.html","hash":"7884d76210f03c61bde97be7b9be66400e4cc595","modified":1632294107428},{"_id":"public/2021/08/10/iOS/Tools/a-shell/index.html","hash":"30da3150a06f80434f18db35db99c9a93ea3b70a","modified":1632294107428},{"_id":"public/2021/08/09/iOS/Webs/React-Native/Navigation/index.html","hash":"1a8ab809208c0811425a3a8f086a3b987f7f2e5e","modified":1632294107428},{"_id":"public/2021/08/04/Web/JavaScript/TypeScript/GuideLine/index.html","hash":"46b613bd8d2d2a338215d017e12bfd720d7c5e1f","modified":1632294107428},{"_id":"public/2021/07/31/iOS/Interview/InterviewCollections/InterviewCollections/index.html","hash":"867ff1556fe25d635fc56f0b8cb36632f894245f","modified":1632294107428},{"_id":"public/2021/07/31/iOS/UI/WebKit/WKWebView/index.html","hash":"eaa43f1eda73f004cef51b511a706b6beda62760","modified":1632294107428},{"_id":"public/2021/07/29/iOS/ProjectManager/Tapd/index.html","hash":"338fcd555ec7b0bf65d6773fc2421879215c96fe","modified":1632294107428},{"_id":"public/2021/07/29/iOS/ProjectManager/CI/Jira/Jira/index.html","hash":"be5f856a5d5ed55dc32c28f148f70dec16c97986","modified":1632294107428},{"_id":"public/2021/07/29/iOS/Games/Games/index.html","hash":"a0174948f3e609d564c80edd85d3ee0eaf0ded65","modified":1632294107428},{"_id":"public/2021/07/29/iOS/ProjectManager/CI/Applestore Connect/App Store Connect API/index.html","hash":"9e459c3de68b4a514152e4c215207e0dbda5d961","modified":1632294107428},{"_id":"public/2021/07/29/iOS/Interview/Uncommon/index.html","hash":"ea5a2b78871ffa9f1c839408219c25f8e010d8f9","modified":1632294107428},{"_id":"public/2021/07/29/Flutters/TechnologyFeasibility/Resources/flutter/index.html","hash":"d915dee5e4156aa5286cb4ce84fd4d58ce9bff17","modified":1632294107428},{"_id":"public/2021/07/29/iOS/Performance/Performance/index.html","hash":"6a708c52880e2668188f1787710e1d9faefcfe22","modified":1632294107428},{"_id":"public/2021/07/29/iOS/Languages/CAlians/C++/C++/index.html","hash":"3f581ab0cfd618c26f6310f483b470c7ace063bb","modified":1632294107428},{"_id":"public/2021/07/29/iOS/Interview/Summery2/index.html","hash":"1880682281fef6a30142bf1c1446a9b9071e1802","modified":1632294107428},{"_id":"public/2021/07/29/iOS/Interview/InterviewCollections/Tencent/index.html","hash":"84ffd6e9e8c62aa404f7155fa350fe63617af3c7","modified":1632294107428},{"_id":"public/2021/07/29/iOS/Concepts/index.html","hash":"77908123cfed19bc66aa9b89482f24a730a25091","modified":1632294107428},{"_id":"public/2021/07/29/iOS/Interview/InterviewPre/index.html","hash":"156f7ad4a6ea374f484f4e20cf7ea406b3d5e483","modified":1632294107428},{"_id":"public/2021/07/29/iOS/ProjectManager/ShellScripts/Simulator/index.html","hash":"55e32863b59cecc296aa00ec53c6ef8c3eee25c1","modified":1632294107428},{"_id":"public/2021/07/27/iOS/Interview/InterviewCollections/Baidu/index.html","hash":"a52c821b4f7f74669aea7ebbe14b1cd5e4ed62ff","modified":1632294107428},{"_id":"public/2021/07/26/iOS/Frameworks/FramworkProgramme/index.html","hash":"8a385b1c1e7f9fc92f824f86aef241329114f557","modified":1632294107428},{"_id":"public/2021/07/23/iOS/Languages/Swift/Generic/index.html","hash":"48e2cdf2209bc40196a837459525cd0882e51ace","modified":1632294107428},{"_id":"public/2021/07/23/iOS/Languages/Swift/Codable/index.html","hash":"6f3d3cb1c56d6a0c78f80068f90752137874260f","modified":1632294107428},{"_id":"public/2021/07/23/iOS/Languages/Swift/Class/index.html","hash":"d3115a56b31e9f63dd8e78ba7a871f01337d12b5","modified":1632294107428},{"_id":"public/2021/06/11/iOS/Webs/JavaScriptCore/index.html","hash":"ca6ee64183f7b2b74b47c26c980da5dfacc0e179","modified":1632294107428},{"_id":"public/2021/06/11/iOS/UI/Render/OffScreenRender/index.html","hash":"39bee9e346b8341bb0fc14ef1adf183149041dc7","modified":1632294107428},{"_id":"public/2021/06/07/iOS/Performance/Exceptions/WiredPointer/index.html","hash":"b2c06a33be4bc3b9403e103803bafd707b527614","modified":1632294107428},{"_id":"public/2021/06/05/iOS/Performance/Exceptions/ ZombieObject/index.html","hash":"2aa9530a6ac22962dd861724333c07d383e40d99","modified":1632294107428},{"_id":"public/2021/06/04/iOS/DesignPattern/index.html","hash":"231981b586518d9435ac72d76bcd7b74f90d0540","modified":1632294107428},{"_id":"public/2021/05/28/iOS/UI/CoreImageFilter/index.html","hash":"0cf39b1b261669c34f44d9dcb0fffbebc2fbebc6","modified":1632294107428},{"_id":"public/2021/05/25/iOS/Interview/Interviewes/index.html","hash":"a74f24ae7e1fca571ca3bb0fccf1da69a226702e","modified":1632294107428},{"_id":"public/2021/05/25/iOS/Interview/InterviewQuestions/index.html","hash":"0c8924e9891fba79edfa75f8f7d2d5aa6be7352f","modified":1632294107428},{"_id":"public/2021/05/25/iOS/Interview/Summery/index.html","hash":"aa6d9ad7dc968777746970120cd63fe6d2cd7d8b","modified":1632294107428},{"_id":"public/2021/05/22/iOS/Languages/Objective-C/Category/index.html","hash":"612aff4e3c5caf1a68e3bc02efb2f185d04c9158","modified":1632294107428},{"_id":"public/2021/05/22/iOS/Languages/Objective-C/KVO/index.html","hash":"c059c2bc2ffc1324e551bc53410ee075e69cfa28","modified":1632294107428},{"_id":"public/2021/05/22/iOS/Languages/Objective-C/KVC/index.html","hash":"8547e3037cc044cdc1cd26c7890a9ee9d032ec3f","modified":1632294107428},{"_id":"public/2021/05/22/iOS/Languages/Objective-C/NSTimer/index.html","hash":"d546bc3410b281993350c9fd9efbb69e5c2ea669","modified":1632294107428},{"_id":"public/2021/05/05/iOS/Tools/Xcode/index.html","hash":"661aa2f287bc85f7fc7821661aea6ebdfdc46686","modified":1632294107428},{"_id":"public/2021/04/20/Web/CSS/CSSGuidance/index.html","hash":"c63d7621e0a3e96333a5aba281005c05f83bd4b1","modified":1632294107428},{"_id":"public/2021/05/04/iOS/Performance/iOS 之离屏渲染/index.html","hash":"40911e9ddcc903b884fe6994c230a18d8b317c9e","modified":1632294107428},{"_id":"public/2021/04/20/Flutters/TechnologyFeasibility/TechnologyFeasibility/index.html","hash":"1de8bf481c3733895f795c3a1ec48a3310367730","modified":1632294107428},{"_id":"public/2021/04/20/Flutters/TechnologyFeasibility/Technologies/index.html","hash":"c5aafa7496016cb665c03af18b2d47a3ba551c58","modified":1632294107428},{"_id":"public/2021/04/20/Web/JavaScript/JavaScript/index.html","hash":"0036169df34bb6e89f8be03785d4662a423008d2","modified":1632294107428},{"_id":"public/2021/04/20/Flutters/Guidance/Guidance/index.html","hash":"133874c575217cc40409988a960524efb740aab5","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Concurrency/Concurrency/index.html","hash":"8d342b8b43b4137cab91420fbc5b4489890516b4","modified":1632294107428},{"_id":"public/2021/04/20/Web/JavaScript/Technologies/index.html","hash":"d519c19a7b38d18333ba687110753d8f87ae4772","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Concurrency/MultiThread/index.html","hash":"4a24e44e32ee687db3ca3d187a5e5c955031f981","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Concurrency/RunLoop/index.html","hash":"ba320c6af00b76e324c1a76aba9e2bad6f0e5010","modified":1632294107428},{"_id":"public/2021/04/20/iOS/DataPersistence/DataPersistence/index.html","hash":"044577e73eccd7761543d55b3aab2c4c2a5aad2c","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Documents/Jazzy/index.html","hash":"21a728ba1bed46f748f9520600faaad26c218447","modified":1632294107428},{"_id":"public/2021/04/20/iOS/DataPersistence/DataBase/index.html","hash":"98daf71d79f3b4642c4e0db7b93c358d95cb1b29","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Libraries/OpenLibs/index.html","hash":"26de316e501b38752dddb2402923befda3cd1b13","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Medias/Audio/index.html","hash":"f45eec1a1930ae0d3cab8f52a5c43363f0bfc409","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Medias/Images/index.html","hash":"755672ef9ca0028e0b361a1cafe237971d359026","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Medias/Medias/index.html","hash":"89c052cf787554bb056185a3ebfdae52393c25ee","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Libraries/WebViewJavascriptBridge/index.html","hash":"316178216473780ca4c26d45e01994035dc33148","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Medias/Vedio/index.html","hash":"44a6e60aba3a71466a9395074c422fa806643ab5","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Network/AppSign/index.html","hash":"acac182d64f82436a3c0b71e52de141b614e6bf4","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Network/HTTP/index.html","hash":"52a6ae2dea76f2a770c31283637058562f831ad2","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Network/Logs/index.html","hash":"aa44a117c63bc970be0d8db22b7c2fdd491a3b33","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Network/NetSecure/index.html","hash":"9b122e7aa84eaa39064e3826f9441580b75c6bd6","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Network/Network/index.html","hash":"843aa1fcde7ef7affbf216642fe20960b5fb6d96","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Network/NetworkOptimize/index.html","hash":"213f4c018ecee44b8b53ae0e6d0e612e18fe2347","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Network/服务认证/index.html","hash":"6d4f9fccd8e209e34dfe16c7922945b0fb79142c","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Network/Protocols/index.html","hash":"d26c48467cb983e6f88629671fc05261893ec793","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Performance/GCCAttribute/index.html","hash":"cd6c53eccb6410c606e99c87d95dcb03e08197e6","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Performance/AppThin/index.html","hash":"b6e6f7f00a114774dcee0c44fb69fb8c235269ae","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Performance/LaunchOptimize2/index.html","hash":"7472f122f1f9b336492dd0a7b03446982d1cb410","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Performance/LaunchOptimize/index.html","hash":"ad0d7cbcc334c4c610e8414c73e052ec423a8e9c","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Performance/MacOFiles/index.html","hash":"b48b1a7ae6948d6ca87c54b9f383dd782d392f61","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Performance/PowerOptimize/index.html","hash":"b9067f13e51f474c2c79de1425bb23bdf4ac0c01","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Performance/dyldVariables/index.html","hash":"d76f31d763aa177b7820c3727f64b81c3ffb4930","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Performance/dyld/index.html","hash":"a3dbdc229363ff0ebee6ea65996fb8dccd96de8e","modified":1632294107428},{"_id":"public/2021/04/20/iOS/OS/Linux/index.html","hash":"e66bab525b50ab6c445c02e02609d7a9e3977896","modified":1632294107428},{"_id":"public/2021/04/20/iOS/OS/OS/index.html","hash":"fb8d006f1c1a7550b1d5bf796360c8890b5111b5","modified":1632294107428},{"_id":"public/2021/04/20/iOS/OS/ShellConfigs/index.html","hash":"81bdd3b4d55dc98c274fd2170ebe0666e6efa847","modified":1632294107428},{"_id":"public/2021/04/20/iOS/OS/Unix/index.html","hash":"e681bf257607a14892228d75949710c1da2f9580","modified":1632294107428},{"_id":"public/2021/04/20/iOS/ProjectManager/AutoRelease/index.html","hash":"2c9a85f75b4ee5ff6cdee591daa1cbf70925790e","modified":1632294107428},{"_id":"public/2021/04/20/iOS/ProjectManager/CI/index.html","hash":"791c45490e083aba9ab7698ba7b1e0d8585accb9","modified":1632294107428},{"_id":"public/2021/04/20/iOS/ProjectManager/EnvironmentsVaraible/index.html","hash":"5f379508387c1e5e8006632249db35c8a38265a2","modified":1632294107428},{"_id":"public/2021/04/20/iOS/ProjectManager/ProjectManager/index.html","hash":"3fff754449924046b911ba555f01825045fea9d8","modified":1632294107428},{"_id":"public/2021/04/20/iOS/ProjectManager/Fir&PGYing/index.html","hash":"916f84e2d6d79accd012990a2c57849dd3eb4ed8","modified":1632294107428},{"_id":"public/2021/04/20/iOS/ProjectManager/ZenTao/index.html","hash":"d8ea6c9363130528ec7e3e910a6cc0eeaea33ca0","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Tools/Charles/index.html","hash":"c09a64b01b76936fcfc3f7091792b29cc914c4bf","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Tools/CocoapodMaker/index.html","hash":"91920cf7fa119aba63fcb02234e94c6b9f091742","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Tools/CocoapodGuidance/index.html","hash":"46eaff8262273b253c22037d79f4c48d50040b27","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Tools/Fastlane/index.html","hash":"ac79ecd19639b0178094245b111e4087b530d5c2","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Tools/GitSpecification/index.html","hash":"27427970fe8960ecdbc2d219466028a8e485d19a","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Tools/LLDB/index.html","hash":"0ae783e4647429b56d25f1b764d95e0bb78d5dd4","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Tools/Monitors/index.html","hash":"fc400cf944bba049c69d56b27b33cea1dd0c0372","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Tools/OmniGraffle/index.html","hash":"b07b07cc5e1c2d57e4a502b3512caec7d109dd43","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Tools/Reverse/index.html","hash":"2213d4d5854379ca0b1ffb3aa4cd37f5679a7719","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Tools/iOSTools/index.html","hash":"09d4cac9531d489e8fea043683f558559b0e0c50","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Webs/Hybrids/index.html","hash":"9d428241ef6ef7b79ae27f76b607c0757f3ab303","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Webs/JSPatchPrinciple/index.html","hash":"b7e6b2adef9bb2ca43ea614223b4aa67157c4122","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Webs/Vue/index.html","hash":"226a11f88d9c1800b9dfccabaf90bc669ace5f7c","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Games/Engine/index.html","hash":"8ad3ca1bc4df5d1e90bafb2c7cbf1e063a83551b","modified":1632294107428},{"_id":"public/2021/04/20/iOS/WWDC/WWDC2019/index.html","hash":"fc699ba3afae8b02122ad3da40e0f37d31ee6a4f","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Games/Lua/index.html","hash":"3fccec8cd36059e0a577b874b63a05cc73a53074","modified":1632294107428},{"_id":"public/2021/04/20/iOS/UI/Animation/index.html","hash":"ab21db8bc3b0f79ca4e8a31709ec4121a99d40c5","modified":1632294107428},{"_id":"public/2021/04/20/iOS/UI/CoreText/index.html","hash":"478541e06ab79dc5afdfebbe72d4de72dc2836bf","modified":1632294107428},{"_id":"public/2021/04/20/iOS/UI/TextKit/index.html","hash":"90045db2cd426153a744781700232f05a6d50aa5","modified":1632294107428},{"_id":"public/2021/04/20/iOS/UI/UI/index.html","hash":"68c8aa075154a45910dd5b5b55ed2f90c602cbb0","modified":1632294107428},{"_id":"public/2021/04/20/iOS/UI/UserExperences/index.html","hash":"7b22ebe0f714fb3c24b4fa9e402ca7be5a21a62a","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Objective-C/NSDIctionary/index.html","hash":"5ead26a8b4ce83989921869f350d51f975566f2d","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Objective-C/Objective-C/index.html","hash":"db86b71b8aa59bc7854e96bc8716b6823f7ff609","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Objective-C/Runtime/index.html","hash":"e9fdd375bc4aa30bb54c6aed075b228e4756d1a9","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Objective-C/Types/index.html","hash":"904f06bc29f7444be056608897c5b6b8079999d6","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Objective-C/iOS之KVC/index.html","hash":"763c52e439df217d06ee8f70b60f2307b23e8cf3","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/PHP/PHP/index.html","hash":"76c18b80988d7580672d626cbaf9b157daae4371","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Python/Pyhon/index.html","hash":"2c446942947fa710b14bc5a77df47ebff2ba7397","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Shell/Shell/index.html","hash":"bee7832884b556a039a51f11a4c99f9e58dc2c45","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Swift/Constructor/index.html","hash":"65f03d645e0f95bc26bd579f851173765716ee31","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Swift/Swift/index.html","hash":"afcf7a879c35135c1e7ed5f5c60711d69134db05","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Swift/Value&Reference/index.html","hash":"792709772b3d4ca4dca35e8a50aa46a3defec2d6","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Performance/Exceptions/Excetions/index.html","hash":"ee51be409daec0188cb0deea6b36eabb4744ce7a","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Performance/Exceptions/CrashLogManuelResolve/index.html","hash":"21c2b7f71c78b31259915b37f54c9f0209d945a0","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Performance/KSCrash/KSCrashGuidline/index.html","hash":"a91fc5ed053b00f0d7a1daab1f12e61862f1ea94","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Tools/Appium/AppiumGuidance/index.html","hash":"3248bb2cd627f6e6f9ba7784d7dc535e3ce845b9","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Tools/Vim/VimOperation/index.html","hash":"7859d3a2fd962889d61c0a43dc58c6d61158dc69","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Webs/React-Native/NativeCommunication/index.html","hash":"e1f81152c17ab21560b254a3d85f925e8bb8bf28","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Webs/React-Native/NativeComponents/index.html","hash":"e23cdb9144bbbfe5c925676fe15c8909cebdb983","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Webs/React-Native/NativeModule/index.html","hash":"5c0c1661eedb2ae15aece875ecd841d12c1ca2da","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Webs/React-Native/React-Native/index.html","hash":"2764883da604afb365e224f8d873810170b42b10","modified":1632294107428},{"_id":"public/2021/04/20/学习笔记/iOS/iOS之并发编程/RunLoop/index.html","hash":"d3695c756ebb331803fbc79662eee1998b494878","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Webs/Flutter/Flutter/index.html","hash":"67fd3a82f7dbbec61a1e35488616bbccf4fee018","modified":1632294107428},{"_id":"public/2021/04/20/iOS/UI/Layouts/Layouts/index.html","hash":"bee69697217b6521142cf32198351be4fa679f64","modified":1632294107428},{"_id":"public/2021/04/20/iOS/UI/Layouts/AutoLayout/index.html","hash":"69e93ae0d424c5d4b21f91dd3dbdd923dfa1561e","modified":1632294107428},{"_id":"public/2021/04/20/iOS/UI/Render/Render/index.html","hash":"91799cc4cc70fefcee3aa5262be08de4f4873650","modified":1632294107428},{"_id":"public/2021/04/20/iOS/UI/WebKit/WebKit/index.html","hash":"233b95e00935f75f5aa245838b92a57a8273a5f3","modified":1632294107428},{"_id":"public/2021/04/20/iOS/ProjectManager/CI/Jenkins/Jenkins/index.html","hash":"ef63cf936fd963c9aa8cc059857b8cb3a0e114db","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Webs/Flutter/Dart/Dart/index.html","hash":"d493bf1673451069c08573012055227668b80955","modified":1632294107428},{"_id":"public/2021/04/20/学习笔记/iOS/iOS之UI界面/UI布局/布局/index.html","hash":"e0a07c91281d7c1499d4928843badd26da6d90e1","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Performance/KSCrash/Princeples/index.html","hash":"9f162111b3655068d2b4b32b201f785b9dd0c4b4","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Objective-C/OCAdvance/index.html","hash":"0414e61c9472779c70fcbaebf354ee0706111c83","modified":1632294107428},{"_id":"public/2021/04/20/iOS/AppleService/index.html","hash":"590c418f7ba3b2831e8a25ef22edca8b34c7b200","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Architecture/index.html","hash":"0a9a64a803e3e624c30941672290d2d46d5a415b","modified":1632294107428},{"_id":"public/2021/04/20/iOS/CodeRestructure/index.html","hash":"7b59367566a7d14a22b4a3f937fa0cc1dfa80b0a","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Components/index.html","hash":"a9f1d970d0f1e575ea5f8be33eedb78330f34ac0","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Ecosystem/index.html","hash":"0cc8d85c555f8ee65620887208325a2d43430ffe","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Events&Responder/index.html","hash":"44b5d97acd0727305a771bb9e55f309082e422aa","modified":1632294107428},{"_id":"public/2021/04/20/iOS/FrameWorks/index.html","hash":"14c5fd12ca25ea07f989fce5dc595274670075f3","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Guidelines/index.html","hash":"97d5303b24fbd5ee77c55b001fb3f2722401ae1c","modified":1632294107428},{"_id":"public/2021/04/20/iOS/MessageDispatch/index.html","hash":"0623eea7f84fee2db38f345be59404fbfedd4ff0","modified":1632294107428},{"_id":"public/2021/04/20/iOS/SDK/index.html","hash":"7e348ef009c7013abbc2aaa054fb3a18552bb528","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Xcode/index.html","hash":"37989b609c933a2ad527e9ba6d7b08543dc9569c","modified":1632294107428},{"_id":"public/2021/04/20/iOS/UnitTest/index.html","hash":"897ba9394a7439ec67a729d103ef5915286cc899","modified":1632294107428},{"_id":"public/2021/04/20/iOS/CodeManager/index.html","hash":"8f81a0b8e7d5709eb30f3b0a30c45d5df862524d","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/AppleScript/AppleScript/index.html","hash":"f717d4d30e70ab4ef72d279a0898931fcf75940c","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/CAlians/Interupt/index.html","hash":"141448d44fe89cfb01a70d057a84dc02abfc2909","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/CAlians/boost-b2/index.html","hash":"5f993e3572a71482b8a154fce1faea5adc6224aa","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Assemble/Assemble/index.html","hash":"91b2eb8258fb56379dcf16699a52fec8af0dd123","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Java/Java/index.html","hash":"19bf104df15a21e1023f421fb4c8b92974f91917","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Objective-C/Block/index.html","hash":"18bfa14071a9acf4537db648fbc2945e75f5cf54","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/Objective-C/Memory/index.html","hash":"f819e7cf8942d2cfded175eb0018ddec0a14291e","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Blogs&Blogger/index.html","hash":"0429064c43bb5fbaa2134a6784b30baf13d746e4","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/MySQL/MySQL/index.html","hash":"95f0bd92568520eac58104702b88bb596e68af13","modified":1632294107428},{"_id":"public/2021/04/20/iOS/Languages/CAlians/Compiler/g++/index.html","hash":"240008c4a62b247376f111447ca7194fe750a54d","modified":1632294107428},{"_id":"public/archives/page/2/index.html","hash":"17f0e5a0d9f86018cfc87032f0bf82efc05fc4a7","modified":1632294107428},{"_id":"public/archives/index.html","hash":"2fa4eac3229844c8cdbaed51259116885bdfc51a","modified":1632294107428},{"_id":"public/archives/page/3/index.html","hash":"e708dfb60a6c01b0b94d762de34c8ed1fce5da1e","modified":1632294107428},{"_id":"public/archives/page/4/index.html","hash":"f1ffd8b5021bfac3ac644a32173681379ff019e5","modified":1632294107428},{"_id":"public/archives/page/5/index.html","hash":"ba5968445f0cd870ffb997b0c36bb0ffba279d7b","modified":1632294107428},{"_id":"public/archives/page/6/index.html","hash":"01ce5d77432d1dd8cad779907b9db4778ee95dc0","modified":1632294107428},{"_id":"public/archives/page/7/index.html","hash":"02fc5c9f6003886bdffccd3bc0aa1da533a5b589","modified":1632294107428},{"_id":"public/archives/page/8/index.html","hash":"b939e4c050f5a0292c9d6c63f8db6895ca547024","modified":1632294107428},{"_id":"public/archives/page/9/index.html","hash":"dccdcfafc01187d90846b247aee85187cbe670d0","modified":1632294107428},{"_id":"public/archives/page/10/index.html","hash":"cc626c4528c03a18f273835a5d94e6f1336d49a6","modified":1632294107428},{"_id":"public/archives/page/11/index.html","hash":"0e8e6d8e6d88a3fefadf95f247ad4e4dfd08399d","modified":1632294107428},{"_id":"public/archives/page/12/index.html","hash":"b2752c58c4d751dc17a6839033cf00bbc60cc53f","modified":1632294107428},{"_id":"public/archives/page/13/index.html","hash":"89078f6f87638a363f011cc7a260d0c7812cd7c9","modified":1632294107428},{"_id":"public/archives/page/14/index.html","hash":"e7c9da6d3845fa384cf59fde6560f06c2d5e9b59","modified":1632294107428},{"_id":"public/archives/page/15/index.html","hash":"bfc914523b819e99b7e4a7c6bbb8d1c65c8eff35","modified":1632294107428},{"_id":"public/archives/page/16/index.html","hash":"1454f34c60dbbe923647ce0a31979217cd66e863","modified":1632294107428},{"_id":"public/archives/page/17/index.html","hash":"53ae239c0190d2fd1e25dd5d277e33f9d41b0878","modified":1632294107428},{"_id":"public/archives/page/18/index.html","hash":"b822aaa15c0e555f8f5dc5b209651d41d497352e","modified":1632294107428},{"_id":"public/archives/2021/index.html","hash":"c4aa27237f2b1720503841cd0d4c10e540cdfadd","modified":1632294107428},{"_id":"public/archives/2021/page/2/index.html","hash":"0a42549472e5d04fce32f36ba279e690e3fb280b","modified":1632294107428},{"_id":"public/archives/2021/page/3/index.html","hash":"3f5d25c404e73b4e0c594c92c2bb817f66b96dd4","modified":1632294107428},{"_id":"public/archives/2021/page/4/index.html","hash":"3778f25442afa9f54d96d932de6fc962e41706ec","modified":1632294107428},{"_id":"public/archives/2021/page/5/index.html","hash":"150fe75907c8de4a6848bc4531b3ceea62da6172","modified":1632294107428},{"_id":"public/archives/2021/page/6/index.html","hash":"6a1428fdefe4bc3422d52bf817124b4813225ab7","modified":1632294107428},{"_id":"public/archives/2021/page/7/index.html","hash":"388e1973134f4713145c6ec59c401315eb2f442f","modified":1632294107428},{"_id":"public/archives/2021/page/8/index.html","hash":"bc3cd1c4c9146a12e3d59b6f53a84c04d8c4431e","modified":1632294107428},{"_id":"public/archives/2021/page/9/index.html","hash":"1f8747d8516678a78b81941f27c51f2af8283bc9","modified":1632294107428},{"_id":"public/archives/2021/page/10/index.html","hash":"90ba9c6af5a0c63a859b0c499bfef32cf3ab1552","modified":1632294107428},{"_id":"public/archives/2021/page/11/index.html","hash":"ea66552c02867c955d59fe93fadd58d7e9924c24","modified":1632294107428},{"_id":"public/archives/2021/page/12/index.html","hash":"99cf95e0b1e5a710620c73ea0ac568f91900e86c","modified":1632294107428},{"_id":"public/archives/2021/page/13/index.html","hash":"9a5e73821dad5cfe969b587edb7cfde2f451ae43","modified":1632294107428},{"_id":"public/archives/2021/page/14/index.html","hash":"8ac9b4942ad29ce9fda3a23593919dd74c1efd1f","modified":1632294107428},{"_id":"public/archives/2021/page/15/index.html","hash":"ccdbaa4380c2b2d5565d3366613f42dacc60a4eb","modified":1632294107428},{"_id":"public/archives/2021/page/16/index.html","hash":"e4af8671102fd8fb39289ee8a746ce1ba50acc5c","modified":1632294107428},{"_id":"public/archives/2021/page/17/index.html","hash":"b36245e2b310cb2bea8509a9aeeacf78a5ee60d8","modified":1632294107428},{"_id":"public/archives/2021/page/18/index.html","hash":"b9b63eab5a5f9ea059a2cde6f952f300d03152f1","modified":1632294107428},{"_id":"public/archives/2021/04/index.html","hash":"bb238d4a2bd5c4d0de9b9ff59ee888823a02f763","modified":1632294107428},{"_id":"public/archives/2021/04/page/2/index.html","hash":"90129842c89897dc63a399dd4f0b02b5524b7844","modified":1632294107428},{"_id":"public/archives/2021/04/page/3/index.html","hash":"d1a5c7bf20608e422c9dee65428d0fcf5122d917","modified":1632294107428},{"_id":"public/archives/2021/04/page/4/index.html","hash":"06e617f312de6cd3b2e15d41224a348396a2c4d9","modified":1632294107428},{"_id":"public/archives/2021/04/page/5/index.html","hash":"ba82898712080d231030acafa2c4f1194048acc0","modified":1632294107428},{"_id":"public/archives/2021/04/page/6/index.html","hash":"f067f117b776c9685d08816f26b61d176c29019b","modified":1632294107428},{"_id":"public/archives/2021/04/page/7/index.html","hash":"07c22080d974f9798ddfb28181c64b3ef2b5a7a3","modified":1632294107428},{"_id":"public/archives/2021/04/page/8/index.html","hash":"d89468ee8f8f8e8daba90b6bf8692b64a04c8ecc","modified":1632294107428},{"_id":"public/archives/2021/04/page/9/index.html","hash":"4c1b12cf3fac242aab5687eba914e4886a7ed6c6","modified":1632294107428},{"_id":"public/archives/2021/04/page/10/index.html","hash":"6e287bc8519f533c91163124e5f5b198cfb6c568","modified":1632294107428},{"_id":"public/archives/2021/04/page/11/index.html","hash":"4ca859ced5a727e09f99f3bc9004c9471b71effc","modified":1632294107428},{"_id":"public/archives/2021/04/page/12/index.html","hash":"79322e930ac168fe13e56cafee2639eaaae1a28a","modified":1632294107428},{"_id":"public/archives/2021/05/index.html","hash":"943bf49e81a56c36c11f0d7b8c41ca831661d8d4","modified":1632294107428},{"_id":"public/archives/2021/07/index.html","hash":"06859a5efc542ea56ae9a015a4404e59edaeb717","modified":1632294107428},{"_id":"public/archives/2021/06/index.html","hash":"2ab1c73ac14720da17bbd5a6e5791943a464f630","modified":1632294107428},{"_id":"public/archives/2021/07/page/2/index.html","hash":"b3925b31ed6d5bc7a9d0a4dd1386c8f0c85ef18f","modified":1632294107428},{"_id":"public/archives/2021/08/index.html","hash":"10b8737cf398294f324d645ccf7ea6acee9f65ae","modified":1632294107428},{"_id":"public/archives/2021/09/index.html","hash":"0afcb542419c26645a9919f4a233742f165ac54e","modified":1632294107428},{"_id":"public/page/2/index.html","hash":"73c4ef113b8a432da4e79551f14d4e3b88a4a22f","modified":1632294107428},{"_id":"public/index.html","hash":"06f22c7771a30535f94fe33ebac159529ecf7a36","modified":1632294107428},{"_id":"public/page/3/index.html","hash":"b864f11d399d9328fdb1d8ad9224a696de80eacd","modified":1632294107428},{"_id":"public/page/4/index.html","hash":"89cc2a09d45a099eb90b0333b8448d3ba291c9cc","modified":1632294107428},{"_id":"public/page/5/index.html","hash":"91cbfd083869bdbd6b4c3689a559250abb3ddc8b","modified":1632294107428},{"_id":"public/page/6/index.html","hash":"61529b4b4d00ce84e94c6462899d14b843dc109f","modified":1632294107428},{"_id":"public/page/7/index.html","hash":"9d354563562f19a31c029427fb0ed4625ba39027","modified":1632294107428},{"_id":"public/page/8/index.html","hash":"1a70d5d279d1de438f45bae4446a7a0ad459c836","modified":1632294107428},{"_id":"public/page/10/index.html","hash":"35d3f98908fd5d5be2080d3f2e8890616d825adf","modified":1632294107428},{"_id":"public/page/9/index.html","hash":"aa74fe4cb3c978c19e83fa7eba0b0f9638281be2","modified":1632294107428},{"_id":"public/page/11/index.html","hash":"07b39f059dfff44500274fca469d6ffc039b7eda","modified":1632294107428},{"_id":"public/page/12/index.html","hash":"e0e0ef6e32d2fbc45d3b4e15a02d908d9b42aef1","modified":1632294107428},{"_id":"public/page/13/index.html","hash":"d10cd9cfdb4c64d0c721065beb9a915f8f4a5ce2","modified":1632294107428},{"_id":"public/page/14/index.html","hash":"91a35efe23c86e5ab9666b209042a3572a7c041d","modified":1632294107428},{"_id":"public/page/15/index.html","hash":"fefed99ae04e55262ea9ad0fa6789c616f346cf5","modified":1632294107428},{"_id":"public/page/16/index.html","hash":"f7797b63c65989859831d01ae6a2cbf7233f872a","modified":1632294107428},{"_id":"public/page/17/index.html","hash":"4feb9776a76144f88ec2cf9882b7be5bb2390d4d","modified":1632294107428},{"_id":"public/page/18/index.html","hash":"faec8479f5be27bc1f85501922a1278e8191dc0f","modified":1632294107428},{"_id":"public/tags/Framwork/index.html","hash":"daca282d1b1d9f27f40c134abcaf2e8977fca4dd","modified":1632294107428},{"_id":"public/tags/蓝牙协议/index.html","hash":"b73fa03bab9caa3bf8c96f0c38f46e85f498b406","modified":1632294107428},{"_id":"public/tags/React-Native-Navigation/index.html","hash":"779ddf279553cee1a7fedcf071584e6bfebb0699","modified":1632294107428},{"_id":"public/assets/beian.png","hash":"a99df13e8eb11db86edebf6e5ac246eb59f4b3c4","modified":1632294107428},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1632294107428},{"_id":"public/assets/favicon.ico","hash":"7628d7a1d9c55b26bb6261da027eff00f7cf2b7b","modified":1632294107428},{"_id":"public/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1632294107428},{"_id":"public/assets/wechat_qr.jpg","hash":"2714bee173c8e78e2ffd7d04bae9dd36e0058032","modified":1632294107428},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1632294107428},{"_id":"public/avatar/avatar.jpg","hash":"bf10362b5f6a970423c103cc380d7eabcc29d1ff","modified":1632294107428},{"_id":"public/css/dark.css.map","hash":"7c29f49c57186d5fd6210095bda6285dfd9837da","modified":1632294107428},{"_id":"public/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1632294107428},{"_id":"public/css/mobile.css.map","hash":"b533eb1869c721246c49109f34df3c7404c65bc1","modified":1632294107428},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1632294107428},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1632294107428},{"_id":"public/scripts/dark.js.map","hash":"3438723e916b0747d1e8505683788060747170e4","modified":1632294107428},{"_id":"public/scripts/main.js.LICENSE.txt","hash":"0d926638cb6182c9d0e5b33d09ed0cc2c7b6ef15","modified":1632294107428},{"_id":"public/scripts/search.js.LICENSE.txt","hash":"f98b4df48bbadc7ab1e8f9fc4618b86d33bdf44f","modified":1632294107428},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1632294107428},{"_id":"public/css/style.css.map","hash":"5b828e90b5fca71d92816ccafd0abaa93ee809de","modified":1632294107428},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1632294107428},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1632294107428},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1632294107428},{"_id":"public/css/dark.css","hash":"f4ce28cfaa1b80ab4f573c08eb32ae7aa9212304","modified":1632294107428},{"_id":"public/css/mobile.css","hash":"0733eb86d1889746a47a9032ec8b67c7bdd29548","modified":1632294107428},{"_id":"public/lib/webfontloader.min.js","hash":"4c69aeb4e4f355912503d1c460e8e7aa6ea6963e","modified":1632294107428},{"_id":"public/scripts/dark.js","hash":"a96e728bda9b341190dd80c9392a5113225b8ab6","modified":1632294107428},{"_id":"public/2021/04/20/iOS/ProjectManager/CI/Jira/Jira.html","hash":"7830de39eecb4b81ef43a8438238eb845f60c159","modified":1632294107428},{"_id":"public/2021/04/20/iOS/FrameWorks/FramworkProgramme.html","hash":"cf95c94ff50193f2afe1535c57959bdd7207c6cb","modified":1632294107428},{"_id":"public/2021/04/20/iOS/ProjectManager/CI/Jenkins/Jenkins.html","hash":"12ac1778058bf2d657cbdcdfcc1759458a8eb644","modified":1632294107428},{"_id":"public/2021/04/20/iOS/ProjectManager/CI/Applestore Connect/App Store Connect API.html","hash":"dec99986ee083a29bc979d66409ee730f9d7bd98","modified":1632294107428},{"_id":"public/css/style.css","hash":"80af49529ae479c3e08bb3e87cb3ce8d9900c6a9","modified":1632294107428},{"_id":"public/lib/jquery.min.js","hash":"ad886e472b3557f3dc7dfa2bc43468ab8d1cef5b","modified":1632294107428},{"_id":"public/scripts/main.js","hash":"368cc76ba7e895e6adbc79c8a4e3481425267acd","modified":1632294107428},{"_id":"public/scripts/share.js","hash":"468359fbd0253d737f0818a6e03931c7db6d1367","modified":1632294107428},{"_id":"public/scripts/search.js","hash":"e1cebcb3df101eb50008739443e1a7b121d00b62","modified":1632294107428},{"_id":"public/scripts/share.js.map","hash":"fdb3d5963555d7a0e17556a005828250b504e40f","modified":1632294107428},{"_id":"public/2021/04/20/iOS/FrameWorks/FramworkProgramme/universal_link.png","hash":"e845749355e15e5cc48bbe5fa55ef2e261234577","modified":1632294107428},{"_id":"public/2021/07/26/iOS/Frameworks/FramworkProgramme/universal_link.png","hash":"e845749355e15e5cc48bbe5fa55ef2e261234577","modified":1632294107428},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1632294107428},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1632294107428},{"_id":"public/scripts/main.js.map","hash":"09cff7fee6cce865416b93e735466ad6a4246bc9","modified":1632294107428},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1632294107428},{"_id":"public/scripts/search.js.map","hash":"4af430eb16cf1d01aa675105ba5d2307b89f1ccb","modified":1632294107428}],"Category":[],"Data":[],"Page":[{"title":"About","date":"2021-04-20T15:59:46.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: About\ndate: 2021-04-20 23:59:46\n---\n","updated":"2021-04-28T02:18:12.072Z","path":"about/index.html","comments":1,"layout":"page","_id":"cktv5rmyn0000iu9k82ifeyt6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","date":"2021-04-20T15:59:46.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\ndate: 2021-04-20 23:59:46\n---","updated":"2021-04-28T02:18:12.073Z","path":"tags/index.html","comments":1,"_id":"cktv5rmyu0002iu9k4j0o2r4r","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git Submodule","_content":"\n[TOC]\n\n## 1. [Git中submodule](https://zhuanlan.zhihu.com/p/87053283)\n\n### 1.1 创建 submodule\n\n在主项目根目录\n\n```shell\ngit submodule add <submodule_url>\n```\n\n### 1.2 拉取 submodule\n\n```shell\ncd /path/to/submodule\ngit clone https://github.com/username/project-main.git --recurse-submodules\n```\n\n或者，在主项目根目录下\n\n```shell\ngit submodule init\ngit submodule update\n```\n\n### 1.3 submodule 更新\n\n对于子模块而言，并不需要知道引用自己的主项目的存在。对于自身来讲，子模块就是一个完整的 Git 仓库，按照正常的 Git 代码管理规范操作即可。\n\nsubmodule 更新分三种情形。\n\n#### 1.3.1 submodule 文件夹内的内容发生了未跟踪的内容变动\n\n进入 submodule 文件夹，按照子模块内部的版本控制体系提交代码。当提交完成后，主项目的状态则进入了情况2，即当前项目下子模块文件夹内的内容发生了版本变化。\n\n#### 1.3.2. submodule 文件夹内的内容发生了版本变化\n\n在主项目中使用 git status 查看仓库状态时，会显示子模块有新的提交。在这种情况下，可以使用 git add/commit 将其添加到主项目的代码提交中。\n\n#### 1.3.3. submodule 文件夹内的内容没变，远程有更新\n\n通常来讲，主项目与子模块的开发不会恰好是同时进行的。通常是子模块负责维护自己的版本升级后，推送到远程仓库，并告知主项目可以更新对子模块的版本依赖。\n\n在这种情况下，主项目是比较茫然的。\n\n之前曾经提到，主项目可以使用 ```git submodule update``` 更新子模块的代码，但那是指 ```当前主项目文件夹下的子模块目录内容``` 与 ```当前主项目记录的子模块版本``` 不一致时，会参考后者进行更新。\n\n但如今这种情况下，后者 ```当前主项目记录的子模块版本``` 还没有变化，在主项目看来当前情况一切正常。\n\n此时，需要让主项目主动进入子模块拉取新版代码，进行升级操作。\n\n通常流程是：\n\n```shell\ncd /path/to/submodule\ngit pull origin master\n```\n\n子模块目录下的代码版本会发生变化，转到情况2的流程进行主项目的提交。\n\n当主项目的子项目特别多时，可能会不太方便，此时可以使用 git submodule 的一个命令 foreach 执行：\n\n```shell\ngit submodule foreach 'git pull origin master'\n```\n\n### 1.4 删除 submodule\n\n网上流传了一些偏法，主要步骤是直接移除模块，并手动修改 ```.gitmodules```、```.git/config``` 和 ```.git/modules``` 内容。包含了一大堆类似```git rm --cached <sub-module>```、```rm -rf <sub-moduel>```、```rm .gitmodules``` 和 ```git rm --cached``` 之类的代码。\n\n实际上这是一种比较野的做法，不建议使用。\n\n根据官方文档的说明，应该使用 ```git submodule deinit``` 命令卸载一个子模块。这个命令如果添加上参数 ```--force```，则子模块工作区内即使有本地的修改，也会被移除。\n\n```shell\ngit submodule deinit project-sub\n\ngit rm project-sub\n```\n\n执行 ```git submodule deinit project-sub``` 命令的实际效果，是自动在 ```.git/config``` 中删除了以下内容：\n\n```shell\n[submodule \"project-sub\"]\n\nurl = <https://github.com/username/project-sub.git>\n```\n\n执行 ```git rm project-sub``` 的效果，是移除了 ```project-sub``` 文件夹，并自动在 ```.gitmodules``` 中删除了以下内容：\n\n```shell\n[submodule \"project-sub\"]\n\npath = /path/to/submodule\n\nurl = <https://github.com/username/project-sub.git>\n```\n\n此时，主项目中关于子模块的信息基本已经删除（虽然貌似 .git/modules 目录下还有残余）：\n\n```shell\nproject-main git:(master) ✗ gs\n位于分支 master\n您的分支与上游分支 'origin/master' 一致。\n要提交的变更：\n（使用 \"git reset HEAD <文件>...\" 以取消暂存）\n修改： .gitmodules\n删除： project-sub\n````\n\n可以提交代码：\n\n```shell\ngit commit -m \"delete submodule project-sub\"\n```\n\n至此完成对子模块的删除。\n","source":"_drafts/gitSubmodule.md","raw":"---\ntitle: Git Submodule\ntags:\n---\n\n[TOC]\n\n## 1. [Git中submodule](https://zhuanlan.zhihu.com/p/87053283)\n\n### 1.1 创建 submodule\n\n在主项目根目录\n\n```shell\ngit submodule add <submodule_url>\n```\n\n### 1.2 拉取 submodule\n\n```shell\ncd /path/to/submodule\ngit clone https://github.com/username/project-main.git --recurse-submodules\n```\n\n或者，在主项目根目录下\n\n```shell\ngit submodule init\ngit submodule update\n```\n\n### 1.3 submodule 更新\n\n对于子模块而言，并不需要知道引用自己的主项目的存在。对于自身来讲，子模块就是一个完整的 Git 仓库，按照正常的 Git 代码管理规范操作即可。\n\nsubmodule 更新分三种情形。\n\n#### 1.3.1 submodule 文件夹内的内容发生了未跟踪的内容变动\n\n进入 submodule 文件夹，按照子模块内部的版本控制体系提交代码。当提交完成后，主项目的状态则进入了情况2，即当前项目下子模块文件夹内的内容发生了版本变化。\n\n#### 1.3.2. submodule 文件夹内的内容发生了版本变化\n\n在主项目中使用 git status 查看仓库状态时，会显示子模块有新的提交。在这种情况下，可以使用 git add/commit 将其添加到主项目的代码提交中。\n\n#### 1.3.3. submodule 文件夹内的内容没变，远程有更新\n\n通常来讲，主项目与子模块的开发不会恰好是同时进行的。通常是子模块负责维护自己的版本升级后，推送到远程仓库，并告知主项目可以更新对子模块的版本依赖。\n\n在这种情况下，主项目是比较茫然的。\n\n之前曾经提到，主项目可以使用 ```git submodule update``` 更新子模块的代码，但那是指 ```当前主项目文件夹下的子模块目录内容``` 与 ```当前主项目记录的子模块版本``` 不一致时，会参考后者进行更新。\n\n但如今这种情况下，后者 ```当前主项目记录的子模块版本``` 还没有变化，在主项目看来当前情况一切正常。\n\n此时，需要让主项目主动进入子模块拉取新版代码，进行升级操作。\n\n通常流程是：\n\n```shell\ncd /path/to/submodule\ngit pull origin master\n```\n\n子模块目录下的代码版本会发生变化，转到情况2的流程进行主项目的提交。\n\n当主项目的子项目特别多时，可能会不太方便，此时可以使用 git submodule 的一个命令 foreach 执行：\n\n```shell\ngit submodule foreach 'git pull origin master'\n```\n\n### 1.4 删除 submodule\n\n网上流传了一些偏法，主要步骤是直接移除模块，并手动修改 ```.gitmodules```、```.git/config``` 和 ```.git/modules``` 内容。包含了一大堆类似```git rm --cached <sub-module>```、```rm -rf <sub-moduel>```、```rm .gitmodules``` 和 ```git rm --cached``` 之类的代码。\n\n实际上这是一种比较野的做法，不建议使用。\n\n根据官方文档的说明，应该使用 ```git submodule deinit``` 命令卸载一个子模块。这个命令如果添加上参数 ```--force```，则子模块工作区内即使有本地的修改，也会被移除。\n\n```shell\ngit submodule deinit project-sub\n\ngit rm project-sub\n```\n\n执行 ```git submodule deinit project-sub``` 命令的实际效果，是自动在 ```.git/config``` 中删除了以下内容：\n\n```shell\n[submodule \"project-sub\"]\n\nurl = <https://github.com/username/project-sub.git>\n```\n\n执行 ```git rm project-sub``` 的效果，是移除了 ```project-sub``` 文件夹，并自动在 ```.gitmodules``` 中删除了以下内容：\n\n```shell\n[submodule \"project-sub\"]\n\npath = /path/to/submodule\n\nurl = <https://github.com/username/project-sub.git>\n```\n\n此时，主项目中关于子模块的信息基本已经删除（虽然貌似 .git/modules 目录下还有残余）：\n\n```shell\nproject-main git:(master) ✗ gs\n位于分支 master\n您的分支与上游分支 'origin/master' 一致。\n要提交的变更：\n（使用 \"git reset HEAD <文件>...\" 以取消暂存）\n修改： .gitmodules\n删除： project-sub\n````\n\n可以提交代码：\n\n```shell\ngit commit -m \"delete submodule project-sub\"\n```\n\n至此完成对子模块的删除。\n","slug":"gitSubmodule","published":0,"date":"2021-09-16T06:42:30.058Z","updated":"2021-09-16T06:42:30.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmyr0001iu9k4nm2dq4g","content":"<p>[TOC]</p>\n<h2 id=\"1-Git中submodule\"><a href=\"#1-Git中submodule\" class=\"headerlink\" title=\"1. Git中submodule\"></a>1. <a href=\"https://zhuanlan.zhihu.com/p/87053283\">Git中submodule</a></h2><h3 id=\"1-1-创建-submodule\"><a href=\"#1-1-创建-submodule\" class=\"headerlink\" title=\"1.1 创建 submodule\"></a>1.1 创建 submodule</h3><p>在主项目根目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add &lt;submodule_url&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-拉取-submodule\"><a href=\"#1-2-拉取-submodule\" class=\"headerlink\" title=\"1.2 拉取 submodule\"></a>1.2 拉取 submodule</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /path/to/submodule</span><br><span class=\"line\">git clone https://github.com/username/project-main.git --recurse-submodules</span><br></pre></td></tr></table></figure>\n\n<p>或者，在主项目根目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-submodule-更新\"><a href=\"#1-3-submodule-更新\" class=\"headerlink\" title=\"1.3 submodule 更新\"></a>1.3 submodule 更新</h3><p>对于子模块而言，并不需要知道引用自己的主项目的存在。对于自身来讲，子模块就是一个完整的 Git 仓库，按照正常的 Git 代码管理规范操作即可。</p>\n<p>submodule 更新分三种情形。</p>\n<h4 id=\"1-3-1-submodule-文件夹内的内容发生了未跟踪的内容变动\"><a href=\"#1-3-1-submodule-文件夹内的内容发生了未跟踪的内容变动\" class=\"headerlink\" title=\"1.3.1 submodule 文件夹内的内容发生了未跟踪的内容变动\"></a>1.3.1 submodule 文件夹内的内容发生了未跟踪的内容变动</h4><p>进入 submodule 文件夹，按照子模块内部的版本控制体系提交代码。当提交完成后，主项目的状态则进入了情况2，即当前项目下子模块文件夹内的内容发生了版本变化。</p>\n<h4 id=\"1-3-2-submodule-文件夹内的内容发生了版本变化\"><a href=\"#1-3-2-submodule-文件夹内的内容发生了版本变化\" class=\"headerlink\" title=\"1.3.2. submodule 文件夹内的内容发生了版本变化\"></a>1.3.2. submodule 文件夹内的内容发生了版本变化</h4><p>在主项目中使用 git status 查看仓库状态时，会显示子模块有新的提交。在这种情况下，可以使用 git add/commit 将其添加到主项目的代码提交中。</p>\n<h4 id=\"1-3-3-submodule-文件夹内的内容没变，远程有更新\"><a href=\"#1-3-3-submodule-文件夹内的内容没变，远程有更新\" class=\"headerlink\" title=\"1.3.3. submodule 文件夹内的内容没变，远程有更新\"></a>1.3.3. submodule 文件夹内的内容没变，远程有更新</h4><p>通常来讲，主项目与子模块的开发不会恰好是同时进行的。通常是子模块负责维护自己的版本升级后，推送到远程仓库，并告知主项目可以更新对子模块的版本依赖。</p>\n<p>在这种情况下，主项目是比较茫然的。</p>\n<p>之前曾经提到，主项目可以使用 <code>git submodule update</code> 更新子模块的代码，但那是指 <code>当前主项目文件夹下的子模块目录内容</code> 与 <code>当前主项目记录的子模块版本</code> 不一致时，会参考后者进行更新。</p>\n<p>但如今这种情况下，后者 <code>当前主项目记录的子模块版本</code> 还没有变化，在主项目看来当前情况一切正常。</p>\n<p>此时，需要让主项目主动进入子模块拉取新版代码，进行升级操作。</p>\n<p>通常流程是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /path/to/submodule</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n\n<p>子模块目录下的代码版本会发生变化，转到情况2的流程进行主项目的提交。</p>\n<p>当主项目的子项目特别多时，可能会不太方便，此时可以使用 git submodule 的一个命令 foreach 执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule foreach &#x27;git pull origin master&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-删除-submodule\"><a href=\"#1-4-删除-submodule\" class=\"headerlink\" title=\"1.4 删除 submodule\"></a>1.4 删除 submodule</h3><p>网上流传了一些偏法，主要步骤是直接移除模块，并手动修改 <code>.gitmodules</code>、<code>.git/config</code> 和 <code>.git/modules</code> 内容。包含了一大堆类似<code>git rm --cached &lt;sub-module&gt;</code>、<code>rm -rf &lt;sub-moduel&gt;</code>、<code>rm .gitmodules</code> 和 <code>git rm --cached</code> 之类的代码。</p>\n<p>实际上这是一种比较野的做法，不建议使用。</p>\n<p>根据官方文档的说明，应该使用 <code>git submodule deinit</code> 命令卸载一个子模块。这个命令如果添加上参数 <code>--force</code>，则子模块工作区内即使有本地的修改，也会被移除。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule deinit project-sub</span><br><span class=\"line\"></span><br><span class=\"line\">git rm project-sub</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>git submodule deinit project-sub</code> 命令的实际效果，是自动在 <code>.git/config</code> 中删除了以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;project-sub&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">url = &lt;https://github.com/username/project-sub.git&gt;</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>git rm project-sub</code> 的效果，是移除了 <code>project-sub</code> 文件夹，并自动在 <code>.gitmodules</code> 中删除了以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;project-sub&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">path = /path/to/submodule</span><br><span class=\"line\"></span><br><span class=\"line\">url = &lt;https://github.com/username/project-sub.git&gt;</span><br></pre></td></tr></table></figure>\n\n<p>此时，主项目中关于子模块的信息基本已经删除（虽然貌似 .git/modules 目录下还有残余）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project-main git:(master) ✗ gs</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">您的分支与上游分支 &#x27;origin/master&#x27; 一致。</span><br><span class=\"line\">要提交的变更：</span><br><span class=\"line\">（使用 &quot;git reset HEAD &lt;文件&gt;...&quot; 以取消暂存）</span><br><span class=\"line\">修改： .gitmodules</span><br><span class=\"line\">删除： project-sub</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\">可以提交代码：</span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">git commit -m &quot;delete submodule project-sub&quot;</span><br></pre></td></tr></table></figure>\n\n<p>至此完成对子模块的删除。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"1-Git中submodule\"><a href=\"#1-Git中submodule\" class=\"headerlink\" title=\"1. Git中submodule\"></a>1. <a href=\"https://zhuanlan.zhihu.com/p/87053283\">Git中submodule</a></h2><h3 id=\"1-1-创建-submodule\"><a href=\"#1-1-创建-submodule\" class=\"headerlink\" title=\"1.1 创建 submodule\"></a>1.1 创建 submodule</h3><p>在主项目根目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add &lt;submodule_url&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-拉取-submodule\"><a href=\"#1-2-拉取-submodule\" class=\"headerlink\" title=\"1.2 拉取 submodule\"></a>1.2 拉取 submodule</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /path/to/submodule</span><br><span class=\"line\">git clone https://github.com/username/project-main.git --recurse-submodules</span><br></pre></td></tr></table></figure>\n\n<p>或者，在主项目根目录下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-submodule-更新\"><a href=\"#1-3-submodule-更新\" class=\"headerlink\" title=\"1.3 submodule 更新\"></a>1.3 submodule 更新</h3><p>对于子模块而言，并不需要知道引用自己的主项目的存在。对于自身来讲，子模块就是一个完整的 Git 仓库，按照正常的 Git 代码管理规范操作即可。</p>\n<p>submodule 更新分三种情形。</p>\n<h4 id=\"1-3-1-submodule-文件夹内的内容发生了未跟踪的内容变动\"><a href=\"#1-3-1-submodule-文件夹内的内容发生了未跟踪的内容变动\" class=\"headerlink\" title=\"1.3.1 submodule 文件夹内的内容发生了未跟踪的内容变动\"></a>1.3.1 submodule 文件夹内的内容发生了未跟踪的内容变动</h4><p>进入 submodule 文件夹，按照子模块内部的版本控制体系提交代码。当提交完成后，主项目的状态则进入了情况2，即当前项目下子模块文件夹内的内容发生了版本变化。</p>\n<h4 id=\"1-3-2-submodule-文件夹内的内容发生了版本变化\"><a href=\"#1-3-2-submodule-文件夹内的内容发生了版本变化\" class=\"headerlink\" title=\"1.3.2. submodule 文件夹内的内容发生了版本变化\"></a>1.3.2. submodule 文件夹内的内容发生了版本变化</h4><p>在主项目中使用 git status 查看仓库状态时，会显示子模块有新的提交。在这种情况下，可以使用 git add/commit 将其添加到主项目的代码提交中。</p>\n<h4 id=\"1-3-3-submodule-文件夹内的内容没变，远程有更新\"><a href=\"#1-3-3-submodule-文件夹内的内容没变，远程有更新\" class=\"headerlink\" title=\"1.3.3. submodule 文件夹内的内容没变，远程有更新\"></a>1.3.3. submodule 文件夹内的内容没变，远程有更新</h4><p>通常来讲，主项目与子模块的开发不会恰好是同时进行的。通常是子模块负责维护自己的版本升级后，推送到远程仓库，并告知主项目可以更新对子模块的版本依赖。</p>\n<p>在这种情况下，主项目是比较茫然的。</p>\n<p>之前曾经提到，主项目可以使用 <code>git submodule update</code> 更新子模块的代码，但那是指 <code>当前主项目文件夹下的子模块目录内容</code> 与 <code>当前主项目记录的子模块版本</code> 不一致时，会参考后者进行更新。</p>\n<p>但如今这种情况下，后者 <code>当前主项目记录的子模块版本</code> 还没有变化，在主项目看来当前情况一切正常。</p>\n<p>此时，需要让主项目主动进入子模块拉取新版代码，进行升级操作。</p>\n<p>通常流程是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /path/to/submodule</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n\n<p>子模块目录下的代码版本会发生变化，转到情况2的流程进行主项目的提交。</p>\n<p>当主项目的子项目特别多时，可能会不太方便，此时可以使用 git submodule 的一个命令 foreach 执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule foreach &#x27;git pull origin master&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-删除-submodule\"><a href=\"#1-4-删除-submodule\" class=\"headerlink\" title=\"1.4 删除 submodule\"></a>1.4 删除 submodule</h3><p>网上流传了一些偏法，主要步骤是直接移除模块，并手动修改 <code>.gitmodules</code>、<code>.git/config</code> 和 <code>.git/modules</code> 内容。包含了一大堆类似<code>git rm --cached &lt;sub-module&gt;</code>、<code>rm -rf &lt;sub-moduel&gt;</code>、<code>rm .gitmodules</code> 和 <code>git rm --cached</code> 之类的代码。</p>\n<p>实际上这是一种比较野的做法，不建议使用。</p>\n<p>根据官方文档的说明，应该使用 <code>git submodule deinit</code> 命令卸载一个子模块。这个命令如果添加上参数 <code>--force</code>，则子模块工作区内即使有本地的修改，也会被移除。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule deinit project-sub</span><br><span class=\"line\"></span><br><span class=\"line\">git rm project-sub</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>git submodule deinit project-sub</code> 命令的实际效果，是自动在 <code>.git/config</code> 中删除了以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;project-sub&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">url = &lt;https://github.com/username/project-sub.git&gt;</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>git rm project-sub</code> 的效果，是移除了 <code>project-sub</code> 文件夹，并自动在 <code>.gitmodules</code> 中删除了以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;project-sub&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">path = /path/to/submodule</span><br><span class=\"line\"></span><br><span class=\"line\">url = &lt;https://github.com/username/project-sub.git&gt;</span><br></pre></td></tr></table></figure>\n\n<p>此时，主项目中关于子模块的信息基本已经删除（虽然貌似 .git/modules 目录下还有残余）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project-main git:(master) ✗ gs</span><br><span class=\"line\">位于分支 master</span><br><span class=\"line\">您的分支与上游分支 &#x27;origin/master&#x27; 一致。</span><br><span class=\"line\">要提交的变更：</span><br><span class=\"line\">（使用 &quot;git reset HEAD &lt;文件&gt;...&quot; 以取消暂存）</span><br><span class=\"line\">修改： .gitmodules</span><br><span class=\"line\">删除： project-sub</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\">可以提交代码：</span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">git commit -m &quot;delete submodule project-sub&quot;</span><br></pre></td></tr></table></figure>\n\n<p>至此完成对子模块的删除。</p>\n"},{"title":"投资入门 -- 高瓴资本","abbrlink":39922,"date":"2021-09-02T01:55:00.000Z","_content":"\n私募投资\n\n高瓴一家专注于长期结构性价值投资的投资公司，成立于2005年，由张磊先生创立\n\n经过多年的发展，成为亚洲资产管理规模最大的投资基金之一，也是亚洲规模最大私募之一，管理规模超650亿美元。\n\n在创始人张磊先生的引领下，高瓴汇聚了一支专业能力强大，对消费零售、医疗健康、金融和企业服务等诸多行业认知深刻的专家团队。我们致力于寻找最具创新精神的企业家，通过高瓴的全球资源及自主研究体系，帮助他们发挥出最大的潜能从而缔造最优秀的公司。\n\n## 1. 投资理念：做时间的朋友，结构性投资，价值投资，长期投资\n\n## 2. 创始人\n\n张磊，think big、think deep、think long。\n\n张磊先生在一次采访中谈最佩服的两个人，一个是Warren Buffett(巴菲特)，一个是David Swensen(大卫-史文森)，张磊在耶鲁的恩师。\n\n张磊的人生经历：\n\n高瓴资本创始人兼首席执行官，美国耶鲁大学校董事会董事，中国人民大学校董事会副董事长，耶鲁大学亚洲发展委员会主席，中美交流基金会董事，香港金融发展局委员以及香港金融科技督导小组成员\n\n1、河南省高考文科状元的身份考取中国人民大学国际金融专业\n\n2、1998年赴美国耶鲁大学求学，后获得耶鲁大学工商管理硕士及国际关系硕士学位\n\n3、先后在，耶鲁大学投资办公室（管理著名的耶鲁大学捐赠基金）、全球新兴市场投资基金和纽约证券交易工作，这段经历为他日后在投资界的成功奠定了坚实的基础。\n\n4、2019年12月18日，张磊入选“中国海归70年70人”榜单；2020年4月13日，入选《财富》中文版“2020年中国最具影响力的50位商界领袖”榜单。\n\n## 3. 团队\n\n高瓴资本管理有限公司有六个合伙人：\n\n1、张磊：创始人兼首席执行官。\n\n2、洪婧：合伙人，私募投资业务负责人。\n\n3、辛音：担任了高领资本集团的副总裁。\n\n4、陈劬(qú)：担任了高领资本的总监。\n\n5、冯靓：公共关系部部长。\n\n6、李良：高领资本合伙人。\n\n员工：\n\n高瓴集团团队成员具有丰富的海内外工作经验和多元化背景，目前已经发展成为一支拥有350余名投资和运营专业人士的国际化团队。\n\n作为一家具有全球视野的投资管理机构，高瓴集团聚集了来自北京、上海、苏州、香港、东京、新加坡、孟买、悉尼、伦敦、巴黎、汉诺威、纽约、芝加哥、费城、波士顿、帕洛阿尔托、普林斯顿、林肯，以及纽黑文等世界各地的顶尖人才。\n\n## 4. 投资标的\n\n### 4.1 持有的A股\n\n凯利泰、格力电器、海螺水泥、爱尔眼科、金域医学、泰格医药、赛意信息、公牛集团、良品铺子、水井坊、药明康德\n\n### 4.2 港股\n\n腾讯、美团\n\n### 4.3 美股\n\nZoom、爱奇艺、京东、阿里和拼多多\n\n## 5. 服务群体\n\n主要来自于目光长远的全球性机构投资人，包括大学捐赠基金、养老基金、主权财富基金及家族基金等。\n\n## 6. 投资行业\n\n第一，我还是看好创新，创新带来的机会还是很多；\n\n第二，我看好中产阶级带来的巨大消费机会；\n\n第三，我看好金融和资产管理行业，在中国的需求远远没有被满足，尤其是资产管理；\n\n高瓴已经在消费与零售、科技创新、生命健康以及先进制造等领域，投资了一大批国内外优秀企业，其中包括了百度、美团、蓝月亮、美的、格力等。\n\n## 7. 常用词\n\n企业家，创业者，创新，护城河，哲学。\n","source":"_posts/Invest/HIllHouse.md","raw":"---\ntitle: 投资入门 -- 高瓴资本\nabbrlink: 39922\ndate: 2021-09-02 09:55:00\ntags:\n---\n\n私募投资\n\n高瓴一家专注于长期结构性价值投资的投资公司，成立于2005年，由张磊先生创立\n\n经过多年的发展，成为亚洲资产管理规模最大的投资基金之一，也是亚洲规模最大私募之一，管理规模超650亿美元。\n\n在创始人张磊先生的引领下，高瓴汇聚了一支专业能力强大，对消费零售、医疗健康、金融和企业服务等诸多行业认知深刻的专家团队。我们致力于寻找最具创新精神的企业家，通过高瓴的全球资源及自主研究体系，帮助他们发挥出最大的潜能从而缔造最优秀的公司。\n\n## 1. 投资理念：做时间的朋友，结构性投资，价值投资，长期投资\n\n## 2. 创始人\n\n张磊，think big、think deep、think long。\n\n张磊先生在一次采访中谈最佩服的两个人，一个是Warren Buffett(巴菲特)，一个是David Swensen(大卫-史文森)，张磊在耶鲁的恩师。\n\n张磊的人生经历：\n\n高瓴资本创始人兼首席执行官，美国耶鲁大学校董事会董事，中国人民大学校董事会副董事长，耶鲁大学亚洲发展委员会主席，中美交流基金会董事，香港金融发展局委员以及香港金融科技督导小组成员\n\n1、河南省高考文科状元的身份考取中国人民大学国际金融专业\n\n2、1998年赴美国耶鲁大学求学，后获得耶鲁大学工商管理硕士及国际关系硕士学位\n\n3、先后在，耶鲁大学投资办公室（管理著名的耶鲁大学捐赠基金）、全球新兴市场投资基金和纽约证券交易工作，这段经历为他日后在投资界的成功奠定了坚实的基础。\n\n4、2019年12月18日，张磊入选“中国海归70年70人”榜单；2020年4月13日，入选《财富》中文版“2020年中国最具影响力的50位商界领袖”榜单。\n\n## 3. 团队\n\n高瓴资本管理有限公司有六个合伙人：\n\n1、张磊：创始人兼首席执行官。\n\n2、洪婧：合伙人，私募投资业务负责人。\n\n3、辛音：担任了高领资本集团的副总裁。\n\n4、陈劬(qú)：担任了高领资本的总监。\n\n5、冯靓：公共关系部部长。\n\n6、李良：高领资本合伙人。\n\n员工：\n\n高瓴集团团队成员具有丰富的海内外工作经验和多元化背景，目前已经发展成为一支拥有350余名投资和运营专业人士的国际化团队。\n\n作为一家具有全球视野的投资管理机构，高瓴集团聚集了来自北京、上海、苏州、香港、东京、新加坡、孟买、悉尼、伦敦、巴黎、汉诺威、纽约、芝加哥、费城、波士顿、帕洛阿尔托、普林斯顿、林肯，以及纽黑文等世界各地的顶尖人才。\n\n## 4. 投资标的\n\n### 4.1 持有的A股\n\n凯利泰、格力电器、海螺水泥、爱尔眼科、金域医学、泰格医药、赛意信息、公牛集团、良品铺子、水井坊、药明康德\n\n### 4.2 港股\n\n腾讯、美团\n\n### 4.3 美股\n\nZoom、爱奇艺、京东、阿里和拼多多\n\n## 5. 服务群体\n\n主要来自于目光长远的全球性机构投资人，包括大学捐赠基金、养老基金、主权财富基金及家族基金等。\n\n## 6. 投资行业\n\n第一，我还是看好创新，创新带来的机会还是很多；\n\n第二，我看好中产阶级带来的巨大消费机会；\n\n第三，我看好金融和资产管理行业，在中国的需求远远没有被满足，尤其是资产管理；\n\n高瓴已经在消费与零售、科技创新、生命健康以及先进制造等领域，投资了一大批国内外优秀企业，其中包括了百度、美团、蓝月亮、美的、格力等。\n\n## 7. 常用词\n\n企业家，创业者，创新，护城河，哲学。\n","slug":"Invest/HIllHouse","published":1,"updated":"2021-09-22T07:01:07.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmyv0003iu9kcbmu3bmb","content":"<p>私募投资</p>\n<p>高瓴一家专注于长期结构性价值投资的投资公司，成立于2005年，由张磊先生创立</p>\n<p>经过多年的发展，成为亚洲资产管理规模最大的投资基金之一，也是亚洲规模最大私募之一，管理规模超650亿美元。</p>\n<p>在创始人张磊先生的引领下，高瓴汇聚了一支专业能力强大，对消费零售、医疗健康、金融和企业服务等诸多行业认知深刻的专家团队。我们致力于寻找最具创新精神的企业家，通过高瓴的全球资源及自主研究体系，帮助他们发挥出最大的潜能从而缔造最优秀的公司。</p>\n<h2 id=\"1-投资理念：做时间的朋友，结构性投资，价值投资，长期投资\"><a href=\"#1-投资理念：做时间的朋友，结构性投资，价值投资，长期投资\" class=\"headerlink\" title=\"1. 投资理念：做时间的朋友，结构性投资，价值投资，长期投资\"></a>1. 投资理念：做时间的朋友，结构性投资，价值投资，长期投资</h2><h2 id=\"2-创始人\"><a href=\"#2-创始人\" class=\"headerlink\" title=\"2. 创始人\"></a>2. 创始人</h2><p>张磊，think big、think deep、think long。</p>\n<p>张磊先生在一次采访中谈最佩服的两个人，一个是Warren Buffett(巴菲特)，一个是David Swensen(大卫-史文森)，张磊在耶鲁的恩师。</p>\n<p>张磊的人生经历：</p>\n<p>高瓴资本创始人兼首席执行官，美国耶鲁大学校董事会董事，中国人民大学校董事会副董事长，耶鲁大学亚洲发展委员会主席，中美交流基金会董事，香港金融发展局委员以及香港金融科技督导小组成员</p>\n<p>1、河南省高考文科状元的身份考取中国人民大学国际金融专业</p>\n<p>2、1998年赴美国耶鲁大学求学，后获得耶鲁大学工商管理硕士及国际关系硕士学位</p>\n<p>3、先后在，耶鲁大学投资办公室（管理著名的耶鲁大学捐赠基金）、全球新兴市场投资基金和纽约证券交易工作，这段经历为他日后在投资界的成功奠定了坚实的基础。</p>\n<p>4、2019年12月18日，张磊入选“中国海归70年70人”榜单；2020年4月13日，入选《财富》中文版“2020年中国最具影响力的50位商界领袖”榜单。</p>\n<h2 id=\"3-团队\"><a href=\"#3-团队\" class=\"headerlink\" title=\"3. 团队\"></a>3. 团队</h2><p>高瓴资本管理有限公司有六个合伙人：</p>\n<p>1、张磊：创始人兼首席执行官。</p>\n<p>2、洪婧：合伙人，私募投资业务负责人。</p>\n<p>3、辛音：担任了高领资本集团的副总裁。</p>\n<p>4、陈劬(qú)：担任了高领资本的总监。</p>\n<p>5、冯靓：公共关系部部长。</p>\n<p>6、李良：高领资本合伙人。</p>\n<p>员工：</p>\n<p>高瓴集团团队成员具有丰富的海内外工作经验和多元化背景，目前已经发展成为一支拥有350余名投资和运营专业人士的国际化团队。</p>\n<p>作为一家具有全球视野的投资管理机构，高瓴集团聚集了来自北京、上海、苏州、香港、东京、新加坡、孟买、悉尼、伦敦、巴黎、汉诺威、纽约、芝加哥、费城、波士顿、帕洛阿尔托、普林斯顿、林肯，以及纽黑文等世界各地的顶尖人才。</p>\n<h2 id=\"4-投资标的\"><a href=\"#4-投资标的\" class=\"headerlink\" title=\"4. 投资标的\"></a>4. 投资标的</h2><h3 id=\"4-1-持有的A股\"><a href=\"#4-1-持有的A股\" class=\"headerlink\" title=\"4.1 持有的A股\"></a>4.1 持有的A股</h3><p>凯利泰、格力电器、海螺水泥、爱尔眼科、金域医学、泰格医药、赛意信息、公牛集团、良品铺子、水井坊、药明康德</p>\n<h3 id=\"4-2-港股\"><a href=\"#4-2-港股\" class=\"headerlink\" title=\"4.2 港股\"></a>4.2 港股</h3><p>腾讯、美团</p>\n<h3 id=\"4-3-美股\"><a href=\"#4-3-美股\" class=\"headerlink\" title=\"4.3 美股\"></a>4.3 美股</h3><p>Zoom、爱奇艺、京东、阿里和拼多多</p>\n<h2 id=\"5-服务群体\"><a href=\"#5-服务群体\" class=\"headerlink\" title=\"5. 服务群体\"></a>5. 服务群体</h2><p>主要来自于目光长远的全球性机构投资人，包括大学捐赠基金、养老基金、主权财富基金及家族基金等。</p>\n<h2 id=\"6-投资行业\"><a href=\"#6-投资行业\" class=\"headerlink\" title=\"6. 投资行业\"></a>6. 投资行业</h2><p>第一，我还是看好创新，创新带来的机会还是很多；</p>\n<p>第二，我看好中产阶级带来的巨大消费机会；</p>\n<p>第三，我看好金融和资产管理行业，在中国的需求远远没有被满足，尤其是资产管理；</p>\n<p>高瓴已经在消费与零售、科技创新、生命健康以及先进制造等领域，投资了一大批国内外优秀企业，其中包括了百度、美团、蓝月亮、美的、格力等。</p>\n<h2 id=\"7-常用词\"><a href=\"#7-常用词\" class=\"headerlink\" title=\"7. 常用词\"></a>7. 常用词</h2><p>企业家，创业者，创新，护城河，哲学。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>私募投资</p>\n<p>高瓴一家专注于长期结构性价值投资的投资公司，成立于2005年，由张磊先生创立</p>\n<p>经过多年的发展，成为亚洲资产管理规模最大的投资基金之一，也是亚洲规模最大私募之一，管理规模超650亿美元。</p>\n<p>在创始人张磊先生的引领下，高瓴汇聚了一支专业能力强大，对消费零售、医疗健康、金融和企业服务等诸多行业认知深刻的专家团队。我们致力于寻找最具创新精神的企业家，通过高瓴的全球资源及自主研究体系，帮助他们发挥出最大的潜能从而缔造最优秀的公司。</p>\n<h2 id=\"1-投资理念：做时间的朋友，结构性投资，价值投资，长期投资\"><a href=\"#1-投资理念：做时间的朋友，结构性投资，价值投资，长期投资\" class=\"headerlink\" title=\"1. 投资理念：做时间的朋友，结构性投资，价值投资，长期投资\"></a>1. 投资理念：做时间的朋友，结构性投资，价值投资，长期投资</h2><h2 id=\"2-创始人\"><a href=\"#2-创始人\" class=\"headerlink\" title=\"2. 创始人\"></a>2. 创始人</h2><p>张磊，think big、think deep、think long。</p>\n<p>张磊先生在一次采访中谈最佩服的两个人，一个是Warren Buffett(巴菲特)，一个是David Swensen(大卫-史文森)，张磊在耶鲁的恩师。</p>\n<p>张磊的人生经历：</p>\n<p>高瓴资本创始人兼首席执行官，美国耶鲁大学校董事会董事，中国人民大学校董事会副董事长，耶鲁大学亚洲发展委员会主席，中美交流基金会董事，香港金融发展局委员以及香港金融科技督导小组成员</p>\n<p>1、河南省高考文科状元的身份考取中国人民大学国际金融专业</p>\n<p>2、1998年赴美国耶鲁大学求学，后获得耶鲁大学工商管理硕士及国际关系硕士学位</p>\n<p>3、先后在，耶鲁大学投资办公室（管理著名的耶鲁大学捐赠基金）、全球新兴市场投资基金和纽约证券交易工作，这段经历为他日后在投资界的成功奠定了坚实的基础。</p>\n<p>4、2019年12月18日，张磊入选“中国海归70年70人”榜单；2020年4月13日，入选《财富》中文版“2020年中国最具影响力的50位商界领袖”榜单。</p>\n<h2 id=\"3-团队\"><a href=\"#3-团队\" class=\"headerlink\" title=\"3. 团队\"></a>3. 团队</h2><p>高瓴资本管理有限公司有六个合伙人：</p>\n<p>1、张磊：创始人兼首席执行官。</p>\n<p>2、洪婧：合伙人，私募投资业务负责人。</p>\n<p>3、辛音：担任了高领资本集团的副总裁。</p>\n<p>4、陈劬(qú)：担任了高领资本的总监。</p>\n<p>5、冯靓：公共关系部部长。</p>\n<p>6、李良：高领资本合伙人。</p>\n<p>员工：</p>\n<p>高瓴集团团队成员具有丰富的海内外工作经验和多元化背景，目前已经发展成为一支拥有350余名投资和运营专业人士的国际化团队。</p>\n<p>作为一家具有全球视野的投资管理机构，高瓴集团聚集了来自北京、上海、苏州、香港、东京、新加坡、孟买、悉尼、伦敦、巴黎、汉诺威、纽约、芝加哥、费城、波士顿、帕洛阿尔托、普林斯顿、林肯，以及纽黑文等世界各地的顶尖人才。</p>\n<h2 id=\"4-投资标的\"><a href=\"#4-投资标的\" class=\"headerlink\" title=\"4. 投资标的\"></a>4. 投资标的</h2><h3 id=\"4-1-持有的A股\"><a href=\"#4-1-持有的A股\" class=\"headerlink\" title=\"4.1 持有的A股\"></a>4.1 持有的A股</h3><p>凯利泰、格力电器、海螺水泥、爱尔眼科、金域医学、泰格医药、赛意信息、公牛集团、良品铺子、水井坊、药明康德</p>\n<h3 id=\"4-2-港股\"><a href=\"#4-2-港股\" class=\"headerlink\" title=\"4.2 港股\"></a>4.2 港股</h3><p>腾讯、美团</p>\n<h3 id=\"4-3-美股\"><a href=\"#4-3-美股\" class=\"headerlink\" title=\"4.3 美股\"></a>4.3 美股</h3><p>Zoom、爱奇艺、京东、阿里和拼多多</p>\n<h2 id=\"5-服务群体\"><a href=\"#5-服务群体\" class=\"headerlink\" title=\"5. 服务群体\"></a>5. 服务群体</h2><p>主要来自于目光长远的全球性机构投资人，包括大学捐赠基金、养老基金、主权财富基金及家族基金等。</p>\n<h2 id=\"6-投资行业\"><a href=\"#6-投资行业\" class=\"headerlink\" title=\"6. 投资行业\"></a>6. 投资行业</h2><p>第一，我还是看好创新，创新带来的机会还是很多；</p>\n<p>第二，我看好中产阶级带来的巨大消费机会；</p>\n<p>第三，我看好金融和资产管理行业，在中国的需求远远没有被满足，尤其是资产管理；</p>\n<p>高瓴已经在消费与零售、科技创新、生命健康以及先进制造等领域，投资了一大批国内外优秀企业，其中包括了百度、美团、蓝月亮、美的、格力等。</p>\n<h2 id=\"7-常用词\"><a href=\"#7-常用词\" class=\"headerlink\" title=\"7. 常用词\"></a>7. 常用词</h2><p>企业家，创业者，创新，护城河，哲学。</p>\n"},{"title":"投资入门","abbrlink":39922,"date":"2021-09-02T01:55:00.000Z","_content":"\n关系、联系\n\n权谋、人脉\n\n制度、人物、事情、时间\n\n投资\n高瓴投资：做时间的朋友，结构性投资，价值投资，长期投资\n\n私募投资\n","source":"_posts/Invest/index.md","raw":"---\ntitle: 投资入门\nabbrlink: 39922\ndate: 2021-09-02 09:55:00\ntags:\n---\n\n关系、联系\n\n权谋、人脉\n\n制度、人物、事情、时间\n\n投资\n高瓴投资：做时间的朋友，结构性投资，价值投资，长期投资\n\n私募投资\n","slug":"Invest/index","published":1,"updated":"2021-09-22T06:56:40.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmyx0004iu9k8c43ggov","content":"<p>关系、联系</p>\n<p>权谋、人脉</p>\n<p>制度、人物、事情、时间</p>\n<p>投资<br>高瓴投资：做时间的朋友，结构性投资，价值投资，长期投资</p>\n<p>私募投资</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关系、联系</p>\n<p>权谋、人脉</p>\n<p>制度、人物、事情、时间</p>\n<p>投资<br>高瓴投资：做时间的朋友，结构性投资，价值投资，长期投资</p>\n<p>私募投资</p>\n"},{"title":"APNS","abbrlink":"f2c8ac31","date":"2021-04-19T16:00:00.000Z","_content":"\n## 1. KeyChain\n\n[UniversalLink](https://www.cnblogs.com/fshmjl/p/5859781.html)\n\n```zh\n有一个注册的域名\n通过 SSL 访问域名\n支持上传一个 JSON 文件到你的域名\n```\n\n1.添加域名到 Capabilities\n2.上传 apple-app-site-association 文件\n\n```json\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": {\n      \"TBEJCS6FFP.com.domain.App\": {\n        \"paths\":[ \"*\" ]\n      }\n    }\n  }\n}\n```\n\n3.在 APP 里处理通用链接\n\n![通用链接流程](resources/universal_link.png)\n\nExtension\n\n```zh\niMessage\nSticker\n3D Touch\n生物识别\n```\n","source":"_posts/iOS/AppleService.md","raw":"---\ntitle: APNS\nabbrlink: f2c8ac31\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n## 1. KeyChain\n\n[UniversalLink](https://www.cnblogs.com/fshmjl/p/5859781.html)\n\n```zh\n有一个注册的域名\n通过 SSL 访问域名\n支持上传一个 JSON 文件到你的域名\n```\n\n1.添加域名到 Capabilities\n2.上传 apple-app-site-association 文件\n\n```json\n{\n  \"applinks\": {\n    \"apps\": [],\n    \"details\": {\n      \"TBEJCS6FFP.com.domain.App\": {\n        \"paths\":[ \"*\" ]\n      }\n    }\n  }\n}\n```\n\n3.在 APP 里处理通用链接\n\n![通用链接流程](resources/universal_link.png)\n\nExtension\n\n```zh\niMessage\nSticker\n3D Touch\n生物识别\n```\n","slug":"iOS/AppleService","published":1,"updated":"2021-07-29T06:46:00.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmyy0005iu9k7gqu2ph2","content":"<h2 id=\"1-KeyChain\"><a href=\"#1-KeyChain\" class=\"headerlink\" title=\"1. KeyChain\"></a>1. KeyChain</h2><p><a href=\"https://www.cnblogs.com/fshmjl/p/5859781.html\">UniversalLink</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有一个注册的域名</span><br><span class=\"line\">通过 SSL 访问域名</span><br><span class=\"line\">支持上传一个 JSON 文件到你的域名</span><br></pre></td></tr></table></figure>\n\n<p>1.添加域名到 Capabilities<br>2.上传 apple-app-site-association 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;applinks&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;apps&quot;</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">&quot;details&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;TBEJCS6FFP.com.domain.App&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;paths&quot;</span>:[ <span class=\"string\">&quot;*&quot;</span> ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.在 APP 里处理通用链接</p>\n<p><img src=\"/resources/universal_link.png\" alt=\"通用链接流程\"></p>\n<p>Extension</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iMessage</span><br><span class=\"line\">Sticker</span><br><span class=\"line\">3D Touch</span><br><span class=\"line\">生物识别</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-KeyChain\"><a href=\"#1-KeyChain\" class=\"headerlink\" title=\"1. KeyChain\"></a>1. KeyChain</h2><p><a href=\"https://www.cnblogs.com/fshmjl/p/5859781.html\">UniversalLink</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有一个注册的域名</span><br><span class=\"line\">通过 SSL 访问域名</span><br><span class=\"line\">支持上传一个 JSON 文件到你的域名</span><br></pre></td></tr></table></figure>\n\n<p>1.添加域名到 Capabilities<br>2.上传 apple-app-site-association 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;applinks&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;apps&quot;</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">&quot;details&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;TBEJCS6FFP.com.domain.App&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;paths&quot;</span>:[ <span class=\"string\">&quot;*&quot;</span> ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.在 APP 里处理通用链接</p>\n<p><img src=\"/resources/universal_link.png\" alt=\"通用链接流程\"></p>\n<p>Extension</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iMessage</span><br><span class=\"line\">Sticker</span><br><span class=\"line\">3D Touch</span><br><span class=\"line\">生物识别</span><br></pre></td></tr></table></figure>\n"},{"title":"iOS 架构设计","abbrlink":"20b1c088","date":"2021-04-19T16:00:00.000Z","_content":"\n## 1. 架构设计模式[^1]\n\n### 1.1 [软件架构入门](http://www.ruanyifeng.com/blog/2016/09/software-architecture.html)\n\n### 1.2 分层架构\n\n```txt\n1. 表现层（presentation）：用户界面，负责视觉和用户互动\n2. 业务层（business）：实现业务逻辑\n3. 服务层 (service): 不同业务逻辑的通用接口\n4. 持久层（persistence）：提供数据，SQL 语句就放在这一层\n5. 数据库（database） ：保存数据\n```\n\n### 1.3 事件驱动架构\n\n```txt\n1. 事件队列（event queue）：接收事件的入口\n2. 分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元\n3. 事件通道（event channel）：分发器与处理器之间的联系渠道\n4. 事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作\n```\n\n### 1.4 微核架构\n\n微核架构（microkernel architecture）又称为\"插件架构\"（plug-in architecture），指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。\n\n### 1.5 微服务架构\n\n微服务架构分成三种实现模式:\n\n```txt\n1. RESTful API 模式：服务通过 API 提供，云服务就属于这一类\n2. RESTful 应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部\n3. 集中消息模式：采用消息代理（message broker），可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群\n```\n\n### 1.6 云架构\n\n```txt\n1. 处理单元：实现业务逻辑\n2. 虚拟中间件：负责通信、保持sessions、数据复制、分布式处理、处理单元的部署。\n```\n\n## 2. [浅谈 MVC、MVP 和 MVVM 架构模式](https://draveness.me/mvx/)\n\n### 2.1 MVC\n\n[苹果的 MVC](https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html)\n\n![ios 的 MVC](./resources/../Resources/model_view_controller_2x.png)\n\n斯坦福白胡子老头的 MVC\n\n![斯坦福白胡子老头的 MVC](./Resources/MVC_Stanford.webp)\n\n这个图的理解，做一个说明，图中有几条线把这三部分划分开，有黄线，虚线，和白色的实线。我们把它们想象成路标。\n\n* 在 M 和 V 之间有两条黄线，这表示什么呢？它意味着你不能穿越这黄线，任何一个方向都不行。\n* 白色的虚线，它意味着你可以自由的穿越它，只要是安全的。\n* 白色的实线，它代表你可以穿越，但你必须要买票，或者交点过路费，target-action，Delegate，DataSource。\n* 图中绿色的箭头表示直接引用，直接引用直观来说，就是说需要包含引用类的申明头文件和类的实例变量。可以看到，只有 Controller 中，有对 Model 和 View 的直接引用。其中对 View 的直接引用体现为 IBOutlet。\n* Model 在图上有一个信号塔类似的图形，旁边写着 Notification & KVO。这表明 Model 主要是通过 Notification 和 KVO 来和 Controller 通讯的。\n\n### 2.2 MV-VM\n\n## 3. RxSwift 常用架构\n\n## 3.1. RxFeedback\n\n## 3.2 ReactorKit\n\n## 4. [iOS应用架构谈](https://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html)\n\n* [今日头条：iOS 架构设计杂谈](https://juejin.cn/post/6844903623252525064)\n* [awesome iOS architecture](https://github.com/onmyway133/awesome-ios-architecture#data-source)\n* [SwiftHub](https://github.com/khoren93/SwiftHub)\n\n[^1]: [MVC是框架？是设计模式？是架构？还是……](https://blog.csdn.net/CillyB/article/details/79464339?utm_source=blogxgwz7&utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242)\n","source":"_posts/iOS/Architecture.md","raw":"---\ntitle: iOS 架构设计\nabbrlink: 20b1c088\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n## 1. 架构设计模式[^1]\n\n### 1.1 [软件架构入门](http://www.ruanyifeng.com/blog/2016/09/software-architecture.html)\n\n### 1.2 分层架构\n\n```txt\n1. 表现层（presentation）：用户界面，负责视觉和用户互动\n2. 业务层（business）：实现业务逻辑\n3. 服务层 (service): 不同业务逻辑的通用接口\n4. 持久层（persistence）：提供数据，SQL 语句就放在这一层\n5. 数据库（database） ：保存数据\n```\n\n### 1.3 事件驱动架构\n\n```txt\n1. 事件队列（event queue）：接收事件的入口\n2. 分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元\n3. 事件通道（event channel）：分发器与处理器之间的联系渠道\n4. 事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作\n```\n\n### 1.4 微核架构\n\n微核架构（microkernel architecture）又称为\"插件架构\"（plug-in architecture），指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。\n\n### 1.5 微服务架构\n\n微服务架构分成三种实现模式:\n\n```txt\n1. RESTful API 模式：服务通过 API 提供，云服务就属于这一类\n2. RESTful 应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部\n3. 集中消息模式：采用消息代理（message broker），可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群\n```\n\n### 1.6 云架构\n\n```txt\n1. 处理单元：实现业务逻辑\n2. 虚拟中间件：负责通信、保持sessions、数据复制、分布式处理、处理单元的部署。\n```\n\n## 2. [浅谈 MVC、MVP 和 MVVM 架构模式](https://draveness.me/mvx/)\n\n### 2.1 MVC\n\n[苹果的 MVC](https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html)\n\n![ios 的 MVC](./resources/../Resources/model_view_controller_2x.png)\n\n斯坦福白胡子老头的 MVC\n\n![斯坦福白胡子老头的 MVC](./Resources/MVC_Stanford.webp)\n\n这个图的理解，做一个说明，图中有几条线把这三部分划分开，有黄线，虚线，和白色的实线。我们把它们想象成路标。\n\n* 在 M 和 V 之间有两条黄线，这表示什么呢？它意味着你不能穿越这黄线，任何一个方向都不行。\n* 白色的虚线，它意味着你可以自由的穿越它，只要是安全的。\n* 白色的实线，它代表你可以穿越，但你必须要买票，或者交点过路费，target-action，Delegate，DataSource。\n* 图中绿色的箭头表示直接引用，直接引用直观来说，就是说需要包含引用类的申明头文件和类的实例变量。可以看到，只有 Controller 中，有对 Model 和 View 的直接引用。其中对 View 的直接引用体现为 IBOutlet。\n* Model 在图上有一个信号塔类似的图形，旁边写着 Notification & KVO。这表明 Model 主要是通过 Notification 和 KVO 来和 Controller 通讯的。\n\n### 2.2 MV-VM\n\n## 3. RxSwift 常用架构\n\n## 3.1. RxFeedback\n\n## 3.2 ReactorKit\n\n## 4. [iOS应用架构谈](https://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html)\n\n* [今日头条：iOS 架构设计杂谈](https://juejin.cn/post/6844903623252525064)\n* [awesome iOS architecture](https://github.com/onmyway133/awesome-ios-architecture#data-source)\n* [SwiftHub](https://github.com/khoren93/SwiftHub)\n\n[^1]: [MVC是框架？是设计模式？是架构？还是……](https://blog.csdn.net/CillyB/article/details/79464339?utm_source=blogxgwz7&utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242)\n","slug":"iOS/Architecture","published":1,"updated":"2021-09-22T06:56:40.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmyz0006iu9kg5z826ck","content":"<h2 id=\"1-架构设计模式-1\"><a href=\"#1-架构设计模式-1\" class=\"headerlink\" title=\"1. 架构设计模式^1\"></a>1. 架构设计模式<a href=\"%5BMVC%E6%98%AF%E6%A1%86%E6%9E%B6%EF%BC%9F%E6%98%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9F%E6%98%AF%E6%9E%B6%E6%9E%84%EF%BC%9F%E8%BF%98%E6%98%AF%E2%80%A6%E2%80%A6%5D(https://blog.csdn.net/CillyB/article/details/79464339?utm_source=blogxgwz7&utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242)\">^1</a></h2><h3 id=\"1-1-软件架构入门\"><a href=\"#1-1-软件架构入门\" class=\"headerlink\" title=\"1.1 软件架构入门\"></a>1.1 <a href=\"http://www.ruanyifeng.com/blog/2016/09/software-architecture.html\">软件架构入门</a></h3><h3 id=\"1-2-分层架构\"><a href=\"#1-2-分层架构\" class=\"headerlink\" title=\"1.2 分层架构\"></a>1.2 分层架构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 表现层（presentation）：用户界面，负责视觉和用户互动</span><br><span class=\"line\">2. 业务层（business）：实现业务逻辑</span><br><span class=\"line\">3. 服务层 (service): 不同业务逻辑的通用接口</span><br><span class=\"line\">4. 持久层（persistence）：提供数据，SQL 语句就放在这一层</span><br><span class=\"line\">5. 数据库（database） ：保存数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-事件驱动架构\"><a href=\"#1-3-事件驱动架构\" class=\"headerlink\" title=\"1.3 事件驱动架构\"></a>1.3 事件驱动架构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 事件队列（event queue）：接收事件的入口</span><br><span class=\"line\">2. 分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元</span><br><span class=\"line\">3. 事件通道（event channel）：分发器与处理器之间的联系渠道</span><br><span class=\"line\">4. 事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-微核架构\"><a href=\"#1-4-微核架构\" class=\"headerlink\" title=\"1.4 微核架构\"></a>1.4 微核架构</h3><p>微核架构（microkernel architecture）又称为”插件架构”（plug-in architecture），指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。</p>\n<h3 id=\"1-5-微服务架构\"><a href=\"#1-5-微服务架构\" class=\"headerlink\" title=\"1.5 微服务架构\"></a>1.5 微服务架构</h3><p>微服务架构分成三种实现模式:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. RESTful API 模式：服务通过 API 提供，云服务就属于这一类</span><br><span class=\"line\">2. RESTful 应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部</span><br><span class=\"line\">3. 集中消息模式：采用消息代理（message broker），可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-云架构\"><a href=\"#1-6-云架构\" class=\"headerlink\" title=\"1.6 云架构\"></a>1.6 云架构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 处理单元：实现业务逻辑</span><br><span class=\"line\">2. 虚拟中间件：负责通信、保持sessions、数据复制、分布式处理、处理单元的部署。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-浅谈-MVC、MVP-和-MVVM-架构模式\"><a href=\"#2-浅谈-MVC、MVP-和-MVVM-架构模式\" class=\"headerlink\" title=\"2. 浅谈 MVC、MVP 和 MVVM 架构模式\"></a>2. <a href=\"https://draveness.me/mvx/\">浅谈 MVC、MVP 和 MVVM 架构模式</a></h2><h3 id=\"2-1-MVC\"><a href=\"#2-1-MVC\" class=\"headerlink\" title=\"2.1 MVC\"></a>2.1 MVC</h3><p><a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html\">苹果的 MVC</a></p>\n<p><img src=\"/./resources/../Resources/model_view_controller_2x.png\" alt=\"ios 的 MVC\"></p>\n<p>斯坦福白胡子老头的 MVC</p>\n<p><img src=\"/./Resources/MVC_Stanford.webp\" alt=\"斯坦福白胡子老头的 MVC\"></p>\n<p>这个图的理解，做一个说明，图中有几条线把这三部分划分开，有黄线，虚线，和白色的实线。我们把它们想象成路标。</p>\n<ul>\n<li>在 M 和 V 之间有两条黄线，这表示什么呢？它意味着你不能穿越这黄线，任何一个方向都不行。</li>\n<li>白色的虚线，它意味着你可以自由的穿越它，只要是安全的。</li>\n<li>白色的实线，它代表你可以穿越，但你必须要买票，或者交点过路费，target-action，Delegate，DataSource。</li>\n<li>图中绿色的箭头表示直接引用，直接引用直观来说，就是说需要包含引用类的申明头文件和类的实例变量。可以看到，只有 Controller 中，有对 Model 和 View 的直接引用。其中对 View 的直接引用体现为 IBOutlet。</li>\n<li>Model 在图上有一个信号塔类似的图形，旁边写着 Notification &amp; KVO。这表明 Model 主要是通过 Notification 和 KVO 来和 Controller 通讯的。</li>\n</ul>\n<h3 id=\"2-2-MV-VM\"><a href=\"#2-2-MV-VM\" class=\"headerlink\" title=\"2.2 MV-VM\"></a>2.2 MV-VM</h3><h2 id=\"3-RxSwift-常用架构\"><a href=\"#3-RxSwift-常用架构\" class=\"headerlink\" title=\"3. RxSwift 常用架构\"></a>3. RxSwift 常用架构</h2><h2 id=\"3-1-RxFeedback\"><a href=\"#3-1-RxFeedback\" class=\"headerlink\" title=\"3.1. RxFeedback\"></a>3.1. RxFeedback</h2><h2 id=\"3-2-ReactorKit\"><a href=\"#3-2-ReactorKit\" class=\"headerlink\" title=\"3.2 ReactorKit\"></a>3.2 ReactorKit</h2><h2 id=\"4-iOS应用架构谈\"><a href=\"#4-iOS应用架构谈\" class=\"headerlink\" title=\"4. iOS应用架构谈\"></a>4. <a href=\"https://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html\">iOS应用架构谈</a></h2><ul>\n<li><a href=\"https://juejin.cn/post/6844903623252525064\">今日头条：iOS 架构设计杂谈</a></li>\n<li><a href=\"https://github.com/onmyway133/awesome-ios-architecture#data-source\">awesome iOS architecture</a></li>\n<li><a href=\"https://github.com/khoren93/SwiftHub\">SwiftHub</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-架构设计模式-1\"><a href=\"#1-架构设计模式-1\" class=\"headerlink\" title=\"1. 架构设计模式^1\"></a>1. 架构设计模式<a href=\"%5BMVC%E6%98%AF%E6%A1%86%E6%9E%B6%EF%BC%9F%E6%98%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9F%E6%98%AF%E6%9E%B6%E6%9E%84%EF%BC%9F%E8%BF%98%E6%98%AF%E2%80%A6%E2%80%A6%5D(https://blog.csdn.net/CillyB/article/details/79464339?utm_source=blogxgwz7&utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242)\">^1</a></h2><h3 id=\"1-1-软件架构入门\"><a href=\"#1-1-软件架构入门\" class=\"headerlink\" title=\"1.1 软件架构入门\"></a>1.1 <a href=\"http://www.ruanyifeng.com/blog/2016/09/software-architecture.html\">软件架构入门</a></h3><h3 id=\"1-2-分层架构\"><a href=\"#1-2-分层架构\" class=\"headerlink\" title=\"1.2 分层架构\"></a>1.2 分层架构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 表现层（presentation）：用户界面，负责视觉和用户互动</span><br><span class=\"line\">2. 业务层（business）：实现业务逻辑</span><br><span class=\"line\">3. 服务层 (service): 不同业务逻辑的通用接口</span><br><span class=\"line\">4. 持久层（persistence）：提供数据，SQL 语句就放在这一层</span><br><span class=\"line\">5. 数据库（database） ：保存数据</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-事件驱动架构\"><a href=\"#1-3-事件驱动架构\" class=\"headerlink\" title=\"1.3 事件驱动架构\"></a>1.3 事件驱动架构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 事件队列（event queue）：接收事件的入口</span><br><span class=\"line\">2. 分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元</span><br><span class=\"line\">3. 事件通道（event channel）：分发器与处理器之间的联系渠道</span><br><span class=\"line\">4. 事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-微核架构\"><a href=\"#1-4-微核架构\" class=\"headerlink\" title=\"1.4 微核架构\"></a>1.4 微核架构</h3><p>微核架构（microkernel architecture）又称为”插件架构”（plug-in architecture），指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。</p>\n<h3 id=\"1-5-微服务架构\"><a href=\"#1-5-微服务架构\" class=\"headerlink\" title=\"1.5 微服务架构\"></a>1.5 微服务架构</h3><p>微服务架构分成三种实现模式:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. RESTful API 模式：服务通过 API 提供，云服务就属于这一类</span><br><span class=\"line\">2. RESTful 应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部</span><br><span class=\"line\">3. 集中消息模式：采用消息代理（message broker），可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-云架构\"><a href=\"#1-6-云架构\" class=\"headerlink\" title=\"1.6 云架构\"></a>1.6 云架构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 处理单元：实现业务逻辑</span><br><span class=\"line\">2. 虚拟中间件：负责通信、保持sessions、数据复制、分布式处理、处理单元的部署。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-浅谈-MVC、MVP-和-MVVM-架构模式\"><a href=\"#2-浅谈-MVC、MVP-和-MVVM-架构模式\" class=\"headerlink\" title=\"2. 浅谈 MVC、MVP 和 MVVM 架构模式\"></a>2. <a href=\"https://draveness.me/mvx/\">浅谈 MVC、MVP 和 MVVM 架构模式</a></h2><h3 id=\"2-1-MVC\"><a href=\"#2-1-MVC\" class=\"headerlink\" title=\"2.1 MVC\"></a>2.1 MVC</h3><p><a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html\">苹果的 MVC</a></p>\n<p><img src=\"/./resources/../Resources/model_view_controller_2x.png\" alt=\"ios 的 MVC\"></p>\n<p>斯坦福白胡子老头的 MVC</p>\n<p><img src=\"/./Resources/MVC_Stanford.webp\" alt=\"斯坦福白胡子老头的 MVC\"></p>\n<p>这个图的理解，做一个说明，图中有几条线把这三部分划分开，有黄线，虚线，和白色的实线。我们把它们想象成路标。</p>\n<ul>\n<li>在 M 和 V 之间有两条黄线，这表示什么呢？它意味着你不能穿越这黄线，任何一个方向都不行。</li>\n<li>白色的虚线，它意味着你可以自由的穿越它，只要是安全的。</li>\n<li>白色的实线，它代表你可以穿越，但你必须要买票，或者交点过路费，target-action，Delegate，DataSource。</li>\n<li>图中绿色的箭头表示直接引用，直接引用直观来说，就是说需要包含引用类的申明头文件和类的实例变量。可以看到，只有 Controller 中，有对 Model 和 View 的直接引用。其中对 View 的直接引用体现为 IBOutlet。</li>\n<li>Model 在图上有一个信号塔类似的图形，旁边写着 Notification &amp; KVO。这表明 Model 主要是通过 Notification 和 KVO 来和 Controller 通讯的。</li>\n</ul>\n<h3 id=\"2-2-MV-VM\"><a href=\"#2-2-MV-VM\" class=\"headerlink\" title=\"2.2 MV-VM\"></a>2.2 MV-VM</h3><h2 id=\"3-RxSwift-常用架构\"><a href=\"#3-RxSwift-常用架构\" class=\"headerlink\" title=\"3. RxSwift 常用架构\"></a>3. RxSwift 常用架构</h2><h2 id=\"3-1-RxFeedback\"><a href=\"#3-1-RxFeedback\" class=\"headerlink\" title=\"3.1. RxFeedback\"></a>3.1. RxFeedback</h2><h2 id=\"3-2-ReactorKit\"><a href=\"#3-2-ReactorKit\" class=\"headerlink\" title=\"3.2 ReactorKit\"></a>3.2 ReactorKit</h2><h2 id=\"4-iOS应用架构谈\"><a href=\"#4-iOS应用架构谈\" class=\"headerlink\" title=\"4. iOS应用架构谈\"></a>4. <a href=\"https://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html\">iOS应用架构谈</a></h2><ul>\n<li><a href=\"https://juejin.cn/post/6844903623252525064\">今日头条：iOS 架构设计杂谈</a></li>\n<li><a href=\"https://github.com/onmyway133/awesome-ios-architecture#data-source\">awesome iOS architecture</a></li>\n<li><a href=\"https://github.com/khoren93/SwiftHub\">SwiftHub</a></li>\n</ul>\n"},{"title":"iOS 之概念","abbrlink":34078,"date":"2021-07-29T01:59:00.000Z","_content":"<!--\n * @Author: hepeng.l\n * @Date: 2021-05-21 18:34:21\n * @LastEditors: hepeng.l\n * @LastEditTime: 2021-05-21 18:36:00\n * @Description: \n-->\n\n## iOS 之概念\n\n### 1. [General Conceptual](https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/Category.html)\n\n### 2. [iOS main之前发生了什么](https://blog.csdn.net/ivolcano/article/details/89739531)\n","source":"_posts/iOS/Concepts.md","raw":"---\ntitle: iOS 之概念\nabbrlink: 34078\ndate: 2021-07-29 09:59:00\ntags:\n---\n<!--\n * @Author: hepeng.l\n * @Date: 2021-05-21 18:34:21\n * @LastEditors: hepeng.l\n * @LastEditTime: 2021-05-21 18:36:00\n * @Description: \n-->\n\n## iOS 之概念\n\n### 1. [General Conceptual](https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/Category.html)\n\n### 2. [iOS main之前发生了什么](https://blog.csdn.net/ivolcano/article/details/89739531)\n","slug":"iOS/Concepts","published":1,"updated":"2021-07-29T06:45:56.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmz00007iu9k3l0dbpaw","content":"<!--\n * @Author: hepeng.l\n * @Date: 2021-05-21 18:34:21\n * @LastEditors: hepeng.l\n * @LastEditTime: 2021-05-21 18:36:00\n * @Description: \n-->\n\n<h2 id=\"iOS-之概念\"><a href=\"#iOS-之概念\" class=\"headerlink\" title=\"iOS 之概念\"></a>iOS 之概念</h2><h3 id=\"1-General-Conceptual\"><a href=\"#1-General-Conceptual\" class=\"headerlink\" title=\"1. General Conceptual\"></a>1. <a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/Category.html\">General Conceptual</a></h3><h3 id=\"2-iOS-main之前发生了什么\"><a href=\"#2-iOS-main之前发生了什么\" class=\"headerlink\" title=\"2. iOS main之前发生了什么\"></a>2. <a href=\"https://blog.csdn.net/ivolcano/article/details/89739531\">iOS main之前发生了什么</a></h3>","site":{"data":{}},"excerpt":"","more":"<!--\n * @Author: hepeng.l\n * @Date: 2021-05-21 18:34:21\n * @LastEditors: hepeng.l\n * @LastEditTime: 2021-05-21 18:36:00\n * @Description: \n-->\n\n<h2 id=\"iOS-之概念\"><a href=\"#iOS-之概念\" class=\"headerlink\" title=\"iOS 之概念\"></a>iOS 之概念</h2><h3 id=\"1-General-Conceptual\"><a href=\"#1-General-Conceptual\" class=\"headerlink\" title=\"1. General Conceptual\"></a>1. <a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/Category.html\">General Conceptual</a></h3><h3 id=\"2-iOS-main之前发生了什么\"><a href=\"#2-iOS-main之前发生了什么\" class=\"headerlink\" title=\"2. iOS main之前发生了什么\"></a>2. <a href=\"https://blog.csdn.net/ivolcano/article/details/89739531\">iOS main之前发生了什么</a></h3>"},{"title":"iOS之代码重构","abbrlink":"6ff8b525","date":"2021-04-19T16:00:00.000Z","_content":"","source":"_posts/iOS/CodeRestructure.md","raw":"---\ntitle: iOS之代码重构\nabbrlink: 6ff8b525\ndate: 2021-04-20 00:00:00\ntags:\n---\n","slug":"iOS/CodeRestructure","published":1,"updated":"2021-07-29T06:45:56.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmz10008iu9kb6edg2e9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之设计模式","abbrlink":"888457d","date":"2021-06-03T16:00:00.000Z","_content":"\n## 1. [Aspects深度解析-iOS面向切面编程](https://juejin.cn/post/6844904052778598408)\n","source":"_posts/iOS/DesignPattern.md","raw":"---\ntitle: iOS之设计模式\nabbrlink: 888457d\ndate: 2021-06-04 00:00:00\ntags:\n---\n\n## 1. [Aspects深度解析-iOS面向切面编程](https://juejin.cn/post/6844904052778598408)\n","slug":"iOS/DesignPattern","published":1,"updated":"2021-07-29T06:45:56.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmz20009iu9k06ne4bq6","content":"<h2 id=\"1-Aspects深度解析-iOS面向切面编程\"><a href=\"#1-Aspects深度解析-iOS面向切面编程\" class=\"headerlink\" title=\"1. Aspects深度解析-iOS面向切面编程\"></a>1. <a href=\"https://juejin.cn/post/6844904052778598408\">Aspects深度解析-iOS面向切面编程</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Aspects深度解析-iOS面向切面编程\"><a href=\"#1-Aspects深度解析-iOS面向切面编程\" class=\"headerlink\" title=\"1. Aspects深度解析-iOS面向切面编程\"></a>1. <a href=\"https://juejin.cn/post/6844904052778598408\">Aspects深度解析-iOS面向切面编程</a></h2>"},{"title":"iOS之组件化","abbrlink":"6b78a92c","date":"2021-04-19T16:00:00.000Z","_content":"\n## 1. [CocoaPod](./iOS之开发工具/cocoapod.md)\n\n## 2. [iOS里的动态库和静态库](https://www.jianshu.com/p/42891fb90304)\n","source":"_posts/iOS/Components.md","raw":"---\ntitle: iOS之组件化\nabbrlink: 6b78a92c\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n## 1. [CocoaPod](./iOS之开发工具/cocoapod.md)\n\n## 2. [iOS里的动态库和静态库](https://www.jianshu.com/p/42891fb90304)\n","slug":"iOS/Components","published":1,"updated":"2021-07-29T06:45:56.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmz2000aiu9k3iey1jct","content":"<h2 id=\"1-CocoaPod\"><a href=\"#1-CocoaPod\" class=\"headerlink\" title=\"1. CocoaPod\"></a>1. <a href=\"./iOS%E4%B9%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/cocoapod.md\">CocoaPod</a></h2><h2 id=\"2-iOS里的动态库和静态库\"><a href=\"#2-iOS里的动态库和静态库\" class=\"headerlink\" title=\"2. iOS里的动态库和静态库\"></a>2. <a href=\"https://www.jianshu.com/p/42891fb90304\">iOS里的动态库和静态库</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-CocoaPod\"><a href=\"#1-CocoaPod\" class=\"headerlink\" title=\"1. CocoaPod\"></a>1. <a href=\"./iOS%E4%B9%8B%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/cocoapod.md\">CocoaPod</a></h2><h2 id=\"2-iOS里的动态库和静态库\"><a href=\"#2-iOS里的动态库和静态库\" class=\"headerlink\" title=\"2. iOS里的动态库和静态库\"></a>2. <a href=\"https://www.jianshu.com/p/42891fb90304\">iOS里的动态库和静态库</a></h2>"},{"title":"iOS之生态体系及结构","abbrlink":"2e955efc","date":"2021-04-19T16:00:00.000Z","_content":"","source":"_posts/iOS/Ecosystem.md","raw":"---\ntitle: iOS之生态体系及结构\nabbrlink: 2e955efc\ndate: 2021-04-20 00:00:00\ntags:\n---\n","slug":"iOS/Ecosystem","published":1,"updated":"2021-07-29T06:45:56.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmz5000biu9k677vghvr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之事件传递与响应者链","abbrlink":"8792dfd5","date":"2021-04-19T16:00:00.000Z","_content":"\n## 1. [史上最详细的iOS之事件的传递和响应机制-原理篇](https://www.jianshu.com/p/2e074db792ba)\n\n## 2. [iOS响应者链彻底掌握](https://segmentfault.com/a/1190000015060603)\n","source":"_posts/iOS/Events&Responder.md","raw":"---\ntitle: iOS之事件传递与响应者链\nabbrlink: 8792dfd5\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n## 1. [史上最详细的iOS之事件的传递和响应机制-原理篇](https://www.jianshu.com/p/2e074db792ba)\n\n## 2. [iOS响应者链彻底掌握](https://segmentfault.com/a/1190000015060603)\n","slug":"iOS/Events&Responder","published":1,"updated":"2021-07-29T06:45:56.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmz7000ciu9k7pklee3r","content":"<h2 id=\"1-史上最详细的iOS之事件的传递和响应机制-原理篇\"><a href=\"#1-史上最详细的iOS之事件的传递和响应机制-原理篇\" class=\"headerlink\" title=\"1. 史上最详细的iOS之事件的传递和响应机制-原理篇\"></a>1. <a href=\"https://www.jianshu.com/p/2e074db792ba\">史上最详细的iOS之事件的传递和响应机制-原理篇</a></h2><h2 id=\"2-iOS响应者链彻底掌握\"><a href=\"#2-iOS响应者链彻底掌握\" class=\"headerlink\" title=\"2. iOS响应者链彻底掌握\"></a>2. <a href=\"https://segmentfault.com/a/1190000015060603\">iOS响应者链彻底掌握</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-史上最详细的iOS之事件的传递和响应机制-原理篇\"><a href=\"#1-史上最详细的iOS之事件的传递和响应机制-原理篇\" class=\"headerlink\" title=\"1. 史上最详细的iOS之事件的传递和响应机制-原理篇\"></a>1. <a href=\"https://www.jianshu.com/p/2e074db792ba\">史上最详细的iOS之事件的传递和响应机制-原理篇</a></h2><h2 id=\"2-iOS响应者链彻底掌握\"><a href=\"#2-iOS响应者链彻底掌握\" class=\"headerlink\" title=\"2. iOS响应者链彻底掌握\"></a>2. <a href=\"https://segmentfault.com/a/1190000015060603\">iOS响应者链彻底掌握</a></h2>"},{"title":"iOS之框架","abbrlink":"d8085996","date":"2021-04-19T16:00:00.000Z","_content":"","source":"_posts/iOS/FrameWorks.md","raw":"---\ntitle: iOS之框架\nabbrlink: d8085996\ndate: 2021-04-20 00:00:00\ntags:\n---\n","slug":"iOS/FrameWorks","published":1,"updated":"2021-07-29T06:45:56.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmz8000diu9k029l0zye","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之规范","abbrlink":"e3929c37","date":"2021-04-19T16:00:00.000Z","_content":"\n## 一、命名规范\n\n### 1、基本规则\n\n* 清晰，又清晰又简洁是最好的了，但简洁不如清晰重要。总的讲不要使用单词的简写，除了非常常用的简写以外，尽量使用单词全称。\n\n* 一致性，命名代表意思与所做事情的一致性，命名与通常使用的名字的一致性，比如setStringValue，setTabBarColor等\n\n### 2、类命名\n\n* 大驼峰命名法、功能+类型 例如LoginViewController\n\n### 3、类别扩展命名(Category和Extension)\n\n* 类别(Category)命名：类名+功能 例如 UIView+Frame\n\n* 扩展(Extension)命名：类名+Extension 例如UIView+Extension\n  \n### 4、变量命名\n\n* 小驼峰命名法\n\n* 使用修饰+类型的方式，比如titleLabel\n* 命名尽量以清晰为主，变量名尽量可以推测其用途\n\n### 5、宏及常量命名\n\n* 常量、宏(swift中没有宏，使用常量定义)，前面带小写字母k作为常量标识，其余部分采取大写，单词以英文下划线”_“分割。\n\n* 通用的常量使用宏#define来定义，单独类中使用的常量使用static定义\n* 宏尽量少用，编译耗时，影响程序的启动，尽量用常量来代替，之前iOS工程默认有预编译文件的，后来iOS把这个默认文件去掉了，倡导用常量代替\n\n### 6、图片文件命名\n\n* 采用模块_功能形式\n\n* 尽量采用单词全拼或者公认的无歧义缩写(如nav，bg，btn等)\n\n### 7、通知协议代理命名\n\n* 通知命名：[触发通知的类名] + [Did | Will] + [动作] + Notification，例如：TextFieldDidChangeNotification等\n\n* 代理命名：作用类+should will did等关键字+作用 比如：@objc optional  func sureBtnDidTouch:(UIButton*)sureBtn\n* 协议命名：前缀+作用+ing 与类名区分 比如：NSCopying\n\n### 8、Bundle Identifier命名\n\n* 采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名根据应用进行命名。\n\n## 二、代码规范\n\n### 1、删除多余空格\n\n* 所有方法与方法之间空一行\n\n* 代码块之间空一行\n\n### 2、删除多余的注释\n\n* 删除注释掉的代码\n\n* 删除无意义的代码\n\n### 3、删除多余方法\n\n* 没有使用到的方法删除掉\n\n* 如果方法没有执行任何业务逻辑，但需要放着，给予一定的注释\n\n### 4、删除未被使用的资源文件\n\n### 5、添加必要的注释\n\n* .h文件的property需要注释(swift中参与业务逻辑的对象需要注释)\n\n* 自定义的方法需要注释\n* 大的代码块需要注释\n* 宏枚举需要有一定的注释\n* 复杂的逻辑代码需要给予一定的注释\n\n### 6、整体代码风格尽量统一\n\n* 逻辑运算符与代码之间空一格\n\n* 逻辑或方法结尾的}需要占用一格\n* 代理、逻辑业务方法等模块区分使用“//MARK: - ”，且与代码之间不要空格\n* 在方法命名时-和()之间需要有空格（objective-C）\n* 定义对象时 *号属于类型的一部分 放在对象前 与类型空格 例如：NSArray*dataArray\n\n### 7、[raywenderlich/swift-style-guide：](https://github.com/raywenderlich/swift-style-guide)Swift 代码编程规范\n\n## 三、项目管理\n\n### 1、模块管理\n\n* 采取MVC设计架构  \n\n* 采取模块化开发，公用或者常使用到的一些模块单独抽离封装到公用类，减少团队操作，提高开发效率\n* 大体上市按照业务模块、三方库、项目资源、公用类划分\n\n### 2、代码管理\n\n* 采用git多分支管理，平时开发在development分支进行\n* <mark>引入第三方库时需要经过团队讨论，参照使用方便性，学习成本，性能，项目影响覆盖等因素再决定引入，不要随意引入</mark>\n* <mark>公用的模块划分出来可以提供团队参考使用\n* 每天至少上班前更新一次代码，下班提交一次代码，以免多人工作不同步\n* 个人测试代码不要提交，以免影响同伴开发\n* 修改配置文件等共享文件前，一定要更新，修改完验证之后要马上提交，避免冲突\n\n### 3、团队交流\n\n* 工作上碰到的问题鼓励邮件沟通，方便分散式管理，也可避免长时间后不记得了\n* 对于工作问题，一定要谨慎、仔细，今天能完成和要完成的问题最好不要拖拉\n* 如果觉得某些功能实现有困难，要提出来探讨折中实现方式，不要敷衍行事\n* 工作职责一定要明确、能够对应相应负责人员处理解决，包括对接产品、设计、服务器、Android等同事，积极沟通处理\n* 有一些好的想法，方便项目开发或者能够方便团队协作的方式，积极提出，这也是一种刺激主动学习的方式\n* 平时如果觉得有什么好的学习资源、技巧，鼓励积极分享，共同成长\n* <mark>多写学习体验、鼓励钻研新技术，分享，到时候在git上建个公共文件夹（同步管理），大家平时可以在上面公开写，收集进来也可以，到时候统一整理，专题列在第五条里面，尽量用Markdown，查看方便。比如有名的三方库文件源码解读\n（AFNetWorking、SDWebImage等，培养读源码的兴趣，对知识了解也较为彻底）、Git/SVN等工具的基本使用、Vim的\n基本使用等\n\n### 5、iOS 研究方向（技术类）\n\n[#逆向工程专题](\"\")\n\n[#混合开发（如：React-Native）专题](\"\")\n\n[#单元测试系统化、自动化专题](\"\")\n\n[#持续集成化专题](\"\")\n\n[#动画专题](\"\")\n\n[#音视频专题（FFMpeg）、图片处理（OpenGL、GPUimage、OpenCV）](\"\")\n\n[#设计模式专题](\"\")\n\n[#iOS框架专题](\"\")\n\n[#性能研究专题](\"\")\n\n[#算法专题](\"\")\n\n[#网络及网络协议专题](\"\")\n\n[#操作系统（Linux、Unix）专题](\"\")\n\n[#编程语言专题](\"\")\n\n[#重构专题](\"\")\n\n### 6、业余讨论（非技术类）\n\n[#运动](\"\")\n\n[#游戏娱乐](\"\")\n\n[#理财](\"\")\n\n[#项目管理](\"\")\n\n[#学习方法，专业思维的培养](\"\")\n","source":"_posts/iOS/Guidelines.md","raw":"---\ntitle: iOS之规范\nabbrlink: e3929c37\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n## 一、命名规范\n\n### 1、基本规则\n\n* 清晰，又清晰又简洁是最好的了，但简洁不如清晰重要。总的讲不要使用单词的简写，除了非常常用的简写以外，尽量使用单词全称。\n\n* 一致性，命名代表意思与所做事情的一致性，命名与通常使用的名字的一致性，比如setStringValue，setTabBarColor等\n\n### 2、类命名\n\n* 大驼峰命名法、功能+类型 例如LoginViewController\n\n### 3、类别扩展命名(Category和Extension)\n\n* 类别(Category)命名：类名+功能 例如 UIView+Frame\n\n* 扩展(Extension)命名：类名+Extension 例如UIView+Extension\n  \n### 4、变量命名\n\n* 小驼峰命名法\n\n* 使用修饰+类型的方式，比如titleLabel\n* 命名尽量以清晰为主，变量名尽量可以推测其用途\n\n### 5、宏及常量命名\n\n* 常量、宏(swift中没有宏，使用常量定义)，前面带小写字母k作为常量标识，其余部分采取大写，单词以英文下划线”_“分割。\n\n* 通用的常量使用宏#define来定义，单独类中使用的常量使用static定义\n* 宏尽量少用，编译耗时，影响程序的启动，尽量用常量来代替，之前iOS工程默认有预编译文件的，后来iOS把这个默认文件去掉了，倡导用常量代替\n\n### 6、图片文件命名\n\n* 采用模块_功能形式\n\n* 尽量采用单词全拼或者公认的无歧义缩写(如nav，bg，btn等)\n\n### 7、通知协议代理命名\n\n* 通知命名：[触发通知的类名] + [Did | Will] + [动作] + Notification，例如：TextFieldDidChangeNotification等\n\n* 代理命名：作用类+should will did等关键字+作用 比如：@objc optional  func sureBtnDidTouch:(UIButton*)sureBtn\n* 协议命名：前缀+作用+ing 与类名区分 比如：NSCopying\n\n### 8、Bundle Identifier命名\n\n* 采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名根据应用进行命名。\n\n## 二、代码规范\n\n### 1、删除多余空格\n\n* 所有方法与方法之间空一行\n\n* 代码块之间空一行\n\n### 2、删除多余的注释\n\n* 删除注释掉的代码\n\n* 删除无意义的代码\n\n### 3、删除多余方法\n\n* 没有使用到的方法删除掉\n\n* 如果方法没有执行任何业务逻辑，但需要放着，给予一定的注释\n\n### 4、删除未被使用的资源文件\n\n### 5、添加必要的注释\n\n* .h文件的property需要注释(swift中参与业务逻辑的对象需要注释)\n\n* 自定义的方法需要注释\n* 大的代码块需要注释\n* 宏枚举需要有一定的注释\n* 复杂的逻辑代码需要给予一定的注释\n\n### 6、整体代码风格尽量统一\n\n* 逻辑运算符与代码之间空一格\n\n* 逻辑或方法结尾的}需要占用一格\n* 代理、逻辑业务方法等模块区分使用“//MARK: - ”，且与代码之间不要空格\n* 在方法命名时-和()之间需要有空格（objective-C）\n* 定义对象时 *号属于类型的一部分 放在对象前 与类型空格 例如：NSArray*dataArray\n\n### 7、[raywenderlich/swift-style-guide：](https://github.com/raywenderlich/swift-style-guide)Swift 代码编程规范\n\n## 三、项目管理\n\n### 1、模块管理\n\n* 采取MVC设计架构  \n\n* 采取模块化开发，公用或者常使用到的一些模块单独抽离封装到公用类，减少团队操作，提高开发效率\n* 大体上市按照业务模块、三方库、项目资源、公用类划分\n\n### 2、代码管理\n\n* 采用git多分支管理，平时开发在development分支进行\n* <mark>引入第三方库时需要经过团队讨论，参照使用方便性，学习成本，性能，项目影响覆盖等因素再决定引入，不要随意引入</mark>\n* <mark>公用的模块划分出来可以提供团队参考使用\n* 每天至少上班前更新一次代码，下班提交一次代码，以免多人工作不同步\n* 个人测试代码不要提交，以免影响同伴开发\n* 修改配置文件等共享文件前，一定要更新，修改完验证之后要马上提交，避免冲突\n\n### 3、团队交流\n\n* 工作上碰到的问题鼓励邮件沟通，方便分散式管理，也可避免长时间后不记得了\n* 对于工作问题，一定要谨慎、仔细，今天能完成和要完成的问题最好不要拖拉\n* 如果觉得某些功能实现有困难，要提出来探讨折中实现方式，不要敷衍行事\n* 工作职责一定要明确、能够对应相应负责人员处理解决，包括对接产品、设计、服务器、Android等同事，积极沟通处理\n* 有一些好的想法，方便项目开发或者能够方便团队协作的方式，积极提出，这也是一种刺激主动学习的方式\n* 平时如果觉得有什么好的学习资源、技巧，鼓励积极分享，共同成长\n* <mark>多写学习体验、鼓励钻研新技术，分享，到时候在git上建个公共文件夹（同步管理），大家平时可以在上面公开写，收集进来也可以，到时候统一整理，专题列在第五条里面，尽量用Markdown，查看方便。比如有名的三方库文件源码解读\n（AFNetWorking、SDWebImage等，培养读源码的兴趣，对知识了解也较为彻底）、Git/SVN等工具的基本使用、Vim的\n基本使用等\n\n### 5、iOS 研究方向（技术类）\n\n[#逆向工程专题](\"\")\n\n[#混合开发（如：React-Native）专题](\"\")\n\n[#单元测试系统化、自动化专题](\"\")\n\n[#持续集成化专题](\"\")\n\n[#动画专题](\"\")\n\n[#音视频专题（FFMpeg）、图片处理（OpenGL、GPUimage、OpenCV）](\"\")\n\n[#设计模式专题](\"\")\n\n[#iOS框架专题](\"\")\n\n[#性能研究专题](\"\")\n\n[#算法专题](\"\")\n\n[#网络及网络协议专题](\"\")\n\n[#操作系统（Linux、Unix）专题](\"\")\n\n[#编程语言专题](\"\")\n\n[#重构专题](\"\")\n\n### 6、业余讨论（非技术类）\n\n[#运动](\"\")\n\n[#游戏娱乐](\"\")\n\n[#理财](\"\")\n\n[#项目管理](\"\")\n\n[#学习方法，专业思维的培养](\"\")\n","slug":"iOS/Guidelines","published":1,"updated":"2021-07-29T06:46:00.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmz9000eiu9k2k6gdllp","content":"<h2 id=\"一、命名规范\"><a href=\"#一、命名规范\" class=\"headerlink\" title=\"一、命名规范\"></a>一、命名规范</h2><h3 id=\"1、基本规则\"><a href=\"#1、基本规则\" class=\"headerlink\" title=\"1、基本规则\"></a>1、基本规则</h3><ul>\n<li><p>清晰，又清晰又简洁是最好的了，但简洁不如清晰重要。总的讲不要使用单词的简写，除了非常常用的简写以外，尽量使用单词全称。</p>\n</li>\n<li><p>一致性，命名代表意思与所做事情的一致性，命名与通常使用的名字的一致性，比如setStringValue，setTabBarColor等</p>\n</li>\n</ul>\n<h3 id=\"2、类命名\"><a href=\"#2、类命名\" class=\"headerlink\" title=\"2、类命名\"></a>2、类命名</h3><ul>\n<li>大驼峰命名法、功能+类型 例如LoginViewController</li>\n</ul>\n<h3 id=\"3、类别扩展命名-Category和Extension\"><a href=\"#3、类别扩展命名-Category和Extension\" class=\"headerlink\" title=\"3、类别扩展命名(Category和Extension)\"></a>3、类别扩展命名(Category和Extension)</h3><ul>\n<li><p>类别(Category)命名：类名+功能 例如 UIView+Frame</p>\n</li>\n<li><p>扩展(Extension)命名：类名+Extension 例如UIView+Extension</p>\n</li>\n</ul>\n<h3 id=\"4、变量命名\"><a href=\"#4、变量命名\" class=\"headerlink\" title=\"4、变量命名\"></a>4、变量命名</h3><ul>\n<li><p>小驼峰命名法</p>\n</li>\n<li><p>使用修饰+类型的方式，比如titleLabel</p>\n</li>\n<li><p>命名尽量以清晰为主，变量名尽量可以推测其用途</p>\n</li>\n</ul>\n<h3 id=\"5、宏及常量命名\"><a href=\"#5、宏及常量命名\" class=\"headerlink\" title=\"5、宏及常量命名\"></a>5、宏及常量命名</h3><ul>\n<li><p>常量、宏(swift中没有宏，使用常量定义)，前面带小写字母k作为常量标识，其余部分采取大写，单词以英文下划线”_“分割。</p>\n</li>\n<li><p>通用的常量使用宏#define来定义，单独类中使用的常量使用static定义</p>\n</li>\n<li><p>宏尽量少用，编译耗时，影响程序的启动，尽量用常量来代替，之前iOS工程默认有预编译文件的，后来iOS把这个默认文件去掉了，倡导用常量代替</p>\n</li>\n</ul>\n<h3 id=\"6、图片文件命名\"><a href=\"#6、图片文件命名\" class=\"headerlink\" title=\"6、图片文件命名\"></a>6、图片文件命名</h3><ul>\n<li><p>采用模块_功能形式</p>\n</li>\n<li><p>尽量采用单词全拼或者公认的无歧义缩写(如nav，bg，btn等)</p>\n</li>\n</ul>\n<h3 id=\"7、通知协议代理命名\"><a href=\"#7、通知协议代理命名\" class=\"headerlink\" title=\"7、通知协议代理命名\"></a>7、通知协议代理命名</h3><ul>\n<li><p>通知命名：[触发通知的类名] + [Did | Will] + [动作] + Notification，例如：TextFieldDidChangeNotification等</p>\n</li>\n<li><p>代理命名：作用类+should will did等关键字+作用 比如：@objc optional  func sureBtnDidTouch:(UIButton*)sureBtn</p>\n</li>\n<li><p>协议命名：前缀+作用+ing 与类名区分 比如：NSCopying</p>\n</li>\n</ul>\n<h3 id=\"8、Bundle-Identifier命名\"><a href=\"#8、Bundle-Identifier命名\" class=\"headerlink\" title=\"8、Bundle Identifier命名\"></a>8、Bundle Identifier命名</h3><ul>\n<li>采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名根据应用进行命名。</li>\n</ul>\n<h2 id=\"二、代码规范\"><a href=\"#二、代码规范\" class=\"headerlink\" title=\"二、代码规范\"></a>二、代码规范</h2><h3 id=\"1、删除多余空格\"><a href=\"#1、删除多余空格\" class=\"headerlink\" title=\"1、删除多余空格\"></a>1、删除多余空格</h3><ul>\n<li><p>所有方法与方法之间空一行</p>\n</li>\n<li><p>代码块之间空一行</p>\n</li>\n</ul>\n<h3 id=\"2、删除多余的注释\"><a href=\"#2、删除多余的注释\" class=\"headerlink\" title=\"2、删除多余的注释\"></a>2、删除多余的注释</h3><ul>\n<li><p>删除注释掉的代码</p>\n</li>\n<li><p>删除无意义的代码</p>\n</li>\n</ul>\n<h3 id=\"3、删除多余方法\"><a href=\"#3、删除多余方法\" class=\"headerlink\" title=\"3、删除多余方法\"></a>3、删除多余方法</h3><ul>\n<li><p>没有使用到的方法删除掉</p>\n</li>\n<li><p>如果方法没有执行任何业务逻辑，但需要放着，给予一定的注释</p>\n</li>\n</ul>\n<h3 id=\"4、删除未被使用的资源文件\"><a href=\"#4、删除未被使用的资源文件\" class=\"headerlink\" title=\"4、删除未被使用的资源文件\"></a>4、删除未被使用的资源文件</h3><h3 id=\"5、添加必要的注释\"><a href=\"#5、添加必要的注释\" class=\"headerlink\" title=\"5、添加必要的注释\"></a>5、添加必要的注释</h3><ul>\n<li><p>.h文件的property需要注释(swift中参与业务逻辑的对象需要注释)</p>\n</li>\n<li><p>自定义的方法需要注释</p>\n</li>\n<li><p>大的代码块需要注释</p>\n</li>\n<li><p>宏枚举需要有一定的注释</p>\n</li>\n<li><p>复杂的逻辑代码需要给予一定的注释</p>\n</li>\n</ul>\n<h3 id=\"6、整体代码风格尽量统一\"><a href=\"#6、整体代码风格尽量统一\" class=\"headerlink\" title=\"6、整体代码风格尽量统一\"></a>6、整体代码风格尽量统一</h3><ul>\n<li><p>逻辑运算符与代码之间空一格</p>\n</li>\n<li><p>逻辑或方法结尾的}需要占用一格</p>\n</li>\n<li><p>代理、逻辑业务方法等模块区分使用“//MARK: - ”，且与代码之间不要空格</p>\n</li>\n<li><p>在方法命名时-和()之间需要有空格（objective-C）</p>\n</li>\n<li><p>定义对象时 <em>号属于类型的一部分 放在对象前 与类型空格 例如：NSArray</em>dataArray</p>\n</li>\n</ul>\n<h3 id=\"7、raywenderlich-swift-style-guide：Swift-代码编程规范\"><a href=\"#7、raywenderlich-swift-style-guide：Swift-代码编程规范\" class=\"headerlink\" title=\"7、raywenderlich/swift-style-guide：Swift 代码编程规范\"></a>7、<a href=\"https://github.com/raywenderlich/swift-style-guide\">raywenderlich/swift-style-guide：</a>Swift 代码编程规范</h3><h2 id=\"三、项目管理\"><a href=\"#三、项目管理\" class=\"headerlink\" title=\"三、项目管理\"></a>三、项目管理</h2><h3 id=\"1、模块管理\"><a href=\"#1、模块管理\" class=\"headerlink\" title=\"1、模块管理\"></a>1、模块管理</h3><ul>\n<li><p>采取MVC设计架构  </p>\n</li>\n<li><p>采取模块化开发，公用或者常使用到的一些模块单独抽离封装到公用类，减少团队操作，提高开发效率</p>\n</li>\n<li><p>大体上市按照业务模块、三方库、项目资源、公用类划分</p>\n</li>\n</ul>\n<h3 id=\"2、代码管理\"><a href=\"#2、代码管理\" class=\"headerlink\" title=\"2、代码管理\"></a>2、代码管理</h3><ul>\n<li>采用git多分支管理，平时开发在development分支进行</li>\n<li><mark>引入第三方库时需要经过团队讨论，参照使用方便性，学习成本，性能，项目影响覆盖等因素再决定引入，不要随意引入</mark></li>\n<li><mark>公用的模块划分出来可以提供团队参考使用</li>\n<li>每天至少上班前更新一次代码，下班提交一次代码，以免多人工作不同步</li>\n<li>个人测试代码不要提交，以免影响同伴开发</li>\n<li>修改配置文件等共享文件前，一定要更新，修改完验证之后要马上提交，避免冲突</li>\n</ul>\n<h3 id=\"3、团队交流\"><a href=\"#3、团队交流\" class=\"headerlink\" title=\"3、团队交流\"></a>3、团队交流</h3><ul>\n<li>工作上碰到的问题鼓励邮件沟通，方便分散式管理，也可避免长时间后不记得了</li>\n<li>对于工作问题，一定要谨慎、仔细，今天能完成和要完成的问题最好不要拖拉</li>\n<li>如果觉得某些功能实现有困难，要提出来探讨折中实现方式，不要敷衍行事</li>\n<li>工作职责一定要明确、能够对应相应负责人员处理解决，包括对接产品、设计、服务器、Android等同事，积极沟通处理</li>\n<li>有一些好的想法，方便项目开发或者能够方便团队协作的方式，积极提出，这也是一种刺激主动学习的方式</li>\n<li>平时如果觉得有什么好的学习资源、技巧，鼓励积极分享，共同成长</li>\n<li><mark>多写学习体验、鼓励钻研新技术，分享，到时候在git上建个公共文件夹（同步管理），大家平时可以在上面公开写，收集进来也可以，到时候统一整理，专题列在第五条里面，尽量用Markdown，查看方便。比如有名的三方库文件源码解读<br>（AFNetWorking、SDWebImage等，培养读源码的兴趣，对知识了解也较为彻底）、Git/SVN等工具的基本使用、Vim的<br>基本使用等</li>\n</ul>\n<h3 id=\"5、iOS-研究方向（技术类）\"><a href=\"#5、iOS-研究方向（技术类）\" class=\"headerlink\" title=\"5、iOS 研究方向（技术类）\"></a>5、iOS 研究方向（技术类）</h3><p><a href=\"%22%22\">#逆向工程专题</a></p>\n<p><a href=\"%22%22\">#混合开发（如：React-Native）专题</a></p>\n<p><a href=\"%22%22\">#单元测试系统化、自动化专题</a></p>\n<p><a href=\"%22%22\">#持续集成化专题</a></p>\n<p><a href=\"%22%22\">#动画专题</a></p>\n<p><a href=\"%22%22\">#音视频专题（FFMpeg）、图片处理（OpenGL、GPUimage、OpenCV）</a></p>\n<p><a href=\"%22%22\">#设计模式专题</a></p>\n<p><a href=\"%22%22\">#iOS框架专题</a></p>\n<p><a href=\"%22%22\">#性能研究专题</a></p>\n<p><a href=\"%22%22\">#算法专题</a></p>\n<p><a href=\"%22%22\">#网络及网络协议专题</a></p>\n<p><a href=\"%22%22\">#操作系统（Linux、Unix）专题</a></p>\n<p><a href=\"%22%22\">#编程语言专题</a></p>\n<p><a href=\"%22%22\">#重构专题</a></p>\n<h3 id=\"6、业余讨论（非技术类）\"><a href=\"#6、业余讨论（非技术类）\" class=\"headerlink\" title=\"6、业余讨论（非技术类）\"></a>6、业余讨论（非技术类）</h3><p><a href=\"%22%22\">#运动</a></p>\n<p><a href=\"%22%22\">#游戏娱乐</a></p>\n<p><a href=\"%22%22\">#理财</a></p>\n<p><a href=\"%22%22\">#项目管理</a></p>\n<p><a href=\"%22%22\">#学习方法，专业思维的培养</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、命名规范\"><a href=\"#一、命名规范\" class=\"headerlink\" title=\"一、命名规范\"></a>一、命名规范</h2><h3 id=\"1、基本规则\"><a href=\"#1、基本规则\" class=\"headerlink\" title=\"1、基本规则\"></a>1、基本规则</h3><ul>\n<li><p>清晰，又清晰又简洁是最好的了，但简洁不如清晰重要。总的讲不要使用单词的简写，除了非常常用的简写以外，尽量使用单词全称。</p>\n</li>\n<li><p>一致性，命名代表意思与所做事情的一致性，命名与通常使用的名字的一致性，比如setStringValue，setTabBarColor等</p>\n</li>\n</ul>\n<h3 id=\"2、类命名\"><a href=\"#2、类命名\" class=\"headerlink\" title=\"2、类命名\"></a>2、类命名</h3><ul>\n<li>大驼峰命名法、功能+类型 例如LoginViewController</li>\n</ul>\n<h3 id=\"3、类别扩展命名-Category和Extension\"><a href=\"#3、类别扩展命名-Category和Extension\" class=\"headerlink\" title=\"3、类别扩展命名(Category和Extension)\"></a>3、类别扩展命名(Category和Extension)</h3><ul>\n<li><p>类别(Category)命名：类名+功能 例如 UIView+Frame</p>\n</li>\n<li><p>扩展(Extension)命名：类名+Extension 例如UIView+Extension</p>\n</li>\n</ul>\n<h3 id=\"4、变量命名\"><a href=\"#4、变量命名\" class=\"headerlink\" title=\"4、变量命名\"></a>4、变量命名</h3><ul>\n<li><p>小驼峰命名法</p>\n</li>\n<li><p>使用修饰+类型的方式，比如titleLabel</p>\n</li>\n<li><p>命名尽量以清晰为主，变量名尽量可以推测其用途</p>\n</li>\n</ul>\n<h3 id=\"5、宏及常量命名\"><a href=\"#5、宏及常量命名\" class=\"headerlink\" title=\"5、宏及常量命名\"></a>5、宏及常量命名</h3><ul>\n<li><p>常量、宏(swift中没有宏，使用常量定义)，前面带小写字母k作为常量标识，其余部分采取大写，单词以英文下划线”_“分割。</p>\n</li>\n<li><p>通用的常量使用宏#define来定义，单独类中使用的常量使用static定义</p>\n</li>\n<li><p>宏尽量少用，编译耗时，影响程序的启动，尽量用常量来代替，之前iOS工程默认有预编译文件的，后来iOS把这个默认文件去掉了，倡导用常量代替</p>\n</li>\n</ul>\n<h3 id=\"6、图片文件命名\"><a href=\"#6、图片文件命名\" class=\"headerlink\" title=\"6、图片文件命名\"></a>6、图片文件命名</h3><ul>\n<li><p>采用模块_功能形式</p>\n</li>\n<li><p>尽量采用单词全拼或者公认的无歧义缩写(如nav，bg，btn等)</p>\n</li>\n</ul>\n<h3 id=\"7、通知协议代理命名\"><a href=\"#7、通知协议代理命名\" class=\"headerlink\" title=\"7、通知协议代理命名\"></a>7、通知协议代理命名</h3><ul>\n<li><p>通知命名：[触发通知的类名] + [Did | Will] + [动作] + Notification，例如：TextFieldDidChangeNotification等</p>\n</li>\n<li><p>代理命名：作用类+should will did等关键字+作用 比如：@objc optional  func sureBtnDidTouch:(UIButton*)sureBtn</p>\n</li>\n<li><p>协议命名：前缀+作用+ing 与类名区分 比如：NSCopying</p>\n</li>\n</ul>\n<h3 id=\"8、Bundle-Identifier命名\"><a href=\"#8、Bundle-Identifier命名\" class=\"headerlink\" title=\"8、Bundle Identifier命名\"></a>8、Bundle Identifier命名</h3><ul>\n<li>采用反域名命名规则，全部使用小写字母。一级包名为com，二级包名根据应用进行命名。</li>\n</ul>\n<h2 id=\"二、代码规范\"><a href=\"#二、代码规范\" class=\"headerlink\" title=\"二、代码规范\"></a>二、代码规范</h2><h3 id=\"1、删除多余空格\"><a href=\"#1、删除多余空格\" class=\"headerlink\" title=\"1、删除多余空格\"></a>1、删除多余空格</h3><ul>\n<li><p>所有方法与方法之间空一行</p>\n</li>\n<li><p>代码块之间空一行</p>\n</li>\n</ul>\n<h3 id=\"2、删除多余的注释\"><a href=\"#2、删除多余的注释\" class=\"headerlink\" title=\"2、删除多余的注释\"></a>2、删除多余的注释</h3><ul>\n<li><p>删除注释掉的代码</p>\n</li>\n<li><p>删除无意义的代码</p>\n</li>\n</ul>\n<h3 id=\"3、删除多余方法\"><a href=\"#3、删除多余方法\" class=\"headerlink\" title=\"3、删除多余方法\"></a>3、删除多余方法</h3><ul>\n<li><p>没有使用到的方法删除掉</p>\n</li>\n<li><p>如果方法没有执行任何业务逻辑，但需要放着，给予一定的注释</p>\n</li>\n</ul>\n<h3 id=\"4、删除未被使用的资源文件\"><a href=\"#4、删除未被使用的资源文件\" class=\"headerlink\" title=\"4、删除未被使用的资源文件\"></a>4、删除未被使用的资源文件</h3><h3 id=\"5、添加必要的注释\"><a href=\"#5、添加必要的注释\" class=\"headerlink\" title=\"5、添加必要的注释\"></a>5、添加必要的注释</h3><ul>\n<li><p>.h文件的property需要注释(swift中参与业务逻辑的对象需要注释)</p>\n</li>\n<li><p>自定义的方法需要注释</p>\n</li>\n<li><p>大的代码块需要注释</p>\n</li>\n<li><p>宏枚举需要有一定的注释</p>\n</li>\n<li><p>复杂的逻辑代码需要给予一定的注释</p>\n</li>\n</ul>\n<h3 id=\"6、整体代码风格尽量统一\"><a href=\"#6、整体代码风格尽量统一\" class=\"headerlink\" title=\"6、整体代码风格尽量统一\"></a>6、整体代码风格尽量统一</h3><ul>\n<li><p>逻辑运算符与代码之间空一格</p>\n</li>\n<li><p>逻辑或方法结尾的}需要占用一格</p>\n</li>\n<li><p>代理、逻辑业务方法等模块区分使用“//MARK: - ”，且与代码之间不要空格</p>\n</li>\n<li><p>在方法命名时-和()之间需要有空格（objective-C）</p>\n</li>\n<li><p>定义对象时 <em>号属于类型的一部分 放在对象前 与类型空格 例如：NSArray</em>dataArray</p>\n</li>\n</ul>\n<h3 id=\"7、raywenderlich-swift-style-guide：Swift-代码编程规范\"><a href=\"#7、raywenderlich-swift-style-guide：Swift-代码编程规范\" class=\"headerlink\" title=\"7、raywenderlich/swift-style-guide：Swift 代码编程规范\"></a>7、<a href=\"https://github.com/raywenderlich/swift-style-guide\">raywenderlich/swift-style-guide：</a>Swift 代码编程规范</h3><h2 id=\"三、项目管理\"><a href=\"#三、项目管理\" class=\"headerlink\" title=\"三、项目管理\"></a>三、项目管理</h2><h3 id=\"1、模块管理\"><a href=\"#1、模块管理\" class=\"headerlink\" title=\"1、模块管理\"></a>1、模块管理</h3><ul>\n<li><p>采取MVC设计架构  </p>\n</li>\n<li><p>采取模块化开发，公用或者常使用到的一些模块单独抽离封装到公用类，减少团队操作，提高开发效率</p>\n</li>\n<li><p>大体上市按照业务模块、三方库、项目资源、公用类划分</p>\n</li>\n</ul>\n<h3 id=\"2、代码管理\"><a href=\"#2、代码管理\" class=\"headerlink\" title=\"2、代码管理\"></a>2、代码管理</h3><ul>\n<li>采用git多分支管理，平时开发在development分支进行</li>\n<li><mark>引入第三方库时需要经过团队讨论，参照使用方便性，学习成本，性能，项目影响覆盖等因素再决定引入，不要随意引入</mark></li>\n<li><mark>公用的模块划分出来可以提供团队参考使用</li>\n<li>每天至少上班前更新一次代码，下班提交一次代码，以免多人工作不同步</li>\n<li>个人测试代码不要提交，以免影响同伴开发</li>\n<li>修改配置文件等共享文件前，一定要更新，修改完验证之后要马上提交，避免冲突</li>\n</ul>\n<h3 id=\"3、团队交流\"><a href=\"#3、团队交流\" class=\"headerlink\" title=\"3、团队交流\"></a>3、团队交流</h3><ul>\n<li>工作上碰到的问题鼓励邮件沟通，方便分散式管理，也可避免长时间后不记得了</li>\n<li>对于工作问题，一定要谨慎、仔细，今天能完成和要完成的问题最好不要拖拉</li>\n<li>如果觉得某些功能实现有困难，要提出来探讨折中实现方式，不要敷衍行事</li>\n<li>工作职责一定要明确、能够对应相应负责人员处理解决，包括对接产品、设计、服务器、Android等同事，积极沟通处理</li>\n<li>有一些好的想法，方便项目开发或者能够方便团队协作的方式，积极提出，这也是一种刺激主动学习的方式</li>\n<li>平时如果觉得有什么好的学习资源、技巧，鼓励积极分享，共同成长</li>\n<li><mark>多写学习体验、鼓励钻研新技术，分享，到时候在git上建个公共文件夹（同步管理），大家平时可以在上面公开写，收集进来也可以，到时候统一整理，专题列在第五条里面，尽量用Markdown，查看方便。比如有名的三方库文件源码解读<br>（AFNetWorking、SDWebImage等，培养读源码的兴趣，对知识了解也较为彻底）、Git/SVN等工具的基本使用、Vim的<br>基本使用等</li>\n</ul>\n<h3 id=\"5、iOS-研究方向（技术类）\"><a href=\"#5、iOS-研究方向（技术类）\" class=\"headerlink\" title=\"5、iOS 研究方向（技术类）\"></a>5、iOS 研究方向（技术类）</h3><p><a href=\"%22%22\">#逆向工程专题</a></p>\n<p><a href=\"%22%22\">#混合开发（如：React-Native）专题</a></p>\n<p><a href=\"%22%22\">#单元测试系统化、自动化专题</a></p>\n<p><a href=\"%22%22\">#持续集成化专题</a></p>\n<p><a href=\"%22%22\">#动画专题</a></p>\n<p><a href=\"%22%22\">#音视频专题（FFMpeg）、图片处理（OpenGL、GPUimage、OpenCV）</a></p>\n<p><a href=\"%22%22\">#设计模式专题</a></p>\n<p><a href=\"%22%22\">#iOS框架专题</a></p>\n<p><a href=\"%22%22\">#性能研究专题</a></p>\n<p><a href=\"%22%22\">#算法专题</a></p>\n<p><a href=\"%22%22\">#网络及网络协议专题</a></p>\n<p><a href=\"%22%22\">#操作系统（Linux、Unix）专题</a></p>\n<p><a href=\"%22%22\">#编程语言专题</a></p>\n<p><a href=\"%22%22\">#重构专题</a></p>\n<h3 id=\"6、业余讨论（非技术类）\"><a href=\"#6、业余讨论（非技术类）\" class=\"headerlink\" title=\"6、业余讨论（非技术类）\"></a>6、业余讨论（非技术类）</h3><p><a href=\"%22%22\">#运动</a></p>\n<p><a href=\"%22%22\">#游戏娱乐</a></p>\n<p><a href=\"%22%22\">#理财</a></p>\n<p><a href=\"%22%22\">#项目管理</a></p>\n<p><a href=\"%22%22\">#学习方法，专业思维的培养</a></p>\n"},{"title":"iOS 之消息转发","abbrlink":"46ce68ab","date":"2021-04-19T16:00:00.000Z","_content":"\n[TOC]\n\n## 1. Objective-C\n\n### 1.1 Objective-C 消息转发流程图\n\n![OC消息转发流程图](/source/_posts/iOS/resources/MessageForward/oc_message_froware.png)\n\n### 1.2 参考资料\n\n1、[Objective-C Runtime Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1)\n\n2、[OC消息转发之动态解析](https://juejin.cn/post/6844903645226500103)\n\n3、[Objective-C 运行时和 Swift 动态性](https://juejin.cn/post/6844904114673958925)\n\n4、[iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)](https://juejin.cn/post/6844903600968171533)\n\n## 2. Swift\n\n### 2.1 Swift 消息转发规则\n\n![Swift 消息转发规则](resources/MessageForward/swift_function_dispatch.png)\n\n### 2.2 参考资料\n\n1、[Swift 消息派发机制](https://blog.bombox.org/2020-05-23/swift-method-dispatch/)\n\n2、[Swift函数派发机制](https://juejin.cn/post/6847009771845845006)\n\n3、[Swift 函数派发机制（译）](https://rimson.top/2019/05/07/swift-method-dispatch/)\n","source":"_posts/iOS/MessageDispatch.md","raw":"---\ntitle: iOS 之消息转发\nabbrlink: 46ce68ab\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n[TOC]\n\n## 1. Objective-C\n\n### 1.1 Objective-C 消息转发流程图\n\n![OC消息转发流程图](/source/_posts/iOS/resources/MessageForward/oc_message_froware.png)\n\n### 1.2 参考资料\n\n1、[Objective-C Runtime Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1)\n\n2、[OC消息转发之动态解析](https://juejin.cn/post/6844903645226500103)\n\n3、[Objective-C 运行时和 Swift 动态性](https://juejin.cn/post/6844904114673958925)\n\n4、[iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)](https://juejin.cn/post/6844903600968171533)\n\n## 2. Swift\n\n### 2.1 Swift 消息转发规则\n\n![Swift 消息转发规则](resources/MessageForward/swift_function_dispatch.png)\n\n### 2.2 参考资料\n\n1、[Swift 消息派发机制](https://blog.bombox.org/2020-05-23/swift-method-dispatch/)\n\n2、[Swift函数派发机制](https://juejin.cn/post/6847009771845845006)\n\n3、[Swift 函数派发机制（译）](https://rimson.top/2019/05/07/swift-method-dispatch/)\n","slug":"iOS/MessageDispatch","published":1,"updated":"2021-07-29T06:46:00.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmza000fiu9k95xf0bta","content":"<p>[TOC]</p>\n<h2 id=\"1-Objective-C\"><a href=\"#1-Objective-C\" class=\"headerlink\" title=\"1. Objective-C\"></a>1. Objective-C</h2><h3 id=\"1-1-Objective-C-消息转发流程图\"><a href=\"#1-1-Objective-C-消息转发流程图\" class=\"headerlink\" title=\"1.1 Objective-C 消息转发流程图\"></a>1.1 Objective-C 消息转发流程图</h3><p><img src=\"/source/_posts/iOS/resources/MessageForward/oc_message_froware.png\" alt=\"OC消息转发流程图\"></p>\n<h3 id=\"1-2-参考资料\"><a href=\"#1-2-参考资料\" class=\"headerlink\" title=\"1.2 参考资料\"></a>1.2 参考资料</h3><p>1、<a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1\">Objective-C Runtime Programming Guide</a></p>\n<p>2、<a href=\"https://juejin.cn/post/6844903645226500103\">OC消息转发之动态解析</a></p>\n<p>3、<a href=\"https://juejin.cn/post/6844904114673958925\">Objective-C 运行时和 Swift 动态性</a></p>\n<p>4、<a href=\"https://juejin.cn/post/6844903600968171533\">iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)</a></p>\n<h2 id=\"2-Swift\"><a href=\"#2-Swift\" class=\"headerlink\" title=\"2. Swift\"></a>2. Swift</h2><h3 id=\"2-1-Swift-消息转发规则\"><a href=\"#2-1-Swift-消息转发规则\" class=\"headerlink\" title=\"2.1 Swift 消息转发规则\"></a>2.1 Swift 消息转发规则</h3><p><img src=\"/resources/MessageForward/swift_function_dispatch.png\" alt=\"Swift 消息转发规则\"></p>\n<h3 id=\"2-2-参考资料\"><a href=\"#2-2-参考资料\" class=\"headerlink\" title=\"2.2 参考资料\"></a>2.2 参考资料</h3><p>1、<a href=\"https://blog.bombox.org/2020-05-23/swift-method-dispatch/\">Swift 消息派发机制</a></p>\n<p>2、<a href=\"https://juejin.cn/post/6847009771845845006\">Swift函数派发机制</a></p>\n<p>3、<a href=\"https://rimson.top/2019/05/07/swift-method-dispatch/\">Swift 函数派发机制（译）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"1-Objective-C\"><a href=\"#1-Objective-C\" class=\"headerlink\" title=\"1. Objective-C\"></a>1. Objective-C</h2><h3 id=\"1-1-Objective-C-消息转发流程图\"><a href=\"#1-1-Objective-C-消息转发流程图\" class=\"headerlink\" title=\"1.1 Objective-C 消息转发流程图\"></a>1.1 Objective-C 消息转发流程图</h3><p><img src=\"/source/_posts/iOS/resources/MessageForward/oc_message_froware.png\" alt=\"OC消息转发流程图\"></p>\n<h3 id=\"1-2-参考资料\"><a href=\"#1-2-参考资料\" class=\"headerlink\" title=\"1.2 参考资料\"></a>1.2 参考资料</h3><p>1、<a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1\">Objective-C Runtime Programming Guide</a></p>\n<p>2、<a href=\"https://juejin.cn/post/6844903645226500103\">OC消息转发之动态解析</a></p>\n<p>3、<a href=\"https://juejin.cn/post/6844904114673958925\">Objective-C 运行时和 Swift 动态性</a></p>\n<p>4、<a href=\"https://juejin.cn/post/6844903600968171533\">iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)</a></p>\n<h2 id=\"2-Swift\"><a href=\"#2-Swift\" class=\"headerlink\" title=\"2. Swift\"></a>2. Swift</h2><h3 id=\"2-1-Swift-消息转发规则\"><a href=\"#2-1-Swift-消息转发规则\" class=\"headerlink\" title=\"2.1 Swift 消息转发规则\"></a>2.1 Swift 消息转发规则</h3><p><img src=\"/resources/MessageForward/swift_function_dispatch.png\" alt=\"Swift 消息转发规则\"></p>\n<h3 id=\"2-2-参考资料\"><a href=\"#2-2-参考资料\" class=\"headerlink\" title=\"2.2 参考资料\"></a>2.2 参考资料</h3><p>1、<a href=\"https://blog.bombox.org/2020-05-23/swift-method-dispatch/\">Swift 消息派发机制</a></p>\n<p>2、<a href=\"https://juejin.cn/post/6847009771845845006\">Swift函数派发机制</a></p>\n<p>3、<a href=\"https://rimson.top/2019/05/07/swift-method-dispatch/\">Swift 函数派发机制（译）</a></p>\n"},{"title":"iOS之SDK","abbrlink":"45f28001","date":"2021-04-19T16:00:00.000Z","_content":"","source":"_posts/iOS/SDK.md","raw":"---\ntitle: iOS之SDK\nabbrlink: 45f28001\ndate: 2021-04-20 00:00:00\ntags:\n---\n","slug":"iOS/SDK","published":1,"updated":"2021-07-29T06:45:58.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzb000giu9kh65x0mup","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之单元测试","abbrlink":"f03fd352","date":"2021-04-19T16:00:00.000Z","_content":"\n## 1. XCTest\n\n### 1.1 [iOS Unit Testing and UI Testing Tutorial](https://www.raywenderlich.com/960290-ios-unit-testing-and-ui-testing-tutorial)\n\n## 1.2 [Appium](http://appium.io/docs/en/about-appium/getting-started/?lang=zh)\n","source":"_posts/iOS/UnitTest.md","raw":"---\ntitle: iOS之单元测试\nabbrlink: f03fd352\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n## 1. XCTest\n\n### 1.1 [iOS Unit Testing and UI Testing Tutorial](https://www.raywenderlich.com/960290-ios-unit-testing-and-ui-testing-tutorial)\n\n## 1.2 [Appium](http://appium.io/docs/en/about-appium/getting-started/?lang=zh)\n","slug":"iOS/UnitTest","published":1,"updated":"2021-07-29T06:45:59.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzc000hiu9kfgq5di9r","content":"<h2 id=\"1-XCTest\"><a href=\"#1-XCTest\" class=\"headerlink\" title=\"1. XCTest\"></a>1. XCTest</h2><h3 id=\"1-1-iOS-Unit-Testing-and-UI-Testing-Tutorial\"><a href=\"#1-1-iOS-Unit-Testing-and-UI-Testing-Tutorial\" class=\"headerlink\" title=\"1.1 iOS Unit Testing and UI Testing Tutorial\"></a>1.1 <a href=\"https://www.raywenderlich.com/960290-ios-unit-testing-and-ui-testing-tutorial\">iOS Unit Testing and UI Testing Tutorial</a></h3><h2 id=\"1-2-Appium\"><a href=\"#1-2-Appium\" class=\"headerlink\" title=\"1.2 Appium\"></a>1.2 <a href=\"http://appium.io/docs/en/about-appium/getting-started/?lang=zh\">Appium</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-XCTest\"><a href=\"#1-XCTest\" class=\"headerlink\" title=\"1. XCTest\"></a>1. XCTest</h2><h3 id=\"1-1-iOS-Unit-Testing-and-UI-Testing-Tutorial\"><a href=\"#1-1-iOS-Unit-Testing-and-UI-Testing-Tutorial\" class=\"headerlink\" title=\"1.1 iOS Unit Testing and UI Testing Tutorial\"></a>1.1 <a href=\"https://www.raywenderlich.com/960290-ios-unit-testing-and-ui-testing-tutorial\">iOS Unit Testing and UI Testing Tutorial</a></h3><h2 id=\"1-2-Appium\"><a href=\"#1-2-Appium\" class=\"headerlink\" title=\"1.2 Appium\"></a>1.2 <a href=\"http://appium.io/docs/en/about-appium/getting-started/?lang=zh\">Appium</a></h2>"},{"title":"iOS之SDK","abbrlink":"45f28001","date":"2021-04-19T16:00:00.000Z","_content":"","source":"_posts/iOS/Xcode.md","raw":"---\ntitle: iOS之SDK\nabbrlink: 45f28001\ndate: 2021-04-20 00:00:00\ntags:\n---\n","slug":"iOS/Xcode","published":1,"updated":"2021-07-29T06:45:58.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzd000iiu9k1efw96x4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"IM 系统设计","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [网络](http://www.52im.net/)\n\n### 1.1 [架构](http://www.52im.net/thread-3472-1-1.html)\n\n### 1.1.1 [浅谈IM系统的架构设计](http://www.52im.net/thread-307-1-1.html)\n\n### 1.2 [连接](http://gglinux.com/2017/04/15/IM_design/)\n\n### 1.3 [消息](https://www.infoq.cn/article/ypb3y2lv-dsftrr5cguv)\n\n### 1.4 [协议](https://github.com/ChenYilong/iOSBlog/issues/6)\n\n### 1.5 [云聊 IM](http://www.yunliaoim.com/im/category/qq)\n","source":"_drafts/IMSystems/IMSystemDesign.md","raw":"---\ntitle: IM 系统设计\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [网络](http://www.52im.net/)\n\n### 1.1 [架构](http://www.52im.net/thread-3472-1-1.html)\n\n### 1.1.1 [浅谈IM系统的架构设计](http://www.52im.net/thread-307-1-1.html)\n\n### 1.2 [连接](http://gglinux.com/2017/04/15/IM_design/)\n\n### 1.3 [消息](https://www.infoq.cn/article/ypb3y2lv-dsftrr5cguv)\n\n### 1.4 [协议](https://github.com/ChenYilong/iOSBlog/issues/6)\n\n### 1.5 [云聊 IM](http://www.yunliaoim.com/im/category/qq)\n","slug":"IMSystems/IMSystemDesign","published":0,"updated":"2021-07-29T06:46:00.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmze000jiu9kbwmq5zj8","content":"<h2 id=\"1-网络\"><a href=\"#1-网络\" class=\"headerlink\" title=\"1. 网络\"></a>1. <a href=\"http://www.52im.net/\">网络</a></h2><h3 id=\"1-1-架构\"><a href=\"#1-1-架构\" class=\"headerlink\" title=\"1.1 架构\"></a>1.1 <a href=\"http://www.52im.net/thread-3472-1-1.html\">架构</a></h3><h3 id=\"1-1-1-浅谈IM系统的架构设计\"><a href=\"#1-1-1-浅谈IM系统的架构设计\" class=\"headerlink\" title=\"1.1.1 浅谈IM系统的架构设计\"></a>1.1.1 <a href=\"http://www.52im.net/thread-307-1-1.html\">浅谈IM系统的架构设计</a></h3><h3 id=\"1-2-连接\"><a href=\"#1-2-连接\" class=\"headerlink\" title=\"1.2 连接\"></a>1.2 <a href=\"http://gglinux.com/2017/04/15/IM_design/\">连接</a></h3><h3 id=\"1-3-消息\"><a href=\"#1-3-消息\" class=\"headerlink\" title=\"1.3 消息\"></a>1.3 <a href=\"https://www.infoq.cn/article/ypb3y2lv-dsftrr5cguv\">消息</a></h3><h3 id=\"1-4-协议\"><a href=\"#1-4-协议\" class=\"headerlink\" title=\"1.4 协议\"></a>1.4 <a href=\"https://github.com/ChenYilong/iOSBlog/issues/6\">协议</a></h3><h3 id=\"1-5-云聊-IM\"><a href=\"#1-5-云聊-IM\" class=\"headerlink\" title=\"1.5 云聊 IM\"></a>1.5 <a href=\"http://www.yunliaoim.com/im/category/qq\">云聊 IM</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-网络\"><a href=\"#1-网络\" class=\"headerlink\" title=\"1. 网络\"></a>1. <a href=\"http://www.52im.net/\">网络</a></h2><h3 id=\"1-1-架构\"><a href=\"#1-1-架构\" class=\"headerlink\" title=\"1.1 架构\"></a>1.1 <a href=\"http://www.52im.net/thread-3472-1-1.html\">架构</a></h3><h3 id=\"1-1-1-浅谈IM系统的架构设计\"><a href=\"#1-1-1-浅谈IM系统的架构设计\" class=\"headerlink\" title=\"1.1.1 浅谈IM系统的架构设计\"></a>1.1.1 <a href=\"http://www.52im.net/thread-307-1-1.html\">浅谈IM系统的架构设计</a></h3><h3 id=\"1-2-连接\"><a href=\"#1-2-连接\" class=\"headerlink\" title=\"1.2 连接\"></a>1.2 <a href=\"http://gglinux.com/2017/04/15/IM_design/\">连接</a></h3><h3 id=\"1-3-消息\"><a href=\"#1-3-消息\" class=\"headerlink\" title=\"1.3 消息\"></a>1.3 <a href=\"https://www.infoq.cn/article/ypb3y2lv-dsftrr5cguv\">消息</a></h3><h3 id=\"1-4-协议\"><a href=\"#1-4-协议\" class=\"headerlink\" title=\"1.4 协议\"></a>1.4 <a href=\"https://github.com/ChenYilong/iOSBlog/issues/6\">协议</a></h3><h3 id=\"1-5-云聊-IM\"><a href=\"#1-5-云聊-IM\" class=\"headerlink\" title=\"1.5 云聊 IM\"></a>1.5 <a href=\"http://www.yunliaoim.com/im/category/qq\">云聊 IM</a></h3>"},{"title":"iOS 面试题","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [2020年面试：整理出一份高级iOS面试题](https://zhuanlan.zhihu.com/p/77789398)\n\n## 2. [iOS快手面经（已拿offer）](https://juejin.cn/post/6844904163076210696)\n\n## 3. [iOS 开发面试通关指南：67 个必知问题](https://juejin.cn/post/6844904114048991240)\n\n## 4. [日常积累所看到的面试题集锦](https://github.com/iOShuyang/Book-Recommended-Interview)\n\n## 5. [我的 2020 iOS BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等](https://www.cnblogs.com/Julday/p/13230427.html)\n\n## 6. [阿里、字节：一套高效的iOS面试题](https://my.oschina.net/u/4229509/blog/3194840)\n\n## 7. [iOS-面试题之算法(较全较易懂)](https://www.jianshu.com/p/5423ac01475f)\n","source":"_drafts/Computers/Interview.md","raw":"---\ntitle: iOS 面试题\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [2020年面试：整理出一份高级iOS面试题](https://zhuanlan.zhihu.com/p/77789398)\n\n## 2. [iOS快手面经（已拿offer）](https://juejin.cn/post/6844904163076210696)\n\n## 3. [iOS 开发面试通关指南：67 个必知问题](https://juejin.cn/post/6844904114048991240)\n\n## 4. [日常积累所看到的面试题集锦](https://github.com/iOShuyang/Book-Recommended-Interview)\n\n## 5. [我的 2020 iOS BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等](https://www.cnblogs.com/Julday/p/13230427.html)\n\n## 6. [阿里、字节：一套高效的iOS面试题](https://my.oschina.net/u/4229509/blog/3194840)\n\n## 7. [iOS-面试题之算法(较全较易懂)](https://www.jianshu.com/p/5423ac01475f)\n","slug":"Computers/Interview","published":0,"updated":"2021-07-29T06:45:56.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmze000kiu9kcwevhmkw","content":"<h2 id=\"1-2020年面试：整理出一份高级iOS面试题\"><a href=\"#1-2020年面试：整理出一份高级iOS面试题\" class=\"headerlink\" title=\"1. 2020年面试：整理出一份高级iOS面试题\"></a>1. <a href=\"https://zhuanlan.zhihu.com/p/77789398\">2020年面试：整理出一份高级iOS面试题</a></h2><h2 id=\"2-iOS快手面经（已拿offer）\"><a href=\"#2-iOS快手面经（已拿offer）\" class=\"headerlink\" title=\"2. iOS快手面经（已拿offer）\"></a>2. <a href=\"https://juejin.cn/post/6844904163076210696\">iOS快手面经（已拿offer）</a></h2><h2 id=\"3-iOS-开发面试通关指南：67-个必知问题\"><a href=\"#3-iOS-开发面试通关指南：67-个必知问题\" class=\"headerlink\" title=\"3. iOS 开发面试通关指南：67 个必知问题\"></a>3. <a href=\"https://juejin.cn/post/6844904114048991240\">iOS 开发面试通关指南：67 个必知问题</a></h2><h2 id=\"4-日常积累所看到的面试题集锦\"><a href=\"#4-日常积累所看到的面试题集锦\" class=\"headerlink\" title=\"4. 日常积累所看到的面试题集锦\"></a>4. <a href=\"https://github.com/iOShuyang/Book-Recommended-Interview\">日常积累所看到的面试题集锦</a></h2><h2 id=\"5-我的-2020-iOS-BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等\"><a href=\"#5-我的-2020-iOS-BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等\" class=\"headerlink\" title=\"5. 我的 2020 iOS BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等\"></a>5. <a href=\"https://www.cnblogs.com/Julday/p/13230427.html\">我的 2020 iOS BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等</a></h2><h2 id=\"6-阿里、字节：一套高效的iOS面试题\"><a href=\"#6-阿里、字节：一套高效的iOS面试题\" class=\"headerlink\" title=\"6. 阿里、字节：一套高效的iOS面试题\"></a>6. <a href=\"https://my.oschina.net/u/4229509/blog/3194840\">阿里、字节：一套高效的iOS面试题</a></h2><h2 id=\"7-iOS-面试题之算法-较全较易懂\"><a href=\"#7-iOS-面试题之算法-较全较易懂\" class=\"headerlink\" title=\"7. iOS-面试题之算法(较全较易懂)\"></a>7. <a href=\"https://www.jianshu.com/p/5423ac01475f\">iOS-面试题之算法(较全较易懂)</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-2020年面试：整理出一份高级iOS面试题\"><a href=\"#1-2020年面试：整理出一份高级iOS面试题\" class=\"headerlink\" title=\"1. 2020年面试：整理出一份高级iOS面试题\"></a>1. <a href=\"https://zhuanlan.zhihu.com/p/77789398\">2020年面试：整理出一份高级iOS面试题</a></h2><h2 id=\"2-iOS快手面经（已拿offer）\"><a href=\"#2-iOS快手面经（已拿offer）\" class=\"headerlink\" title=\"2. iOS快手面经（已拿offer）\"></a>2. <a href=\"https://juejin.cn/post/6844904163076210696\">iOS快手面经（已拿offer）</a></h2><h2 id=\"3-iOS-开发面试通关指南：67-个必知问题\"><a href=\"#3-iOS-开发面试通关指南：67-个必知问题\" class=\"headerlink\" title=\"3. iOS 开发面试通关指南：67 个必知问题\"></a>3. <a href=\"https://juejin.cn/post/6844904114048991240\">iOS 开发面试通关指南：67 个必知问题</a></h2><h2 id=\"4-日常积累所看到的面试题集锦\"><a href=\"#4-日常积累所看到的面试题集锦\" class=\"headerlink\" title=\"4. 日常积累所看到的面试题集锦\"></a>4. <a href=\"https://github.com/iOShuyang/Book-Recommended-Interview\">日常积累所看到的面试题集锦</a></h2><h2 id=\"5-我的-2020-iOS-BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等\"><a href=\"#5-我的-2020-iOS-BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等\" class=\"headerlink\" title=\"5. 我的 2020 iOS BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等\"></a>5. <a href=\"https://www.cnblogs.com/Julday/p/13230427.html\">我的 2020 iOS BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等</a></h2><h2 id=\"6-阿里、字节：一套高效的iOS面试题\"><a href=\"#6-阿里、字节：一套高效的iOS面试题\" class=\"headerlink\" title=\"6. 阿里、字节：一套高效的iOS面试题\"></a>6. <a href=\"https://my.oschina.net/u/4229509/blog/3194840\">阿里、字节：一套高效的iOS面试题</a></h2><h2 id=\"7-iOS-面试题之算法-较全较易懂\"><a href=\"#7-iOS-面试题之算法-较全较易懂\" class=\"headerlink\" title=\"7. iOS-面试题之算法(较全较易懂)\"></a>7. <a href=\"https://www.jianshu.com/p/5423ac01475f\">iOS-面试题之算法(较全较易懂)</a></h2>"},{"_content":"计算机 常用知识储备\n\n1. 网络\n\n1. HTTP： TLS，HTTP 2.0，状态码，缓存机制（cache-control，expire，Etag + If-No-Match，Last-Modified+if-Modified-Since）；\n2. DNS： HTTPDNS，域名查找（递归 + 迭代 ）；\n3. TCP：三次握手，四次挥手，慢启动，拥塞控制，快恢复，快重传，流量控制，紧急回传，确认机制，CRC；\n4. UDP： 协议；\n5. IP： 协议；\n6. WebSocket： 协议；\n7. 网络认证：SSPing，证书，cookie，session，token，JWT，OAuth 2.0（四种方式）；\n\n* 弱网优化；\n* 网络层次结构模型；\n* 网络安全： 中间人攻击，DDoS等；\n* （非）加密算法，签名算法；\n* 应用层网络设计：设计模式，层次架构；\n\n2. 数据库\n\n3. 操作系统\n\n4. UI\n\n5. 多线程\n\n6. 语言\nOC 与 Swift\n\n内存管理\nRuntime（方法转发）\nKVO、KVC\n通知\n并发\nBlock\nNSCoding，NSCopy\n\n7. 应用优化\n\n8. CI \n\n9. 组件化\n\n10. 日志与埋点","source":"_drafts/Computers/Commons.md","raw":"计算机 常用知识储备\n\n1. 网络\n\n1. HTTP： TLS，HTTP 2.0，状态码，缓存机制（cache-control，expire，Etag + If-No-Match，Last-Modified+if-Modified-Since）；\n2. DNS： HTTPDNS，域名查找（递归 + 迭代 ）；\n3. TCP：三次握手，四次挥手，慢启动，拥塞控制，快恢复，快重传，流量控制，紧急回传，确认机制，CRC；\n4. UDP： 协议；\n5. IP： 协议；\n6. WebSocket： 协议；\n7. 网络认证：SSPing，证书，cookie，session，token，JWT，OAuth 2.0（四种方式）；\n\n* 弱网优化；\n* 网络层次结构模型；\n* 网络安全： 中间人攻击，DDoS等；\n* （非）加密算法，签名算法；\n* 应用层网络设计：设计模式，层次架构；\n\n2. 数据库\n\n3. 操作系统\n\n4. UI\n\n5. 多线程\n\n6. 语言\nOC 与 Swift\n\n内存管理\nRuntime（方法转发）\nKVO、KVC\n通知\n并发\nBlock\nNSCoding，NSCopy\n\n7. 应用优化\n\n8. CI \n\n9. 组件化\n\n10. 日志与埋点","slug":"Computers/Commons","published":0,"date":"2021-07-29T06:45:56.728Z","updated":"2021-07-29T06:45:56.728Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzf000liu9k1sjlcqe7","content":"<p>计算机 常用知识储备</p>\n<ol>\n<li><p>网络</p>\n</li>\n<li><p>HTTP： TLS，HTTP 2.0，状态码，缓存机制（cache-control，expire，Etag + If-No-Match，Last-Modified+if-Modified-Since）；</p>\n</li>\n<li><p>DNS： HTTPDNS，域名查找（递归 + 迭代 ）；</p>\n</li>\n<li><p>TCP：三次握手，四次挥手，慢启动，拥塞控制，快恢复，快重传，流量控制，紧急回传，确认机制，CRC；</p>\n</li>\n<li><p>UDP： 协议；</p>\n</li>\n<li><p>IP： 协议；</p>\n</li>\n<li><p>WebSocket： 协议；</p>\n</li>\n<li><p>网络认证：SSPing，证书，cookie，session，token，JWT，OAuth 2.0（四种方式）；</p>\n</li>\n</ol>\n<ul>\n<li>弱网优化；</li>\n<li>网络层次结构模型；</li>\n<li>网络安全： 中间人攻击，DDoS等；</li>\n<li>（非）加密算法，签名算法；</li>\n<li>应用层网络设计：设计模式，层次架构；</li>\n</ul>\n<ol start=\"2\">\n<li><p>数据库</p>\n</li>\n<li><p>操作系统</p>\n</li>\n<li><p>UI</p>\n</li>\n<li><p>多线程</p>\n</li>\n<li><p>语言<br>OC 与 Swift</p>\n</li>\n</ol>\n<p>内存管理<br>Runtime（方法转发）<br>KVO、KVC<br>通知<br>并发<br>Block<br>NSCoding，NSCopy</p>\n<ol start=\"7\">\n<li><p>应用优化</p>\n</li>\n<li><p>CI </p>\n</li>\n<li><p>组件化</p>\n</li>\n<li><p>日志与埋点</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>计算机 常用知识储备</p>\n<ol>\n<li><p>网络</p>\n</li>\n<li><p>HTTP： TLS，HTTP 2.0，状态码，缓存机制（cache-control，expire，Etag + If-No-Match，Last-Modified+if-Modified-Since）；</p>\n</li>\n<li><p>DNS： HTTPDNS，域名查找（递归 + 迭代 ）；</p>\n</li>\n<li><p>TCP：三次握手，四次挥手，慢启动，拥塞控制，快恢复，快重传，流量控制，紧急回传，确认机制，CRC；</p>\n</li>\n<li><p>UDP： 协议；</p>\n</li>\n<li><p>IP： 协议；</p>\n</li>\n<li><p>WebSocket： 协议；</p>\n</li>\n<li><p>网络认证：SSPing，证书，cookie，session，token，JWT，OAuth 2.0（四种方式）；</p>\n</li>\n</ol>\n<ul>\n<li>弱网优化；</li>\n<li>网络层次结构模型；</li>\n<li>网络安全： 中间人攻击，DDoS等；</li>\n<li>（非）加密算法，签名算法；</li>\n<li>应用层网络设计：设计模式，层次架构；</li>\n</ul>\n<ol start=\"2\">\n<li><p>数据库</p>\n</li>\n<li><p>操作系统</p>\n</li>\n<li><p>UI</p>\n</li>\n<li><p>多线程</p>\n</li>\n<li><p>语言<br>OC 与 Swift</p>\n</li>\n</ol>\n<p>内存管理<br>Runtime（方法转发）<br>KVO、KVC<br>通知<br>并发<br>Block<br>NSCoding，NSCopy</p>\n<ol start=\"7\">\n<li><p>应用优化</p>\n</li>\n<li><p>CI </p>\n</li>\n<li><p>组件化</p>\n</li>\n<li><p>日志与埋点</p>\n</li>\n</ol>\n"},{"title":"UML 笔记","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [浅谈UML中常用的几种图](https://blog.csdn.net/qq_35495763/article/details/80764914)\n","source":"_drafts/Computers/UML.md","raw":"---\ntitle: UML 笔记\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [浅谈UML中常用的几种图](https://blog.csdn.net/qq_35495763/article/details/80764914)\n","slug":"Computers/UML","published":0,"updated":"2021-07-29T06:46:00.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzh000miu9k22zbdi86","content":"<h2 id=\"1-浅谈UML中常用的几种图\"><a href=\"#1-浅谈UML中常用的几种图\" class=\"headerlink\" title=\"1. 浅谈UML中常用的几种图\"></a>1. <a href=\"https://blog.csdn.net/qq_35495763/article/details/80764914\">浅谈UML中常用的几种图</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-浅谈UML中常用的几种图\"><a href=\"#1-浅谈UML中常用的几种图\" class=\"headerlink\" title=\"1. 浅谈UML中常用的几种图\"></a>1. <a href=\"https://blog.csdn.net/qq_35495763/article/details/80764914\">浅谈UML中常用的几种图</a></h2>"},{"_content":"# 移动端 UI 框架\n\n## 1. Vue\n\n## 1.1 [VUX](https://doc.vux.li/zh-CN/)\n\n## 1.2 [Vant](https://vant-contrib.gitee.io/vant/#/zh-CN/home)\n\n## 1.3 [Mint UI](http://mint-ui.github.io/#!/zh-cn)\n\n## 2. React\n\n## 2.1 [Rax](https://rax.js.org/docs/api/getClipboard)\n\n## 3. React 响应式框架\n\n## 3.1 [MobX](https://cn.mobx.js.org/)\n","source":"_drafts/React-Native/MobileUIFramworks.md","raw":"# 移动端 UI 框架\n\n## 1. Vue\n\n## 1.1 [VUX](https://doc.vux.li/zh-CN/)\n\n## 1.2 [Vant](https://vant-contrib.gitee.io/vant/#/zh-CN/home)\n\n## 1.3 [Mint UI](http://mint-ui.github.io/#!/zh-cn)\n\n## 2. React\n\n## 2.1 [Rax](https://rax.js.org/docs/api/getClipboard)\n\n## 3. React 响应式框架\n\n## 3.1 [MobX](https://cn.mobx.js.org/)\n","slug":"React-Native/MobileUIFramworks","published":0,"date":"2021-07-29T06:45:56.769Z","updated":"2021-07-29T06:45:56.769Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzi000niu9k6yyebda6","content":"<h1 id=\"移动端-UI-框架\"><a href=\"#移动端-UI-框架\" class=\"headerlink\" title=\"移动端 UI 框架\"></a>移动端 UI 框架</h1><h2 id=\"1-Vue\"><a href=\"#1-Vue\" class=\"headerlink\" title=\"1. Vue\"></a>1. Vue</h2><h2 id=\"1-1-VUX\"><a href=\"#1-1-VUX\" class=\"headerlink\" title=\"1.1 VUX\"></a>1.1 <a href=\"https://doc.vux.li/zh-CN/\">VUX</a></h2><h2 id=\"1-2-Vant\"><a href=\"#1-2-Vant\" class=\"headerlink\" title=\"1.2 Vant\"></a>1.2 <a href=\"https://vant-contrib.gitee.io/vant/#/zh-CN/home\">Vant</a></h2><h2 id=\"1-3-Mint-UI\"><a href=\"#1-3-Mint-UI\" class=\"headerlink\" title=\"1.3 Mint UI\"></a>1.3 <a href=\"http://mint-ui.github.io/#!/zh-cn\">Mint UI</a></h2><h2 id=\"2-React\"><a href=\"#2-React\" class=\"headerlink\" title=\"2. React\"></a>2. React</h2><h2 id=\"2-1-Rax\"><a href=\"#2-1-Rax\" class=\"headerlink\" title=\"2.1 Rax\"></a>2.1 <a href=\"https://rax.js.org/docs/api/getClipboard\">Rax</a></h2><h2 id=\"3-React-响应式框架\"><a href=\"#3-React-响应式框架\" class=\"headerlink\" title=\"3. React 响应式框架\"></a>3. React 响应式框架</h2><h2 id=\"3-1-MobX\"><a href=\"#3-1-MobX\" class=\"headerlink\" title=\"3.1 MobX\"></a>3.1 <a href=\"https://cn.mobx.js.org/\">MobX</a></h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"移动端-UI-框架\"><a href=\"#移动端-UI-框架\" class=\"headerlink\" title=\"移动端 UI 框架\"></a>移动端 UI 框架</h1><h2 id=\"1-Vue\"><a href=\"#1-Vue\" class=\"headerlink\" title=\"1. Vue\"></a>1. Vue</h2><h2 id=\"1-1-VUX\"><a href=\"#1-1-VUX\" class=\"headerlink\" title=\"1.1 VUX\"></a>1.1 <a href=\"https://doc.vux.li/zh-CN/\">VUX</a></h2><h2 id=\"1-2-Vant\"><a href=\"#1-2-Vant\" class=\"headerlink\" title=\"1.2 Vant\"></a>1.2 <a href=\"https://vant-contrib.gitee.io/vant/#/zh-CN/home\">Vant</a></h2><h2 id=\"1-3-Mint-UI\"><a href=\"#1-3-Mint-UI\" class=\"headerlink\" title=\"1.3 Mint UI\"></a>1.3 <a href=\"http://mint-ui.github.io/#!/zh-cn\">Mint UI</a></h2><h2 id=\"2-React\"><a href=\"#2-React\" class=\"headerlink\" title=\"2. React\"></a>2. React</h2><h2 id=\"2-1-Rax\"><a href=\"#2-1-Rax\" class=\"headerlink\" title=\"2.1 Rax\"></a>2.1 <a href=\"https://rax.js.org/docs/api/getClipboard\">Rax</a></h2><h2 id=\"3-React-响应式框架\"><a href=\"#3-React-响应式框架\" class=\"headerlink\" title=\"3. React 响应式框架\"></a>3. React 响应式框架</h2><h2 id=\"3-1-MobX\"><a href=\"#3-1-MobX\" class=\"headerlink\" title=\"3.1 MobX\"></a>3.1 <a href=\"https://cn.mobx.js.org/\">MobX</a></h2>"},{"title":"React-Native","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_drafts/React-Native/React-Native.md","raw":"---\ntitle: React-Native\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"React-Native/React-Native","published":0,"updated":"2021-04-28T02:18:11.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzi000oiu9k9bml31qc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"博客写作计划","date":"2021-04-20T13:36:02.000Z","_content":"\n## 一 iOS 部分\n\n### 1. 性能优化\n\n#### APP 启动优化\n\n1. Mac-O 文件\n\n#### 电量优化\n\n#### 网络优化\n\n#### 日志系统、埋点\n\n1. 日志系统\n   * 日志数据库与上报\n   * crash 日志与解析\n\n2. 埋点\n\n3. 监控\n\n#### 多任务\n\n1. 多线程\n   * 堆栈信息收集\n\n### 2. 工程化\n\n### 3. 组件化\n\n### 4. 语言部分\n\n#### Swift\n\n#### Objective-C\n\n1. 内存管理\n2. GCD\n3. Block\n\n### 5. 操作系统部分\n\n### 6. 算法与安全\n\n#### 算法\n\n#### 数据结构\n\n##### 1. [二叉查找树、平衡二叉树（AVLTree）和平衡多路查找树（B-Tree），B+树](https://blog.csdn.net/qq_21993785/article/details/80576642)\n\n#### 安全\n\n### 7. 源码阅读\n\n### 8. 架构设计\n\n#### 设计模式\n\n#### 架构\n\n## 二 Flutter 部分\n\n## 三 前端部分\n\n## 四 Android 部分\n","source":"_drafts/BlogsPlan/BlogsPlan.md","raw":"---\ntitle: 博客写作计划\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 一 iOS 部分\n\n### 1. 性能优化\n\n#### APP 启动优化\n\n1. Mac-O 文件\n\n#### 电量优化\n\n#### 网络优化\n\n#### 日志系统、埋点\n\n1. 日志系统\n   * 日志数据库与上报\n   * crash 日志与解析\n\n2. 埋点\n\n3. 监控\n\n#### 多任务\n\n1. 多线程\n   * 堆栈信息收集\n\n### 2. 工程化\n\n### 3. 组件化\n\n### 4. 语言部分\n\n#### Swift\n\n#### Objective-C\n\n1. 内存管理\n2. GCD\n3. Block\n\n### 5. 操作系统部分\n\n### 6. 算法与安全\n\n#### 算法\n\n#### 数据结构\n\n##### 1. [二叉查找树、平衡二叉树（AVLTree）和平衡多路查找树（B-Tree），B+树](https://blog.csdn.net/qq_21993785/article/details/80576642)\n\n#### 安全\n\n### 7. 源码阅读\n\n### 8. 架构设计\n\n#### 设计模式\n\n#### 架构\n\n## 二 Flutter 部分\n\n## 三 前端部分\n\n## 四 Android 部分\n","slug":"BlogsPlan/BlogsPlan","published":0,"updated":"2021-07-29T06:46:01.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzj000piu9k04ij6qoh","content":"<h2 id=\"一-iOS-部分\"><a href=\"#一-iOS-部分\" class=\"headerlink\" title=\"一 iOS 部分\"></a>一 iOS 部分</h2><h3 id=\"1-性能优化\"><a href=\"#1-性能优化\" class=\"headerlink\" title=\"1. 性能优化\"></a>1. 性能优化</h3><h4 id=\"APP-启动优化\"><a href=\"#APP-启动优化\" class=\"headerlink\" title=\"APP 启动优化\"></a>APP 启动优化</h4><ol>\n<li>Mac-O 文件</li>\n</ol>\n<h4 id=\"电量优化\"><a href=\"#电量优化\" class=\"headerlink\" title=\"电量优化\"></a>电量优化</h4><h4 id=\"网络优化\"><a href=\"#网络优化\" class=\"headerlink\" title=\"网络优化\"></a>网络优化</h4><h4 id=\"日志系统、埋点\"><a href=\"#日志系统、埋点\" class=\"headerlink\" title=\"日志系统、埋点\"></a>日志系统、埋点</h4><ol>\n<li><p>日志系统</p>\n<ul>\n<li>日志数据库与上报</li>\n<li>crash 日志与解析</li>\n</ul>\n</li>\n<li><p>埋点</p>\n</li>\n<li><p>监控</p>\n</li>\n</ol>\n<h4 id=\"多任务\"><a href=\"#多任务\" class=\"headerlink\" title=\"多任务\"></a>多任务</h4><ol>\n<li>多线程<ul>\n<li>堆栈信息收集</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-工程化\"><a href=\"#2-工程化\" class=\"headerlink\" title=\"2. 工程化\"></a>2. 工程化</h3><h3 id=\"3-组件化\"><a href=\"#3-组件化\" class=\"headerlink\" title=\"3. 组件化\"></a>3. 组件化</h3><h3 id=\"4-语言部分\"><a href=\"#4-语言部分\" class=\"headerlink\" title=\"4. 语言部分\"></a>4. 语言部分</h3><h4 id=\"Swift\"><a href=\"#Swift\" class=\"headerlink\" title=\"Swift\"></a>Swift</h4><h4 id=\"Objective-C\"><a href=\"#Objective-C\" class=\"headerlink\" title=\"Objective-C\"></a>Objective-C</h4><ol>\n<li>内存管理</li>\n<li>GCD</li>\n<li>Block</li>\n</ol>\n<h3 id=\"5-操作系统部分\"><a href=\"#5-操作系统部分\" class=\"headerlink\" title=\"5. 操作系统部分\"></a>5. 操作系统部分</h3><h3 id=\"6-算法与安全\"><a href=\"#6-算法与安全\" class=\"headerlink\" title=\"6. 算法与安全\"></a>6. 算法与安全</h3><h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><h5 id=\"1-二叉查找树、平衡二叉树（AVLTree）和平衡多路查找树（B-Tree），B-树\"><a href=\"#1-二叉查找树、平衡二叉树（AVLTree）和平衡多路查找树（B-Tree），B-树\" class=\"headerlink\" title=\"1. 二叉查找树、平衡二叉树（AVLTree）和平衡多路查找树（B-Tree），B+树\"></a>1. <a href=\"https://blog.csdn.net/qq_21993785/article/details/80576642\">二叉查找树、平衡二叉树（AVLTree）和平衡多路查找树（B-Tree），B+树</a></h5><h4 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h4><h3 id=\"7-源码阅读\"><a href=\"#7-源码阅读\" class=\"headerlink\" title=\"7. 源码阅读\"></a>7. 源码阅读</h3><h3 id=\"8-架构设计\"><a href=\"#8-架构设计\" class=\"headerlink\" title=\"8. 架构设计\"></a>8. 架构设计</h3><h4 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h4><h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><h2 id=\"二-Flutter-部分\"><a href=\"#二-Flutter-部分\" class=\"headerlink\" title=\"二 Flutter 部分\"></a>二 Flutter 部分</h2><h2 id=\"三-前端部分\"><a href=\"#三-前端部分\" class=\"headerlink\" title=\"三 前端部分\"></a>三 前端部分</h2><h2 id=\"四-Android-部分\"><a href=\"#四-Android-部分\" class=\"headerlink\" title=\"四 Android 部分\"></a>四 Android 部分</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-iOS-部分\"><a href=\"#一-iOS-部分\" class=\"headerlink\" title=\"一 iOS 部分\"></a>一 iOS 部分</h2><h3 id=\"1-性能优化\"><a href=\"#1-性能优化\" class=\"headerlink\" title=\"1. 性能优化\"></a>1. 性能优化</h3><h4 id=\"APP-启动优化\"><a href=\"#APP-启动优化\" class=\"headerlink\" title=\"APP 启动优化\"></a>APP 启动优化</h4><ol>\n<li>Mac-O 文件</li>\n</ol>\n<h4 id=\"电量优化\"><a href=\"#电量优化\" class=\"headerlink\" title=\"电量优化\"></a>电量优化</h4><h4 id=\"网络优化\"><a href=\"#网络优化\" class=\"headerlink\" title=\"网络优化\"></a>网络优化</h4><h4 id=\"日志系统、埋点\"><a href=\"#日志系统、埋点\" class=\"headerlink\" title=\"日志系统、埋点\"></a>日志系统、埋点</h4><ol>\n<li><p>日志系统</p>\n<ul>\n<li>日志数据库与上报</li>\n<li>crash 日志与解析</li>\n</ul>\n</li>\n<li><p>埋点</p>\n</li>\n<li><p>监控</p>\n</li>\n</ol>\n<h4 id=\"多任务\"><a href=\"#多任务\" class=\"headerlink\" title=\"多任务\"></a>多任务</h4><ol>\n<li>多线程<ul>\n<li>堆栈信息收集</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-工程化\"><a href=\"#2-工程化\" class=\"headerlink\" title=\"2. 工程化\"></a>2. 工程化</h3><h3 id=\"3-组件化\"><a href=\"#3-组件化\" class=\"headerlink\" title=\"3. 组件化\"></a>3. 组件化</h3><h3 id=\"4-语言部分\"><a href=\"#4-语言部分\" class=\"headerlink\" title=\"4. 语言部分\"></a>4. 语言部分</h3><h4 id=\"Swift\"><a href=\"#Swift\" class=\"headerlink\" title=\"Swift\"></a>Swift</h4><h4 id=\"Objective-C\"><a href=\"#Objective-C\" class=\"headerlink\" title=\"Objective-C\"></a>Objective-C</h4><ol>\n<li>内存管理</li>\n<li>GCD</li>\n<li>Block</li>\n</ol>\n<h3 id=\"5-操作系统部分\"><a href=\"#5-操作系统部分\" class=\"headerlink\" title=\"5. 操作系统部分\"></a>5. 操作系统部分</h3><h3 id=\"6-算法与安全\"><a href=\"#6-算法与安全\" class=\"headerlink\" title=\"6. 算法与安全\"></a>6. 算法与安全</h3><h4 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h4><h4 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h4><h5 id=\"1-二叉查找树、平衡二叉树（AVLTree）和平衡多路查找树（B-Tree），B-树\"><a href=\"#1-二叉查找树、平衡二叉树（AVLTree）和平衡多路查找树（B-Tree），B-树\" class=\"headerlink\" title=\"1. 二叉查找树、平衡二叉树（AVLTree）和平衡多路查找树（B-Tree），B+树\"></a>1. <a href=\"https://blog.csdn.net/qq_21993785/article/details/80576642\">二叉查找树、平衡二叉树（AVLTree）和平衡多路查找树（B-Tree），B+树</a></h5><h4 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h4><h3 id=\"7-源码阅读\"><a href=\"#7-源码阅读\" class=\"headerlink\" title=\"7. 源码阅读\"></a>7. 源码阅读</h3><h3 id=\"8-架构设计\"><a href=\"#8-架构设计\" class=\"headerlink\" title=\"8. 架构设计\"></a>8. 架构设计</h3><h4 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h4><h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><h2 id=\"二-Flutter-部分\"><a href=\"#二-Flutter-部分\" class=\"headerlink\" title=\"二 Flutter 部分\"></a>二 Flutter 部分</h2><h2 id=\"三-前端部分\"><a href=\"#三-前端部分\" class=\"headerlink\" title=\"三 前端部分\"></a>三 前端部分</h2><h2 id=\"四-Android-部分\"><a href=\"#四-Android-部分\" class=\"headerlink\" title=\"四 Android 部分\"></a>四 Android 部分</h2>"},{"title":"近期目标","date":"2021-04-20T13:36:02.000Z","_content":"\n\n1、腾讯、网易等互联网公司；\n\n1.1 能力\n\n1. 技术\n    专业性：图形图像【ImageMagic】、音视频【直播、点播】、IM、OpenCV、OpenGL、Metal、FFmpeg、GPUImage\n2. 思维\n    计算机基础：OS、C++、网络、数据库、数据结构【算法、安全】、shell、Python？\n\n2、考证\n\n1. 架构师\n2. 公务员<党员>\n3. 教师资格证\n\n3、生活\n\n* 走出生活\n* 享受生活\n* 生活品质\n* 回归家庭\n* 自主时间\n* 房、车、家\n\n4、读书（修生养性）\n\n1. 史\n2. 论\n3. 科技\n\n5、职业规划\n\n1. iOS\n    swift、swiftUI、响应式、WWDC[2019]、性能优化、内存管理、运行时、函数调用【栈、转发】、汇编、逆向、LLDB、LLVM、GCC、自动化、大前端【React-Native、Flutter】、\n\n    1.1、 C++ 方向\n\n2. 服务器\n    Java、Swift\n\n3. 架构师\n    移动/前端、服务器、小程序等、项目管理、团队管理、产品、市场、运营\n\n4. 大数据\n    深度学习、人工智能、机器学习\n","source":"_drafts/BlogsPlan/ShortPlan.md","raw":"---\ntitle: 近期目标\ndate: 2021-04-20 21:36:02\ntags:  \n---\n\n\n1、腾讯、网易等互联网公司；\n\n1.1 能力\n\n1. 技术\n    专业性：图形图像【ImageMagic】、音视频【直播、点播】、IM、OpenCV、OpenGL、Metal、FFmpeg、GPUImage\n2. 思维\n    计算机基础：OS、C++、网络、数据库、数据结构【算法、安全】、shell、Python？\n\n2、考证\n\n1. 架构师\n2. 公务员<党员>\n3. 教师资格证\n\n3、生活\n\n* 走出生活\n* 享受生活\n* 生活品质\n* 回归家庭\n* 自主时间\n* 房、车、家\n\n4、读书（修生养性）\n\n1. 史\n2. 论\n3. 科技\n\n5、职业规划\n\n1. iOS\n    swift、swiftUI、响应式、WWDC[2019]、性能优化、内存管理、运行时、函数调用【栈、转发】、汇编、逆向、LLDB、LLVM、GCC、自动化、大前端【React-Native、Flutter】、\n\n    1.1、 C++ 方向\n\n2. 服务器\n    Java、Swift\n\n3. 架构师\n    移动/前端、服务器、小程序等、项目管理、团队管理、产品、市场、运营\n\n4. 大数据\n    深度学习、人工智能、机器学习\n","slug":"BlogsPlan/ShortPlan","published":0,"updated":"2021-07-29T06:46:01.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzj000qiu9k3zj33nge","content":"<p>1、腾讯、网易等互联网公司；</p>\n<p>1.1 能力</p>\n<ol>\n<li>技术<br> 专业性：图形图像【ImageMagic】、音视频【直播、点播】、IM、OpenCV、OpenGL、Metal、FFmpeg、GPUImage</li>\n<li>思维<br> 计算机基础：OS、C++、网络、数据库、数据结构【算法、安全】、shell、Python？</li>\n</ol>\n<p>2、考证</p>\n<ol>\n<li>架构师</li>\n<li>公务员&lt;党员&gt;</li>\n<li>教师资格证</li>\n</ol>\n<p>3、生活</p>\n<ul>\n<li>走出生活</li>\n<li>享受生活</li>\n<li>生活品质</li>\n<li>回归家庭</li>\n<li>自主时间</li>\n<li>房、车、家</li>\n</ul>\n<p>4、读书（修生养性）</p>\n<ol>\n<li>史</li>\n<li>论</li>\n<li>科技</li>\n</ol>\n<p>5、职业规划</p>\n<ol>\n<li><p>iOS<br> swift、swiftUI、响应式、WWDC[2019]、性能优化、内存管理、运行时、函数调用【栈、转发】、汇编、逆向、LLDB、LLVM、GCC、自动化、大前端【React-Native、Flutter】、</p>\n<p> 1.1、 C++ 方向</p>\n</li>\n<li><p>服务器<br> Java、Swift</p>\n</li>\n<li><p>架构师<br> 移动/前端、服务器、小程序等、项目管理、团队管理、产品、市场、运营</p>\n</li>\n<li><p>大数据<br> 深度学习、人工智能、机器学习</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>1、腾讯、网易等互联网公司；</p>\n<p>1.1 能力</p>\n<ol>\n<li>技术<br> 专业性：图形图像【ImageMagic】、音视频【直播、点播】、IM、OpenCV、OpenGL、Metal、FFmpeg、GPUImage</li>\n<li>思维<br> 计算机基础：OS、C++、网络、数据库、数据结构【算法、安全】、shell、Python？</li>\n</ol>\n<p>2、考证</p>\n<ol>\n<li>架构师</li>\n<li>公务员&lt;党员&gt;</li>\n<li>教师资格证</li>\n</ol>\n<p>3、生活</p>\n<ul>\n<li>走出生活</li>\n<li>享受生活</li>\n<li>生活品质</li>\n<li>回归家庭</li>\n<li>自主时间</li>\n<li>房、车、家</li>\n</ul>\n<p>4、读书（修生养性）</p>\n<ol>\n<li>史</li>\n<li>论</li>\n<li>科技</li>\n</ol>\n<p>5、职业规划</p>\n<ol>\n<li><p>iOS<br> swift、swiftUI、响应式、WWDC[2019]、性能优化、内存管理、运行时、函数调用【栈、转发】、汇编、逆向、LLDB、LLVM、GCC、自动化、大前端【React-Native、Flutter】、</p>\n<p> 1.1、 C++ 方向</p>\n</li>\n<li><p>服务器<br> Java、Swift</p>\n</li>\n<li><p>架构师<br> 移动/前端、服务器、小程序等、项目管理、团队管理、产品、市场、运营</p>\n</li>\n<li><p>大数据<br> 深度学习、人工智能、机器学习</p>\n</li>\n</ol>\n"},{"title":"学习计划","date":"2021-04-20T13:36:02.000Z","_content":"\n## 一、学习\n\n1、大前端\n\n    React-Native\n    小程序\n    flutter\n\n2、性能优化\n\n    2.1 界面性能，GPU——YYKit 介绍的框架\n    2.2 CPU性能，Allen介绍的多态及编译原理\n\n3、组件化（模块化）\n\n        3.1 URL-Block\n        \n        3.2 Protocol-Class\n        \n        3.3 中间件（casa）\n        \n        3.4 微服务\n\n4、设计模式（精通）\n\n    4.1 代码重构 （从哪些方面重构，依据什么）\n    \n    4.2 程序原则：\n        何时何地，由谁（类？？对象）做何事\n\n5、导航栏的梗，转场动画\n\n6、 ~~layoutSubView，sizeThatFit 等~~\n\n7、读第三方库\n\n    7.1 使用原则——先封装\n    7.2 项目中使用的第三方库\n\n8、swift 语言精华\n\n    8.1 init 链\n    8.2 高阶函数\n    8.3 泛型\n    8.4 协议\n    8.5 拓展\n    8.6 swift 语言开源库及计划\n\n9、macOS、iOS 系统\n\n    9.1 越狱iOS学习\n    9.2 反编译\n    9.3 代码混淆（iOS）\n\n10、富文本\n\n    10.1 CoreText\n    10.2 TextKit:NSAttributeString等\n    10.3 WebKit\n\n11、电子签名\n\n12、HTTP(S)、TCP、UDP(kcp)等 协议\n\n13、UPnP\n\n14、Frp\n\n15、WoL(远程唤醒)\n\n16、~~（小明）域名认证~~\n\n17、~~香港服务器~~\n\n18、多线程\n\n* [Threaded Programming](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i)\n\n* [Run Loops](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16)\n\n19、汇编\n\n20、C/C++\n\n    20.1 boost\n    20.2 Qt\n    20.3 Xcode\n    20.4 Visual Studio\n\n21、音视频播放器源码\n\n    21.1 FFmpeg\n    21.2 IJKPlayer\n    21.3 AliPlayer\n    21.4 封装播放器\n        原生的【AVFoundation】\n        第三方 源码解读\n    21.5 音频\n        语音识别——Sphinx\n        性能优化——编解码、压缩\n\n* [语音识别--openears](https://www.politepix.com/openears/tutorial/)\n\n22、OpenGL、OpenCV。。。\n\n23、Linux 使用及系统原理学习\n\n24、深度学习——TensorFlow\n\n25、数据结构及算法（安全）\n\n26、爬虫（Python）\n\n27、Go\n\n28、shell编程\n\n29、CI自动化集成\n\n    Jenkins\n    XcodeSever\n\n30、架构师资格证【考】\n\n31、英语——托福证【考】\n\n32、开发信息系统化整理——按专题\n\n    32.1 iOS\n    32.2 web\n    32.3 Java——服务器、Android......一本书\n    32.4 Chrome 书签整理\n    32.5 百度网盘整理\n\n33、适配方案——iOS、web\n\n34、微信阅读\n\n    34.1 剑桥中国史\n    \n    34.2 摩根财团\n\n35、思维管理——系统化思维\n\n    35.1 产品思维\n    35.2 Boss思维\n    35.3 网络思维\n    35.n 思维[网络]联系所有物质\n\n36、人脉资源管理\n\n    36.1 人情\n    36.2 朋友\n    36.3 敌人\n    36.4 其他\n        熟人、陌生人、偶像、领导、同事、下属。。。。。。\n\n37、生活\n\n    37.1 规律\n    37.2 原则\n    37.3 效率\n    37.4 品质\n    37.5 追求\n\n38、简历特点\n\n    1、主导过用户量数十万级别《明星空间》项目，掌握项目架构，直播前沿技 术，精通客户端程序设计\n    2、熟悉iOS内核运行机制\n    3、熟悉OpenGL ES、FFmpeg、Cocos2D-x\n    4、熟练使用Xcode 上的性能工具Instrument以及代码管理工具Git，SVN等 \n    5、熟悉Socket 与 Web socket，熟悉UDP、TCP、IP、rtmp、HTTPS、HTTP、 xmpp协议等\n    6、有带领团队和项目管理经验，也有项目架构设计和重构经验 \n    7、熟悉编程语言:c/c++，objective-C，swift，PHP，Python，Java，H5 \n    8、熟悉单元测试及代码性能优化 \n    9、熟悉Java\n\n## 二、健身\n\n## 三、知识体系\n\n1、操作系统原理\n\n2、程序设计——语言\n\n3、数据结构与算法\n\n4、网络及协议\n\n* [Alamofire/Alamofire](https://github.com/Alamofire/Alamofire)\n* [AlamofireObjectMapper](https://github.com/tristanhimmelman/AlamofireObjectMapper)\n\n5、硬件的使用及结构、原理\n\n    5.1 CPU\n    5.2 GPU\n  \n6、服务化\n\n    Frp\n    WordPress\n    VPN\n    Gitlab\n    Web\n    ...\n\n7、信息传输原理\n\n## 四、目标\n\n1、做事\n\n2、赚钱\n\n3、学习\n\n4、不能虚度时光\n\n## 杂项\n\n1、动画库：\n\n* [facebook/pop](https://github.com/facebook/pop)\n* [airbnb/lottie-ios](https://github.com/airbnb/lottie-ios)\n\n2、[iOS 官方文档：](https://developer.apple.com/documentation)\n","source":"_drafts/BlogsPlan/StudyPlan.md","raw":"---\ntitle: 学习计划\ndate: 2021-04-20 21:36:02\ntags:  \n---\n\n## 一、学习\n\n1、大前端\n\n    React-Native\n    小程序\n    flutter\n\n2、性能优化\n\n    2.1 界面性能，GPU——YYKit 介绍的框架\n    2.2 CPU性能，Allen介绍的多态及编译原理\n\n3、组件化（模块化）\n\n        3.1 URL-Block\n        \n        3.2 Protocol-Class\n        \n        3.3 中间件（casa）\n        \n        3.4 微服务\n\n4、设计模式（精通）\n\n    4.1 代码重构 （从哪些方面重构，依据什么）\n    \n    4.2 程序原则：\n        何时何地，由谁（类？？对象）做何事\n\n5、导航栏的梗，转场动画\n\n6、 ~~layoutSubView，sizeThatFit 等~~\n\n7、读第三方库\n\n    7.1 使用原则——先封装\n    7.2 项目中使用的第三方库\n\n8、swift 语言精华\n\n    8.1 init 链\n    8.2 高阶函数\n    8.3 泛型\n    8.4 协议\n    8.5 拓展\n    8.6 swift 语言开源库及计划\n\n9、macOS、iOS 系统\n\n    9.1 越狱iOS学习\n    9.2 反编译\n    9.3 代码混淆（iOS）\n\n10、富文本\n\n    10.1 CoreText\n    10.2 TextKit:NSAttributeString等\n    10.3 WebKit\n\n11、电子签名\n\n12、HTTP(S)、TCP、UDP(kcp)等 协议\n\n13、UPnP\n\n14、Frp\n\n15、WoL(远程唤醒)\n\n16、~~（小明）域名认证~~\n\n17、~~香港服务器~~\n\n18、多线程\n\n* [Threaded Programming](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i)\n\n* [Run Loops](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16)\n\n19、汇编\n\n20、C/C++\n\n    20.1 boost\n    20.2 Qt\n    20.3 Xcode\n    20.4 Visual Studio\n\n21、音视频播放器源码\n\n    21.1 FFmpeg\n    21.2 IJKPlayer\n    21.3 AliPlayer\n    21.4 封装播放器\n        原生的【AVFoundation】\n        第三方 源码解读\n    21.5 音频\n        语音识别——Sphinx\n        性能优化——编解码、压缩\n\n* [语音识别--openears](https://www.politepix.com/openears/tutorial/)\n\n22、OpenGL、OpenCV。。。\n\n23、Linux 使用及系统原理学习\n\n24、深度学习——TensorFlow\n\n25、数据结构及算法（安全）\n\n26、爬虫（Python）\n\n27、Go\n\n28、shell编程\n\n29、CI自动化集成\n\n    Jenkins\n    XcodeSever\n\n30、架构师资格证【考】\n\n31、英语——托福证【考】\n\n32、开发信息系统化整理——按专题\n\n    32.1 iOS\n    32.2 web\n    32.3 Java——服务器、Android......一本书\n    32.4 Chrome 书签整理\n    32.5 百度网盘整理\n\n33、适配方案——iOS、web\n\n34、微信阅读\n\n    34.1 剑桥中国史\n    \n    34.2 摩根财团\n\n35、思维管理——系统化思维\n\n    35.1 产品思维\n    35.2 Boss思维\n    35.3 网络思维\n    35.n 思维[网络]联系所有物质\n\n36、人脉资源管理\n\n    36.1 人情\n    36.2 朋友\n    36.3 敌人\n    36.4 其他\n        熟人、陌生人、偶像、领导、同事、下属。。。。。。\n\n37、生活\n\n    37.1 规律\n    37.2 原则\n    37.3 效率\n    37.4 品质\n    37.5 追求\n\n38、简历特点\n\n    1、主导过用户量数十万级别《明星空间》项目，掌握项目架构，直播前沿技 术，精通客户端程序设计\n    2、熟悉iOS内核运行机制\n    3、熟悉OpenGL ES、FFmpeg、Cocos2D-x\n    4、熟练使用Xcode 上的性能工具Instrument以及代码管理工具Git，SVN等 \n    5、熟悉Socket 与 Web socket，熟悉UDP、TCP、IP、rtmp、HTTPS、HTTP、 xmpp协议等\n    6、有带领团队和项目管理经验，也有项目架构设计和重构经验 \n    7、熟悉编程语言:c/c++，objective-C，swift，PHP，Python，Java，H5 \n    8、熟悉单元测试及代码性能优化 \n    9、熟悉Java\n\n## 二、健身\n\n## 三、知识体系\n\n1、操作系统原理\n\n2、程序设计——语言\n\n3、数据结构与算法\n\n4、网络及协议\n\n* [Alamofire/Alamofire](https://github.com/Alamofire/Alamofire)\n* [AlamofireObjectMapper](https://github.com/tristanhimmelman/AlamofireObjectMapper)\n\n5、硬件的使用及结构、原理\n\n    5.1 CPU\n    5.2 GPU\n  \n6、服务化\n\n    Frp\n    WordPress\n    VPN\n    Gitlab\n    Web\n    ...\n\n7、信息传输原理\n\n## 四、目标\n\n1、做事\n\n2、赚钱\n\n3、学习\n\n4、不能虚度时光\n\n## 杂项\n\n1、动画库：\n\n* [facebook/pop](https://github.com/facebook/pop)\n* [airbnb/lottie-ios](https://github.com/airbnb/lottie-ios)\n\n2、[iOS 官方文档：](https://developer.apple.com/documentation)\n","slug":"BlogsPlan/StudyPlan","published":0,"updated":"2021-07-29T06:46:01.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzk000riu9k86gkb872","content":"<h2 id=\"一、学习\"><a href=\"#一、学习\" class=\"headerlink\" title=\"一、学习\"></a>一、学习</h2><p>1、大前端</p>\n<pre><code>React-Native\n小程序\nflutter\n</code></pre>\n<p>2、性能优化</p>\n<pre><code>2.1 界面性能，GPU——YYKit 介绍的框架\n2.2 CPU性能，Allen介绍的多态及编译原理\n</code></pre>\n<p>3、组件化（模块化）</p>\n<pre><code>    3.1 URL-Block\n    \n    3.2 Protocol-Class\n    \n    3.3 中间件（casa）\n    \n    3.4 微服务\n</code></pre>\n<p>4、设计模式（精通）</p>\n<pre><code>4.1 代码重构 （从哪些方面重构，依据什么）\n\n4.2 程序原则：\n    何时何地，由谁（类？？对象）做何事\n</code></pre>\n<p>5、导航栏的梗，转场动画</p>\n<p>6、 <del>layoutSubView，sizeThatFit 等</del></p>\n<p>7、读第三方库</p>\n<pre><code>7.1 使用原则——先封装\n7.2 项目中使用的第三方库\n</code></pre>\n<p>8、swift 语言精华</p>\n<pre><code>8.1 init 链\n8.2 高阶函数\n8.3 泛型\n8.4 协议\n8.5 拓展\n8.6 swift 语言开源库及计划\n</code></pre>\n<p>9、macOS、iOS 系统</p>\n<pre><code>9.1 越狱iOS学习\n9.2 反编译\n9.3 代码混淆（iOS）\n</code></pre>\n<p>10、富文本</p>\n<pre><code>10.1 CoreText\n10.2 TextKit:NSAttributeString等\n10.3 WebKit\n</code></pre>\n<p>11、电子签名</p>\n<p>12、HTTP(S)、TCP、UDP(kcp)等 协议</p>\n<p>13、UPnP</p>\n<p>14、Frp</p>\n<p>15、WoL(远程唤醒)</p>\n<p>16、<del>（小明）域名认证</del></p>\n<p>17、<del>香港服务器</del></p>\n<p>18、多线程</p>\n<ul>\n<li><p><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i\">Threaded Programming</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16\">Run Loops</a></p>\n</li>\n</ul>\n<p>19、汇编</p>\n<p>20、C/C++</p>\n<pre><code>20.1 boost\n20.2 Qt\n20.3 Xcode\n20.4 Visual Studio\n</code></pre>\n<p>21、音视频播放器源码</p>\n<pre><code>21.1 FFmpeg\n21.2 IJKPlayer\n21.3 AliPlayer\n21.4 封装播放器\n    原生的【AVFoundation】\n    第三方 源码解读\n21.5 音频\n    语音识别——Sphinx\n    性能优化——编解码、压缩\n</code></pre>\n<ul>\n<li><a href=\"https://www.politepix.com/openears/tutorial/\">语音识别–openears</a></li>\n</ul>\n<p>22、OpenGL、OpenCV。。。</p>\n<p>23、Linux 使用及系统原理学习</p>\n<p>24、深度学习——TensorFlow</p>\n<p>25、数据结构及算法（安全）</p>\n<p>26、爬虫（Python）</p>\n<p>27、Go</p>\n<p>28、shell编程</p>\n<p>29、CI自动化集成</p>\n<pre><code>Jenkins\nXcodeSever\n</code></pre>\n<p>30、架构师资格证【考】</p>\n<p>31、英语——托福证【考】</p>\n<p>32、开发信息系统化整理——按专题</p>\n<pre><code>32.1 iOS\n32.2 web\n32.3 Java——服务器、Android......一本书\n32.4 Chrome 书签整理\n32.5 百度网盘整理\n</code></pre>\n<p>33、适配方案——iOS、web</p>\n<p>34、微信阅读</p>\n<pre><code>34.1 剑桥中国史\n\n34.2 摩根财团\n</code></pre>\n<p>35、思维管理——系统化思维</p>\n<pre><code>35.1 产品思维\n35.2 Boss思维\n35.3 网络思维\n35.n 思维[网络]联系所有物质\n</code></pre>\n<p>36、人脉资源管理</p>\n<pre><code>36.1 人情\n36.2 朋友\n36.3 敌人\n36.4 其他\n    熟人、陌生人、偶像、领导、同事、下属。。。。。。\n</code></pre>\n<p>37、生活</p>\n<pre><code>37.1 规律\n37.2 原则\n37.3 效率\n37.4 品质\n37.5 追求\n</code></pre>\n<p>38、简历特点</p>\n<pre><code>1、主导过用户量数十万级别《明星空间》项目，掌握项目架构，直播前沿技 术，精通客户端程序设计\n2、熟悉iOS内核运行机制\n3、熟悉OpenGL ES、FFmpeg、Cocos2D-x\n4、熟练使用Xcode 上的性能工具Instrument以及代码管理工具Git，SVN等 \n5、熟悉Socket 与 Web socket，熟悉UDP、TCP、IP、rtmp、HTTPS、HTTP、 xmpp协议等\n6、有带领团队和项目管理经验，也有项目架构设计和重构经验 \n7、熟悉编程语言:c/c++，objective-C，swift，PHP，Python，Java，H5 \n8、熟悉单元测试及代码性能优化 \n9、熟悉Java\n</code></pre>\n<h2 id=\"二、健身\"><a href=\"#二、健身\" class=\"headerlink\" title=\"二、健身\"></a>二、健身</h2><h2 id=\"三、知识体系\"><a href=\"#三、知识体系\" class=\"headerlink\" title=\"三、知识体系\"></a>三、知识体系</h2><p>1、操作系统原理</p>\n<p>2、程序设计——语言</p>\n<p>3、数据结构与算法</p>\n<p>4、网络及协议</p>\n<ul>\n<li><a href=\"https://github.com/Alamofire/Alamofire\">Alamofire/Alamofire</a></li>\n<li><a href=\"https://github.com/tristanhimmelman/AlamofireObjectMapper\">AlamofireObjectMapper</a></li>\n</ul>\n<p>5、硬件的使用及结构、原理</p>\n<pre><code>5.1 CPU\n5.2 GPU\n</code></pre>\n<p>6、服务化</p>\n<pre><code>Frp\nWordPress\nVPN\nGitlab\nWeb\n...\n</code></pre>\n<p>7、信息传输原理</p>\n<h2 id=\"四、目标\"><a href=\"#四、目标\" class=\"headerlink\" title=\"四、目标\"></a>四、目标</h2><p>1、做事</p>\n<p>2、赚钱</p>\n<p>3、学习</p>\n<p>4、不能虚度时光</p>\n<h2 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2><p>1、动画库：</p>\n<ul>\n<li><a href=\"https://github.com/facebook/pop\">facebook/pop</a></li>\n<li><a href=\"https://github.com/airbnb/lottie-ios\">airbnb/lottie-ios</a></li>\n</ul>\n<p>2、<a href=\"https://developer.apple.com/documentation\">iOS 官方文档：</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、学习\"><a href=\"#一、学习\" class=\"headerlink\" title=\"一、学习\"></a>一、学习</h2><p>1、大前端</p>\n<pre><code>React-Native\n小程序\nflutter\n</code></pre>\n<p>2、性能优化</p>\n<pre><code>2.1 界面性能，GPU——YYKit 介绍的框架\n2.2 CPU性能，Allen介绍的多态及编译原理\n</code></pre>\n<p>3、组件化（模块化）</p>\n<pre><code>    3.1 URL-Block\n    \n    3.2 Protocol-Class\n    \n    3.3 中间件（casa）\n    \n    3.4 微服务\n</code></pre>\n<p>4、设计模式（精通）</p>\n<pre><code>4.1 代码重构 （从哪些方面重构，依据什么）\n\n4.2 程序原则：\n    何时何地，由谁（类？？对象）做何事\n</code></pre>\n<p>5、导航栏的梗，转场动画</p>\n<p>6、 <del>layoutSubView，sizeThatFit 等</del></p>\n<p>7、读第三方库</p>\n<pre><code>7.1 使用原则——先封装\n7.2 项目中使用的第三方库\n</code></pre>\n<p>8、swift 语言精华</p>\n<pre><code>8.1 init 链\n8.2 高阶函数\n8.3 泛型\n8.4 协议\n8.5 拓展\n8.6 swift 语言开源库及计划\n</code></pre>\n<p>9、macOS、iOS 系统</p>\n<pre><code>9.1 越狱iOS学习\n9.2 反编译\n9.3 代码混淆（iOS）\n</code></pre>\n<p>10、富文本</p>\n<pre><code>10.1 CoreText\n10.2 TextKit:NSAttributeString等\n10.3 WebKit\n</code></pre>\n<p>11、电子签名</p>\n<p>12、HTTP(S)、TCP、UDP(kcp)等 协议</p>\n<p>13、UPnP</p>\n<p>14、Frp</p>\n<p>15、WoL(远程唤醒)</p>\n<p>16、<del>（小明）域名认证</del></p>\n<p>17、<del>香港服务器</del></p>\n<p>18、多线程</p>\n<ul>\n<li><p><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i\">Threaded Programming</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16\">Run Loops</a></p>\n</li>\n</ul>\n<p>19、汇编</p>\n<p>20、C/C++</p>\n<pre><code>20.1 boost\n20.2 Qt\n20.3 Xcode\n20.4 Visual Studio\n</code></pre>\n<p>21、音视频播放器源码</p>\n<pre><code>21.1 FFmpeg\n21.2 IJKPlayer\n21.3 AliPlayer\n21.4 封装播放器\n    原生的【AVFoundation】\n    第三方 源码解读\n21.5 音频\n    语音识别——Sphinx\n    性能优化——编解码、压缩\n</code></pre>\n<ul>\n<li><a href=\"https://www.politepix.com/openears/tutorial/\">语音识别–openears</a></li>\n</ul>\n<p>22、OpenGL、OpenCV。。。</p>\n<p>23、Linux 使用及系统原理学习</p>\n<p>24、深度学习——TensorFlow</p>\n<p>25、数据结构及算法（安全）</p>\n<p>26、爬虫（Python）</p>\n<p>27、Go</p>\n<p>28、shell编程</p>\n<p>29、CI自动化集成</p>\n<pre><code>Jenkins\nXcodeSever\n</code></pre>\n<p>30、架构师资格证【考】</p>\n<p>31、英语——托福证【考】</p>\n<p>32、开发信息系统化整理——按专题</p>\n<pre><code>32.1 iOS\n32.2 web\n32.3 Java——服务器、Android......一本书\n32.4 Chrome 书签整理\n32.5 百度网盘整理\n</code></pre>\n<p>33、适配方案——iOS、web</p>\n<p>34、微信阅读</p>\n<pre><code>34.1 剑桥中国史\n\n34.2 摩根财团\n</code></pre>\n<p>35、思维管理——系统化思维</p>\n<pre><code>35.1 产品思维\n35.2 Boss思维\n35.3 网络思维\n35.n 思维[网络]联系所有物质\n</code></pre>\n<p>36、人脉资源管理</p>\n<pre><code>36.1 人情\n36.2 朋友\n36.3 敌人\n36.4 其他\n    熟人、陌生人、偶像、领导、同事、下属。。。。。。\n</code></pre>\n<p>37、生活</p>\n<pre><code>37.1 规律\n37.2 原则\n37.3 效率\n37.4 品质\n37.5 追求\n</code></pre>\n<p>38、简历特点</p>\n<pre><code>1、主导过用户量数十万级别《明星空间》项目，掌握项目架构，直播前沿技 术，精通客户端程序设计\n2、熟悉iOS内核运行机制\n3、熟悉OpenGL ES、FFmpeg、Cocos2D-x\n4、熟练使用Xcode 上的性能工具Instrument以及代码管理工具Git，SVN等 \n5、熟悉Socket 与 Web socket，熟悉UDP、TCP、IP、rtmp、HTTPS、HTTP、 xmpp协议等\n6、有带领团队和项目管理经验，也有项目架构设计和重构经验 \n7、熟悉编程语言:c/c++，objective-C，swift，PHP，Python，Java，H5 \n8、熟悉单元测试及代码性能优化 \n9、熟悉Java\n</code></pre>\n<h2 id=\"二、健身\"><a href=\"#二、健身\" class=\"headerlink\" title=\"二、健身\"></a>二、健身</h2><h2 id=\"三、知识体系\"><a href=\"#三、知识体系\" class=\"headerlink\" title=\"三、知识体系\"></a>三、知识体系</h2><p>1、操作系统原理</p>\n<p>2、程序设计——语言</p>\n<p>3、数据结构与算法</p>\n<p>4、网络及协议</p>\n<ul>\n<li><a href=\"https://github.com/Alamofire/Alamofire\">Alamofire/Alamofire</a></li>\n<li><a href=\"https://github.com/tristanhimmelman/AlamofireObjectMapper\">AlamofireObjectMapper</a></li>\n</ul>\n<p>5、硬件的使用及结构、原理</p>\n<pre><code>5.1 CPU\n5.2 GPU\n</code></pre>\n<p>6、服务化</p>\n<pre><code>Frp\nWordPress\nVPN\nGitlab\nWeb\n...\n</code></pre>\n<p>7、信息传输原理</p>\n<h2 id=\"四、目标\"><a href=\"#四、目标\" class=\"headerlink\" title=\"四、目标\"></a>四、目标</h2><p>1、做事</p>\n<p>2、赚钱</p>\n<p>3、学习</p>\n<p>4、不能虚度时光</p>\n<h2 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2><p>1、动画库：</p>\n<ul>\n<li><a href=\"https://github.com/facebook/pop\">facebook/pop</a></li>\n<li><a href=\"https://github.com/airbnb/lottie-ios\">airbnb/lottie-ios</a></li>\n</ul>\n<p>2、<a href=\"https://developer.apple.com/documentation\">iOS 官方文档：</a></p>\n"},{"title":"查漏补缺","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. Runloop\n\n### 1.1 [Runloop](https://blog.ibireme.com/2015/05/18/runloop/)\n\n### 1.2 [Runloop](https://v.youku.com/v_show/id_XODgxODkzODI0.html)\n\n## 2. Facebook\n\n### 2.1 [fooms](https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/)\n\n### 2.2 [FBMemoryProfiler](https://github.com/facebook/FBMemoryProfiler)\n\n## 3. [插件日志](https://github.com/meitu)\n\n## 4. [程序员网站](https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting)\n\n## 5. Runtime\n\n### 5.1 [Swift5.0 的 Runtime 机制浅析](https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension)\n\n### 5.2 [WWDC19 内参](https://juejin.im/post/5d1c11c9e51d45590a445b8e)\n\n### 5.3 [老司机 iOS 周报#75](https://juejin.im/post/5d2bf32f6fb9a07ee063476a)\n\n### 5.4 [Flutter-Go](https://juejin.im/post/5d215b8df265da1b7b31ac8f)\n\n## 6. Crash\n\n### 6.1 [KSCrash](https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md)\n\n### 6.2 [matrix](https://github.com/Tencent/matrix)\n\n## 7. [target](https://www.jianshu.com/p/18db54655246)\n\n## 8. [pod](https://www.jianshu.com/p/fb5083f2c0d2)\n","source":"_drafts/BlogsPlan/iOSShortSlab.md","raw":"---\ntitle: 查漏补缺\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. Runloop\n\n### 1.1 [Runloop](https://blog.ibireme.com/2015/05/18/runloop/)\n\n### 1.2 [Runloop](https://v.youku.com/v_show/id_XODgxODkzODI0.html)\n\n## 2. Facebook\n\n### 2.1 [fooms](https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/)\n\n### 2.2 [FBMemoryProfiler](https://github.com/facebook/FBMemoryProfiler)\n\n## 3. [插件日志](https://github.com/meitu)\n\n## 4. [程序员网站](https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting)\n\n## 5. Runtime\n\n### 5.1 [Swift5.0 的 Runtime 机制浅析](https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension)\n\n### 5.2 [WWDC19 内参](https://juejin.im/post/5d1c11c9e51d45590a445b8e)\n\n### 5.3 [老司机 iOS 周报#75](https://juejin.im/post/5d2bf32f6fb9a07ee063476a)\n\n### 5.4 [Flutter-Go](https://juejin.im/post/5d215b8df265da1b7b31ac8f)\n\n## 6. Crash\n\n### 6.1 [KSCrash](https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md)\n\n### 6.2 [matrix](https://github.com/Tencent/matrix)\n\n## 7. [target](https://www.jianshu.com/p/18db54655246)\n\n## 8. [pod](https://www.jianshu.com/p/fb5083f2c0d2)\n","slug":"BlogsPlan/iOSShortSlab","published":0,"updated":"2021-07-29T06:46:01.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzl000siu9k258u3nla","content":"<h2 id=\"1-Runloop\"><a href=\"#1-Runloop\" class=\"headerlink\" title=\"1. Runloop\"></a>1. Runloop</h2><h3 id=\"1-1-Runloop\"><a href=\"#1-1-Runloop\" class=\"headerlink\" title=\"1.1 Runloop\"></a>1.1 <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">Runloop</a></h3><h3 id=\"1-2-Runloop\"><a href=\"#1-2-Runloop\" class=\"headerlink\" title=\"1.2 Runloop\"></a>1.2 <a href=\"https://v.youku.com/v_show/id_XODgxODkzODI0.html\">Runloop</a></h3><h2 id=\"2-Facebook\"><a href=\"#2-Facebook\" class=\"headerlink\" title=\"2. Facebook\"></a>2. Facebook</h2><h3 id=\"2-1-fooms\"><a href=\"#2-1-fooms\" class=\"headerlink\" title=\"2.1 fooms\"></a>2.1 <a href=\"https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/\">fooms</a></h3><h3 id=\"2-2-FBMemoryProfiler\"><a href=\"#2-2-FBMemoryProfiler\" class=\"headerlink\" title=\"2.2 FBMemoryProfiler\"></a>2.2 <a href=\"https://github.com/facebook/FBMemoryProfiler\">FBMemoryProfiler</a></h3><h2 id=\"3-插件日志\"><a href=\"#3-插件日志\" class=\"headerlink\" title=\"3. 插件日志\"></a>3. <a href=\"https://github.com/meitu\">插件日志</a></h2><h2 id=\"4-程序员网站\"><a href=\"#4-程序员网站\" class=\"headerlink\" title=\"4. 程序员网站\"></a>4. <a href=\"https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting\">程序员网站</a></h2><h2 id=\"5-Runtime\"><a href=\"#5-Runtime\" class=\"headerlink\" title=\"5. Runtime\"></a>5. Runtime</h2><h3 id=\"5-1-Swift5-0-的-Runtime-机制浅析\"><a href=\"#5-1-Swift5-0-的-Runtime-机制浅析\" class=\"headerlink\" title=\"5.1 Swift5.0 的 Runtime 机制浅析\"></a>5.1 <a href=\"https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension\">Swift5.0 的 Runtime 机制浅析</a></h3><h3 id=\"5-2-WWDC19-内参\"><a href=\"#5-2-WWDC19-内参\" class=\"headerlink\" title=\"5.2 WWDC19 内参\"></a>5.2 <a href=\"https://juejin.im/post/5d1c11c9e51d45590a445b8e\">WWDC19 内参</a></h3><h3 id=\"5-3-老司机-iOS-周报-75\"><a href=\"#5-3-老司机-iOS-周报-75\" class=\"headerlink\" title=\"5.3 老司机 iOS 周报#75\"></a>5.3 <a href=\"https://juejin.im/post/5d2bf32f6fb9a07ee063476a\">老司机 iOS 周报#75</a></h3><h3 id=\"5-4-Flutter-Go\"><a href=\"#5-4-Flutter-Go\" class=\"headerlink\" title=\"5.4 Flutter-Go\"></a>5.4 <a href=\"https://juejin.im/post/5d215b8df265da1b7b31ac8f\">Flutter-Go</a></h3><h2 id=\"6-Crash\"><a href=\"#6-Crash\" class=\"headerlink\" title=\"6. Crash\"></a>6. Crash</h2><h3 id=\"6-1-KSCrash\"><a href=\"#6-1-KSCrash\" class=\"headerlink\" title=\"6.1 KSCrash\"></a>6.1 <a href=\"https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md\">KSCrash</a></h3><h3 id=\"6-2-matrix\"><a href=\"#6-2-matrix\" class=\"headerlink\" title=\"6.2 matrix\"></a>6.2 <a href=\"https://github.com/Tencent/matrix\">matrix</a></h3><h2 id=\"7-target\"><a href=\"#7-target\" class=\"headerlink\" title=\"7. target\"></a>7. <a href=\"https://www.jianshu.com/p/18db54655246\">target</a></h2><h2 id=\"8-pod\"><a href=\"#8-pod\" class=\"headerlink\" title=\"8. pod\"></a>8. <a href=\"https://www.jianshu.com/p/fb5083f2c0d2\">pod</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Runloop\"><a href=\"#1-Runloop\" class=\"headerlink\" title=\"1. Runloop\"></a>1. Runloop</h2><h3 id=\"1-1-Runloop\"><a href=\"#1-1-Runloop\" class=\"headerlink\" title=\"1.1 Runloop\"></a>1.1 <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">Runloop</a></h3><h3 id=\"1-2-Runloop\"><a href=\"#1-2-Runloop\" class=\"headerlink\" title=\"1.2 Runloop\"></a>1.2 <a href=\"https://v.youku.com/v_show/id_XODgxODkzODI0.html\">Runloop</a></h3><h2 id=\"2-Facebook\"><a href=\"#2-Facebook\" class=\"headerlink\" title=\"2. Facebook\"></a>2. Facebook</h2><h3 id=\"2-1-fooms\"><a href=\"#2-1-fooms\" class=\"headerlink\" title=\"2.1 fooms\"></a>2.1 <a href=\"https://code.fb.com/ios/reducing-fooms-in-the-facebook-ios-app/\">fooms</a></h3><h3 id=\"2-2-FBMemoryProfiler\"><a href=\"#2-2-FBMemoryProfiler\" class=\"headerlink\" title=\"2.2 FBMemoryProfiler\"></a>2.2 <a href=\"https://github.com/facebook/FBMemoryProfiler\">FBMemoryProfiler</a></h3><h2 id=\"3-插件日志\"><a href=\"#3-插件日志\" class=\"headerlink\" title=\"3. 插件日志\"></a>3. <a href=\"https://github.com/meitu\">插件日志</a></h2><h2 id=\"4-程序员网站\"><a href=\"#4-程序员网站\" class=\"headerlink\" title=\"4. 程序员网站\"></a>4. <a href=\"https://github.com/sdmg15/Best-websites-a-programmer-should-visit#bash-and-shell-scripting\">程序员网站</a></h2><h2 id=\"5-Runtime\"><a href=\"#5-Runtime\" class=\"headerlink\" title=\"5. Runtime\"></a>5. Runtime</h2><h3 id=\"5-1-Swift5-0-的-Runtime-机制浅析\"><a href=\"#5-1-Swift5-0-的-Runtime-机制浅析\" class=\"headerlink\" title=\"5.1 Swift5.0 的 Runtime 机制浅析\"></a>5.1 <a href=\"https://juejin.im/post/5d29fb63e51d4510aa01159d?utm_source=gold_browser_extension\">Swift5.0 的 Runtime 机制浅析</a></h3><h3 id=\"5-2-WWDC19-内参\"><a href=\"#5-2-WWDC19-内参\" class=\"headerlink\" title=\"5.2 WWDC19 内参\"></a>5.2 <a href=\"https://juejin.im/post/5d1c11c9e51d45590a445b8e\">WWDC19 内参</a></h3><h3 id=\"5-3-老司机-iOS-周报-75\"><a href=\"#5-3-老司机-iOS-周报-75\" class=\"headerlink\" title=\"5.3 老司机 iOS 周报#75\"></a>5.3 <a href=\"https://juejin.im/post/5d2bf32f6fb9a07ee063476a\">老司机 iOS 周报#75</a></h3><h3 id=\"5-4-Flutter-Go\"><a href=\"#5-4-Flutter-Go\" class=\"headerlink\" title=\"5.4 Flutter-Go\"></a>5.4 <a href=\"https://juejin.im/post/5d215b8df265da1b7b31ac8f\">Flutter-Go</a></h3><h2 id=\"6-Crash\"><a href=\"#6-Crash\" class=\"headerlink\" title=\"6. Crash\"></a>6. Crash</h2><h3 id=\"6-1-KSCrash\"><a href=\"#6-1-KSCrash\" class=\"headerlink\" title=\"6.1 KSCrash\"></a>6.1 <a href=\"https://github.com/kstenerud/KSCrash/blob/master/CODE_TOUR.md\">KSCrash</a></h3><h3 id=\"6-2-matrix\"><a href=\"#6-2-matrix\" class=\"headerlink\" title=\"6.2 matrix\"></a>6.2 <a href=\"https://github.com/Tencent/matrix\">matrix</a></h3><h2 id=\"7-target\"><a href=\"#7-target\" class=\"headerlink\" title=\"7. target\"></a>7. <a href=\"https://www.jianshu.com/p/18db54655246\">target</a></h2><h2 id=\"8-pod\"><a href=\"#8-pod\" class=\"headerlink\" title=\"8. pod\"></a>8. <a href=\"https://www.jianshu.com/p/fb5083f2c0d2\">pod</a></h2>"},{"title":"CSS 上手","abbrlink":"db0efd79","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1 display\n\n## 2 布局方式\n\n### 2.1 正常布局流\n\n概念：块元素、行内（内联）元素、外边距叠加\n\n默认的，一个块级元素的内容宽度是其父元素的100%，其高度与其内容高度一致。行内元素的height width与内容一致。你无法设置行内元素的height width --- 它们就那样置于块级元素的内容里。 如果你想控制行内元素的尺寸，你需要为元素设置display: block; （或者，display: inline-block; inline-block 混合了inline 和 block的特性。)\n\n默认的，块级元素按照基于其父元素的书写顺序(默认值: horizontal-tb)的块流动方向(block flow direction)放置 --- 每个块级元素会在上一个元素下面另起一行，它们会被设置好的margin 分隔。\n\nFloat\nFlexBox\nGrid\nPosition\n多列布局\n表格布局\n\n## ","source":"_posts/Web/CSS/CSSGuidance.md","raw":"---\ntitle: CSS 上手\nabbrlink: db0efd79\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1 display\n\n## 2 布局方式\n\n### 2.1 正常布局流\n\n概念：块元素、行内（内联）元素、外边距叠加\n\n默认的，一个块级元素的内容宽度是其父元素的100%，其高度与其内容高度一致。行内元素的height width与内容一致。你无法设置行内元素的height width --- 它们就那样置于块级元素的内容里。 如果你想控制行内元素的尺寸，你需要为元素设置display: block; （或者，display: inline-block; inline-block 混合了inline 和 block的特性。)\n\n默认的，块级元素按照基于其父元素的书写顺序(默认值: horizontal-tb)的块流动方向(block flow direction)放置 --- 每个块级元素会在上一个元素下面另起一行，它们会被设置好的margin 分隔。\n\nFloat\nFlexBox\nGrid\nPosition\n多列布局\n表格布局\n\n## ","slug":"Web/CSS/CSSGuidance","published":1,"updated":"2021-07-29T06:46:00.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzq000tiu9k6qvv8viy","content":"<h2 id=\"1-display\"><a href=\"#1-display\" class=\"headerlink\" title=\"1 display\"></a>1 display</h2><h2 id=\"2-布局方式\"><a href=\"#2-布局方式\" class=\"headerlink\" title=\"2 布局方式\"></a>2 布局方式</h2><h3 id=\"2-1-正常布局流\"><a href=\"#2-1-正常布局流\" class=\"headerlink\" title=\"2.1 正常布局流\"></a>2.1 正常布局流</h3><p>概念：块元素、行内（内联）元素、外边距叠加</p>\n<p>默认的，一个块级元素的内容宽度是其父元素的100%，其高度与其内容高度一致。行内元素的height width与内容一致。你无法设置行内元素的height width — 它们就那样置于块级元素的内容里。 如果你想控制行内元素的尺寸，你需要为元素设置display: block; （或者，display: inline-block; inline-block 混合了inline 和 block的特性。)</p>\n<p>默认的，块级元素按照基于其父元素的书写顺序(默认值: horizontal-tb)的块流动方向(block flow direction)放置 — 每个块级元素会在上一个元素下面另起一行，它们会被设置好的margin 分隔。</p>\n<p>Float<br>FlexBox<br>Grid<br>Position<br>多列布局<br>表格布局</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-display\"><a href=\"#1-display\" class=\"headerlink\" title=\"1 display\"></a>1 display</h2><h2 id=\"2-布局方式\"><a href=\"#2-布局方式\" class=\"headerlink\" title=\"2 布局方式\"></a>2 布局方式</h2><h3 id=\"2-1-正常布局流\"><a href=\"#2-1-正常布局流\" class=\"headerlink\" title=\"2.1 正常布局流\"></a>2.1 正常布局流</h3><p>概念：块元素、行内（内联）元素、外边距叠加</p>\n<p>默认的，一个块级元素的内容宽度是其父元素的100%，其高度与其内容高度一致。行内元素的height width与内容一致。你无法设置行内元素的height width — 它们就那样置于块级元素的内容里。 如果你想控制行内元素的尺寸，你需要为元素设置display: block; （或者，display: inline-block; inline-block 混合了inline 和 block的特性。)</p>\n<p>默认的，块级元素按照基于其父元素的书写顺序(默认值: horizontal-tb)的块流动方向(block flow direction)放置 — 每个块级元素会在上一个元素下面另起一行，它们会被设置好的margin 分隔。</p>\n<p>Float<br>FlexBox<br>Grid<br>Position<br>多列布局<br>表格布局</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>"},{"title":"Flutter 技术可行性调研","abbrlink":"5cb0cccf","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1、项目构建\n\n### 1.1 [环境配置](https://flutter-io.cn/docs/get-started/install)\n\n#### 1. 编辑器\n\n  1. Android Studio[Intelij]\n  2. Visual Studio Code\n\n#### 2. SDK\n\n1. Dart\n2. Flutter\n\n### 1.2 创建并运行项目\n\n#### 1. 终端\n\n```shell\n  flutter create my_app\n  cd my_app\n  flutter run\n```\n\n#### 2. Android Studio\n\n#### 3. Visual Studio Code\n\n## 2、项目工程结构\n\n### 2.1 项目文件组织结构\n\n![项目工程结构](./Resources/Projects.png)\n\n### 2.2 源码文件组织、使用\n\n1 项目库管理、第三方库\n\n```yml\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter_localizations:\n    sdk: flutter\n\n  cupertino_icons: ^0.1.2\n  english_words: ^3.1.0\n  video_player: ^0.10.1+6\n  dio: ^2.1.16\n  path_provider: ^1.1.0\n  image_picker: ^0.6.1+4\n  webview_flutter: ^0.3.13\n  intl: ^0.15.8\n  url_launcher: ^5.1.2\n  package_info: ^0.4.0+6\n  fluwx: ^1.0.4\n  json_annotation: ^3.0.0\n  device_info: ^0.4.0+2\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  intl_translation: ^0.17.2\n  json_serializable: ^3.2.2\n  build_runner: ^1.6.7\n```\n\n2 核心库、源码文件\n\n```dart\nimport 'dart:io';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:image_picker/image_picker.dart';\n\nimport '../Profile/Models/ProfileInfo.dart';\n```\n\n3 功能模块、组件功能划分，独立管理，以及自定义组件化工作管理\n\n![文件目录](./Resources/files-module.png)\n\n### 2.3、资源文件\n\n#### 1 引用\n\n```yaml\nflutter:\n  assets:\n    - assets/my_icon.png\n    - assets/background.png\n```\n\n#### 2 加载\n\n##### 2.1. Bundel\n\n```dart\nAssetBundle;\nrootBundle;\nDefaultAssetBundle;\n资源变体：根据分辨率加载图片等资源；\nAssetImage;\n```\n\n##### 2. 依赖包中的资源\n\n```dart\nAssetImage('icons/heart.png', package: 'my_icons')\n```\n\n#### 3 打包资源进asset\n\n```yaml\nflutter:\n  assets:\n    - packages/fancy_backgrounds/backgrounds/background1.png\n```\n\n#### 4 资源平台共享\n\n* Android\n\n```Java\nAssetManager assetManager = registrar.context().getAssets();\nString key = registrar.lookupKeyForAsset(\"icons/heart.png\");\nAssetFileDescriptor fd = assetManager.openFd(key);\n```\n\n* iOS\n\n```Objective-C\nNSString* key = [registrar lookupKeyForAsset:@\"icons/heart.png\"];\nNSString* path = [[NSBundle mainBundle] pathForResource:key ofType:nil];\n   ```\n\n#### 5 平台资源\n\n>Android 与 iOS 的icon 、启动图配置；\n\n### 2.4、项目源码简单解析\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter SuMian',\n      onGenerateTitle: (BuildContext context) =>\n          RyLocalizations.of(context).title,\n      home: RyTabBar(),\n      theme: ThemeData(\n        primaryColor: Colors.white,\n      ),\n      debugShowCheckedModeBanner: false,\n      showSemanticsDebugger: false,\n      localizationsDelegates: [\n        const RyLocalizationsDelegate(),\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        GlobalCupertinoLocalizations.delegate,\n      ],\n      supportedLocales: [\n        const Locale('en'),\n        const Locale('zh'),\n      ],\n    );\n  }\n}\n```\n\n## 3、界面\n\n### 3.1 [布局介绍](https://flutter-io.cn/docs/development/ui/widgets/layout)\n\n```dart\nWidget listHead() {\n    _avatarImg = Image.network(\n      ProfileInfo.getInstance().avatar,\n      fit: BoxFit.cover,\n    );\n\n    Container avatar = Container(\n      margin: const EdgeInsets.fromLTRB(15, 10, 10, 10),\n      child: Container(\n        width: 60,\n        height: 60,\n        decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(30),\n          boxShadow: [\n            BoxShadow(\n                color: Colors.black,\n                offset: Offset(0, 0),\n                blurRadius: 1,\n                spreadRadius: 2)\n          ],\n          image: DecorationImage(\n            image: NetworkImage(ProfileInfo.getInstance().avatar),\n            fit: BoxFit.cover,\n          ),\n        ),\n      ),\n    );\n\n    Container nameTxt = Container(\n      margin: EdgeInsets.fromLTRB(5, 0, 0, 5),\n      child: Text(ProfileInfo.getInstance().mobile),\n    );\n    Container department = Container(\n      margin: EdgeInsets.fromLTRB(5, 5, 0, 0),\n      child: Text(ProfileInfo.getInstance().department),\n    );\n    Container txtView = Container(\n      margin: EdgeInsets.fromLTRB(10, 25, 0, 25),\n      child: Column(\n        children: <Widget>[nameTxt, department],\n        crossAxisAlignment: CrossAxisAlignment.start,\n      ),\n    );\n    return Row(\n      children: <Widget>[\n        avatar,\n        Expanded(\n          child: txtView,\n        )\n      ],\n    );\n  }\n```\n\n### 3.2 交互事件\n\n1 Button 事件点击\n\n```dart\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(color: Colors.grey[200]),\n        padding: EdgeInsets.all(0),\n        child: Container(\n          color: Colors.white,\n          child: Center(child: OutlineButton(child: Text('个人信息'),onPressed: getProfile,),),\n        ), \n     ),\n    );\n  }\n```\n\n2 下拉刷新、上拉加载\n\n```dart\nWidget setPannel() {\n    return RefreshIndicator(\n      child: ListView.builder(\n        itemBuilder: _renderRow,\n        itemCount: list.length + 1,\n        controller: _scrollController,\n      ),\n      onRefresh: _onRefresh,\n    );\n  }\n```\n\n## 4、业务\n\n### 4.1 网络模块\n\n```dart\nclass NetworkTools {\n  static Future get(String url, [Map<String, dynamic> params]) async {\n    var response;\n    Directory documentsDir = await getApplicationDocumentsDirectory();\n    String documentsPath = documentsDir.path;\n    var dir = new Directory(\"$documentsPath/cookies\");\n    await dir.create();\n    dio.interceptors.add(CookieManager(PersistCookieJar(dir: dir.path)));\n    dio.interceptors.add(TokenInterceptor());\n    if (params != null) {\n      response = await dio.get(url, queryParameters: params);\n    } else {\n      response = await dio.get(url);\n    }\n    return response.data;\n  }\n\n  static Future post(String url, Map<String, dynamic> params) async {\n    var response = await dio.post(url, data: params);\n    return response.data;\n  }\n\n  static Future delete(String url, Map<String, dynamic> params) async {\n    dio.interceptors.add(TokenInterceptor());\n    var response = await dio.delete(url, data: params);\n    return response.statusCode;\n  }\n}\n```\n\n### 4.2 数据\n\n1 序列化\n\n```dart\n\nclass Token {\n  String token;\n\n  int expired;\n\n  int refreshTime;\n\n  Token({this.token,this.expired,this.refreshTime}){_instance = this;}\n\n  Token._();\n\n  static Token _instance;\n\n  static Token getInstance() {\n    if (_instance == null) {\n      _instance = Token._();\n    }\n    return _instance;\n  }\n\n  factory Token.fromJson(Map<String, dynamic> json){\n    return Token(\n      token: json['token'],\n      expired: json['expired_at'],\n      refreshTime: json['refresh_expired_at']\n    );\n  }\n}\n\nMap<String, dynamic> toJson() =>\n    {\n      'token': token,\n      'expired_at': expired,\n      'refresh_expired_at':refreshTime\n    };\n```\n\n2 自动序列化\n\n配置：\n\n```yaml\ndependencies:\n  # Your other regular dependencies here\n  json_annotation: ^2.0.0\n\ndev_dependencies:\n  # Your other dev_dependencies here\n  build_runner: ^1.0.0\n  json_serializable: ^2.0.0\n```\n\n代码：\n\n```dart\nimport 'package:json_annotation/json_annotation.dart';\n\npart 'RelaxtionsLog.g.dart';\n\n@JsonSerializable()\nclass RelaxtionsLog {\n  int id;\n\n  @JsonKey(name: 'watch_times')\n  int times;\n\n  @JsonKey(name: 'total_watch_length')\n  int length;\n\n  String name;\n\n  RelaxtionsLog({\n    this.id,\n    this.times,\n    this.length,\n    this.name\n  });\n\n  factory RelaxtionsLog.fromJson(Map<String,dynamic> json) => _$RelaxtionsLogFromJson(json);\n\n  Map<String,dynamic> toJson() => _$RelaxtionsLogToJson(this);\n\n}\n```\n\n3 持久化：数据库、归档、UserDefault等\n\n1. [FireBase](https://pub.dev/packages/firebase_database#-readme-tab-)\n2. [sqflite](https://pub.dev/packages/sqflite)\n3. SharedPreferences => UserDefault\n\n## 5、包[组件化]\n\n### 5.1 创建Dart package库\n\n```shell\n flutter create --org com.example --template=plugin hello --创建项目\n flutter pub pub publish --dry-run  --检查配置\n flutter pub pub publish   --发布package\n```\n\n### 5.2 提交package\n\n```shell\nflutter pub pub publish --dry-run\nflutter pub pub publish\n```\n\n* package 依赖\n\n```yaml\ndependencies:\n  url_launcher: ^0.4.2\n```\n\n* 原生平台依赖\n\n```ruby\nPod::Spec.new do |s|\n  # lines skipped\n  s.dependency 'url_launcher'\n```\n\n* [自建私有 package 仓库](./Resources/)\n\n## 6、平台通道\n\n### 6.1 简单通道\n\n1. 获取相册图片\n\n```swift\nlet controller:FlutterViewController = window?.rootViewController as! FlutterViewController\nlet batteryChannel =  FlutterMethodChannel(name: RyImagePicker.channel, binaryMessenger: controller.binaryMessenger)\nbatteryChannel.setMethodCallHandler { (call, result) in\n    if call.method == \"pickerImage\" {\n        RyImagePicker(controller).showImagePicker { (image) in\n            result(image)\n        }\n    } else {\n        result(FlutterMethodNotImplemented);\n    }\n}\n```\n\n### 6.2 Flutter编解码器\n\n1 Flutter定义了三种不同类型的Channel，它们分别是：\n\n* BasicMessageChannel：用于传递字符串和半结构化的信息。\n* BMethodChannel：用于传递方法调用（method invocation）。\n* BEventChannel: 用于数据流（event streams）的通信。\n\n三种Channel之间互相独立，各有用途，但它们在设计上却非常相近。每种Channel均有三个重要成员变量：\n\n* name: String类型，代表Channel的名字，也是其唯一标识符。\n* messager：BinaryMessenger类型，代表消息信使，是消息的发送与接收的工具。\n* codec: MessageCodec类型或MethodCodec类型，代表消息的编解码器。\n\n消息通道结构图6-2-1：\n![消息通道结构图](./Resources/BinaryMessenger.jpg)\n\n编解码器结构图6-2-2:\n![编解码器结构图](./Resources/Codec.jpg)\n\n2 消息解码\n\n支持的平台数据类型参考：```StandardMessageCodec```\n![消息解码器](./Resources/type.jpg)\n\n3.1 消息传递：Dart -> Native\n\n![消息传递](./Resources/message-dart-native.jpg)\n\n3.2 消息传递：Native -> Dart\n\n![消息传递](./Resources/message-native-dart.jpg)\n","source":"_posts/Flutters/TechnologyFeasibility/TechnologyFeasibility.md","raw":"---\ntitle: Flutter 技术可行性调研\nabbrlink: 5cb0cccf\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1、项目构建\n\n### 1.1 [环境配置](https://flutter-io.cn/docs/get-started/install)\n\n#### 1. 编辑器\n\n  1. Android Studio[Intelij]\n  2. Visual Studio Code\n\n#### 2. SDK\n\n1. Dart\n2. Flutter\n\n### 1.2 创建并运行项目\n\n#### 1. 终端\n\n```shell\n  flutter create my_app\n  cd my_app\n  flutter run\n```\n\n#### 2. Android Studio\n\n#### 3. Visual Studio Code\n\n## 2、项目工程结构\n\n### 2.1 项目文件组织结构\n\n![项目工程结构](./Resources/Projects.png)\n\n### 2.2 源码文件组织、使用\n\n1 项目库管理、第三方库\n\n```yml\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter_localizations:\n    sdk: flutter\n\n  cupertino_icons: ^0.1.2\n  english_words: ^3.1.0\n  video_player: ^0.10.1+6\n  dio: ^2.1.16\n  path_provider: ^1.1.0\n  image_picker: ^0.6.1+4\n  webview_flutter: ^0.3.13\n  intl: ^0.15.8\n  url_launcher: ^5.1.2\n  package_info: ^0.4.0+6\n  fluwx: ^1.0.4\n  json_annotation: ^3.0.0\n  device_info: ^0.4.0+2\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  intl_translation: ^0.17.2\n  json_serializable: ^3.2.2\n  build_runner: ^1.6.7\n```\n\n2 核心库、源码文件\n\n```dart\nimport 'dart:io';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:image_picker/image_picker.dart';\n\nimport '../Profile/Models/ProfileInfo.dart';\n```\n\n3 功能模块、组件功能划分，独立管理，以及自定义组件化工作管理\n\n![文件目录](./Resources/files-module.png)\n\n### 2.3、资源文件\n\n#### 1 引用\n\n```yaml\nflutter:\n  assets:\n    - assets/my_icon.png\n    - assets/background.png\n```\n\n#### 2 加载\n\n##### 2.1. Bundel\n\n```dart\nAssetBundle;\nrootBundle;\nDefaultAssetBundle;\n资源变体：根据分辨率加载图片等资源；\nAssetImage;\n```\n\n##### 2. 依赖包中的资源\n\n```dart\nAssetImage('icons/heart.png', package: 'my_icons')\n```\n\n#### 3 打包资源进asset\n\n```yaml\nflutter:\n  assets:\n    - packages/fancy_backgrounds/backgrounds/background1.png\n```\n\n#### 4 资源平台共享\n\n* Android\n\n```Java\nAssetManager assetManager = registrar.context().getAssets();\nString key = registrar.lookupKeyForAsset(\"icons/heart.png\");\nAssetFileDescriptor fd = assetManager.openFd(key);\n```\n\n* iOS\n\n```Objective-C\nNSString* key = [registrar lookupKeyForAsset:@\"icons/heart.png\"];\nNSString* path = [[NSBundle mainBundle] pathForResource:key ofType:nil];\n   ```\n\n#### 5 平台资源\n\n>Android 与 iOS 的icon 、启动图配置；\n\n### 2.4、项目源码简单解析\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter SuMian',\n      onGenerateTitle: (BuildContext context) =>\n          RyLocalizations.of(context).title,\n      home: RyTabBar(),\n      theme: ThemeData(\n        primaryColor: Colors.white,\n      ),\n      debugShowCheckedModeBanner: false,\n      showSemanticsDebugger: false,\n      localizationsDelegates: [\n        const RyLocalizationsDelegate(),\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        GlobalCupertinoLocalizations.delegate,\n      ],\n      supportedLocales: [\n        const Locale('en'),\n        const Locale('zh'),\n      ],\n    );\n  }\n}\n```\n\n## 3、界面\n\n### 3.1 [布局介绍](https://flutter-io.cn/docs/development/ui/widgets/layout)\n\n```dart\nWidget listHead() {\n    _avatarImg = Image.network(\n      ProfileInfo.getInstance().avatar,\n      fit: BoxFit.cover,\n    );\n\n    Container avatar = Container(\n      margin: const EdgeInsets.fromLTRB(15, 10, 10, 10),\n      child: Container(\n        width: 60,\n        height: 60,\n        decoration: BoxDecoration(\n          borderRadius: BorderRadius.circular(30),\n          boxShadow: [\n            BoxShadow(\n                color: Colors.black,\n                offset: Offset(0, 0),\n                blurRadius: 1,\n                spreadRadius: 2)\n          ],\n          image: DecorationImage(\n            image: NetworkImage(ProfileInfo.getInstance().avatar),\n            fit: BoxFit.cover,\n          ),\n        ),\n      ),\n    );\n\n    Container nameTxt = Container(\n      margin: EdgeInsets.fromLTRB(5, 0, 0, 5),\n      child: Text(ProfileInfo.getInstance().mobile),\n    );\n    Container department = Container(\n      margin: EdgeInsets.fromLTRB(5, 5, 0, 0),\n      child: Text(ProfileInfo.getInstance().department),\n    );\n    Container txtView = Container(\n      margin: EdgeInsets.fromLTRB(10, 25, 0, 25),\n      child: Column(\n        children: <Widget>[nameTxt, department],\n        crossAxisAlignment: CrossAxisAlignment.start,\n      ),\n    );\n    return Row(\n      children: <Widget>[\n        avatar,\n        Expanded(\n          child: txtView,\n        )\n      ],\n    );\n  }\n```\n\n### 3.2 交互事件\n\n1 Button 事件点击\n\n```dart\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        decoration: BoxDecoration(color: Colors.grey[200]),\n        padding: EdgeInsets.all(0),\n        child: Container(\n          color: Colors.white,\n          child: Center(child: OutlineButton(child: Text('个人信息'),onPressed: getProfile,),),\n        ), \n     ),\n    );\n  }\n```\n\n2 下拉刷新、上拉加载\n\n```dart\nWidget setPannel() {\n    return RefreshIndicator(\n      child: ListView.builder(\n        itemBuilder: _renderRow,\n        itemCount: list.length + 1,\n        controller: _scrollController,\n      ),\n      onRefresh: _onRefresh,\n    );\n  }\n```\n\n## 4、业务\n\n### 4.1 网络模块\n\n```dart\nclass NetworkTools {\n  static Future get(String url, [Map<String, dynamic> params]) async {\n    var response;\n    Directory documentsDir = await getApplicationDocumentsDirectory();\n    String documentsPath = documentsDir.path;\n    var dir = new Directory(\"$documentsPath/cookies\");\n    await dir.create();\n    dio.interceptors.add(CookieManager(PersistCookieJar(dir: dir.path)));\n    dio.interceptors.add(TokenInterceptor());\n    if (params != null) {\n      response = await dio.get(url, queryParameters: params);\n    } else {\n      response = await dio.get(url);\n    }\n    return response.data;\n  }\n\n  static Future post(String url, Map<String, dynamic> params) async {\n    var response = await dio.post(url, data: params);\n    return response.data;\n  }\n\n  static Future delete(String url, Map<String, dynamic> params) async {\n    dio.interceptors.add(TokenInterceptor());\n    var response = await dio.delete(url, data: params);\n    return response.statusCode;\n  }\n}\n```\n\n### 4.2 数据\n\n1 序列化\n\n```dart\n\nclass Token {\n  String token;\n\n  int expired;\n\n  int refreshTime;\n\n  Token({this.token,this.expired,this.refreshTime}){_instance = this;}\n\n  Token._();\n\n  static Token _instance;\n\n  static Token getInstance() {\n    if (_instance == null) {\n      _instance = Token._();\n    }\n    return _instance;\n  }\n\n  factory Token.fromJson(Map<String, dynamic> json){\n    return Token(\n      token: json['token'],\n      expired: json['expired_at'],\n      refreshTime: json['refresh_expired_at']\n    );\n  }\n}\n\nMap<String, dynamic> toJson() =>\n    {\n      'token': token,\n      'expired_at': expired,\n      'refresh_expired_at':refreshTime\n    };\n```\n\n2 自动序列化\n\n配置：\n\n```yaml\ndependencies:\n  # Your other regular dependencies here\n  json_annotation: ^2.0.0\n\ndev_dependencies:\n  # Your other dev_dependencies here\n  build_runner: ^1.0.0\n  json_serializable: ^2.0.0\n```\n\n代码：\n\n```dart\nimport 'package:json_annotation/json_annotation.dart';\n\npart 'RelaxtionsLog.g.dart';\n\n@JsonSerializable()\nclass RelaxtionsLog {\n  int id;\n\n  @JsonKey(name: 'watch_times')\n  int times;\n\n  @JsonKey(name: 'total_watch_length')\n  int length;\n\n  String name;\n\n  RelaxtionsLog({\n    this.id,\n    this.times,\n    this.length,\n    this.name\n  });\n\n  factory RelaxtionsLog.fromJson(Map<String,dynamic> json) => _$RelaxtionsLogFromJson(json);\n\n  Map<String,dynamic> toJson() => _$RelaxtionsLogToJson(this);\n\n}\n```\n\n3 持久化：数据库、归档、UserDefault等\n\n1. [FireBase](https://pub.dev/packages/firebase_database#-readme-tab-)\n2. [sqflite](https://pub.dev/packages/sqflite)\n3. SharedPreferences => UserDefault\n\n## 5、包[组件化]\n\n### 5.1 创建Dart package库\n\n```shell\n flutter create --org com.example --template=plugin hello --创建项目\n flutter pub pub publish --dry-run  --检查配置\n flutter pub pub publish   --发布package\n```\n\n### 5.2 提交package\n\n```shell\nflutter pub pub publish --dry-run\nflutter pub pub publish\n```\n\n* package 依赖\n\n```yaml\ndependencies:\n  url_launcher: ^0.4.2\n```\n\n* 原生平台依赖\n\n```ruby\nPod::Spec.new do |s|\n  # lines skipped\n  s.dependency 'url_launcher'\n```\n\n* [自建私有 package 仓库](./Resources/)\n\n## 6、平台通道\n\n### 6.1 简单通道\n\n1. 获取相册图片\n\n```swift\nlet controller:FlutterViewController = window?.rootViewController as! FlutterViewController\nlet batteryChannel =  FlutterMethodChannel(name: RyImagePicker.channel, binaryMessenger: controller.binaryMessenger)\nbatteryChannel.setMethodCallHandler { (call, result) in\n    if call.method == \"pickerImage\" {\n        RyImagePicker(controller).showImagePicker { (image) in\n            result(image)\n        }\n    } else {\n        result(FlutterMethodNotImplemented);\n    }\n}\n```\n\n### 6.2 Flutter编解码器\n\n1 Flutter定义了三种不同类型的Channel，它们分别是：\n\n* BasicMessageChannel：用于传递字符串和半结构化的信息。\n* BMethodChannel：用于传递方法调用（method invocation）。\n* BEventChannel: 用于数据流（event streams）的通信。\n\n三种Channel之间互相独立，各有用途，但它们在设计上却非常相近。每种Channel均有三个重要成员变量：\n\n* name: String类型，代表Channel的名字，也是其唯一标识符。\n* messager：BinaryMessenger类型，代表消息信使，是消息的发送与接收的工具。\n* codec: MessageCodec类型或MethodCodec类型，代表消息的编解码器。\n\n消息通道结构图6-2-1：\n![消息通道结构图](./Resources/BinaryMessenger.jpg)\n\n编解码器结构图6-2-2:\n![编解码器结构图](./Resources/Codec.jpg)\n\n2 消息解码\n\n支持的平台数据类型参考：```StandardMessageCodec```\n![消息解码器](./Resources/type.jpg)\n\n3.1 消息传递：Dart -> Native\n\n![消息传递](./Resources/message-dart-native.jpg)\n\n3.2 消息传递：Native -> Dart\n\n![消息传递](./Resources/message-native-dart.jpg)\n","slug":"Flutters/TechnologyFeasibility/TechnologyFeasibility","published":1,"updated":"2021-07-29T06:46:00.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzr000uiu9k8k5n5yp6","content":"<h2 id=\"1、项目构建\"><a href=\"#1、项目构建\" class=\"headerlink\" title=\"1、项目构建\"></a>1、项目构建</h2><h3 id=\"1-1-环境配置\"><a href=\"#1-1-环境配置\" class=\"headerlink\" title=\"1.1 环境配置\"></a>1.1 <a href=\"https://flutter-io.cn/docs/get-started/install\">环境配置</a></h3><h4 id=\"1-编辑器\"><a href=\"#1-编辑器\" class=\"headerlink\" title=\"1. 编辑器\"></a>1. 编辑器</h4><ol>\n<li>Android Studio[Intelij]</li>\n<li>Visual Studio Code</li>\n</ol>\n<h4 id=\"2-SDK\"><a href=\"#2-SDK\" class=\"headerlink\" title=\"2. SDK\"></a>2. SDK</h4><ol>\n<li>Dart</li>\n<li>Flutter</li>\n</ol>\n<h3 id=\"1-2-创建并运行项目\"><a href=\"#1-2-创建并运行项目\" class=\"headerlink\" title=\"1.2 创建并运行项目\"></a>1.2 创建并运行项目</h3><h4 id=\"1-终端\"><a href=\"#1-终端\" class=\"headerlink\" title=\"1. 终端\"></a>1. 终端</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create my_app</span><br><span class=\"line\">cd my_app</span><br><span class=\"line\">flutter run</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Android-Studio\"><a href=\"#2-Android-Studio\" class=\"headerlink\" title=\"2. Android Studio\"></a>2. Android Studio</h4><h4 id=\"3-Visual-Studio-Code\"><a href=\"#3-Visual-Studio-Code\" class=\"headerlink\" title=\"3. Visual Studio Code\"></a>3. Visual Studio Code</h4><h2 id=\"2、项目工程结构\"><a href=\"#2、项目工程结构\" class=\"headerlink\" title=\"2、项目工程结构\"></a>2、项目工程结构</h2><h3 id=\"2-1-项目文件组织结构\"><a href=\"#2-1-项目文件组织结构\" class=\"headerlink\" title=\"2.1 项目文件组织结构\"></a>2.1 项目文件组织结构</h3><p><img src=\"/./Resources/Projects.png\" alt=\"项目工程结构\"></p>\n<h3 id=\"2-2-源码文件组织、使用\"><a href=\"#2-2-源码文件组织、使用\" class=\"headerlink\" title=\"2.2 源码文件组织、使用\"></a>2.2 源码文件组织、使用</h3><p>1 项目库管理、第三方库</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dependencies:</span></span><br><span class=\"line\">  <span class=\"attr\">flutter:</span></span><br><span class=\"line\">    <span class=\"attr\">sdk:</span> <span class=\"string\">flutter</span></span><br><span class=\"line\">  <span class=\"attr\">flutter_localizations:</span></span><br><span class=\"line\">    <span class=\"attr\">sdk:</span> <span class=\"string\">flutter</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">cupertino_icons:</span> <span class=\"string\">^0.1.2</span></span><br><span class=\"line\">  <span class=\"attr\">english_words:</span> <span class=\"string\">^3.1.0</span></span><br><span class=\"line\">  <span class=\"attr\">video_player:</span> <span class=\"string\">^0.10.1+6</span></span><br><span class=\"line\">  <span class=\"attr\">dio:</span> <span class=\"string\">^2.1.16</span></span><br><span class=\"line\">  <span class=\"attr\">path_provider:</span> <span class=\"string\">^1.1.0</span></span><br><span class=\"line\">  <span class=\"attr\">image_picker:</span> <span class=\"string\">^0.6.1+4</span></span><br><span class=\"line\">  <span class=\"attr\">webview_flutter:</span> <span class=\"string\">^0.3.13</span></span><br><span class=\"line\">  <span class=\"attr\">intl:</span> <span class=\"string\">^0.15.8</span></span><br><span class=\"line\">  <span class=\"attr\">url_launcher:</span> <span class=\"string\">^5.1.2</span></span><br><span class=\"line\">  <span class=\"attr\">package_info:</span> <span class=\"string\">^0.4.0+6</span></span><br><span class=\"line\">  <span class=\"attr\">fluwx:</span> <span class=\"string\">^1.0.4</span></span><br><span class=\"line\">  <span class=\"attr\">json_annotation:</span> <span class=\"string\">^3.0.0</span></span><br><span class=\"line\">  <span class=\"attr\">device_info:</span> <span class=\"string\">^0.4.0+2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dev_dependencies:</span></span><br><span class=\"line\">  <span class=\"attr\">flutter_test:</span></span><br><span class=\"line\">    <span class=\"attr\">sdk:</span> <span class=\"string\">flutter</span></span><br><span class=\"line\">  <span class=\"attr\">intl_translation:</span> <span class=\"string\">^0.17.2</span></span><br><span class=\"line\">  <span class=\"attr\">json_serializable:</span> <span class=\"string\">^3.2.2</span></span><br><span class=\"line\">  <span class=\"attr\">build_runner:</span> <span class=\"string\">^1.6.7</span></span><br></pre></td></tr></table></figure>\n\n<p>2 核心库、源码文件</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:io&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:image_picker/image_picker.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;../Profile/Models/ProfileInfo.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>3 功能模块、组件功能划分，独立管理，以及自定义组件化工作管理</p>\n<p><img src=\"/./Resources/files-module.png\" alt=\"文件目录\"></p>\n<h3 id=\"2-3、资源文件\"><a href=\"#2-3、资源文件\" class=\"headerlink\" title=\"2.3、资源文件\"></a>2.3、资源文件</h3><h4 id=\"1-引用\"><a href=\"#1-引用\" class=\"headerlink\" title=\"1 引用\"></a>1 引用</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">flutter:</span></span><br><span class=\"line\">  <span class=\"attr\">assets:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">assets/my_icon.png</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">assets/background.png</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-加载\"><a href=\"#2-加载\" class=\"headerlink\" title=\"2 加载\"></a>2 加载</h4><h5 id=\"2-1-Bundel\"><a href=\"#2-1-Bundel\" class=\"headerlink\" title=\"2.1. Bundel\"></a>2.1. Bundel</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AssetBundle;</span><br><span class=\"line\">rootBundle;</span><br><span class=\"line\">DefaultAssetBundle;</span><br><span class=\"line\">资源变体：根据分辨率加载图片等资源；</span><br><span class=\"line\">AssetImage;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-依赖包中的资源\"><a href=\"#2-依赖包中的资源\" class=\"headerlink\" title=\"2. 依赖包中的资源\"></a>2. 依赖包中的资源</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AssetImage(<span class=\"string\">&#x27;icons/heart.png&#x27;</span>, package: <span class=\"string\">&#x27;my_icons&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-打包资源进asset\"><a href=\"#3-打包资源进asset\" class=\"headerlink\" title=\"3 打包资源进asset\"></a>3 打包资源进asset</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">flutter:</span></span><br><span class=\"line\">  <span class=\"attr\">assets:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">packages/fancy_backgrounds/backgrounds/background1.png</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-资源平台共享\"><a href=\"#4-资源平台共享\" class=\"headerlink\" title=\"4 资源平台共享\"></a>4 资源平台共享</h4><ul>\n<li>Android</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AssetManager assetManager = registrar.context().getAssets();</span><br><span class=\"line\">String key = registrar.lookupKeyForAsset(<span class=\"string\">&quot;icons/heart.png&quot;</span>);</span><br><span class=\"line\">AssetFileDescriptor fd = assetManager.openFd(key);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>iOS</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString* key = [registrar lookupKeyForAsset:@&quot;icons/heart.png&quot;];</span><br><span class=\"line\">NSString* path = [[NSBundle mainBundle] pathForResource:key ofType:nil];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-平台资源\"><a href=\"#5-平台资源\" class=\"headerlink\" title=\"5 平台资源\"></a>5 平台资源</h4><blockquote>\n<p>Android 与 iOS 的icon 、启动图配置；</p>\n</blockquote>\n<h3 id=\"2-4、项目源码简单解析\"><a href=\"#2-4、项目源码简单解析\" class=\"headerlink\" title=\"2.4、项目源码简单解析\"></a>2.4、项目源码简单解析</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;Flutter SuMian&#x27;</span>,</span><br><span class=\"line\">      onGenerateTitle: (BuildContext context) =&gt;</span><br><span class=\"line\">          RyLocalizations.of(context).title,</span><br><span class=\"line\">      home: RyTabBar(),</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primaryColor: Colors.white,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      debugShowCheckedModeBanner: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      showSemanticsDebugger: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      localizationsDelegates: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> RyLocalizationsDelegate(),</span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">        GlobalCupertinoLocalizations.delegate,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、界面\"><a href=\"#3、界面\" class=\"headerlink\" title=\"3、界面\"></a>3、界面</h2><h3 id=\"3-1-布局介绍\"><a href=\"#3-1-布局介绍\" class=\"headerlink\" title=\"3.1 布局介绍\"></a>3.1 <a href=\"https://flutter-io.cn/docs/development/ui/widgets/layout\">布局介绍</a></h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget listHead() &#123;</span><br><span class=\"line\">    _avatarImg = Image.network(</span><br><span class=\"line\">      ProfileInfo.getInstance().avatar,</span><br><span class=\"line\">      fit: BoxFit.cover,</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    Container avatar = Container(</span><br><span class=\"line\">      margin: <span class=\"keyword\">const</span> EdgeInsets.fromLTRB(<span class=\"number\">15</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">      child: Container(</span><br><span class=\"line\">        width: <span class=\"number\">60</span>,</span><br><span class=\"line\">        height: <span class=\"number\">60</span>,</span><br><span class=\"line\">        decoration: BoxDecoration(</span><br><span class=\"line\">          borderRadius: BorderRadius.circular(<span class=\"number\">30</span>),</span><br><span class=\"line\">          boxShadow: [</span><br><span class=\"line\">            BoxShadow(</span><br><span class=\"line\">                color: Colors.black,</span><br><span class=\"line\">                offset: Offset(<span class=\"number\">0</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">                blurRadius: <span class=\"number\">1</span>,</span><br><span class=\"line\">                spreadRadius: <span class=\"number\">2</span>)</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          image: DecorationImage(</span><br><span class=\"line\">            image: NetworkImage(ProfileInfo.getInstance().avatar),</span><br><span class=\"line\">            fit: BoxFit.cover,</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    Container nameTxt = Container(</span><br><span class=\"line\">      margin: EdgeInsets.fromLTRB(<span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>),</span><br><span class=\"line\">      child: Text(ProfileInfo.getInstance().mobile),</span><br><span class=\"line\">    );</span><br><span class=\"line\">    Container department = Container(</span><br><span class=\"line\">      margin: EdgeInsets.fromLTRB(<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">      child: Text(ProfileInfo.getInstance().department),</span><br><span class=\"line\">    );</span><br><span class=\"line\">    Container txtView = Container(</span><br><span class=\"line\">      margin: EdgeInsets.fromLTRB(<span class=\"number\">10</span>, <span class=\"number\">25</span>, <span class=\"number\">0</span>, <span class=\"number\">25</span>),</span><br><span class=\"line\">      child: Column(</span><br><span class=\"line\">        children: &lt;Widget&gt;[nameTxt, department],</span><br><span class=\"line\">        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Row(</span><br><span class=\"line\">      children: &lt;Widget&gt;[</span><br><span class=\"line\">        avatar,</span><br><span class=\"line\">        Expanded(</span><br><span class=\"line\">          child: txtView,</span><br><span class=\"line\">        )</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-交互事件\"><a href=\"#3-2-交互事件\" class=\"headerlink\" title=\"3.2 交互事件\"></a>3.2 交互事件</h3><p>1 Button 事件点击</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      body: Container(</span><br><span class=\"line\">        decoration: BoxDecoration(color: Colors.grey[<span class=\"number\">200</span>]),</span><br><span class=\"line\">        padding: EdgeInsets.all(<span class=\"number\">0</span>),</span><br><span class=\"line\">        child: Container(</span><br><span class=\"line\">          color: Colors.white,</span><br><span class=\"line\">          child: Center(child: OutlineButton(child: Text(<span class=\"string\">&#x27;个人信息&#x27;</span>),onPressed: getProfile,),),</span><br><span class=\"line\">        ), </span><br><span class=\"line\">     ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>2 下拉刷新、上拉加载</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget setPannel() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RefreshIndicator(</span><br><span class=\"line\">      child: ListView.builder(</span><br><span class=\"line\">        itemBuilder: _renderRow,</span><br><span class=\"line\">        itemCount: list.length + <span class=\"number\">1</span>,</span><br><span class=\"line\">        controller: _scrollController,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      onRefresh: _onRefresh,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、业务\"><a href=\"#4、业务\" class=\"headerlink\" title=\"4、业务\"></a>4、业务</h2><h3 id=\"4-1-网络模块\"><a href=\"#4-1-网络模块\" class=\"headerlink\" title=\"4.1 网络模块\"></a>4.1 网络模块</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkTools</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> Future <span class=\"keyword\">get</span>(<span class=\"built_in\">String</span> url, [<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params]) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response;</span><br><span class=\"line\">    Directory documentsDir = <span class=\"keyword\">await</span> getApplicationDocumentsDirectory();</span><br><span class=\"line\">    <span class=\"built_in\">String</span> documentsPath = documentsDir.path;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dir = <span class=\"keyword\">new</span> Directory(<span class=\"string\">&quot;<span class=\"subst\">$documentsPath</span>/cookies&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> dir.create();</span><br><span class=\"line\">    dio.interceptors.add(CookieManager(PersistCookieJar(dir: dir.path)));</span><br><span class=\"line\">    dio.interceptors.add(TokenInterceptor());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (params != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      response = <span class=\"keyword\">await</span> dio.<span class=\"keyword\">get</span>(url, queryParameters: params);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      response = <span class=\"keyword\">await</span> dio.<span class=\"keyword\">get</span>(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Future post(<span class=\"built_in\">String</span> url, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response = <span class=\"keyword\">await</span> dio.post(url, data: params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Future delete(<span class=\"built_in\">String</span> url, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    dio.interceptors.add(TokenInterceptor());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response = <span class=\"keyword\">await</span> dio.delete(url, data: params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.statusCode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-数据\"><a href=\"#4-2-数据\" class=\"headerlink\" title=\"4.2 数据\"></a>4.2 数据</h3><p>1 序列化</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Token</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> token;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">int</span> expired;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">int</span> refreshTime;</span><br><span class=\"line\"></span><br><span class=\"line\">  Token(&#123;<span class=\"keyword\">this</span>.token,<span class=\"keyword\">this</span>.expired,<span class=\"keyword\">this</span>.refreshTime&#125;)&#123;_instance = <span class=\"keyword\">this</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Token._();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Token _instance;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Token getInstance() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      _instance = Token._();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">factory</span> Token.fromJson(<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; json)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Token(</span><br><span class=\"line\">      token: json[<span class=\"string\">&#x27;token&#x27;</span>],</span><br><span class=\"line\">      expired: json[<span class=\"string\">&#x27;expired_at&#x27;</span>],</span><br><span class=\"line\">      refreshTime: json[<span class=\"string\">&#x27;refresh_expired_at&#x27;</span>]</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; toJson() =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;token&#x27;</span>: token,</span><br><span class=\"line\">      <span class=\"string\">&#x27;expired_at&#x27;</span>: expired,</span><br><span class=\"line\">      <span class=\"string\">&#x27;refresh_expired_at&#x27;</span>:refreshTime</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2 自动序列化</p>\n<p>配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dependencies:</span></span><br><span class=\"line\">  <span class=\"comment\"># Your other regular dependencies here</span></span><br><span class=\"line\">  <span class=\"attr\">json_annotation:</span> <span class=\"string\">^2.0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dev_dependencies:</span></span><br><span class=\"line\">  <span class=\"comment\"># Your other dev_dependencies here</span></span><br><span class=\"line\">  <span class=\"attr\">build_runner:</span> <span class=\"string\">^1.0.0</span></span><br><span class=\"line\">  <span class=\"attr\">json_serializable:</span> <span class=\"string\">^2.0.0</span></span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">part</span> <span class=\"string\">&#x27;RelaxtionsLog.g.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@JsonSerializable</span>()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RelaxtionsLog</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@JsonKey</span>(name: <span class=\"string\">&#x27;watch_times&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">int</span> times;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@JsonKey</span>(name: <span class=\"string\">&#x27;total_watch_length&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">int</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">String</span> name;</span><br><span class=\"line\"></span><br><span class=\"line\">  RelaxtionsLog(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.times,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">factory</span> RelaxtionsLog.fromJson(<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>,<span class=\"built_in\">dynamic</span>&gt; json) =&gt; _$RelaxtionsLogFromJson(json);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>,<span class=\"built_in\">dynamic</span>&gt; toJson() =&gt; _$RelaxtionsLogToJson(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3 持久化：数据库、归档、UserDefault等</p>\n<ol>\n<li><a href=\"https://pub.dev/packages/firebase_database#-readme-tab-\">FireBase</a></li>\n<li><a href=\"https://pub.dev/packages/sqflite\">sqflite</a></li>\n<li>SharedPreferences =&gt; UserDefault</li>\n</ol>\n<h2 id=\"5、包-组件化\"><a href=\"#5、包-组件化\" class=\"headerlink\" title=\"5、包[组件化]\"></a>5、包[组件化]</h2><h3 id=\"5-1-创建Dart-package库\"><a href=\"#5-1-创建Dart-package库\" class=\"headerlink\" title=\"5.1 创建Dart package库\"></a>5.1 创建Dart package库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create --org com.example --template=plugin hello --创建项目</span><br><span class=\"line\">flutter pub pub publish --dry-run  --检查配置</span><br><span class=\"line\">flutter pub pub publish   --发布package</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-提交package\"><a href=\"#5-2-提交package\" class=\"headerlink\" title=\"5.2 提交package\"></a>5.2 提交package</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter pub pub publish --dry-run</span><br><span class=\"line\">flutter pub pub publish</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>package 依赖</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dependencies:</span></span><br><span class=\"line\">  <span class=\"attr\">url_launcher:</span> <span class=\"string\">^0.4.2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>原生平台依赖</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new <span class=\"keyword\">do</span> <span class=\"params\">|s|</span></span><br><span class=\"line\">  <span class=\"comment\"># lines skipped</span></span><br><span class=\"line\">  s.dependency <span class=\"string\">&#x27;url_launcher&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"./Resources/\">自建私有 package 仓库</a></li>\n</ul>\n<h2 id=\"6、平台通道\"><a href=\"#6、平台通道\" class=\"headerlink\" title=\"6、平台通道\"></a>6、平台通道</h2><h3 id=\"6-1-简单通道\"><a href=\"#6-1-简单通道\" class=\"headerlink\" title=\"6.1 简单通道\"></a>6.1 简单通道</h3><ol>\n<li>获取相册图片</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> controller:<span class=\"type\">FlutterViewController</span> <span class=\"operator\">=</span> window<span class=\"operator\">?</span>.rootViewController <span class=\"keyword\">as!</span> <span class=\"type\">FlutterViewController</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> batteryChannel <span class=\"operator\">=</span>  <span class=\"type\">FlutterMethodChannel</span>(name: <span class=\"type\">RyImagePicker</span>.channel, binaryMessenger: controller.binaryMessenger)</span><br><span class=\"line\">batteryChannel.setMethodCallHandler &#123; (call, result) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> call.method <span class=\"operator\">==</span> <span class=\"string\">&quot;pickerImage&quot;</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">RyImagePicker</span>(controller).showImagePicker &#123; (image) <span class=\"keyword\">in</span></span><br><span class=\"line\">            result(image)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result(<span class=\"type\">FlutterMethodNotImplemented</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-Flutter编解码器\"><a href=\"#6-2-Flutter编解码器\" class=\"headerlink\" title=\"6.2 Flutter编解码器\"></a>6.2 Flutter编解码器</h3><p>1 Flutter定义了三种不同类型的Channel，它们分别是：</p>\n<ul>\n<li>BasicMessageChannel：用于传递字符串和半结构化的信息。</li>\n<li>BMethodChannel：用于传递方法调用（method invocation）。</li>\n<li>BEventChannel: 用于数据流（event streams）的通信。</li>\n</ul>\n<p>三种Channel之间互相独立，各有用途，但它们在设计上却非常相近。每种Channel均有三个重要成员变量：</p>\n<ul>\n<li>name: String类型，代表Channel的名字，也是其唯一标识符。</li>\n<li>messager：BinaryMessenger类型，代表消息信使，是消息的发送与接收的工具。</li>\n<li>codec: MessageCodec类型或MethodCodec类型，代表消息的编解码器。</li>\n</ul>\n<p>消息通道结构图6-2-1：<br><img src=\"/./Resources/BinaryMessenger.jpg\" alt=\"消息通道结构图\"></p>\n<p>编解码器结构图6-2-2:<br><img src=\"/./Resources/Codec.jpg\" alt=\"编解码器结构图\"></p>\n<p>2 消息解码</p>\n<p>支持的平台数据类型参考：<code>StandardMessageCodec</code><br><img src=\"/./Resources/type.jpg\" alt=\"消息解码器\"></p>\n<p>3.1 消息传递：Dart -&gt; Native</p>\n<p><img src=\"/./Resources/message-dart-native.jpg\" alt=\"消息传递\"></p>\n<p>3.2 消息传递：Native -&gt; Dart</p>\n<p><img src=\"/./Resources/message-native-dart.jpg\" alt=\"消息传递\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、项目构建\"><a href=\"#1、项目构建\" class=\"headerlink\" title=\"1、项目构建\"></a>1、项目构建</h2><h3 id=\"1-1-环境配置\"><a href=\"#1-1-环境配置\" class=\"headerlink\" title=\"1.1 环境配置\"></a>1.1 <a href=\"https://flutter-io.cn/docs/get-started/install\">环境配置</a></h3><h4 id=\"1-编辑器\"><a href=\"#1-编辑器\" class=\"headerlink\" title=\"1. 编辑器\"></a>1. 编辑器</h4><ol>\n<li>Android Studio[Intelij]</li>\n<li>Visual Studio Code</li>\n</ol>\n<h4 id=\"2-SDK\"><a href=\"#2-SDK\" class=\"headerlink\" title=\"2. SDK\"></a>2. SDK</h4><ol>\n<li>Dart</li>\n<li>Flutter</li>\n</ol>\n<h3 id=\"1-2-创建并运行项目\"><a href=\"#1-2-创建并运行项目\" class=\"headerlink\" title=\"1.2 创建并运行项目\"></a>1.2 创建并运行项目</h3><h4 id=\"1-终端\"><a href=\"#1-终端\" class=\"headerlink\" title=\"1. 终端\"></a>1. 终端</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create my_app</span><br><span class=\"line\">cd my_app</span><br><span class=\"line\">flutter run</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Android-Studio\"><a href=\"#2-Android-Studio\" class=\"headerlink\" title=\"2. Android Studio\"></a>2. Android Studio</h4><h4 id=\"3-Visual-Studio-Code\"><a href=\"#3-Visual-Studio-Code\" class=\"headerlink\" title=\"3. Visual Studio Code\"></a>3. Visual Studio Code</h4><h2 id=\"2、项目工程结构\"><a href=\"#2、项目工程结构\" class=\"headerlink\" title=\"2、项目工程结构\"></a>2、项目工程结构</h2><h3 id=\"2-1-项目文件组织结构\"><a href=\"#2-1-项目文件组织结构\" class=\"headerlink\" title=\"2.1 项目文件组织结构\"></a>2.1 项目文件组织结构</h3><p><img src=\"/./Resources/Projects.png\" alt=\"项目工程结构\"></p>\n<h3 id=\"2-2-源码文件组织、使用\"><a href=\"#2-2-源码文件组织、使用\" class=\"headerlink\" title=\"2.2 源码文件组织、使用\"></a>2.2 源码文件组织、使用</h3><p>1 项目库管理、第三方库</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dependencies:</span></span><br><span class=\"line\">  <span class=\"attr\">flutter:</span></span><br><span class=\"line\">    <span class=\"attr\">sdk:</span> <span class=\"string\">flutter</span></span><br><span class=\"line\">  <span class=\"attr\">flutter_localizations:</span></span><br><span class=\"line\">    <span class=\"attr\">sdk:</span> <span class=\"string\">flutter</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">cupertino_icons:</span> <span class=\"string\">^0.1.2</span></span><br><span class=\"line\">  <span class=\"attr\">english_words:</span> <span class=\"string\">^3.1.0</span></span><br><span class=\"line\">  <span class=\"attr\">video_player:</span> <span class=\"string\">^0.10.1+6</span></span><br><span class=\"line\">  <span class=\"attr\">dio:</span> <span class=\"string\">^2.1.16</span></span><br><span class=\"line\">  <span class=\"attr\">path_provider:</span> <span class=\"string\">^1.1.0</span></span><br><span class=\"line\">  <span class=\"attr\">image_picker:</span> <span class=\"string\">^0.6.1+4</span></span><br><span class=\"line\">  <span class=\"attr\">webview_flutter:</span> <span class=\"string\">^0.3.13</span></span><br><span class=\"line\">  <span class=\"attr\">intl:</span> <span class=\"string\">^0.15.8</span></span><br><span class=\"line\">  <span class=\"attr\">url_launcher:</span> <span class=\"string\">^5.1.2</span></span><br><span class=\"line\">  <span class=\"attr\">package_info:</span> <span class=\"string\">^0.4.0+6</span></span><br><span class=\"line\">  <span class=\"attr\">fluwx:</span> <span class=\"string\">^1.0.4</span></span><br><span class=\"line\">  <span class=\"attr\">json_annotation:</span> <span class=\"string\">^3.0.0</span></span><br><span class=\"line\">  <span class=\"attr\">device_info:</span> <span class=\"string\">^0.4.0+2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dev_dependencies:</span></span><br><span class=\"line\">  <span class=\"attr\">flutter_test:</span></span><br><span class=\"line\">    <span class=\"attr\">sdk:</span> <span class=\"string\">flutter</span></span><br><span class=\"line\">  <span class=\"attr\">intl_translation:</span> <span class=\"string\">^0.17.2</span></span><br><span class=\"line\">  <span class=\"attr\">json_serializable:</span> <span class=\"string\">^3.2.2</span></span><br><span class=\"line\">  <span class=\"attr\">build_runner:</span> <span class=\"string\">^1.6.7</span></span><br></pre></td></tr></table></figure>\n\n<p>2 核心库、源码文件</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:io&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:image_picker/image_picker.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;../Profile/Models/ProfileInfo.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>3 功能模块、组件功能划分，独立管理，以及自定义组件化工作管理</p>\n<p><img src=\"/./Resources/files-module.png\" alt=\"文件目录\"></p>\n<h3 id=\"2-3、资源文件\"><a href=\"#2-3、资源文件\" class=\"headerlink\" title=\"2.3、资源文件\"></a>2.3、资源文件</h3><h4 id=\"1-引用\"><a href=\"#1-引用\" class=\"headerlink\" title=\"1 引用\"></a>1 引用</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">flutter:</span></span><br><span class=\"line\">  <span class=\"attr\">assets:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">assets/my_icon.png</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">assets/background.png</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-加载\"><a href=\"#2-加载\" class=\"headerlink\" title=\"2 加载\"></a>2 加载</h4><h5 id=\"2-1-Bundel\"><a href=\"#2-1-Bundel\" class=\"headerlink\" title=\"2.1. Bundel\"></a>2.1. Bundel</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AssetBundle;</span><br><span class=\"line\">rootBundle;</span><br><span class=\"line\">DefaultAssetBundle;</span><br><span class=\"line\">资源变体：根据分辨率加载图片等资源；</span><br><span class=\"line\">AssetImage;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-依赖包中的资源\"><a href=\"#2-依赖包中的资源\" class=\"headerlink\" title=\"2. 依赖包中的资源\"></a>2. 依赖包中的资源</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AssetImage(<span class=\"string\">&#x27;icons/heart.png&#x27;</span>, package: <span class=\"string\">&#x27;my_icons&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-打包资源进asset\"><a href=\"#3-打包资源进asset\" class=\"headerlink\" title=\"3 打包资源进asset\"></a>3 打包资源进asset</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">flutter:</span></span><br><span class=\"line\">  <span class=\"attr\">assets:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">packages/fancy_backgrounds/backgrounds/background1.png</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-资源平台共享\"><a href=\"#4-资源平台共享\" class=\"headerlink\" title=\"4 资源平台共享\"></a>4 资源平台共享</h4><ul>\n<li>Android</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AssetManager assetManager = registrar.context().getAssets();</span><br><span class=\"line\">String key = registrar.lookupKeyForAsset(<span class=\"string\">&quot;icons/heart.png&quot;</span>);</span><br><span class=\"line\">AssetFileDescriptor fd = assetManager.openFd(key);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>iOS</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString* key = [registrar lookupKeyForAsset:@&quot;icons/heart.png&quot;];</span><br><span class=\"line\">NSString* path = [[NSBundle mainBundle] pathForResource:key ofType:nil];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-平台资源\"><a href=\"#5-平台资源\" class=\"headerlink\" title=\"5 平台资源\"></a>5 平台资源</h4><blockquote>\n<p>Android 与 iOS 的icon 、启动图配置；</p>\n</blockquote>\n<h3 id=\"2-4、项目源码简单解析\"><a href=\"#2-4、项目源码简单解析\" class=\"headerlink\" title=\"2.4、项目源码简单解析\"></a>2.4、项目源码简单解析</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;Flutter SuMian&#x27;</span>,</span><br><span class=\"line\">      onGenerateTitle: (BuildContext context) =&gt;</span><br><span class=\"line\">          RyLocalizations.of(context).title,</span><br><span class=\"line\">      home: RyTabBar(),</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primaryColor: Colors.white,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      debugShowCheckedModeBanner: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      showSemanticsDebugger: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">      localizationsDelegates: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> RyLocalizationsDelegate(),</span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">        GlobalCupertinoLocalizations.delegate,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、界面\"><a href=\"#3、界面\" class=\"headerlink\" title=\"3、界面\"></a>3、界面</h2><h3 id=\"3-1-布局介绍\"><a href=\"#3-1-布局介绍\" class=\"headerlink\" title=\"3.1 布局介绍\"></a>3.1 <a href=\"https://flutter-io.cn/docs/development/ui/widgets/layout\">布局介绍</a></h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget listHead() &#123;</span><br><span class=\"line\">    _avatarImg = Image.network(</span><br><span class=\"line\">      ProfileInfo.getInstance().avatar,</span><br><span class=\"line\">      fit: BoxFit.cover,</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    Container avatar = Container(</span><br><span class=\"line\">      margin: <span class=\"keyword\">const</span> EdgeInsets.fromLTRB(<span class=\"number\">15</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">      child: Container(</span><br><span class=\"line\">        width: <span class=\"number\">60</span>,</span><br><span class=\"line\">        height: <span class=\"number\">60</span>,</span><br><span class=\"line\">        decoration: BoxDecoration(</span><br><span class=\"line\">          borderRadius: BorderRadius.circular(<span class=\"number\">30</span>),</span><br><span class=\"line\">          boxShadow: [</span><br><span class=\"line\">            BoxShadow(</span><br><span class=\"line\">                color: Colors.black,</span><br><span class=\"line\">                offset: Offset(<span class=\"number\">0</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">                blurRadius: <span class=\"number\">1</span>,</span><br><span class=\"line\">                spreadRadius: <span class=\"number\">2</span>)</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          image: DecorationImage(</span><br><span class=\"line\">            image: NetworkImage(ProfileInfo.getInstance().avatar),</span><br><span class=\"line\">            fit: BoxFit.cover,</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    Container nameTxt = Container(</span><br><span class=\"line\">      margin: EdgeInsets.fromLTRB(<span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>),</span><br><span class=\"line\">      child: Text(ProfileInfo.getInstance().mobile),</span><br><span class=\"line\">    );</span><br><span class=\"line\">    Container department = Container(</span><br><span class=\"line\">      margin: EdgeInsets.fromLTRB(<span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">      child: Text(ProfileInfo.getInstance().department),</span><br><span class=\"line\">    );</span><br><span class=\"line\">    Container txtView = Container(</span><br><span class=\"line\">      margin: EdgeInsets.fromLTRB(<span class=\"number\">10</span>, <span class=\"number\">25</span>, <span class=\"number\">0</span>, <span class=\"number\">25</span>),</span><br><span class=\"line\">      child: Column(</span><br><span class=\"line\">        children: &lt;Widget&gt;[nameTxt, department],</span><br><span class=\"line\">        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Row(</span><br><span class=\"line\">      children: &lt;Widget&gt;[</span><br><span class=\"line\">        avatar,</span><br><span class=\"line\">        Expanded(</span><br><span class=\"line\">          child: txtView,</span><br><span class=\"line\">        )</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-交互事件\"><a href=\"#3-2-交互事件\" class=\"headerlink\" title=\"3.2 交互事件\"></a>3.2 交互事件</h3><p>1 Button 事件点击</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      body: Container(</span><br><span class=\"line\">        decoration: BoxDecoration(color: Colors.grey[<span class=\"number\">200</span>]),</span><br><span class=\"line\">        padding: EdgeInsets.all(<span class=\"number\">0</span>),</span><br><span class=\"line\">        child: Container(</span><br><span class=\"line\">          color: Colors.white,</span><br><span class=\"line\">          child: Center(child: OutlineButton(child: Text(<span class=\"string\">&#x27;个人信息&#x27;</span>),onPressed: getProfile,),),</span><br><span class=\"line\">        ), </span><br><span class=\"line\">     ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>2 下拉刷新、上拉加载</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget setPannel() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> RefreshIndicator(</span><br><span class=\"line\">      child: ListView.builder(</span><br><span class=\"line\">        itemBuilder: _renderRow,</span><br><span class=\"line\">        itemCount: list.length + <span class=\"number\">1</span>,</span><br><span class=\"line\">        controller: _scrollController,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      onRefresh: _onRefresh,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、业务\"><a href=\"#4、业务\" class=\"headerlink\" title=\"4、业务\"></a>4、业务</h2><h3 id=\"4-1-网络模块\"><a href=\"#4-1-网络模块\" class=\"headerlink\" title=\"4.1 网络模块\"></a>4.1 网络模块</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkTools</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> Future <span class=\"keyword\">get</span>(<span class=\"built_in\">String</span> url, [<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params]) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response;</span><br><span class=\"line\">    Directory documentsDir = <span class=\"keyword\">await</span> getApplicationDocumentsDirectory();</span><br><span class=\"line\">    <span class=\"built_in\">String</span> documentsPath = documentsDir.path;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dir = <span class=\"keyword\">new</span> Directory(<span class=\"string\">&quot;<span class=\"subst\">$documentsPath</span>/cookies&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> dir.create();</span><br><span class=\"line\">    dio.interceptors.add(CookieManager(PersistCookieJar(dir: dir.path)));</span><br><span class=\"line\">    dio.interceptors.add(TokenInterceptor());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (params != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      response = <span class=\"keyword\">await</span> dio.<span class=\"keyword\">get</span>(url, queryParameters: params);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      response = <span class=\"keyword\">await</span> dio.<span class=\"keyword\">get</span>(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Future post(<span class=\"built_in\">String</span> url, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response = <span class=\"keyword\">await</span> dio.post(url, data: params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Future delete(<span class=\"built_in\">String</span> url, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; params) <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">    dio.interceptors.add(TokenInterceptor());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> response = <span class=\"keyword\">await</span> dio.delete(url, data: params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response.statusCode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-数据\"><a href=\"#4-2-数据\" class=\"headerlink\" title=\"4.2 数据\"></a>4.2 数据</h3><p>1 序列化</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Token</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">String</span> token;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">int</span> expired;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">int</span> refreshTime;</span><br><span class=\"line\"></span><br><span class=\"line\">  Token(&#123;<span class=\"keyword\">this</span>.token,<span class=\"keyword\">this</span>.expired,<span class=\"keyword\">this</span>.refreshTime&#125;)&#123;_instance = <span class=\"keyword\">this</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Token._();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Token _instance;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> Token getInstance() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      _instance = Token._();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">factory</span> Token.fromJson(<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; json)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Token(</span><br><span class=\"line\">      token: json[<span class=\"string\">&#x27;token&#x27;</span>],</span><br><span class=\"line\">      expired: json[<span class=\"string\">&#x27;expired_at&#x27;</span>],</span><br><span class=\"line\">      refreshTime: json[<span class=\"string\">&#x27;refresh_expired_at&#x27;</span>]</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">dynamic</span>&gt; toJson() =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;token&#x27;</span>: token,</span><br><span class=\"line\">      <span class=\"string\">&#x27;expired_at&#x27;</span>: expired,</span><br><span class=\"line\">      <span class=\"string\">&#x27;refresh_expired_at&#x27;</span>:refreshTime</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2 自动序列化</p>\n<p>配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dependencies:</span></span><br><span class=\"line\">  <span class=\"comment\"># Your other regular dependencies here</span></span><br><span class=\"line\">  <span class=\"attr\">json_annotation:</span> <span class=\"string\">^2.0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">dev_dependencies:</span></span><br><span class=\"line\">  <span class=\"comment\"># Your other dev_dependencies here</span></span><br><span class=\"line\">  <span class=\"attr\">build_runner:</span> <span class=\"string\">^1.0.0</span></span><br><span class=\"line\">  <span class=\"attr\">json_serializable:</span> <span class=\"string\">^2.0.0</span></span><br></pre></td></tr></table></figure>\n\n<p>代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">part</span> <span class=\"string\">&#x27;RelaxtionsLog.g.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@JsonSerializable</span>()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RelaxtionsLog</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@JsonKey</span>(name: <span class=\"string\">&#x27;watch_times&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">int</span> times;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@JsonKey</span>(name: <span class=\"string\">&#x27;total_watch_length&#x27;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">int</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">String</span> name;</span><br><span class=\"line\"></span><br><span class=\"line\">  RelaxtionsLog(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.times,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">factory</span> RelaxtionsLog.fromJson(<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>,<span class=\"built_in\">dynamic</span>&gt; json) =&gt; _$RelaxtionsLogFromJson(json);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>,<span class=\"built_in\">dynamic</span>&gt; toJson() =&gt; _$RelaxtionsLogToJson(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3 持久化：数据库、归档、UserDefault等</p>\n<ol>\n<li><a href=\"https://pub.dev/packages/firebase_database#-readme-tab-\">FireBase</a></li>\n<li><a href=\"https://pub.dev/packages/sqflite\">sqflite</a></li>\n<li>SharedPreferences =&gt; UserDefault</li>\n</ol>\n<h2 id=\"5、包-组件化\"><a href=\"#5、包-组件化\" class=\"headerlink\" title=\"5、包[组件化]\"></a>5、包[组件化]</h2><h3 id=\"5-1-创建Dart-package库\"><a href=\"#5-1-创建Dart-package库\" class=\"headerlink\" title=\"5.1 创建Dart package库\"></a>5.1 创建Dart package库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create --org com.example --template=plugin hello --创建项目</span><br><span class=\"line\">flutter pub pub publish --dry-run  --检查配置</span><br><span class=\"line\">flutter pub pub publish   --发布package</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-提交package\"><a href=\"#5-2-提交package\" class=\"headerlink\" title=\"5.2 提交package\"></a>5.2 提交package</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter pub pub publish --dry-run</span><br><span class=\"line\">flutter pub pub publish</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>package 依赖</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dependencies:</span></span><br><span class=\"line\">  <span class=\"attr\">url_launcher:</span> <span class=\"string\">^0.4.2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>原生平台依赖</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new <span class=\"keyword\">do</span> <span class=\"params\">|s|</span></span><br><span class=\"line\">  <span class=\"comment\"># lines skipped</span></span><br><span class=\"line\">  s.dependency <span class=\"string\">&#x27;url_launcher&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"./Resources/\">自建私有 package 仓库</a></li>\n</ul>\n<h2 id=\"6、平台通道\"><a href=\"#6、平台通道\" class=\"headerlink\" title=\"6、平台通道\"></a>6、平台通道</h2><h3 id=\"6-1-简单通道\"><a href=\"#6-1-简单通道\" class=\"headerlink\" title=\"6.1 简单通道\"></a>6.1 简单通道</h3><ol>\n<li>获取相册图片</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> controller:<span class=\"type\">FlutterViewController</span> <span class=\"operator\">=</span> window<span class=\"operator\">?</span>.rootViewController <span class=\"keyword\">as!</span> <span class=\"type\">FlutterViewController</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> batteryChannel <span class=\"operator\">=</span>  <span class=\"type\">FlutterMethodChannel</span>(name: <span class=\"type\">RyImagePicker</span>.channel, binaryMessenger: controller.binaryMessenger)</span><br><span class=\"line\">batteryChannel.setMethodCallHandler &#123; (call, result) <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> call.method <span class=\"operator\">==</span> <span class=\"string\">&quot;pickerImage&quot;</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">RyImagePicker</span>(controller).showImagePicker &#123; (image) <span class=\"keyword\">in</span></span><br><span class=\"line\">            result(image)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result(<span class=\"type\">FlutterMethodNotImplemented</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-Flutter编解码器\"><a href=\"#6-2-Flutter编解码器\" class=\"headerlink\" title=\"6.2 Flutter编解码器\"></a>6.2 Flutter编解码器</h3><p>1 Flutter定义了三种不同类型的Channel，它们分别是：</p>\n<ul>\n<li>BasicMessageChannel：用于传递字符串和半结构化的信息。</li>\n<li>BMethodChannel：用于传递方法调用（method invocation）。</li>\n<li>BEventChannel: 用于数据流（event streams）的通信。</li>\n</ul>\n<p>三种Channel之间互相独立，各有用途，但它们在设计上却非常相近。每种Channel均有三个重要成员变量：</p>\n<ul>\n<li>name: String类型，代表Channel的名字，也是其唯一标识符。</li>\n<li>messager：BinaryMessenger类型，代表消息信使，是消息的发送与接收的工具。</li>\n<li>codec: MessageCodec类型或MethodCodec类型，代表消息的编解码器。</li>\n</ul>\n<p>消息通道结构图6-2-1：<br><img src=\"/./Resources/BinaryMessenger.jpg\" alt=\"消息通道结构图\"></p>\n<p>编解码器结构图6-2-2:<br><img src=\"/./Resources/Codec.jpg\" alt=\"编解码器结构图\"></p>\n<p>2 消息解码</p>\n<p>支持的平台数据类型参考：<code>StandardMessageCodec</code><br><img src=\"/./Resources/type.jpg\" alt=\"消息解码器\"></p>\n<p>3.1 消息传递：Dart -&gt; Native</p>\n<p><img src=\"/./Resources/message-dart-native.jpg\" alt=\"消息传递\"></p>\n<p>3.2 消息传递：Native -&gt; Dart</p>\n<p><img src=\"/./Resources/message-native-dart.jpg\" alt=\"消息传递\"></p>\n"},{"title":"Flutter 可行性调研技术点","abbrlink":"2bdc8937","date":"2021-04-20T13:36:02.000Z","_content":"\n\n界面：\n1、适配；\n2、项目视图组件；\n3、音视频播放；\n4、导航栏；\n5、动画；\n\n数据：\n1、数据库；\n2、数据序列化[json]；\n3、异步；\n4、埋点；\n\nAPP：\n1、webview：[用户协议，]事件，https证书认证；\n2、网络 http[s] 方法delete等；\n3、第三方app交互；\n4、后台任务；\n\n工程：\n1、图片等资源；\n2、国际化；\n3、性能监控：日志上报与及时处理；\n\n原生交互：\n1、编解码器；\n2、原生通道；\n3、原生第三方服务：客服、推送等；\n4、渠道分发包；\n\n*跨端\n1、iOS；\n2、Android；\n3、Web；\n\n*跨语言\n1、Dart；\n2、Swift；\n3、Kotlin；\n4、C++；\n\n*框架\n1、Flutter；\n2、Swift UI，cocoa Touch等诸多框架；\n3、Android 诸多框架；\n\n*设计模式层面\n1、设计模式；\n2、工程分层设计：\n\n    网络层\n    数据层\n    UI层\n    原生[通道层]\n\n*组件化层面\n1、功能组件化；\n2、业务模块化；\n\n小问题：\n1、分块列表；\n2、退出登录点击无反应；\n3、弹窗；\n","source":"_posts/Flutters/TechnologyFeasibility/Technologies.md","raw":"---\ntitle: Flutter 可行性调研技术点\nabbrlink: 2bdc8937\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n\n界面：\n1、适配；\n2、项目视图组件；\n3、音视频播放；\n4、导航栏；\n5、动画；\n\n数据：\n1、数据库；\n2、数据序列化[json]；\n3、异步；\n4、埋点；\n\nAPP：\n1、webview：[用户协议，]事件，https证书认证；\n2、网络 http[s] 方法delete等；\n3、第三方app交互；\n4、后台任务；\n\n工程：\n1、图片等资源；\n2、国际化；\n3、性能监控：日志上报与及时处理；\n\n原生交互：\n1、编解码器；\n2、原生通道；\n3、原生第三方服务：客服、推送等；\n4、渠道分发包；\n\n*跨端\n1、iOS；\n2、Android；\n3、Web；\n\n*跨语言\n1、Dart；\n2、Swift；\n3、Kotlin；\n4、C++；\n\n*框架\n1、Flutter；\n2、Swift UI，cocoa Touch等诸多框架；\n3、Android 诸多框架；\n\n*设计模式层面\n1、设计模式；\n2、工程分层设计：\n\n    网络层\n    数据层\n    UI层\n    原生[通道层]\n\n*组件化层面\n1、功能组件化；\n2、业务模块化；\n\n小问题：\n1、分块列表；\n2、退出登录点击无反应；\n3、弹窗；\n","slug":"Flutters/TechnologyFeasibility/Technologies","published":1,"updated":"2021-07-29T06:46:00.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzs000viu9kf2m3e77l","content":"<p>界面：<br>1、适配；<br>2、项目视图组件；<br>3、音视频播放；<br>4、导航栏；<br>5、动画；</p>\n<p>数据：<br>1、数据库；<br>2、数据序列化[json]；<br>3、异步；<br>4、埋点；</p>\n<p>APP：<br>1、webview：[用户协议，]事件，https证书认证；<br>2、网络 http[s] 方法delete等；<br>3、第三方app交互；<br>4、后台任务；</p>\n<p>工程：<br>1、图片等资源；<br>2、国际化；<br>3、性能监控：日志上报与及时处理；</p>\n<p>原生交互：<br>1、编解码器；<br>2、原生通道；<br>3、原生第三方服务：客服、推送等；<br>4、渠道分发包；</p>\n<p>*跨端<br>1、iOS；<br>2、Android；<br>3、Web；</p>\n<p>*跨语言<br>1、Dart；<br>2、Swift；<br>3、Kotlin；<br>4、C++；</p>\n<p>*框架<br>1、Flutter；<br>2、Swift UI，cocoa Touch等诸多框架；<br>3、Android 诸多框架；</p>\n<p>*设计模式层面<br>1、设计模式；<br>2、工程分层设计：</p>\n<pre><code>网络层\n数据层\nUI层\n原生[通道层]\n</code></pre>\n<p>*组件化层面<br>1、功能组件化；<br>2、业务模块化；</p>\n<p>小问题：<br>1、分块列表；<br>2、退出登录点击无反应；<br>3、弹窗；</p>\n","site":{"data":{}},"excerpt":"","more":"<p>界面：<br>1、适配；<br>2、项目视图组件；<br>3、音视频播放；<br>4、导航栏；<br>5、动画；</p>\n<p>数据：<br>1、数据库；<br>2、数据序列化[json]；<br>3、异步；<br>4、埋点；</p>\n<p>APP：<br>1、webview：[用户协议，]事件，https证书认证；<br>2、网络 http[s] 方法delete等；<br>3、第三方app交互；<br>4、后台任务；</p>\n<p>工程：<br>1、图片等资源；<br>2、国际化；<br>3、性能监控：日志上报与及时处理；</p>\n<p>原生交互：<br>1、编解码器；<br>2、原生通道；<br>3、原生第三方服务：客服、推送等；<br>4、渠道分发包；</p>\n<p>*跨端<br>1、iOS；<br>2、Android；<br>3、Web；</p>\n<p>*跨语言<br>1、Dart；<br>2、Swift；<br>3、Kotlin；<br>4、C++；</p>\n<p>*框架<br>1、Flutter；<br>2、Swift UI，cocoa Touch等诸多框架；<br>3、Android 诸多框架；</p>\n<p>*设计模式层面<br>1、设计模式；<br>2、工程分层设计：</p>\n<pre><code>网络层\n数据层\nUI层\n原生[通道层]\n</code></pre>\n<p>*组件化层面<br>1、功能组件化；<br>2、业务模块化；</p>\n<p>小问题：<br>1、分块列表；<br>2、退出登录点击无反应；<br>3、弹窗；</p>\n"},{"title":"JavaScript","abbrlink":"cc1b9611","date":"2021-04-20T13:36:02.000Z","_content":"\n## [正则表达式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions)\n","source":"_posts/Web/JavaScript/JavaScript.md","raw":"---\ntitle: JavaScript\nabbrlink: cc1b9611\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## [正则表达式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions)\n","slug":"Web/JavaScript/JavaScript","published":1,"updated":"2021-07-29T06:46:00.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzt000wiu9k8z7z398p","content":"<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">正则表达式</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">正则表达式</a></h2>"},{"title":"Flutter","abbrlink":"e5974716","date":"2021-04-20T13:36:02.000Z","_content":"## 1、入门\n\n### 1.1 语言\n\n1.1.1 Dart：[学习路线](https://dart.dev/tools/sdk)\n\n![Dart](./Dart.png)\n\n1.1.2 Dart [概述](http://dart.goodev.org/guides/language)\n\n1.1.3 Dart [库预览](http://dart.goodev.org/guides/libraries)\n\n### 1.2 工具集\n\n2.1 通用工具\n\n2.1.1 [DartPad](https://dartpad.dartlang.org/)\n\n>DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.\n\n2.1.2 IDEs 与 编辑器\n\n2.1.2.1 IDE： [Android Studio](https://dart.dev/tools/jetbrains-plugin)、[IntelliJ IDEA](https://dart.dev/tools/jetbrains-plugin)、[Visual Studio Code](https://code.visualstudio.com/)\n\n2.1.2.2 IDEDart 社区维护的编辑器：[Emacs](https://github.com/bradyt/dart-mode)、[Atom](https://github.com/dart-atom/dart)、[Vim](https://github.com/dart-lang/dart-vim-plugin)\n\n2.1.3 命令行工具\n\n```shell\ndartanalyzer\n    A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\ndartdoc\n    Generates API reference documentation.\n\ndartfmt\n    Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\npub\n    Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n    Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\nbuild_runner\n    A code generator.\n\ndartfix\n    A tool for migrating Dart source code and fixing common issues.\n```\n\n2.2 Web工具集\n\n```shell\nwebdev\n    A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\ndart2js\n    The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\ndartdevc\n    The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\nbuild_runner\n    A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n```\n\n2.3 命令行工具集与服务器工具集\n\n```shell\nStandalone Dart VM: dart\n    Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\nAOT compiler and runtime: dart2aot, dartaotruntime\n    Support ahead-of-time compilation of Dart code to native x64 machine code.\n\nPub package manager: pub\n    Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n```\n\n## 2、Flutter\n\n### 2.1 Flutter是什么\n\n```markdown\nFlutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\nFlutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。\nDart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。\n\nFlutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n```\n\n### 2.2 核心原则\n\nFlutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。\n\n一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。\n\n![widget_Render_Object](./Flutter_Render_Object.png)\n\n### 2.3 Widget如何工作\n\n1. **Widget** 实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。\n\n2. 一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。\n  \n3. 最终的UI树其实是由一个个独立的Element节点构成。组件最终的Layout、渲染都是通过RenderObject来完成的，从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。\n\n4. Element就是Widget在UI树具体位置的一个实例化对象，大多数Element只有唯一的renderObject，但还有一些Element会有多个子节点，如继承自RenderObjectElement的一些类，比如MultiChildRenderObjectElement。最终所有Element的RenderObject构成一棵树，我们称之为渲染树，即render tree。\n\n5. Element的生命周期如下：\n\n    1. Framework 调用Widget.createElement 创建一个Element实例，记为element。\n    2. Framework 调用 element.mount(parentElement,newSlot) ，mount方法中首先调用elment所对应Widget的createRenderObject方法创建与element相关联的RenderObject对象，然后调用element.attachRenderObject方法将element.renderObject添加到渲染树中插槽指定的位置（这一步不是必须的，一般发生在Element树结构发生变化时才需要重新attach）。插入到渲染树后的element就处于“active”状态，处于“active”状态后就可以显示在屏幕上了（可以隐藏）。\n    3. 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n    4. 当有父Widget的配置数据改变时，同时其State.build返回的Widget结构与之前不同，此时就需要重新构建对应的Element树。为了进行Element复用，在Element重新构建前会先尝试是否可以复用旧树上相同位置的element，element节点在更新前都会调用其对应Widget的canUpdate方法，如果返回true，则复用旧Element，旧的Element会使用新Widget配置数据更新，反之则会创建一个新的Element。Widget.canUpdate主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来避免复用。\n    5. 当有祖先Element决定要移除element 时（如Widget树结构发生了变化，导致element对应的Widget被移除），这时该祖先Element就会调用deactivateChild 方法来移除它，移除后element.renderObject也会被从渲染树中移除，然后Framework会调用element.deactivate 方法，这时element状态变为“inactive”状态。\n    6. “inactive”态的element将不会再显示到屏幕。为了避免在一次动画执行过程中反复创建、移除某个特定element，“inactive”态的element在当前动画最后一帧结束前都会保留，如果在动画执行结束后它还未能重新变成”active“状态，Framework就会调用其unmount方法将其彻底移除，这时element的状态为defunct,它将永远不会再被插入到树中。\n    7. 如果element要重新插入到Element树的其它位置，如element或element的祖先拥有一个GlobalKey（用于全局复用元素），那么Framework会先将element从现有位置移除，然后再调用其activate方法，并将其renderObject重新attach到渲染树。\n\n### 2.4 框架\n\n![Flutter框架](./Flutter_Frameworks.png)\n\n**Flutter Framework:** 这是一个纯 Dart实现的 SDK。它实现了一套基础库， 用于处理动画、绘图和手势。并且基于绘图封装了一套 UI组件库，然后根据 Material 和Cupertino两种视觉风格区分开来。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。\n\n**Flutter Engine:** 这是一个纯 C++实现的 SDK，其中囊括了 Skia引擎、Dart运行时、文字排版引擎等。不过说白了，它就是 Dart的一个运行时，它可以以 JIT、JIT Snapshot 或者 AOT的模式运行 Dart代码。在代码调用 dart:ui库时，提供 dart:ui库中 Native Binding 实现。 不过别忘了，这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码。\n\n### 2.5 界面渲染\n\n2.5.1 Flutter 如何渲染界面\n\n在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：\n\n![iOS_Render_flow](./iOS_Render_flow.webp)\n\nCPU、GPU和显示器以一种特定的方式协作：\n\n> CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。\n\n![Rendering_pipeline](./Rendering_pipeline.png)\n\n> GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。\n\n* Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。\n\n* Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。\n\n渲染树生成：\n\n![Rendering_pipeline](./Rendering_pipe.png)\n\n2.5.2、Flutter 如何更新界面（Diff）\n\n当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。\n\n![Rendering_pipeline](./Widget_update.png)\n\n> 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。\n>\n> Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n\n### 2.6 跨平台、与原生平台通讯\n\n![Flutter_iOS_Android](./Flutter_iOS_Android.png)\n\nFlutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：\n\n* 应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。\n\n* 宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。\n\n* 硬件交互、推送等服务\n  \n* e.g：获取iOS电量\n  \n2.6.1 Flutter跨端——iOS\n\n> Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。\n>\n> 但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。\n\nFlutter 在iOS 上的启动流程：\n![Launch_flow_ios](./Launch_flow_ios.webp)\n\n> 在应用的 View Controller 初始化后，会实例化一个 Flutter project的抽象（以下简称 project）。project会初始化一个 platform view的抽象实例，这个抽象实例会负责创建 Flutter 的运行时（以下简称 engine）。\n>\n> 当 View Controller将要显示时，调用 project查找和组合 Flutter的应用资源 bundle，并且把资源提供给 engine。\nengine在真正需要执行资源 bundle时才会创建 Dart执行的环境（懒加载，以下简称 Dart Controller），然后设置视图窗口的一些属性等东西（这是绘图引擎必需的）。\n然后 engine中的 Dart Controller会加载 Dart代码并执行，执行的过程中会调用 dart:ui的 native binding实现向 GPU提供数据。\n\n2.6.2 Android\n\n## 3、深入Flutter\n\n### 3.1 体积\n\nFlutter应用的体积由两部分组成：应用代码和 SDK代码。应用代码是 Dart编译后的代码，如果做成可动态下发，那么这部分可以不计。\nSDK代码比较大就有点无奈了，SDK的组成部分有 Dart VM，Dart标准库，libwebp、libpng、libboringssl等第三方库，libskia，Dart UI库，然后再加上 icu_data，可能在单 arch下（iOS），SDK体积达到 40+MB。其中仅仅 Dart VM（不包含标准库）就达到了 7MB。\n\nFlutter SDK是 dynamic framework，如此大的二进制体积可能会造成动态链接耗时长。而如果静态链接，可能原来比较大的 App很有可能造成 TEXT段（iOS默认60M）超标。\n\n### 3.2 帧率\n\nDart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。\n\n在任何系统的UI框架中，动画实现的原理都是相同的，即：\n>在一段时间内，快速地多次改变UI外观，由于人眼会产生视觉暂留，最终看到的就是一个“连续”的动画，这和电影的原理是一样的，而UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），指每秒的动画帧数。很明显，帧率越高则动画就会越流畅。一般情况下，对于人眼来说，动画帧率超过16FPS，就比较流畅了，超过32FPS就会非常的细腻平滑，而超过32FPS基本就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用动画基本是持平的。\n\n### 3.3 [Dart线程和异步](https://flutterchina.club/flutter-for-ios/#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5)\n\n**Isolates：** 现代的浏览器以及移动浏览器都运行在多核 CPU 系统上。 要充分利用这些 CPU，开发者一般使用共享内存 数据来保证多线程的正确执行。然而， 多线程共享数据通常会导致很多潜在的问题，并导致代码运行出错。\n\n所有的 Dart 代码在 isolates 中运行而不是线程。 每个 isolate 都有自己的堆内存，并且确保每个 isolate 的状态都不能被其他 isolate 访问。因此，也不存在资源锁的问题。\n\nDart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。\n\nDart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。\n\n* 多线程示例：[isolate_example](./isolate.dart)\n\n### 3.4 [EventLoop、事件分发](https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a)\n\nFlutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。\n\n事件总线（EventBus）通过流控制器（StreamController）控制 事件流（Stream），事件流可以被监听、唤醒、停止、关闭、下沉，订阅者可以通过流控制器订阅流事件。\n\n### 3.5 事件响应\n\n一个对象是否可以响应事件，取决于其对命中测试的返回，当发生用户事件时，会从根节点（RenderView）开始进行命中测试，下面是RenderView的hitTest()源码：\n\n```dart\nbool hitTest(HitTestResult result, { Offset position }) {\n  if (child != null)\n    child.hitTest(result, position: position); //递归子RenderBox进行命中测试\n  result.add(HitTestEntry(this)); //将测试结果添加到result中\n  return true;\n}\n```\n\nRenderBox默认的hitTest()实现：\n\n```dart\nbool hitTest(HitTestResult result, { @required Offset position }) {\n  ...  \n  if (_size.contains(position)) {\n    if (hitTestChildren(result, position: position) || hitTestSelf(position)) {\n      result.add(BoxHitTestEntry(this, position));\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n我们看到默认的实现里调用了hitTestSelf()和hitTestChildren()两个方法，这两个方法默认实现如下：\n\n```dart\n@protected\nbool hitTestSelf(Offset position) => false;\n\n@protected\nbool hitTestChildren(HitTestResult result, { Offset position }) => false;\n```\n\n> hitTest 方法用来判断该 RenderObject 是否在被点击的范围内，同时负责将被点击的 RenderBox 添加到 HitTestResult 列表中，参数 position 为事件触发的坐标（如果有的话），返回 true 则表示有 RenderBox 通过了命中测试，需要响应事件，反之则认为当前RenderBox没有命中。\n>\n> 在继承RenderBox时，可以直接重写hitTest()方法，也可以重写 hitTestSelf() 或 hitTestChildren(), 唯一不同的是 hitTest()中需要将通过命中测试的节点信息添加到命中测试结果列表中，而 hitTestSelf() 和 hitTestChildren()则只需要简单的返回true或false。\n\n### 3.6 Runtime（AOT）、JIT、Dart VM\n\n### 3.7 性能（CPU、GPU、Network、battery、Disk）\n\n### 3.8 [内存管理](https://mp.weixin.qq.com/s/efKCpCtvvHDHUiAsizobBQ)\n\nDart VM将内存管理分为新生代(New Generation)和老年代(Old Generation)。\n\n* 新生代(New Generation): 通常初次分配的对象都位于新生代中，该区域主要是存放内存较小并且生命周期较短的对象，比如局部变量。新生代会频繁执行内存回收(GC)，回收采用“复制-清除”算法，将内存分为两块(图中的from 和 to)，运行时每次只使用其中的一块(图中的from)，另一块备用(图中的to)。当发生GC时，将当前使用的内存块中存活的对象拷贝到备用内存块中，然后清除当前使用内存块，最后，交换两块内存的角色。\n\n![Memory_Manager](./Memory_Manager_01.webp)\n\n* 老年代(Old Generation): 在新生代的GC中“幸存”下来的对象，它们会被转移到老年代中。老年代存放生命力周期较长，内存较大的对象。老年代通常比新生代要大很多。老年代的GC回收采用“标记-清除”算法，分成标记和清除两个阶段。在标记阶段，所有线程参与并发的完成对回收对象的标记，降低标记阶段耗时。在清理阶段，由GC线程负责清理回收对象，和应用线程同时执行，不影响应用运行。\n![Memory_Manager](./Memory_Manager_02.webp)\n\n### 3.9 技术生态圈\n\n## 4、[Flutter & 原生](https://blog.codemagic.io/flutter-vs-swift/)\n\n1. 界面\n   解决移动端信息展示的目的；\n   都基于声明式、响应式的方式、热重载的方式；\n\n## 5、未来与憧憬\n\n当下的移动端、前端开发技术越来越多样化，复杂化。\n\n就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；\nAndroid的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等。\n\n大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。\n\n前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。\n\n前不久Facebook 又推出了新的[Hermes](https://juejin.im/entry/5d2e6d1ce51d4510664d178e)，用于在React Native应用提高性能的。\n\n个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。\n\n统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。\n\n据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！\n","source":"_posts/Flutters/Guidance/Guidance.md","raw":"---\ntitle: Flutter\nabbrlink: e5974716\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1、入门\n\n### 1.1 语言\n\n1.1.1 Dart：[学习路线](https://dart.dev/tools/sdk)\n\n![Dart](./Dart.png)\n\n1.1.2 Dart [概述](http://dart.goodev.org/guides/language)\n\n1.1.3 Dart [库预览](http://dart.goodev.org/guides/libraries)\n\n### 1.2 工具集\n\n2.1 通用工具\n\n2.1.1 [DartPad](https://dartpad.dartlang.org/)\n\n>DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.\n\n2.1.2 IDEs 与 编辑器\n\n2.1.2.1 IDE： [Android Studio](https://dart.dev/tools/jetbrains-plugin)、[IntelliJ IDEA](https://dart.dev/tools/jetbrains-plugin)、[Visual Studio Code](https://code.visualstudio.com/)\n\n2.1.2.2 IDEDart 社区维护的编辑器：[Emacs](https://github.com/bradyt/dart-mode)、[Atom](https://github.com/dart-atom/dart)、[Vim](https://github.com/dart-lang/dart-vim-plugin)\n\n2.1.3 命令行工具\n\n```shell\ndartanalyzer\n    A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.\n\ndartdoc\n    Generates API reference documentation.\n\ndartfmt\n    Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.\n\npub\n    Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.\n\n    Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:\n\nbuild_runner\n    A code generator.\n\ndartfix\n    A tool for migrating Dart source code and fixing common issues.\n```\n\n2.2 Web工具集\n\n```shell\nwebdev\n    A command line interface (CLI) for Dart web app development, including building and serving web apps.\n\ndart2js\n    The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.\n\ndartdevc\n    The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.\n\nbuild_runner\n    A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.\n```\n\n2.3 命令行工具集与服务器工具集\n\n```shell\nStandalone Dart VM: dart\n    Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.\n\nAOT compiler and runtime: dart2aot, dartaotruntime\n    Support ahead-of-time compilation of Dart code to native x64 machine code.\n\nPub package manager: pub\n    Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.\n```\n\n## 2、Flutter\n\n### 2.1 Flutter是什么\n\n```markdown\nFlutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。\n\nFlutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。\nDart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。\n\nFlutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。\n```\n\n### 2.2 核心原则\n\nFlutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。\n\n一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。\n\n![widget_Render_Object](./Flutter_Render_Object.png)\n\n### 2.3 Widget如何工作\n\n1. **Widget** 实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。\n\n2. 一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。\n  \n3. 最终的UI树其实是由一个个独立的Element节点构成。组件最终的Layout、渲染都是通过RenderObject来完成的，从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。\n\n4. Element就是Widget在UI树具体位置的一个实例化对象，大多数Element只有唯一的renderObject，但还有一些Element会有多个子节点，如继承自RenderObjectElement的一些类，比如MultiChildRenderObjectElement。最终所有Element的RenderObject构成一棵树，我们称之为渲染树，即render tree。\n\n5. Element的生命周期如下：\n\n    1. Framework 调用Widget.createElement 创建一个Element实例，记为element。\n    2. Framework 调用 element.mount(parentElement,newSlot) ，mount方法中首先调用elment所对应Widget的createRenderObject方法创建与element相关联的RenderObject对象，然后调用element.attachRenderObject方法将element.renderObject添加到渲染树中插槽指定的位置（这一步不是必须的，一般发生在Element树结构发生变化时才需要重新attach）。插入到渲染树后的element就处于“active”状态，处于“active”状态后就可以显示在屏幕上了（可以隐藏）。\n    3. 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n    4. 当有父Widget的配置数据改变时，同时其State.build返回的Widget结构与之前不同，此时就需要重新构建对应的Element树。为了进行Element复用，在Element重新构建前会先尝试是否可以复用旧树上相同位置的element，element节点在更新前都会调用其对应Widget的canUpdate方法，如果返回true，则复用旧Element，旧的Element会使用新Widget配置数据更新，反之则会创建一个新的Element。Widget.canUpdate主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来避免复用。\n    5. 当有祖先Element决定要移除element 时（如Widget树结构发生了变化，导致element对应的Widget被移除），这时该祖先Element就会调用deactivateChild 方法来移除它，移除后element.renderObject也会被从渲染树中移除，然后Framework会调用element.deactivate 方法，这时element状态变为“inactive”状态。\n    6. “inactive”态的element将不会再显示到屏幕。为了避免在一次动画执行过程中反复创建、移除某个特定element，“inactive”态的element在当前动画最后一帧结束前都会保留，如果在动画执行结束后它还未能重新变成”active“状态，Framework就会调用其unmount方法将其彻底移除，这时element的状态为defunct,它将永远不会再被插入到树中。\n    7. 如果element要重新插入到Element树的其它位置，如element或element的祖先拥有一个GlobalKey（用于全局复用元素），那么Framework会先将element从现有位置移除，然后再调用其activate方法，并将其renderObject重新attach到渲染树。\n\n### 2.4 框架\n\n![Flutter框架](./Flutter_Frameworks.png)\n\n**Flutter Framework:** 这是一个纯 Dart实现的 SDK。它实现了一套基础库， 用于处理动画、绘图和手势。并且基于绘图封装了一套 UI组件库，然后根据 Material 和Cupertino两种视觉风格区分开来。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。\n\n**Flutter Engine:** 这是一个纯 C++实现的 SDK，其中囊括了 Skia引擎、Dart运行时、文字排版引擎等。不过说白了，它就是 Dart的一个运行时，它可以以 JIT、JIT Snapshot 或者 AOT的模式运行 Dart代码。在代码调用 dart:ui库时，提供 dart:ui库中 Native Binding 实现。 不过别忘了，这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码。\n\n### 2.5 界面渲染\n\n2.5.1 Flutter 如何渲染界面\n\n在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：\n\n![iOS_Render_flow](./iOS_Render_flow.webp)\n\nCPU、GPU和显示器以一种特定的方式协作：\n\n> CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。\n\n![Rendering_pipeline](./Rendering_pipeline.png)\n\n> GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。\n\n* Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。\n\n* Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。\n\n渲染树生成：\n\n![Rendering_pipeline](./Rendering_pipe.png)\n\n2.5.2、Flutter 如何更新界面（Diff）\n\n当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。\n\n![Rendering_pipeline](./Widget_update.png)\n\n> 当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。\n>\n> Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。\n\n### 2.6 跨平台、与原生平台通讯\n\n![Flutter_iOS_Android](./Flutter_iOS_Android.png)\n\nFlutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：\n\n* 应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。\n\n* 宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。\n\n* 硬件交互、推送等服务\n  \n* e.g：获取iOS电量\n  \n2.6.1 Flutter跨端——iOS\n\n> Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。\n>\n> 但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。\n\nFlutter 在iOS 上的启动流程：\n![Launch_flow_ios](./Launch_flow_ios.webp)\n\n> 在应用的 View Controller 初始化后，会实例化一个 Flutter project的抽象（以下简称 project）。project会初始化一个 platform view的抽象实例，这个抽象实例会负责创建 Flutter 的运行时（以下简称 engine）。\n>\n> 当 View Controller将要显示时，调用 project查找和组合 Flutter的应用资源 bundle，并且把资源提供给 engine。\nengine在真正需要执行资源 bundle时才会创建 Dart执行的环境（懒加载，以下简称 Dart Controller），然后设置视图窗口的一些属性等东西（这是绘图引擎必需的）。\n然后 engine中的 Dart Controller会加载 Dart代码并执行，执行的过程中会调用 dart:ui的 native binding实现向 GPU提供数据。\n\n2.6.2 Android\n\n## 3、深入Flutter\n\n### 3.1 体积\n\nFlutter应用的体积由两部分组成：应用代码和 SDK代码。应用代码是 Dart编译后的代码，如果做成可动态下发，那么这部分可以不计。\nSDK代码比较大就有点无奈了，SDK的组成部分有 Dart VM，Dart标准库，libwebp、libpng、libboringssl等第三方库，libskia，Dart UI库，然后再加上 icu_data，可能在单 arch下（iOS），SDK体积达到 40+MB。其中仅仅 Dart VM（不包含标准库）就达到了 7MB。\n\nFlutter SDK是 dynamic framework，如此大的二进制体积可能会造成动态链接耗时长。而如果静态链接，可能原来比较大的 App很有可能造成 TEXT段（iOS默认60M）超标。\n\n### 3.2 帧率\n\nDart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。\n\n在任何系统的UI框架中，动画实现的原理都是相同的，即：\n>在一段时间内，快速地多次改变UI外观，由于人眼会产生视觉暂留，最终看到的就是一个“连续”的动画，这和电影的原理是一样的，而UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），指每秒的动画帧数。很明显，帧率越高则动画就会越流畅。一般情况下，对于人眼来说，动画帧率超过16FPS，就比较流畅了，超过32FPS就会非常的细腻平滑，而超过32FPS基本就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用动画基本是持平的。\n\n### 3.3 [Dart线程和异步](https://flutterchina.club/flutter-for-ios/#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5)\n\n**Isolates：** 现代的浏览器以及移动浏览器都运行在多核 CPU 系统上。 要充分利用这些 CPU，开发者一般使用共享内存 数据来保证多线程的正确执行。然而， 多线程共享数据通常会导致很多潜在的问题，并导致代码运行出错。\n\n所有的 Dart 代码在 isolates 中运行而不是线程。 每个 isolate 都有自己的堆内存，并且确保每个 isolate 的状态都不能被其他 isolate 访问。因此，也不存在资源锁的问题。\n\nDart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。\n\nDart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。\n\n* 多线程示例：[isolate_example](./isolate.dart)\n\n### 3.4 [EventLoop、事件分发](https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a)\n\nFlutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。\n\n事件总线（EventBus）通过流控制器（StreamController）控制 事件流（Stream），事件流可以被监听、唤醒、停止、关闭、下沉，订阅者可以通过流控制器订阅流事件。\n\n### 3.5 事件响应\n\n一个对象是否可以响应事件，取决于其对命中测试的返回，当发生用户事件时，会从根节点（RenderView）开始进行命中测试，下面是RenderView的hitTest()源码：\n\n```dart\nbool hitTest(HitTestResult result, { Offset position }) {\n  if (child != null)\n    child.hitTest(result, position: position); //递归子RenderBox进行命中测试\n  result.add(HitTestEntry(this)); //将测试结果添加到result中\n  return true;\n}\n```\n\nRenderBox默认的hitTest()实现：\n\n```dart\nbool hitTest(HitTestResult result, { @required Offset position }) {\n  ...  \n  if (_size.contains(position)) {\n    if (hitTestChildren(result, position: position) || hitTestSelf(position)) {\n      result.add(BoxHitTestEntry(this, position));\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n我们看到默认的实现里调用了hitTestSelf()和hitTestChildren()两个方法，这两个方法默认实现如下：\n\n```dart\n@protected\nbool hitTestSelf(Offset position) => false;\n\n@protected\nbool hitTestChildren(HitTestResult result, { Offset position }) => false;\n```\n\n> hitTest 方法用来判断该 RenderObject 是否在被点击的范围内，同时负责将被点击的 RenderBox 添加到 HitTestResult 列表中，参数 position 为事件触发的坐标（如果有的话），返回 true 则表示有 RenderBox 通过了命中测试，需要响应事件，反之则认为当前RenderBox没有命中。\n>\n> 在继承RenderBox时，可以直接重写hitTest()方法，也可以重写 hitTestSelf() 或 hitTestChildren(), 唯一不同的是 hitTest()中需要将通过命中测试的节点信息添加到命中测试结果列表中，而 hitTestSelf() 和 hitTestChildren()则只需要简单的返回true或false。\n\n### 3.6 Runtime（AOT）、JIT、Dart VM\n\n### 3.7 性能（CPU、GPU、Network、battery、Disk）\n\n### 3.8 [内存管理](https://mp.weixin.qq.com/s/efKCpCtvvHDHUiAsizobBQ)\n\nDart VM将内存管理分为新生代(New Generation)和老年代(Old Generation)。\n\n* 新生代(New Generation): 通常初次分配的对象都位于新生代中，该区域主要是存放内存较小并且生命周期较短的对象，比如局部变量。新生代会频繁执行内存回收(GC)，回收采用“复制-清除”算法，将内存分为两块(图中的from 和 to)，运行时每次只使用其中的一块(图中的from)，另一块备用(图中的to)。当发生GC时，将当前使用的内存块中存活的对象拷贝到备用内存块中，然后清除当前使用内存块，最后，交换两块内存的角色。\n\n![Memory_Manager](./Memory_Manager_01.webp)\n\n* 老年代(Old Generation): 在新生代的GC中“幸存”下来的对象，它们会被转移到老年代中。老年代存放生命力周期较长，内存较大的对象。老年代通常比新生代要大很多。老年代的GC回收采用“标记-清除”算法，分成标记和清除两个阶段。在标记阶段，所有线程参与并发的完成对回收对象的标记，降低标记阶段耗时。在清理阶段，由GC线程负责清理回收对象，和应用线程同时执行，不影响应用运行。\n![Memory_Manager](./Memory_Manager_02.webp)\n\n### 3.9 技术生态圈\n\n## 4、[Flutter & 原生](https://blog.codemagic.io/flutter-vs-swift/)\n\n1. 界面\n   解决移动端信息展示的目的；\n   都基于声明式、响应式的方式、热重载的方式；\n\n## 5、未来与憧憬\n\n当下的移动端、前端开发技术越来越多样化，复杂化。\n\n就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；\nAndroid的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等。\n\n大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。\n\n前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。\n\n前不久Facebook 又推出了新的[Hermes](https://juejin.im/entry/5d2e6d1ce51d4510664d178e)，用于在React Native应用提高性能的。\n\n个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。\n\n统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。\n\n据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！\n","slug":"Flutters/Guidance/Guidance","published":1,"updated":"2021-07-29T06:46:00.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzt000xiu9k0qsvfe51","content":"<h2 id=\"1、入门\"><a href=\"#1、入门\" class=\"headerlink\" title=\"1、入门\"></a>1、入门</h2><h3 id=\"1-1-语言\"><a href=\"#1-1-语言\" class=\"headerlink\" title=\"1.1 语言\"></a>1.1 语言</h3><p>1.1.1 Dart：<a href=\"https://dart.dev/tools/sdk\">学习路线</a></p>\n<p><img src=\"/./Dart.png\" alt=\"Dart\"></p>\n<p>1.1.2 Dart <a href=\"http://dart.goodev.org/guides/language\">概述</a></p>\n<p>1.1.3 Dart <a href=\"http://dart.goodev.org/guides/libraries\">库预览</a></p>\n<h3 id=\"1-2-工具集\"><a href=\"#1-2-工具集\" class=\"headerlink\" title=\"1.2 工具集\"></a>1.2 工具集</h3><p>2.1 通用工具</p>\n<p>2.1.1 <a href=\"https://dartpad.dartlang.org/\">DartPad</a></p>\n<blockquote>\n<p>DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.</p>\n</blockquote>\n<p>2.1.2 IDEs 与 编辑器</p>\n<p>2.1.2.1 IDE： <a href=\"https://dart.dev/tools/jetbrains-plugin\">Android Studio</a>、<a href=\"https://dart.dev/tools/jetbrains-plugin\">IntelliJ IDEA</a>、<a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></p>\n<p>2.1.2.2 IDEDart 社区维护的编辑器：<a href=\"https://github.com/bradyt/dart-mode\">Emacs</a>、<a href=\"https://github.com/dart-atom/dart\">Atom</a>、<a href=\"https://github.com/dart-lang/dart-vim-plugin\">Vim</a></p>\n<p>2.1.3 命令行工具</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dartanalyzer</span><br><span class=\"line\">    A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.</span><br><span class=\"line\"></span><br><span class=\"line\">dartdoc</span><br><span class=\"line\">    Generates API reference documentation.</span><br><span class=\"line\"></span><br><span class=\"line\">dartfmt</span><br><span class=\"line\">    Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.</span><br><span class=\"line\"></span><br><span class=\"line\">pub</span><br><span class=\"line\">    Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.</span><br><span class=\"line\"></span><br><span class=\"line\">    Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:</span><br><span class=\"line\"></span><br><span class=\"line\">build_runner</span><br><span class=\"line\">    A code generator.</span><br><span class=\"line\"></span><br><span class=\"line\">dartfix</span><br><span class=\"line\">    A tool for migrating Dart source code and fixing common issues.</span><br></pre></td></tr></table></figure>\n\n<p>2.2 Web工具集</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webdev</span><br><span class=\"line\">    A command line interface (CLI) for Dart web app development, including building and serving web apps.</span><br><span class=\"line\"></span><br><span class=\"line\">dart2js</span><br><span class=\"line\">    The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.</span><br><span class=\"line\"></span><br><span class=\"line\">dartdevc</span><br><span class=\"line\">    The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.</span><br><span class=\"line\"></span><br><span class=\"line\">build_runner</span><br><span class=\"line\">    A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.</span><br></pre></td></tr></table></figure>\n\n<p>2.3 命令行工具集与服务器工具集</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Standalone Dart VM: dart</span><br><span class=\"line\">    Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.</span><br><span class=\"line\"></span><br><span class=\"line\">AOT compiler and runtime: dart2aot, dartaotruntime</span><br><span class=\"line\">    Support ahead-of-time compilation of Dart code to native x64 machine code.</span><br><span class=\"line\"></span><br><span class=\"line\">Pub package manager: pub</span><br><span class=\"line\">    Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、Flutter\"><a href=\"#2、Flutter\" class=\"headerlink\" title=\"2、Flutter\"></a>2、Flutter</h2><h3 id=\"2-1-Flutter是什么\"><a href=\"#2-1-Flutter是什么\" class=\"headerlink\" title=\"2.1 Flutter是什么\"></a>2.1 Flutter是什么</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。</span><br><span class=\"line\"></span><br><span class=\"line\">Flutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。</span><br><span class=\"line\">Dart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。</span><br><span class=\"line\"></span><br><span class=\"line\">Flutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-核心原则\"><a href=\"#2-2-核心原则\" class=\"headerlink\" title=\"2.2 核心原则\"></a>2.2 核心原则</h3><p>Flutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。</p>\n<p>一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。</p>\n<p><img src=\"/./Flutter_Render_Object.png\" alt=\"widget_Render_Object\"></p>\n<h3 id=\"2-3-Widget如何工作\"><a href=\"#2-3-Widget如何工作\" class=\"headerlink\" title=\"2.3 Widget如何工作\"></a>2.3 Widget如何工作</h3><ol>\n<li><p><strong>Widget</strong> 实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。</p>\n</li>\n<li><p>一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。</p>\n</li>\n<li><p>最终的UI树其实是由一个个独立的Element节点构成。组件最终的Layout、渲染都是通过RenderObject来完成的，从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。</p>\n</li>\n<li><p>Element就是Widget在UI树具体位置的一个实例化对象，大多数Element只有唯一的renderObject，但还有一些Element会有多个子节点，如继承自RenderObjectElement的一些类，比如MultiChildRenderObjectElement。最终所有Element的RenderObject构成一棵树，我们称之为渲染树，即render tree。</p>\n</li>\n<li><p>Element的生命周期如下：</p>\n<ol>\n<li>Framework 调用Widget.createElement 创建一个Element实例，记为element。</li>\n<li>Framework 调用 element.mount(parentElement,newSlot) ，mount方法中首先调用elment所对应Widget的createRenderObject方法创建与element相关联的RenderObject对象，然后调用element.attachRenderObject方法将element.renderObject添加到渲染树中插槽指定的位置（这一步不是必须的，一般发生在Element树结构发生变化时才需要重新attach）。插入到渲染树后的element就处于“active”状态，处于“active”状态后就可以显示在屏幕上了（可以隐藏）。</li>\n<li>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</li>\n<li>当有父Widget的配置数据改变时，同时其State.build返回的Widget结构与之前不同，此时就需要重新构建对应的Element树。为了进行Element复用，在Element重新构建前会先尝试是否可以复用旧树上相同位置的element，element节点在更新前都会调用其对应Widget的canUpdate方法，如果返回true，则复用旧Element，旧的Element会使用新Widget配置数据更新，反之则会创建一个新的Element。Widget.canUpdate主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来避免复用。</li>\n<li>当有祖先Element决定要移除element 时（如Widget树结构发生了变化，导致element对应的Widget被移除），这时该祖先Element就会调用deactivateChild 方法来移除它，移除后element.renderObject也会被从渲染树中移除，然后Framework会调用element.deactivate 方法，这时element状态变为“inactive”状态。</li>\n<li>“inactive”态的element将不会再显示到屏幕。为了避免在一次动画执行过程中反复创建、移除某个特定element，“inactive”态的element在当前动画最后一帧结束前都会保留，如果在动画执行结束后它还未能重新变成”active“状态，Framework就会调用其unmount方法将其彻底移除，这时element的状态为defunct,它将永远不会再被插入到树中。</li>\n<li>如果element要重新插入到Element树的其它位置，如element或element的祖先拥有一个GlobalKey（用于全局复用元素），那么Framework会先将element从现有位置移除，然后再调用其activate方法，并将其renderObject重新attach到渲染树。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"2-4-框架\"><a href=\"#2-4-框架\" class=\"headerlink\" title=\"2.4 框架\"></a>2.4 框架</h3><p><img src=\"/./Flutter_Frameworks.png\" alt=\"Flutter框架\"></p>\n<p><strong>Flutter Framework:</strong> 这是一个纯 Dart实现的 SDK。它实现了一套基础库， 用于处理动画、绘图和手势。并且基于绘图封装了一套 UI组件库，然后根据 Material 和Cupertino两种视觉风格区分开来。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。</p>\n<p><strong>Flutter Engine:</strong> 这是一个纯 C++实现的 SDK，其中囊括了 Skia引擎、Dart运行时、文字排版引擎等。不过说白了，它就是 Dart的一个运行时，它可以以 JIT、JIT Snapshot 或者 AOT的模式运行 Dart代码。在代码调用 dart:ui库时，提供 dart:ui库中 Native Binding 实现。 不过别忘了，这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码。</p>\n<h3 id=\"2-5-界面渲染\"><a href=\"#2-5-界面渲染\" class=\"headerlink\" title=\"2.5 界面渲染\"></a>2.5 界面渲染</h3><p>2.5.1 Flutter 如何渲染界面</p>\n<p>在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：</p>\n<p><img src=\"/./iOS_Render_flow.webp\" alt=\"iOS_Render_flow\"></p>\n<p>CPU、GPU和显示器以一种特定的方式协作：</p>\n<blockquote>\n<p>CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。</p>\n</blockquote>\n<p><img src=\"/./Rendering_pipeline.png\" alt=\"Rendering_pipeline\"></p>\n<blockquote>\n<p>GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。</p>\n</blockquote>\n<ul>\n<li><p>Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。</p>\n</li>\n<li><p>Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。</p>\n</li>\n</ul>\n<p>渲染树生成：</p>\n<p><img src=\"/./Rendering_pipe.png\" alt=\"Rendering_pipeline\"></p>\n<p>2.5.2、Flutter 如何更新界面（Diff）</p>\n<p>当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p>\n<p><img src=\"/./Widget_update.png\" alt=\"Rendering_pipeline\"></p>\n<blockquote>\n<p>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。</p>\n<p>Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</p>\n</blockquote>\n<h3 id=\"2-6-跨平台、与原生平台通讯\"><a href=\"#2-6-跨平台、与原生平台通讯\" class=\"headerlink\" title=\"2.6 跨平台、与原生平台通讯\"></a>2.6 跨平台、与原生平台通讯</h3><p><img src=\"/./Flutter_iOS_Android.png\" alt=\"Flutter_iOS_Android\"></p>\n<p>Flutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：</p>\n<ul>\n<li><p>应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。</p>\n</li>\n<li><p>宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。</p>\n</li>\n<li><p>硬件交互、推送等服务</p>\n</li>\n<li><p>e.g：获取iOS电量</p>\n</li>\n</ul>\n<p>2.6.1 Flutter跨端——iOS</p>\n<blockquote>\n<p>Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。</p>\n<p>但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。</p>\n</blockquote>\n<p>Flutter 在iOS 上的启动流程：<br><img src=\"/./Launch_flow_ios.webp\" alt=\"Launch_flow_ios\"></p>\n<blockquote>\n<p>在应用的 View Controller 初始化后，会实例化一个 Flutter project的抽象（以下简称 project）。project会初始化一个 platform view的抽象实例，这个抽象实例会负责创建 Flutter 的运行时（以下简称 engine）。</p>\n<p>当 View Controller将要显示时，调用 project查找和组合 Flutter的应用资源 bundle，并且把资源提供给 engine。<br>engine在真正需要执行资源 bundle时才会创建 Dart执行的环境（懒加载，以下简称 Dart Controller），然后设置视图窗口的一些属性等东西（这是绘图引擎必需的）。<br>然后 engine中的 Dart Controller会加载 Dart代码并执行，执行的过程中会调用 dart:ui的 native binding实现向 GPU提供数据。</p>\n</blockquote>\n<p>2.6.2 Android</p>\n<h2 id=\"3、深入Flutter\"><a href=\"#3、深入Flutter\" class=\"headerlink\" title=\"3、深入Flutter\"></a>3、深入Flutter</h2><h3 id=\"3-1-体积\"><a href=\"#3-1-体积\" class=\"headerlink\" title=\"3.1 体积\"></a>3.1 体积</h3><p>Flutter应用的体积由两部分组成：应用代码和 SDK代码。应用代码是 Dart编译后的代码，如果做成可动态下发，那么这部分可以不计。<br>SDK代码比较大就有点无奈了，SDK的组成部分有 Dart VM，Dart标准库，libwebp、libpng、libboringssl等第三方库，libskia，Dart UI库，然后再加上 icu_data，可能在单 arch下（iOS），SDK体积达到 40+MB。其中仅仅 Dart VM（不包含标准库）就达到了 7MB。</p>\n<p>Flutter SDK是 dynamic framework，如此大的二进制体积可能会造成动态链接耗时长。而如果静态链接，可能原来比较大的 App很有可能造成 TEXT段（iOS默认60M）超标。</p>\n<h3 id=\"3-2-帧率\"><a href=\"#3-2-帧率\" class=\"headerlink\" title=\"3.2 帧率\"></a>3.2 帧率</h3><p>Dart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。</p>\n<p>在任何系统的UI框架中，动画实现的原理都是相同的，即：</p>\n<blockquote>\n<p>在一段时间内，快速地多次改变UI外观，由于人眼会产生视觉暂留，最终看到的就是一个“连续”的动画，这和电影的原理是一样的，而UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），指每秒的动画帧数。很明显，帧率越高则动画就会越流畅。一般情况下，对于人眼来说，动画帧率超过16FPS，就比较流畅了，超过32FPS就会非常的细腻平滑，而超过32FPS基本就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用动画基本是持平的。</p>\n</blockquote>\n<h3 id=\"3-3-Dart线程和异步\"><a href=\"#3-3-Dart线程和异步\" class=\"headerlink\" title=\"3.3 Dart线程和异步\"></a>3.3 <a href=\"https://flutterchina.club/flutter-for-ios/#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5\">Dart线程和异步</a></h3><p><strong>Isolates：</strong> 现代的浏览器以及移动浏览器都运行在多核 CPU 系统上。 要充分利用这些 CPU，开发者一般使用共享内存 数据来保证多线程的正确执行。然而， 多线程共享数据通常会导致很多潜在的问题，并导致代码运行出错。</p>\n<p>所有的 Dart 代码在 isolates 中运行而不是线程。 每个 isolate 都有自己的堆内存，并且确保每个 isolate 的状态都不能被其他 isolate 访问。因此，也不存在资源锁的问题。</p>\n<p>Dart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。</p>\n<p>Dart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。</p>\n<ul>\n<li>多线程示例：<a href=\"./isolate.dart\">isolate_example</a></li>\n</ul>\n<h3 id=\"3-4-EventLoop、事件分发\"><a href=\"#3-4-EventLoop、事件分发\" class=\"headerlink\" title=\"3.4 EventLoop、事件分发\"></a>3.4 <a href=\"https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a\">EventLoop、事件分发</a></h3><p>Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。</p>\n<p>事件总线（EventBus）通过流控制器（StreamController）控制 事件流（Stream），事件流可以被监听、唤醒、停止、关闭、下沉，订阅者可以通过流控制器订阅流事件。</p>\n<h3 id=\"3-5-事件响应\"><a href=\"#3-5-事件响应\" class=\"headerlink\" title=\"3.5 事件响应\"></a>3.5 事件响应</h3><p>一个对象是否可以响应事件，取决于其对命中测试的返回，当发生用户事件时，会从根节点（RenderView）开始进行命中测试，下面是RenderView的hitTest()源码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> hitTest(HitTestResult result, &#123; Offset position &#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    child.hitTest(result, position: position); <span class=\"comment\">//递归子RenderBox进行命中测试</span></span><br><span class=\"line\">  result.add(HitTestEntry(<span class=\"keyword\">this</span>)); <span class=\"comment\">//将测试结果添加到result中</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>RenderBox默认的hitTest()实现：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> hitTest(HitTestResult result, &#123; <span class=\"meta\">@required</span> Offset position &#125;) &#123;</span><br><span class=\"line\">  ...  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_size.contains(position)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hitTestChildren(result, position: position) || hitTestSelf(position)) &#123;</span><br><span class=\"line\">      result.add(BoxHitTestEntry(<span class=\"keyword\">this</span>, position));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们看到默认的实现里调用了hitTestSelf()和hitTestChildren()两个方法，这两个方法默认实现如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@protected</span></span><br><span class=\"line\"><span class=\"built_in\">bool</span> hitTestSelf(Offset position) =&gt; <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@protected</span></span><br><span class=\"line\"><span class=\"built_in\">bool</span> hitTestChildren(HitTestResult result, &#123; Offset position &#125;) =&gt; <span class=\"keyword\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>hitTest 方法用来判断该 RenderObject 是否在被点击的范围内，同时负责将被点击的 RenderBox 添加到 HitTestResult 列表中，参数 position 为事件触发的坐标（如果有的话），返回 true 则表示有 RenderBox 通过了命中测试，需要响应事件，反之则认为当前RenderBox没有命中。</p>\n<p>在继承RenderBox时，可以直接重写hitTest()方法，也可以重写 hitTestSelf() 或 hitTestChildren(), 唯一不同的是 hitTest()中需要将通过命中测试的节点信息添加到命中测试结果列表中，而 hitTestSelf() 和 hitTestChildren()则只需要简单的返回true或false。</p>\n</blockquote>\n<h3 id=\"3-6-Runtime（AOT）、JIT、Dart-VM\"><a href=\"#3-6-Runtime（AOT）、JIT、Dart-VM\" class=\"headerlink\" title=\"3.6 Runtime（AOT）、JIT、Dart VM\"></a>3.6 Runtime（AOT）、JIT、Dart VM</h3><h3 id=\"3-7-性能（CPU、GPU、Network、battery、Disk）\"><a href=\"#3-7-性能（CPU、GPU、Network、battery、Disk）\" class=\"headerlink\" title=\"3.7 性能（CPU、GPU、Network、battery、Disk）\"></a>3.7 性能（CPU、GPU、Network、battery、Disk）</h3><h3 id=\"3-8-内存管理\"><a href=\"#3-8-内存管理\" class=\"headerlink\" title=\"3.8 内存管理\"></a>3.8 <a href=\"https://mp.weixin.qq.com/s/efKCpCtvvHDHUiAsizobBQ\">内存管理</a></h3><p>Dart VM将内存管理分为新生代(New Generation)和老年代(Old Generation)。</p>\n<ul>\n<li>新生代(New Generation): 通常初次分配的对象都位于新生代中，该区域主要是存放内存较小并且生命周期较短的对象，比如局部变量。新生代会频繁执行内存回收(GC)，回收采用“复制-清除”算法，将内存分为两块(图中的from 和 to)，运行时每次只使用其中的一块(图中的from)，另一块备用(图中的to)。当发生GC时，将当前使用的内存块中存活的对象拷贝到备用内存块中，然后清除当前使用内存块，最后，交换两块内存的角色。</li>\n</ul>\n<p><img src=\"/./Memory_Manager_01.webp\" alt=\"Memory_Manager\"></p>\n<ul>\n<li>老年代(Old Generation): 在新生代的GC中“幸存”下来的对象，它们会被转移到老年代中。老年代存放生命力周期较长，内存较大的对象。老年代通常比新生代要大很多。老年代的GC回收采用“标记-清除”算法，分成标记和清除两个阶段。在标记阶段，所有线程参与并发的完成对回收对象的标记，降低标记阶段耗时。在清理阶段，由GC线程负责清理回收对象，和应用线程同时执行，不影响应用运行。<br><img src=\"/./Memory_Manager_02.webp\" alt=\"Memory_Manager\"></li>\n</ul>\n<h3 id=\"3-9-技术生态圈\"><a href=\"#3-9-技术生态圈\" class=\"headerlink\" title=\"3.9 技术生态圈\"></a>3.9 技术生态圈</h3><h2 id=\"4、Flutter-amp-原生\"><a href=\"#4、Flutter-amp-原生\" class=\"headerlink\" title=\"4、Flutter &amp; 原生\"></a>4、<a href=\"https://blog.codemagic.io/flutter-vs-swift/\">Flutter &amp; 原生</a></h2><ol>\n<li>界面<br>解决移动端信息展示的目的；<br>都基于声明式、响应式的方式、热重载的方式；</li>\n</ol>\n<h2 id=\"5、未来与憧憬\"><a href=\"#5、未来与憧憬\" class=\"headerlink\" title=\"5、未来与憧憬\"></a>5、未来与憧憬</h2><p>当下的移动端、前端开发技术越来越多样化，复杂化。</p>\n<p>就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；<br>Android的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等。</p>\n<p>大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。</p>\n<p>前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。</p>\n<p>前不久Facebook 又推出了新的<a href=\"https://juejin.im/entry/5d2e6d1ce51d4510664d178e\">Hermes</a>，用于在React Native应用提高性能的。</p>\n<p>个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。</p>\n<p>统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。</p>\n<p>据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、入门\"><a href=\"#1、入门\" class=\"headerlink\" title=\"1、入门\"></a>1、入门</h2><h3 id=\"1-1-语言\"><a href=\"#1-1-语言\" class=\"headerlink\" title=\"1.1 语言\"></a>1.1 语言</h3><p>1.1.1 Dart：<a href=\"https://dart.dev/tools/sdk\">学习路线</a></p>\n<p><img src=\"/./Dart.png\" alt=\"Dart\"></p>\n<p>1.1.2 Dart <a href=\"http://dart.goodev.org/guides/language\">概述</a></p>\n<p>1.1.3 Dart <a href=\"http://dart.goodev.org/guides/libraries\">库预览</a></p>\n<h3 id=\"1-2-工具集\"><a href=\"#1-2-工具集\" class=\"headerlink\" title=\"1.2 工具集\"></a>1.2 工具集</h3><p>2.1 通用工具</p>\n<p>2.1.1 <a href=\"https://dartpad.dartlang.org/\">DartPad</a></p>\n<blockquote>\n<p>DartPad is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features. It supports Dart’s core libraries, except for VM libraries such as dart:io.</p>\n</blockquote>\n<p>2.1.2 IDEs 与 编辑器</p>\n<p>2.1.2.1 IDE： <a href=\"https://dart.dev/tools/jetbrains-plugin\">Android Studio</a>、<a href=\"https://dart.dev/tools/jetbrains-plugin\">IntelliJ IDEA</a>、<a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></p>\n<p>2.1.2.2 IDEDart 社区维护的编辑器：<a href=\"https://github.com/bradyt/dart-mode\">Emacs</a>、<a href=\"https://github.com/dart-atom/dart\">Atom</a>、<a href=\"https://github.com/dart-lang/dart-vim-plugin\">Vim</a></p>\n<p>2.1.3 命令行工具</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dartanalyzer</span><br><span class=\"line\">    A static analyzer that evaluates and reports any errors or warnings in your code. The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line.</span><br><span class=\"line\"></span><br><span class=\"line\">dartdoc</span><br><span class=\"line\">    Generates API reference documentation.</span><br><span class=\"line\"></span><br><span class=\"line\">dartfmt</span><br><span class=\"line\">    Formats your code, following the recommendations of the Dart style guide. IDEs that support Dart generally allow you to format the code within the IDE. Or you can run the formatter from the command line.</span><br><span class=\"line\"></span><br><span class=\"line\">pub</span><br><span class=\"line\">    Manages Dart packages, making it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. Some Dart technologies, such as Flutter, may not support all of the pub commands. IDEs that support Dart generally have special support for pub, but you can also use it from the command line.</span><br><span class=\"line\"></span><br><span class=\"line\">    Some additional tools are available in packages. To install these tools, use the pub command, as described in each tool’s installation instructions. Here are the general-purpose tools you might want to install:</span><br><span class=\"line\"></span><br><span class=\"line\">build_runner</span><br><span class=\"line\">    A code generator.</span><br><span class=\"line\"></span><br><span class=\"line\">dartfix</span><br><span class=\"line\">    A tool for migrating Dart source code and fixing common issues.</span><br></pre></td></tr></table></figure>\n\n<p>2.2 Web工具集</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webdev</span><br><span class=\"line\">    A command line interface (CLI) for Dart web app development, including building and serving web apps.</span><br><span class=\"line\"></span><br><span class=\"line\">dart2js</span><br><span class=\"line\">    The original Dart-to-JavaScript compiler, with tree shaking. IDEs and the webdev CLI use dart2js when building web apps for deployment.</span><br><span class=\"line\"></span><br><span class=\"line\">dartdevc</span><br><span class=\"line\">    The Dart dev compiler, a modular Dart-to-JavaScript compiler. IDEs and the webdev CLI use dartdevc when running a development server.</span><br><span class=\"line\"></span><br><span class=\"line\">build_runner</span><br><span class=\"line\">    A build package that’s used by the webdev CLI. You can use it directly for testing or if you need more configurability than webdev provides.</span><br></pre></td></tr></table></figure>\n\n<p>2.3 命令行工具集与服务器工具集</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Standalone Dart VM: dart</span><br><span class=\"line\">    Executes Dart code. IDEs that support Dart, and some of the pub commands, use this command behind-the-scenes to execute Dart scripts. Note that you must configure your IDE with the location of the dart binary.</span><br><span class=\"line\"></span><br><span class=\"line\">AOT compiler and runtime: dart2aot, dartaotruntime</span><br><span class=\"line\">    Support ahead-of-time compilation of Dart code to native x64 machine code.</span><br><span class=\"line\"></span><br><span class=\"line\">Pub package manager: pub</span><br><span class=\"line\">    Simplifies downloading and running scripts, with commands such as pub get, pub global activate, pub global run, and pub run.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、Flutter\"><a href=\"#2、Flutter\" class=\"headerlink\" title=\"2、Flutter\"></a>2、Flutter</h2><h3 id=\"2-1-Flutter是什么\"><a href=\"#2-1-Flutter是什么\" class=\"headerlink\" title=\"2.1 Flutter是什么\"></a>2.1 Flutter是什么</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。</span><br><span class=\"line\"></span><br><span class=\"line\">Flutter 有自己的一套UI界面方式，通过Dart UI 构建界面，跟原生界面组件没有关系。</span><br><span class=\"line\">Dart API，底层通过OpenGL这种跨平台的绘制库（内部会调用操作系统API）实现了一套代码跨多端。由于Dart API也是调用操作系统API，所以它的性能接近原生。</span><br><span class=\"line\"></span><br><span class=\"line\">Flutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-核心原则\"><a href=\"#2-2-核心原则\" class=\"headerlink\" title=\"2.2 核心原则\"></a>2.2 核心原则</h3><p>Flutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。</p>\n<p>一切皆为widget，Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。</p>\n<p><img src=\"/./Flutter_Render_Object.png\" alt=\"widget_Render_Object\"></p>\n<h3 id=\"2-3-Widget如何工作\"><a href=\"#2-3-Widget如何工作\" class=\"headerlink\" title=\"2.3 Widget如何工作\"></a>2.3 Widget如何工作</h3><ol>\n<li><p><strong>Widget</strong> 实际上就是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成，所以它们之间有对应关系，所以在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树。</p>\n</li>\n<li><p>一个Widget对象可以对应多个Element对象。这很好理解，根据同一份配置（Widget），可以创建多个实例（Element）。</p>\n</li>\n<li><p>最终的UI树其实是由一个个独立的Element节点构成。组件最终的Layout、渲染都是通过RenderObject来完成的，从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。</p>\n</li>\n<li><p>Element就是Widget在UI树具体位置的一个实例化对象，大多数Element只有唯一的renderObject，但还有一些Element会有多个子节点，如继承自RenderObjectElement的一些类，比如MultiChildRenderObjectElement。最终所有Element的RenderObject构成一棵树，我们称之为渲染树，即render tree。</p>\n</li>\n<li><p>Element的生命周期如下：</p>\n<ol>\n<li>Framework 调用Widget.createElement 创建一个Element实例，记为element。</li>\n<li>Framework 调用 element.mount(parentElement,newSlot) ，mount方法中首先调用elment所对应Widget的createRenderObject方法创建与element相关联的RenderObject对象，然后调用element.attachRenderObject方法将element.renderObject添加到渲染树中插槽指定的位置（这一步不是必须的，一般发生在Element树结构发生变化时才需要重新attach）。插入到渲染树后的element就处于“active”状态，处于“active”状态后就可以显示在屏幕上了（可以隐藏）。</li>\n<li>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</li>\n<li>当有父Widget的配置数据改变时，同时其State.build返回的Widget结构与之前不同，此时就需要重新构建对应的Element树。为了进行Element复用，在Element重新构建前会先尝试是否可以复用旧树上相同位置的element，element节点在更新前都会调用其对应Widget的canUpdate方法，如果返回true，则复用旧Element，旧的Element会使用新Widget配置数据更新，反之则会创建一个新的Element。Widget.canUpdate主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来避免复用。</li>\n<li>当有祖先Element决定要移除element 时（如Widget树结构发生了变化，导致element对应的Widget被移除），这时该祖先Element就会调用deactivateChild 方法来移除它，移除后element.renderObject也会被从渲染树中移除，然后Framework会调用element.deactivate 方法，这时element状态变为“inactive”状态。</li>\n<li>“inactive”态的element将不会再显示到屏幕。为了避免在一次动画执行过程中反复创建、移除某个特定element，“inactive”态的element在当前动画最后一帧结束前都会保留，如果在动画执行结束后它还未能重新变成”active“状态，Framework就会调用其unmount方法将其彻底移除，这时element的状态为defunct,它将永远不会再被插入到树中。</li>\n<li>如果element要重新插入到Element树的其它位置，如element或element的祖先拥有一个GlobalKey（用于全局复用元素），那么Framework会先将element从现有位置移除，然后再调用其activate方法，并将其renderObject重新attach到渲染树。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"2-4-框架\"><a href=\"#2-4-框架\" class=\"headerlink\" title=\"2.4 框架\"></a>2.4 框架</h3><p><img src=\"/./Flutter_Frameworks.png\" alt=\"Flutter框架\"></p>\n<p><strong>Flutter Framework:</strong> 这是一个纯 Dart实现的 SDK。它实现了一套基础库， 用于处理动画、绘图和手势。并且基于绘图封装了一套 UI组件库，然后根据 Material 和Cupertino两种视觉风格区分开来。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。</p>\n<p><strong>Flutter Engine:</strong> 这是一个纯 C++实现的 SDK，其中囊括了 Skia引擎、Dart运行时、文字排版引擎等。不过说白了，它就是 Dart的一个运行时，它可以以 JIT、JIT Snapshot 或者 AOT的模式运行 Dart代码。在代码调用 dart:ui库时，提供 dart:ui库中 Native Binding 实现。 不过别忘了，这个运行时还控制着 VSync信号的传递、GPU数据的填充等，并且还负责把客户端的事件传递到运行时中的代码。</p>\n<h3 id=\"2-5-界面渲染\"><a href=\"#2-5-界面渲染\" class=\"headerlink\" title=\"2.5 界面渲染\"></a>2.5 界面渲染</h3><p>2.5.1 Flutter 如何渲染界面</p>\n<p>在介绍Flutter渲染流程之前，看下原生（iOS）的渲染流程：</p>\n<p><img src=\"/./iOS_Render_flow.webp\" alt=\"iOS_Render_flow\"></p>\n<p>CPU、GPU和显示器以一种特定的方式协作：</p>\n<blockquote>\n<p>CPU将计算好的显示内容提交给 GPU，GPU渲染后放入帧缓冲区，然后视频控制器按照 VSync信号从帧缓冲区取帧数据传递给显示器显示。</p>\n</blockquote>\n<p><img src=\"/./Rendering_pipeline.png\" alt=\"Rendering_pipeline\"></p>\n<blockquote>\n<p>GPU的 VSync信号同步到 UI线程，UI线程使用 Dart来构建抽象的视图结构，这份数据结构在 GPU线程进行图层合成，视图数据提供给 Skia引擎渲染为 GPU数据，这些数据通过 OpenGL或者 Vulkan提供给 GPU。</p>\n</blockquote>\n<ul>\n<li><p>Skia是一个 2D的绘图引擎库，其前身是一个向量绘图软件，Chrome和 Android均采用 Skia作为绘图引擎。Skia提供了非常友好的 API，并且在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，而不用去研究 iOS闭源的 Core Graphics / Core Animation。</p>\n</li>\n<li><p>Android自带了 Skia，所以 Flutter Android SDK要比 iOS SDK小很多。</p>\n</li>\n</ul>\n<p>渲染树生成：</p>\n<p><img src=\"/./Rendering_pipe.png\" alt=\"Rendering_pipeline\"></p>\n<p>2.5.2、Flutter 如何更新界面（Diff）</p>\n<p>当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p>\n<p><img src=\"/./Widget_update.png\" alt=\"Rendering_pipeline\"></p>\n<blockquote>\n<p>当element父Widget的配置数据改变时，为了进行Element复用，Framework在决定重新创建Element前会先尝试复用相同位置旧的element：调用Element对应Widget的canUpdate()方法，如果返回true，则复用旧Element，旧的Element会使用新的Widget配置数据更新，反之则会创建一个新的Element，不会复用。</p>\n<p>Widget.canUpdate()主要是判断newWidget与oldWidget的runtimeType和key是否同时相等，如果同时相等就返回true，否则就会返回false。根据这个原理，当我们需要强制更新一个Widget时，可以通过指定不同的Key来禁止复用。</p>\n</blockquote>\n<h3 id=\"2-6-跨平台、与原生平台通讯\"><a href=\"#2-6-跨平台、与原生平台通讯\" class=\"headerlink\" title=\"2.6 跨平台、与原生平台通讯\"></a>2.6 跨平台、与原生平台通讯</h3><p><img src=\"/./Flutter_iOS_Android.png\" alt=\"Flutter_iOS_Android\"></p>\n<p>Flutter平台特定的API支持不依赖于代码生成，而是依赖于灵活的消息传递的方式：</p>\n<ul>\n<li><p>应用的Flutter部分通过平台通道（platform channel）将消息发送到其应用程序的所在的宿主（iOS或Android）。</p>\n</li>\n<li><p>宿主监听的平台通道，并接收该消息。然后它会调用特定于该平台的API（使用原生编程语言） - 并将响应发送回客户端，即应用程序的Flutter部分。</p>\n</li>\n<li><p>硬件交互、推送等服务</p>\n</li>\n<li><p>e.g：获取iOS电量</p>\n</li>\n</ul>\n<p>2.6.1 Flutter跨端——iOS</p>\n<blockquote>\n<p>Flutter 的代码并不直接在平台之下运行，相反，Dart 代码构建的 Flutter 应用在设备上以原生的方式运行，却“侧步躲开了”平台提供的 SDK。这意味着，例如，你在 Dart 中发起一个网络请求，它就直接在 Dart 的上下文中运行。你并不会用上平常在 iOS 或 Android 上使用的原生 API。你的 Flutter 程序仍然被原生平台的 ViewController 管理作一个 view，但是你并不会直接访问 ViewController 自身，或是原生框架。</p>\n<p>但这并不意味着 Flutter 不能和原生 API，或任何你编写的原生代码交互。Flutter 提供了 platform channels ，来和管理你的 Flutter view 的 ViewController 通信和交互数据。平台管道本质上是一个异步通信机制，桥接了 Dart 代码和宿主 ViewController，以及它运行于的 iOS 框架。你可以用平台管道来执行一个原生的函数，或者是从设备的传感器中获取数据。</p>\n</blockquote>\n<p>Flutter 在iOS 上的启动流程：<br><img src=\"/./Launch_flow_ios.webp\" alt=\"Launch_flow_ios\"></p>\n<blockquote>\n<p>在应用的 View Controller 初始化后，会实例化一个 Flutter project的抽象（以下简称 project）。project会初始化一个 platform view的抽象实例，这个抽象实例会负责创建 Flutter 的运行时（以下简称 engine）。</p>\n<p>当 View Controller将要显示时，调用 project查找和组合 Flutter的应用资源 bundle，并且把资源提供给 engine。<br>engine在真正需要执行资源 bundle时才会创建 Dart执行的环境（懒加载，以下简称 Dart Controller），然后设置视图窗口的一些属性等东西（这是绘图引擎必需的）。<br>然后 engine中的 Dart Controller会加载 Dart代码并执行，执行的过程中会调用 dart:ui的 native binding实现向 GPU提供数据。</p>\n</blockquote>\n<p>2.6.2 Android</p>\n<h2 id=\"3、深入Flutter\"><a href=\"#3、深入Flutter\" class=\"headerlink\" title=\"3、深入Flutter\"></a>3、深入Flutter</h2><h3 id=\"3-1-体积\"><a href=\"#3-1-体积\" class=\"headerlink\" title=\"3.1 体积\"></a>3.1 体积</h3><p>Flutter应用的体积由两部分组成：应用代码和 SDK代码。应用代码是 Dart编译后的代码，如果做成可动态下发，那么这部分可以不计。<br>SDK代码比较大就有点无奈了，SDK的组成部分有 Dart VM，Dart标准库，libwebp、libpng、libboringssl等第三方库，libskia，Dart UI库，然后再加上 icu_data，可能在单 arch下（iOS），SDK体积达到 40+MB。其中仅仅 Dart VM（不包含标准库）就达到了 7MB。</p>\n<p>Flutter SDK是 dynamic framework，如此大的二进制体积可能会造成动态链接耗时长。而如果静态链接，可能原来比较大的 App很有可能造成 TEXT段（iOS默认60M）超标。</p>\n<h3 id=\"3-2-帧率\"><a href=\"#3-2-帧率\" class=\"headerlink\" title=\"3.2 帧率\"></a>3.2 帧率</h3><p>Dart在 JIT模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。</p>\n<p>在任何系统的UI框架中，动画实现的原理都是相同的，即：</p>\n<blockquote>\n<p>在一段时间内，快速地多次改变UI外观，由于人眼会产生视觉暂留，最终看到的就是一个“连续”的动画，这和电影的原理是一样的，而UI的一次改变称为一个动画帧，对应一次屏幕刷新，而决定动画流畅度的一个重要指标就是帧率FPS（Frame Per Second），指每秒的动画帧数。很明显，帧率越高则动画就会越流畅。一般情况下，对于人眼来说，动画帧率超过16FPS，就比较流畅了，超过32FPS就会非常的细腻平滑，而超过32FPS基本就感受不到差别了。由于动画的每一帧都是要改变UI输出，所以在一个时间段内连续的改变UI输出是比较耗资源的，对设备的软硬件系统要求都较高，所以在UI系统中，动画的平均帧率是重要的性能指标，而在Flutter中，理想情况下是可以实现60FPS的，这和原生应用动画基本是持平的。</p>\n</blockquote>\n<h3 id=\"3-3-Dart线程和异步\"><a href=\"#3-3-Dart线程和异步\" class=\"headerlink\" title=\"3.3 Dart线程和异步\"></a>3.3 <a href=\"https://flutterchina.club/flutter-for-ios/#%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5\">Dart线程和异步</a></h3><p><strong>Isolates：</strong> 现代的浏览器以及移动浏览器都运行在多核 CPU 系统上。 要充分利用这些 CPU，开发者一般使用共享内存 数据来保证多线程的正确执行。然而， 多线程共享数据通常会导致很多潜在的问题，并导致代码运行出错。</p>\n<p>所有的 Dart 代码在 isolates 中运行而不是线程。 每个 isolate 都有自己的堆内存，并且确保每个 isolate 的状态都不能被其他 isolate 访问。因此，也不存在资源锁的问题。</p>\n<p>Dart 是单线程执行模型，但是它支持 Isolate（一种让 Dart 代码运行在其他线程的方式）、事件循环和异步编程。除非你自己创建一个 Isolate ，否则你的 Dart 代码永远运行在 UI 线程，并由 event loop 驱动。Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。</p>\n<p>Dart 的单线程模型并不意味着你写的代码一定是阻塞操作，从而卡住 UI。相反，使用 Dart 语言提供的异步工具，例如 async / await ，来实现异步操作。</p>\n<ul>\n<li>多线程示例：<a href=\"./isolate.dart\">isolate_example</a></li>\n</ul>\n<h3 id=\"3-4-EventLoop、事件分发\"><a href=\"#3-4-EventLoop、事件分发\" class=\"headerlink\" title=\"3.4 EventLoop、事件分发\"></a>3.4 <a href=\"https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a\">EventLoop、事件分发</a></h3><p>Flutter 的 event loop 和 iOS 中的 main loop 相似——Looper 是附加在主线程上的。</p>\n<p>事件总线（EventBus）通过流控制器（StreamController）控制 事件流（Stream），事件流可以被监听、唤醒、停止、关闭、下沉，订阅者可以通过流控制器订阅流事件。</p>\n<h3 id=\"3-5-事件响应\"><a href=\"#3-5-事件响应\" class=\"headerlink\" title=\"3.5 事件响应\"></a>3.5 事件响应</h3><p>一个对象是否可以响应事件，取决于其对命中测试的返回，当发生用户事件时，会从根节点（RenderView）开始进行命中测试，下面是RenderView的hitTest()源码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> hitTest(HitTestResult result, &#123; Offset position &#125;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (child != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    child.hitTest(result, position: position); <span class=\"comment\">//递归子RenderBox进行命中测试</span></span><br><span class=\"line\">  result.add(HitTestEntry(<span class=\"keyword\">this</span>)); <span class=\"comment\">//将测试结果添加到result中</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>RenderBox默认的hitTest()实现：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> hitTest(HitTestResult result, &#123; <span class=\"meta\">@required</span> Offset position &#125;) &#123;</span><br><span class=\"line\">  ...  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_size.contains(position)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hitTestChildren(result, position: position) || hitTestSelf(position)) &#123;</span><br><span class=\"line\">      result.add(BoxHitTestEntry(<span class=\"keyword\">this</span>, position));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们看到默认的实现里调用了hitTestSelf()和hitTestChildren()两个方法，这两个方法默认实现如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@protected</span></span><br><span class=\"line\"><span class=\"built_in\">bool</span> hitTestSelf(Offset position) =&gt; <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@protected</span></span><br><span class=\"line\"><span class=\"built_in\">bool</span> hitTestChildren(HitTestResult result, &#123; Offset position &#125;) =&gt; <span class=\"keyword\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>hitTest 方法用来判断该 RenderObject 是否在被点击的范围内，同时负责将被点击的 RenderBox 添加到 HitTestResult 列表中，参数 position 为事件触发的坐标（如果有的话），返回 true 则表示有 RenderBox 通过了命中测试，需要响应事件，反之则认为当前RenderBox没有命中。</p>\n<p>在继承RenderBox时，可以直接重写hitTest()方法，也可以重写 hitTestSelf() 或 hitTestChildren(), 唯一不同的是 hitTest()中需要将通过命中测试的节点信息添加到命中测试结果列表中，而 hitTestSelf() 和 hitTestChildren()则只需要简单的返回true或false。</p>\n</blockquote>\n<h3 id=\"3-6-Runtime（AOT）、JIT、Dart-VM\"><a href=\"#3-6-Runtime（AOT）、JIT、Dart-VM\" class=\"headerlink\" title=\"3.6 Runtime（AOT）、JIT、Dart VM\"></a>3.6 Runtime（AOT）、JIT、Dart VM</h3><h3 id=\"3-7-性能（CPU、GPU、Network、battery、Disk）\"><a href=\"#3-7-性能（CPU、GPU、Network、battery、Disk）\" class=\"headerlink\" title=\"3.7 性能（CPU、GPU、Network、battery、Disk）\"></a>3.7 性能（CPU、GPU、Network、battery、Disk）</h3><h3 id=\"3-8-内存管理\"><a href=\"#3-8-内存管理\" class=\"headerlink\" title=\"3.8 内存管理\"></a>3.8 <a href=\"https://mp.weixin.qq.com/s/efKCpCtvvHDHUiAsizobBQ\">内存管理</a></h3><p>Dart VM将内存管理分为新生代(New Generation)和老年代(Old Generation)。</p>\n<ul>\n<li>新生代(New Generation): 通常初次分配的对象都位于新生代中，该区域主要是存放内存较小并且生命周期较短的对象，比如局部变量。新生代会频繁执行内存回收(GC)，回收采用“复制-清除”算法，将内存分为两块(图中的from 和 to)，运行时每次只使用其中的一块(图中的from)，另一块备用(图中的to)。当发生GC时，将当前使用的内存块中存活的对象拷贝到备用内存块中，然后清除当前使用内存块，最后，交换两块内存的角色。</li>\n</ul>\n<p><img src=\"/./Memory_Manager_01.webp\" alt=\"Memory_Manager\"></p>\n<ul>\n<li>老年代(Old Generation): 在新生代的GC中“幸存”下来的对象，它们会被转移到老年代中。老年代存放生命力周期较长，内存较大的对象。老年代通常比新生代要大很多。老年代的GC回收采用“标记-清除”算法，分成标记和清除两个阶段。在标记阶段，所有线程参与并发的完成对回收对象的标记，降低标记阶段耗时。在清理阶段，由GC线程负责清理回收对象，和应用线程同时执行，不影响应用运行。<br><img src=\"/./Memory_Manager_02.webp\" alt=\"Memory_Manager\"></li>\n</ul>\n<h3 id=\"3-9-技术生态圈\"><a href=\"#3-9-技术生态圈\" class=\"headerlink\" title=\"3.9 技术生态圈\"></a>3.9 技术生态圈</h3><h2 id=\"4、Flutter-amp-原生\"><a href=\"#4、Flutter-amp-原生\" class=\"headerlink\" title=\"4、Flutter &amp; 原生\"></a>4、<a href=\"https://blog.codemagic.io/flutter-vs-swift/\">Flutter &amp; 原生</a></h2><ol>\n<li>界面<br>解决移动端信息展示的目的；<br>都基于声明式、响应式的方式、热重载的方式；</li>\n</ol>\n<h2 id=\"5、未来与憧憬\"><a href=\"#5、未来与憧憬\" class=\"headerlink\" title=\"5、未来与憧憬\"></a>5、未来与憧憬</h2><p>当下的移动端、前端开发技术越来越多样化，复杂化。</p>\n<p>就移动端iOS来说，开发语言就有Objective-C、Swift，UI框架cocoa Foundation的UIkit、苹果新出的SwiftUI；<br>Android的开发语言Java、Kotlin，UI框架有Android原生的、腾讯的QMUI等。</p>\n<p>大前端，这几年，还掺杂了的React-Native/Weex等一批大前端技术，现如今Google扶持的的Flutter又加入进来。</p>\n<p>前端情况也类似，像React，Vue、Angular、Bootstrap等，层出不穷。</p>\n<p>前不久Facebook 又推出了新的<a href=\"https://juejin.im/entry/5d2e6d1ce51d4510664d178e\">Hermes</a>，用于在React Native应用提高性能的。</p>\n<p>个人觉得，前端用统一的方式处理，是一个趋势。同时，一个良好的生态建设也很重要。比如界面构建语言、方式、布局设计，当然这个语言不能局限于静态语言，同时也支持动态特性。比如Dart、Swift。</p>\n<p>统一的生态包括系统、语言、协议、工具等，说白了就是得有比较正规化的一种方式去工作。</p>\n<p>据不完全统计，编程语言大概有500~600种，很多语言都有自己的生态体系、特性、工具，甚至编译器，解释器，连接器等，想这么多样化的氛围，还没有一种主流的语言【当然二进制语言不能算，偏底层的人为处理起来还是比较麻烦】生态能够前后端都统一负责得了的。所以，希望有这一天的到来，有生之年也能看到！</p>\n"},{"title":"iOS之代码管理","abbrlink":"288af33","date":"2021-04-19T16:00:00.000Z","_content":"","source":"_posts/iOS/CodeManager.md","raw":"---\ntitle: iOS之代码管理\nabbrlink: 288af33\ndate: 2021-04-20 00:00:00\ntags:\n---\n","slug":"iOS/CodeManager","published":1,"updated":"2021-07-29T06:45:56.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzu000yiu9kanl53690","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"JavaScript 知识点","abbrlink":"9dcb9b7b","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1、Promise\n\n### [使用](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises)\n\n### [介绍](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n### 1.1 约定\n\n* 在本轮 事件循环 运行完成之前，回调函数是不会被调用的。\n* 即使异步操作已经完成（成功或失败），在这之后通过 then() 添加的回调函数也会被调用。\n* 通过多次调用 then() 可以添加多个回调函数，它们会按照插入顺序执行。\n\n### 1.2 链式调用的本质——函数式编程\n\nPromise 是对象，有：promise、reason\n拒绝事件（全局）：\n    rejectionhandled\n        当 Promise 被拒绝、并且在 reject 函数处理该 rejection 之后会派发此事件。\n    unhandledrejection\n        当 Promise 被拒绝，但没有提供 reject 函数来处理该 rejection 时，会派发此事件。\n\nPromise 代表链中异步的完成\n\n封装旧式 api：\n\n```javascript\nsetTimeout(() => saySomething(\"10 seconds passed\"), 10000);\n\n=====>\n\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nwait(10000).then(() => saySomething(\"10 seconds\")).catch(failureCallback);\n```\n\n### 1.3 异常捕获\n\ncatch\n\n一遇到异常抛出，浏览器就会顺着promise链寻找下一个 onRejected 失败回调函数或者由 .catch() 指定的回调函数。\n\n错误传递\n\n## 1.4 组合\n\n## 1.5 then() 会异步调用\n\n传递到 then() 中的函数被置入了一个微任务队列，而不是立即执行，这意味着它是在 JavaScript 事件队列的所有运行时结束了，事件队列被清空之后，才开始执行：\n\n```javascript\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nwait().then(() => console.log(4));\nPromise.resolve().then(() => console.log(2)).then(() => console.log(3));\nconsole.log(1); // 1, 2, 3, 4\n```\n\n### 1.6 嵌套\n\n嵌套 Promise 是一种可以限制 catch 语句的作用域的控制结构写法。明确来说，嵌套的 catch 仅捕捉在其之前同时还必须是其作用域的 failureres，而捕捉不到在其链式以外或者其嵌套域以外的 error。如果使用正确，那么可以实现高精度的错误修复。\n\n```javascript\ndoSomethingCritical()\n.then(result => doSomethingOptional()\n  .then(optionalResult => doSomethingExtraNice(optionalResult))\n  .catch(e => {console.log(e.message)})) // 即使有异常也会忽略，继续运行;(最后会输出)\n.then(() => moreCriticalStuff())\n.catch(e => console.log(\"Critical failure: \" + e.message));// 没有输出\n```\n\n2、async/await\n\n3、CSS  布局\n\n4、运行时\n   执行机制：事件循环，宏/微任务\n   宏/微任务\n   多线程\n   异步\n\n   window document DOM\n\n5、React 高阶/原理\n   jsx\n\n6、this\n\n全局调用：window 或者 global\n\n严格模式：undefined\n\n函数调用：\n\ncall，apply\n\nbind\n\n箭头函数：call/apply、 bind 调用箭头函数，第一个参数 null\n\n对象 this\n\n原型链中的 this\n\ngetter/setter\n\n构造函数：值覆盖\n\nDOM 事件处理函数\n","source":"_posts/Web/JavaScript/Technologies.md","raw":"---\ntitle: JavaScript 知识点\nabbrlink: 9dcb9b7b\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1、Promise\n\n### [使用](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises)\n\n### [介绍](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n### 1.1 约定\n\n* 在本轮 事件循环 运行完成之前，回调函数是不会被调用的。\n* 即使异步操作已经完成（成功或失败），在这之后通过 then() 添加的回调函数也会被调用。\n* 通过多次调用 then() 可以添加多个回调函数，它们会按照插入顺序执行。\n\n### 1.2 链式调用的本质——函数式编程\n\nPromise 是对象，有：promise、reason\n拒绝事件（全局）：\n    rejectionhandled\n        当 Promise 被拒绝、并且在 reject 函数处理该 rejection 之后会派发此事件。\n    unhandledrejection\n        当 Promise 被拒绝，但没有提供 reject 函数来处理该 rejection 时，会派发此事件。\n\nPromise 代表链中异步的完成\n\n封装旧式 api：\n\n```javascript\nsetTimeout(() => saySomething(\"10 seconds passed\"), 10000);\n\n=====>\n\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nwait(10000).then(() => saySomething(\"10 seconds\")).catch(failureCallback);\n```\n\n### 1.3 异常捕获\n\ncatch\n\n一遇到异常抛出，浏览器就会顺着promise链寻找下一个 onRejected 失败回调函数或者由 .catch() 指定的回调函数。\n\n错误传递\n\n## 1.4 组合\n\n## 1.5 then() 会异步调用\n\n传递到 then() 中的函数被置入了一个微任务队列，而不是立即执行，这意味着它是在 JavaScript 事件队列的所有运行时结束了，事件队列被清空之后，才开始执行：\n\n```javascript\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nwait().then(() => console.log(4));\nPromise.resolve().then(() => console.log(2)).then(() => console.log(3));\nconsole.log(1); // 1, 2, 3, 4\n```\n\n### 1.6 嵌套\n\n嵌套 Promise 是一种可以限制 catch 语句的作用域的控制结构写法。明确来说，嵌套的 catch 仅捕捉在其之前同时还必须是其作用域的 failureres，而捕捉不到在其链式以外或者其嵌套域以外的 error。如果使用正确，那么可以实现高精度的错误修复。\n\n```javascript\ndoSomethingCritical()\n.then(result => doSomethingOptional()\n  .then(optionalResult => doSomethingExtraNice(optionalResult))\n  .catch(e => {console.log(e.message)})) // 即使有异常也会忽略，继续运行;(最后会输出)\n.then(() => moreCriticalStuff())\n.catch(e => console.log(\"Critical failure: \" + e.message));// 没有输出\n```\n\n2、async/await\n\n3、CSS  布局\n\n4、运行时\n   执行机制：事件循环，宏/微任务\n   宏/微任务\n   多线程\n   异步\n\n   window document DOM\n\n5、React 高阶/原理\n   jsx\n\n6、this\n\n全局调用：window 或者 global\n\n严格模式：undefined\n\n函数调用：\n\ncall，apply\n\nbind\n\n箭头函数：call/apply、 bind 调用箭头函数，第一个参数 null\n\n对象 this\n\n原型链中的 this\n\ngetter/setter\n\n构造函数：值覆盖\n\nDOM 事件处理函数\n","slug":"Web/JavaScript/Technologies","published":1,"updated":"2021-07-29T06:46:00.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rmzv000ziu9k63gfa69a","content":"<h2 id=\"1、Promise\"><a href=\"#1、Promise\" class=\"headerlink\" title=\"1、Promise\"></a>1、Promise</h2><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\">使用</a></h3><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">介绍</a></h3><h3 id=\"1-1-约定\"><a href=\"#1-1-约定\" class=\"headerlink\" title=\"1.1 约定\"></a>1.1 约定</h3><ul>\n<li>在本轮 事件循环 运行完成之前，回调函数是不会被调用的。</li>\n<li>即使异步操作已经完成（成功或失败），在这之后通过 then() 添加的回调函数也会被调用。</li>\n<li>通过多次调用 then() 可以添加多个回调函数，它们会按照插入顺序执行。</li>\n</ul>\n<h3 id=\"1-2-链式调用的本质——函数式编程\"><a href=\"#1-2-链式调用的本质——函数式编程\" class=\"headerlink\" title=\"1.2 链式调用的本质——函数式编程\"></a>1.2 链式调用的本质——函数式编程</h3><p>Promise 是对象，有：promise、reason<br>拒绝事件（全局）：<br>    rejectionhandled<br>        当 Promise 被拒绝、并且在 reject 函数处理该 rejection 之后会派发此事件。<br>    unhandledrejection<br>        当 Promise 被拒绝，但没有提供 reject 函数来处理该 rejection 时，会派发此事件。</p>\n<p>Promise 代表链中异步的完成</p>\n<p>封装旧式 api：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> saySomething(<span class=\"string\">&quot;10 seconds passed&quot;</span>), <span class=\"number\">10000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">=====&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> wait = <span class=\"function\"><span class=\"params\">ms</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, ms));</span><br><span class=\"line\"></span><br><span class=\"line\">wait(<span class=\"number\">10000</span>).then(<span class=\"function\">() =&gt;</span> saySomething(<span class=\"string\">&quot;10 seconds&quot;</span>)).catch(failureCallback);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-异常捕获\"><a href=\"#1-3-异常捕获\" class=\"headerlink\" title=\"1.3 异常捕获\"></a>1.3 异常捕获</h3><p>catch</p>\n<p>一遇到异常抛出，浏览器就会顺着promise链寻找下一个 onRejected 失败回调函数或者由 .catch() 指定的回调函数。</p>\n<p>错误传递</p>\n<h2 id=\"1-4-组合\"><a href=\"#1-4-组合\" class=\"headerlink\" title=\"1.4 组合\"></a>1.4 组合</h2><h2 id=\"1-5-then-会异步调用\"><a href=\"#1-5-then-会异步调用\" class=\"headerlink\" title=\"1.5 then() 会异步调用\"></a>1.5 then() 会异步调用</h2><p>传递到 then() 中的函数被置入了一个微任务队列，而不是立即执行，这意味着它是在 JavaScript 事件队列的所有运行时结束了，事件队列被清空之后，才开始执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> wait = <span class=\"function\"><span class=\"params\">ms</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, ms));</span><br><span class=\"line\"></span><br><span class=\"line\">wait().then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)).then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>); <span class=\"comment\">// 1, 2, 3, 4</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-嵌套\"><a href=\"#1-6-嵌套\" class=\"headerlink\" title=\"1.6 嵌套\"></a>1.6 嵌套</h3><p>嵌套 Promise 是一种可以限制 catch 语句的作用域的控制结构写法。明确来说，嵌套的 catch 仅捕捉在其之前同时还必须是其作用域的 failureres，而捕捉不到在其链式以外或者其嵌套域以外的 error。如果使用正确，那么可以实现高精度的错误修复。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomethingCritical()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> doSomethingOptional()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">optionalResult</span> =&gt;</span> doSomethingExtraNice(optionalResult))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(e.message)&#125;)) <span class=\"comment\">// 即使有异常也会忽略，继续运行;(最后会输出)</span></span><br><span class=\"line\">.then(<span class=\"function\">() =&gt;</span> moreCriticalStuff())</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Critical failure: &quot;</span> + e.message));<span class=\"comment\">// 没有输出</span></span><br></pre></td></tr></table></figure>\n\n<p>2、async/await</p>\n<p>3、CSS  布局</p>\n<p>4、运行时<br>   执行机制：事件循环，宏/微任务<br>   宏/微任务<br>   多线程<br>   异步</p>\n<p>   window document DOM</p>\n<p>5、React 高阶/原理<br>   jsx</p>\n<p>6、this</p>\n<p>全局调用：window 或者 global</p>\n<p>严格模式：undefined</p>\n<p>函数调用：</p>\n<p>call，apply</p>\n<p>bind</p>\n<p>箭头函数：call/apply、 bind 调用箭头函数，第一个参数 null</p>\n<p>对象 this</p>\n<p>原型链中的 this</p>\n<p>getter/setter</p>\n<p>构造函数：值覆盖</p>\n<p>DOM 事件处理函数</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、Promise\"><a href=\"#1、Promise\" class=\"headerlink\" title=\"1、Promise\"></a>1、Promise</h2><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_promises\">使用</a></h3><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">介绍</a></h3><h3 id=\"1-1-约定\"><a href=\"#1-1-约定\" class=\"headerlink\" title=\"1.1 约定\"></a>1.1 约定</h3><ul>\n<li>在本轮 事件循环 运行完成之前，回调函数是不会被调用的。</li>\n<li>即使异步操作已经完成（成功或失败），在这之后通过 then() 添加的回调函数也会被调用。</li>\n<li>通过多次调用 then() 可以添加多个回调函数，它们会按照插入顺序执行。</li>\n</ul>\n<h3 id=\"1-2-链式调用的本质——函数式编程\"><a href=\"#1-2-链式调用的本质——函数式编程\" class=\"headerlink\" title=\"1.2 链式调用的本质——函数式编程\"></a>1.2 链式调用的本质——函数式编程</h3><p>Promise 是对象，有：promise、reason<br>拒绝事件（全局）：<br>    rejectionhandled<br>        当 Promise 被拒绝、并且在 reject 函数处理该 rejection 之后会派发此事件。<br>    unhandledrejection<br>        当 Promise 被拒绝，但没有提供 reject 函数来处理该 rejection 时，会派发此事件。</p>\n<p>Promise 代表链中异步的完成</p>\n<p>封装旧式 api：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> saySomething(<span class=\"string\">&quot;10 seconds passed&quot;</span>), <span class=\"number\">10000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">=====&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> wait = <span class=\"function\"><span class=\"params\">ms</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, ms));</span><br><span class=\"line\"></span><br><span class=\"line\">wait(<span class=\"number\">10000</span>).then(<span class=\"function\">() =&gt;</span> saySomething(<span class=\"string\">&quot;10 seconds&quot;</span>)).catch(failureCallback);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-异常捕获\"><a href=\"#1-3-异常捕获\" class=\"headerlink\" title=\"1.3 异常捕获\"></a>1.3 异常捕获</h3><p>catch</p>\n<p>一遇到异常抛出，浏览器就会顺着promise链寻找下一个 onRejected 失败回调函数或者由 .catch() 指定的回调函数。</p>\n<p>错误传递</p>\n<h2 id=\"1-4-组合\"><a href=\"#1-4-组合\" class=\"headerlink\" title=\"1.4 组合\"></a>1.4 组合</h2><h2 id=\"1-5-then-会异步调用\"><a href=\"#1-5-then-会异步调用\" class=\"headerlink\" title=\"1.5 then() 会异步调用\"></a>1.5 then() 会异步调用</h2><p>传递到 then() 中的函数被置入了一个微任务队列，而不是立即执行，这意味着它是在 JavaScript 事件队列的所有运行时结束了，事件队列被清空之后，才开始执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> wait = <span class=\"function\"><span class=\"params\">ms</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, ms));</span><br><span class=\"line\"></span><br><span class=\"line\">wait().then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)).then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>); <span class=\"comment\">// 1, 2, 3, 4</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-嵌套\"><a href=\"#1-6-嵌套\" class=\"headerlink\" title=\"1.6 嵌套\"></a>1.6 嵌套</h3><p>嵌套 Promise 是一种可以限制 catch 语句的作用域的控制结构写法。明确来说，嵌套的 catch 仅捕捉在其之前同时还必须是其作用域的 failureres，而捕捉不到在其链式以外或者其嵌套域以外的 error。如果使用正确，那么可以实现高精度的错误修复。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomethingCritical()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> doSomethingOptional()</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">optionalResult</span> =&gt;</span> doSomethingExtraNice(optionalResult))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(e.message)&#125;)) <span class=\"comment\">// 即使有异常也会忽略，继续运行;(最后会输出)</span></span><br><span class=\"line\">.then(<span class=\"function\">() =&gt;</span> moreCriticalStuff())</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Critical failure: &quot;</span> + e.message));<span class=\"comment\">// 没有输出</span></span><br></pre></td></tr></table></figure>\n\n<p>2、async/await</p>\n<p>3、CSS  布局</p>\n<p>4、运行时<br>   执行机制：事件循环，宏/微任务<br>   宏/微任务<br>   多线程<br>   异步</p>\n<p>   window document DOM</p>\n<p>5、React 高阶/原理<br>   jsx</p>\n<p>6、this</p>\n<p>全局调用：window 或者 global</p>\n<p>严格模式：undefined</p>\n<p>函数调用：</p>\n<p>call，apply</p>\n<p>bind</p>\n<p>箭头函数：call/apply、 bind 调用箭头函数，第一个参数 null</p>\n<p>对象 this</p>\n<p>原型链中的 this</p>\n<p>getter/setter</p>\n<p>构造函数：值覆盖</p>\n<p>DOM 事件处理函数</p>\n"},{"title":"iOS之并发编程","abbrlink":"774a103f","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [Concurrency Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1)\n","source":"_posts/iOS/Concurrency/Concurrency.md","raw":"---\ntitle: iOS之并发编程\nabbrlink: 774a103f\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [Concurrency Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1)\n","slug":"iOS/Concurrency/Concurrency","published":1,"updated":"2021-07-29T06:46:00.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn000010iu9kemac45qu","content":"<h2 id=\"1-Concurrency-Programming-Guide\"><a href=\"#1-Concurrency-Programming-Guide\" class=\"headerlink\" title=\"1. Concurrency Programming Guide\"></a>1. <a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1\">Concurrency Programming Guide</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Concurrency-Programming-Guide\"><a href=\"#1-Concurrency-Programming-Guide\" class=\"headerlink\" title=\"1. Concurrency Programming Guide\"></a>1. <a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1\">Concurrency Programming Guide</a></h2>"},{"title":"Chrome Extentions 开发指南","abbrlink":55585,"date":"2021-08-28T02:08:02.000Z","_content":"\n## 1. [手把手教你开发一个 chrome 扩展程序](https://juejin.cn/post/6844904077889912839)\n\n## 2. [Chrome 扩展开发文档](https://wizardforcel.gitbooks.io/chrome-doc/content/3.html)\n\n## 3. [Chrome Devleopers](https://developer.chrome.com/docs/extensions/)\n\n## 4. [Tampermonkey](https://www.tampermonkey.net/)\n","source":"_posts/Web/ChromeExtentions/Guidlines.md","raw":"---\ntitle: Chrome Extentions 开发指南\nabbrlink: 55585\ndate: 2021-08-28 10:08:02\ntags:\n---\n\n## 1. [手把手教你开发一个 chrome 扩展程序](https://juejin.cn/post/6844904077889912839)\n\n## 2. [Chrome 扩展开发文档](https://wizardforcel.gitbooks.io/chrome-doc/content/3.html)\n\n## 3. [Chrome Devleopers](https://developer.chrome.com/docs/extensions/)\n\n## 4. [Tampermonkey](https://www.tampermonkey.net/)\n","slug":"Web/ChromeExtentions/Guidlines","published":1,"updated":"2021-09-22T06:56:40.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn010011iu9k00bq2qw7","content":"<h2 id=\"1-手把手教你开发一个-chrome-扩展程序\"><a href=\"#1-手把手教你开发一个-chrome-扩展程序\" class=\"headerlink\" title=\"1. 手把手教你开发一个 chrome 扩展程序\"></a>1. <a href=\"https://juejin.cn/post/6844904077889912839\">手把手教你开发一个 chrome 扩展程序</a></h2><h2 id=\"2-Chrome-扩展开发文档\"><a href=\"#2-Chrome-扩展开发文档\" class=\"headerlink\" title=\"2. Chrome 扩展开发文档\"></a>2. <a href=\"https://wizardforcel.gitbooks.io/chrome-doc/content/3.html\">Chrome 扩展开发文档</a></h2><h2 id=\"3-Chrome-Devleopers\"><a href=\"#3-Chrome-Devleopers\" class=\"headerlink\" title=\"3. Chrome Devleopers\"></a>3. <a href=\"https://developer.chrome.com/docs/extensions/\">Chrome Devleopers</a></h2><h2 id=\"4-Tampermonkey\"><a href=\"#4-Tampermonkey\" class=\"headerlink\" title=\"4. Tampermonkey\"></a>4. <a href=\"https://www.tampermonkey.net/\">Tampermonkey</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-手把手教你开发一个-chrome-扩展程序\"><a href=\"#1-手把手教你开发一个-chrome-扩展程序\" class=\"headerlink\" title=\"1. 手把手教你开发一个 chrome 扩展程序\"></a>1. <a href=\"https://juejin.cn/post/6844904077889912839\">手把手教你开发一个 chrome 扩展程序</a></h2><h2 id=\"2-Chrome-扩展开发文档\"><a href=\"#2-Chrome-扩展开发文档\" class=\"headerlink\" title=\"2. Chrome 扩展开发文档\"></a>2. <a href=\"https://wizardforcel.gitbooks.io/chrome-doc/content/3.html\">Chrome 扩展开发文档</a></h2><h2 id=\"3-Chrome-Devleopers\"><a href=\"#3-Chrome-Devleopers\" class=\"headerlink\" title=\"3. Chrome Devleopers\"></a>3. <a href=\"https://developer.chrome.com/docs/extensions/\">Chrome Devleopers</a></h2><h2 id=\"4-Tampermonkey\"><a href=\"#4-Tampermonkey\" class=\"headerlink\" title=\"4. Tampermonkey\"></a>4. <a href=\"https://www.tampermonkey.net/\">Tampermonkey</a></h2>"},{"title":"iOS之多线程编程","abbrlink":"6951e33f","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [Threading Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1)\n\n### **异常处理**\n\n1. [Exception Programming Topics](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012i)\n","source":"_posts/iOS/Concurrency/MultiThread.md","raw":"---\ntitle: iOS之多线程编程\nabbrlink: 6951e33f\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [Threading Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1)\n\n### **异常处理**\n\n1. [Exception Programming Topics](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012i)\n","slug":"iOS/Concurrency/MultiThread","published":1,"updated":"2021-07-29T06:46:00.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn030012iu9kc28248xf","content":"<h2 id=\"1-Threading-Programming-Guide\"><a href=\"#1-Threading-Programming-Guide\" class=\"headerlink\" title=\"1. Threading Programming Guide\"></a>1. <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1\">Threading Programming Guide</a></h2><h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a><strong>异常处理</strong></h3><ol>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012i\">Exception Programming Topics</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Threading-Programming-Guide\"><a href=\"#1-Threading-Programming-Guide\" class=\"headerlink\" title=\"1. Threading Programming Guide\"></a>1. <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1\">Threading Programming Guide</a></h2><h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a><strong>异常处理</strong></h3><ol>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012i\">Exception Programming Topics</a></li>\n</ol>\n"},{"title":"iOS之RunLoop","abbrlink":"18a887dd","date":"2021-04-20T13:36:02.000Z","_content":"\n\n## 1. [深入理解RunLoop](https://blog.ibireme.com/2015/05/18/runloop/)\n\n### 1.1 Source0、与 Source1\n\n1. Source1 :基于mach_Port的,来自系统内核或者其他进程或线程的事件，可以主动唤醒休眠中的RunLoop（iOS里进程间通信开发过程中我们一般不主动使用）。mach_port大家就理解成进程间相互发送消息的一种机制就好, 比如屏幕点击, 网络数据的传输都会触发sourse1。\n\n2. Source0 ：非基于Port的 处理事件，什么叫非基于Port的呢？就是说你这个消息不是其他进程或者内核直接发送给你的。一般是APP内部的事件, 比如hitTest:withEvent的处理, performSelectors的事件。\n\n**用例：** 一个APP在前台静止着，此时，用户用手指点击了一下APP界面，那么过程就是下面这样的：\n\n我们触摸屏幕,先摸到硬件(屏幕)，屏幕表面的事件会被IOKit先包装成Event,通过mach_Port传给正在活跃的APP , Event先告诉source1（mach_port）,source1唤醒RunLoop, 然后将事件Event分发给source0,然后由source0来处理。\n\n如果没有事件,也没有timer,则runloop就会睡眠, 如果有,则runloop就会被唤醒,然后跑一圈。\n","source":"_posts/iOS/Concurrency/RunLoop.md","raw":"---\ntitle: iOS之RunLoop\nabbrlink: 18a887dd\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n\n## 1. [深入理解RunLoop](https://blog.ibireme.com/2015/05/18/runloop/)\n\n### 1.1 Source0、与 Source1\n\n1. Source1 :基于mach_Port的,来自系统内核或者其他进程或线程的事件，可以主动唤醒休眠中的RunLoop（iOS里进程间通信开发过程中我们一般不主动使用）。mach_port大家就理解成进程间相互发送消息的一种机制就好, 比如屏幕点击, 网络数据的传输都会触发sourse1。\n\n2. Source0 ：非基于Port的 处理事件，什么叫非基于Port的呢？就是说你这个消息不是其他进程或者内核直接发送给你的。一般是APP内部的事件, 比如hitTest:withEvent的处理, performSelectors的事件。\n\n**用例：** 一个APP在前台静止着，此时，用户用手指点击了一下APP界面，那么过程就是下面这样的：\n\n我们触摸屏幕,先摸到硬件(屏幕)，屏幕表面的事件会被IOKit先包装成Event,通过mach_Port传给正在活跃的APP , Event先告诉source1（mach_port）,source1唤醒RunLoop, 然后将事件Event分发给source0,然后由source0来处理。\n\n如果没有事件,也没有timer,则runloop就会睡眠, 如果有,则runloop就会被唤醒,然后跑一圈。\n","slug":"iOS/Concurrency/RunLoop","published":1,"updated":"2021-07-29T06:45:56.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn040013iu9k5pke0l9e","content":"<h2 id=\"1-深入理解RunLoop\"><a href=\"#1-深入理解RunLoop\" class=\"headerlink\" title=\"1. 深入理解RunLoop\"></a>1. <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">深入理解RunLoop</a></h2><h3 id=\"1-1-Source0、与-Source1\"><a href=\"#1-1-Source0、与-Source1\" class=\"headerlink\" title=\"1.1 Source0、与 Source1\"></a>1.1 Source0、与 Source1</h3><ol>\n<li><p>Source1 :基于mach_Port的,来自系统内核或者其他进程或线程的事件，可以主动唤醒休眠中的RunLoop（iOS里进程间通信开发过程中我们一般不主动使用）。mach_port大家就理解成进程间相互发送消息的一种机制就好, 比如屏幕点击, 网络数据的传输都会触发sourse1。</p>\n</li>\n<li><p>Source0 ：非基于Port的 处理事件，什么叫非基于Port的呢？就是说你这个消息不是其他进程或者内核直接发送给你的。一般是APP内部的事件, 比如hitTest:withEvent的处理, performSelectors的事件。</p>\n</li>\n</ol>\n<p><strong>用例：</strong> 一个APP在前台静止着，此时，用户用手指点击了一下APP界面，那么过程就是下面这样的：</p>\n<p>我们触摸屏幕,先摸到硬件(屏幕)，屏幕表面的事件会被IOKit先包装成Event,通过mach_Port传给正在活跃的APP , Event先告诉source1（mach_port）,source1唤醒RunLoop, 然后将事件Event分发给source0,然后由source0来处理。</p>\n<p>如果没有事件,也没有timer,则runloop就会睡眠, 如果有,则runloop就会被唤醒,然后跑一圈。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-深入理解RunLoop\"><a href=\"#1-深入理解RunLoop\" class=\"headerlink\" title=\"1. 深入理解RunLoop\"></a>1. <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">深入理解RunLoop</a></h2><h3 id=\"1-1-Source0、与-Source1\"><a href=\"#1-1-Source0、与-Source1\" class=\"headerlink\" title=\"1.1 Source0、与 Source1\"></a>1.1 Source0、与 Source1</h3><ol>\n<li><p>Source1 :基于mach_Port的,来自系统内核或者其他进程或线程的事件，可以主动唤醒休眠中的RunLoop（iOS里进程间通信开发过程中我们一般不主动使用）。mach_port大家就理解成进程间相互发送消息的一种机制就好, 比如屏幕点击, 网络数据的传输都会触发sourse1。</p>\n</li>\n<li><p>Source0 ：非基于Port的 处理事件，什么叫非基于Port的呢？就是说你这个消息不是其他进程或者内核直接发送给你的。一般是APP内部的事件, 比如hitTest:withEvent的处理, performSelectors的事件。</p>\n</li>\n</ol>\n<p><strong>用例：</strong> 一个APP在前台静止着，此时，用户用手指点击了一下APP界面，那么过程就是下面这样的：</p>\n<p>我们触摸屏幕,先摸到硬件(屏幕)，屏幕表面的事件会被IOKit先包装成Event,通过mach_Port传给正在活跃的APP , Event先告诉source1（mach_port）,source1唤醒RunLoop, 然后将事件Event分发给source0,然后由source0来处理。</p>\n<p>如果没有事件,也没有timer,则runloop就会睡眠, 如果有,则runloop就会被唤醒,然后跑一圈。</p>\n"},{"title":"iOS之文档 jazzy","abbrlink":"7c933de7","date":"2021-04-20T13:36:02.000Z","_content":"\n## 文档生成工具\n\n```shell\nDoxygen、appledoc、HeaderDoc\n```\n\n## 一、iOS 文档生成：appledoc、HeaderDoc\n\n1、objective——C\n  \n```shell\nappledoc Xcode script\n```\n\n### Start constants\n\n```shell\ncompany=\"gosuncn\";\ncompanyID=\"com.gosuncn\";\ncompanyURL=\"http://www.gosuncn.com/\";\ntarget=\"iphoneos\";\n#target=\"macosx\";\noutputPath=\"${PROJECT_DIR}\";\n```\n\n### End constants\n  \n```shell\n/usr/local/bin/appledoc \\\n  --project-name \"doc\" \\\n  --project-company \"${company}\" \\\n  --company-id \"${companyID}\" \\\n  --no-create-docset  \\\n  --output \"${outputPath}\" \\\n  --logformat xcode \\\n  --keep-intermediate-files \\\n  --no-repeat-first-par \\\n  --no-warn-invalid-crossref \\\n  --exit-threshold 2 \\\n  \"${PROJECT_DIR}\"\n```\n\n2、swift\n\n```shell\njazzy \\\n  --clean \\\n  --author Sumian \\\n  --author_url <http://sumian.com/> \\\n  --github_url <http://192.168.1.229/hepeng.l/sm_ios_repo_base> \\\n  --github-file-prefix <http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1> \\\n  --module-version 0.0.1 \\\n  --xcodebuild-arguments -scheme,sd_sdk_ios \\\n  --module sd_sdk_ios \\\n  --root-url ~/ \\\n  --output docs/swift_output \\\n  --theme docs/themes\n```\n","source":"_posts/iOS/Documents/Jazzy.md","raw":"---\ntitle: iOS之文档 jazzy\nabbrlink: 7c933de7\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 文档生成工具\n\n```shell\nDoxygen、appledoc、HeaderDoc\n```\n\n## 一、iOS 文档生成：appledoc、HeaderDoc\n\n1、objective——C\n  \n```shell\nappledoc Xcode script\n```\n\n### Start constants\n\n```shell\ncompany=\"gosuncn\";\ncompanyID=\"com.gosuncn\";\ncompanyURL=\"http://www.gosuncn.com/\";\ntarget=\"iphoneos\";\n#target=\"macosx\";\noutputPath=\"${PROJECT_DIR}\";\n```\n\n### End constants\n  \n```shell\n/usr/local/bin/appledoc \\\n  --project-name \"doc\" \\\n  --project-company \"${company}\" \\\n  --company-id \"${companyID}\" \\\n  --no-create-docset  \\\n  --output \"${outputPath}\" \\\n  --logformat xcode \\\n  --keep-intermediate-files \\\n  --no-repeat-first-par \\\n  --no-warn-invalid-crossref \\\n  --exit-threshold 2 \\\n  \"${PROJECT_DIR}\"\n```\n\n2、swift\n\n```shell\njazzy \\\n  --clean \\\n  --author Sumian \\\n  --author_url <http://sumian.com/> \\\n  --github_url <http://192.168.1.229/hepeng.l/sm_ios_repo_base> \\\n  --github-file-prefix <http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1> \\\n  --module-version 0.0.1 \\\n  --xcodebuild-arguments -scheme,sd_sdk_ios \\\n  --module sd_sdk_ios \\\n  --root-url ~/ \\\n  --output docs/swift_output \\\n  --theme docs/themes\n```\n","slug":"iOS/Documents/Jazzy","published":1,"updated":"2021-07-29T06:46:00.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn040014iu9k77ft5utb","content":"<h2 id=\"文档生成工具\"><a href=\"#文档生成工具\" class=\"headerlink\" title=\"文档生成工具\"></a>文档生成工具</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Doxygen、appledoc、HeaderDoc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一、iOS-文档生成：appledoc、HeaderDoc\"><a href=\"#一、iOS-文档生成：appledoc、HeaderDoc\" class=\"headerlink\" title=\"一、iOS 文档生成：appledoc、HeaderDoc\"></a>一、iOS 文档生成：appledoc、HeaderDoc</h2><p>1、objective——C</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appledoc Xcode script</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Start-constants\"><a href=\"#Start-constants\" class=\"headerlink\" title=\"Start constants\"></a>Start constants</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">company=&quot;gosuncn&quot;;</span><br><span class=\"line\">companyID=&quot;com.gosuncn&quot;;</span><br><span class=\"line\">companyURL=&quot;http://www.gosuncn.com/&quot;;</span><br><span class=\"line\">target=&quot;iphoneos&quot;;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">target=<span class=\"string\">&quot;macosx&quot;</span>;</span></span><br><span class=\"line\">outputPath=&quot;$&#123;PROJECT_DIR&#125;&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"End-constants\"><a href=\"#End-constants\" class=\"headerlink\" title=\"End constants\"></a>End constants</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/appledoc \\</span><br><span class=\"line\">  --project-name &quot;doc&quot; \\</span><br><span class=\"line\">  --project-company &quot;$&#123;company&#125;&quot; \\</span><br><span class=\"line\">  --company-id &quot;$&#123;companyID&#125;&quot; \\</span><br><span class=\"line\">  --no-create-docset  \\</span><br><span class=\"line\">  --output &quot;$&#123;outputPath&#125;&quot; \\</span><br><span class=\"line\">  --logformat xcode \\</span><br><span class=\"line\">  --keep-intermediate-files \\</span><br><span class=\"line\">  --no-repeat-first-par \\</span><br><span class=\"line\">  --no-warn-invalid-crossref \\</span><br><span class=\"line\">  --exit-threshold 2 \\</span><br><span class=\"line\">  &quot;$&#123;PROJECT_DIR&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>2、swift</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jazzy \\</span><br><span class=\"line\">  --clean \\</span><br><span class=\"line\">  --author Sumian \\</span><br><span class=\"line\">  --author_url &lt;http://sumian.com/&gt; \\</span><br><span class=\"line\">  --github_url &lt;http://192.168.1.229/hepeng.l/sm_ios_repo_base&gt; \\</span><br><span class=\"line\">  --github-file-prefix &lt;http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1&gt; \\</span><br><span class=\"line\">  --module-version 0.0.1 \\</span><br><span class=\"line\">  --xcodebuild-arguments -scheme,sd_sdk_ios \\</span><br><span class=\"line\">  --module sd_sdk_ios \\</span><br><span class=\"line\">  --root-url ~/ \\</span><br><span class=\"line\">  --output docs/swift_output \\</span><br><span class=\"line\">  --theme docs/themes</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文档生成工具\"><a href=\"#文档生成工具\" class=\"headerlink\" title=\"文档生成工具\"></a>文档生成工具</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Doxygen、appledoc、HeaderDoc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一、iOS-文档生成：appledoc、HeaderDoc\"><a href=\"#一、iOS-文档生成：appledoc、HeaderDoc\" class=\"headerlink\" title=\"一、iOS 文档生成：appledoc、HeaderDoc\"></a>一、iOS 文档生成：appledoc、HeaderDoc</h2><p>1、objective——C</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appledoc Xcode script</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Start-constants\"><a href=\"#Start-constants\" class=\"headerlink\" title=\"Start constants\"></a>Start constants</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">company=&quot;gosuncn&quot;;</span><br><span class=\"line\">companyID=&quot;com.gosuncn&quot;;</span><br><span class=\"line\">companyURL=&quot;http://www.gosuncn.com/&quot;;</span><br><span class=\"line\">target=&quot;iphoneos&quot;;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">target=<span class=\"string\">&quot;macosx&quot;</span>;</span></span><br><span class=\"line\">outputPath=&quot;$&#123;PROJECT_DIR&#125;&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"End-constants\"><a href=\"#End-constants\" class=\"headerlink\" title=\"End constants\"></a>End constants</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/bin/appledoc \\</span><br><span class=\"line\">  --project-name &quot;doc&quot; \\</span><br><span class=\"line\">  --project-company &quot;$&#123;company&#125;&quot; \\</span><br><span class=\"line\">  --company-id &quot;$&#123;companyID&#125;&quot; \\</span><br><span class=\"line\">  --no-create-docset  \\</span><br><span class=\"line\">  --output &quot;$&#123;outputPath&#125;&quot; \\</span><br><span class=\"line\">  --logformat xcode \\</span><br><span class=\"line\">  --keep-intermediate-files \\</span><br><span class=\"line\">  --no-repeat-first-par \\</span><br><span class=\"line\">  --no-warn-invalid-crossref \\</span><br><span class=\"line\">  --exit-threshold 2 \\</span><br><span class=\"line\">  &quot;$&#123;PROJECT_DIR&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>2、swift</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jazzy \\</span><br><span class=\"line\">  --clean \\</span><br><span class=\"line\">  --author Sumian \\</span><br><span class=\"line\">  --author_url &lt;http://sumian.com/&gt; \\</span><br><span class=\"line\">  --github_url &lt;http://192.168.1.229/hepeng.l/sm_ios_repo_base&gt; \\</span><br><span class=\"line\">  --github-file-prefix &lt;http://192.168.1.229/hepeng.l/sm_ios_repo_base/tree/0.0.1&gt; \\</span><br><span class=\"line\">  --module-version 0.0.1 \\</span><br><span class=\"line\">  --xcodebuild-arguments -scheme,sd_sdk_ios \\</span><br><span class=\"line\">  --module sd_sdk_ios \\</span><br><span class=\"line\">  --root-url ~/ \\</span><br><span class=\"line\">  --output docs/swift_output \\</span><br><span class=\"line\">  --theme docs/themes</span><br></pre></td></tr></table></figure>\n"},{"title":"iOS之持久化","abbrlink":"396dcc83","date":"2021-04-20T13:36:02.000Z","_content":"## 1. 数据库\n\n### 1.1 [SQLite](https://www.w3cschool.cn/sqlite/sqlite-tutorial.html)\n\n## 1.2 [Core data](https://developer.aliyun.com/article/117778)\n\n### 1.3 [FFMDB](https://github.com/ccgus/fmdb)\n\n## 2. 文件\n\n## 3. plist\n\n## 4. 归档\n\n## 5. keychain\n\n## 6. Userdefault\n\n### 6.1 [MMKV](https://github.com/Tencent/MMKV/blob/master/README_CN.md)\n","source":"_posts/iOS/DataPersistence/DataPersistence.md","raw":"---\ntitle: iOS之持久化\nabbrlink: 396dcc83\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. 数据库\n\n### 1.1 [SQLite](https://www.w3cschool.cn/sqlite/sqlite-tutorial.html)\n\n## 1.2 [Core data](https://developer.aliyun.com/article/117778)\n\n### 1.3 [FFMDB](https://github.com/ccgus/fmdb)\n\n## 2. 文件\n\n## 3. plist\n\n## 4. 归档\n\n## 5. keychain\n\n## 6. Userdefault\n\n### 6.1 [MMKV](https://github.com/Tencent/MMKV/blob/master/README_CN.md)\n","slug":"iOS/DataPersistence/DataPersistence","published":1,"updated":"2021-07-29T06:46:00.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn050015iu9kbhuddw9s","content":"<h2 id=\"1-数据库\"><a href=\"#1-数据库\" class=\"headerlink\" title=\"1. 数据库\"></a>1. 数据库</h2><h3 id=\"1-1-SQLite\"><a href=\"#1-1-SQLite\" class=\"headerlink\" title=\"1.1 SQLite\"></a>1.1 <a href=\"https://www.w3cschool.cn/sqlite/sqlite-tutorial.html\">SQLite</a></h3><h2 id=\"1-2-Core-data\"><a href=\"#1-2-Core-data\" class=\"headerlink\" title=\"1.2 Core data\"></a>1.2 <a href=\"https://developer.aliyun.com/article/117778\">Core data</a></h2><h3 id=\"1-3-FFMDB\"><a href=\"#1-3-FFMDB\" class=\"headerlink\" title=\"1.3 FFMDB\"></a>1.3 <a href=\"https://github.com/ccgus/fmdb\">FFMDB</a></h3><h2 id=\"2-文件\"><a href=\"#2-文件\" class=\"headerlink\" title=\"2. 文件\"></a>2. 文件</h2><h2 id=\"3-plist\"><a href=\"#3-plist\" class=\"headerlink\" title=\"3. plist\"></a>3. plist</h2><h2 id=\"4-归档\"><a href=\"#4-归档\" class=\"headerlink\" title=\"4. 归档\"></a>4. 归档</h2><h2 id=\"5-keychain\"><a href=\"#5-keychain\" class=\"headerlink\" title=\"5. keychain\"></a>5. keychain</h2><h2 id=\"6-Userdefault\"><a href=\"#6-Userdefault\" class=\"headerlink\" title=\"6. Userdefault\"></a>6. Userdefault</h2><h3 id=\"6-1-MMKV\"><a href=\"#6-1-MMKV\" class=\"headerlink\" title=\"6.1 MMKV\"></a>6.1 <a href=\"https://github.com/Tencent/MMKV/blob/master/README_CN.md\">MMKV</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-数据库\"><a href=\"#1-数据库\" class=\"headerlink\" title=\"1. 数据库\"></a>1. 数据库</h2><h3 id=\"1-1-SQLite\"><a href=\"#1-1-SQLite\" class=\"headerlink\" title=\"1.1 SQLite\"></a>1.1 <a href=\"https://www.w3cschool.cn/sqlite/sqlite-tutorial.html\">SQLite</a></h3><h2 id=\"1-2-Core-data\"><a href=\"#1-2-Core-data\" class=\"headerlink\" title=\"1.2 Core data\"></a>1.2 <a href=\"https://developer.aliyun.com/article/117778\">Core data</a></h2><h3 id=\"1-3-FFMDB\"><a href=\"#1-3-FFMDB\" class=\"headerlink\" title=\"1.3 FFMDB\"></a>1.3 <a href=\"https://github.com/ccgus/fmdb\">FFMDB</a></h3><h2 id=\"2-文件\"><a href=\"#2-文件\" class=\"headerlink\" title=\"2. 文件\"></a>2. 文件</h2><h2 id=\"3-plist\"><a href=\"#3-plist\" class=\"headerlink\" title=\"3. plist\"></a>3. plist</h2><h2 id=\"4-归档\"><a href=\"#4-归档\" class=\"headerlink\" title=\"4. 归档\"></a>4. 归档</h2><h2 id=\"5-keychain\"><a href=\"#5-keychain\" class=\"headerlink\" title=\"5. keychain\"></a>5. keychain</h2><h2 id=\"6-Userdefault\"><a href=\"#6-Userdefault\" class=\"headerlink\" title=\"6. Userdefault\"></a>6. Userdefault</h2><h3 id=\"6-1-MMKV\"><a href=\"#6-1-MMKV\" class=\"headerlink\" title=\"6.1 MMKV\"></a>6.1 <a href=\"https://github.com/Tencent/MMKV/blob/master/README_CN.md\">MMKV</a></h3>"},{"title":"iOS之SQLite","abbrlink":"92e941da","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1、终端命令\n\n```sql\n.auth ON|OFF           Show authorizer callbacks\n.backup ?DB? FILE      Backup DB (default \"main\") to FILE\n                         Add \"--append\" to open using appendvfs.\n.bail on|off           Stop after hitting an error.  Default OFF\n.binary on|off         Turn binary output on or off.  Default OFF\n.cd DIRECTORY          Change the working directory to DIRECTORY\n.changes on|off        Show number of rows changed by SQL\n.check GLOB            Fail if output since .testcase does not match\n.clone NEWDB           Clone data into NEWDB from the existing database\n.databases             List names and files of attached databases\n.dbconfig ?op? ?val?   List or change sqlite3_db_config() options\n.dbinfo ?DB?           Show status information about the database\n.dump ?TABLE? ...      Dump the database in an SQL text format\n                         If TABLE specified, only dump tables matching\n                         LIKE pattern TABLE.\n.echo on|off           Turn command echo on or off\n.eqp on|off|full       Enable or disable automatic EXPLAIN QUERY PLAN\n.excel                 Display the output of next command in a spreadsheet\n.exit                  Exit this program\n.expert                EXPERIMENTAL. Suggest indexes for specified queries\n.fullschema ?--indent? Show schema and the content of sqlite_stat tables\n.headers on|off        Turn display of headers on or off\n.help                  Show this message\n.import FILE TABLE     Import data from FILE into TABLE\n.imposter INDEX TABLE  Create imposter table TABLE on index INDEX\n.indexes ?TABLE?       Show names of all indexes\n                         If TABLE specified, only show indexes for tables\n                         matching LIKE pattern TABLE.\n.limit ?LIMIT? ?VAL?   Display or change the value of an SQLITE_LIMIT\n.lint OPTIONS          Report potential schema issues. Options:\n                         fkey-indexes     Find missing foreign key indexes\n.log FILE|off          Turn logging on or off.  FILE can be stderr/stdout\n.mode MODE ?TABLE?     Set output mode where MODE is one of:\n                         ascii    Columns/rows delimited by 0x1F and 0x1E\n                         csv      Comma-separated values\n                         column   Left-aligned columns.  (See .width)\n                         html     HTML <table> code\n                         insert   SQL insert statements for TABLE\n                         line     One value per line\n                         list     Values delimited by \"|\"\n                         quote    Escape answers as for SQL\n                         tabs     Tab-separated values\n                         tcl      TCL list elements\n.nullvalue STRING      Use STRING in place of NULL values\n.once (-e|-x|FILE)     Output for the next SQL command only to FILE\n                         or invoke system text editor (-e) or spreadsheet (-x)\n                         on the output.\n.open ?OPTIONS? ?FILE? Close existing database and reopen FILE\n                         The --new option starts with an empty file\n                         Other options: --readonly --append --zip\n.output ?FILE?         Send output to FILE or stdout\n.print STRING...       Print literal STRING\n.prompt MAIN CONTINUE  Replace the standard prompts\n.quit                  Exit this program\n.read FILENAME         Execute SQL in FILENAME\n.restore ?DB? FILE     Restore content of DB (default \"main\") from FILE\n.save FILE             Write in-memory database into FILE\n.scanstats on|off      Turn sqlite3_stmt_scanstatus() metrics on or off\n.schema ?PATTERN?      Show the CREATE statements matching PATTERN\n                          Add --indent for pretty-printing\n.selftest ?--init?     Run tests defined in the SELFTEST table\n.separator COL ?ROW?   Change the column separator and optionally the row\n                         separator for both the output mode and .import\n.session CMD ...       Create or control sessions\n.sha3sum ?OPTIONS...?  Compute a SHA3 hash of database content\n.shell CMD ARGS...     Run CMD ARGS... in a system shell\n.show                  Show the current values for various settings\n.stats ?on|off?        Show stats or turn stats on or off\n.system CMD ARGS...    Run CMD ARGS... in a system shell\n.tables ?TABLE?        List names of tables\n                         If TABLE specified, only list tables matching\n                         LIKE pattern TABLE.\n.testcase NAME         Begin redirecting output to 'testcase-out.txt'\n.timeout MS            Try opening locked tables for MS milliseconds\n.timer on|off          Turn SQL timer on or off\n.trace FILE|off        Output each SQL statement as it is run\n.vfsinfo ?AUX?         Information about the top-level VFS\n.vfslist               List all available VFSes\n.vfsname ?AUX?         Print the name of the VFS stack\n.width NUM1 NUM2 ...   Set column widths for \"column\" mode\n                         Negative values right-justify\n\n```\n\n## 2、程序\n\nSQLite 语句\n\n所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。\n\n2.1 SQLite ANALYZE 语句：\n\n``` sql\nANALYZE;\nor\nANALYZE database_name;\nor\nANALYZE database_name.table_name;\n```\n\n2.2 SQLite AND/OR 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION-1 {AND|OR} CONDITION-2;\n```\n\n2.3 SQLite ALTER TABLE 语句：\n\n``` sql\nALTER TABLE table_name ADD COLUMN column_def...;\n```\n\n2.4 SQLite ALTER TABLE 语句（Rename）：\n\n``` sql\nALTER TABLE table_name RENAME TO new_table_name;\n```\n\n2.5 SQLite ATTACH DATABASE 语句：\n\n``` sql\nATTACH DATABASE 'DatabaseName' As 'Alias-Name';\n```\n\n2.6 SQLite BEGIN TRANSACTION 语句：\n\n``` sql\nBEGIN;\nor\nBEGIN EXCLUSIVE TRANSACTION;\n```\n\n2.7 SQLite BETWEEN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name BETWEEN val-1 AND val-2;\n```\n\n2.8 SQLite COMMIT 语句：\n\n``` sql\nCOMMIT;\n```\n\n2.9 SQLite CREATE INDEX 语句：\n\n``` sql\nCREATE INDEX index_name\nON table_name ( column_name COLLATE NOCASE );\n```\n\n2.10 SQLite CREATE UNIQUE INDEX 语句：\n\n``` sql\nCREATE UNIQUE INDEX index_name\nON table_name ( column1, column2,...columnN);\n```\n\n2.11 SQLite CREATE TABLE 语句：\n\n``` sql\nCREATE TABLE table_name(\n   column1 datatype,\n   column2 datatype,\n   column3 datatype,\n   .....\n   columnN datatype,\n   PRIMARY KEY( one or more columns )\n);\n```\n\n2.12 SQLite CREATE TRIGGER 语句：\n\n``` sql\nCREATE TRIGGER database_name.trigger_name\nBEFORE INSERT ON table_name FOR EACH ROW\nBEGIN\n   stmt1;\n   stmt2;\n   ....\nEND;\n```\n\n2.13 SQLite CREATE VIEW 语句：\n\n``` sql\nCREATE VIEW database_name.view_name  AS\nSELECT statement....;\n```\n\n2.14 SQLite CREATE VIRTUAL TABLE 语句：\n\n``` sql\nCREATE VIRTUAL TABLE database_name.table_name USING weblog( access.log );\nor\nCREATE VIRTUAL TABLE database_name.table_name USING fts3( );\n```\n\n2.15 SQLite COMMIT TRANSACTION 语句：\n\n``` sql\nCOMMIT;\n```\n\n2.16 SQLite COUNT 子句：\n\n``` sql\nSELECT COUNT(column_name)\nFROM   table_name\nWHERE  CONDITION;\n```\n\n2.17 SQLite DELETE 语句：\n\n``` sql\nDELETE FROM table_name\nWHERE  {CONDITION};\n```\n\n2.18 SQLite DETACH DATABASE 语句：\n\n``` sql\nDETACH DATABASE 'Alias-Name';\n```\n\n2.19 SQLite DISTINCT 子句：\n\n``` sql\nSELECT DISTINCT column1, column2....columnN\nFROM   table_name;\n```\n\n2.20 SQLite DROP INDEX 语句：\n\n``` sql\nDROP INDEX database_name.index_name;\n```\n\n2.21 SQLite DROP TABLE 语句：\n\n``` sql\nDROP TABLE database_name.table_name;\n```\n\n2.22 SQLite DROP VIEW 语句：\n\n``` sql\nDROP VIEW view_name;\n```\n\n2.23 SQLite DROP TRIGGER 语句：\n\n``` sql\nDROP TRIGGER trigger_name\n```\n\n2.24 SQLite EXISTS 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name EXISTS (SELECT * FROM   table_name );\n```\n\n2.25 SQLite EXPLAIN 语句：\n\n``` sql\nEXPLAIN INSERT statement...;\nor\nEXPLAIN QUERY PLAN SELECT statement...;\n```\n\n2.26 SQLite GLOB 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name GLOB { PATTERN };\n```\n\n2.27 SQLite GROUP BY 子句：\n\n``` sql\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name;\n```\n\n2.28 SQLite HAVING 子句：\n\n``` sql\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name\nHAVING (arithematic function condition);\n```\n\n2.29 SQLite INSERT INTO 语句：\n\n``` sql\nINSERT INTO table_name( column1, column2....columnN)\nVALUES ( value1, value2....valueN);\n```\n\n2.30 SQLite IN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name IN (val-1, val-2,...val-N);\n```\n\n2.31 SQLite Like 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name LIKE { PATTERN };\n```\n\n2.32 SQLite NOT IN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name NOT IN (val-1, val-2,...val-N);\n```\n\n2.33 SQLite ORDER BY 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION\nORDER BY column_name {ASC|DESC};\n```\n\n2.34 SQLite PRAGMA 语句：\n\n``` sql\nPRAGMA pragma_name;\n\nFor example:\nPRAGMA page_size;\nPRAGMA cache_size = 1024;\nPRAGMA table_info(table_name);\n```\n\n2.35 SQLite RELEASE SAVEPOINT 语句：\n\n``` sql\nRELEASE savepoint_name;\n```\n\n2.36 SQLite REINDEX 语句：\n\n``` sql\nREINDEX collation_name;\nREINDEX database_name.index_name;\nREINDEX database_name.table_name;\n```\n\n2.37 SQLite ROLLBACK 语句：\n\n``` sql\nROLLBACK;\nor\nROLLBACK TO SAVEPOINT savepoint_name;\n```\n\n2.38 SQLite SAVEPOINT 语句：\n\n``` sql\nSAVEPOINT savepoint_name;\n```\n\n2.39 SQLite SELECT 语句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name;\n```\n\n2.40 SQLite UPDATE 语句：\n\n``` sql\nUPDATE table_name\nSET column1 = value1, column2 = value2....columnN=valueN\n[ WHERE  CONDITION ];\n```\n\n2.41 SQLite VACUUM 语句：\n\n``` sql\nVACUUM;\n```\n\n2.42 SQLite WHERE 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION;\n```\n\n## 3、常见专有名词\n\n事务\n游标\n触发器\n存储过程\n回滚\n约束\n索引\n视图\n\n## 4、常用操作\n\n数据同步\n导入、导出\nCRUD (Create/Retrieve/Update/Delete)\n\n## 5、建表原则\n\n数据范式\n\n## 6、事务特性\n\nACID\n\n## 7、数据库\n\n常见数据库：SQLite、MySQL、SQLServer、Oracle、MOngoDB\n\n7.1 分类：\n    关系型：Oracle和MySQL\n    非关系型：NoSQL(NoSQL = Not Only SQL )\n（1）键值存储数据库（key-value）\n\n键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。\n\n键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。\n\n典型产品：Memcached、Redis、MemcacheDB\n\n（2）列存储（Column-oriented）数据库\n\n列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。\n\n这种数据库通常用来应对分布式存储海量数据。\n\n典型产品：Cassandra、HBase\n\n（3）面向文档（Document-Oriented）数据库\n\n文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。\n\n面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。\n\n典型产品：MongoDB、CouchDB\n\n（4）图形数据库\n\n图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。\n\n典型产品：Neo4J、InforGrid\n\n7.2 数据库引擎：数据库引擎是用于存储、处理和保护数据的核心服务。\nMYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。\n\n你能用的数据库引擎取决于mysql在安装的时候是如何被编译的。要添加一个新的引擎，就必须重新编译MYSQL。在缺省情况下，MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。\n\n* ISAM\n  \n>ISAM是一个定义明确且历经时间考验的数据表格管理方法，它在设计之时就考虑到数据库被查询的次数要远大于更新的次数。因此，ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错：如果你的硬盘崩溃了，那么数据文件就无法恢复了。如果你正在把ISAM用在关键任务应用程序里，那就必须经常备份你所有的实时数据，通过其复制特性，MYSQL能够支持这样的备份应用程序。\n\n* MYISAM\n  \n>MYISAM是MYSQL的ISAM扩展格式和缺省的数据库引擎。除了提供ISAM里所没有的索引和字段管理的大量功能，MYISAM还使用一种表格锁定的机制，来优化多个并发的读写操作。其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。MYISAM还有一些有用的扩展，例如用来修复数据库文件的MYISAMCHK工具和用来恢复浪费空间的MYISAMPACK工具。\nMYISAM强调了快速读取操作，这可能就是为什么MYSQL受到了WEB开发如此青睐的主要原因：在WEB开发中你所进行的大量数据操作都是读取操作。所以，大多数虚拟主机提供商和INTERNET平台提供商只允许使用MYISAM格式。\n\n* HEAP\n\n>HEAP允许只驻留在内存里的临时表格。驻留在内存里让HEAP要比ISAM和MYISAM都快，但是它所管理的数据是不稳定的，而且如果在关机之前没有进行保存，那么所有的数据都会丢失。在数据行被删除的时候，HEAP也不会浪费大量的空间。HEAP表格在你需要使用SELECT表达式来选择和操控数据的时候非常有用。要记住，在用完表格之后就删除表格。\n\n* INNODB和BERKLEYDB\n\n>INNODB和BERKLEYDB（BDB）数据库引擎都是造就MYSQL灵活性的技术的直接产品，这项技术就是MYSQL++ API。在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MYISAM数据库引擎不支持事务处理也不支持外来键。尽管要比ISAM和MYISAM引擎慢很多，但是INNODB和BDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。如前所述，如果你的设计需要这些特性中的一者或者两者，那你就要被迫使用后两个引擎中的一个了。\n\n## [数据库三范式经典实例解析](http://www.blogjava.net/hijackwust/archive/2007/10/21/154793.html)\n","source":"_posts/iOS/DataPersistence/DataBase.md","raw":"---\ntitle: iOS之SQLite\nabbrlink: 92e941da\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1、终端命令\n\n```sql\n.auth ON|OFF           Show authorizer callbacks\n.backup ?DB? FILE      Backup DB (default \"main\") to FILE\n                         Add \"--append\" to open using appendvfs.\n.bail on|off           Stop after hitting an error.  Default OFF\n.binary on|off         Turn binary output on or off.  Default OFF\n.cd DIRECTORY          Change the working directory to DIRECTORY\n.changes on|off        Show number of rows changed by SQL\n.check GLOB            Fail if output since .testcase does not match\n.clone NEWDB           Clone data into NEWDB from the existing database\n.databases             List names and files of attached databases\n.dbconfig ?op? ?val?   List or change sqlite3_db_config() options\n.dbinfo ?DB?           Show status information about the database\n.dump ?TABLE? ...      Dump the database in an SQL text format\n                         If TABLE specified, only dump tables matching\n                         LIKE pattern TABLE.\n.echo on|off           Turn command echo on or off\n.eqp on|off|full       Enable or disable automatic EXPLAIN QUERY PLAN\n.excel                 Display the output of next command in a spreadsheet\n.exit                  Exit this program\n.expert                EXPERIMENTAL. Suggest indexes for specified queries\n.fullschema ?--indent? Show schema and the content of sqlite_stat tables\n.headers on|off        Turn display of headers on or off\n.help                  Show this message\n.import FILE TABLE     Import data from FILE into TABLE\n.imposter INDEX TABLE  Create imposter table TABLE on index INDEX\n.indexes ?TABLE?       Show names of all indexes\n                         If TABLE specified, only show indexes for tables\n                         matching LIKE pattern TABLE.\n.limit ?LIMIT? ?VAL?   Display or change the value of an SQLITE_LIMIT\n.lint OPTIONS          Report potential schema issues. Options:\n                         fkey-indexes     Find missing foreign key indexes\n.log FILE|off          Turn logging on or off.  FILE can be stderr/stdout\n.mode MODE ?TABLE?     Set output mode where MODE is one of:\n                         ascii    Columns/rows delimited by 0x1F and 0x1E\n                         csv      Comma-separated values\n                         column   Left-aligned columns.  (See .width)\n                         html     HTML <table> code\n                         insert   SQL insert statements for TABLE\n                         line     One value per line\n                         list     Values delimited by \"|\"\n                         quote    Escape answers as for SQL\n                         tabs     Tab-separated values\n                         tcl      TCL list elements\n.nullvalue STRING      Use STRING in place of NULL values\n.once (-e|-x|FILE)     Output for the next SQL command only to FILE\n                         or invoke system text editor (-e) or spreadsheet (-x)\n                         on the output.\n.open ?OPTIONS? ?FILE? Close existing database and reopen FILE\n                         The --new option starts with an empty file\n                         Other options: --readonly --append --zip\n.output ?FILE?         Send output to FILE or stdout\n.print STRING...       Print literal STRING\n.prompt MAIN CONTINUE  Replace the standard prompts\n.quit                  Exit this program\n.read FILENAME         Execute SQL in FILENAME\n.restore ?DB? FILE     Restore content of DB (default \"main\") from FILE\n.save FILE             Write in-memory database into FILE\n.scanstats on|off      Turn sqlite3_stmt_scanstatus() metrics on or off\n.schema ?PATTERN?      Show the CREATE statements matching PATTERN\n                          Add --indent for pretty-printing\n.selftest ?--init?     Run tests defined in the SELFTEST table\n.separator COL ?ROW?   Change the column separator and optionally the row\n                         separator for both the output mode and .import\n.session CMD ...       Create or control sessions\n.sha3sum ?OPTIONS...?  Compute a SHA3 hash of database content\n.shell CMD ARGS...     Run CMD ARGS... in a system shell\n.show                  Show the current values for various settings\n.stats ?on|off?        Show stats or turn stats on or off\n.system CMD ARGS...    Run CMD ARGS... in a system shell\n.tables ?TABLE?        List names of tables\n                         If TABLE specified, only list tables matching\n                         LIKE pattern TABLE.\n.testcase NAME         Begin redirecting output to 'testcase-out.txt'\n.timeout MS            Try opening locked tables for MS milliseconds\n.timer on|off          Turn SQL timer on or off\n.trace FILE|off        Output each SQL statement as it is run\n.vfsinfo ?AUX?         Information about the top-level VFS\n.vfslist               List all available VFSes\n.vfsname ?AUX?         Print the name of the VFS stack\n.width NUM1 NUM2 ...   Set column widths for \"column\" mode\n                         Negative values right-justify\n\n```\n\n## 2、程序\n\nSQLite 语句\n\n所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。\n\n2.1 SQLite ANALYZE 语句：\n\n``` sql\nANALYZE;\nor\nANALYZE database_name;\nor\nANALYZE database_name.table_name;\n```\n\n2.2 SQLite AND/OR 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION-1 {AND|OR} CONDITION-2;\n```\n\n2.3 SQLite ALTER TABLE 语句：\n\n``` sql\nALTER TABLE table_name ADD COLUMN column_def...;\n```\n\n2.4 SQLite ALTER TABLE 语句（Rename）：\n\n``` sql\nALTER TABLE table_name RENAME TO new_table_name;\n```\n\n2.5 SQLite ATTACH DATABASE 语句：\n\n``` sql\nATTACH DATABASE 'DatabaseName' As 'Alias-Name';\n```\n\n2.6 SQLite BEGIN TRANSACTION 语句：\n\n``` sql\nBEGIN;\nor\nBEGIN EXCLUSIVE TRANSACTION;\n```\n\n2.7 SQLite BETWEEN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name BETWEEN val-1 AND val-2;\n```\n\n2.8 SQLite COMMIT 语句：\n\n``` sql\nCOMMIT;\n```\n\n2.9 SQLite CREATE INDEX 语句：\n\n``` sql\nCREATE INDEX index_name\nON table_name ( column_name COLLATE NOCASE );\n```\n\n2.10 SQLite CREATE UNIQUE INDEX 语句：\n\n``` sql\nCREATE UNIQUE INDEX index_name\nON table_name ( column1, column2,...columnN);\n```\n\n2.11 SQLite CREATE TABLE 语句：\n\n``` sql\nCREATE TABLE table_name(\n   column1 datatype,\n   column2 datatype,\n   column3 datatype,\n   .....\n   columnN datatype,\n   PRIMARY KEY( one or more columns )\n);\n```\n\n2.12 SQLite CREATE TRIGGER 语句：\n\n``` sql\nCREATE TRIGGER database_name.trigger_name\nBEFORE INSERT ON table_name FOR EACH ROW\nBEGIN\n   stmt1;\n   stmt2;\n   ....\nEND;\n```\n\n2.13 SQLite CREATE VIEW 语句：\n\n``` sql\nCREATE VIEW database_name.view_name  AS\nSELECT statement....;\n```\n\n2.14 SQLite CREATE VIRTUAL TABLE 语句：\n\n``` sql\nCREATE VIRTUAL TABLE database_name.table_name USING weblog( access.log );\nor\nCREATE VIRTUAL TABLE database_name.table_name USING fts3( );\n```\n\n2.15 SQLite COMMIT TRANSACTION 语句：\n\n``` sql\nCOMMIT;\n```\n\n2.16 SQLite COUNT 子句：\n\n``` sql\nSELECT COUNT(column_name)\nFROM   table_name\nWHERE  CONDITION;\n```\n\n2.17 SQLite DELETE 语句：\n\n``` sql\nDELETE FROM table_name\nWHERE  {CONDITION};\n```\n\n2.18 SQLite DETACH DATABASE 语句：\n\n``` sql\nDETACH DATABASE 'Alias-Name';\n```\n\n2.19 SQLite DISTINCT 子句：\n\n``` sql\nSELECT DISTINCT column1, column2....columnN\nFROM   table_name;\n```\n\n2.20 SQLite DROP INDEX 语句：\n\n``` sql\nDROP INDEX database_name.index_name;\n```\n\n2.21 SQLite DROP TABLE 语句：\n\n``` sql\nDROP TABLE database_name.table_name;\n```\n\n2.22 SQLite DROP VIEW 语句：\n\n``` sql\nDROP VIEW view_name;\n```\n\n2.23 SQLite DROP TRIGGER 语句：\n\n``` sql\nDROP TRIGGER trigger_name\n```\n\n2.24 SQLite EXISTS 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name EXISTS (SELECT * FROM   table_name );\n```\n\n2.25 SQLite EXPLAIN 语句：\n\n``` sql\nEXPLAIN INSERT statement...;\nor\nEXPLAIN QUERY PLAN SELECT statement...;\n```\n\n2.26 SQLite GLOB 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name GLOB { PATTERN };\n```\n\n2.27 SQLite GROUP BY 子句：\n\n``` sql\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name;\n```\n\n2.28 SQLite HAVING 子句：\n\n``` sql\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name\nHAVING (arithematic function condition);\n```\n\n2.29 SQLite INSERT INTO 语句：\n\n``` sql\nINSERT INTO table_name( column1, column2....columnN)\nVALUES ( value1, value2....valueN);\n```\n\n2.30 SQLite IN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name IN (val-1, val-2,...val-N);\n```\n\n2.31 SQLite Like 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name LIKE { PATTERN };\n```\n\n2.32 SQLite NOT IN 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name NOT IN (val-1, val-2,...val-N);\n```\n\n2.33 SQLite ORDER BY 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION\nORDER BY column_name {ASC|DESC};\n```\n\n2.34 SQLite PRAGMA 语句：\n\n``` sql\nPRAGMA pragma_name;\n\nFor example:\nPRAGMA page_size;\nPRAGMA cache_size = 1024;\nPRAGMA table_info(table_name);\n```\n\n2.35 SQLite RELEASE SAVEPOINT 语句：\n\n``` sql\nRELEASE savepoint_name;\n```\n\n2.36 SQLite REINDEX 语句：\n\n``` sql\nREINDEX collation_name;\nREINDEX database_name.index_name;\nREINDEX database_name.table_name;\n```\n\n2.37 SQLite ROLLBACK 语句：\n\n``` sql\nROLLBACK;\nor\nROLLBACK TO SAVEPOINT savepoint_name;\n```\n\n2.38 SQLite SAVEPOINT 语句：\n\n``` sql\nSAVEPOINT savepoint_name;\n```\n\n2.39 SQLite SELECT 语句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name;\n```\n\n2.40 SQLite UPDATE 语句：\n\n``` sql\nUPDATE table_name\nSET column1 = value1, column2 = value2....columnN=valueN\n[ WHERE  CONDITION ];\n```\n\n2.41 SQLite VACUUM 语句：\n\n``` sql\nVACUUM;\n```\n\n2.42 SQLite WHERE 子句：\n\n``` sql\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  CONDITION;\n```\n\n## 3、常见专有名词\n\n事务\n游标\n触发器\n存储过程\n回滚\n约束\n索引\n视图\n\n## 4、常用操作\n\n数据同步\n导入、导出\nCRUD (Create/Retrieve/Update/Delete)\n\n## 5、建表原则\n\n数据范式\n\n## 6、事务特性\n\nACID\n\n## 7、数据库\n\n常见数据库：SQLite、MySQL、SQLServer、Oracle、MOngoDB\n\n7.1 分类：\n    关系型：Oracle和MySQL\n    非关系型：NoSQL(NoSQL = Not Only SQL )\n（1）键值存储数据库（key-value）\n\n键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。\n\n键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。\n\n典型产品：Memcached、Redis、MemcacheDB\n\n（2）列存储（Column-oriented）数据库\n\n列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。\n\n这种数据库通常用来应对分布式存储海量数据。\n\n典型产品：Cassandra、HBase\n\n（3）面向文档（Document-Oriented）数据库\n\n文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。\n\n面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。\n\n典型产品：MongoDB、CouchDB\n\n（4）图形数据库\n\n图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。\n\n典型产品：Neo4J、InforGrid\n\n7.2 数据库引擎：数据库引擎是用于存储、处理和保护数据的核心服务。\nMYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。\n\n你能用的数据库引擎取决于mysql在安装的时候是如何被编译的。要添加一个新的引擎，就必须重新编译MYSQL。在缺省情况下，MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。\n\n* ISAM\n  \n>ISAM是一个定义明确且历经时间考验的数据表格管理方法，它在设计之时就考虑到数据库被查询的次数要远大于更新的次数。因此，ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错：如果你的硬盘崩溃了，那么数据文件就无法恢复了。如果你正在把ISAM用在关键任务应用程序里，那就必须经常备份你所有的实时数据，通过其复制特性，MYSQL能够支持这样的备份应用程序。\n\n* MYISAM\n  \n>MYISAM是MYSQL的ISAM扩展格式和缺省的数据库引擎。除了提供ISAM里所没有的索引和字段管理的大量功能，MYISAM还使用一种表格锁定的机制，来优化多个并发的读写操作。其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。MYISAM还有一些有用的扩展，例如用来修复数据库文件的MYISAMCHK工具和用来恢复浪费空间的MYISAMPACK工具。\nMYISAM强调了快速读取操作，这可能就是为什么MYSQL受到了WEB开发如此青睐的主要原因：在WEB开发中你所进行的大量数据操作都是读取操作。所以，大多数虚拟主机提供商和INTERNET平台提供商只允许使用MYISAM格式。\n\n* HEAP\n\n>HEAP允许只驻留在内存里的临时表格。驻留在内存里让HEAP要比ISAM和MYISAM都快，但是它所管理的数据是不稳定的，而且如果在关机之前没有进行保存，那么所有的数据都会丢失。在数据行被删除的时候，HEAP也不会浪费大量的空间。HEAP表格在你需要使用SELECT表达式来选择和操控数据的时候非常有用。要记住，在用完表格之后就删除表格。\n\n* INNODB和BERKLEYDB\n\n>INNODB和BERKLEYDB（BDB）数据库引擎都是造就MYSQL灵活性的技术的直接产品，这项技术就是MYSQL++ API。在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MYISAM数据库引擎不支持事务处理也不支持外来键。尽管要比ISAM和MYISAM引擎慢很多，但是INNODB和BDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。如前所述，如果你的设计需要这些特性中的一者或者两者，那你就要被迫使用后两个引擎中的一个了。\n\n## [数据库三范式经典实例解析](http://www.blogjava.net/hijackwust/archive/2007/10/21/154793.html)\n","slug":"iOS/DataPersistence/DataBase","published":1,"updated":"2021-07-29T06:46:00.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn060016iu9khjso5zsx","content":"<h2 id=\"1、终端命令\"><a href=\"#1、终端命令\" class=\"headerlink\" title=\"1、终端命令\"></a>1、终端命令</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.auth <span class=\"keyword\">ON</span><span class=\"operator\">|</span>OFF           <span class=\"keyword\">Show</span> authorizer callbacks</span><br><span class=\"line\">.backup ?DB? FILE      Backup DB (<span class=\"keyword\">default</span> &quot;main&quot;) <span class=\"keyword\">to</span> FILE</span><br><span class=\"line\">                         <span class=\"keyword\">Add</span> &quot;--append&quot; <span class=\"keyword\">to</span> <span class=\"keyword\">open</span> <span class=\"keyword\">using</span> appendvfs.</span><br><span class=\"line\">.bail <span class=\"keyword\">on</span><span class=\"operator\">|</span>off           Stop after hitting an error.  <span class=\"keyword\">Default</span> OFF</span><br><span class=\"line\">.<span class=\"type\">binary</span> <span class=\"keyword\">on</span><span class=\"operator\">|</span>off         Turn <span class=\"type\">binary</span> output <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off.  <span class=\"keyword\">Default</span> OFF</span><br><span class=\"line\">.cd DIRECTORY          Change the working directory <span class=\"keyword\">to</span> DIRECTORY</span><br><span class=\"line\">.changes <span class=\"keyword\">on</span><span class=\"operator\">|</span>off        <span class=\"keyword\">Show</span> number <span class=\"keyword\">of</span> <span class=\"keyword\">rows</span> changed <span class=\"keyword\">by</span> <span class=\"keyword\">SQL</span></span><br><span class=\"line\">.<span class=\"keyword\">check</span> GLOB            Fail if output since .testcase does <span class=\"keyword\">not</span> <span class=\"keyword\">match</span></span><br><span class=\"line\">.clone NEWDB           Clone data <span class=\"keyword\">into</span> NEWDB <span class=\"keyword\">from</span> the existing database</span><br><span class=\"line\">.databases             List names <span class=\"keyword\">and</span> files <span class=\"keyword\">of</span> attached databases</span><br><span class=\"line\">.dbconfig ?op? ?val?   List <span class=\"keyword\">or</span> change sqlite3_db_config() options</span><br><span class=\"line\">.dbinfo ?DB?           <span class=\"keyword\">Show</span> status information about the database</span><br><span class=\"line\">.dump ?<span class=\"keyword\">TABLE</span>? ...      Dump the database <span class=\"keyword\">in</span> an <span class=\"keyword\">SQL</span> text format</span><br><span class=\"line\">                         If <span class=\"keyword\">TABLE</span> specified, <span class=\"keyword\">only</span> dump tables matching</span><br><span class=\"line\">                         <span class=\"keyword\">LIKE</span> <span class=\"keyword\">pattern</span> TABLE.</span><br><span class=\"line\">.echo <span class=\"keyword\">on</span><span class=\"operator\">|</span>off           Turn command echo <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.eqp <span class=\"keyword\">on</span><span class=\"operator\">|</span>off<span class=\"operator\">|</span><span class=\"keyword\">full</span>       Enable <span class=\"keyword\">or</span> disable automatic EXPLAIN QUERY PLAN</span><br><span class=\"line\">.excel                 Display the output <span class=\"keyword\">of</span> next command <span class=\"keyword\">in</span> a spreadsheet</span><br><span class=\"line\">.exit                  Exit this program</span><br><span class=\"line\">.expert                EXPERIMENTAL. Suggest indexes <span class=\"keyword\">for</span> specified queries</span><br><span class=\"line\">.fullschema ?<span class=\"comment\">--indent? Show schema and the content of sqlite_stat tables</span></span><br><span class=\"line\">.headers <span class=\"keyword\">on</span><span class=\"operator\">|</span>off        Turn display <span class=\"keyword\">of</span> headers <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.help                  <span class=\"keyword\">Show</span> this message</span><br><span class=\"line\">.import FILE <span class=\"keyword\">TABLE</span>     Import data <span class=\"keyword\">from</span> FILE <span class=\"keyword\">into</span> <span class=\"keyword\">TABLE</span></span><br><span class=\"line\">.imposter INDEX <span class=\"keyword\">TABLE</span>  <span class=\"keyword\">Create</span> imposter <span class=\"keyword\">table</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">on</span> index INDEX</span><br><span class=\"line\">.indexes ?<span class=\"keyword\">TABLE</span>?       <span class=\"keyword\">Show</span> names <span class=\"keyword\">of</span> <span class=\"keyword\">all</span> indexes</span><br><span class=\"line\">                         If <span class=\"keyword\">TABLE</span> specified, <span class=\"keyword\">only</span> <span class=\"keyword\">show</span> indexes <span class=\"keyword\">for</span> tables</span><br><span class=\"line\">                         matching <span class=\"keyword\">LIKE</span> <span class=\"keyword\">pattern</span> TABLE.</span><br><span class=\"line\">.limit ?LIMIT? ?VAL?   Display <span class=\"keyword\">or</span> change the <span class=\"keyword\">value</span> <span class=\"keyword\">of</span> an SQLITE_LIMIT</span><br><span class=\"line\">.lint OPTIONS          Report potential schema issues. Options:</span><br><span class=\"line\">                         fkey<span class=\"operator\">-</span>indexes     Find missing <span class=\"keyword\">foreign</span> key indexes</span><br><span class=\"line\">.log FILE<span class=\"operator\">|</span>off          Turn logging <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off.  FILE can be stderr<span class=\"operator\">/</span>stdout</span><br><span class=\"line\">.mode MODE ?<span class=\"keyword\">TABLE</span>?     <span class=\"keyword\">Set</span> output mode <span class=\"keyword\">where</span> MODE <span class=\"keyword\">is</span> <span class=\"keyword\">one</span> <span class=\"keyword\">of</span>:</span><br><span class=\"line\">                         ascii    Columns<span class=\"operator\">/</span><span class=\"keyword\">rows</span> delimited <span class=\"keyword\">by</span> <span class=\"number\">0x1F</span> <span class=\"keyword\">and</span> <span class=\"number\">0x1E</span></span><br><span class=\"line\">                         csv      Comma<span class=\"operator\">-</span>separated <span class=\"keyword\">values</span></span><br><span class=\"line\">                         <span class=\"keyword\">column</span>   <span class=\"keyword\">Left</span><span class=\"operator\">-</span>aligned columns.  (See .width)</span><br><span class=\"line\">                         html     HTML <span class=\"operator\">&lt;</span><span class=\"keyword\">table</span><span class=\"operator\">&gt;</span> code</span><br><span class=\"line\">                         <span class=\"keyword\">insert</span>   <span class=\"keyword\">SQL</span> <span class=\"keyword\">insert</span> statements <span class=\"keyword\">for</span> <span class=\"keyword\">TABLE</span></span><br><span class=\"line\">                         line     <span class=\"keyword\">One</span> <span class=\"keyword\">value</span> <span class=\"keyword\">per</span> line</span><br><span class=\"line\">                         list     <span class=\"keyword\">Values</span> delimited <span class=\"keyword\">by</span> &quot;|&quot;</span><br><span class=\"line\">                         quote    <span class=\"keyword\">Escape</span> answers <span class=\"keyword\">as</span> <span class=\"keyword\">for</span> <span class=\"keyword\">SQL</span></span><br><span class=\"line\">                         tabs     Tab<span class=\"operator\">-</span>separated <span class=\"keyword\">values</span></span><br><span class=\"line\">                         tcl      TCL list elements</span><br><span class=\"line\">.nullvalue STRING      Use STRING <span class=\"keyword\">in</span> place <span class=\"keyword\">of</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">values</span></span><br><span class=\"line\">.once (<span class=\"operator\">-</span>e<span class=\"operator\">|</span><span class=\"operator\">-</span>x<span class=\"operator\">|</span>FILE)     Output <span class=\"keyword\">for</span> the next <span class=\"keyword\">SQL</span> command <span class=\"keyword\">only</span> <span class=\"keyword\">to</span> FILE</span><br><span class=\"line\">                         <span class=\"keyword\">or</span> invoke <span class=\"keyword\">system</span> text editor (<span class=\"operator\">-</span>e) <span class=\"keyword\">or</span> spreadsheet (<span class=\"operator\">-</span>x)</span><br><span class=\"line\">                         <span class=\"keyword\">on</span> the output.</span><br><span class=\"line\">.<span class=\"keyword\">open</span> ?OPTIONS? ?FILE? <span class=\"keyword\">Close</span> existing database <span class=\"keyword\">and</span> reopen FILE</span><br><span class=\"line\">                         The <span class=\"comment\">--new option starts with an empty file</span></span><br><span class=\"line\">                         Other options: <span class=\"comment\">--readonly --append --zip</span></span><br><span class=\"line\">.output ?FILE?         Send output <span class=\"keyword\">to</span> FILE <span class=\"keyword\">or</span> stdout</span><br><span class=\"line\">.print STRING...       Print literal STRING</span><br><span class=\"line\">.prompt MAIN CONTINUE  Replace the standard prompts</span><br><span class=\"line\">.quit                  Exit this program</span><br><span class=\"line\">.read FILENAME         <span class=\"keyword\">Execute</span> <span class=\"keyword\">SQL</span> <span class=\"keyword\">in</span> FILENAME</span><br><span class=\"line\">.restore ?DB? FILE     Restore content <span class=\"keyword\">of</span> DB (<span class=\"keyword\">default</span> &quot;main&quot;) <span class=\"keyword\">from</span> FILE</span><br><span class=\"line\">.save FILE             Write <span class=\"keyword\">in</span><span class=\"operator\">-</span>memory database <span class=\"keyword\">into</span> FILE</span><br><span class=\"line\">.scanstats <span class=\"keyword\">on</span><span class=\"operator\">|</span>off      Turn sqlite3_stmt_scanstatus() metrics <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.schema ?<span class=\"keyword\">PATTERN</span>?      <span class=\"keyword\">Show</span> the <span class=\"keyword\">CREATE</span> statements matching <span class=\"keyword\">PATTERN</span></span><br><span class=\"line\">                          <span class=\"keyword\">Add</span> <span class=\"comment\">--indent for pretty-printing</span></span><br><span class=\"line\">.selftest ?<span class=\"comment\">--init?     Run tests defined in the SELFTEST table</span></span><br><span class=\"line\">.separator COL ?<span class=\"type\">ROW</span>?   Change the <span class=\"keyword\">column</span> separator <span class=\"keyword\">and</span> optionally the <span class=\"type\">row</span></span><br><span class=\"line\">                         separator <span class=\"keyword\">for</span> <span class=\"keyword\">both</span> the output mode <span class=\"keyword\">and</span> .import</span><br><span class=\"line\">.session CMD ...       <span class=\"keyword\">Create</span> <span class=\"keyword\">or</span> control sessions</span><br><span class=\"line\">.sha3sum ?OPTIONS...?  Compute a SHA3 hash <span class=\"keyword\">of</span> database content</span><br><span class=\"line\">.shell CMD ARGS...     Run CMD ARGS... <span class=\"keyword\">in</span> a <span class=\"keyword\">system</span> shell</span><br><span class=\"line\">.<span class=\"keyword\">show</span>                  <span class=\"keyword\">Show</span> the <span class=\"keyword\">current</span> <span class=\"keyword\">values</span> <span class=\"keyword\">for</span> various settings</span><br><span class=\"line\">.stats ?<span class=\"keyword\">on</span><span class=\"operator\">|</span>off?        <span class=\"keyword\">Show</span> stats <span class=\"keyword\">or</span> turn stats <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.<span class=\"keyword\">system</span> CMD ARGS...    Run CMD ARGS... <span class=\"keyword\">in</span> a <span class=\"keyword\">system</span> shell</span><br><span class=\"line\">.tables ?<span class=\"keyword\">TABLE</span>?        List names <span class=\"keyword\">of</span> tables</span><br><span class=\"line\">                         If <span class=\"keyword\">TABLE</span> specified, <span class=\"keyword\">only</span> list tables matching</span><br><span class=\"line\">                         <span class=\"keyword\">LIKE</span> <span class=\"keyword\">pattern</span> TABLE.</span><br><span class=\"line\">.testcase NAME         <span class=\"keyword\">Begin</span> redirecting output <span class=\"keyword\">to</span> <span class=\"string\">&#x27;testcase-out.txt&#x27;</span></span><br><span class=\"line\">.timeout MS            Try opening locked tables <span class=\"keyword\">for</span> MS milliseconds</span><br><span class=\"line\">.timer <span class=\"keyword\">on</span><span class=\"operator\">|</span>off          Turn <span class=\"keyword\">SQL</span> timer <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.trace FILE<span class=\"operator\">|</span>off        Output <span class=\"keyword\">each</span> <span class=\"keyword\">SQL</span> statement <span class=\"keyword\">as</span> it <span class=\"keyword\">is</span> run</span><br><span class=\"line\">.vfsinfo ?AUX?         Information about the top<span class=\"operator\">-</span>level VFS</span><br><span class=\"line\">.vfslist               List <span class=\"keyword\">all</span> available VFSes</span><br><span class=\"line\">.vfsname ?AUX?         Print the name <span class=\"keyword\">of</span> the VFS stack</span><br><span class=\"line\">.width NUM1 NUM2 ...   <span class=\"keyword\">Set</span> <span class=\"keyword\">column</span> widths <span class=\"keyword\">for</span> &quot;column&quot; mode</span><br><span class=\"line\">                         Negative <span class=\"keyword\">values</span> <span class=\"keyword\">right</span><span class=\"operator\">-</span>justify</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、程序\"><a href=\"#2、程序\" class=\"headerlink\" title=\"2、程序\"></a>2、程序</h2><p>SQLite 语句</p>\n<p>所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。</p>\n<p>2.1 SQLite ANALYZE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANALYZE;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">ANALYZE database_name;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">ANALYZE database_name.table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.2 SQLite AND/OR 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span><span class=\"number\">-1</span> &#123;<span class=\"keyword\">AND</span><span class=\"operator\">|</span><span class=\"keyword\">OR</span>&#125; <span class=\"keyword\">CONDITION</span><span class=\"number\">-2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.3 SQLite ALTER TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> column_def...;</span><br></pre></td></tr></table></figure>\n\n<p>2.4 SQLite ALTER TABLE 语句（Rename）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name RENAME <span class=\"keyword\">TO</span> new_table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.5 SQLite ATTACH DATABASE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ATTACH DATABASE <span class=\"string\">&#x27;DatabaseName&#x27;</span> <span class=\"keyword\">As</span> <span class=\"string\">&#x27;Alias-Name&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.6 SQLite BEGIN TRANSACTION 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> EXCLUSIVE TRANSACTION;</span><br></pre></td></tr></table></figure>\n\n<p>2.7 SQLite BETWEEN 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">BETWEEN</span> val<span class=\"number\">-1</span> <span class=\"keyword\">AND</span> val<span class=\"number\">-2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.8 SQLite COMMIT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.9 SQLite CREATE INDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX index_name</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name ( column_name <span class=\"keyword\">COLLATE</span> NOCASE );</span><br></pre></td></tr></table></figure>\n\n<p>2.10 SQLite CREATE UNIQUE INDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX index_name</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name ( column1, column2,...columnN);</span><br></pre></td></tr></table></figure>\n\n<p>2.11 SQLite CREATE TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> table_name(</span><br><span class=\"line\">   column1 datatype,</span><br><span class=\"line\">   column2 datatype,</span><br><span class=\"line\">   column3 datatype,</span><br><span class=\"line\">   .....</span><br><span class=\"line\">   columnN datatype,</span><br><span class=\"line\">   <span class=\"keyword\">PRIMARY</span> KEY( <span class=\"keyword\">one</span> <span class=\"keyword\">or</span> more columns )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>2.12 SQLite CREATE TRIGGER 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> database_name.trigger_name</span><br><span class=\"line\">BEFORE <span class=\"keyword\">INSERT</span> <span class=\"keyword\">ON</span> table_name <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">   stmt1;</span><br><span class=\"line\">   stmt2;</span><br><span class=\"line\">   ....</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.13 SQLite CREATE VIEW 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> database_name.view_name  <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> statement....;</span><br></pre></td></tr></table></figure>\n\n<p>2.14 SQLite CREATE VIRTUAL TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> VIRTUAL <span class=\"keyword\">TABLE</span> database_name.table_name <span class=\"keyword\">USING</span> weblog( access.log );</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> VIRTUAL <span class=\"keyword\">TABLE</span> database_name.table_name <span class=\"keyword\">USING</span> fts3( );</span><br></pre></td></tr></table></figure>\n\n<p>2.15 SQLite COMMIT TRANSACTION 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.16 SQLite COUNT 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.17 SQLite DELETE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  &#123;<span class=\"keyword\">CONDITION</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.18 SQLite DETACH DATABASE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DETACH DATABASE <span class=\"string\">&#x27;Alias-Name&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.19 SQLite DISTINCT 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.20 SQLite DROP INDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX database_name.index_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.21 SQLite DROP TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> database_name.table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.22 SQLite DROP VIEW 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> view_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.23 SQLite DROP TRIGGER 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TRIGGER</span> trigger_name</span><br></pre></td></tr></table></figure>\n\n<p>2.24 SQLite EXISTS 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span>   table_name );</span><br></pre></td></tr></table></figure>\n\n<p>2.25 SQLite EXPLAIN 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">INSERT</span> statement...;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">EXPLAIN QUERY PLAN <span class=\"keyword\">SELECT</span> statement...;</span><br></pre></td></tr></table></figure>\n\n<p>2.26 SQLite GLOB 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name GLOB &#123; <span class=\"keyword\">PATTERN</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.27 SQLite GROUP BY 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.28 SQLite HAVING 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> (arithematic <span class=\"keyword\">function</span> <span class=\"keyword\">condition</span>);</span><br></pre></td></tr></table></figure>\n\n<p>2.29 SQLite INSERT INTO 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name( column1, column2....columnN)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> ( value1, value2....valueN);</span><br></pre></td></tr></table></figure>\n\n<p>2.30 SQLite IN 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">IN</span> (val<span class=\"number\">-1</span>, val<span class=\"number\">-2</span>,...val<span class=\"operator\">-</span>N);</span><br></pre></td></tr></table></figure>\n\n<p>2.31 SQLite Like 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">LIKE</span> &#123; <span class=\"keyword\">PATTERN</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.32 SQLite NOT IN 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (val<span class=\"number\">-1</span>, val<span class=\"number\">-2</span>,...val<span class=\"operator\">-</span>N);</span><br></pre></td></tr></table></figure>\n\n<p>2.33 SQLite ORDER BY 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> column_name &#123;<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.34 SQLite PRAGMA 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRAGMA pragma_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">For</span> example:</span><br><span class=\"line\">PRAGMA page_size;</span><br><span class=\"line\">PRAGMA cache_size <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">PRAGMA table_info(table_name);</span><br></pre></td></tr></table></figure>\n\n<p>2.35 SQLite RELEASE SAVEPOINT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RELEASE</span> savepoint_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.36 SQLite REINDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REINDEX collation_name;</span><br><span class=\"line\">REINDEX database_name.index_name;</span><br><span class=\"line\">REINDEX database_name.table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.37 SQLite ROLLBACK 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ROLLBACK</span>;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span> <span class=\"keyword\">TO</span> <span class=\"keyword\">SAVEPOINT</span> savepoint_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.38 SQLite SAVEPOINT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SAVEPOINT</span> savepoint_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.39 SQLite SELECT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.40 SQLite UPDATE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE table_name</span><br><span class=\"line\"><span class=\"keyword\">SET</span> column1 <span class=\"operator\">=</span> value1, column2 <span class=\"operator\">=</span> value2....columnN<span class=\"operator\">=</span>valueN</span><br><span class=\"line\">[ <span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span> ];</span><br></pre></td></tr></table></figure>\n\n<p>2.41 SQLite VACUUM 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VACUUM;</span><br></pre></td></tr></table></figure>\n\n<p>2.42 SQLite WHERE 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、常见专有名词\"><a href=\"#3、常见专有名词\" class=\"headerlink\" title=\"3、常见专有名词\"></a>3、常见专有名词</h2><p>事务<br>游标<br>触发器<br>存储过程<br>回滚<br>约束<br>索引<br>视图</p>\n<h2 id=\"4、常用操作\"><a href=\"#4、常用操作\" class=\"headerlink\" title=\"4、常用操作\"></a>4、常用操作</h2><p>数据同步<br>导入、导出<br>CRUD (Create/Retrieve/Update/Delete)</p>\n<h2 id=\"5、建表原则\"><a href=\"#5、建表原则\" class=\"headerlink\" title=\"5、建表原则\"></a>5、建表原则</h2><p>数据范式</p>\n<h2 id=\"6、事务特性\"><a href=\"#6、事务特性\" class=\"headerlink\" title=\"6、事务特性\"></a>6、事务特性</h2><p>ACID</p>\n<h2 id=\"7、数据库\"><a href=\"#7、数据库\" class=\"headerlink\" title=\"7、数据库\"></a>7、数据库</h2><p>常见数据库：SQLite、MySQL、SQLServer、Oracle、MOngoDB</p>\n<p>7.1 分类：<br>    关系型：Oracle和MySQL<br>    非关系型：NoSQL(NoSQL = Not Only SQL )<br>（1）键值存储数据库（key-value）</p>\n<p>键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。</p>\n<p>键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。</p>\n<p>典型产品：Memcached、Redis、MemcacheDB</p>\n<p>（2）列存储（Column-oriented）数据库</p>\n<p>列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。</p>\n<p>这种数据库通常用来应对分布式存储海量数据。</p>\n<p>典型产品：Cassandra、HBase</p>\n<p>（3）面向文档（Document-Oriented）数据库</p>\n<p>文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。</p>\n<p>面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。</p>\n<p>典型产品：MongoDB、CouchDB</p>\n<p>（4）图形数据库</p>\n<p>图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。</p>\n<p>典型产品：Neo4J、InforGrid</p>\n<p>7.2 数据库引擎：数据库引擎是用于存储、处理和保护数据的核心服务。<br>MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。</p>\n<p>你能用的数据库引擎取决于mysql在安装的时候是如何被编译的。要添加一个新的引擎，就必须重新编译MYSQL。在缺省情况下，MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。</p>\n<ul>\n<li>ISAM</li>\n</ul>\n<blockquote>\n<p>ISAM是一个定义明确且历经时间考验的数据表格管理方法，它在设计之时就考虑到数据库被查询的次数要远大于更新的次数。因此，ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错：如果你的硬盘崩溃了，那么数据文件就无法恢复了。如果你正在把ISAM用在关键任务应用程序里，那就必须经常备份你所有的实时数据，通过其复制特性，MYSQL能够支持这样的备份应用程序。</p>\n</blockquote>\n<ul>\n<li>MYISAM</li>\n</ul>\n<blockquote>\n<p>MYISAM是MYSQL的ISAM扩展格式和缺省的数据库引擎。除了提供ISAM里所没有的索引和字段管理的大量功能，MYISAM还使用一种表格锁定的机制，来优化多个并发的读写操作。其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。MYISAM还有一些有用的扩展，例如用来修复数据库文件的MYISAMCHK工具和用来恢复浪费空间的MYISAMPACK工具。<br>MYISAM强调了快速读取操作，这可能就是为什么MYSQL受到了WEB开发如此青睐的主要原因：在WEB开发中你所进行的大量数据操作都是读取操作。所以，大多数虚拟主机提供商和INTERNET平台提供商只允许使用MYISAM格式。</p>\n</blockquote>\n<ul>\n<li>HEAP</li>\n</ul>\n<blockquote>\n<p>HEAP允许只驻留在内存里的临时表格。驻留在内存里让HEAP要比ISAM和MYISAM都快，但是它所管理的数据是不稳定的，而且如果在关机之前没有进行保存，那么所有的数据都会丢失。在数据行被删除的时候，HEAP也不会浪费大量的空间。HEAP表格在你需要使用SELECT表达式来选择和操控数据的时候非常有用。要记住，在用完表格之后就删除表格。</p>\n</blockquote>\n<ul>\n<li>INNODB和BERKLEYDB</li>\n</ul>\n<blockquote>\n<p>INNODB和BERKLEYDB（BDB）数据库引擎都是造就MYSQL灵活性的技术的直接产品，这项技术就是MYSQL++ API。在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MYISAM数据库引擎不支持事务处理也不支持外来键。尽管要比ISAM和MYISAM引擎慢很多，但是INNODB和BDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。如前所述，如果你的设计需要这些特性中的一者或者两者，那你就要被迫使用后两个引擎中的一个了。</p>\n</blockquote>\n<h2 id=\"数据库三范式经典实例解析\"><a href=\"#数据库三范式经典实例解析\" class=\"headerlink\" title=\"数据库三范式经典实例解析\"></a><a href=\"http://www.blogjava.net/hijackwust/archive/2007/10/21/154793.html\">数据库三范式经典实例解析</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、终端命令\"><a href=\"#1、终端命令\" class=\"headerlink\" title=\"1、终端命令\"></a>1、终端命令</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.auth <span class=\"keyword\">ON</span><span class=\"operator\">|</span>OFF           <span class=\"keyword\">Show</span> authorizer callbacks</span><br><span class=\"line\">.backup ?DB? FILE      Backup DB (<span class=\"keyword\">default</span> &quot;main&quot;) <span class=\"keyword\">to</span> FILE</span><br><span class=\"line\">                         <span class=\"keyword\">Add</span> &quot;--append&quot; <span class=\"keyword\">to</span> <span class=\"keyword\">open</span> <span class=\"keyword\">using</span> appendvfs.</span><br><span class=\"line\">.bail <span class=\"keyword\">on</span><span class=\"operator\">|</span>off           Stop after hitting an error.  <span class=\"keyword\">Default</span> OFF</span><br><span class=\"line\">.<span class=\"type\">binary</span> <span class=\"keyword\">on</span><span class=\"operator\">|</span>off         Turn <span class=\"type\">binary</span> output <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off.  <span class=\"keyword\">Default</span> OFF</span><br><span class=\"line\">.cd DIRECTORY          Change the working directory <span class=\"keyword\">to</span> DIRECTORY</span><br><span class=\"line\">.changes <span class=\"keyword\">on</span><span class=\"operator\">|</span>off        <span class=\"keyword\">Show</span> number <span class=\"keyword\">of</span> <span class=\"keyword\">rows</span> changed <span class=\"keyword\">by</span> <span class=\"keyword\">SQL</span></span><br><span class=\"line\">.<span class=\"keyword\">check</span> GLOB            Fail if output since .testcase does <span class=\"keyword\">not</span> <span class=\"keyword\">match</span></span><br><span class=\"line\">.clone NEWDB           Clone data <span class=\"keyword\">into</span> NEWDB <span class=\"keyword\">from</span> the existing database</span><br><span class=\"line\">.databases             List names <span class=\"keyword\">and</span> files <span class=\"keyword\">of</span> attached databases</span><br><span class=\"line\">.dbconfig ?op? ?val?   List <span class=\"keyword\">or</span> change sqlite3_db_config() options</span><br><span class=\"line\">.dbinfo ?DB?           <span class=\"keyword\">Show</span> status information about the database</span><br><span class=\"line\">.dump ?<span class=\"keyword\">TABLE</span>? ...      Dump the database <span class=\"keyword\">in</span> an <span class=\"keyword\">SQL</span> text format</span><br><span class=\"line\">                         If <span class=\"keyword\">TABLE</span> specified, <span class=\"keyword\">only</span> dump tables matching</span><br><span class=\"line\">                         <span class=\"keyword\">LIKE</span> <span class=\"keyword\">pattern</span> TABLE.</span><br><span class=\"line\">.echo <span class=\"keyword\">on</span><span class=\"operator\">|</span>off           Turn command echo <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.eqp <span class=\"keyword\">on</span><span class=\"operator\">|</span>off<span class=\"operator\">|</span><span class=\"keyword\">full</span>       Enable <span class=\"keyword\">or</span> disable automatic EXPLAIN QUERY PLAN</span><br><span class=\"line\">.excel                 Display the output <span class=\"keyword\">of</span> next command <span class=\"keyword\">in</span> a spreadsheet</span><br><span class=\"line\">.exit                  Exit this program</span><br><span class=\"line\">.expert                EXPERIMENTAL. Suggest indexes <span class=\"keyword\">for</span> specified queries</span><br><span class=\"line\">.fullschema ?<span class=\"comment\">--indent? Show schema and the content of sqlite_stat tables</span></span><br><span class=\"line\">.headers <span class=\"keyword\">on</span><span class=\"operator\">|</span>off        Turn display <span class=\"keyword\">of</span> headers <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.help                  <span class=\"keyword\">Show</span> this message</span><br><span class=\"line\">.import FILE <span class=\"keyword\">TABLE</span>     Import data <span class=\"keyword\">from</span> FILE <span class=\"keyword\">into</span> <span class=\"keyword\">TABLE</span></span><br><span class=\"line\">.imposter INDEX <span class=\"keyword\">TABLE</span>  <span class=\"keyword\">Create</span> imposter <span class=\"keyword\">table</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">on</span> index INDEX</span><br><span class=\"line\">.indexes ?<span class=\"keyword\">TABLE</span>?       <span class=\"keyword\">Show</span> names <span class=\"keyword\">of</span> <span class=\"keyword\">all</span> indexes</span><br><span class=\"line\">                         If <span class=\"keyword\">TABLE</span> specified, <span class=\"keyword\">only</span> <span class=\"keyword\">show</span> indexes <span class=\"keyword\">for</span> tables</span><br><span class=\"line\">                         matching <span class=\"keyword\">LIKE</span> <span class=\"keyword\">pattern</span> TABLE.</span><br><span class=\"line\">.limit ?LIMIT? ?VAL?   Display <span class=\"keyword\">or</span> change the <span class=\"keyword\">value</span> <span class=\"keyword\">of</span> an SQLITE_LIMIT</span><br><span class=\"line\">.lint OPTIONS          Report potential schema issues. Options:</span><br><span class=\"line\">                         fkey<span class=\"operator\">-</span>indexes     Find missing <span class=\"keyword\">foreign</span> key indexes</span><br><span class=\"line\">.log FILE<span class=\"operator\">|</span>off          Turn logging <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off.  FILE can be stderr<span class=\"operator\">/</span>stdout</span><br><span class=\"line\">.mode MODE ?<span class=\"keyword\">TABLE</span>?     <span class=\"keyword\">Set</span> output mode <span class=\"keyword\">where</span> MODE <span class=\"keyword\">is</span> <span class=\"keyword\">one</span> <span class=\"keyword\">of</span>:</span><br><span class=\"line\">                         ascii    Columns<span class=\"operator\">/</span><span class=\"keyword\">rows</span> delimited <span class=\"keyword\">by</span> <span class=\"number\">0x1F</span> <span class=\"keyword\">and</span> <span class=\"number\">0x1E</span></span><br><span class=\"line\">                         csv      Comma<span class=\"operator\">-</span>separated <span class=\"keyword\">values</span></span><br><span class=\"line\">                         <span class=\"keyword\">column</span>   <span class=\"keyword\">Left</span><span class=\"operator\">-</span>aligned columns.  (See .width)</span><br><span class=\"line\">                         html     HTML <span class=\"operator\">&lt;</span><span class=\"keyword\">table</span><span class=\"operator\">&gt;</span> code</span><br><span class=\"line\">                         <span class=\"keyword\">insert</span>   <span class=\"keyword\">SQL</span> <span class=\"keyword\">insert</span> statements <span class=\"keyword\">for</span> <span class=\"keyword\">TABLE</span></span><br><span class=\"line\">                         line     <span class=\"keyword\">One</span> <span class=\"keyword\">value</span> <span class=\"keyword\">per</span> line</span><br><span class=\"line\">                         list     <span class=\"keyword\">Values</span> delimited <span class=\"keyword\">by</span> &quot;|&quot;</span><br><span class=\"line\">                         quote    <span class=\"keyword\">Escape</span> answers <span class=\"keyword\">as</span> <span class=\"keyword\">for</span> <span class=\"keyword\">SQL</span></span><br><span class=\"line\">                         tabs     Tab<span class=\"operator\">-</span>separated <span class=\"keyword\">values</span></span><br><span class=\"line\">                         tcl      TCL list elements</span><br><span class=\"line\">.nullvalue STRING      Use STRING <span class=\"keyword\">in</span> place <span class=\"keyword\">of</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">values</span></span><br><span class=\"line\">.once (<span class=\"operator\">-</span>e<span class=\"operator\">|</span><span class=\"operator\">-</span>x<span class=\"operator\">|</span>FILE)     Output <span class=\"keyword\">for</span> the next <span class=\"keyword\">SQL</span> command <span class=\"keyword\">only</span> <span class=\"keyword\">to</span> FILE</span><br><span class=\"line\">                         <span class=\"keyword\">or</span> invoke <span class=\"keyword\">system</span> text editor (<span class=\"operator\">-</span>e) <span class=\"keyword\">or</span> spreadsheet (<span class=\"operator\">-</span>x)</span><br><span class=\"line\">                         <span class=\"keyword\">on</span> the output.</span><br><span class=\"line\">.<span class=\"keyword\">open</span> ?OPTIONS? ?FILE? <span class=\"keyword\">Close</span> existing database <span class=\"keyword\">and</span> reopen FILE</span><br><span class=\"line\">                         The <span class=\"comment\">--new option starts with an empty file</span></span><br><span class=\"line\">                         Other options: <span class=\"comment\">--readonly --append --zip</span></span><br><span class=\"line\">.output ?FILE?         Send output <span class=\"keyword\">to</span> FILE <span class=\"keyword\">or</span> stdout</span><br><span class=\"line\">.print STRING...       Print literal STRING</span><br><span class=\"line\">.prompt MAIN CONTINUE  Replace the standard prompts</span><br><span class=\"line\">.quit                  Exit this program</span><br><span class=\"line\">.read FILENAME         <span class=\"keyword\">Execute</span> <span class=\"keyword\">SQL</span> <span class=\"keyword\">in</span> FILENAME</span><br><span class=\"line\">.restore ?DB? FILE     Restore content <span class=\"keyword\">of</span> DB (<span class=\"keyword\">default</span> &quot;main&quot;) <span class=\"keyword\">from</span> FILE</span><br><span class=\"line\">.save FILE             Write <span class=\"keyword\">in</span><span class=\"operator\">-</span>memory database <span class=\"keyword\">into</span> FILE</span><br><span class=\"line\">.scanstats <span class=\"keyword\">on</span><span class=\"operator\">|</span>off      Turn sqlite3_stmt_scanstatus() metrics <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.schema ?<span class=\"keyword\">PATTERN</span>?      <span class=\"keyword\">Show</span> the <span class=\"keyword\">CREATE</span> statements matching <span class=\"keyword\">PATTERN</span></span><br><span class=\"line\">                          <span class=\"keyword\">Add</span> <span class=\"comment\">--indent for pretty-printing</span></span><br><span class=\"line\">.selftest ?<span class=\"comment\">--init?     Run tests defined in the SELFTEST table</span></span><br><span class=\"line\">.separator COL ?<span class=\"type\">ROW</span>?   Change the <span class=\"keyword\">column</span> separator <span class=\"keyword\">and</span> optionally the <span class=\"type\">row</span></span><br><span class=\"line\">                         separator <span class=\"keyword\">for</span> <span class=\"keyword\">both</span> the output mode <span class=\"keyword\">and</span> .import</span><br><span class=\"line\">.session CMD ...       <span class=\"keyword\">Create</span> <span class=\"keyword\">or</span> control sessions</span><br><span class=\"line\">.sha3sum ?OPTIONS...?  Compute a SHA3 hash <span class=\"keyword\">of</span> database content</span><br><span class=\"line\">.shell CMD ARGS...     Run CMD ARGS... <span class=\"keyword\">in</span> a <span class=\"keyword\">system</span> shell</span><br><span class=\"line\">.<span class=\"keyword\">show</span>                  <span class=\"keyword\">Show</span> the <span class=\"keyword\">current</span> <span class=\"keyword\">values</span> <span class=\"keyword\">for</span> various settings</span><br><span class=\"line\">.stats ?<span class=\"keyword\">on</span><span class=\"operator\">|</span>off?        <span class=\"keyword\">Show</span> stats <span class=\"keyword\">or</span> turn stats <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.<span class=\"keyword\">system</span> CMD ARGS...    Run CMD ARGS... <span class=\"keyword\">in</span> a <span class=\"keyword\">system</span> shell</span><br><span class=\"line\">.tables ?<span class=\"keyword\">TABLE</span>?        List names <span class=\"keyword\">of</span> tables</span><br><span class=\"line\">                         If <span class=\"keyword\">TABLE</span> specified, <span class=\"keyword\">only</span> list tables matching</span><br><span class=\"line\">                         <span class=\"keyword\">LIKE</span> <span class=\"keyword\">pattern</span> TABLE.</span><br><span class=\"line\">.testcase NAME         <span class=\"keyword\">Begin</span> redirecting output <span class=\"keyword\">to</span> <span class=\"string\">&#x27;testcase-out.txt&#x27;</span></span><br><span class=\"line\">.timeout MS            Try opening locked tables <span class=\"keyword\">for</span> MS milliseconds</span><br><span class=\"line\">.timer <span class=\"keyword\">on</span><span class=\"operator\">|</span>off          Turn <span class=\"keyword\">SQL</span> timer <span class=\"keyword\">on</span> <span class=\"keyword\">or</span> off</span><br><span class=\"line\">.trace FILE<span class=\"operator\">|</span>off        Output <span class=\"keyword\">each</span> <span class=\"keyword\">SQL</span> statement <span class=\"keyword\">as</span> it <span class=\"keyword\">is</span> run</span><br><span class=\"line\">.vfsinfo ?AUX?         Information about the top<span class=\"operator\">-</span>level VFS</span><br><span class=\"line\">.vfslist               List <span class=\"keyword\">all</span> available VFSes</span><br><span class=\"line\">.vfsname ?AUX?         Print the name <span class=\"keyword\">of</span> the VFS stack</span><br><span class=\"line\">.width NUM1 NUM2 ...   <span class=\"keyword\">Set</span> <span class=\"keyword\">column</span> widths <span class=\"keyword\">for</span> &quot;column&quot; mode</span><br><span class=\"line\">                         Negative <span class=\"keyword\">values</span> <span class=\"keyword\">right</span><span class=\"operator\">-</span>justify</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、程序\"><a href=\"#2、程序\" class=\"headerlink\" title=\"2、程序\"></a>2、程序</h2><p>SQLite 语句</p>\n<p>所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。</p>\n<p>2.1 SQLite ANALYZE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ANALYZE;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">ANALYZE database_name;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">ANALYZE database_name.table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.2 SQLite AND/OR 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span><span class=\"number\">-1</span> &#123;<span class=\"keyword\">AND</span><span class=\"operator\">|</span><span class=\"keyword\">OR</span>&#125; <span class=\"keyword\">CONDITION</span><span class=\"number\">-2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.3 SQLite ALTER TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">COLUMN</span> column_def...;</span><br></pre></td></tr></table></figure>\n\n<p>2.4 SQLite ALTER TABLE 语句（Rename）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name RENAME <span class=\"keyword\">TO</span> new_table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.5 SQLite ATTACH DATABASE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ATTACH DATABASE <span class=\"string\">&#x27;DatabaseName&#x27;</span> <span class=\"keyword\">As</span> <span class=\"string\">&#x27;Alias-Name&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.6 SQLite BEGIN TRANSACTION 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">BEGIN</span>;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span> EXCLUSIVE TRANSACTION;</span><br></pre></td></tr></table></figure>\n\n<p>2.7 SQLite BETWEEN 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">BETWEEN</span> val<span class=\"number\">-1</span> <span class=\"keyword\">AND</span> val<span class=\"number\">-2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.8 SQLite COMMIT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.9 SQLite CREATE INDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> INDEX index_name</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name ( column_name <span class=\"keyword\">COLLATE</span> NOCASE );</span><br></pre></td></tr></table></figure>\n\n<p>2.10 SQLite CREATE UNIQUE INDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> INDEX index_name</span><br><span class=\"line\"><span class=\"keyword\">ON</span> table_name ( column1, column2,...columnN);</span><br></pre></td></tr></table></figure>\n\n<p>2.11 SQLite CREATE TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> table_name(</span><br><span class=\"line\">   column1 datatype,</span><br><span class=\"line\">   column2 datatype,</span><br><span class=\"line\">   column3 datatype,</span><br><span class=\"line\">   .....</span><br><span class=\"line\">   columnN datatype,</span><br><span class=\"line\">   <span class=\"keyword\">PRIMARY</span> KEY( <span class=\"keyword\">one</span> <span class=\"keyword\">or</span> more columns )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>2.12 SQLite CREATE TRIGGER 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TRIGGER</span> database_name.trigger_name</span><br><span class=\"line\">BEFORE <span class=\"keyword\">INSERT</span> <span class=\"keyword\">ON</span> table_name <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">   stmt1;</span><br><span class=\"line\">   stmt2;</span><br><span class=\"line\">   ....</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.13 SQLite CREATE VIEW 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span> database_name.view_name  <span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> statement....;</span><br></pre></td></tr></table></figure>\n\n<p>2.14 SQLite CREATE VIRTUAL TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> VIRTUAL <span class=\"keyword\">TABLE</span> database_name.table_name <span class=\"keyword\">USING</span> weblog( access.log );</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> VIRTUAL <span class=\"keyword\">TABLE</span> database_name.table_name <span class=\"keyword\">USING</span> fts3( );</span><br></pre></td></tr></table></figure>\n\n<p>2.15 SQLite COMMIT TRANSACTION 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COMMIT</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.16 SQLite COUNT 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.17 SQLite DELETE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  &#123;<span class=\"keyword\">CONDITION</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.18 SQLite DETACH DATABASE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DETACH DATABASE <span class=\"string\">&#x27;Alias-Name&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>2.19 SQLite DISTINCT 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.20 SQLite DROP INDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> INDEX database_name.index_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.21 SQLite DROP TABLE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> database_name.table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.22 SQLite DROP VIEW 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> view_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.23 SQLite DROP TRIGGER 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TRIGGER</span> trigger_name</span><br></pre></td></tr></table></figure>\n\n<p>2.24 SQLite EXISTS 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">EXISTS</span> (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span>   table_name );</span><br></pre></td></tr></table></figure>\n\n<p>2.25 SQLite EXPLAIN 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">INSERT</span> statement...;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\">EXPLAIN QUERY PLAN <span class=\"keyword\">SELECT</span> statement...;</span><br></pre></td></tr></table></figure>\n\n<p>2.26 SQLite GLOB 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name GLOB &#123; <span class=\"keyword\">PATTERN</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.27 SQLite GROUP BY 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.28 SQLite HAVING 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">SUM</span>(column_name)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> column_name</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> (arithematic <span class=\"keyword\">function</span> <span class=\"keyword\">condition</span>);</span><br></pre></td></tr></table></figure>\n\n<p>2.29 SQLite INSERT INTO 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> table_name( column1, column2....columnN)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> ( value1, value2....valueN);</span><br></pre></td></tr></table></figure>\n\n<p>2.30 SQLite IN 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">IN</span> (val<span class=\"number\">-1</span>, val<span class=\"number\">-2</span>,...val<span class=\"operator\">-</span>N);</span><br></pre></td></tr></table></figure>\n\n<p>2.31 SQLite Like 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">LIKE</span> &#123; <span class=\"keyword\">PATTERN</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.32 SQLite NOT IN 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  column_name <span class=\"keyword\">NOT</span> <span class=\"keyword\">IN</span> (val<span class=\"number\">-1</span>, val<span class=\"number\">-2</span>,...val<span class=\"operator\">-</span>N);</span><br></pre></td></tr></table></figure>\n\n<p>2.33 SQLite ORDER BY 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> column_name &#123;<span class=\"keyword\">ASC</span><span class=\"operator\">|</span><span class=\"keyword\">DESC</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>2.34 SQLite PRAGMA 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRAGMA pragma_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">For</span> example:</span><br><span class=\"line\">PRAGMA page_size;</span><br><span class=\"line\">PRAGMA cache_size <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">PRAGMA table_info(table_name);</span><br></pre></td></tr></table></figure>\n\n<p>2.35 SQLite RELEASE SAVEPOINT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RELEASE</span> savepoint_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.36 SQLite REINDEX 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REINDEX collation_name;</span><br><span class=\"line\">REINDEX database_name.index_name;</span><br><span class=\"line\">REINDEX database_name.table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.37 SQLite ROLLBACK 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ROLLBACK</span>;</span><br><span class=\"line\"><span class=\"keyword\">or</span></span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span> <span class=\"keyword\">TO</span> <span class=\"keyword\">SAVEPOINT</span> savepoint_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.38 SQLite SAVEPOINT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SAVEPOINT</span> savepoint_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.39 SQLite SELECT 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name;</span><br></pre></td></tr></table></figure>\n\n<p>2.40 SQLite UPDATE 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE table_name</span><br><span class=\"line\"><span class=\"keyword\">SET</span> column1 <span class=\"operator\">=</span> value1, column2 <span class=\"operator\">=</span> value2....columnN<span class=\"operator\">=</span>valueN</span><br><span class=\"line\">[ <span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span> ];</span><br></pre></td></tr></table></figure>\n\n<p>2.41 SQLite VACUUM 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VACUUM;</span><br></pre></td></tr></table></figure>\n\n<p>2.42 SQLite WHERE 子句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> column1, column2....columnN</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>   table_name</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span>  <span class=\"keyword\">CONDITION</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、常见专有名词\"><a href=\"#3、常见专有名词\" class=\"headerlink\" title=\"3、常见专有名词\"></a>3、常见专有名词</h2><p>事务<br>游标<br>触发器<br>存储过程<br>回滚<br>约束<br>索引<br>视图</p>\n<h2 id=\"4、常用操作\"><a href=\"#4、常用操作\" class=\"headerlink\" title=\"4、常用操作\"></a>4、常用操作</h2><p>数据同步<br>导入、导出<br>CRUD (Create/Retrieve/Update/Delete)</p>\n<h2 id=\"5、建表原则\"><a href=\"#5、建表原则\" class=\"headerlink\" title=\"5、建表原则\"></a>5、建表原则</h2><p>数据范式</p>\n<h2 id=\"6、事务特性\"><a href=\"#6、事务特性\" class=\"headerlink\" title=\"6、事务特性\"></a>6、事务特性</h2><p>ACID</p>\n<h2 id=\"7、数据库\"><a href=\"#7、数据库\" class=\"headerlink\" title=\"7、数据库\"></a>7、数据库</h2><p>常见数据库：SQLite、MySQL、SQLServer、Oracle、MOngoDB</p>\n<p>7.1 分类：<br>    关系型：Oracle和MySQL<br>    非关系型：NoSQL(NoSQL = Not Only SQL )<br>（1）键值存储数据库（key-value）</p>\n<p>键值数据库就类似传统语言中使用的哈希表。可以通过key来添加、查询或者删除数据库，因为使用key主键访问，所以会获得很高的性能及扩展性。</p>\n<p>键值数据库主要使用一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署、高并发。</p>\n<p>典型产品：Memcached、Redis、MemcacheDB</p>\n<p>（2）列存储（Column-oriented）数据库</p>\n<p>列存储数据库将数据存储在列族中，一个列族存储经常被一起查询的相关数据，比如人类，我们经常会查询某个人的姓名和年龄，而不是薪资。这种情况下姓名和年龄会被放到一个列族中，薪资会被放到另一个列族中。</p>\n<p>这种数据库通常用来应对分布式存储海量数据。</p>\n<p>典型产品：Cassandra、HBase</p>\n<p>（3）面向文档（Document-Oriented）数据库</p>\n<p>文档型数据库的灵感是来自于Lotus Notes办公软件，而且它同第一种键值数据库类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。</p>\n<p>面向文档数据库会将数据以文档形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合。每个数据项都有一个名词与对应值，值既可以是简单的数据类型，如字符串、数字和日期等；也可以是复杂的类型，如有序列表和关联对象。数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或JSONB等多种形式存储。</p>\n<p>典型产品：MongoDB、CouchDB</p>\n<p>（4）图形数据库</p>\n<p>图形数据库允许我们将数据以图的方式存储。实体会被作为顶点，而实体之间的关系则会被作为边。比如我们有三个实体，Steve Jobs、Apple和Next，则会有两个“Founded by”的边将Apple和Next连接到Steve Jobs。</p>\n<p>典型产品：Neo4J、InforGrid</p>\n<p>7.2 数据库引擎：数据库引擎是用于存储、处理和保护数据的核心服务。<br>MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。</p>\n<p>你能用的数据库引擎取决于mysql在安装的时候是如何被编译的。要添加一个新的引擎，就必须重新编译MYSQL。在缺省情况下，MYSQL支持三个引擎：ISAM、MYISAM和HEAP。另外两种类型INNODB和BERKLEY（BDB），也常常可以使用。</p>\n<ul>\n<li>ISAM</li>\n</ul>\n<blockquote>\n<p>ISAM是一个定义明确且历经时间考验的数据表格管理方法，它在设计之时就考虑到数据库被查询的次数要远大于更新的次数。因此，ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。ISAM的两个主要不足之处在于，它不支持事务处理，也不能够容错：如果你的硬盘崩溃了，那么数据文件就无法恢复了。如果你正在把ISAM用在关键任务应用程序里，那就必须经常备份你所有的实时数据，通过其复制特性，MYSQL能够支持这样的备份应用程序。</p>\n</blockquote>\n<ul>\n<li>MYISAM</li>\n</ul>\n<blockquote>\n<p>MYISAM是MYSQL的ISAM扩展格式和缺省的数据库引擎。除了提供ISAM里所没有的索引和字段管理的大量功能，MYISAM还使用一种表格锁定的机制，来优化多个并发的读写操作。其代价是你需要经常运行OPTIMIZE TABLE命令，来恢复被更新机制所浪费的空间。MYISAM还有一些有用的扩展，例如用来修复数据库文件的MYISAMCHK工具和用来恢复浪费空间的MYISAMPACK工具。<br>MYISAM强调了快速读取操作，这可能就是为什么MYSQL受到了WEB开发如此青睐的主要原因：在WEB开发中你所进行的大量数据操作都是读取操作。所以，大多数虚拟主机提供商和INTERNET平台提供商只允许使用MYISAM格式。</p>\n</blockquote>\n<ul>\n<li>HEAP</li>\n</ul>\n<blockquote>\n<p>HEAP允许只驻留在内存里的临时表格。驻留在内存里让HEAP要比ISAM和MYISAM都快，但是它所管理的数据是不稳定的，而且如果在关机之前没有进行保存，那么所有的数据都会丢失。在数据行被删除的时候，HEAP也不会浪费大量的空间。HEAP表格在你需要使用SELECT表达式来选择和操控数据的时候非常有用。要记住，在用完表格之后就删除表格。</p>\n</blockquote>\n<ul>\n<li>INNODB和BERKLEYDB</li>\n</ul>\n<blockquote>\n<p>INNODB和BERKLEYDB（BDB）数据库引擎都是造就MYSQL灵活性的技术的直接产品，这项技术就是MYSQL++ API。在使用MYSQL的时候，你所面对的每一个挑战几乎都源于ISAM和MYISAM数据库引擎不支持事务处理也不支持外来键。尽管要比ISAM和MYISAM引擎慢很多，但是INNODB和BDB包括了对事务处理和外来键的支持，这两点都是前两个引擎所没有的。如前所述，如果你的设计需要这些特性中的一者或者两者，那你就要被迫使用后两个引擎中的一个了。</p>\n</blockquote>\n<h2 id=\"数据库三范式经典实例解析\"><a href=\"#数据库三范式经典实例解析\" class=\"headerlink\" title=\"数据库三范式经典实例解析\"></a><a href=\"http://www.blogjava.net/hijackwust/archive/2007/10/21/154793.html\">数据库三范式经典实例解析</a></h2>"},{"title":"iOS 之Framwork 编程","abbrlink":"1dd271f4","date":"2021-07-26T02:36:02.000Z","_content":"\n## [Framwork 编程](https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html#//apple_ref/doc/uid/10000183-SW1)\n\n![universal_link](./FramworkProgramme/universal_link.png)\n\n<!-- {% asset_img universal_link.png This is an universal_link image %}  -->\n","source":"_posts/iOS/Frameworks/FramworkProgramme.md","raw":"---\ntitle: iOS 之Framwork 编程\ntags: Framwork\nabbrlink: 1dd271f4\ndate: 2021-07-26 10:36:02\n---\n\n## [Framwork 编程](https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html#//apple_ref/doc/uid/10000183-SW1)\n\n![universal_link](./FramworkProgramme/universal_link.png)\n\n<!-- {% asset_img universal_link.png This is an universal_link image %}  -->\n","slug":"iOS/Frameworks/FramworkProgramme","published":1,"updated":"2021-09-16T06:42:30.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn070017iu9kfhna9bwy","content":"<h2 id=\"Framwork-编程\"><a href=\"#Framwork-编程\" class=\"headerlink\" title=\"Framwork 编程\"></a><a href=\"https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html#//apple_ref/doc/uid/10000183-SW1\">Framwork 编程</a></h2><p><img src=\"/./FramworkProgramme/universal_link.png\" alt=\"universal_link\"></p>\n<!-- <img src=\"/2021/07/26/iOS/Frameworks/FramworkProgramme/universal_link.png\" class=\"\" title=\"This is an universal_link image\">  -->\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Framwork-编程\"><a href=\"#Framwork-编程\" class=\"headerlink\" title=\"Framwork 编程\"></a><a href=\"https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html#//apple_ref/doc/uid/10000183-SW1\">Framwork 编程</a></h2><p><img src=\"/./FramworkProgramme/universal_link.png\" alt=\"universal_link\"></p>\n<!-- <img src=\"/2021/07/26/iOS/Frameworks/FramworkProgramme/universal_link.png\" class=\"\" title=\"This is an universal_link image\">  -->\n"},{"title":"iOS 面试杂谈","abbrlink":32435,"date":"2021-07-29T01:56:00.000Z","_content":"## 面试杂谈\n\n制度所描述的通常是应该怎么做、必须怎么做的问题，具体是企业价值观，使命，期望的体现；\n\n而对应该由谁来做、哪个部门或岗位来做，如何来做通常靠定流程来实现。\n\n在制度，流程皆存的前提下，是“机制”发挥了影子作用，也就是通常我们讲的游戏规则支配了利益的博弈；\n\n形成一套 基础 + 流程 + 机制 + 原理 + 方案 + 作品的路径。\n\n### 1. 准备\n\n#### 1.1 语言基础\n\n#### 1.2 流程 + 机制\n\n#### 1.3 原理\n\n#### 1.4 方案\n\n#### 1.5 作品\n\n* **设计模式 + 架构方案**\n\n### 2. 基础技能\n\n#### 2.1 UI\n\n约束 + 布局 + 渲染（原理 + 流程）\n\n#### 2.2 APP\n\n开发 + 审核 + 安装 （流程 + 机制 + 原理）\n\n### 3. Apple 特点技能\n\n内购、登录、推送、证书、Universal Link、Xcode Server、审核\n\n### 4. 库源码\n\n设计图 + 原理 + 流程图\n\n### 5. 工作相关\n\nSDK\n\n埋点 + 日志 + 数据库 + 持久化\n\n自动化\n\n性能优化（瘦身、卡顿、编译、电量、启动）\n\n大前端\n\n网络（弱网、HTTPDNS、认证、链接、设计）\n","source":"_posts/iOS/Interview/InterviewPre.md","raw":"---\ntitle: iOS 面试杂谈\nabbrlink: 32435\ndate: 2021-07-29 09:56:00\ntags:\n---\n## 面试杂谈\n\n制度所描述的通常是应该怎么做、必须怎么做的问题，具体是企业价值观，使命，期望的体现；\n\n而对应该由谁来做、哪个部门或岗位来做，如何来做通常靠定流程来实现。\n\n在制度，流程皆存的前提下，是“机制”发挥了影子作用，也就是通常我们讲的游戏规则支配了利益的博弈；\n\n形成一套 基础 + 流程 + 机制 + 原理 + 方案 + 作品的路径。\n\n### 1. 准备\n\n#### 1.1 语言基础\n\n#### 1.2 流程 + 机制\n\n#### 1.3 原理\n\n#### 1.4 方案\n\n#### 1.5 作品\n\n* **设计模式 + 架构方案**\n\n### 2. 基础技能\n\n#### 2.1 UI\n\n约束 + 布局 + 渲染（原理 + 流程）\n\n#### 2.2 APP\n\n开发 + 审核 + 安装 （流程 + 机制 + 原理）\n\n### 3. Apple 特点技能\n\n内购、登录、推送、证书、Universal Link、Xcode Server、审核\n\n### 4. 库源码\n\n设计图 + 原理 + 流程图\n\n### 5. 工作相关\n\nSDK\n\n埋点 + 日志 + 数据库 + 持久化\n\n自动化\n\n性能优化（瘦身、卡顿、编译、电量、启动）\n\n大前端\n\n网络（弱网、HTTPDNS、认证、链接、设计）\n","slug":"iOS/Interview/InterviewPre","published":1,"updated":"2021-09-16T06:42:30.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn080018iu9k7kjt5fdx","content":"<h2 id=\"面试杂谈\"><a href=\"#面试杂谈\" class=\"headerlink\" title=\"面试杂谈\"></a>面试杂谈</h2><p>制度所描述的通常是应该怎么做、必须怎么做的问题，具体是企业价值观，使命，期望的体现；</p>\n<p>而对应该由谁来做、哪个部门或岗位来做，如何来做通常靠定流程来实现。</p>\n<p>在制度，流程皆存的前提下，是“机制”发挥了影子作用，也就是通常我们讲的游戏规则支配了利益的博弈；</p>\n<p>形成一套 基础 + 流程 + 机制 + 原理 + 方案 + 作品的路径。</p>\n<h3 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1. 准备\"></a>1. 准备</h3><h4 id=\"1-1-语言基础\"><a href=\"#1-1-语言基础\" class=\"headerlink\" title=\"1.1 语言基础\"></a>1.1 语言基础</h4><h4 id=\"1-2-流程-机制\"><a href=\"#1-2-流程-机制\" class=\"headerlink\" title=\"1.2 流程 + 机制\"></a>1.2 流程 + 机制</h4><h4 id=\"1-3-原理\"><a href=\"#1-3-原理\" class=\"headerlink\" title=\"1.3 原理\"></a>1.3 原理</h4><h4 id=\"1-4-方案\"><a href=\"#1-4-方案\" class=\"headerlink\" title=\"1.4 方案\"></a>1.4 方案</h4><h4 id=\"1-5-作品\"><a href=\"#1-5-作品\" class=\"headerlink\" title=\"1.5 作品\"></a>1.5 作品</h4><ul>\n<li><strong>设计模式 + 架构方案</strong></li>\n</ul>\n<h3 id=\"2-基础技能\"><a href=\"#2-基础技能\" class=\"headerlink\" title=\"2. 基础技能\"></a>2. 基础技能</h3><h4 id=\"2-1-UI\"><a href=\"#2-1-UI\" class=\"headerlink\" title=\"2.1 UI\"></a>2.1 UI</h4><p>约束 + 布局 + 渲染（原理 + 流程）</p>\n<h4 id=\"2-2-APP\"><a href=\"#2-2-APP\" class=\"headerlink\" title=\"2.2 APP\"></a>2.2 APP</h4><p>开发 + 审核 + 安装 （流程 + 机制 + 原理）</p>\n<h3 id=\"3-Apple-特点技能\"><a href=\"#3-Apple-特点技能\" class=\"headerlink\" title=\"3. Apple 特点技能\"></a>3. Apple 特点技能</h3><p>内购、登录、推送、证书、Universal Link、Xcode Server、审核</p>\n<h3 id=\"4-库源码\"><a href=\"#4-库源码\" class=\"headerlink\" title=\"4. 库源码\"></a>4. 库源码</h3><p>设计图 + 原理 + 流程图</p>\n<h3 id=\"5-工作相关\"><a href=\"#5-工作相关\" class=\"headerlink\" title=\"5. 工作相关\"></a>5. 工作相关</h3><p>SDK</p>\n<p>埋点 + 日志 + 数据库 + 持久化</p>\n<p>自动化</p>\n<p>性能优化（瘦身、卡顿、编译、电量、启动）</p>\n<p>大前端</p>\n<p>网络（弱网、HTTPDNS、认证、链接、设计）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"面试杂谈\"><a href=\"#面试杂谈\" class=\"headerlink\" title=\"面试杂谈\"></a>面试杂谈</h2><p>制度所描述的通常是应该怎么做、必须怎么做的问题，具体是企业价值观，使命，期望的体现；</p>\n<p>而对应该由谁来做、哪个部门或岗位来做，如何来做通常靠定流程来实现。</p>\n<p>在制度，流程皆存的前提下，是“机制”发挥了影子作用，也就是通常我们讲的游戏规则支配了利益的博弈；</p>\n<p>形成一套 基础 + 流程 + 机制 + 原理 + 方案 + 作品的路径。</p>\n<h3 id=\"1-准备\"><a href=\"#1-准备\" class=\"headerlink\" title=\"1. 准备\"></a>1. 准备</h3><h4 id=\"1-1-语言基础\"><a href=\"#1-1-语言基础\" class=\"headerlink\" title=\"1.1 语言基础\"></a>1.1 语言基础</h4><h4 id=\"1-2-流程-机制\"><a href=\"#1-2-流程-机制\" class=\"headerlink\" title=\"1.2 流程 + 机制\"></a>1.2 流程 + 机制</h4><h4 id=\"1-3-原理\"><a href=\"#1-3-原理\" class=\"headerlink\" title=\"1.3 原理\"></a>1.3 原理</h4><h4 id=\"1-4-方案\"><a href=\"#1-4-方案\" class=\"headerlink\" title=\"1.4 方案\"></a>1.4 方案</h4><h4 id=\"1-5-作品\"><a href=\"#1-5-作品\" class=\"headerlink\" title=\"1.5 作品\"></a>1.5 作品</h4><ul>\n<li><strong>设计模式 + 架构方案</strong></li>\n</ul>\n<h3 id=\"2-基础技能\"><a href=\"#2-基础技能\" class=\"headerlink\" title=\"2. 基础技能\"></a>2. 基础技能</h3><h4 id=\"2-1-UI\"><a href=\"#2-1-UI\" class=\"headerlink\" title=\"2.1 UI\"></a>2.1 UI</h4><p>约束 + 布局 + 渲染（原理 + 流程）</p>\n<h4 id=\"2-2-APP\"><a href=\"#2-2-APP\" class=\"headerlink\" title=\"2.2 APP\"></a>2.2 APP</h4><p>开发 + 审核 + 安装 （流程 + 机制 + 原理）</p>\n<h3 id=\"3-Apple-特点技能\"><a href=\"#3-Apple-特点技能\" class=\"headerlink\" title=\"3. Apple 特点技能\"></a>3. Apple 特点技能</h3><p>内购、登录、推送、证书、Universal Link、Xcode Server、审核</p>\n<h3 id=\"4-库源码\"><a href=\"#4-库源码\" class=\"headerlink\" title=\"4. 库源码\"></a>4. 库源码</h3><p>设计图 + 原理 + 流程图</p>\n<h3 id=\"5-工作相关\"><a href=\"#5-工作相关\" class=\"headerlink\" title=\"5. 工作相关\"></a>5. 工作相关</h3><p>SDK</p>\n<p>埋点 + 日志 + 数据库 + 持久化</p>\n<p>自动化</p>\n<p>性能优化（瘦身、卡顿、编译、电量、启动）</p>\n<p>大前端</p>\n<p>网络（弱网、HTTPDNS、认证、链接、设计）</p>\n"},{"title":"iOS之面试","abbrlink":"c7bdd67","date":"2021-05-24T16:00:00.000Z","_content":"\n## 1. 并发编程\n\n### 1.1 [进程&线程](https://www.jianshu.com/p/9218692cb209)\n\n#### 1.1.1 [进程通信](https://www.jianshu.com/p/c1015f5ffa74)\n\n1. 管道/匿名管道(pipe)\n2. 有名管道(FIFO)\n3. 信号(Signal)\n4. 消息(Message)队列\n5. 共享内存(share memory)\n6. 信号量(semaphore)\n7. 套接字(socket)\n\n#### 1.1.2 线程通信\n\n##### 1.1.2.1 线程通讯方式\n\n1. 临界区\n2. 互斥量\n3. 信号量\n4. 事件\n5. 锁\n6. 信号\n7. violate全局变量-共享内存\n\n##### 1.1.2.2 [iOS 中线程同步的锁](https://juejin.cn/post/6844903716265394184)\n\n1. 自旋锁\n2. 互斥锁\n\n##### 1.1.2.3 [线程、队列、任务](https://zhuanlan.zhihu.com/p/68705170)\n\n### 1.1.2.4 [runloop](https://blog.ibireme.com/2015/05/18/runloop/)\n\n![RunLoop](../resources/Interview/RunLoop_1.png)\n\n### 1.2 [线程池](https://wangpengcheng.github.io/2019/05/17/cplusplus_theadpool/)\n\n### 1.3 协程\n\n### 1.4 GCD、NSThread、NSOperation\n\n#### 1.4.1 GCD\n\n不用管理线程的生命周期\n充分利用系统的多核处理\n不用管理资源回收\n基于 Pthread 实现的\n\n实现原理：dispatchQueue --> pthread_workqueue --> workQueue\n\n#### 1.4.2 NSThread\n\n轻量级\n手动管理线程启动，停止，线程同步，睡眠，唤醒，保活\n\n#### 1.4.3 NSOperation\n\n基于 GCD 的面向对象的实现，可以添加线程依赖，指定最大并发任务数\n支持设置优先级\n支持取消操作\n利用 kvo 监听线程状态\n\n### 1.3 大量数据处理\n\n纯读：分页、预加载、缓存\n\n大量数据读写（互斥）：读并发，写等待\n\n### 1.4 苹果文档\n\n[Concurrency Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/)\n[Threading Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1)\n[GCD Internals](http://newosxbook.com/articles/GCD.html)\n\n## 2. 性能优化\n\n### 2.1 启动优化\n\n冷启动优化（dyld、Mac-O）\n\ndyld 环境变量\n\ndyld2、dyld3\n\n![iOS冷启动优化](../Performance/Resources/dyld.jpg)\n\n可执行文件格式：Mac-O\n\n![Mac-O](../resources/Interview/mac-o.jpg)\n\n### 2.2 瘦身\n\nApple Slicing\n\n资源优化：去掉没用的资源，图片资源压缩，webp\n\n代码优化：去掉没用的代码（Linked map）\n\n编译优化：Strip Link Product，符号文件，异常支持等\n\n* [iOS微信安装包瘦身](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207986417&idx=1&sn=77ea7d8e4f8ab7b59111e78c86ccfe66&scene=24&srcid=0921TTAXHGHWKqckEHTvGzoA#rd)\n* [今日头条 iOS 安装包大小优化—— 新阶段、新实践](https://www.infoq.cn/article/iowjwhbirqeobzf5m2o8)\n\n### 2.3 电量\n\n电量优化涉及 CPU/GPU 任务，网络任务，硬件功能（定位），后台/前台唤醒切换消耗（任务尽量集中化）\n\n### 2.4 网络\n\n弱网优化\n\n网络安全优化\n\n网络认证\n\n### 2.5 UI\n\n卡顿优化，tableview优化，图片资源/渲染优化（渲染原理）\n\n### 2.6 Instrument\n\n内存泄漏，僵死代码等\n\n## 3. 网络\n\nTCP、UDP\n\nIP\n\nHTTP[S]\n\nWebSocket\n\nSocket\n\n* 请求拦截、认证、链接建立\n\n## 4. 内存管理\n\n### 4.1 修饰符\n\n#### 4.1.1 权限修饰符\n\n#### 4.1.2 属性修饰符\n\n### 4.2 Autorelease Pool\n\n### 4.3 OC 默认规则\n\n生成持有规则\n方法命名规则\n\n### 4.4 循环引用\n\nWeak\nNSTimer\nBlock\n\nJavaScriptCore：JSManagedValue\n\n### 4.5 [alloc 方法](https://www.jianshu.com/p/e612f4fa3cd3)\n\n## 5. [Block](https://limeng99.club/learning/2020/05/25/iOS-Block底层实现原理.html)\n\n### 5.1 类型\n\n### 5.2 结构\n\n### 5.3 block 内存管理\n\n## 6. [Runtime](https://halfrost.com/objc_runtime_isa_class/)\n\nCategory、关联属性\n\n方法交换\n\n消息转发\n\nKVO/KVC\n\nisa\n\n## 7. 日志\n\n崩溃、用户行为\n\n实时、非实时\n\n日志格式： ASL & ULS\n\n操作统计\n\n类型：info，warn，error\n\n日志系统设计\n\n## 8. 埋点\n\n无侵入式\n\n可视化\n\n全埋点\n\n[无埋点](https://www.jianshu.com/p/69ce01e15042)\n\n## 9. 异常\n\n### 9.1 跟踪\n\n### 9.2 分析\n\n### 9.3 处理\n\n* 线上 bug[崩溃]等\n\n## 10. CI\n\nShell\n\nJenkins\n\nFastlane\n\nXcodeServer\n\n* Firm/蒲公英，钉钉\n\n## 11. 组件化\n\nPod\n\nCTMediator\n\nBehive\n\n* 功能\n* 业务\n\n## 12. 数据结构\n\n链表\n\n树\n\n堆\n\n栈\n\n图\n\n拓扑\n\n队列\n\n## 13. 算法\n\n查找\n\n排序\n\n复杂度\n\n匹配（字符串）\n\n安全（对称、非对称）\n\n摘要\n\n签名\n\n## 14. OS\n\n文件（Mac-O、可执行、多媒体、plist 等）\n\nAPP（结构，安装认证流程），APP 共享\n\n持久化：\nplist、归档、keychain、数据库、文件\n\n## 15. UI\n\n绘制/渲染（流程）\n\n布局\n\n动画交互\n\n事件响应者链\n\nUIView与Layer\n\n透明度：alpha，opaque 等\n\n## 16. 设计模式\n\n## 17. 架构\n\n## 18. 附加项\n\n### 18.1 大前端\n\n原理\n\nWebKit、React-Native、Flutter、Dcloud、Capacitor\n\n### 18.2 蓝牙\n\n### 18.3 IM\n\n### 18.4 音视频\n\n### 18.5 Android\n\n### 18.6 后端\n\n### 18.7 C/C++\n\n## 19. 补充\n\n方法调用 与 函数调用\n\n逆向\n\n汇编\n\n编译器\n\n解释器\n\n问题方案提供角色\n\n## 20 工作成就\n\n蓝牙？\n\nSDK？\n\n弹框？\n\n自动化？\n\n苹果登录?\n\n暗黑主题--\n\nSwift 5 升级--\n\nDcloud--\n\nCapacitor--\n\nFlutter--\n\nuniversal link--\n","source":"_posts/iOS/Interview/InterviewQuestions.md","raw":"---\ntitle: iOS之面试\nabbrlink: c7bdd67\ndate: 2021-05-25 00:00:00\ntags:\n---\n\n## 1. 并发编程\n\n### 1.1 [进程&线程](https://www.jianshu.com/p/9218692cb209)\n\n#### 1.1.1 [进程通信](https://www.jianshu.com/p/c1015f5ffa74)\n\n1. 管道/匿名管道(pipe)\n2. 有名管道(FIFO)\n3. 信号(Signal)\n4. 消息(Message)队列\n5. 共享内存(share memory)\n6. 信号量(semaphore)\n7. 套接字(socket)\n\n#### 1.1.2 线程通信\n\n##### 1.1.2.1 线程通讯方式\n\n1. 临界区\n2. 互斥量\n3. 信号量\n4. 事件\n5. 锁\n6. 信号\n7. violate全局变量-共享内存\n\n##### 1.1.2.2 [iOS 中线程同步的锁](https://juejin.cn/post/6844903716265394184)\n\n1. 自旋锁\n2. 互斥锁\n\n##### 1.1.2.3 [线程、队列、任务](https://zhuanlan.zhihu.com/p/68705170)\n\n### 1.1.2.4 [runloop](https://blog.ibireme.com/2015/05/18/runloop/)\n\n![RunLoop](../resources/Interview/RunLoop_1.png)\n\n### 1.2 [线程池](https://wangpengcheng.github.io/2019/05/17/cplusplus_theadpool/)\n\n### 1.3 协程\n\n### 1.4 GCD、NSThread、NSOperation\n\n#### 1.4.1 GCD\n\n不用管理线程的生命周期\n充分利用系统的多核处理\n不用管理资源回收\n基于 Pthread 实现的\n\n实现原理：dispatchQueue --> pthread_workqueue --> workQueue\n\n#### 1.4.2 NSThread\n\n轻量级\n手动管理线程启动，停止，线程同步，睡眠，唤醒，保活\n\n#### 1.4.3 NSOperation\n\n基于 GCD 的面向对象的实现，可以添加线程依赖，指定最大并发任务数\n支持设置优先级\n支持取消操作\n利用 kvo 监听线程状态\n\n### 1.3 大量数据处理\n\n纯读：分页、预加载、缓存\n\n大量数据读写（互斥）：读并发，写等待\n\n### 1.4 苹果文档\n\n[Concurrency Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/)\n[Threading Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1)\n[GCD Internals](http://newosxbook.com/articles/GCD.html)\n\n## 2. 性能优化\n\n### 2.1 启动优化\n\n冷启动优化（dyld、Mac-O）\n\ndyld 环境变量\n\ndyld2、dyld3\n\n![iOS冷启动优化](../Performance/Resources/dyld.jpg)\n\n可执行文件格式：Mac-O\n\n![Mac-O](../resources/Interview/mac-o.jpg)\n\n### 2.2 瘦身\n\nApple Slicing\n\n资源优化：去掉没用的资源，图片资源压缩，webp\n\n代码优化：去掉没用的代码（Linked map）\n\n编译优化：Strip Link Product，符号文件，异常支持等\n\n* [iOS微信安装包瘦身](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207986417&idx=1&sn=77ea7d8e4f8ab7b59111e78c86ccfe66&scene=24&srcid=0921TTAXHGHWKqckEHTvGzoA#rd)\n* [今日头条 iOS 安装包大小优化—— 新阶段、新实践](https://www.infoq.cn/article/iowjwhbirqeobzf5m2o8)\n\n### 2.3 电量\n\n电量优化涉及 CPU/GPU 任务，网络任务，硬件功能（定位），后台/前台唤醒切换消耗（任务尽量集中化）\n\n### 2.4 网络\n\n弱网优化\n\n网络安全优化\n\n网络认证\n\n### 2.5 UI\n\n卡顿优化，tableview优化，图片资源/渲染优化（渲染原理）\n\n### 2.6 Instrument\n\n内存泄漏，僵死代码等\n\n## 3. 网络\n\nTCP、UDP\n\nIP\n\nHTTP[S]\n\nWebSocket\n\nSocket\n\n* 请求拦截、认证、链接建立\n\n## 4. 内存管理\n\n### 4.1 修饰符\n\n#### 4.1.1 权限修饰符\n\n#### 4.1.2 属性修饰符\n\n### 4.2 Autorelease Pool\n\n### 4.3 OC 默认规则\n\n生成持有规则\n方法命名规则\n\n### 4.4 循环引用\n\nWeak\nNSTimer\nBlock\n\nJavaScriptCore：JSManagedValue\n\n### 4.5 [alloc 方法](https://www.jianshu.com/p/e612f4fa3cd3)\n\n## 5. [Block](https://limeng99.club/learning/2020/05/25/iOS-Block底层实现原理.html)\n\n### 5.1 类型\n\n### 5.2 结构\n\n### 5.3 block 内存管理\n\n## 6. [Runtime](https://halfrost.com/objc_runtime_isa_class/)\n\nCategory、关联属性\n\n方法交换\n\n消息转发\n\nKVO/KVC\n\nisa\n\n## 7. 日志\n\n崩溃、用户行为\n\n实时、非实时\n\n日志格式： ASL & ULS\n\n操作统计\n\n类型：info，warn，error\n\n日志系统设计\n\n## 8. 埋点\n\n无侵入式\n\n可视化\n\n全埋点\n\n[无埋点](https://www.jianshu.com/p/69ce01e15042)\n\n## 9. 异常\n\n### 9.1 跟踪\n\n### 9.2 分析\n\n### 9.3 处理\n\n* 线上 bug[崩溃]等\n\n## 10. CI\n\nShell\n\nJenkins\n\nFastlane\n\nXcodeServer\n\n* Firm/蒲公英，钉钉\n\n## 11. 组件化\n\nPod\n\nCTMediator\n\nBehive\n\n* 功能\n* 业务\n\n## 12. 数据结构\n\n链表\n\n树\n\n堆\n\n栈\n\n图\n\n拓扑\n\n队列\n\n## 13. 算法\n\n查找\n\n排序\n\n复杂度\n\n匹配（字符串）\n\n安全（对称、非对称）\n\n摘要\n\n签名\n\n## 14. OS\n\n文件（Mac-O、可执行、多媒体、plist 等）\n\nAPP（结构，安装认证流程），APP 共享\n\n持久化：\nplist、归档、keychain、数据库、文件\n\n## 15. UI\n\n绘制/渲染（流程）\n\n布局\n\n动画交互\n\n事件响应者链\n\nUIView与Layer\n\n透明度：alpha，opaque 等\n\n## 16. 设计模式\n\n## 17. 架构\n\n## 18. 附加项\n\n### 18.1 大前端\n\n原理\n\nWebKit、React-Native、Flutter、Dcloud、Capacitor\n\n### 18.2 蓝牙\n\n### 18.3 IM\n\n### 18.4 音视频\n\n### 18.5 Android\n\n### 18.6 后端\n\n### 18.7 C/C++\n\n## 19. 补充\n\n方法调用 与 函数调用\n\n逆向\n\n汇编\n\n编译器\n\n解释器\n\n问题方案提供角色\n\n## 20 工作成就\n\n蓝牙？\n\nSDK？\n\n弹框？\n\n自动化？\n\n苹果登录?\n\n暗黑主题--\n\nSwift 5 升级--\n\nDcloud--\n\nCapacitor--\n\nFlutter--\n\nuniversal link--\n","slug":"iOS/Interview/InterviewQuestions","published":1,"updated":"2021-07-29T06:45:57.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1n001biu9k7vulei1e","content":"<h2 id=\"1-并发编程\"><a href=\"#1-并发编程\" class=\"headerlink\" title=\"1. 并发编程\"></a>1. 并发编程</h2><h3 id=\"1-1-进程-amp-线程\"><a href=\"#1-1-进程-amp-线程\" class=\"headerlink\" title=\"1.1 进程&amp;线程\"></a>1.1 <a href=\"https://www.jianshu.com/p/9218692cb209\">进程&amp;线程</a></h3><h4 id=\"1-1-1-进程通信\"><a href=\"#1-1-1-进程通信\" class=\"headerlink\" title=\"1.1.1 进程通信\"></a>1.1.1 <a href=\"https://www.jianshu.com/p/c1015f5ffa74\">进程通信</a></h4><ol>\n<li>管道/匿名管道(pipe)</li>\n<li>有名管道(FIFO)</li>\n<li>信号(Signal)</li>\n<li>消息(Message)队列</li>\n<li>共享内存(share memory)</li>\n<li>信号量(semaphore)</li>\n<li>套接字(socket)</li>\n</ol>\n<h4 id=\"1-1-2-线程通信\"><a href=\"#1-1-2-线程通信\" class=\"headerlink\" title=\"1.1.2 线程通信\"></a>1.1.2 线程通信</h4><h5 id=\"1-1-2-1-线程通讯方式\"><a href=\"#1-1-2-1-线程通讯方式\" class=\"headerlink\" title=\"1.1.2.1 线程通讯方式\"></a>1.1.2.1 线程通讯方式</h5><ol>\n<li>临界区</li>\n<li>互斥量</li>\n<li>信号量</li>\n<li>事件</li>\n<li>锁</li>\n<li>信号</li>\n<li>violate全局变量-共享内存</li>\n</ol>\n<h5 id=\"1-1-2-2-iOS-中线程同步的锁\"><a href=\"#1-1-2-2-iOS-中线程同步的锁\" class=\"headerlink\" title=\"1.1.2.2 iOS 中线程同步的锁\"></a>1.1.2.2 <a href=\"https://juejin.cn/post/6844903716265394184\">iOS 中线程同步的锁</a></h5><ol>\n<li>自旋锁</li>\n<li>互斥锁</li>\n</ol>\n<h5 id=\"1-1-2-3-线程、队列、任务\"><a href=\"#1-1-2-3-线程、队列、任务\" class=\"headerlink\" title=\"1.1.2.3 线程、队列、任务\"></a>1.1.2.3 <a href=\"https://zhuanlan.zhihu.com/p/68705170\">线程、队列、任务</a></h5><h3 id=\"1-1-2-4-runloop\"><a href=\"#1-1-2-4-runloop\" class=\"headerlink\" title=\"1.1.2.4 runloop\"></a>1.1.2.4 <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">runloop</a></h3><p><img src=\"/../resources/Interview/RunLoop_1.png\" alt=\"RunLoop\"></p>\n<h3 id=\"1-2-线程池\"><a href=\"#1-2-线程池\" class=\"headerlink\" title=\"1.2 线程池\"></a>1.2 <a href=\"https://wangpengcheng.github.io/2019/05/17/cplusplus_theadpool/\">线程池</a></h3><h3 id=\"1-3-协程\"><a href=\"#1-3-协程\" class=\"headerlink\" title=\"1.3 协程\"></a>1.3 协程</h3><h3 id=\"1-4-GCD、NSThread、NSOperation\"><a href=\"#1-4-GCD、NSThread、NSOperation\" class=\"headerlink\" title=\"1.4 GCD、NSThread、NSOperation\"></a>1.4 GCD、NSThread、NSOperation</h3><h4 id=\"1-4-1-GCD\"><a href=\"#1-4-1-GCD\" class=\"headerlink\" title=\"1.4.1 GCD\"></a>1.4.1 GCD</h4><p>不用管理线程的生命周期<br>充分利用系统的多核处理<br>不用管理资源回收<br>基于 Pthread 实现的</p>\n<p>实现原理：dispatchQueue –&gt; pthread_workqueue –&gt; workQueue</p>\n<h4 id=\"1-4-2-NSThread\"><a href=\"#1-4-2-NSThread\" class=\"headerlink\" title=\"1.4.2 NSThread\"></a>1.4.2 NSThread</h4><p>轻量级<br>手动管理线程启动，停止，线程同步，睡眠，唤醒，保活</p>\n<h4 id=\"1-4-3-NSOperation\"><a href=\"#1-4-3-NSOperation\" class=\"headerlink\" title=\"1.4.3 NSOperation\"></a>1.4.3 NSOperation</h4><p>基于 GCD 的面向对象的实现，可以添加线程依赖，指定最大并发任务数<br>支持设置优先级<br>支持取消操作<br>利用 kvo 监听线程状态</p>\n<h3 id=\"1-3-大量数据处理\"><a href=\"#1-3-大量数据处理\" class=\"headerlink\" title=\"1.3 大量数据处理\"></a>1.3 大量数据处理</h3><p>纯读：分页、预加载、缓存</p>\n<p>大量数据读写（互斥）：读并发，写等待</p>\n<h3 id=\"1-4-苹果文档\"><a href=\"#1-4-苹果文档\" class=\"headerlink\" title=\"1.4 苹果文档\"></a>1.4 苹果文档</h3><p><a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/\">Concurrency Programming Guide</a><br><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1\">Threading Programming Guide</a><br><a href=\"http://newosxbook.com/articles/GCD.html\">GCD Internals</a></p>\n<h2 id=\"2-性能优化\"><a href=\"#2-性能优化\" class=\"headerlink\" title=\"2. 性能优化\"></a>2. 性能优化</h2><h3 id=\"2-1-启动优化\"><a href=\"#2-1-启动优化\" class=\"headerlink\" title=\"2.1 启动优化\"></a>2.1 启动优化</h3><p>冷启动优化（dyld、Mac-O）</p>\n<p>dyld 环境变量</p>\n<p>dyld2、dyld3</p>\n<p><img src=\"/../Performance/Resources/dyld.jpg\" alt=\"iOS冷启动优化\"></p>\n<p>可执行文件格式：Mac-O</p>\n<p><img src=\"/../resources/Interview/mac-o.jpg\" alt=\"Mac-O\"></p>\n<h3 id=\"2-2-瘦身\"><a href=\"#2-2-瘦身\" class=\"headerlink\" title=\"2.2 瘦身\"></a>2.2 瘦身</h3><p>Apple Slicing</p>\n<p>资源优化：去掉没用的资源，图片资源压缩，webp</p>\n<p>代码优化：去掉没用的代码（Linked map）</p>\n<p>编译优化：Strip Link Product，符号文件，异常支持等</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207986417&idx=1&sn=77ea7d8e4f8ab7b59111e78c86ccfe66&scene=24&srcid=0921TTAXHGHWKqckEHTvGzoA#rd\">iOS微信安装包瘦身</a></li>\n<li><a href=\"https://www.infoq.cn/article/iowjwhbirqeobzf5m2o8\">今日头条 iOS 安装包大小优化—— 新阶段、新实践</a></li>\n</ul>\n<h3 id=\"2-3-电量\"><a href=\"#2-3-电量\" class=\"headerlink\" title=\"2.3 电量\"></a>2.3 电量</h3><p>电量优化涉及 CPU/GPU 任务，网络任务，硬件功能（定位），后台/前台唤醒切换消耗（任务尽量集中化）</p>\n<h3 id=\"2-4-网络\"><a href=\"#2-4-网络\" class=\"headerlink\" title=\"2.4 网络\"></a>2.4 网络</h3><p>弱网优化</p>\n<p>网络安全优化</p>\n<p>网络认证</p>\n<h3 id=\"2-5-UI\"><a href=\"#2-5-UI\" class=\"headerlink\" title=\"2.5 UI\"></a>2.5 UI</h3><p>卡顿优化，tableview优化，图片资源/渲染优化（渲染原理）</p>\n<h3 id=\"2-6-Instrument\"><a href=\"#2-6-Instrument\" class=\"headerlink\" title=\"2.6 Instrument\"></a>2.6 Instrument</h3><p>内存泄漏，僵死代码等</p>\n<h2 id=\"3-网络\"><a href=\"#3-网络\" class=\"headerlink\" title=\"3. 网络\"></a>3. 网络</h2><p>TCP、UDP</p>\n<p>IP</p>\n<p>HTTP[S]</p>\n<p>WebSocket</p>\n<p>Socket</p>\n<ul>\n<li>请求拦截、认证、链接建立</li>\n</ul>\n<h2 id=\"4-内存管理\"><a href=\"#4-内存管理\" class=\"headerlink\" title=\"4. 内存管理\"></a>4. 内存管理</h2><h3 id=\"4-1-修饰符\"><a href=\"#4-1-修饰符\" class=\"headerlink\" title=\"4.1 修饰符\"></a>4.1 修饰符</h3><h4 id=\"4-1-1-权限修饰符\"><a href=\"#4-1-1-权限修饰符\" class=\"headerlink\" title=\"4.1.1 权限修饰符\"></a>4.1.1 权限修饰符</h4><h4 id=\"4-1-2-属性修饰符\"><a href=\"#4-1-2-属性修饰符\" class=\"headerlink\" title=\"4.1.2 属性修饰符\"></a>4.1.2 属性修饰符</h4><h3 id=\"4-2-Autorelease-Pool\"><a href=\"#4-2-Autorelease-Pool\" class=\"headerlink\" title=\"4.2 Autorelease Pool\"></a>4.2 Autorelease Pool</h3><h3 id=\"4-3-OC-默认规则\"><a href=\"#4-3-OC-默认规则\" class=\"headerlink\" title=\"4.3 OC 默认规则\"></a>4.3 OC 默认规则</h3><p>生成持有规则<br>方法命名规则</p>\n<h3 id=\"4-4-循环引用\"><a href=\"#4-4-循环引用\" class=\"headerlink\" title=\"4.4 循环引用\"></a>4.4 循环引用</h3><p>Weak<br>NSTimer<br>Block</p>\n<p>JavaScriptCore：JSManagedValue</p>\n<h3 id=\"4-5-alloc-方法\"><a href=\"#4-5-alloc-方法\" class=\"headerlink\" title=\"4.5 alloc 方法\"></a>4.5 <a href=\"https://www.jianshu.com/p/e612f4fa3cd3\">alloc 方法</a></h3><h2 id=\"5-Block\"><a href=\"#5-Block\" class=\"headerlink\" title=\"5. Block\"></a>5. <a href=\"https://limeng99.club/learning/2020/05/25/iOS-Block%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html\">Block</a></h2><h3 id=\"5-1-类型\"><a href=\"#5-1-类型\" class=\"headerlink\" title=\"5.1 类型\"></a>5.1 类型</h3><h3 id=\"5-2-结构\"><a href=\"#5-2-结构\" class=\"headerlink\" title=\"5.2 结构\"></a>5.2 结构</h3><h3 id=\"5-3-block-内存管理\"><a href=\"#5-3-block-内存管理\" class=\"headerlink\" title=\"5.3 block 内存管理\"></a>5.3 block 内存管理</h3><h2 id=\"6-Runtime\"><a href=\"#6-Runtime\" class=\"headerlink\" title=\"6. Runtime\"></a>6. <a href=\"https://halfrost.com/objc_runtime_isa_class/\">Runtime</a></h2><p>Category、关联属性</p>\n<p>方法交换</p>\n<p>消息转发</p>\n<p>KVO/KVC</p>\n<p>isa</p>\n<h2 id=\"7-日志\"><a href=\"#7-日志\" class=\"headerlink\" title=\"7. 日志\"></a>7. 日志</h2><p>崩溃、用户行为</p>\n<p>实时、非实时</p>\n<p>日志格式： ASL &amp; ULS</p>\n<p>操作统计</p>\n<p>类型：info，warn，error</p>\n<p>日志系统设计</p>\n<h2 id=\"8-埋点\"><a href=\"#8-埋点\" class=\"headerlink\" title=\"8. 埋点\"></a>8. 埋点</h2><p>无侵入式</p>\n<p>可视化</p>\n<p>全埋点</p>\n<p><a href=\"https://www.jianshu.com/p/69ce01e15042\">无埋点</a></p>\n<h2 id=\"9-异常\"><a href=\"#9-异常\" class=\"headerlink\" title=\"9. 异常\"></a>9. 异常</h2><h3 id=\"9-1-跟踪\"><a href=\"#9-1-跟踪\" class=\"headerlink\" title=\"9.1 跟踪\"></a>9.1 跟踪</h3><h3 id=\"9-2-分析\"><a href=\"#9-2-分析\" class=\"headerlink\" title=\"9.2 分析\"></a>9.2 分析</h3><h3 id=\"9-3-处理\"><a href=\"#9-3-处理\" class=\"headerlink\" title=\"9.3 处理\"></a>9.3 处理</h3><ul>\n<li>线上 bug[崩溃]等</li>\n</ul>\n<h2 id=\"10-CI\"><a href=\"#10-CI\" class=\"headerlink\" title=\"10. CI\"></a>10. CI</h2><p>Shell</p>\n<p>Jenkins</p>\n<p>Fastlane</p>\n<p>XcodeServer</p>\n<ul>\n<li>Firm/蒲公英，钉钉</li>\n</ul>\n<h2 id=\"11-组件化\"><a href=\"#11-组件化\" class=\"headerlink\" title=\"11. 组件化\"></a>11. 组件化</h2><p>Pod</p>\n<p>CTMediator</p>\n<p>Behive</p>\n<ul>\n<li>功能</li>\n<li>业务</li>\n</ul>\n<h2 id=\"12-数据结构\"><a href=\"#12-数据结构\" class=\"headerlink\" title=\"12. 数据结构\"></a>12. 数据结构</h2><p>链表</p>\n<p>树</p>\n<p>堆</p>\n<p>栈</p>\n<p>图</p>\n<p>拓扑</p>\n<p>队列</p>\n<h2 id=\"13-算法\"><a href=\"#13-算法\" class=\"headerlink\" title=\"13. 算法\"></a>13. 算法</h2><p>查找</p>\n<p>排序</p>\n<p>复杂度</p>\n<p>匹配（字符串）</p>\n<p>安全（对称、非对称）</p>\n<p>摘要</p>\n<p>签名</p>\n<h2 id=\"14-OS\"><a href=\"#14-OS\" class=\"headerlink\" title=\"14. OS\"></a>14. OS</h2><p>文件（Mac-O、可执行、多媒体、plist 等）</p>\n<p>APP（结构，安装认证流程），APP 共享</p>\n<p>持久化：<br>plist、归档、keychain、数据库、文件</p>\n<h2 id=\"15-UI\"><a href=\"#15-UI\" class=\"headerlink\" title=\"15. UI\"></a>15. UI</h2><p>绘制/渲染（流程）</p>\n<p>布局</p>\n<p>动画交互</p>\n<p>事件响应者链</p>\n<p>UIView与Layer</p>\n<p>透明度：alpha，opaque 等</p>\n<h2 id=\"16-设计模式\"><a href=\"#16-设计模式\" class=\"headerlink\" title=\"16. 设计模式\"></a>16. 设计模式</h2><h2 id=\"17-架构\"><a href=\"#17-架构\" class=\"headerlink\" title=\"17. 架构\"></a>17. 架构</h2><h2 id=\"18-附加项\"><a href=\"#18-附加项\" class=\"headerlink\" title=\"18. 附加项\"></a>18. 附加项</h2><h3 id=\"18-1-大前端\"><a href=\"#18-1-大前端\" class=\"headerlink\" title=\"18.1 大前端\"></a>18.1 大前端</h3><p>原理</p>\n<p>WebKit、React-Native、Flutter、Dcloud、Capacitor</p>\n<h3 id=\"18-2-蓝牙\"><a href=\"#18-2-蓝牙\" class=\"headerlink\" title=\"18.2 蓝牙\"></a>18.2 蓝牙</h3><h3 id=\"18-3-IM\"><a href=\"#18-3-IM\" class=\"headerlink\" title=\"18.3 IM\"></a>18.3 IM</h3><h3 id=\"18-4-音视频\"><a href=\"#18-4-音视频\" class=\"headerlink\" title=\"18.4 音视频\"></a>18.4 音视频</h3><h3 id=\"18-5-Android\"><a href=\"#18-5-Android\" class=\"headerlink\" title=\"18.5 Android\"></a>18.5 Android</h3><h3 id=\"18-6-后端\"><a href=\"#18-6-后端\" class=\"headerlink\" title=\"18.6 后端\"></a>18.6 后端</h3><h3 id=\"18-7-C-C\"><a href=\"#18-7-C-C\" class=\"headerlink\" title=\"18.7 C/C++\"></a>18.7 C/C++</h3><h2 id=\"19-补充\"><a href=\"#19-补充\" class=\"headerlink\" title=\"19. 补充\"></a>19. 补充</h2><p>方法调用 与 函数调用</p>\n<p>逆向</p>\n<p>汇编</p>\n<p>编译器</p>\n<p>解释器</p>\n<p>问题方案提供角色</p>\n<h2 id=\"20-工作成就\"><a href=\"#20-工作成就\" class=\"headerlink\" title=\"20 工作成就\"></a>20 工作成就</h2><p>蓝牙？</p>\n<p>SDK？</p>\n<p>弹框？</p>\n<p>自动化？</p>\n<p>苹果登录?</p>\n<p>暗黑主题–</p>\n<p>Swift 5 升级–</p>\n<p>Dcloud–</p>\n<p>Capacitor–</p>\n<p>Flutter–</p>\n<p>universal link–</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-并发编程\"><a href=\"#1-并发编程\" class=\"headerlink\" title=\"1. 并发编程\"></a>1. 并发编程</h2><h3 id=\"1-1-进程-amp-线程\"><a href=\"#1-1-进程-amp-线程\" class=\"headerlink\" title=\"1.1 进程&amp;线程\"></a>1.1 <a href=\"https://www.jianshu.com/p/9218692cb209\">进程&amp;线程</a></h3><h4 id=\"1-1-1-进程通信\"><a href=\"#1-1-1-进程通信\" class=\"headerlink\" title=\"1.1.1 进程通信\"></a>1.1.1 <a href=\"https://www.jianshu.com/p/c1015f5ffa74\">进程通信</a></h4><ol>\n<li>管道/匿名管道(pipe)</li>\n<li>有名管道(FIFO)</li>\n<li>信号(Signal)</li>\n<li>消息(Message)队列</li>\n<li>共享内存(share memory)</li>\n<li>信号量(semaphore)</li>\n<li>套接字(socket)</li>\n</ol>\n<h4 id=\"1-1-2-线程通信\"><a href=\"#1-1-2-线程通信\" class=\"headerlink\" title=\"1.1.2 线程通信\"></a>1.1.2 线程通信</h4><h5 id=\"1-1-2-1-线程通讯方式\"><a href=\"#1-1-2-1-线程通讯方式\" class=\"headerlink\" title=\"1.1.2.1 线程通讯方式\"></a>1.1.2.1 线程通讯方式</h5><ol>\n<li>临界区</li>\n<li>互斥量</li>\n<li>信号量</li>\n<li>事件</li>\n<li>锁</li>\n<li>信号</li>\n<li>violate全局变量-共享内存</li>\n</ol>\n<h5 id=\"1-1-2-2-iOS-中线程同步的锁\"><a href=\"#1-1-2-2-iOS-中线程同步的锁\" class=\"headerlink\" title=\"1.1.2.2 iOS 中线程同步的锁\"></a>1.1.2.2 <a href=\"https://juejin.cn/post/6844903716265394184\">iOS 中线程同步的锁</a></h5><ol>\n<li>自旋锁</li>\n<li>互斥锁</li>\n</ol>\n<h5 id=\"1-1-2-3-线程、队列、任务\"><a href=\"#1-1-2-3-线程、队列、任务\" class=\"headerlink\" title=\"1.1.2.3 线程、队列、任务\"></a>1.1.2.3 <a href=\"https://zhuanlan.zhihu.com/p/68705170\">线程、队列、任务</a></h5><h3 id=\"1-1-2-4-runloop\"><a href=\"#1-1-2-4-runloop\" class=\"headerlink\" title=\"1.1.2.4 runloop\"></a>1.1.2.4 <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">runloop</a></h3><p><img src=\"/../resources/Interview/RunLoop_1.png\" alt=\"RunLoop\"></p>\n<h3 id=\"1-2-线程池\"><a href=\"#1-2-线程池\" class=\"headerlink\" title=\"1.2 线程池\"></a>1.2 <a href=\"https://wangpengcheng.github.io/2019/05/17/cplusplus_theadpool/\">线程池</a></h3><h3 id=\"1-3-协程\"><a href=\"#1-3-协程\" class=\"headerlink\" title=\"1.3 协程\"></a>1.3 协程</h3><h3 id=\"1-4-GCD、NSThread、NSOperation\"><a href=\"#1-4-GCD、NSThread、NSOperation\" class=\"headerlink\" title=\"1.4 GCD、NSThread、NSOperation\"></a>1.4 GCD、NSThread、NSOperation</h3><h4 id=\"1-4-1-GCD\"><a href=\"#1-4-1-GCD\" class=\"headerlink\" title=\"1.4.1 GCD\"></a>1.4.1 GCD</h4><p>不用管理线程的生命周期<br>充分利用系统的多核处理<br>不用管理资源回收<br>基于 Pthread 实现的</p>\n<p>实现原理：dispatchQueue –&gt; pthread_workqueue –&gt; workQueue</p>\n<h4 id=\"1-4-2-NSThread\"><a href=\"#1-4-2-NSThread\" class=\"headerlink\" title=\"1.4.2 NSThread\"></a>1.4.2 NSThread</h4><p>轻量级<br>手动管理线程启动，停止，线程同步，睡眠，唤醒，保活</p>\n<h4 id=\"1-4-3-NSOperation\"><a href=\"#1-4-3-NSOperation\" class=\"headerlink\" title=\"1.4.3 NSOperation\"></a>1.4.3 NSOperation</h4><p>基于 GCD 的面向对象的实现，可以添加线程依赖，指定最大并发任务数<br>支持设置优先级<br>支持取消操作<br>利用 kvo 监听线程状态</p>\n<h3 id=\"1-3-大量数据处理\"><a href=\"#1-3-大量数据处理\" class=\"headerlink\" title=\"1.3 大量数据处理\"></a>1.3 大量数据处理</h3><p>纯读：分页、预加载、缓存</p>\n<p>大量数据读写（互斥）：读并发，写等待</p>\n<h3 id=\"1-4-苹果文档\"><a href=\"#1-4-苹果文档\" class=\"headerlink\" title=\"1.4 苹果文档\"></a>1.4 苹果文档</h3><p><a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/\">Concurrency Programming Guide</a><br><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1\">Threading Programming Guide</a><br><a href=\"http://newosxbook.com/articles/GCD.html\">GCD Internals</a></p>\n<h2 id=\"2-性能优化\"><a href=\"#2-性能优化\" class=\"headerlink\" title=\"2. 性能优化\"></a>2. 性能优化</h2><h3 id=\"2-1-启动优化\"><a href=\"#2-1-启动优化\" class=\"headerlink\" title=\"2.1 启动优化\"></a>2.1 启动优化</h3><p>冷启动优化（dyld、Mac-O）</p>\n<p>dyld 环境变量</p>\n<p>dyld2、dyld3</p>\n<p><img src=\"/../Performance/Resources/dyld.jpg\" alt=\"iOS冷启动优化\"></p>\n<p>可执行文件格式：Mac-O</p>\n<p><img src=\"/../resources/Interview/mac-o.jpg\" alt=\"Mac-O\"></p>\n<h3 id=\"2-2-瘦身\"><a href=\"#2-2-瘦身\" class=\"headerlink\" title=\"2.2 瘦身\"></a>2.2 瘦身</h3><p>Apple Slicing</p>\n<p>资源优化：去掉没用的资源，图片资源压缩，webp</p>\n<p>代码优化：去掉没用的代码（Linked map）</p>\n<p>编译优化：Strip Link Product，符号文件，异常支持等</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207986417&idx=1&sn=77ea7d8e4f8ab7b59111e78c86ccfe66&scene=24&srcid=0921TTAXHGHWKqckEHTvGzoA#rd\">iOS微信安装包瘦身</a></li>\n<li><a href=\"https://www.infoq.cn/article/iowjwhbirqeobzf5m2o8\">今日头条 iOS 安装包大小优化—— 新阶段、新实践</a></li>\n</ul>\n<h3 id=\"2-3-电量\"><a href=\"#2-3-电量\" class=\"headerlink\" title=\"2.3 电量\"></a>2.3 电量</h3><p>电量优化涉及 CPU/GPU 任务，网络任务，硬件功能（定位），后台/前台唤醒切换消耗（任务尽量集中化）</p>\n<h3 id=\"2-4-网络\"><a href=\"#2-4-网络\" class=\"headerlink\" title=\"2.4 网络\"></a>2.4 网络</h3><p>弱网优化</p>\n<p>网络安全优化</p>\n<p>网络认证</p>\n<h3 id=\"2-5-UI\"><a href=\"#2-5-UI\" class=\"headerlink\" title=\"2.5 UI\"></a>2.5 UI</h3><p>卡顿优化，tableview优化，图片资源/渲染优化（渲染原理）</p>\n<h3 id=\"2-6-Instrument\"><a href=\"#2-6-Instrument\" class=\"headerlink\" title=\"2.6 Instrument\"></a>2.6 Instrument</h3><p>内存泄漏，僵死代码等</p>\n<h2 id=\"3-网络\"><a href=\"#3-网络\" class=\"headerlink\" title=\"3. 网络\"></a>3. 网络</h2><p>TCP、UDP</p>\n<p>IP</p>\n<p>HTTP[S]</p>\n<p>WebSocket</p>\n<p>Socket</p>\n<ul>\n<li>请求拦截、认证、链接建立</li>\n</ul>\n<h2 id=\"4-内存管理\"><a href=\"#4-内存管理\" class=\"headerlink\" title=\"4. 内存管理\"></a>4. 内存管理</h2><h3 id=\"4-1-修饰符\"><a href=\"#4-1-修饰符\" class=\"headerlink\" title=\"4.1 修饰符\"></a>4.1 修饰符</h3><h4 id=\"4-1-1-权限修饰符\"><a href=\"#4-1-1-权限修饰符\" class=\"headerlink\" title=\"4.1.1 权限修饰符\"></a>4.1.1 权限修饰符</h4><h4 id=\"4-1-2-属性修饰符\"><a href=\"#4-1-2-属性修饰符\" class=\"headerlink\" title=\"4.1.2 属性修饰符\"></a>4.1.2 属性修饰符</h4><h3 id=\"4-2-Autorelease-Pool\"><a href=\"#4-2-Autorelease-Pool\" class=\"headerlink\" title=\"4.2 Autorelease Pool\"></a>4.2 Autorelease Pool</h3><h3 id=\"4-3-OC-默认规则\"><a href=\"#4-3-OC-默认规则\" class=\"headerlink\" title=\"4.3 OC 默认规则\"></a>4.3 OC 默认规则</h3><p>生成持有规则<br>方法命名规则</p>\n<h3 id=\"4-4-循环引用\"><a href=\"#4-4-循环引用\" class=\"headerlink\" title=\"4.4 循环引用\"></a>4.4 循环引用</h3><p>Weak<br>NSTimer<br>Block</p>\n<p>JavaScriptCore：JSManagedValue</p>\n<h3 id=\"4-5-alloc-方法\"><a href=\"#4-5-alloc-方法\" class=\"headerlink\" title=\"4.5 alloc 方法\"></a>4.5 <a href=\"https://www.jianshu.com/p/e612f4fa3cd3\">alloc 方法</a></h3><h2 id=\"5-Block\"><a href=\"#5-Block\" class=\"headerlink\" title=\"5. Block\"></a>5. <a href=\"https://limeng99.club/learning/2020/05/25/iOS-Block%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html\">Block</a></h2><h3 id=\"5-1-类型\"><a href=\"#5-1-类型\" class=\"headerlink\" title=\"5.1 类型\"></a>5.1 类型</h3><h3 id=\"5-2-结构\"><a href=\"#5-2-结构\" class=\"headerlink\" title=\"5.2 结构\"></a>5.2 结构</h3><h3 id=\"5-3-block-内存管理\"><a href=\"#5-3-block-内存管理\" class=\"headerlink\" title=\"5.3 block 内存管理\"></a>5.3 block 内存管理</h3><h2 id=\"6-Runtime\"><a href=\"#6-Runtime\" class=\"headerlink\" title=\"6. Runtime\"></a>6. <a href=\"https://halfrost.com/objc_runtime_isa_class/\">Runtime</a></h2><p>Category、关联属性</p>\n<p>方法交换</p>\n<p>消息转发</p>\n<p>KVO/KVC</p>\n<p>isa</p>\n<h2 id=\"7-日志\"><a href=\"#7-日志\" class=\"headerlink\" title=\"7. 日志\"></a>7. 日志</h2><p>崩溃、用户行为</p>\n<p>实时、非实时</p>\n<p>日志格式： ASL &amp; ULS</p>\n<p>操作统计</p>\n<p>类型：info，warn，error</p>\n<p>日志系统设计</p>\n<h2 id=\"8-埋点\"><a href=\"#8-埋点\" class=\"headerlink\" title=\"8. 埋点\"></a>8. 埋点</h2><p>无侵入式</p>\n<p>可视化</p>\n<p>全埋点</p>\n<p><a href=\"https://www.jianshu.com/p/69ce01e15042\">无埋点</a></p>\n<h2 id=\"9-异常\"><a href=\"#9-异常\" class=\"headerlink\" title=\"9. 异常\"></a>9. 异常</h2><h3 id=\"9-1-跟踪\"><a href=\"#9-1-跟踪\" class=\"headerlink\" title=\"9.1 跟踪\"></a>9.1 跟踪</h3><h3 id=\"9-2-分析\"><a href=\"#9-2-分析\" class=\"headerlink\" title=\"9.2 分析\"></a>9.2 分析</h3><h3 id=\"9-3-处理\"><a href=\"#9-3-处理\" class=\"headerlink\" title=\"9.3 处理\"></a>9.3 处理</h3><ul>\n<li>线上 bug[崩溃]等</li>\n</ul>\n<h2 id=\"10-CI\"><a href=\"#10-CI\" class=\"headerlink\" title=\"10. CI\"></a>10. CI</h2><p>Shell</p>\n<p>Jenkins</p>\n<p>Fastlane</p>\n<p>XcodeServer</p>\n<ul>\n<li>Firm/蒲公英，钉钉</li>\n</ul>\n<h2 id=\"11-组件化\"><a href=\"#11-组件化\" class=\"headerlink\" title=\"11. 组件化\"></a>11. 组件化</h2><p>Pod</p>\n<p>CTMediator</p>\n<p>Behive</p>\n<ul>\n<li>功能</li>\n<li>业务</li>\n</ul>\n<h2 id=\"12-数据结构\"><a href=\"#12-数据结构\" class=\"headerlink\" title=\"12. 数据结构\"></a>12. 数据结构</h2><p>链表</p>\n<p>树</p>\n<p>堆</p>\n<p>栈</p>\n<p>图</p>\n<p>拓扑</p>\n<p>队列</p>\n<h2 id=\"13-算法\"><a href=\"#13-算法\" class=\"headerlink\" title=\"13. 算法\"></a>13. 算法</h2><p>查找</p>\n<p>排序</p>\n<p>复杂度</p>\n<p>匹配（字符串）</p>\n<p>安全（对称、非对称）</p>\n<p>摘要</p>\n<p>签名</p>\n<h2 id=\"14-OS\"><a href=\"#14-OS\" class=\"headerlink\" title=\"14. OS\"></a>14. OS</h2><p>文件（Mac-O、可执行、多媒体、plist 等）</p>\n<p>APP（结构，安装认证流程），APP 共享</p>\n<p>持久化：<br>plist、归档、keychain、数据库、文件</p>\n<h2 id=\"15-UI\"><a href=\"#15-UI\" class=\"headerlink\" title=\"15. UI\"></a>15. UI</h2><p>绘制/渲染（流程）</p>\n<p>布局</p>\n<p>动画交互</p>\n<p>事件响应者链</p>\n<p>UIView与Layer</p>\n<p>透明度：alpha，opaque 等</p>\n<h2 id=\"16-设计模式\"><a href=\"#16-设计模式\" class=\"headerlink\" title=\"16. 设计模式\"></a>16. 设计模式</h2><h2 id=\"17-架构\"><a href=\"#17-架构\" class=\"headerlink\" title=\"17. 架构\"></a>17. 架构</h2><h2 id=\"18-附加项\"><a href=\"#18-附加项\" class=\"headerlink\" title=\"18. 附加项\"></a>18. 附加项</h2><h3 id=\"18-1-大前端\"><a href=\"#18-1-大前端\" class=\"headerlink\" title=\"18.1 大前端\"></a>18.1 大前端</h3><p>原理</p>\n<p>WebKit、React-Native、Flutter、Dcloud、Capacitor</p>\n<h3 id=\"18-2-蓝牙\"><a href=\"#18-2-蓝牙\" class=\"headerlink\" title=\"18.2 蓝牙\"></a>18.2 蓝牙</h3><h3 id=\"18-3-IM\"><a href=\"#18-3-IM\" class=\"headerlink\" title=\"18.3 IM\"></a>18.3 IM</h3><h3 id=\"18-4-音视频\"><a href=\"#18-4-音视频\" class=\"headerlink\" title=\"18.4 音视频\"></a>18.4 音视频</h3><h3 id=\"18-5-Android\"><a href=\"#18-5-Android\" class=\"headerlink\" title=\"18.5 Android\"></a>18.5 Android</h3><h3 id=\"18-6-后端\"><a href=\"#18-6-后端\" class=\"headerlink\" title=\"18.6 后端\"></a>18.6 后端</h3><h3 id=\"18-7-C-C\"><a href=\"#18-7-C-C\" class=\"headerlink\" title=\"18.7 C/C++\"></a>18.7 C/C++</h3><h2 id=\"19-补充\"><a href=\"#19-补充\" class=\"headerlink\" title=\"19. 补充\"></a>19. 补充</h2><p>方法调用 与 函数调用</p>\n<p>逆向</p>\n<p>汇编</p>\n<p>编译器</p>\n<p>解释器</p>\n<p>问题方案提供角色</p>\n<h2 id=\"20-工作成就\"><a href=\"#20-工作成就\" class=\"headerlink\" title=\"20 工作成就\"></a>20 工作成就</h2><p>蓝牙？</p>\n<p>SDK？</p>\n<p>弹框？</p>\n<p>自动化？</p>\n<p>苹果登录?</p>\n<p>暗黑主题–</p>\n<p>Swift 5 升级–</p>\n<p>Dcloud–</p>\n<p>Capacitor–</p>\n<p>Flutter–</p>\n<p>universal link–</p>\n"},{"title":"iOS之面试","abbrlink":"c7bdd67","date":"2021-05-24T16:00:00.000Z","_content":"\n## 1. 并发编程\n\n### 1.1 [进程&线程](https://www.jianshu.com/p/9218692cb209)\n\n#### 1.1.1 [进程通信](https://www.jianshu.com/p/c1015f5ffa74)\n\n1. 管道/匿名管道(pipe)\n2. 有名管道(FIFO)\n3. 信号(Signal)\n4. 消息(Message)队列\n5. 共享内存(share memory)\n6. 信号量(semaphore)\n7. 套接字(socket)\n\n#### 1.1.2 线程通信\n\n##### 1.1.2.1 线程通讯方式\n\n1. 临界区\n2. 互斥量\n3. 信号量\n4. 事件\n5. 锁\n6. 信号\n7. violate全局变量-共享内存\n\n##### 1.1.2.2 [iOS 中线程同步的锁](https://juejin.cn/post/6844903716265394184)\n\n##### 1.1.2.3 [线程、队列、任务](https://zhuanlan.zhihu.com/p/68705170)\n\n### 1.1.2.4 [runloop](https://blog.ibireme.com/2015/05/18/runloop/)\n\n![RunLoop](../resources/Interview/RunLoop_1.png)\n\n### 1.2 [线程池](https://wangpengcheng.github.io/2019/05/17/cplusplus_theadpool/)\n\n### 1.3 协程\n\n### 1.4 GCD、NSThread、NSOperation\n\n#### 1.4.1 GCD\n\n不用管理线程的生命周期\n充分利用系统的多核处理\n不依赖 runloop\n基于 Pthread 实现的\n\n实现原理：dispatchQueue --> pthread_workqueue --> workQueue\n\n#### 1.4.2 NSThread\n\n轻量级\n手动管理线程启动，停止，线程同步，睡眠，唤醒，保活\n\n#### 1.4.3 NSOperation\n\n基于 GCD 的面向对象的实现，\n可以添加线程依赖，\n指定最大并发任务数\n支持设置优先级\n支持取消操作\n利用 kvo 监听线程状态\n\n### 1.3 大量数据处理\n\n纯读：分页、预加载、缓存\n\n大量数据读写（互斥）：读并发，写等待\n\n### 1.4 苹果文档\n\n[Concurrency Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/)\n[Threading Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1)\n[GCD Internals](http://newosxbook.com/articles/GCD.html)\n\n## 2. 性能优化\n\n### 2.1 启动优化\n\n冷启动优化（dyld、Mac-O）\n\ndyld 环境变量\n\ndyld2、dyld3\n\n![iOS冷启动优化](../Performance/Resources/dyld.jpg)\n\n可执行文件格式：Mac-O\n\n![Mac-O](../Resources/Interview/mac-o.jpg)\n\n### 2.2 瘦身\n\nApple Slicing\n\n资源优化：去掉没用的资源，图片资源压缩，webp\n\n代码优化：去掉没用的代码（Linked map）\n\n编译优化：Strip Link Product，符号文件，异常支持等\n\n* [iOS微信安装包瘦身](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207986417&idx=1&sn=77ea7d8e4f8ab7b59111e78c86ccfe66&scene=24&srcid=0921TTAXHGHWKqckEHTvGzoA#rd)\n* [今日头条 iOS 安装包大小优化—— 新阶段、新实践](https://www.infoq.cn/article/iowjwhbirqeobzf5m2o8)\n\n### 2.6 Instrument\n\n内存泄漏，僵死代码等\n\n## 4. 内存管理\n\n### 4.1 修饰符\n\n#### 4.1.1 权限修饰符\n\n#### 4.1.2 属性修饰符\n\n### 4.2 Autorelease Pool\n\n### 4.3 OC 默认规则\n\n生成持有规则\n方法命名规则\n\n### 4.4 循环引用\n\nWeak\nNSTimer\nBlock\n\nJavaScriptCore：JSManagedValue\n\n### 4.5 [alloc 方法](https://www.jianshu.com/p/e612f4fa3cd3)\n\n## 5. [Block](https://limeng99.club/learning/2020/05/25/iOS-Block底层实现原理.html)\n\n### 5.1 类型\n\n### 5.2 结构\n\n### 5.3 block 内存管理\n\n## 6. [Runtime](https://halfrost.com/objc_runtime_isa_class/)\n\nCategory、关联属性\n\n方法交换\n\n消息转发\n\nKVO/KVC\n\nisa\n\n## 7. 日志\n\n崩溃、用户行为\n\n实时、非实时\n\n日志格式： ASL & ULS\n\n操作统计\n\n类型：info，warn，error\n\n日志系统设计\n\n## 8. 埋点\n\n无侵入式\n\n可视化\n\n全埋点\n\n[无埋点](https://www.jianshu.com/p/69ce01e15042)\n\n## 9. 异常\n\n### 9.1 跟踪\n\n### 9.2 分析\n\n### 9.3 处理\n\n* 线上 bug[崩溃]等\n\n## 10. CI\n\nShell\n\nJenkins\n\nFastlane\n\nXcodeServer\n\n* Firm/蒲公英，钉钉\n\n## 11. 组件化\n\nPod\n\nCTMediator\n\nBehive\n\n* 功能\n* 业务\n\n## 14. OS\n\n文件（Mac-O、可执行、多媒体、plist 等）\n\nAPP（结构，安装认证流程），APP 共享\n\n持久化：\nplist、NSUserDefault、归档、keychain、数据库、文件\n\n## 15. UI\n\n绘制/渲染（流程）\n\n布局\n\n动画交互\n\n事件响应者链\n\nUIView与Layer\n\n透明度：alpha，translucent，opaque 等\n\n## 18. 附加项\n\n### 18.3 IM\n\n### 18.4 音视频\n\n### 18.5 Android\n\n### 18.6 后端\n\n### 18.7 C/C++\n\n## 19. 补充\n\n方法调用 与 函数调用\n\n逆向\n\n汇编\n\n编译器\n\n解释器\n\n问题方案提供角色\n\n## 20 工作成就\n\n蓝牙？\n\nSDK？\n\n弹框？\n\n自动化？\n\n苹果登录?\n\n暗黑主题--\n\nSwift 5 升级--\n\nDcloud--\n\nCapacitor--\n\nFlutter--\n\nuniversal link--\n","source":"_posts/iOS/Interview/Interviewes.md","raw":"---\ntitle: iOS之面试\nabbrlink: c7bdd67\ndate: 2021-05-25 00:00:00\ntags:\n---\n\n## 1. 并发编程\n\n### 1.1 [进程&线程](https://www.jianshu.com/p/9218692cb209)\n\n#### 1.1.1 [进程通信](https://www.jianshu.com/p/c1015f5ffa74)\n\n1. 管道/匿名管道(pipe)\n2. 有名管道(FIFO)\n3. 信号(Signal)\n4. 消息(Message)队列\n5. 共享内存(share memory)\n6. 信号量(semaphore)\n7. 套接字(socket)\n\n#### 1.1.2 线程通信\n\n##### 1.1.2.1 线程通讯方式\n\n1. 临界区\n2. 互斥量\n3. 信号量\n4. 事件\n5. 锁\n6. 信号\n7. violate全局变量-共享内存\n\n##### 1.1.2.2 [iOS 中线程同步的锁](https://juejin.cn/post/6844903716265394184)\n\n##### 1.1.2.3 [线程、队列、任务](https://zhuanlan.zhihu.com/p/68705170)\n\n### 1.1.2.4 [runloop](https://blog.ibireme.com/2015/05/18/runloop/)\n\n![RunLoop](../resources/Interview/RunLoop_1.png)\n\n### 1.2 [线程池](https://wangpengcheng.github.io/2019/05/17/cplusplus_theadpool/)\n\n### 1.3 协程\n\n### 1.4 GCD、NSThread、NSOperation\n\n#### 1.4.1 GCD\n\n不用管理线程的生命周期\n充分利用系统的多核处理\n不依赖 runloop\n基于 Pthread 实现的\n\n实现原理：dispatchQueue --> pthread_workqueue --> workQueue\n\n#### 1.4.2 NSThread\n\n轻量级\n手动管理线程启动，停止，线程同步，睡眠，唤醒，保活\n\n#### 1.4.3 NSOperation\n\n基于 GCD 的面向对象的实现，\n可以添加线程依赖，\n指定最大并发任务数\n支持设置优先级\n支持取消操作\n利用 kvo 监听线程状态\n\n### 1.3 大量数据处理\n\n纯读：分页、预加载、缓存\n\n大量数据读写（互斥）：读并发，写等待\n\n### 1.4 苹果文档\n\n[Concurrency Programming Guide](https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/)\n[Threading Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1)\n[GCD Internals](http://newosxbook.com/articles/GCD.html)\n\n## 2. 性能优化\n\n### 2.1 启动优化\n\n冷启动优化（dyld、Mac-O）\n\ndyld 环境变量\n\ndyld2、dyld3\n\n![iOS冷启动优化](../Performance/Resources/dyld.jpg)\n\n可执行文件格式：Mac-O\n\n![Mac-O](../Resources/Interview/mac-o.jpg)\n\n### 2.2 瘦身\n\nApple Slicing\n\n资源优化：去掉没用的资源，图片资源压缩，webp\n\n代码优化：去掉没用的代码（Linked map）\n\n编译优化：Strip Link Product，符号文件，异常支持等\n\n* [iOS微信安装包瘦身](https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207986417&idx=1&sn=77ea7d8e4f8ab7b59111e78c86ccfe66&scene=24&srcid=0921TTAXHGHWKqckEHTvGzoA#rd)\n* [今日头条 iOS 安装包大小优化—— 新阶段、新实践](https://www.infoq.cn/article/iowjwhbirqeobzf5m2o8)\n\n### 2.6 Instrument\n\n内存泄漏，僵死代码等\n\n## 4. 内存管理\n\n### 4.1 修饰符\n\n#### 4.1.1 权限修饰符\n\n#### 4.1.2 属性修饰符\n\n### 4.2 Autorelease Pool\n\n### 4.3 OC 默认规则\n\n生成持有规则\n方法命名规则\n\n### 4.4 循环引用\n\nWeak\nNSTimer\nBlock\n\nJavaScriptCore：JSManagedValue\n\n### 4.5 [alloc 方法](https://www.jianshu.com/p/e612f4fa3cd3)\n\n## 5. [Block](https://limeng99.club/learning/2020/05/25/iOS-Block底层实现原理.html)\n\n### 5.1 类型\n\n### 5.2 结构\n\n### 5.3 block 内存管理\n\n## 6. [Runtime](https://halfrost.com/objc_runtime_isa_class/)\n\nCategory、关联属性\n\n方法交换\n\n消息转发\n\nKVO/KVC\n\nisa\n\n## 7. 日志\n\n崩溃、用户行为\n\n实时、非实时\n\n日志格式： ASL & ULS\n\n操作统计\n\n类型：info，warn，error\n\n日志系统设计\n\n## 8. 埋点\n\n无侵入式\n\n可视化\n\n全埋点\n\n[无埋点](https://www.jianshu.com/p/69ce01e15042)\n\n## 9. 异常\n\n### 9.1 跟踪\n\n### 9.2 分析\n\n### 9.3 处理\n\n* 线上 bug[崩溃]等\n\n## 10. CI\n\nShell\n\nJenkins\n\nFastlane\n\nXcodeServer\n\n* Firm/蒲公英，钉钉\n\n## 11. 组件化\n\nPod\n\nCTMediator\n\nBehive\n\n* 功能\n* 业务\n\n## 14. OS\n\n文件（Mac-O、可执行、多媒体、plist 等）\n\nAPP（结构，安装认证流程），APP 共享\n\n持久化：\nplist、NSUserDefault、归档、keychain、数据库、文件\n\n## 15. UI\n\n绘制/渲染（流程）\n\n布局\n\n动画交互\n\n事件响应者链\n\nUIView与Layer\n\n透明度：alpha，translucent，opaque 等\n\n## 18. 附加项\n\n### 18.3 IM\n\n### 18.4 音视频\n\n### 18.5 Android\n\n### 18.6 后端\n\n### 18.7 C/C++\n\n## 19. 补充\n\n方法调用 与 函数调用\n\n逆向\n\n汇编\n\n编译器\n\n解释器\n\n问题方案提供角色\n\n## 20 工作成就\n\n蓝牙？\n\nSDK？\n\n弹框？\n\n自动化？\n\n苹果登录?\n\n暗黑主题--\n\nSwift 5 升级--\n\nDcloud--\n\nCapacitor--\n\nFlutter--\n\nuniversal link--\n","slug":"iOS/Interview/Interviewes","published":1,"updated":"2021-09-16T06:42:30.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1o001ciu9k2u0m88to","content":"<h2 id=\"1-并发编程\"><a href=\"#1-并发编程\" class=\"headerlink\" title=\"1. 并发编程\"></a>1. 并发编程</h2><h3 id=\"1-1-进程-amp-线程\"><a href=\"#1-1-进程-amp-线程\" class=\"headerlink\" title=\"1.1 进程&amp;线程\"></a>1.1 <a href=\"https://www.jianshu.com/p/9218692cb209\">进程&amp;线程</a></h3><h4 id=\"1-1-1-进程通信\"><a href=\"#1-1-1-进程通信\" class=\"headerlink\" title=\"1.1.1 进程通信\"></a>1.1.1 <a href=\"https://www.jianshu.com/p/c1015f5ffa74\">进程通信</a></h4><ol>\n<li>管道/匿名管道(pipe)</li>\n<li>有名管道(FIFO)</li>\n<li>信号(Signal)</li>\n<li>消息(Message)队列</li>\n<li>共享内存(share memory)</li>\n<li>信号量(semaphore)</li>\n<li>套接字(socket)</li>\n</ol>\n<h4 id=\"1-1-2-线程通信\"><a href=\"#1-1-2-线程通信\" class=\"headerlink\" title=\"1.1.2 线程通信\"></a>1.1.2 线程通信</h4><h5 id=\"1-1-2-1-线程通讯方式\"><a href=\"#1-1-2-1-线程通讯方式\" class=\"headerlink\" title=\"1.1.2.1 线程通讯方式\"></a>1.1.2.1 线程通讯方式</h5><ol>\n<li>临界区</li>\n<li>互斥量</li>\n<li>信号量</li>\n<li>事件</li>\n<li>锁</li>\n<li>信号</li>\n<li>violate全局变量-共享内存</li>\n</ol>\n<h5 id=\"1-1-2-2-iOS-中线程同步的锁\"><a href=\"#1-1-2-2-iOS-中线程同步的锁\" class=\"headerlink\" title=\"1.1.2.2 iOS 中线程同步的锁\"></a>1.1.2.2 <a href=\"https://juejin.cn/post/6844903716265394184\">iOS 中线程同步的锁</a></h5><h5 id=\"1-1-2-3-线程、队列、任务\"><a href=\"#1-1-2-3-线程、队列、任务\" class=\"headerlink\" title=\"1.1.2.3 线程、队列、任务\"></a>1.1.2.3 <a href=\"https://zhuanlan.zhihu.com/p/68705170\">线程、队列、任务</a></h5><h3 id=\"1-1-2-4-runloop\"><a href=\"#1-1-2-4-runloop\" class=\"headerlink\" title=\"1.1.2.4 runloop\"></a>1.1.2.4 <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">runloop</a></h3><p><img src=\"/../resources/Interview/RunLoop_1.png\" alt=\"RunLoop\"></p>\n<h3 id=\"1-2-线程池\"><a href=\"#1-2-线程池\" class=\"headerlink\" title=\"1.2 线程池\"></a>1.2 <a href=\"https://wangpengcheng.github.io/2019/05/17/cplusplus_theadpool/\">线程池</a></h3><h3 id=\"1-3-协程\"><a href=\"#1-3-协程\" class=\"headerlink\" title=\"1.3 协程\"></a>1.3 协程</h3><h3 id=\"1-4-GCD、NSThread、NSOperation\"><a href=\"#1-4-GCD、NSThread、NSOperation\" class=\"headerlink\" title=\"1.4 GCD、NSThread、NSOperation\"></a>1.4 GCD、NSThread、NSOperation</h3><h4 id=\"1-4-1-GCD\"><a href=\"#1-4-1-GCD\" class=\"headerlink\" title=\"1.4.1 GCD\"></a>1.4.1 GCD</h4><p>不用管理线程的生命周期<br>充分利用系统的多核处理<br>不依赖 runloop<br>基于 Pthread 实现的</p>\n<p>实现原理：dispatchQueue –&gt; pthread_workqueue –&gt; workQueue</p>\n<h4 id=\"1-4-2-NSThread\"><a href=\"#1-4-2-NSThread\" class=\"headerlink\" title=\"1.4.2 NSThread\"></a>1.4.2 NSThread</h4><p>轻量级<br>手动管理线程启动，停止，线程同步，睡眠，唤醒，保活</p>\n<h4 id=\"1-4-3-NSOperation\"><a href=\"#1-4-3-NSOperation\" class=\"headerlink\" title=\"1.4.3 NSOperation\"></a>1.4.3 NSOperation</h4><p>基于 GCD 的面向对象的实现，<br>可以添加线程依赖，<br>指定最大并发任务数<br>支持设置优先级<br>支持取消操作<br>利用 kvo 监听线程状态</p>\n<h3 id=\"1-3-大量数据处理\"><a href=\"#1-3-大量数据处理\" class=\"headerlink\" title=\"1.3 大量数据处理\"></a>1.3 大量数据处理</h3><p>纯读：分页、预加载、缓存</p>\n<p>大量数据读写（互斥）：读并发，写等待</p>\n<h3 id=\"1-4-苹果文档\"><a href=\"#1-4-苹果文档\" class=\"headerlink\" title=\"1.4 苹果文档\"></a>1.4 苹果文档</h3><p><a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/\">Concurrency Programming Guide</a><br><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1\">Threading Programming Guide</a><br><a href=\"http://newosxbook.com/articles/GCD.html\">GCD Internals</a></p>\n<h2 id=\"2-性能优化\"><a href=\"#2-性能优化\" class=\"headerlink\" title=\"2. 性能优化\"></a>2. 性能优化</h2><h3 id=\"2-1-启动优化\"><a href=\"#2-1-启动优化\" class=\"headerlink\" title=\"2.1 启动优化\"></a>2.1 启动优化</h3><p>冷启动优化（dyld、Mac-O）</p>\n<p>dyld 环境变量</p>\n<p>dyld2、dyld3</p>\n<p><img src=\"/../Performance/Resources/dyld.jpg\" alt=\"iOS冷启动优化\"></p>\n<p>可执行文件格式：Mac-O</p>\n<p><img src=\"/../Resources/Interview/mac-o.jpg\" alt=\"Mac-O\"></p>\n<h3 id=\"2-2-瘦身\"><a href=\"#2-2-瘦身\" class=\"headerlink\" title=\"2.2 瘦身\"></a>2.2 瘦身</h3><p>Apple Slicing</p>\n<p>资源优化：去掉没用的资源，图片资源压缩，webp</p>\n<p>代码优化：去掉没用的代码（Linked map）</p>\n<p>编译优化：Strip Link Product，符号文件，异常支持等</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207986417&idx=1&sn=77ea7d8e4f8ab7b59111e78c86ccfe66&scene=24&srcid=0921TTAXHGHWKqckEHTvGzoA#rd\">iOS微信安装包瘦身</a></li>\n<li><a href=\"https://www.infoq.cn/article/iowjwhbirqeobzf5m2o8\">今日头条 iOS 安装包大小优化—— 新阶段、新实践</a></li>\n</ul>\n<h3 id=\"2-6-Instrument\"><a href=\"#2-6-Instrument\" class=\"headerlink\" title=\"2.6 Instrument\"></a>2.6 Instrument</h3><p>内存泄漏，僵死代码等</p>\n<h2 id=\"4-内存管理\"><a href=\"#4-内存管理\" class=\"headerlink\" title=\"4. 内存管理\"></a>4. 内存管理</h2><h3 id=\"4-1-修饰符\"><a href=\"#4-1-修饰符\" class=\"headerlink\" title=\"4.1 修饰符\"></a>4.1 修饰符</h3><h4 id=\"4-1-1-权限修饰符\"><a href=\"#4-1-1-权限修饰符\" class=\"headerlink\" title=\"4.1.1 权限修饰符\"></a>4.1.1 权限修饰符</h4><h4 id=\"4-1-2-属性修饰符\"><a href=\"#4-1-2-属性修饰符\" class=\"headerlink\" title=\"4.1.2 属性修饰符\"></a>4.1.2 属性修饰符</h4><h3 id=\"4-2-Autorelease-Pool\"><a href=\"#4-2-Autorelease-Pool\" class=\"headerlink\" title=\"4.2 Autorelease Pool\"></a>4.2 Autorelease Pool</h3><h3 id=\"4-3-OC-默认规则\"><a href=\"#4-3-OC-默认规则\" class=\"headerlink\" title=\"4.3 OC 默认规则\"></a>4.3 OC 默认规则</h3><p>生成持有规则<br>方法命名规则</p>\n<h3 id=\"4-4-循环引用\"><a href=\"#4-4-循环引用\" class=\"headerlink\" title=\"4.4 循环引用\"></a>4.4 循环引用</h3><p>Weak<br>NSTimer<br>Block</p>\n<p>JavaScriptCore：JSManagedValue</p>\n<h3 id=\"4-5-alloc-方法\"><a href=\"#4-5-alloc-方法\" class=\"headerlink\" title=\"4.5 alloc 方法\"></a>4.5 <a href=\"https://www.jianshu.com/p/e612f4fa3cd3\">alloc 方法</a></h3><h2 id=\"5-Block\"><a href=\"#5-Block\" class=\"headerlink\" title=\"5. Block\"></a>5. <a href=\"https://limeng99.club/learning/2020/05/25/iOS-Block%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html\">Block</a></h2><h3 id=\"5-1-类型\"><a href=\"#5-1-类型\" class=\"headerlink\" title=\"5.1 类型\"></a>5.1 类型</h3><h3 id=\"5-2-结构\"><a href=\"#5-2-结构\" class=\"headerlink\" title=\"5.2 结构\"></a>5.2 结构</h3><h3 id=\"5-3-block-内存管理\"><a href=\"#5-3-block-内存管理\" class=\"headerlink\" title=\"5.3 block 内存管理\"></a>5.3 block 内存管理</h3><h2 id=\"6-Runtime\"><a href=\"#6-Runtime\" class=\"headerlink\" title=\"6. Runtime\"></a>6. <a href=\"https://halfrost.com/objc_runtime_isa_class/\">Runtime</a></h2><p>Category、关联属性</p>\n<p>方法交换</p>\n<p>消息转发</p>\n<p>KVO/KVC</p>\n<p>isa</p>\n<h2 id=\"7-日志\"><a href=\"#7-日志\" class=\"headerlink\" title=\"7. 日志\"></a>7. 日志</h2><p>崩溃、用户行为</p>\n<p>实时、非实时</p>\n<p>日志格式： ASL &amp; ULS</p>\n<p>操作统计</p>\n<p>类型：info，warn，error</p>\n<p>日志系统设计</p>\n<h2 id=\"8-埋点\"><a href=\"#8-埋点\" class=\"headerlink\" title=\"8. 埋点\"></a>8. 埋点</h2><p>无侵入式</p>\n<p>可视化</p>\n<p>全埋点</p>\n<p><a href=\"https://www.jianshu.com/p/69ce01e15042\">无埋点</a></p>\n<h2 id=\"9-异常\"><a href=\"#9-异常\" class=\"headerlink\" title=\"9. 异常\"></a>9. 异常</h2><h3 id=\"9-1-跟踪\"><a href=\"#9-1-跟踪\" class=\"headerlink\" title=\"9.1 跟踪\"></a>9.1 跟踪</h3><h3 id=\"9-2-分析\"><a href=\"#9-2-分析\" class=\"headerlink\" title=\"9.2 分析\"></a>9.2 分析</h3><h3 id=\"9-3-处理\"><a href=\"#9-3-处理\" class=\"headerlink\" title=\"9.3 处理\"></a>9.3 处理</h3><ul>\n<li>线上 bug[崩溃]等</li>\n</ul>\n<h2 id=\"10-CI\"><a href=\"#10-CI\" class=\"headerlink\" title=\"10. CI\"></a>10. CI</h2><p>Shell</p>\n<p>Jenkins</p>\n<p>Fastlane</p>\n<p>XcodeServer</p>\n<ul>\n<li>Firm/蒲公英，钉钉</li>\n</ul>\n<h2 id=\"11-组件化\"><a href=\"#11-组件化\" class=\"headerlink\" title=\"11. 组件化\"></a>11. 组件化</h2><p>Pod</p>\n<p>CTMediator</p>\n<p>Behive</p>\n<ul>\n<li>功能</li>\n<li>业务</li>\n</ul>\n<h2 id=\"14-OS\"><a href=\"#14-OS\" class=\"headerlink\" title=\"14. OS\"></a>14. OS</h2><p>文件（Mac-O、可执行、多媒体、plist 等）</p>\n<p>APP（结构，安装认证流程），APP 共享</p>\n<p>持久化：<br>plist、NSUserDefault、归档、keychain、数据库、文件</p>\n<h2 id=\"15-UI\"><a href=\"#15-UI\" class=\"headerlink\" title=\"15. UI\"></a>15. UI</h2><p>绘制/渲染（流程）</p>\n<p>布局</p>\n<p>动画交互</p>\n<p>事件响应者链</p>\n<p>UIView与Layer</p>\n<p>透明度：alpha，translucent，opaque 等</p>\n<h2 id=\"18-附加项\"><a href=\"#18-附加项\" class=\"headerlink\" title=\"18. 附加项\"></a>18. 附加项</h2><h3 id=\"18-3-IM\"><a href=\"#18-3-IM\" class=\"headerlink\" title=\"18.3 IM\"></a>18.3 IM</h3><h3 id=\"18-4-音视频\"><a href=\"#18-4-音视频\" class=\"headerlink\" title=\"18.4 音视频\"></a>18.4 音视频</h3><h3 id=\"18-5-Android\"><a href=\"#18-5-Android\" class=\"headerlink\" title=\"18.5 Android\"></a>18.5 Android</h3><h3 id=\"18-6-后端\"><a href=\"#18-6-后端\" class=\"headerlink\" title=\"18.6 后端\"></a>18.6 后端</h3><h3 id=\"18-7-C-C\"><a href=\"#18-7-C-C\" class=\"headerlink\" title=\"18.7 C/C++\"></a>18.7 C/C++</h3><h2 id=\"19-补充\"><a href=\"#19-补充\" class=\"headerlink\" title=\"19. 补充\"></a>19. 补充</h2><p>方法调用 与 函数调用</p>\n<p>逆向</p>\n<p>汇编</p>\n<p>编译器</p>\n<p>解释器</p>\n<p>问题方案提供角色</p>\n<h2 id=\"20-工作成就\"><a href=\"#20-工作成就\" class=\"headerlink\" title=\"20 工作成就\"></a>20 工作成就</h2><p>蓝牙？</p>\n<p>SDK？</p>\n<p>弹框？</p>\n<p>自动化？</p>\n<p>苹果登录?</p>\n<p>暗黑主题–</p>\n<p>Swift 5 升级–</p>\n<p>Dcloud–</p>\n<p>Capacitor–</p>\n<p>Flutter–</p>\n<p>universal link–</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-并发编程\"><a href=\"#1-并发编程\" class=\"headerlink\" title=\"1. 并发编程\"></a>1. 并发编程</h2><h3 id=\"1-1-进程-amp-线程\"><a href=\"#1-1-进程-amp-线程\" class=\"headerlink\" title=\"1.1 进程&amp;线程\"></a>1.1 <a href=\"https://www.jianshu.com/p/9218692cb209\">进程&amp;线程</a></h3><h4 id=\"1-1-1-进程通信\"><a href=\"#1-1-1-进程通信\" class=\"headerlink\" title=\"1.1.1 进程通信\"></a>1.1.1 <a href=\"https://www.jianshu.com/p/c1015f5ffa74\">进程通信</a></h4><ol>\n<li>管道/匿名管道(pipe)</li>\n<li>有名管道(FIFO)</li>\n<li>信号(Signal)</li>\n<li>消息(Message)队列</li>\n<li>共享内存(share memory)</li>\n<li>信号量(semaphore)</li>\n<li>套接字(socket)</li>\n</ol>\n<h4 id=\"1-1-2-线程通信\"><a href=\"#1-1-2-线程通信\" class=\"headerlink\" title=\"1.1.2 线程通信\"></a>1.1.2 线程通信</h4><h5 id=\"1-1-2-1-线程通讯方式\"><a href=\"#1-1-2-1-线程通讯方式\" class=\"headerlink\" title=\"1.1.2.1 线程通讯方式\"></a>1.1.2.1 线程通讯方式</h5><ol>\n<li>临界区</li>\n<li>互斥量</li>\n<li>信号量</li>\n<li>事件</li>\n<li>锁</li>\n<li>信号</li>\n<li>violate全局变量-共享内存</li>\n</ol>\n<h5 id=\"1-1-2-2-iOS-中线程同步的锁\"><a href=\"#1-1-2-2-iOS-中线程同步的锁\" class=\"headerlink\" title=\"1.1.2.2 iOS 中线程同步的锁\"></a>1.1.2.2 <a href=\"https://juejin.cn/post/6844903716265394184\">iOS 中线程同步的锁</a></h5><h5 id=\"1-1-2-3-线程、队列、任务\"><a href=\"#1-1-2-3-线程、队列、任务\" class=\"headerlink\" title=\"1.1.2.3 线程、队列、任务\"></a>1.1.2.3 <a href=\"https://zhuanlan.zhihu.com/p/68705170\">线程、队列、任务</a></h5><h3 id=\"1-1-2-4-runloop\"><a href=\"#1-1-2-4-runloop\" class=\"headerlink\" title=\"1.1.2.4 runloop\"></a>1.1.2.4 <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">runloop</a></h3><p><img src=\"/../resources/Interview/RunLoop_1.png\" alt=\"RunLoop\"></p>\n<h3 id=\"1-2-线程池\"><a href=\"#1-2-线程池\" class=\"headerlink\" title=\"1.2 线程池\"></a>1.2 <a href=\"https://wangpengcheng.github.io/2019/05/17/cplusplus_theadpool/\">线程池</a></h3><h3 id=\"1-3-协程\"><a href=\"#1-3-协程\" class=\"headerlink\" title=\"1.3 协程\"></a>1.3 协程</h3><h3 id=\"1-4-GCD、NSThread、NSOperation\"><a href=\"#1-4-GCD、NSThread、NSOperation\" class=\"headerlink\" title=\"1.4 GCD、NSThread、NSOperation\"></a>1.4 GCD、NSThread、NSOperation</h3><h4 id=\"1-4-1-GCD\"><a href=\"#1-4-1-GCD\" class=\"headerlink\" title=\"1.4.1 GCD\"></a>1.4.1 GCD</h4><p>不用管理线程的生命周期<br>充分利用系统的多核处理<br>不依赖 runloop<br>基于 Pthread 实现的</p>\n<p>实现原理：dispatchQueue –&gt; pthread_workqueue –&gt; workQueue</p>\n<h4 id=\"1-4-2-NSThread\"><a href=\"#1-4-2-NSThread\" class=\"headerlink\" title=\"1.4.2 NSThread\"></a>1.4.2 NSThread</h4><p>轻量级<br>手动管理线程启动，停止，线程同步，睡眠，唤醒，保活</p>\n<h4 id=\"1-4-3-NSOperation\"><a href=\"#1-4-3-NSOperation\" class=\"headerlink\" title=\"1.4.3 NSOperation\"></a>1.4.3 NSOperation</h4><p>基于 GCD 的面向对象的实现，<br>可以添加线程依赖，<br>指定最大并发任务数<br>支持设置优先级<br>支持取消操作<br>利用 kvo 监听线程状态</p>\n<h3 id=\"1-3-大量数据处理\"><a href=\"#1-3-大量数据处理\" class=\"headerlink\" title=\"1.3 大量数据处理\"></a>1.3 大量数据处理</h3><p>纯读：分页、预加载、缓存</p>\n<p>大量数据读写（互斥）：读并发，写等待</p>\n<h3 id=\"1-4-苹果文档\"><a href=\"#1-4-苹果文档\" class=\"headerlink\" title=\"1.4 苹果文档\"></a>1.4 苹果文档</h3><p><a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/\">Concurrency Programming Guide</a><br><a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1\">Threading Programming Guide</a><br><a href=\"http://newosxbook.com/articles/GCD.html\">GCD Internals</a></p>\n<h2 id=\"2-性能优化\"><a href=\"#2-性能优化\" class=\"headerlink\" title=\"2. 性能优化\"></a>2. 性能优化</h2><h3 id=\"2-1-启动优化\"><a href=\"#2-1-启动优化\" class=\"headerlink\" title=\"2.1 启动优化\"></a>2.1 启动优化</h3><p>冷启动优化（dyld、Mac-O）</p>\n<p>dyld 环境变量</p>\n<p>dyld2、dyld3</p>\n<p><img src=\"/../Performance/Resources/dyld.jpg\" alt=\"iOS冷启动优化\"></p>\n<p>可执行文件格式：Mac-O</p>\n<p><img src=\"/../Resources/Interview/mac-o.jpg\" alt=\"Mac-O\"></p>\n<h3 id=\"2-2-瘦身\"><a href=\"#2-2-瘦身\" class=\"headerlink\" title=\"2.2 瘦身\"></a>2.2 瘦身</h3><p>Apple Slicing</p>\n<p>资源优化：去掉没用的资源，图片资源压缩，webp</p>\n<p>代码优化：去掉没用的代码（Linked map）</p>\n<p>编译优化：Strip Link Product，符号文件，异常支持等</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&mid=207986417&idx=1&sn=77ea7d8e4f8ab7b59111e78c86ccfe66&scene=24&srcid=0921TTAXHGHWKqckEHTvGzoA#rd\">iOS微信安装包瘦身</a></li>\n<li><a href=\"https://www.infoq.cn/article/iowjwhbirqeobzf5m2o8\">今日头条 iOS 安装包大小优化—— 新阶段、新实践</a></li>\n</ul>\n<h3 id=\"2-6-Instrument\"><a href=\"#2-6-Instrument\" class=\"headerlink\" title=\"2.6 Instrument\"></a>2.6 Instrument</h3><p>内存泄漏，僵死代码等</p>\n<h2 id=\"4-内存管理\"><a href=\"#4-内存管理\" class=\"headerlink\" title=\"4. 内存管理\"></a>4. 内存管理</h2><h3 id=\"4-1-修饰符\"><a href=\"#4-1-修饰符\" class=\"headerlink\" title=\"4.1 修饰符\"></a>4.1 修饰符</h3><h4 id=\"4-1-1-权限修饰符\"><a href=\"#4-1-1-权限修饰符\" class=\"headerlink\" title=\"4.1.1 权限修饰符\"></a>4.1.1 权限修饰符</h4><h4 id=\"4-1-2-属性修饰符\"><a href=\"#4-1-2-属性修饰符\" class=\"headerlink\" title=\"4.1.2 属性修饰符\"></a>4.1.2 属性修饰符</h4><h3 id=\"4-2-Autorelease-Pool\"><a href=\"#4-2-Autorelease-Pool\" class=\"headerlink\" title=\"4.2 Autorelease Pool\"></a>4.2 Autorelease Pool</h3><h3 id=\"4-3-OC-默认规则\"><a href=\"#4-3-OC-默认规则\" class=\"headerlink\" title=\"4.3 OC 默认规则\"></a>4.3 OC 默认规则</h3><p>生成持有规则<br>方法命名规则</p>\n<h3 id=\"4-4-循环引用\"><a href=\"#4-4-循环引用\" class=\"headerlink\" title=\"4.4 循环引用\"></a>4.4 循环引用</h3><p>Weak<br>NSTimer<br>Block</p>\n<p>JavaScriptCore：JSManagedValue</p>\n<h3 id=\"4-5-alloc-方法\"><a href=\"#4-5-alloc-方法\" class=\"headerlink\" title=\"4.5 alloc 方法\"></a>4.5 <a href=\"https://www.jianshu.com/p/e612f4fa3cd3\">alloc 方法</a></h3><h2 id=\"5-Block\"><a href=\"#5-Block\" class=\"headerlink\" title=\"5. Block\"></a>5. <a href=\"https://limeng99.club/learning/2020/05/25/iOS-Block%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html\">Block</a></h2><h3 id=\"5-1-类型\"><a href=\"#5-1-类型\" class=\"headerlink\" title=\"5.1 类型\"></a>5.1 类型</h3><h3 id=\"5-2-结构\"><a href=\"#5-2-结构\" class=\"headerlink\" title=\"5.2 结构\"></a>5.2 结构</h3><h3 id=\"5-3-block-内存管理\"><a href=\"#5-3-block-内存管理\" class=\"headerlink\" title=\"5.3 block 内存管理\"></a>5.3 block 内存管理</h3><h2 id=\"6-Runtime\"><a href=\"#6-Runtime\" class=\"headerlink\" title=\"6. Runtime\"></a>6. <a href=\"https://halfrost.com/objc_runtime_isa_class/\">Runtime</a></h2><p>Category、关联属性</p>\n<p>方法交换</p>\n<p>消息转发</p>\n<p>KVO/KVC</p>\n<p>isa</p>\n<h2 id=\"7-日志\"><a href=\"#7-日志\" class=\"headerlink\" title=\"7. 日志\"></a>7. 日志</h2><p>崩溃、用户行为</p>\n<p>实时、非实时</p>\n<p>日志格式： ASL &amp; ULS</p>\n<p>操作统计</p>\n<p>类型：info，warn，error</p>\n<p>日志系统设计</p>\n<h2 id=\"8-埋点\"><a href=\"#8-埋点\" class=\"headerlink\" title=\"8. 埋点\"></a>8. 埋点</h2><p>无侵入式</p>\n<p>可视化</p>\n<p>全埋点</p>\n<p><a href=\"https://www.jianshu.com/p/69ce01e15042\">无埋点</a></p>\n<h2 id=\"9-异常\"><a href=\"#9-异常\" class=\"headerlink\" title=\"9. 异常\"></a>9. 异常</h2><h3 id=\"9-1-跟踪\"><a href=\"#9-1-跟踪\" class=\"headerlink\" title=\"9.1 跟踪\"></a>9.1 跟踪</h3><h3 id=\"9-2-分析\"><a href=\"#9-2-分析\" class=\"headerlink\" title=\"9.2 分析\"></a>9.2 分析</h3><h3 id=\"9-3-处理\"><a href=\"#9-3-处理\" class=\"headerlink\" title=\"9.3 处理\"></a>9.3 处理</h3><ul>\n<li>线上 bug[崩溃]等</li>\n</ul>\n<h2 id=\"10-CI\"><a href=\"#10-CI\" class=\"headerlink\" title=\"10. CI\"></a>10. CI</h2><p>Shell</p>\n<p>Jenkins</p>\n<p>Fastlane</p>\n<p>XcodeServer</p>\n<ul>\n<li>Firm/蒲公英，钉钉</li>\n</ul>\n<h2 id=\"11-组件化\"><a href=\"#11-组件化\" class=\"headerlink\" title=\"11. 组件化\"></a>11. 组件化</h2><p>Pod</p>\n<p>CTMediator</p>\n<p>Behive</p>\n<ul>\n<li>功能</li>\n<li>业务</li>\n</ul>\n<h2 id=\"14-OS\"><a href=\"#14-OS\" class=\"headerlink\" title=\"14. OS\"></a>14. OS</h2><p>文件（Mac-O、可执行、多媒体、plist 等）</p>\n<p>APP（结构，安装认证流程），APP 共享</p>\n<p>持久化：<br>plist、NSUserDefault、归档、keychain、数据库、文件</p>\n<h2 id=\"15-UI\"><a href=\"#15-UI\" class=\"headerlink\" title=\"15. UI\"></a>15. UI</h2><p>绘制/渲染（流程）</p>\n<p>布局</p>\n<p>动画交互</p>\n<p>事件响应者链</p>\n<p>UIView与Layer</p>\n<p>透明度：alpha，translucent，opaque 等</p>\n<h2 id=\"18-附加项\"><a href=\"#18-附加项\" class=\"headerlink\" title=\"18. 附加项\"></a>18. 附加项</h2><h3 id=\"18-3-IM\"><a href=\"#18-3-IM\" class=\"headerlink\" title=\"18.3 IM\"></a>18.3 IM</h3><h3 id=\"18-4-音视频\"><a href=\"#18-4-音视频\" class=\"headerlink\" title=\"18.4 音视频\"></a>18.4 音视频</h3><h3 id=\"18-5-Android\"><a href=\"#18-5-Android\" class=\"headerlink\" title=\"18.5 Android\"></a>18.5 Android</h3><h3 id=\"18-6-后端\"><a href=\"#18-6-后端\" class=\"headerlink\" title=\"18.6 后端\"></a>18.6 后端</h3><h3 id=\"18-7-C-C\"><a href=\"#18-7-C-C\" class=\"headerlink\" title=\"18.7 C/C++\"></a>18.7 C/C++</h3><h2 id=\"19-补充\"><a href=\"#19-补充\" class=\"headerlink\" title=\"19. 补充\"></a>19. 补充</h2><p>方法调用 与 函数调用</p>\n<p>逆向</p>\n<p>汇编</p>\n<p>编译器</p>\n<p>解释器</p>\n<p>问题方案提供角色</p>\n<h2 id=\"20-工作成就\"><a href=\"#20-工作成就\" class=\"headerlink\" title=\"20 工作成就\"></a>20 工作成就</h2><p>蓝牙？</p>\n<p>SDK？</p>\n<p>弹框？</p>\n<p>自动化？</p>\n<p>苹果登录?</p>\n<p>暗黑主题–</p>\n<p>Swift 5 升级–</p>\n<p>Dcloud–</p>\n<p>Capacitor–</p>\n<p>Flutter–</p>\n<p>universal link–</p>\n"},{"title":"走向资深 iOS 之路","abbrlink":"8d5bf204","date":"2021-05-24T16:00:00.000Z","_content":"\n[TOC]\n\n能力培养\n\n> 1. **独立思考 + 系统化思维 + 前瞻性思维 [+ 人力资源管理]**\n> 2. **形成一套 基础 + 流程 + 机制 + 原理 + 方案 + 作品的路径**\n> 3. **多元化**\n\n## 1. 语言\n\n### 1.1 Objective-C\n\n#### 1.1.1 [内存管理](./../Languages/Objective-C/MemoryManagement.md)\n\n内存管理原则\n\n内存管理方式\n\n循环引用&内存泄漏&Weak 原理\n\n野指针、悬垂指针（腾讯方案）\n\n僵尸代码\n循环引用&内存泄漏&weak 实现\n\n[weak 实现原理](https://www.jianshu.com/p/13c4fb1cedea)\n\n权限修饰符： copy，assign，strong 等\n\n对象初始化过程、对象 isa 如何获取\n\n#### 1.1.2 Block\n\n全局\n\n堆\n\n栈\n\n内存\n\n实现原理\n\n#### 1.1.3 并发编程\n\n##### 1.1.3.1 并发方式\n\n##### 1.1.3.1.1 NSThread\n\n##### 1.1.3.1.2 GCD（实现原理）\n\n##### 1.1.3.1.3 NSOperation\n\n##### 1.1.3.1.4 Pthread\n\n##### 1.1.3.2 进程通信机制\n\n##### 1.1.3.3 线程通信机制\n\n##### 1.1.3.4 锁\n\n##### 1.1.3.5 Runloop\n\n#### 1.1.4 KVC\n\n#### 1.1.5 KVO\n\n#### 1.1.6 Runtime\n\n实现原理&使用场景\n\n方法转发流程\n\nNSObjectProxy\n\n#### 1.1.7 Category\n\n#### 1.1.8 Extension\n\n#### 1.1.9 Protocols\n\n#### 1.1.10 通知\n\n### 1.2 Swift\n\n## 2. 计算机\n\n### 2.1 操作系统\n\n死锁及其解决方式\n\n进线程通信\n\nCPU 调度\n\n内存管理方式：虚拟内存、分段、分页\n\n中断\n\n用户态&内核态\n\n文件系统\n\n* [操作系统面试考点](https://blog.csdn.net/leechow007/article/details/76284274)\n\n### 2.2 计算机网络\n\nHTTP[s] && 2.0\n\nTLS\n\nTCP\n\nUDP\n\nIP\n\nWebSocket  && Socket\n\nAFNetworking、Alamofire、Moya\n\n弱网优化\n\n网络认证\n\n缓存\n\ncookie [WKWebview]\n\n网络安全优化\n\nNSURLProtocolProxy\n\n### 2.3 数据结构\n\n哈希表\n\n链表\n\n树\n\n堆\n\n栈\n\n图\n\n拓扑\n\n队列\n\n### 2.4 算法\n\n排序算法\n\n查找算法\n\n复杂度\n\n匹配（字符串）\n\n安全（对称、非对称）\n\n摘要\n\n签名\n\n哈希 与 Dictionary 的实现\n\n### 2.4 数据库\n\n### 2.6 安全\n\n逆向，反逆向\n\n代码混淆\n\n网络安全\n\n## 3. iOS移动端\n\n### 3.1 UIKit\n\n#### 3.1.1 事件响应者链\n\n实现\n\n运用\n\n#### 3.1.2 约束、布局、渲染\n\n#### 3.1.2.1 约束\n\ncassowary 算法\n\n#### 3.1.2.2 布局\n\n布局引擎\n\n#### 3.1.2.3 渲染\n\n渲染引擎\n\n渲染原理\n\n离屏渲染\n\n图片渲染优化\n\n### 3.2 CALayer && UIView\n\n### 3.3 动画\n\n[深入浅出贝塞尔曲线](https://juejin.cn/post/6995482699037147166?utm_source=gold_browser_extension)\n\nLottie\n\n动画类型：帧动画，组动画，补间动画等\n\n### 3.4 字体\n\n### 3.5 图片\n\nCoreImage、Graphic、Material\n\n### 3.6 视频\n\n## 4. 大前端\n\n### 4.1 WKWebView\n\n### 4.2 WebviewJavascriptBridge\n\n### 4.3 React-Native\n\n### 4.4 Flutter\n\n语言 + 路由管理 + 状态管理 + 导航[混合]\n\n## 5. 软件工程\n\n### 5.1 设计\n\n#### 5.1.1 设计原则\n\n#### 5.1.2 设计模式\n\n#### 5.1.3 方案设计\n\n形成一套 基础 + 流程 + 机制 + 原理 + 方案 + 作品的路径。\n\n### 5.2 框架\n\n#### 5.2.1 iOS 官方 Framework\n\n约束、布局、动画\n\n#### 5.2.2 经典第三方库\n\n### 5.3 架构\n\n架构种类\n\n#### 5.3.1 架构模式\n\nMVC、MVP、MVVM\n\nRxSwift: MVVM、Reactor、RxFeedback(状态流转-Redux，单项数据流)\n\n#### 5.3.2 架构设计\n\nMVVM(函数响应式编程，事件驱动架构) + 微架构(插件架构) + 微服务(远程调用)\n\n组件化方案： URL/Protocol && Runtime/Category\n\n### 5.4 性能优化\n\n#### 5.4.1 卡顿优化\n\nTableView、离屏渲染、卡死、图片资源/渲染优化\n\n##### 5.4.2 启动优化\n\n##### 5.4.3 网络优化\n\n请求拦截、认证、链接建立\n\n##### 5.4.4 电量优化\n\n电量优化涉及 CPU/GPU 任务，网络任务，硬件功能（定位），后台/前台唤醒切换消耗（任务尽量集中化）\n\n##### 5.4.5 包大小优化\n\n### 5.5 函数-响应式编程\n\n### 5.6 单元测试\n\nUnit Test\n\nUIUnit Test\n\nAppiume\n\n### 5.7 工具\n\nXCode、Git、Pod、Jenkins、Fastlane、Charles、VSCode\n\nLLDB\n\n## 6. 工程化\n\n### 6.1 组件化\n\n#### 6.1 组件\n\n#### 6.2 Pod\n\n* 动静态库\n* 库合并\n\n#### 6.3 组件化\n\n蘑菇街\n\nCTMediator\n\nBehive\n\n### 6.2 Fastlane\n\n### 6.3 Jenkins\n\nRuby\n\n### 6.4 CI\n\nGit、Pod、Shell、Jenkins、蒲公英/Fir.im、钉钉\n\n### 6.5 XcodeServer\n\n## 7. 杂项\n\n### 7.1 日志\n\n### 7.2 埋点\n\n### 7.3 常见源码库（设计方案参考）\n\n### 7.4 蓝牙\n\n### 7.5 Apple Developer\n\nIPA 签名机制\n\n上线流程\n\n### 7.6 相关工具\n\n#### 7.6.1 Docker\n\n## 8. 附加\n\n### 8.1 后端\n\n#### 8.1.1 PHP\n\n#### 8.1.2 Java\n\n#### 8.1.3 CPP\n\n#### 8.1.4 Go\n\n## 9. iOS 常用资源\n\n### 9.1 网站\n\n### 9.2 博主\n\n### 9.3 优质资源\n","source":"_posts/iOS/Interview/Summery.md","raw":"---\ntitle: 走向资深 iOS 之路\nabbrlink: 8d5bf204\ndate: 2021-05-25 00:00:00\ntags:\n---\n\n[TOC]\n\n能力培养\n\n> 1. **独立思考 + 系统化思维 + 前瞻性思维 [+ 人力资源管理]**\n> 2. **形成一套 基础 + 流程 + 机制 + 原理 + 方案 + 作品的路径**\n> 3. **多元化**\n\n## 1. 语言\n\n### 1.1 Objective-C\n\n#### 1.1.1 [内存管理](./../Languages/Objective-C/MemoryManagement.md)\n\n内存管理原则\n\n内存管理方式\n\n循环引用&内存泄漏&Weak 原理\n\n野指针、悬垂指针（腾讯方案）\n\n僵尸代码\n循环引用&内存泄漏&weak 实现\n\n[weak 实现原理](https://www.jianshu.com/p/13c4fb1cedea)\n\n权限修饰符： copy，assign，strong 等\n\n对象初始化过程、对象 isa 如何获取\n\n#### 1.1.2 Block\n\n全局\n\n堆\n\n栈\n\n内存\n\n实现原理\n\n#### 1.1.3 并发编程\n\n##### 1.1.3.1 并发方式\n\n##### 1.1.3.1.1 NSThread\n\n##### 1.1.3.1.2 GCD（实现原理）\n\n##### 1.1.3.1.3 NSOperation\n\n##### 1.1.3.1.4 Pthread\n\n##### 1.1.3.2 进程通信机制\n\n##### 1.1.3.3 线程通信机制\n\n##### 1.1.3.4 锁\n\n##### 1.1.3.5 Runloop\n\n#### 1.1.4 KVC\n\n#### 1.1.5 KVO\n\n#### 1.1.6 Runtime\n\n实现原理&使用场景\n\n方法转发流程\n\nNSObjectProxy\n\n#### 1.1.7 Category\n\n#### 1.1.8 Extension\n\n#### 1.1.9 Protocols\n\n#### 1.1.10 通知\n\n### 1.2 Swift\n\n## 2. 计算机\n\n### 2.1 操作系统\n\n死锁及其解决方式\n\n进线程通信\n\nCPU 调度\n\n内存管理方式：虚拟内存、分段、分页\n\n中断\n\n用户态&内核态\n\n文件系统\n\n* [操作系统面试考点](https://blog.csdn.net/leechow007/article/details/76284274)\n\n### 2.2 计算机网络\n\nHTTP[s] && 2.0\n\nTLS\n\nTCP\n\nUDP\n\nIP\n\nWebSocket  && Socket\n\nAFNetworking、Alamofire、Moya\n\n弱网优化\n\n网络认证\n\n缓存\n\ncookie [WKWebview]\n\n网络安全优化\n\nNSURLProtocolProxy\n\n### 2.3 数据结构\n\n哈希表\n\n链表\n\n树\n\n堆\n\n栈\n\n图\n\n拓扑\n\n队列\n\n### 2.4 算法\n\n排序算法\n\n查找算法\n\n复杂度\n\n匹配（字符串）\n\n安全（对称、非对称）\n\n摘要\n\n签名\n\n哈希 与 Dictionary 的实现\n\n### 2.4 数据库\n\n### 2.6 安全\n\n逆向，反逆向\n\n代码混淆\n\n网络安全\n\n## 3. iOS移动端\n\n### 3.1 UIKit\n\n#### 3.1.1 事件响应者链\n\n实现\n\n运用\n\n#### 3.1.2 约束、布局、渲染\n\n#### 3.1.2.1 约束\n\ncassowary 算法\n\n#### 3.1.2.2 布局\n\n布局引擎\n\n#### 3.1.2.3 渲染\n\n渲染引擎\n\n渲染原理\n\n离屏渲染\n\n图片渲染优化\n\n### 3.2 CALayer && UIView\n\n### 3.3 动画\n\n[深入浅出贝塞尔曲线](https://juejin.cn/post/6995482699037147166?utm_source=gold_browser_extension)\n\nLottie\n\n动画类型：帧动画，组动画，补间动画等\n\n### 3.4 字体\n\n### 3.5 图片\n\nCoreImage、Graphic、Material\n\n### 3.6 视频\n\n## 4. 大前端\n\n### 4.1 WKWebView\n\n### 4.2 WebviewJavascriptBridge\n\n### 4.3 React-Native\n\n### 4.4 Flutter\n\n语言 + 路由管理 + 状态管理 + 导航[混合]\n\n## 5. 软件工程\n\n### 5.1 设计\n\n#### 5.1.1 设计原则\n\n#### 5.1.2 设计模式\n\n#### 5.1.3 方案设计\n\n形成一套 基础 + 流程 + 机制 + 原理 + 方案 + 作品的路径。\n\n### 5.2 框架\n\n#### 5.2.1 iOS 官方 Framework\n\n约束、布局、动画\n\n#### 5.2.2 经典第三方库\n\n### 5.3 架构\n\n架构种类\n\n#### 5.3.1 架构模式\n\nMVC、MVP、MVVM\n\nRxSwift: MVVM、Reactor、RxFeedback(状态流转-Redux，单项数据流)\n\n#### 5.3.2 架构设计\n\nMVVM(函数响应式编程，事件驱动架构) + 微架构(插件架构) + 微服务(远程调用)\n\n组件化方案： URL/Protocol && Runtime/Category\n\n### 5.4 性能优化\n\n#### 5.4.1 卡顿优化\n\nTableView、离屏渲染、卡死、图片资源/渲染优化\n\n##### 5.4.2 启动优化\n\n##### 5.4.3 网络优化\n\n请求拦截、认证、链接建立\n\n##### 5.4.4 电量优化\n\n电量优化涉及 CPU/GPU 任务，网络任务，硬件功能（定位），后台/前台唤醒切换消耗（任务尽量集中化）\n\n##### 5.4.5 包大小优化\n\n### 5.5 函数-响应式编程\n\n### 5.6 单元测试\n\nUnit Test\n\nUIUnit Test\n\nAppiume\n\n### 5.7 工具\n\nXCode、Git、Pod、Jenkins、Fastlane、Charles、VSCode\n\nLLDB\n\n## 6. 工程化\n\n### 6.1 组件化\n\n#### 6.1 组件\n\n#### 6.2 Pod\n\n* 动静态库\n* 库合并\n\n#### 6.3 组件化\n\n蘑菇街\n\nCTMediator\n\nBehive\n\n### 6.2 Fastlane\n\n### 6.3 Jenkins\n\nRuby\n\n### 6.4 CI\n\nGit、Pod、Shell、Jenkins、蒲公英/Fir.im、钉钉\n\n### 6.5 XcodeServer\n\n## 7. 杂项\n\n### 7.1 日志\n\n### 7.2 埋点\n\n### 7.3 常见源码库（设计方案参考）\n\n### 7.4 蓝牙\n\n### 7.5 Apple Developer\n\nIPA 签名机制\n\n上线流程\n\n### 7.6 相关工具\n\n#### 7.6.1 Docker\n\n## 8. 附加\n\n### 8.1 后端\n\n#### 8.1.1 PHP\n\n#### 8.1.2 Java\n\n#### 8.1.3 CPP\n\n#### 8.1.4 Go\n\n## 9. iOS 常用资源\n\n### 9.1 网站\n\n### 9.2 博主\n\n### 9.3 优质资源\n","slug":"iOS/Interview/Summery","published":1,"updated":"2021-09-22T06:56:40.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1p001diu9k69ru7o4m","content":"<p>[TOC]</p>\n<p>能力培养</p>\n<blockquote>\n<ol>\n<li><strong>独立思考 + 系统化思维 + 前瞻性思维 [+ 人力资源管理]</strong></li>\n<li><strong>形成一套 基础 + 流程 + 机制 + 原理 + 方案 + 作品的路径</strong></li>\n<li><strong>多元化</strong></li>\n</ol>\n</blockquote>\n<h2 id=\"1-语言\"><a href=\"#1-语言\" class=\"headerlink\" title=\"1. 语言\"></a>1. 语言</h2><h3 id=\"1-1-Objective-C\"><a href=\"#1-1-Objective-C\" class=\"headerlink\" title=\"1.1 Objective-C\"></a>1.1 Objective-C</h3><h4 id=\"1-1-1-内存管理\"><a href=\"#1-1-1-内存管理\" class=\"headerlink\" title=\"1.1.1 内存管理\"></a>1.1.1 <a href=\"./../Languages/Objective-C/MemoryManagement.md\">内存管理</a></h4><p>内存管理原则</p>\n<p>内存管理方式</p>\n<p>循环引用&amp;内存泄漏&amp;Weak 原理</p>\n<p>野指针、悬垂指针（腾讯方案）</p>\n<p>僵尸代码<br>循环引用&amp;内存泄漏&amp;weak 实现</p>\n<p><a href=\"https://www.jianshu.com/p/13c4fb1cedea\">weak 实现原理</a></p>\n<p>权限修饰符： copy，assign，strong 等</p>\n<p>对象初始化过程、对象 isa 如何获取</p>\n<h4 id=\"1-1-2-Block\"><a href=\"#1-1-2-Block\" class=\"headerlink\" title=\"1.1.2 Block\"></a>1.1.2 Block</h4><p>全局</p>\n<p>堆</p>\n<p>栈</p>\n<p>内存</p>\n<p>实现原理</p>\n<h4 id=\"1-1-3-并发编程\"><a href=\"#1-1-3-并发编程\" class=\"headerlink\" title=\"1.1.3 并发编程\"></a>1.1.3 并发编程</h4><h5 id=\"1-1-3-1-并发方式\"><a href=\"#1-1-3-1-并发方式\" class=\"headerlink\" title=\"1.1.3.1 并发方式\"></a>1.1.3.1 并发方式</h5><h5 id=\"1-1-3-1-1-NSThread\"><a href=\"#1-1-3-1-1-NSThread\" class=\"headerlink\" title=\"1.1.3.1.1 NSThread\"></a>1.1.3.1.1 NSThread</h5><h5 id=\"1-1-3-1-2-GCD（实现原理）\"><a href=\"#1-1-3-1-2-GCD（实现原理）\" class=\"headerlink\" title=\"1.1.3.1.2 GCD（实现原理）\"></a>1.1.3.1.2 GCD（实现原理）</h5><h5 id=\"1-1-3-1-3-NSOperation\"><a href=\"#1-1-3-1-3-NSOperation\" class=\"headerlink\" title=\"1.1.3.1.3 NSOperation\"></a>1.1.3.1.3 NSOperation</h5><h5 id=\"1-1-3-1-4-Pthread\"><a href=\"#1-1-3-1-4-Pthread\" class=\"headerlink\" title=\"1.1.3.1.4 Pthread\"></a>1.1.3.1.4 Pthread</h5><h5 id=\"1-1-3-2-进程通信机制\"><a href=\"#1-1-3-2-进程通信机制\" class=\"headerlink\" title=\"1.1.3.2 进程通信机制\"></a>1.1.3.2 进程通信机制</h5><h5 id=\"1-1-3-3-线程通信机制\"><a href=\"#1-1-3-3-线程通信机制\" class=\"headerlink\" title=\"1.1.3.3 线程通信机制\"></a>1.1.3.3 线程通信机制</h5><h5 id=\"1-1-3-4-锁\"><a href=\"#1-1-3-4-锁\" class=\"headerlink\" title=\"1.1.3.4 锁\"></a>1.1.3.4 锁</h5><h5 id=\"1-1-3-5-Runloop\"><a href=\"#1-1-3-5-Runloop\" class=\"headerlink\" title=\"1.1.3.5 Runloop\"></a>1.1.3.5 Runloop</h5><h4 id=\"1-1-4-KVC\"><a href=\"#1-1-4-KVC\" class=\"headerlink\" title=\"1.1.4 KVC\"></a>1.1.4 KVC</h4><h4 id=\"1-1-5-KVO\"><a href=\"#1-1-5-KVO\" class=\"headerlink\" title=\"1.1.5 KVO\"></a>1.1.5 KVO</h4><h4 id=\"1-1-6-Runtime\"><a href=\"#1-1-6-Runtime\" class=\"headerlink\" title=\"1.1.6 Runtime\"></a>1.1.6 Runtime</h4><p>实现原理&amp;使用场景</p>\n<p>方法转发流程</p>\n<p>NSObjectProxy</p>\n<h4 id=\"1-1-7-Category\"><a href=\"#1-1-7-Category\" class=\"headerlink\" title=\"1.1.7 Category\"></a>1.1.7 Category</h4><h4 id=\"1-1-8-Extension\"><a href=\"#1-1-8-Extension\" class=\"headerlink\" title=\"1.1.8 Extension\"></a>1.1.8 Extension</h4><h4 id=\"1-1-9-Protocols\"><a href=\"#1-1-9-Protocols\" class=\"headerlink\" title=\"1.1.9 Protocols\"></a>1.1.9 Protocols</h4><h4 id=\"1-1-10-通知\"><a href=\"#1-1-10-通知\" class=\"headerlink\" title=\"1.1.10 通知\"></a>1.1.10 通知</h4><h3 id=\"1-2-Swift\"><a href=\"#1-2-Swift\" class=\"headerlink\" title=\"1.2 Swift\"></a>1.2 Swift</h3><h2 id=\"2-计算机\"><a href=\"#2-计算机\" class=\"headerlink\" title=\"2. 计算机\"></a>2. 计算机</h2><h3 id=\"2-1-操作系统\"><a href=\"#2-1-操作系统\" class=\"headerlink\" title=\"2.1 操作系统\"></a>2.1 操作系统</h3><p>死锁及其解决方式</p>\n<p>进线程通信</p>\n<p>CPU 调度</p>\n<p>内存管理方式：虚拟内存、分段、分页</p>\n<p>中断</p>\n<p>用户态&amp;内核态</p>\n<p>文件系统</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/leechow007/article/details/76284274\">操作系统面试考点</a></li>\n</ul>\n<h3 id=\"2-2-计算机网络\"><a href=\"#2-2-计算机网络\" class=\"headerlink\" title=\"2.2 计算机网络\"></a>2.2 计算机网络</h3><p>HTTP[s] &amp;&amp; 2.0</p>\n<p>TLS</p>\n<p>TCP</p>\n<p>UDP</p>\n<p>IP</p>\n<p>WebSocket  &amp;&amp; Socket</p>\n<p>AFNetworking、Alamofire、Moya</p>\n<p>弱网优化</p>\n<p>网络认证</p>\n<p>缓存</p>\n<p>cookie [WKWebview]</p>\n<p>网络安全优化</p>\n<p>NSURLProtocolProxy</p>\n<h3 id=\"2-3-数据结构\"><a href=\"#2-3-数据结构\" class=\"headerlink\" title=\"2.3 数据结构\"></a>2.3 数据结构</h3><p>哈希表</p>\n<p>链表</p>\n<p>树</p>\n<p>堆</p>\n<p>栈</p>\n<p>图</p>\n<p>拓扑</p>\n<p>队列</p>\n<h3 id=\"2-4-算法\"><a href=\"#2-4-算法\" class=\"headerlink\" title=\"2.4 算法\"></a>2.4 算法</h3><p>排序算法</p>\n<p>查找算法</p>\n<p>复杂度</p>\n<p>匹配（字符串）</p>\n<p>安全（对称、非对称）</p>\n<p>摘要</p>\n<p>签名</p>\n<p>哈希 与 Dictionary 的实现</p>\n<h3 id=\"2-4-数据库\"><a href=\"#2-4-数据库\" class=\"headerlink\" title=\"2.4 数据库\"></a>2.4 数据库</h3><h3 id=\"2-6-安全\"><a href=\"#2-6-安全\" class=\"headerlink\" title=\"2.6 安全\"></a>2.6 安全</h3><p>逆向，反逆向</p>\n<p>代码混淆</p>\n<p>网络安全</p>\n<h2 id=\"3-iOS移动端\"><a href=\"#3-iOS移动端\" class=\"headerlink\" title=\"3. iOS移动端\"></a>3. iOS移动端</h2><h3 id=\"3-1-UIKit\"><a href=\"#3-1-UIKit\" class=\"headerlink\" title=\"3.1 UIKit\"></a>3.1 UIKit</h3><h4 id=\"3-1-1-事件响应者链\"><a href=\"#3-1-1-事件响应者链\" class=\"headerlink\" title=\"3.1.1 事件响应者链\"></a>3.1.1 事件响应者链</h4><p>实现</p>\n<p>运用</p>\n<h4 id=\"3-1-2-约束、布局、渲染\"><a href=\"#3-1-2-约束、布局、渲染\" class=\"headerlink\" title=\"3.1.2 约束、布局、渲染\"></a>3.1.2 约束、布局、渲染</h4><h4 id=\"3-1-2-1-约束\"><a href=\"#3-1-2-1-约束\" class=\"headerlink\" title=\"3.1.2.1 约束\"></a>3.1.2.1 约束</h4><p>cassowary 算法</p>\n<h4 id=\"3-1-2-2-布局\"><a href=\"#3-1-2-2-布局\" class=\"headerlink\" title=\"3.1.2.2 布局\"></a>3.1.2.2 布局</h4><p>布局引擎</p>\n<h4 id=\"3-1-2-3-渲染\"><a href=\"#3-1-2-3-渲染\" class=\"headerlink\" title=\"3.1.2.3 渲染\"></a>3.1.2.3 渲染</h4><p>渲染引擎</p>\n<p>渲染原理</p>\n<p>离屏渲染</p>\n<p>图片渲染优化</p>\n<h3 id=\"3-2-CALayer-amp-amp-UIView\"><a href=\"#3-2-CALayer-amp-amp-UIView\" class=\"headerlink\" title=\"3.2 CALayer &amp;&amp; UIView\"></a>3.2 CALayer &amp;&amp; UIView</h3><h3 id=\"3-3-动画\"><a href=\"#3-3-动画\" class=\"headerlink\" title=\"3.3 动画\"></a>3.3 动画</h3><p><a href=\"https://juejin.cn/post/6995482699037147166?utm_source=gold_browser_extension\">深入浅出贝塞尔曲线</a></p>\n<p>Lottie</p>\n<p>动画类型：帧动画，组动画，补间动画等</p>\n<h3 id=\"3-4-字体\"><a href=\"#3-4-字体\" class=\"headerlink\" title=\"3.4 字体\"></a>3.4 字体</h3><h3 id=\"3-5-图片\"><a href=\"#3-5-图片\" class=\"headerlink\" title=\"3.5 图片\"></a>3.5 图片</h3><p>CoreImage、Graphic、Material</p>\n<h3 id=\"3-6-视频\"><a href=\"#3-6-视频\" class=\"headerlink\" title=\"3.6 视频\"></a>3.6 视频</h3><h2 id=\"4-大前端\"><a href=\"#4-大前端\" class=\"headerlink\" title=\"4. 大前端\"></a>4. 大前端</h2><h3 id=\"4-1-WKWebView\"><a href=\"#4-1-WKWebView\" class=\"headerlink\" title=\"4.1 WKWebView\"></a>4.1 WKWebView</h3><h3 id=\"4-2-WebviewJavascriptBridge\"><a href=\"#4-2-WebviewJavascriptBridge\" class=\"headerlink\" title=\"4.2 WebviewJavascriptBridge\"></a>4.2 WebviewJavascriptBridge</h3><h3 id=\"4-3-React-Native\"><a href=\"#4-3-React-Native\" class=\"headerlink\" title=\"4.3 React-Native\"></a>4.3 React-Native</h3><h3 id=\"4-4-Flutter\"><a href=\"#4-4-Flutter\" class=\"headerlink\" title=\"4.4 Flutter\"></a>4.4 Flutter</h3><p>语言 + 路由管理 + 状态管理 + 导航[混合]</p>\n<h2 id=\"5-软件工程\"><a href=\"#5-软件工程\" class=\"headerlink\" title=\"5. 软件工程\"></a>5. 软件工程</h2><h3 id=\"5-1-设计\"><a href=\"#5-1-设计\" class=\"headerlink\" title=\"5.1 设计\"></a>5.1 设计</h3><h4 id=\"5-1-1-设计原则\"><a href=\"#5-1-1-设计原则\" class=\"headerlink\" title=\"5.1.1 设计原则\"></a>5.1.1 设计原则</h4><h4 id=\"5-1-2-设计模式\"><a href=\"#5-1-2-设计模式\" class=\"headerlink\" title=\"5.1.2 设计模式\"></a>5.1.2 设计模式</h4><h4 id=\"5-1-3-方案设计\"><a href=\"#5-1-3-方案设计\" class=\"headerlink\" title=\"5.1.3 方案设计\"></a>5.1.3 方案设计</h4><p>形成一套 基础 + 流程 + 机制 + 原理 + 方案 + 作品的路径。</p>\n<h3 id=\"5-2-框架\"><a href=\"#5-2-框架\" class=\"headerlink\" title=\"5.2 框架\"></a>5.2 框架</h3><h4 id=\"5-2-1-iOS-官方-Framework\"><a href=\"#5-2-1-iOS-官方-Framework\" class=\"headerlink\" title=\"5.2.1 iOS 官方 Framework\"></a>5.2.1 iOS 官方 Framework</h4><p>约束、布局、动画</p>\n<h4 id=\"5-2-2-经典第三方库\"><a href=\"#5-2-2-经典第三方库\" class=\"headerlink\" title=\"5.2.2 经典第三方库\"></a>5.2.2 经典第三方库</h4><h3 id=\"5-3-架构\"><a href=\"#5-3-架构\" class=\"headerlink\" title=\"5.3 架构\"></a>5.3 架构</h3><p>架构种类</p>\n<h4 id=\"5-3-1-架构模式\"><a href=\"#5-3-1-架构模式\" class=\"headerlink\" title=\"5.3.1 架构模式\"></a>5.3.1 架构模式</h4><p>MVC、MVP、MVVM</p>\n<p>RxSwift: MVVM、Reactor、RxFeedback(状态流转-Redux，单项数据流)</p>\n<h4 id=\"5-3-2-架构设计\"><a href=\"#5-3-2-架构设计\" class=\"headerlink\" title=\"5.3.2 架构设计\"></a>5.3.2 架构设计</h4><p>MVVM(函数响应式编程，事件驱动架构) + 微架构(插件架构) + 微服务(远程调用)</p>\n<p>组件化方案： URL/Protocol &amp;&amp; Runtime/Category</p>\n<h3 id=\"5-4-性能优化\"><a href=\"#5-4-性能优化\" class=\"headerlink\" title=\"5.4 性能优化\"></a>5.4 性能优化</h3><h4 id=\"5-4-1-卡顿优化\"><a href=\"#5-4-1-卡顿优化\" class=\"headerlink\" title=\"5.4.1 卡顿优化\"></a>5.4.1 卡顿优化</h4><p>TableView、离屏渲染、卡死、图片资源/渲染优化</p>\n<h5 id=\"5-4-2-启动优化\"><a href=\"#5-4-2-启动优化\" class=\"headerlink\" title=\"5.4.2 启动优化\"></a>5.4.2 启动优化</h5><h5 id=\"5-4-3-网络优化\"><a href=\"#5-4-3-网络优化\" class=\"headerlink\" title=\"5.4.3 网络优化\"></a>5.4.3 网络优化</h5><p>请求拦截、认证、链接建立</p>\n<h5 id=\"5-4-4-电量优化\"><a href=\"#5-4-4-电量优化\" class=\"headerlink\" title=\"5.4.4 电量优化\"></a>5.4.4 电量优化</h5><p>电量优化涉及 CPU/GPU 任务，网络任务，硬件功能（定位），后台/前台唤醒切换消耗（任务尽量集中化）</p>\n<h5 id=\"5-4-5-包大小优化\"><a href=\"#5-4-5-包大小优化\" class=\"headerlink\" title=\"5.4.5 包大小优化\"></a>5.4.5 包大小优化</h5><h3 id=\"5-5-函数-响应式编程\"><a href=\"#5-5-函数-响应式编程\" class=\"headerlink\" title=\"5.5 函数-响应式编程\"></a>5.5 函数-响应式编程</h3><h3 id=\"5-6-单元测试\"><a href=\"#5-6-单元测试\" class=\"headerlink\" title=\"5.6 单元测试\"></a>5.6 单元测试</h3><p>Unit Test</p>\n<p>UIUnit Test</p>\n<p>Appiume</p>\n<h3 id=\"5-7-工具\"><a href=\"#5-7-工具\" class=\"headerlink\" title=\"5.7 工具\"></a>5.7 工具</h3><p>XCode、Git、Pod、Jenkins、Fastlane、Charles、VSCode</p>\n<p>LLDB</p>\n<h2 id=\"6-工程化\"><a href=\"#6-工程化\" class=\"headerlink\" title=\"6. 工程化\"></a>6. 工程化</h2><h3 id=\"6-1-组件化\"><a href=\"#6-1-组件化\" class=\"headerlink\" title=\"6.1 组件化\"></a>6.1 组件化</h3><h4 id=\"6-1-组件\"><a href=\"#6-1-组件\" class=\"headerlink\" title=\"6.1 组件\"></a>6.1 组件</h4><h4 id=\"6-2-Pod\"><a href=\"#6-2-Pod\" class=\"headerlink\" title=\"6.2 Pod\"></a>6.2 Pod</h4><ul>\n<li>动静态库</li>\n<li>库合并</li>\n</ul>\n<h4 id=\"6-3-组件化\"><a href=\"#6-3-组件化\" class=\"headerlink\" title=\"6.3 组件化\"></a>6.3 组件化</h4><p>蘑菇街</p>\n<p>CTMediator</p>\n<p>Behive</p>\n<h3 id=\"6-2-Fastlane\"><a href=\"#6-2-Fastlane\" class=\"headerlink\" title=\"6.2 Fastlane\"></a>6.2 Fastlane</h3><h3 id=\"6-3-Jenkins\"><a href=\"#6-3-Jenkins\" class=\"headerlink\" title=\"6.3 Jenkins\"></a>6.3 Jenkins</h3><p>Ruby</p>\n<h3 id=\"6-4-CI\"><a href=\"#6-4-CI\" class=\"headerlink\" title=\"6.4 CI\"></a>6.4 CI</h3><p>Git、Pod、Shell、Jenkins、蒲公英/Fir.im、钉钉</p>\n<h3 id=\"6-5-XcodeServer\"><a href=\"#6-5-XcodeServer\" class=\"headerlink\" title=\"6.5 XcodeServer\"></a>6.5 XcodeServer</h3><h2 id=\"7-杂项\"><a href=\"#7-杂项\" class=\"headerlink\" title=\"7. 杂项\"></a>7. 杂项</h2><h3 id=\"7-1-日志\"><a href=\"#7-1-日志\" class=\"headerlink\" title=\"7.1 日志\"></a>7.1 日志</h3><h3 id=\"7-2-埋点\"><a href=\"#7-2-埋点\" class=\"headerlink\" title=\"7.2 埋点\"></a>7.2 埋点</h3><h3 id=\"7-3-常见源码库（设计方案参考）\"><a href=\"#7-3-常见源码库（设计方案参考）\" class=\"headerlink\" title=\"7.3 常见源码库（设计方案参考）\"></a>7.3 常见源码库（设计方案参考）</h3><h3 id=\"7-4-蓝牙\"><a href=\"#7-4-蓝牙\" class=\"headerlink\" title=\"7.4 蓝牙\"></a>7.4 蓝牙</h3><h3 id=\"7-5-Apple-Developer\"><a href=\"#7-5-Apple-Developer\" class=\"headerlink\" title=\"7.5 Apple Developer\"></a>7.5 Apple Developer</h3><p>IPA 签名机制</p>\n<p>上线流程</p>\n<h3 id=\"7-6-相关工具\"><a href=\"#7-6-相关工具\" class=\"headerlink\" title=\"7.6 相关工具\"></a>7.6 相关工具</h3><h4 id=\"7-6-1-Docker\"><a href=\"#7-6-1-Docker\" class=\"headerlink\" title=\"7.6.1 Docker\"></a>7.6.1 Docker</h4><h2 id=\"8-附加\"><a href=\"#8-附加\" class=\"headerlink\" title=\"8. 附加\"></a>8. 附加</h2><h3 id=\"8-1-后端\"><a href=\"#8-1-后端\" class=\"headerlink\" title=\"8.1 后端\"></a>8.1 后端</h3><h4 id=\"8-1-1-PHP\"><a href=\"#8-1-1-PHP\" class=\"headerlink\" title=\"8.1.1 PHP\"></a>8.1.1 PHP</h4><h4 id=\"8-1-2-Java\"><a href=\"#8-1-2-Java\" class=\"headerlink\" title=\"8.1.2 Java\"></a>8.1.2 Java</h4><h4 id=\"8-1-3-CPP\"><a href=\"#8-1-3-CPP\" class=\"headerlink\" title=\"8.1.3 CPP\"></a>8.1.3 CPP</h4><h4 id=\"8-1-4-Go\"><a href=\"#8-1-4-Go\" class=\"headerlink\" title=\"8.1.4 Go\"></a>8.1.4 Go</h4><h2 id=\"9-iOS-常用资源\"><a href=\"#9-iOS-常用资源\" class=\"headerlink\" title=\"9. iOS 常用资源\"></a>9. iOS 常用资源</h2><h3 id=\"9-1-网站\"><a href=\"#9-1-网站\" class=\"headerlink\" title=\"9.1 网站\"></a>9.1 网站</h3><h3 id=\"9-2-博主\"><a href=\"#9-2-博主\" class=\"headerlink\" title=\"9.2 博主\"></a>9.2 博主</h3><h3 id=\"9-3-优质资源\"><a href=\"#9-3-优质资源\" class=\"headerlink\" title=\"9.3 优质资源\"></a>9.3 优质资源</h3>","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<p>能力培养</p>\n<blockquote>\n<ol>\n<li><strong>独立思考 + 系统化思维 + 前瞻性思维 [+ 人力资源管理]</strong></li>\n<li><strong>形成一套 基础 + 流程 + 机制 + 原理 + 方案 + 作品的路径</strong></li>\n<li><strong>多元化</strong></li>\n</ol>\n</blockquote>\n<h2 id=\"1-语言\"><a href=\"#1-语言\" class=\"headerlink\" title=\"1. 语言\"></a>1. 语言</h2><h3 id=\"1-1-Objective-C\"><a href=\"#1-1-Objective-C\" class=\"headerlink\" title=\"1.1 Objective-C\"></a>1.1 Objective-C</h3><h4 id=\"1-1-1-内存管理\"><a href=\"#1-1-1-内存管理\" class=\"headerlink\" title=\"1.1.1 内存管理\"></a>1.1.1 <a href=\"./../Languages/Objective-C/MemoryManagement.md\">内存管理</a></h4><p>内存管理原则</p>\n<p>内存管理方式</p>\n<p>循环引用&amp;内存泄漏&amp;Weak 原理</p>\n<p>野指针、悬垂指针（腾讯方案）</p>\n<p>僵尸代码<br>循环引用&amp;内存泄漏&amp;weak 实现</p>\n<p><a href=\"https://www.jianshu.com/p/13c4fb1cedea\">weak 实现原理</a></p>\n<p>权限修饰符： copy，assign，strong 等</p>\n<p>对象初始化过程、对象 isa 如何获取</p>\n<h4 id=\"1-1-2-Block\"><a href=\"#1-1-2-Block\" class=\"headerlink\" title=\"1.1.2 Block\"></a>1.1.2 Block</h4><p>全局</p>\n<p>堆</p>\n<p>栈</p>\n<p>内存</p>\n<p>实现原理</p>\n<h4 id=\"1-1-3-并发编程\"><a href=\"#1-1-3-并发编程\" class=\"headerlink\" title=\"1.1.3 并发编程\"></a>1.1.3 并发编程</h4><h5 id=\"1-1-3-1-并发方式\"><a href=\"#1-1-3-1-并发方式\" class=\"headerlink\" title=\"1.1.3.1 并发方式\"></a>1.1.3.1 并发方式</h5><h5 id=\"1-1-3-1-1-NSThread\"><a href=\"#1-1-3-1-1-NSThread\" class=\"headerlink\" title=\"1.1.3.1.1 NSThread\"></a>1.1.3.1.1 NSThread</h5><h5 id=\"1-1-3-1-2-GCD（实现原理）\"><a href=\"#1-1-3-1-2-GCD（实现原理）\" class=\"headerlink\" title=\"1.1.3.1.2 GCD（实现原理）\"></a>1.1.3.1.2 GCD（实现原理）</h5><h5 id=\"1-1-3-1-3-NSOperation\"><a href=\"#1-1-3-1-3-NSOperation\" class=\"headerlink\" title=\"1.1.3.1.3 NSOperation\"></a>1.1.3.1.3 NSOperation</h5><h5 id=\"1-1-3-1-4-Pthread\"><a href=\"#1-1-3-1-4-Pthread\" class=\"headerlink\" title=\"1.1.3.1.4 Pthread\"></a>1.1.3.1.4 Pthread</h5><h5 id=\"1-1-3-2-进程通信机制\"><a href=\"#1-1-3-2-进程通信机制\" class=\"headerlink\" title=\"1.1.3.2 进程通信机制\"></a>1.1.3.2 进程通信机制</h5><h5 id=\"1-1-3-3-线程通信机制\"><a href=\"#1-1-3-3-线程通信机制\" class=\"headerlink\" title=\"1.1.3.3 线程通信机制\"></a>1.1.3.3 线程通信机制</h5><h5 id=\"1-1-3-4-锁\"><a href=\"#1-1-3-4-锁\" class=\"headerlink\" title=\"1.1.3.4 锁\"></a>1.1.3.4 锁</h5><h5 id=\"1-1-3-5-Runloop\"><a href=\"#1-1-3-5-Runloop\" class=\"headerlink\" title=\"1.1.3.5 Runloop\"></a>1.1.3.5 Runloop</h5><h4 id=\"1-1-4-KVC\"><a href=\"#1-1-4-KVC\" class=\"headerlink\" title=\"1.1.4 KVC\"></a>1.1.4 KVC</h4><h4 id=\"1-1-5-KVO\"><a href=\"#1-1-5-KVO\" class=\"headerlink\" title=\"1.1.5 KVO\"></a>1.1.5 KVO</h4><h4 id=\"1-1-6-Runtime\"><a href=\"#1-1-6-Runtime\" class=\"headerlink\" title=\"1.1.6 Runtime\"></a>1.1.6 Runtime</h4><p>实现原理&amp;使用场景</p>\n<p>方法转发流程</p>\n<p>NSObjectProxy</p>\n<h4 id=\"1-1-7-Category\"><a href=\"#1-1-7-Category\" class=\"headerlink\" title=\"1.1.7 Category\"></a>1.1.7 Category</h4><h4 id=\"1-1-8-Extension\"><a href=\"#1-1-8-Extension\" class=\"headerlink\" title=\"1.1.8 Extension\"></a>1.1.8 Extension</h4><h4 id=\"1-1-9-Protocols\"><a href=\"#1-1-9-Protocols\" class=\"headerlink\" title=\"1.1.9 Protocols\"></a>1.1.9 Protocols</h4><h4 id=\"1-1-10-通知\"><a href=\"#1-1-10-通知\" class=\"headerlink\" title=\"1.1.10 通知\"></a>1.1.10 通知</h4><h3 id=\"1-2-Swift\"><a href=\"#1-2-Swift\" class=\"headerlink\" title=\"1.2 Swift\"></a>1.2 Swift</h3><h2 id=\"2-计算机\"><a href=\"#2-计算机\" class=\"headerlink\" title=\"2. 计算机\"></a>2. 计算机</h2><h3 id=\"2-1-操作系统\"><a href=\"#2-1-操作系统\" class=\"headerlink\" title=\"2.1 操作系统\"></a>2.1 操作系统</h3><p>死锁及其解决方式</p>\n<p>进线程通信</p>\n<p>CPU 调度</p>\n<p>内存管理方式：虚拟内存、分段、分页</p>\n<p>中断</p>\n<p>用户态&amp;内核态</p>\n<p>文件系统</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/leechow007/article/details/76284274\">操作系统面试考点</a></li>\n</ul>\n<h3 id=\"2-2-计算机网络\"><a href=\"#2-2-计算机网络\" class=\"headerlink\" title=\"2.2 计算机网络\"></a>2.2 计算机网络</h3><p>HTTP[s] &amp;&amp; 2.0</p>\n<p>TLS</p>\n<p>TCP</p>\n<p>UDP</p>\n<p>IP</p>\n<p>WebSocket  &amp;&amp; Socket</p>\n<p>AFNetworking、Alamofire、Moya</p>\n<p>弱网优化</p>\n<p>网络认证</p>\n<p>缓存</p>\n<p>cookie [WKWebview]</p>\n<p>网络安全优化</p>\n<p>NSURLProtocolProxy</p>\n<h3 id=\"2-3-数据结构\"><a href=\"#2-3-数据结构\" class=\"headerlink\" title=\"2.3 数据结构\"></a>2.3 数据结构</h3><p>哈希表</p>\n<p>链表</p>\n<p>树</p>\n<p>堆</p>\n<p>栈</p>\n<p>图</p>\n<p>拓扑</p>\n<p>队列</p>\n<h3 id=\"2-4-算法\"><a href=\"#2-4-算法\" class=\"headerlink\" title=\"2.4 算法\"></a>2.4 算法</h3><p>排序算法</p>\n<p>查找算法</p>\n<p>复杂度</p>\n<p>匹配（字符串）</p>\n<p>安全（对称、非对称）</p>\n<p>摘要</p>\n<p>签名</p>\n<p>哈希 与 Dictionary 的实现</p>\n<h3 id=\"2-4-数据库\"><a href=\"#2-4-数据库\" class=\"headerlink\" title=\"2.4 数据库\"></a>2.4 数据库</h3><h3 id=\"2-6-安全\"><a href=\"#2-6-安全\" class=\"headerlink\" title=\"2.6 安全\"></a>2.6 安全</h3><p>逆向，反逆向</p>\n<p>代码混淆</p>\n<p>网络安全</p>\n<h2 id=\"3-iOS移动端\"><a href=\"#3-iOS移动端\" class=\"headerlink\" title=\"3. iOS移动端\"></a>3. iOS移动端</h2><h3 id=\"3-1-UIKit\"><a href=\"#3-1-UIKit\" class=\"headerlink\" title=\"3.1 UIKit\"></a>3.1 UIKit</h3><h4 id=\"3-1-1-事件响应者链\"><a href=\"#3-1-1-事件响应者链\" class=\"headerlink\" title=\"3.1.1 事件响应者链\"></a>3.1.1 事件响应者链</h4><p>实现</p>\n<p>运用</p>\n<h4 id=\"3-1-2-约束、布局、渲染\"><a href=\"#3-1-2-约束、布局、渲染\" class=\"headerlink\" title=\"3.1.2 约束、布局、渲染\"></a>3.1.2 约束、布局、渲染</h4><h4 id=\"3-1-2-1-约束\"><a href=\"#3-1-2-1-约束\" class=\"headerlink\" title=\"3.1.2.1 约束\"></a>3.1.2.1 约束</h4><p>cassowary 算法</p>\n<h4 id=\"3-1-2-2-布局\"><a href=\"#3-1-2-2-布局\" class=\"headerlink\" title=\"3.1.2.2 布局\"></a>3.1.2.2 布局</h4><p>布局引擎</p>\n<h4 id=\"3-1-2-3-渲染\"><a href=\"#3-1-2-3-渲染\" class=\"headerlink\" title=\"3.1.2.3 渲染\"></a>3.1.2.3 渲染</h4><p>渲染引擎</p>\n<p>渲染原理</p>\n<p>离屏渲染</p>\n<p>图片渲染优化</p>\n<h3 id=\"3-2-CALayer-amp-amp-UIView\"><a href=\"#3-2-CALayer-amp-amp-UIView\" class=\"headerlink\" title=\"3.2 CALayer &amp;&amp; UIView\"></a>3.2 CALayer &amp;&amp; UIView</h3><h3 id=\"3-3-动画\"><a href=\"#3-3-动画\" class=\"headerlink\" title=\"3.3 动画\"></a>3.3 动画</h3><p><a href=\"https://juejin.cn/post/6995482699037147166?utm_source=gold_browser_extension\">深入浅出贝塞尔曲线</a></p>\n<p>Lottie</p>\n<p>动画类型：帧动画，组动画，补间动画等</p>\n<h3 id=\"3-4-字体\"><a href=\"#3-4-字体\" class=\"headerlink\" title=\"3.4 字体\"></a>3.4 字体</h3><h3 id=\"3-5-图片\"><a href=\"#3-5-图片\" class=\"headerlink\" title=\"3.5 图片\"></a>3.5 图片</h3><p>CoreImage、Graphic、Material</p>\n<h3 id=\"3-6-视频\"><a href=\"#3-6-视频\" class=\"headerlink\" title=\"3.6 视频\"></a>3.6 视频</h3><h2 id=\"4-大前端\"><a href=\"#4-大前端\" class=\"headerlink\" title=\"4. 大前端\"></a>4. 大前端</h2><h3 id=\"4-1-WKWebView\"><a href=\"#4-1-WKWebView\" class=\"headerlink\" title=\"4.1 WKWebView\"></a>4.1 WKWebView</h3><h3 id=\"4-2-WebviewJavascriptBridge\"><a href=\"#4-2-WebviewJavascriptBridge\" class=\"headerlink\" title=\"4.2 WebviewJavascriptBridge\"></a>4.2 WebviewJavascriptBridge</h3><h3 id=\"4-3-React-Native\"><a href=\"#4-3-React-Native\" class=\"headerlink\" title=\"4.3 React-Native\"></a>4.3 React-Native</h3><h3 id=\"4-4-Flutter\"><a href=\"#4-4-Flutter\" class=\"headerlink\" title=\"4.4 Flutter\"></a>4.4 Flutter</h3><p>语言 + 路由管理 + 状态管理 + 导航[混合]</p>\n<h2 id=\"5-软件工程\"><a href=\"#5-软件工程\" class=\"headerlink\" title=\"5. 软件工程\"></a>5. 软件工程</h2><h3 id=\"5-1-设计\"><a href=\"#5-1-设计\" class=\"headerlink\" title=\"5.1 设计\"></a>5.1 设计</h3><h4 id=\"5-1-1-设计原则\"><a href=\"#5-1-1-设计原则\" class=\"headerlink\" title=\"5.1.1 设计原则\"></a>5.1.1 设计原则</h4><h4 id=\"5-1-2-设计模式\"><a href=\"#5-1-2-设计模式\" class=\"headerlink\" title=\"5.1.2 设计模式\"></a>5.1.2 设计模式</h4><h4 id=\"5-1-3-方案设计\"><a href=\"#5-1-3-方案设计\" class=\"headerlink\" title=\"5.1.3 方案设计\"></a>5.1.3 方案设计</h4><p>形成一套 基础 + 流程 + 机制 + 原理 + 方案 + 作品的路径。</p>\n<h3 id=\"5-2-框架\"><a href=\"#5-2-框架\" class=\"headerlink\" title=\"5.2 框架\"></a>5.2 框架</h3><h4 id=\"5-2-1-iOS-官方-Framework\"><a href=\"#5-2-1-iOS-官方-Framework\" class=\"headerlink\" title=\"5.2.1 iOS 官方 Framework\"></a>5.2.1 iOS 官方 Framework</h4><p>约束、布局、动画</p>\n<h4 id=\"5-2-2-经典第三方库\"><a href=\"#5-2-2-经典第三方库\" class=\"headerlink\" title=\"5.2.2 经典第三方库\"></a>5.2.2 经典第三方库</h4><h3 id=\"5-3-架构\"><a href=\"#5-3-架构\" class=\"headerlink\" title=\"5.3 架构\"></a>5.3 架构</h3><p>架构种类</p>\n<h4 id=\"5-3-1-架构模式\"><a href=\"#5-3-1-架构模式\" class=\"headerlink\" title=\"5.3.1 架构模式\"></a>5.3.1 架构模式</h4><p>MVC、MVP、MVVM</p>\n<p>RxSwift: MVVM、Reactor、RxFeedback(状态流转-Redux，单项数据流)</p>\n<h4 id=\"5-3-2-架构设计\"><a href=\"#5-3-2-架构设计\" class=\"headerlink\" title=\"5.3.2 架构设计\"></a>5.3.2 架构设计</h4><p>MVVM(函数响应式编程，事件驱动架构) + 微架构(插件架构) + 微服务(远程调用)</p>\n<p>组件化方案： URL/Protocol &amp;&amp; Runtime/Category</p>\n<h3 id=\"5-4-性能优化\"><a href=\"#5-4-性能优化\" class=\"headerlink\" title=\"5.4 性能优化\"></a>5.4 性能优化</h3><h4 id=\"5-4-1-卡顿优化\"><a href=\"#5-4-1-卡顿优化\" class=\"headerlink\" title=\"5.4.1 卡顿优化\"></a>5.4.1 卡顿优化</h4><p>TableView、离屏渲染、卡死、图片资源/渲染优化</p>\n<h5 id=\"5-4-2-启动优化\"><a href=\"#5-4-2-启动优化\" class=\"headerlink\" title=\"5.4.2 启动优化\"></a>5.4.2 启动优化</h5><h5 id=\"5-4-3-网络优化\"><a href=\"#5-4-3-网络优化\" class=\"headerlink\" title=\"5.4.3 网络优化\"></a>5.4.3 网络优化</h5><p>请求拦截、认证、链接建立</p>\n<h5 id=\"5-4-4-电量优化\"><a href=\"#5-4-4-电量优化\" class=\"headerlink\" title=\"5.4.4 电量优化\"></a>5.4.4 电量优化</h5><p>电量优化涉及 CPU/GPU 任务，网络任务，硬件功能（定位），后台/前台唤醒切换消耗（任务尽量集中化）</p>\n<h5 id=\"5-4-5-包大小优化\"><a href=\"#5-4-5-包大小优化\" class=\"headerlink\" title=\"5.4.5 包大小优化\"></a>5.4.5 包大小优化</h5><h3 id=\"5-5-函数-响应式编程\"><a href=\"#5-5-函数-响应式编程\" class=\"headerlink\" title=\"5.5 函数-响应式编程\"></a>5.5 函数-响应式编程</h3><h3 id=\"5-6-单元测试\"><a href=\"#5-6-单元测试\" class=\"headerlink\" title=\"5.6 单元测试\"></a>5.6 单元测试</h3><p>Unit Test</p>\n<p>UIUnit Test</p>\n<p>Appiume</p>\n<h3 id=\"5-7-工具\"><a href=\"#5-7-工具\" class=\"headerlink\" title=\"5.7 工具\"></a>5.7 工具</h3><p>XCode、Git、Pod、Jenkins、Fastlane、Charles、VSCode</p>\n<p>LLDB</p>\n<h2 id=\"6-工程化\"><a href=\"#6-工程化\" class=\"headerlink\" title=\"6. 工程化\"></a>6. 工程化</h2><h3 id=\"6-1-组件化\"><a href=\"#6-1-组件化\" class=\"headerlink\" title=\"6.1 组件化\"></a>6.1 组件化</h3><h4 id=\"6-1-组件\"><a href=\"#6-1-组件\" class=\"headerlink\" title=\"6.1 组件\"></a>6.1 组件</h4><h4 id=\"6-2-Pod\"><a href=\"#6-2-Pod\" class=\"headerlink\" title=\"6.2 Pod\"></a>6.2 Pod</h4><ul>\n<li>动静态库</li>\n<li>库合并</li>\n</ul>\n<h4 id=\"6-3-组件化\"><a href=\"#6-3-组件化\" class=\"headerlink\" title=\"6.3 组件化\"></a>6.3 组件化</h4><p>蘑菇街</p>\n<p>CTMediator</p>\n<p>Behive</p>\n<h3 id=\"6-2-Fastlane\"><a href=\"#6-2-Fastlane\" class=\"headerlink\" title=\"6.2 Fastlane\"></a>6.2 Fastlane</h3><h3 id=\"6-3-Jenkins\"><a href=\"#6-3-Jenkins\" class=\"headerlink\" title=\"6.3 Jenkins\"></a>6.3 Jenkins</h3><p>Ruby</p>\n<h3 id=\"6-4-CI\"><a href=\"#6-4-CI\" class=\"headerlink\" title=\"6.4 CI\"></a>6.4 CI</h3><p>Git、Pod、Shell、Jenkins、蒲公英/Fir.im、钉钉</p>\n<h3 id=\"6-5-XcodeServer\"><a href=\"#6-5-XcodeServer\" class=\"headerlink\" title=\"6.5 XcodeServer\"></a>6.5 XcodeServer</h3><h2 id=\"7-杂项\"><a href=\"#7-杂项\" class=\"headerlink\" title=\"7. 杂项\"></a>7. 杂项</h2><h3 id=\"7-1-日志\"><a href=\"#7-1-日志\" class=\"headerlink\" title=\"7.1 日志\"></a>7.1 日志</h3><h3 id=\"7-2-埋点\"><a href=\"#7-2-埋点\" class=\"headerlink\" title=\"7.2 埋点\"></a>7.2 埋点</h3><h3 id=\"7-3-常见源码库（设计方案参考）\"><a href=\"#7-3-常见源码库（设计方案参考）\" class=\"headerlink\" title=\"7.3 常见源码库（设计方案参考）\"></a>7.3 常见源码库（设计方案参考）</h3><h3 id=\"7-4-蓝牙\"><a href=\"#7-4-蓝牙\" class=\"headerlink\" title=\"7.4 蓝牙\"></a>7.4 蓝牙</h3><h3 id=\"7-5-Apple-Developer\"><a href=\"#7-5-Apple-Developer\" class=\"headerlink\" title=\"7.5 Apple Developer\"></a>7.5 Apple Developer</h3><p>IPA 签名机制</p>\n<p>上线流程</p>\n<h3 id=\"7-6-相关工具\"><a href=\"#7-6-相关工具\" class=\"headerlink\" title=\"7.6 相关工具\"></a>7.6 相关工具</h3><h4 id=\"7-6-1-Docker\"><a href=\"#7-6-1-Docker\" class=\"headerlink\" title=\"7.6.1 Docker\"></a>7.6.1 Docker</h4><h2 id=\"8-附加\"><a href=\"#8-附加\" class=\"headerlink\" title=\"8. 附加\"></a>8. 附加</h2><h3 id=\"8-1-后端\"><a href=\"#8-1-后端\" class=\"headerlink\" title=\"8.1 后端\"></a>8.1 后端</h3><h4 id=\"8-1-1-PHP\"><a href=\"#8-1-1-PHP\" class=\"headerlink\" title=\"8.1.1 PHP\"></a>8.1.1 PHP</h4><h4 id=\"8-1-2-Java\"><a href=\"#8-1-2-Java\" class=\"headerlink\" title=\"8.1.2 Java\"></a>8.1.2 Java</h4><h4 id=\"8-1-3-CPP\"><a href=\"#8-1-3-CPP\" class=\"headerlink\" title=\"8.1.3 CPP\"></a>8.1.3 CPP</h4><h4 id=\"8-1-4-Go\"><a href=\"#8-1-4-Go\" class=\"headerlink\" title=\"8.1.4 Go\"></a>8.1.4 Go</h4><h2 id=\"9-iOS-常用资源\"><a href=\"#9-iOS-常用资源\" class=\"headerlink\" title=\"9. iOS 常用资源\"></a>9. iOS 常用资源</h2><h3 id=\"9-1-网站\"><a href=\"#9-1-网站\" class=\"headerlink\" title=\"9.1 网站\"></a>9.1 网站</h3><h3 id=\"9-2-博主\"><a href=\"#9-2-博主\" class=\"headerlink\" title=\"9.2 博主\"></a>9.2 博主</h3><h3 id=\"9-3-优质资源\"><a href=\"#9-3-优质资源\" class=\"headerlink\" title=\"9.3 优质资源\"></a>9.3 优质资源</h3>"},{"title":"iOS 经验总结","abbrlink":48939,"date":"2021-07-29T02:02:00.000Z","_content":"\n[TOC]\n\n## 1. 语言\n\nC/C++\n\nDart\n\nJavaScript\n\n## 2. 计算机\n\n## 3. 移动端\n\nUI布局、渲染、与动画\n\nTableView、渲染原理（离屏渲染）、图片（缓存+渲染）\n\n## 4. 大前端\n\n### 4.1 JSPatch\n\n### 4.2 Hybrid\n\n#### 4.2.1 DCloud\n\n#### 4.2.2 Capacitor\n\nIonic 等\n\n## 5. 软件工程\n\n### 5.1 设计\n\n### 5.2 框架\n\n#### 5.2.1 第三方库\n\nAlamofire[AFNetworking]\n\nSDWebImage\n\nSnapKit\n\nFlutterBoost\n\n## 6. 工程化\n\n### 6.1 Git\n\n### 6.2 工作效率\n\n## 7. 杂项\n\n## 8. 附加\n\n## 9. iOS 常用资源\n\n## 10. 硬件\n\n### 10.1 蓝牙\n\n### 10.2 智能家居\n\n## 11. 拓展\n\n### 11.1 运维\n\n### 11.2 测试\n\n### 11.3 项目管理\n\n工程化\n\n### 11.4 产品\n\n#### 11.4.1 技能\n\n#### 11.4.2 业务思维\n\n### 11.5 运营\n\n### 11.6 销售\n","source":"_posts/iOS/Interview/Summery2.md","raw":"---\ntitle: iOS 经验总结\nabbrlink: 48939\ndate: 2021-07-29 10:02:00\ntags:\n---\n\n[TOC]\n\n## 1. 语言\n\nC/C++\n\nDart\n\nJavaScript\n\n## 2. 计算机\n\n## 3. 移动端\n\nUI布局、渲染、与动画\n\nTableView、渲染原理（离屏渲染）、图片（缓存+渲染）\n\n## 4. 大前端\n\n### 4.1 JSPatch\n\n### 4.2 Hybrid\n\n#### 4.2.1 DCloud\n\n#### 4.2.2 Capacitor\n\nIonic 等\n\n## 5. 软件工程\n\n### 5.1 设计\n\n### 5.2 框架\n\n#### 5.2.1 第三方库\n\nAlamofire[AFNetworking]\n\nSDWebImage\n\nSnapKit\n\nFlutterBoost\n\n## 6. 工程化\n\n### 6.1 Git\n\n### 6.2 工作效率\n\n## 7. 杂项\n\n## 8. 附加\n\n## 9. iOS 常用资源\n\n## 10. 硬件\n\n### 10.1 蓝牙\n\n### 10.2 智能家居\n\n## 11. 拓展\n\n### 11.1 运维\n\n### 11.2 测试\n\n### 11.3 项目管理\n\n工程化\n\n### 11.4 产品\n\n#### 11.4.1 技能\n\n#### 11.4.2 业务思维\n\n### 11.5 运营\n\n### 11.6 销售\n","slug":"iOS/Interview/Summery2","published":1,"updated":"2021-09-16T06:42:30.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1q001eiu9k2bypauqg","content":"<p>[TOC]</p>\n<h2 id=\"1-语言\"><a href=\"#1-语言\" class=\"headerlink\" title=\"1. 语言\"></a>1. 语言</h2><p>C/C++</p>\n<p>Dart</p>\n<p>JavaScript</p>\n<h2 id=\"2-计算机\"><a href=\"#2-计算机\" class=\"headerlink\" title=\"2. 计算机\"></a>2. 计算机</h2><h2 id=\"3-移动端\"><a href=\"#3-移动端\" class=\"headerlink\" title=\"3. 移动端\"></a>3. 移动端</h2><p>UI布局、渲染、与动画</p>\n<p>TableView、渲染原理（离屏渲染）、图片（缓存+渲染）</p>\n<h2 id=\"4-大前端\"><a href=\"#4-大前端\" class=\"headerlink\" title=\"4. 大前端\"></a>4. 大前端</h2><h3 id=\"4-1-JSPatch\"><a href=\"#4-1-JSPatch\" class=\"headerlink\" title=\"4.1 JSPatch\"></a>4.1 JSPatch</h3><h3 id=\"4-2-Hybrid\"><a href=\"#4-2-Hybrid\" class=\"headerlink\" title=\"4.2 Hybrid\"></a>4.2 Hybrid</h3><h4 id=\"4-2-1-DCloud\"><a href=\"#4-2-1-DCloud\" class=\"headerlink\" title=\"4.2.1 DCloud\"></a>4.2.1 DCloud</h4><h4 id=\"4-2-2-Capacitor\"><a href=\"#4-2-2-Capacitor\" class=\"headerlink\" title=\"4.2.2 Capacitor\"></a>4.2.2 Capacitor</h4><p>Ionic 等</p>\n<h2 id=\"5-软件工程\"><a href=\"#5-软件工程\" class=\"headerlink\" title=\"5. 软件工程\"></a>5. 软件工程</h2><h3 id=\"5-1-设计\"><a href=\"#5-1-设计\" class=\"headerlink\" title=\"5.1 设计\"></a>5.1 设计</h3><h3 id=\"5-2-框架\"><a href=\"#5-2-框架\" class=\"headerlink\" title=\"5.2 框架\"></a>5.2 框架</h3><h4 id=\"5-2-1-第三方库\"><a href=\"#5-2-1-第三方库\" class=\"headerlink\" title=\"5.2.1 第三方库\"></a>5.2.1 第三方库</h4><p>Alamofire[AFNetworking]</p>\n<p>SDWebImage</p>\n<p>SnapKit</p>\n<p>FlutterBoost</p>\n<h2 id=\"6-工程化\"><a href=\"#6-工程化\" class=\"headerlink\" title=\"6. 工程化\"></a>6. 工程化</h2><h3 id=\"6-1-Git\"><a href=\"#6-1-Git\" class=\"headerlink\" title=\"6.1 Git\"></a>6.1 Git</h3><h3 id=\"6-2-工作效率\"><a href=\"#6-2-工作效率\" class=\"headerlink\" title=\"6.2 工作效率\"></a>6.2 工作效率</h3><h2 id=\"7-杂项\"><a href=\"#7-杂项\" class=\"headerlink\" title=\"7. 杂项\"></a>7. 杂项</h2><h2 id=\"8-附加\"><a href=\"#8-附加\" class=\"headerlink\" title=\"8. 附加\"></a>8. 附加</h2><h2 id=\"9-iOS-常用资源\"><a href=\"#9-iOS-常用资源\" class=\"headerlink\" title=\"9. iOS 常用资源\"></a>9. iOS 常用资源</h2><h2 id=\"10-硬件\"><a href=\"#10-硬件\" class=\"headerlink\" title=\"10. 硬件\"></a>10. 硬件</h2><h3 id=\"10-1-蓝牙\"><a href=\"#10-1-蓝牙\" class=\"headerlink\" title=\"10.1 蓝牙\"></a>10.1 蓝牙</h3><h3 id=\"10-2-智能家居\"><a href=\"#10-2-智能家居\" class=\"headerlink\" title=\"10.2 智能家居\"></a>10.2 智能家居</h3><h2 id=\"11-拓展\"><a href=\"#11-拓展\" class=\"headerlink\" title=\"11. 拓展\"></a>11. 拓展</h2><h3 id=\"11-1-运维\"><a href=\"#11-1-运维\" class=\"headerlink\" title=\"11.1 运维\"></a>11.1 运维</h3><h3 id=\"11-2-测试\"><a href=\"#11-2-测试\" class=\"headerlink\" title=\"11.2 测试\"></a>11.2 测试</h3><h3 id=\"11-3-项目管理\"><a href=\"#11-3-项目管理\" class=\"headerlink\" title=\"11.3 项目管理\"></a>11.3 项目管理</h3><p>工程化</p>\n<h3 id=\"11-4-产品\"><a href=\"#11-4-产品\" class=\"headerlink\" title=\"11.4 产品\"></a>11.4 产品</h3><h4 id=\"11-4-1-技能\"><a href=\"#11-4-1-技能\" class=\"headerlink\" title=\"11.4.1 技能\"></a>11.4.1 技能</h4><h4 id=\"11-4-2-业务思维\"><a href=\"#11-4-2-业务思维\" class=\"headerlink\" title=\"11.4.2 业务思维\"></a>11.4.2 业务思维</h4><h3 id=\"11-5-运营\"><a href=\"#11-5-运营\" class=\"headerlink\" title=\"11.5 运营\"></a>11.5 运营</h3><h3 id=\"11-6-销售\"><a href=\"#11-6-销售\" class=\"headerlink\" title=\"11.6 销售\"></a>11.6 销售</h3>","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"1-语言\"><a href=\"#1-语言\" class=\"headerlink\" title=\"1. 语言\"></a>1. 语言</h2><p>C/C++</p>\n<p>Dart</p>\n<p>JavaScript</p>\n<h2 id=\"2-计算机\"><a href=\"#2-计算机\" class=\"headerlink\" title=\"2. 计算机\"></a>2. 计算机</h2><h2 id=\"3-移动端\"><a href=\"#3-移动端\" class=\"headerlink\" title=\"3. 移动端\"></a>3. 移动端</h2><p>UI布局、渲染、与动画</p>\n<p>TableView、渲染原理（离屏渲染）、图片（缓存+渲染）</p>\n<h2 id=\"4-大前端\"><a href=\"#4-大前端\" class=\"headerlink\" title=\"4. 大前端\"></a>4. 大前端</h2><h3 id=\"4-1-JSPatch\"><a href=\"#4-1-JSPatch\" class=\"headerlink\" title=\"4.1 JSPatch\"></a>4.1 JSPatch</h3><h3 id=\"4-2-Hybrid\"><a href=\"#4-2-Hybrid\" class=\"headerlink\" title=\"4.2 Hybrid\"></a>4.2 Hybrid</h3><h4 id=\"4-2-1-DCloud\"><a href=\"#4-2-1-DCloud\" class=\"headerlink\" title=\"4.2.1 DCloud\"></a>4.2.1 DCloud</h4><h4 id=\"4-2-2-Capacitor\"><a href=\"#4-2-2-Capacitor\" class=\"headerlink\" title=\"4.2.2 Capacitor\"></a>4.2.2 Capacitor</h4><p>Ionic 等</p>\n<h2 id=\"5-软件工程\"><a href=\"#5-软件工程\" class=\"headerlink\" title=\"5. 软件工程\"></a>5. 软件工程</h2><h3 id=\"5-1-设计\"><a href=\"#5-1-设计\" class=\"headerlink\" title=\"5.1 设计\"></a>5.1 设计</h3><h3 id=\"5-2-框架\"><a href=\"#5-2-框架\" class=\"headerlink\" title=\"5.2 框架\"></a>5.2 框架</h3><h4 id=\"5-2-1-第三方库\"><a href=\"#5-2-1-第三方库\" class=\"headerlink\" title=\"5.2.1 第三方库\"></a>5.2.1 第三方库</h4><p>Alamofire[AFNetworking]</p>\n<p>SDWebImage</p>\n<p>SnapKit</p>\n<p>FlutterBoost</p>\n<h2 id=\"6-工程化\"><a href=\"#6-工程化\" class=\"headerlink\" title=\"6. 工程化\"></a>6. 工程化</h2><h3 id=\"6-1-Git\"><a href=\"#6-1-Git\" class=\"headerlink\" title=\"6.1 Git\"></a>6.1 Git</h3><h3 id=\"6-2-工作效率\"><a href=\"#6-2-工作效率\" class=\"headerlink\" title=\"6.2 工作效率\"></a>6.2 工作效率</h3><h2 id=\"7-杂项\"><a href=\"#7-杂项\" class=\"headerlink\" title=\"7. 杂项\"></a>7. 杂项</h2><h2 id=\"8-附加\"><a href=\"#8-附加\" class=\"headerlink\" title=\"8. 附加\"></a>8. 附加</h2><h2 id=\"9-iOS-常用资源\"><a href=\"#9-iOS-常用资源\" class=\"headerlink\" title=\"9. iOS 常用资源\"></a>9. iOS 常用资源</h2><h2 id=\"10-硬件\"><a href=\"#10-硬件\" class=\"headerlink\" title=\"10. 硬件\"></a>10. 硬件</h2><h3 id=\"10-1-蓝牙\"><a href=\"#10-1-蓝牙\" class=\"headerlink\" title=\"10.1 蓝牙\"></a>10.1 蓝牙</h3><h3 id=\"10-2-智能家居\"><a href=\"#10-2-智能家居\" class=\"headerlink\" title=\"10.2 智能家居\"></a>10.2 智能家居</h3><h2 id=\"11-拓展\"><a href=\"#11-拓展\" class=\"headerlink\" title=\"11. 拓展\"></a>11. 拓展</h2><h3 id=\"11-1-运维\"><a href=\"#11-1-运维\" class=\"headerlink\" title=\"11.1 运维\"></a>11.1 运维</h3><h3 id=\"11-2-测试\"><a href=\"#11-2-测试\" class=\"headerlink\" title=\"11.2 测试\"></a>11.2 测试</h3><h3 id=\"11-3-项目管理\"><a href=\"#11-3-项目管理\" class=\"headerlink\" title=\"11.3 项目管理\"></a>11.3 项目管理</h3><p>工程化</p>\n<h3 id=\"11-4-产品\"><a href=\"#11-4-产品\" class=\"headerlink\" title=\"11.4 产品\"></a>11.4 产品</h3><h4 id=\"11-4-1-技能\"><a href=\"#11-4-1-技能\" class=\"headerlink\" title=\"11.4.1 技能\"></a>11.4.1 技能</h4><h4 id=\"11-4-2-业务思维\"><a href=\"#11-4-2-业务思维\" class=\"headerlink\" title=\"11.4.2 业务思维\"></a>11.4.2 业务思维</h4><h3 id=\"11-5-运营\"><a href=\"#11-5-运营\" class=\"headerlink\" title=\"11.5 运营\"></a>11.5 运营</h3><h3 id=\"11-6-销售\"><a href=\"#11-6-销售\" class=\"headerlink\" title=\"11.6 销售\"></a>11.6 销售</h3>"},{"title":"iOS 生僻题","abbrlink":16080,"date":"2021-07-29T02:07:00.000Z","_content":"## 生僻题\n\n1. weak弱引用表是可变的么还是不可变的\n2. UIView 和 CALayer的区别，以及动画的区别\n3. 读写锁底层实现\n4. 有一个10个G的文件里面每一行都有数字，对这些数字进行排序（两种方法）\n5. 怎么将彩色的图片专程黑白的\n6. Web渲染和Native渲染有什么异同点\n7. 算法: 手写LFU\n8. 怎么hook一个C函数\n9. web和native怎么共享cookie\n10. allocation 与 dealloc\n11. 算法：有一个很大的整形数据，转成二进制求1的个数\n12. 常见的网络攻击\n13. 常见的异常、崩溃\n14. 各种锁的区别\n15. 职业规划\n16. 算法(三道手写)\n    字符串转整形\n    反转链表（递归和非递归）\n    将两个有序链表合并成一个有序链表\n17. 数据结构\n18. 关联对象，策略有哪些，关联对象的key为啥要用static修饰（这个没有get到点）\n","source":"_posts/iOS/Interview/Uncommon.md","raw":"---\ntitle: iOS 生僻题\nabbrlink: 16080\ndate: 2021-07-29 10:07:00\ntags:\n---\n## 生僻题\n\n1. weak弱引用表是可变的么还是不可变的\n2. UIView 和 CALayer的区别，以及动画的区别\n3. 读写锁底层实现\n4. 有一个10个G的文件里面每一行都有数字，对这些数字进行排序（两种方法）\n5. 怎么将彩色的图片专程黑白的\n6. Web渲染和Native渲染有什么异同点\n7. 算法: 手写LFU\n8. 怎么hook一个C函数\n9. web和native怎么共享cookie\n10. allocation 与 dealloc\n11. 算法：有一个很大的整形数据，转成二进制求1的个数\n12. 常见的网络攻击\n13. 常见的异常、崩溃\n14. 各种锁的区别\n15. 职业规划\n16. 算法(三道手写)\n    字符串转整形\n    反转链表（递归和非递归）\n    将两个有序链表合并成一个有序链表\n17. 数据结构\n18. 关联对象，策略有哪些，关联对象的key为啥要用static修饰（这个没有get到点）\n","slug":"iOS/Interview/Uncommon","published":1,"updated":"2021-07-29T06:45:57.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1r001fiu9kfhpmc49c","content":"<h2 id=\"生僻题\"><a href=\"#生僻题\" class=\"headerlink\" title=\"生僻题\"></a>生僻题</h2><ol>\n<li>weak弱引用表是可变的么还是不可变的</li>\n<li>UIView 和 CALayer的区别，以及动画的区别</li>\n<li>读写锁底层实现</li>\n<li>有一个10个G的文件里面每一行都有数字，对这些数字进行排序（两种方法）</li>\n<li>怎么将彩色的图片专程黑白的</li>\n<li>Web渲染和Native渲染有什么异同点</li>\n<li>算法: 手写LFU</li>\n<li>怎么hook一个C函数</li>\n<li>web和native怎么共享cookie</li>\n<li>allocation 与 dealloc</li>\n<li>算法：有一个很大的整形数据，转成二进制求1的个数</li>\n<li>常见的网络攻击</li>\n<li>常见的异常、崩溃</li>\n<li>各种锁的区别</li>\n<li>职业规划</li>\n<li>算法(三道手写)<br>字符串转整形<br>反转链表（递归和非递归）<br>将两个有序链表合并成一个有序链表</li>\n<li>数据结构</li>\n<li>关联对象，策略有哪些，关联对象的key为啥要用static修饰（这个没有get到点）</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"生僻题\"><a href=\"#生僻题\" class=\"headerlink\" title=\"生僻题\"></a>生僻题</h2><ol>\n<li>weak弱引用表是可变的么还是不可变的</li>\n<li>UIView 和 CALayer的区别，以及动画的区别</li>\n<li>读写锁底层实现</li>\n<li>有一个10个G的文件里面每一行都有数字，对这些数字进行排序（两种方法）</li>\n<li>怎么将彩色的图片专程黑白的</li>\n<li>Web渲染和Native渲染有什么异同点</li>\n<li>算法: 手写LFU</li>\n<li>怎么hook一个C函数</li>\n<li>web和native怎么共享cookie</li>\n<li>allocation 与 dealloc</li>\n<li>算法：有一个很大的整形数据，转成二进制求1的个数</li>\n<li>常见的网络攻击</li>\n<li>常见的异常、崩溃</li>\n<li>各种锁的区别</li>\n<li>职业规划</li>\n<li>算法(三道手写)<br>字符串转整形<br>反转链表（递归和非递归）<br>将两个有序链表合并成一个有序链表</li>\n<li>数据结构</li>\n<li>关联对象，策略有哪些，关联对象的key为啥要用static修饰（这个没有get到点）</li>\n</ol>\n"},{"title":"iOS 之开源库","abbrlink":"89972d8f","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. WebViewJavaScriptBridge\n","source":"_posts/iOS/Libraries/OpenLibs.md","raw":"---\ntitle: iOS 之开源库\nabbrlink: 89972d8f\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. WebViewJavaScriptBridge\n","slug":"iOS/Libraries/OpenLibs","published":1,"updated":"2021-07-29T06:46:00.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1s001giu9k7b6k5tmr","content":"<h2 id=\"1-WebViewJavaScriptBridge\"><a href=\"#1-WebViewJavaScriptBridge\" class=\"headerlink\" title=\"1. WebViewJavaScriptBridge\"></a>1. WebViewJavaScriptBridge</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-WebViewJavaScriptBridge\"><a href=\"#1-WebViewJavaScriptBridge\" class=\"headerlink\" title=\"1. WebViewJavaScriptBridge\"></a>1. WebViewJavaScriptBridge</h2>"},{"title":"iOS之音频","abbrlink":"2d1f6e9e","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Medias/Audio.md","raw":"---\ntitle: iOS之音频\nabbrlink: 2d1f6e9e\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Medias/Audio","published":1,"updated":"2021-07-29T06:46:00.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1t001hiu9k8j5ma33i","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之图片","abbrlink":"d50db5ca","date":"2021-04-20T13:36:02.000Z","_content":"\nOpenGL\n\nGPUimage\n\nOpenCV\n","source":"_posts/iOS/Medias/Images.md","raw":"---\ntitle: iOS之图片\nabbrlink: d50db5ca\ndate: 2021-04-20 21:36:02\ntags:\n---\n\nOpenGL\n\nGPUimage\n\nOpenCV\n","slug":"iOS/Medias/Images","published":1,"updated":"2021-07-29T06:46:00.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1t001iiu9k2dmy5va1","content":"<p>OpenGL</p>\n<p>GPUimage</p>\n<p>OpenCV</p>\n","site":{"data":{}},"excerpt":"","more":"<p>OpenGL</p>\n<p>GPUimage</p>\n<p>OpenCV</p>\n"},{"title":"iOS之多媒体","abbrlink":"d98d894a","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Medias/Medias.md","raw":"---\ntitle: iOS之多媒体\nabbrlink: d98d894a\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Medias/Medias","published":1,"updated":"2021-07-29T06:46:00.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1u001jiu9k574ybztp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"WebViewJavascriptBridge","abbrlink":"3eeea0be","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Libraries/WebViewJavascriptBridge.md","raw":"---\ntitle: WebViewJavascriptBridge\nabbrlink: 3eeea0be\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Libraries/WebViewJavascriptBridge","published":1,"updated":"2021-07-29T06:46:00.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1v001kiu9kbnfx4oxg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之视频","abbrlink":"b0e746ef","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Medias/Vedio.md","raw":"---\ntitle: iOS之视频\nabbrlink: b0e746ef\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Medias/Vedio","published":1,"updated":"2021-07-29T06:46:00.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1v001liu9k5axr1mcl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之网络","abbrlink":"4900ec90","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [iOS App 签名的原理](http://blog.cnbang.net/tech/3386/?keyjs=ea1a4bc480&expirejs=1621846489)\n","source":"_posts/iOS/Network/AppSign.md","raw":"---\ntitle: iOS之网络\nabbrlink: 4900ec90\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [iOS App 签名的原理](http://blog.cnbang.net/tech/3386/?keyjs=ea1a4bc480&expirejs=1621846489)\n","slug":"iOS/Network/AppSign","published":1,"updated":"2021-07-29T06:45:57.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1w001miu9kg5985f3j","content":"<h2 id=\"1-iOS-App-签名的原理\"><a href=\"#1-iOS-App-签名的原理\" class=\"headerlink\" title=\"1. iOS App 签名的原理\"></a>1. <a href=\"http://blog.cnbang.net/tech/3386/?keyjs=ea1a4bc480&expirejs=1621846489\">iOS App 签名的原理</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-iOS-App-签名的原理\"><a href=\"#1-iOS-App-签名的原理\" class=\"headerlink\" title=\"1. iOS App 签名的原理\"></a>1. <a href=\"http://blog.cnbang.net/tech/3386/?keyjs=ea1a4bc480&expirejs=1621846489\">iOS App 签名的原理</a></h2>"},{"title":"iOS网络之 HTTP","abbrlink":"4a3b33f6","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [HTTP 基础](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP)\n\n### 1.1 [GET 和 POST 到底有什么区别？](https://www.zhihu.com/question/28586791)\n\n## 1.2 [HTTPS IP直连问题小结](https://blog.csdn.net/leelit/article/details/77829196)\n","source":"_posts/iOS/Network/HTTP.md","raw":"---\ntitle: iOS网络之 HTTP\nabbrlink: 4a3b33f6\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [HTTP 基础](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP)\n\n### 1.1 [GET 和 POST 到底有什么区别？](https://www.zhihu.com/question/28586791)\n\n## 1.2 [HTTPS IP直连问题小结](https://blog.csdn.net/leelit/article/details/77829196)\n","slug":"iOS/Network/HTTP","published":1,"updated":"2021-09-22T06:56:40.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1y001niu9k5o327zjt","content":"<h2 id=\"1-HTTP-基础\"><a href=\"#1-HTTP-基础\" class=\"headerlink\" title=\"1. HTTP 基础\"></a>1. <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP\">HTTP 基础</a></h2><h3 id=\"1-1-GET-和-POST-到底有什么区别？\"><a href=\"#1-1-GET-和-POST-到底有什么区别？\" class=\"headerlink\" title=\"1.1 GET 和 POST 到底有什么区别？\"></a>1.1 <a href=\"https://www.zhihu.com/question/28586791\">GET 和 POST 到底有什么区别？</a></h3><h2 id=\"1-2-HTTPS-IP直连问题小结\"><a href=\"#1-2-HTTPS-IP直连问题小结\" class=\"headerlink\" title=\"1.2 HTTPS IP直连问题小结\"></a>1.2 <a href=\"https://blog.csdn.net/leelit/article/details/77829196\">HTTPS IP直连问题小结</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-HTTP-基础\"><a href=\"#1-HTTP-基础\" class=\"headerlink\" title=\"1. HTTP 基础\"></a>1. <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP\">HTTP 基础</a></h2><h3 id=\"1-1-GET-和-POST-到底有什么区别？\"><a href=\"#1-1-GET-和-POST-到底有什么区别？\" class=\"headerlink\" title=\"1.1 GET 和 POST 到底有什么区别？\"></a>1.1 <a href=\"https://www.zhihu.com/question/28586791\">GET 和 POST 到底有什么区别？</a></h3><h2 id=\"1-2-HTTPS-IP直连问题小结\"><a href=\"#1-2-HTTPS-IP直连问题小结\" class=\"headerlink\" title=\"1.2 HTTPS IP直连问题小结\"></a>1.2 <a href=\"https://blog.csdn.net/leelit/article/details/77829196\">HTTPS IP直连问题小结</a></h2>"},{"title":"iOS 之 蓝牙协议","abbrlink":42604,"date":"2021-09-19T09:36:02.000Z","_content":"\n## 1. [Core Bluetooth Programming Guide](https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html#//apple_ref/doc/uid/TP40013257-CH1-SW1)\n\n## 2. [低功耗蓝牙(4.0)总结](../Network/documents/BLE4.0低功耗蓝牙协议总结.pdf)\n\n## 3. [吐血推荐历史最全的蓝牙协议栈介绍](https://blog.csdn.net/XiaoXiaoPengBo/article/details/107466841)\n\n## 4. [微信蓝牙开发文档](https://developers.weixin.qq.com/miniprogram/dev/framework/device/bluetooth.html)\n\n### 4.1 [微信硬件平台](https://iot.weixin.qq.com/wiki/new/index.html?page=2-1)\n\n## 5. [NORDIC 半导体](https://moore.live/news/235905/detail/)\n\n### 5.1 [NORDIC 文档](https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v12.2.0%2Fble_sdk_app_ancs.html)\n\n### 5.2 [NRF Connect SDK](https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/index.html)\n\n### 5.3 Nordic 博文分享系列\n\n### 5.3.1 [低功耗蓝牙ATT/GATT/Profile/Service/Characteristic规格解读](https://mp.weixin.qq.com/s/t0D3XcjQgbgoCYQlXoZ34Q)\n\n### 5.3.2 [深入浅出低功耗蓝牙(BLE)协议栈](https://mp.weixin.qq.com/s?__biz=MzIyOTIxODc5Mw==&mid=2247484942&idx=1&sn=3f54b6a37ecfec8f6fa13f0fd427126c&chksm=e8474688df30cf9e89e1d98a930696bc50d1127bc54bf78b17a3386de2e11a1fb7e964387638&scene=21#wechat_redirect)\n\n## 6. [蓝牙联盟规范](https://www.bluetooth.com/zh-cn/specifications/specs/)\n","source":"_posts/iOS/Network/BLuetooth.md","raw":"---\ntitle: iOS 之 蓝牙协议\ntags: 蓝牙协议\nabbrlink: 42604\ndate: 2021-09-19 17:36:02\n---\n\n## 1. [Core Bluetooth Programming Guide](https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html#//apple_ref/doc/uid/TP40013257-CH1-SW1)\n\n## 2. [低功耗蓝牙(4.0)总结](../Network/documents/BLE4.0低功耗蓝牙协议总结.pdf)\n\n## 3. [吐血推荐历史最全的蓝牙协议栈介绍](https://blog.csdn.net/XiaoXiaoPengBo/article/details/107466841)\n\n## 4. [微信蓝牙开发文档](https://developers.weixin.qq.com/miniprogram/dev/framework/device/bluetooth.html)\n\n### 4.1 [微信硬件平台](https://iot.weixin.qq.com/wiki/new/index.html?page=2-1)\n\n## 5. [NORDIC 半导体](https://moore.live/news/235905/detail/)\n\n### 5.1 [NORDIC 文档](https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v12.2.0%2Fble_sdk_app_ancs.html)\n\n### 5.2 [NRF Connect SDK](https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/index.html)\n\n### 5.3 Nordic 博文分享系列\n\n### 5.3.1 [低功耗蓝牙ATT/GATT/Profile/Service/Characteristic规格解读](https://mp.weixin.qq.com/s/t0D3XcjQgbgoCYQlXoZ34Q)\n\n### 5.3.2 [深入浅出低功耗蓝牙(BLE)协议栈](https://mp.weixin.qq.com/s?__biz=MzIyOTIxODc5Mw==&mid=2247484942&idx=1&sn=3f54b6a37ecfec8f6fa13f0fd427126c&chksm=e8474688df30cf9e89e1d98a930696bc50d1127bc54bf78b17a3386de2e11a1fb7e964387638&scene=21#wechat_redirect)\n\n## 6. [蓝牙联盟规范](https://www.bluetooth.com/zh-cn/specifications/specs/)\n","slug":"iOS/Network/BLuetooth","published":1,"updated":"2021-09-22T06:56:40.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1z001oiu9k604o0skg","content":"<h2 id=\"1-Core-Bluetooth-Programming-Guide\"><a href=\"#1-Core-Bluetooth-Programming-Guide\" class=\"headerlink\" title=\"1. Core Bluetooth Programming Guide\"></a>1. <a href=\"https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html#//apple_ref/doc/uid/TP40013257-CH1-SW1\">Core Bluetooth Programming Guide</a></h2><h2 id=\"2-低功耗蓝牙-4-0-总结\"><a href=\"#2-低功耗蓝牙-4-0-总结\" class=\"headerlink\" title=\"2. 低功耗蓝牙(4.0)总结\"></a>2. <a href=\"../Network/documents/BLE4.0%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93.pdf\">低功耗蓝牙(4.0)总结</a></h2><h2 id=\"3-吐血推荐历史最全的蓝牙协议栈介绍\"><a href=\"#3-吐血推荐历史最全的蓝牙协议栈介绍\" class=\"headerlink\" title=\"3. 吐血推荐历史最全的蓝牙协议栈介绍\"></a>3. <a href=\"https://blog.csdn.net/XiaoXiaoPengBo/article/details/107466841\">吐血推荐历史最全的蓝牙协议栈介绍</a></h2><h2 id=\"4-微信蓝牙开发文档\"><a href=\"#4-微信蓝牙开发文档\" class=\"headerlink\" title=\"4. 微信蓝牙开发文档\"></a>4. <a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/device/bluetooth.html\">微信蓝牙开发文档</a></h2><h3 id=\"4-1-微信硬件平台\"><a href=\"#4-1-微信硬件平台\" class=\"headerlink\" title=\"4.1 微信硬件平台\"></a>4.1 <a href=\"https://iot.weixin.qq.com/wiki/new/index.html?page=2-1\">微信硬件平台</a></h3><h2 id=\"5-NORDIC-半导体\"><a href=\"#5-NORDIC-半导体\" class=\"headerlink\" title=\"5. NORDIC 半导体\"></a>5. <a href=\"https://moore.live/news/235905/detail/\">NORDIC 半导体</a></h2><h3 id=\"5-1-NORDIC-文档\"><a href=\"#5-1-NORDIC-文档\" class=\"headerlink\" title=\"5.1 NORDIC 文档\"></a>5.1 <a href=\"https://infocenter.nordicsemi.com/index.jsp?topic=/com.nordic.infocenter.sdk5.v12.2.0/ble_sdk_app_ancs.html\">NORDIC 文档</a></h3><h3 id=\"5-2-NRF-Connect-SDK\"><a href=\"#5-2-NRF-Connect-SDK\" class=\"headerlink\" title=\"5.2 NRF Connect SDK\"></a>5.2 <a href=\"https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/index.html\">NRF Connect SDK</a></h3><h3 id=\"5-3-Nordic-博文分享系列\"><a href=\"#5-3-Nordic-博文分享系列\" class=\"headerlink\" title=\"5.3 Nordic 博文分享系列\"></a>5.3 Nordic 博文分享系列</h3><h3 id=\"5-3-1-低功耗蓝牙ATT-GATT-Profile-Service-Characteristic规格解读\"><a href=\"#5-3-1-低功耗蓝牙ATT-GATT-Profile-Service-Characteristic规格解读\" class=\"headerlink\" title=\"5.3.1 低功耗蓝牙ATT/GATT/Profile/Service/Characteristic规格解读\"></a>5.3.1 <a href=\"https://mp.weixin.qq.com/s/t0D3XcjQgbgoCYQlXoZ34Q\">低功耗蓝牙ATT/GATT/Profile/Service/Characteristic规格解读</a></h3><h3 id=\"5-3-2-深入浅出低功耗蓝牙-BLE-协议栈\"><a href=\"#5-3-2-深入浅出低功耗蓝牙-BLE-协议栈\" class=\"headerlink\" title=\"5.3.2 深入浅出低功耗蓝牙(BLE)协议栈\"></a>5.3.2 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyOTIxODc5Mw==&mid=2247484942&idx=1&sn=3f54b6a37ecfec8f6fa13f0fd427126c&chksm=e8474688df30cf9e89e1d98a930696bc50d1127bc54bf78b17a3386de2e11a1fb7e964387638&scene=21#wechat_redirect\">深入浅出低功耗蓝牙(BLE)协议栈</a></h3><h2 id=\"6-蓝牙联盟规范\"><a href=\"#6-蓝牙联盟规范\" class=\"headerlink\" title=\"6. 蓝牙联盟规范\"></a>6. <a href=\"https://www.bluetooth.com/zh-cn/specifications/specs/\">蓝牙联盟规范</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Core-Bluetooth-Programming-Guide\"><a href=\"#1-Core-Bluetooth-Programming-Guide\" class=\"headerlink\" title=\"1. Core Bluetooth Programming Guide\"></a>1. <a href=\"https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html#//apple_ref/doc/uid/TP40013257-CH1-SW1\">Core Bluetooth Programming Guide</a></h2><h2 id=\"2-低功耗蓝牙-4-0-总结\"><a href=\"#2-低功耗蓝牙-4-0-总结\" class=\"headerlink\" title=\"2. 低功耗蓝牙(4.0)总结\"></a>2. <a href=\"../Network/documents/BLE4.0%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93.pdf\">低功耗蓝牙(4.0)总结</a></h2><h2 id=\"3-吐血推荐历史最全的蓝牙协议栈介绍\"><a href=\"#3-吐血推荐历史最全的蓝牙协议栈介绍\" class=\"headerlink\" title=\"3. 吐血推荐历史最全的蓝牙协议栈介绍\"></a>3. <a href=\"https://blog.csdn.net/XiaoXiaoPengBo/article/details/107466841\">吐血推荐历史最全的蓝牙协议栈介绍</a></h2><h2 id=\"4-微信蓝牙开发文档\"><a href=\"#4-微信蓝牙开发文档\" class=\"headerlink\" title=\"4. 微信蓝牙开发文档\"></a>4. <a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/device/bluetooth.html\">微信蓝牙开发文档</a></h2><h3 id=\"4-1-微信硬件平台\"><a href=\"#4-1-微信硬件平台\" class=\"headerlink\" title=\"4.1 微信硬件平台\"></a>4.1 <a href=\"https://iot.weixin.qq.com/wiki/new/index.html?page=2-1\">微信硬件平台</a></h3><h2 id=\"5-NORDIC-半导体\"><a href=\"#5-NORDIC-半导体\" class=\"headerlink\" title=\"5. NORDIC 半导体\"></a>5. <a href=\"https://moore.live/news/235905/detail/\">NORDIC 半导体</a></h2><h3 id=\"5-1-NORDIC-文档\"><a href=\"#5-1-NORDIC-文档\" class=\"headerlink\" title=\"5.1 NORDIC 文档\"></a>5.1 <a href=\"https://infocenter.nordicsemi.com/index.jsp?topic=/com.nordic.infocenter.sdk5.v12.2.0/ble_sdk_app_ancs.html\">NORDIC 文档</a></h3><h3 id=\"5-2-NRF-Connect-SDK\"><a href=\"#5-2-NRF-Connect-SDK\" class=\"headerlink\" title=\"5.2 NRF Connect SDK\"></a>5.2 <a href=\"https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/index.html\">NRF Connect SDK</a></h3><h3 id=\"5-3-Nordic-博文分享系列\"><a href=\"#5-3-Nordic-博文分享系列\" class=\"headerlink\" title=\"5.3 Nordic 博文分享系列\"></a>5.3 Nordic 博文分享系列</h3><h3 id=\"5-3-1-低功耗蓝牙ATT-GATT-Profile-Service-Characteristic规格解读\"><a href=\"#5-3-1-低功耗蓝牙ATT-GATT-Profile-Service-Characteristic规格解读\" class=\"headerlink\" title=\"5.3.1 低功耗蓝牙ATT/GATT/Profile/Service/Characteristic规格解读\"></a>5.3.1 <a href=\"https://mp.weixin.qq.com/s/t0D3XcjQgbgoCYQlXoZ34Q\">低功耗蓝牙ATT/GATT/Profile/Service/Characteristic规格解读</a></h3><h3 id=\"5-3-2-深入浅出低功耗蓝牙-BLE-协议栈\"><a href=\"#5-3-2-深入浅出低功耗蓝牙-BLE-协议栈\" class=\"headerlink\" title=\"5.3.2 深入浅出低功耗蓝牙(BLE)协议栈\"></a>5.3.2 <a href=\"https://mp.weixin.qq.com/s?__biz=MzIyOTIxODc5Mw==&mid=2247484942&idx=1&sn=3f54b6a37ecfec8f6fa13f0fd427126c&chksm=e8474688df30cf9e89e1d98a930696bc50d1127bc54bf78b17a3386de2e11a1fb7e964387638&scene=21#wechat_redirect\">深入浅出低功耗蓝牙(BLE)协议栈</a></h3><h2 id=\"6-蓝牙联盟规范\"><a href=\"#6-蓝牙联盟规范\" class=\"headerlink\" title=\"6. 蓝牙联盟规范\"></a>6. <a href=\"https://www.bluetooth.com/zh-cn/specifications/specs/\">蓝牙联盟规范</a></h2>"},{"title":"iOS之日志系统","abbrlink":"55874f6f","date":"2021-04-20T13:36:02.000Z","_content":"## 1. 日志内容\n\n```txt\n时间|日志级别|类名_函数名_行数|分类|Log内容\n```\n\n### 1.1 获取类名\n\n```objective-c\nextension NSObject {\n    var className: String {\n        return String(describing: type(of: self)).components(separatedBy: \".\").last!\n    }\n\n    class var className: String {\n        return String(describing: self).components(separatedBy: \".\").last!\n    }\n}\n```\n\n### 1.2 生成log函数\n\n```objective-c\npublic func createLog(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  _ line: Int = #line, _ function: String = #function)\n-> String {\n    let lineStr = String.init(format: \"line:%d\", line)\n    let levelStr = levelToString(level: level)\n    let separator = \"|\"\n    let classSeparator = \"_\"\n    let log: String = Date().toString() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + \"\\n\"\n    print(log)\n    return log\n}\n```\n\n### 1.3 日志文件操作\n\n```objective-c\npublic protocol LogStorageProtocol {\n\n    /// 获取日志缓存地址\n    ///\n    /// - Returns: String\n    func getCachePath() -> String\n\n    /// 删除文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Bool\n    func deleteFile(fileName: String) -> Bool\n\n    /// 清除全部日志缓存\n    ///\n    /// - Returns: Bool\n    func cleanCache() -> Bool\n\n    /// 读取日志文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Data\n    func readFile(fileName: String) -> Data?\n\n    /// 更新写入Log数据\n    ///\n    /// - Parameters:\n    ///   - fileName: String\n    ///   - data: Data\n    /// - Returns: Data\n    func updateFile(fileName: String, data: Data) -> Bool\n\n    /// 自动根据天数创建文件名\n    ///\n    /// - Returns: String\n    func createFileName() -> String\n}\n```\n\n### 1.4 策略\n\n而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，\n根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省\n资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数\n组，容量是11个元素，还有一个充当哨兵\n\n### 1.5 [自主设计日志系统](https://www.jianshu.com/p/74f121bfd9e9)\n\n* [浅谈iOS日志收集系统](https://blog.csdn.net/GGGHub/article/details/71430037)\n","source":"_posts/iOS/Network/Logs.md","raw":"---\ntitle: iOS之日志系统\nabbrlink: 55874f6f\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. 日志内容\n\n```txt\n时间|日志级别|类名_函数名_行数|分类|Log内容\n```\n\n### 1.1 获取类名\n\n```objective-c\nextension NSObject {\n    var className: String {\n        return String(describing: type(of: self)).components(separatedBy: \".\").last!\n    }\n\n    class var className: String {\n        return String(describing: self).components(separatedBy: \".\").last!\n    }\n}\n```\n\n### 1.2 生成log函数\n\n```objective-c\npublic func createLog(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  _ line: Int = #line, _ function: String = #function)\n-> String {\n    let lineStr = String.init(format: \"line:%d\", line)\n    let levelStr = levelToString(level: level)\n    let separator = \"|\"\n    let classSeparator = \"_\"\n    let log: String = Date().toString() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + \"\\n\"\n    print(log)\n    return log\n}\n```\n\n### 1.3 日志文件操作\n\n```objective-c\npublic protocol LogStorageProtocol {\n\n    /// 获取日志缓存地址\n    ///\n    /// - Returns: String\n    func getCachePath() -> String\n\n    /// 删除文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Bool\n    func deleteFile(fileName: String) -> Bool\n\n    /// 清除全部日志缓存\n    ///\n    /// - Returns: Bool\n    func cleanCache() -> Bool\n\n    /// 读取日志文件\n    ///\n    /// - Parameter fileName: String\n    /// - Returns: Data\n    func readFile(fileName: String) -> Data?\n\n    /// 更新写入Log数据\n    ///\n    /// - Parameters:\n    ///   - fileName: String\n    ///   - data: Data\n    /// - Returns: Data\n    func updateFile(fileName: String, data: Data) -> Bool\n\n    /// 自动根据天数创建文件名\n    ///\n    /// - Returns: String\n    func createFileName() -> String\n}\n```\n\n### 1.4 策略\n\n而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，\n根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省\n资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数\n组，容量是11个元素，还有一个充当哨兵\n\n### 1.5 [自主设计日志系统](https://www.jianshu.com/p/74f121bfd9e9)\n\n* [浅谈iOS日志收集系统](https://blog.csdn.net/GGGHub/article/details/71430037)\n","slug":"iOS/Network/Logs","published":1,"updated":"2021-07-29T06:46:00.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn1z001piu9kfewy8zgc","content":"<h2 id=\"1-日志内容\"><a href=\"#1-日志内容\" class=\"headerlink\" title=\"1. 日志内容\"></a>1. 日志内容</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">时间|日志级别|类名_函数名_行数|分类|Log内容</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-获取类名\"><a href=\"#1-1-获取类名\" class=\"headerlink\" title=\"1.1 获取类名\"></a>1.1 获取类名</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension NSObject &#123;</span><br><span class=\"line\">    var className: String &#123;</span><br><span class=\"line\">        return String(describing: type(of: self)).components(separatedBy: &quot;.&quot;).last!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class var className: String &#123;</span><br><span class=\"line\">        return String(describing: self).components(separatedBy: &quot;.&quot;).last!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-生成log函数\"><a href=\"#1-2-生成log函数\" class=\"headerlink\" title=\"1.2 生成log函数\"></a>1.2 生成log函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func createLog(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  _ line: Int = #line, _ function: String = #function)</span><br><span class=\"line\">-&gt; String &#123;</span><br><span class=\"line\">    let lineStr = String.init(format: &quot;line:%d&quot;, line)</span><br><span class=\"line\">    let levelStr = levelToString(level: level)</span><br><span class=\"line\">    let separator = &quot;|&quot;</span><br><span class=\"line\">    let classSeparator = &quot;_&quot;</span><br><span class=\"line\">    let log: String = Date().toString() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + &quot;\\n&quot;</span><br><span class=\"line\">    print(log)</span><br><span class=\"line\">    return log</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-日志文件操作\"><a href=\"#1-3-日志文件操作\" class=\"headerlink\" title=\"1.3 日志文件操作\"></a>1.3 日志文件操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public protocol LogStorageProtocol &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// 获取日志缓存地址</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Returns: String</span><br><span class=\"line\">    func getCachePath() -&gt; String</span><br><span class=\"line\"></span><br><span class=\"line\">    /// 删除文件</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Parameter fileName: String</span><br><span class=\"line\">    /// - Returns: Bool</span><br><span class=\"line\">    func deleteFile(fileName: String) -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">    /// 清除全部日志缓存</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Returns: Bool</span><br><span class=\"line\">    func cleanCache() -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">    /// 读取日志文件</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Parameter fileName: String</span><br><span class=\"line\">    /// - Returns: Data</span><br><span class=\"line\">    func readFile(fileName: String) -&gt; Data?</span><br><span class=\"line\"></span><br><span class=\"line\">    /// 更新写入Log数据</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Parameters:</span><br><span class=\"line\">    ///   - fileName: String</span><br><span class=\"line\">    ///   - data: Data</span><br><span class=\"line\">    /// - Returns: Data</span><br><span class=\"line\">    func updateFile(fileName: String, data: Data) -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">    /// 自动根据天数创建文件名</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Returns: String</span><br><span class=\"line\">    func createFileName() -&gt; String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-策略\"><a href=\"#1-4-策略\" class=\"headerlink\" title=\"1.4 策略\"></a>1.4 策略</h3><p>而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，<br>根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省<br>资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数<br>组，容量是11个元素，还有一个充当哨兵</p>\n<h3 id=\"1-5-自主设计日志系统\"><a href=\"#1-5-自主设计日志系统\" class=\"headerlink\" title=\"1.5 自主设计日志系统\"></a>1.5 <a href=\"https://www.jianshu.com/p/74f121bfd9e9\">自主设计日志系统</a></h3><ul>\n<li><a href=\"https://blog.csdn.net/GGGHub/article/details/71430037\">浅谈iOS日志收集系统</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-日志内容\"><a href=\"#1-日志内容\" class=\"headerlink\" title=\"1. 日志内容\"></a>1. 日志内容</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">时间|日志级别|类名_函数名_行数|分类|Log内容</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-获取类名\"><a href=\"#1-1-获取类名\" class=\"headerlink\" title=\"1.1 获取类名\"></a>1.1 获取类名</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension NSObject &#123;</span><br><span class=\"line\">    var className: String &#123;</span><br><span class=\"line\">        return String(describing: type(of: self)).components(separatedBy: &quot;.&quot;).last!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class var className: String &#123;</span><br><span class=\"line\">        return String(describing: self).components(separatedBy: &quot;.&quot;).last!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-生成log函数\"><a href=\"#1-2-生成log函数\" class=\"headerlink\" title=\"1.2 生成log函数\"></a>1.2 生成log函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public func createLog(level: DebugLevel, targetClass: AnyClass, type: OperateType, content: String,  _ line: Int = #line, _ function: String = #function)</span><br><span class=\"line\">-&gt; String &#123;</span><br><span class=\"line\">    let lineStr = String.init(format: &quot;line:%d&quot;, line)</span><br><span class=\"line\">    let levelStr = levelToString(level: level)</span><br><span class=\"line\">    let separator = &quot;|&quot;</span><br><span class=\"line\">    let classSeparator = &quot;_&quot;</span><br><span class=\"line\">    let log: String = Date().toString() + separator + levelStr + separator + targetClass.className + classSeparator + function + classSeparator + lineStr + separator + content + &quot;\\n&quot;</span><br><span class=\"line\">    print(log)</span><br><span class=\"line\">    return log</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-日志文件操作\"><a href=\"#1-3-日志文件操作\" class=\"headerlink\" title=\"1.3 日志文件操作\"></a>1.3 日志文件操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public protocol LogStorageProtocol &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// 获取日志缓存地址</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Returns: String</span><br><span class=\"line\">    func getCachePath() -&gt; String</span><br><span class=\"line\"></span><br><span class=\"line\">    /// 删除文件</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Parameter fileName: String</span><br><span class=\"line\">    /// - Returns: Bool</span><br><span class=\"line\">    func deleteFile(fileName: String) -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">    /// 清除全部日志缓存</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Returns: Bool</span><br><span class=\"line\">    func cleanCache() -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">    /// 读取日志文件</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Parameter fileName: String</span><br><span class=\"line\">    /// - Returns: Data</span><br><span class=\"line\">    func readFile(fileName: String) -&gt; Data?</span><br><span class=\"line\"></span><br><span class=\"line\">    /// 更新写入Log数据</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Parameters:</span><br><span class=\"line\">    ///   - fileName: String</span><br><span class=\"line\">    ///   - data: Data</span><br><span class=\"line\">    /// - Returns: Data</span><br><span class=\"line\">    func updateFile(fileName: String, data: Data) -&gt; Bool</span><br><span class=\"line\"></span><br><span class=\"line\">    /// 自动根据天数创建文件名</span><br><span class=\"line\">    ///</span><br><span class=\"line\">    /// - Returns: String</span><br><span class=\"line\">    func createFileName() -&gt; String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-策略\"><a href=\"#1-4-策略\" class=\"headerlink\" title=\"1.4 策略\"></a>1.4 策略</h3><p>而这个十条一写，没有达到标准的就暂时保存在内存里，我的想法是创建一个循环队列，<br>根据FIFO原则，当满足十条Log时，做一次写入操作，而循环队列在空间上是非常节省<br>资源的，如果没有满足十条日志，那就都暂存在队列里，整个开销就是循环队列的一个数<br>组，容量是11个元素，还有一个充当哨兵</p>\n<h3 id=\"1-5-自主设计日志系统\"><a href=\"#1-5-自主设计日志系统\" class=\"headerlink\" title=\"1.5 自主设计日志系统\"></a>1.5 <a href=\"https://www.jianshu.com/p/74f121bfd9e9\">自主设计日志系统</a></h3><ul>\n<li><a href=\"https://blog.csdn.net/GGGHub/article/details/71430037\">浅谈iOS日志收集系统</a></li>\n</ul>\n"},{"title":"iOS之安全","abbrlink":"d5d0e41f","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Network/NetSecure.md","raw":"---\ntitle: iOS之安全\nabbrlink: d5d0e41f\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Network/NetSecure","published":1,"updated":"2021-07-29T06:46:00.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn20001riu9k52y2ewya","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之网络","abbrlink":"4900ec90","date":"2021-04-20T13:36:02.000Z","_content":"## 1. 网络库\n\n### 1.1 Alamofire\n\nMoya，ObjectMapper，SwiftJson\n\n### 1.2 AFNetWorking\n\nMJExtension\n\n## 2. 原理及协议\n\n### 2.1. TCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\n\n* [即时通讯安全篇（七）：如果这样来理解HTTPS，一篇就够了](http://www.52im.net/forum.php?mod=viewthread&tid=1890&highlight=https)\n\n### 2.2 协议簇、协议栈\n\n## 3. HTTP 2.0\n\n### 3.1 [深入理解http2.0协议，看这篇就够了](https://zhuanlan.zhihu.com/p/89471776)\n\n### 3.2 [从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路](http://www.52im.net/thread-1709-1-1.html)\n\n### 3.3 [HTTTP 2.0原理解析](http://www.jouypub.com/2018/b75b74f86647f1eb8ca4bea6d1353236/)\n\n### 3.4 [HTTP 2.0 协议详解](https://github.com/zqjflash/http2-protocol)\n\n## 4. NSURLProtocol 网络拦截\n\n### 4.1 [NSURLProtocol](https://blog.csdn.net/zgpeace/article/details/105853714)\n\n## 5. [Alamofire HTTPS认证](https://juejin.cn/post/6844903928925011981)\n\n### 5.1 [HTTPS Server Trust Evaluation](https://developer.apple.com/library/archive/technotes/tn2232/_index.html)\n","source":"_posts/iOS/Network/Network.md","raw":"---\ntitle: iOS之网络\nabbrlink: 4900ec90\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. 网络库\n\n### 1.1 Alamofire\n\nMoya，ObjectMapper，SwiftJson\n\n### 1.2 AFNetWorking\n\nMJExtension\n\n## 2. 原理及协议\n\n### 2.1. TCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\n\n* [即时通讯安全篇（七）：如果这样来理解HTTPS，一篇就够了](http://www.52im.net/forum.php?mod=viewthread&tid=1890&highlight=https)\n\n### 2.2 协议簇、协议栈\n\n## 3. HTTP 2.0\n\n### 3.1 [深入理解http2.0协议，看这篇就够了](https://zhuanlan.zhihu.com/p/89471776)\n\n### 3.2 [从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路](http://www.52im.net/thread-1709-1-1.html)\n\n### 3.3 [HTTTP 2.0原理解析](http://www.jouypub.com/2018/b75b74f86647f1eb8ca4bea6d1353236/)\n\n### 3.4 [HTTP 2.0 协议详解](https://github.com/zqjflash/http2-protocol)\n\n## 4. NSURLProtocol 网络拦截\n\n### 4.1 [NSURLProtocol](https://blog.csdn.net/zgpeace/article/details/105853714)\n\n## 5. [Alamofire HTTPS认证](https://juejin.cn/post/6844903928925011981)\n\n### 5.1 [HTTPS Server Trust Evaluation](https://developer.apple.com/library/archive/technotes/tn2232/_index.html)\n","slug":"iOS/Network/Network","published":1,"updated":"2021-09-16T06:42:30.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn21001siu9k8jd6ea0b","content":"<h2 id=\"1-网络库\"><a href=\"#1-网络库\" class=\"headerlink\" title=\"1. 网络库\"></a>1. 网络库</h2><h3 id=\"1-1-Alamofire\"><a href=\"#1-1-Alamofire\" class=\"headerlink\" title=\"1.1 Alamofire\"></a>1.1 Alamofire</h3><p>Moya，ObjectMapper，SwiftJson</p>\n<h3 id=\"1-2-AFNetWorking\"><a href=\"#1-2-AFNetWorking\" class=\"headerlink\" title=\"1.2 AFNetWorking\"></a>1.2 AFNetWorking</h3><p>MJExtension</p>\n<h2 id=\"2-原理及协议\"><a href=\"#2-原理及协议\" class=\"headerlink\" title=\"2. 原理及协议\"></a>2. 原理及协议</h2><h3 id=\"2-1-TCP-IP、UDP（KCP）、HTTPS、HTTP2-0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\"><a href=\"#2-1-TCP-IP、UDP（KCP）、HTTPS、HTTP2-0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\" class=\"headerlink\" title=\"2.1. TCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\"></a>2.1. TCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP</h3><ul>\n<li><a href=\"http://www.52im.net/forum.php?mod=viewthread&tid=1890&highlight=https\">即时通讯安全篇（七）：如果这样来理解HTTPS，一篇就够了</a></li>\n</ul>\n<h3 id=\"2-2-协议簇、协议栈\"><a href=\"#2-2-协议簇、协议栈\" class=\"headerlink\" title=\"2.2 协议簇、协议栈\"></a>2.2 协议簇、协议栈</h3><h2 id=\"3-HTTP-2-0\"><a href=\"#3-HTTP-2-0\" class=\"headerlink\" title=\"3. HTTP 2.0\"></a>3. HTTP 2.0</h2><h3 id=\"3-1-深入理解http2-0协议，看这篇就够了\"><a href=\"#3-1-深入理解http2-0协议，看这篇就够了\" class=\"headerlink\" title=\"3.1 深入理解http2.0协议，看这篇就够了\"></a>3.1 <a href=\"https://zhuanlan.zhihu.com/p/89471776\">深入理解http2.0协议，看这篇就够了</a></h3><h3 id=\"3-2-从HTTP-0-9到HTTP-2：一文读懂HTTP协议的历史演变和设计思路\"><a href=\"#3-2-从HTTP-0-9到HTTP-2：一文读懂HTTP协议的历史演变和设计思路\" class=\"headerlink\" title=\"3.2 从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路\"></a>3.2 <a href=\"http://www.52im.net/thread-1709-1-1.html\">从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路</a></h3><h3 id=\"3-3-HTTTP-2-0原理解析\"><a href=\"#3-3-HTTTP-2-0原理解析\" class=\"headerlink\" title=\"3.3 HTTTP 2.0原理解析\"></a>3.3 <a href=\"http://www.jouypub.com/2018/b75b74f86647f1eb8ca4bea6d1353236/\">HTTTP 2.0原理解析</a></h3><h3 id=\"3-4-HTTP-2-0-协议详解\"><a href=\"#3-4-HTTP-2-0-协议详解\" class=\"headerlink\" title=\"3.4 HTTP 2.0 协议详解\"></a>3.4 <a href=\"https://github.com/zqjflash/http2-protocol\">HTTP 2.0 协议详解</a></h3><h2 id=\"4-NSURLProtocol-网络拦截\"><a href=\"#4-NSURLProtocol-网络拦截\" class=\"headerlink\" title=\"4. NSURLProtocol 网络拦截\"></a>4. NSURLProtocol 网络拦截</h2><h3 id=\"4-1-NSURLProtocol\"><a href=\"#4-1-NSURLProtocol\" class=\"headerlink\" title=\"4.1 NSURLProtocol\"></a>4.1 <a href=\"https://blog.csdn.net/zgpeace/article/details/105853714\">NSURLProtocol</a></h3><h2 id=\"5-Alamofire-HTTPS认证\"><a href=\"#5-Alamofire-HTTPS认证\" class=\"headerlink\" title=\"5. Alamofire HTTPS认证\"></a>5. <a href=\"https://juejin.cn/post/6844903928925011981\">Alamofire HTTPS认证</a></h2><h3 id=\"5-1-HTTPS-Server-Trust-Evaluation\"><a href=\"#5-1-HTTPS-Server-Trust-Evaluation\" class=\"headerlink\" title=\"5.1 HTTPS Server Trust Evaluation\"></a>5.1 <a href=\"https://developer.apple.com/library/archive/technotes/tn2232/_index.html\">HTTPS Server Trust Evaluation</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-网络库\"><a href=\"#1-网络库\" class=\"headerlink\" title=\"1. 网络库\"></a>1. 网络库</h2><h3 id=\"1-1-Alamofire\"><a href=\"#1-1-Alamofire\" class=\"headerlink\" title=\"1.1 Alamofire\"></a>1.1 Alamofire</h3><p>Moya，ObjectMapper，SwiftJson</p>\n<h3 id=\"1-2-AFNetWorking\"><a href=\"#1-2-AFNetWorking\" class=\"headerlink\" title=\"1.2 AFNetWorking\"></a>1.2 AFNetWorking</h3><p>MJExtension</p>\n<h2 id=\"2-原理及协议\"><a href=\"#2-原理及协议\" class=\"headerlink\" title=\"2. 原理及协议\"></a>2. 原理及协议</h2><h3 id=\"2-1-TCP-IP、UDP（KCP）、HTTPS、HTTP2-0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\"><a href=\"#2-1-TCP-IP、UDP（KCP）、HTTPS、HTTP2-0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\" class=\"headerlink\" title=\"2.1. TCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP\"></a>2.1. TCP/IP、UDP（KCP）、HTTPS、HTTP2.0、Socket、RTMP、FRP、UPnP、VPN、DNS、（N）ARP、令牌网络、ICMP</h3><ul>\n<li><a href=\"http://www.52im.net/forum.php?mod=viewthread&tid=1890&highlight=https\">即时通讯安全篇（七）：如果这样来理解HTTPS，一篇就够了</a></li>\n</ul>\n<h3 id=\"2-2-协议簇、协议栈\"><a href=\"#2-2-协议簇、协议栈\" class=\"headerlink\" title=\"2.2 协议簇、协议栈\"></a>2.2 协议簇、协议栈</h3><h2 id=\"3-HTTP-2-0\"><a href=\"#3-HTTP-2-0\" class=\"headerlink\" title=\"3. HTTP 2.0\"></a>3. HTTP 2.0</h2><h3 id=\"3-1-深入理解http2-0协议，看这篇就够了\"><a href=\"#3-1-深入理解http2-0协议，看这篇就够了\" class=\"headerlink\" title=\"3.1 深入理解http2.0协议，看这篇就够了\"></a>3.1 <a href=\"https://zhuanlan.zhihu.com/p/89471776\">深入理解http2.0协议，看这篇就够了</a></h3><h3 id=\"3-2-从HTTP-0-9到HTTP-2：一文读懂HTTP协议的历史演变和设计思路\"><a href=\"#3-2-从HTTP-0-9到HTTP-2：一文读懂HTTP协议的历史演变和设计思路\" class=\"headerlink\" title=\"3.2 从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路\"></a>3.2 <a href=\"http://www.52im.net/thread-1709-1-1.html\">从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路</a></h3><h3 id=\"3-3-HTTTP-2-0原理解析\"><a href=\"#3-3-HTTTP-2-0原理解析\" class=\"headerlink\" title=\"3.3 HTTTP 2.0原理解析\"></a>3.3 <a href=\"http://www.jouypub.com/2018/b75b74f86647f1eb8ca4bea6d1353236/\">HTTTP 2.0原理解析</a></h3><h3 id=\"3-4-HTTP-2-0-协议详解\"><a href=\"#3-4-HTTP-2-0-协议详解\" class=\"headerlink\" title=\"3.4 HTTP 2.0 协议详解\"></a>3.4 <a href=\"https://github.com/zqjflash/http2-protocol\">HTTP 2.0 协议详解</a></h3><h2 id=\"4-NSURLProtocol-网络拦截\"><a href=\"#4-NSURLProtocol-网络拦截\" class=\"headerlink\" title=\"4. NSURLProtocol 网络拦截\"></a>4. NSURLProtocol 网络拦截</h2><h3 id=\"4-1-NSURLProtocol\"><a href=\"#4-1-NSURLProtocol\" class=\"headerlink\" title=\"4.1 NSURLProtocol\"></a>4.1 <a href=\"https://blog.csdn.net/zgpeace/article/details/105853714\">NSURLProtocol</a></h3><h2 id=\"5-Alamofire-HTTPS认证\"><a href=\"#5-Alamofire-HTTPS认证\" class=\"headerlink\" title=\"5. Alamofire HTTPS认证\"></a>5. <a href=\"https://juejin.cn/post/6844903928925011981\">Alamofire HTTPS认证</a></h2><h3 id=\"5-1-HTTPS-Server-Trust-Evaluation\"><a href=\"#5-1-HTTPS-Server-Trust-Evaluation\" class=\"headerlink\" title=\"5.1 HTTPS Server Trust Evaluation\"></a>5.1 <a href=\"https://developer.apple.com/library/archive/technotes/tn2232/_index.html\">HTTPS Server Trust Evaluation</a></h3>"},{"title":"iOS之移动端网络优化","abbrlink":"ff025f96","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1 [即时通讯网](http://www.52im.net/)\n\n### 1.1 [从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路](http://www.52im.net/thread-1709-1-1.html)\n\n## 2. 网络优化\n\n### 2.1 DNS\n\n#### 2.1.1 [百度APP移动端网络深度优化实践分享(一)：DNS优化篇](http://www.52im.net/thread-2472-1-1.html)\n\n### 2.2 链接\n\n#### 2.2.1 [百度APP移动端网络深度优化实践分享(二)：网络连接优化篇](http://www.52im.net/thread-2479-1-1.html)\n\n### 2.3  弱网优化\n\n#### 2.3.1 [弱网优化](http://www.52im.net/forum.php?mod=collection&action=view&ctid=26&fromop=all)\n\n#### 2.3.2 [网络编程懒人入门(十)：一泡尿的时间，快速读懂QUIC协议](http://www.52im.net/thread-2816-1-1.html)\n\n### 2.4 [美团点评的移动端网络优化实践：大幅提升连接成功率、速度等](https://segmentfault.com/a/1190000022781635)\n\n## 3. [移动端DNS域名劫持等杂症：原理、根源、HttpDNS解决方案等](http://www.52im.net/thread-2121-1-1.html)\n","source":"_posts/iOS/Network/NetworkOptimize.md","raw":"---\ntitle: iOS之移动端网络优化\nabbrlink: ff025f96\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1 [即时通讯网](http://www.52im.net/)\n\n### 1.1 [从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路](http://www.52im.net/thread-1709-1-1.html)\n\n## 2. 网络优化\n\n### 2.1 DNS\n\n#### 2.1.1 [百度APP移动端网络深度优化实践分享(一)：DNS优化篇](http://www.52im.net/thread-2472-1-1.html)\n\n### 2.2 链接\n\n#### 2.2.1 [百度APP移动端网络深度优化实践分享(二)：网络连接优化篇](http://www.52im.net/thread-2479-1-1.html)\n\n### 2.3  弱网优化\n\n#### 2.3.1 [弱网优化](http://www.52im.net/forum.php?mod=collection&action=view&ctid=26&fromop=all)\n\n#### 2.3.2 [网络编程懒人入门(十)：一泡尿的时间，快速读懂QUIC协议](http://www.52im.net/thread-2816-1-1.html)\n\n### 2.4 [美团点评的移动端网络优化实践：大幅提升连接成功率、速度等](https://segmentfault.com/a/1190000022781635)\n\n## 3. [移动端DNS域名劫持等杂症：原理、根源、HttpDNS解决方案等](http://www.52im.net/thread-2121-1-1.html)\n","slug":"iOS/Network/NetworkOptimize","published":1,"updated":"2021-09-22T06:56:40.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn22001tiu9k0c8sc359","content":"<h2 id=\"1-即时通讯网\"><a href=\"#1-即时通讯网\" class=\"headerlink\" title=\"1 即时通讯网\"></a>1 <a href=\"http://www.52im.net/\">即时通讯网</a></h2><h3 id=\"1-1-从HTTP-0-9到HTTP-2：一文读懂HTTP协议的历史演变和设计思路\"><a href=\"#1-1-从HTTP-0-9到HTTP-2：一文读懂HTTP协议的历史演变和设计思路\" class=\"headerlink\" title=\"1.1 从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路\"></a>1.1 <a href=\"http://www.52im.net/thread-1709-1-1.html\">从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路</a></h3><h2 id=\"2-网络优化\"><a href=\"#2-网络优化\" class=\"headerlink\" title=\"2. 网络优化\"></a>2. 网络优化</h2><h3 id=\"2-1-DNS\"><a href=\"#2-1-DNS\" class=\"headerlink\" title=\"2.1 DNS\"></a>2.1 DNS</h3><h4 id=\"2-1-1-百度APP移动端网络深度优化实践分享-一-：DNS优化篇\"><a href=\"#2-1-1-百度APP移动端网络深度优化实践分享-一-：DNS优化篇\" class=\"headerlink\" title=\"2.1.1 百度APP移动端网络深度优化实践分享(一)：DNS优化篇\"></a>2.1.1 <a href=\"http://www.52im.net/thread-2472-1-1.html\">百度APP移动端网络深度优化实践分享(一)：DNS优化篇</a></h4><h3 id=\"2-2-链接\"><a href=\"#2-2-链接\" class=\"headerlink\" title=\"2.2 链接\"></a>2.2 链接</h3><h4 id=\"2-2-1-百度APP移动端网络深度优化实践分享-二-：网络连接优化篇\"><a href=\"#2-2-1-百度APP移动端网络深度优化实践分享-二-：网络连接优化篇\" class=\"headerlink\" title=\"2.2.1 百度APP移动端网络深度优化实践分享(二)：网络连接优化篇\"></a>2.2.1 <a href=\"http://www.52im.net/thread-2479-1-1.html\">百度APP移动端网络深度优化实践分享(二)：网络连接优化篇</a></h4><h3 id=\"2-3-弱网优化\"><a href=\"#2-3-弱网优化\" class=\"headerlink\" title=\"2.3  弱网优化\"></a>2.3  弱网优化</h3><h4 id=\"2-3-1-弱网优化\"><a href=\"#2-3-1-弱网优化\" class=\"headerlink\" title=\"2.3.1 弱网优化\"></a>2.3.1 <a href=\"http://www.52im.net/forum.php?mod=collection&action=view&ctid=26&fromop=all\">弱网优化</a></h4><h4 id=\"2-3-2-网络编程懒人入门-十-：一泡尿的时间，快速读懂QUIC协议\"><a href=\"#2-3-2-网络编程懒人入门-十-：一泡尿的时间，快速读懂QUIC协议\" class=\"headerlink\" title=\"2.3.2 网络编程懒人入门(十)：一泡尿的时间，快速读懂QUIC协议\"></a>2.3.2 <a href=\"http://www.52im.net/thread-2816-1-1.html\">网络编程懒人入门(十)：一泡尿的时间，快速读懂QUIC协议</a></h4><h3 id=\"2-4-美团点评的移动端网络优化实践：大幅提升连接成功率、速度等\"><a href=\"#2-4-美团点评的移动端网络优化实践：大幅提升连接成功率、速度等\" class=\"headerlink\" title=\"2.4 美团点评的移动端网络优化实践：大幅提升连接成功率、速度等\"></a>2.4 <a href=\"https://segmentfault.com/a/1190000022781635\">美团点评的移动端网络优化实践：大幅提升连接成功率、速度等</a></h3><h2 id=\"3-移动端DNS域名劫持等杂症：原理、根源、HttpDNS解决方案等\"><a href=\"#3-移动端DNS域名劫持等杂症：原理、根源、HttpDNS解决方案等\" class=\"headerlink\" title=\"3. 移动端DNS域名劫持等杂症：原理、根源、HttpDNS解决方案等\"></a>3. <a href=\"http://www.52im.net/thread-2121-1-1.html\">移动端DNS域名劫持等杂症：原理、根源、HttpDNS解决方案等</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-即时通讯网\"><a href=\"#1-即时通讯网\" class=\"headerlink\" title=\"1 即时通讯网\"></a>1 <a href=\"http://www.52im.net/\">即时通讯网</a></h2><h3 id=\"1-1-从HTTP-0-9到HTTP-2：一文读懂HTTP协议的历史演变和设计思路\"><a href=\"#1-1-从HTTP-0-9到HTTP-2：一文读懂HTTP协议的历史演变和设计思路\" class=\"headerlink\" title=\"1.1 从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路\"></a>1.1 <a href=\"http://www.52im.net/thread-1709-1-1.html\">从HTTP/0.9到HTTP/2：一文读懂HTTP协议的历史演变和设计思路</a></h3><h2 id=\"2-网络优化\"><a href=\"#2-网络优化\" class=\"headerlink\" title=\"2. 网络优化\"></a>2. 网络优化</h2><h3 id=\"2-1-DNS\"><a href=\"#2-1-DNS\" class=\"headerlink\" title=\"2.1 DNS\"></a>2.1 DNS</h3><h4 id=\"2-1-1-百度APP移动端网络深度优化实践分享-一-：DNS优化篇\"><a href=\"#2-1-1-百度APP移动端网络深度优化实践分享-一-：DNS优化篇\" class=\"headerlink\" title=\"2.1.1 百度APP移动端网络深度优化实践分享(一)：DNS优化篇\"></a>2.1.1 <a href=\"http://www.52im.net/thread-2472-1-1.html\">百度APP移动端网络深度优化实践分享(一)：DNS优化篇</a></h4><h3 id=\"2-2-链接\"><a href=\"#2-2-链接\" class=\"headerlink\" title=\"2.2 链接\"></a>2.2 链接</h3><h4 id=\"2-2-1-百度APP移动端网络深度优化实践分享-二-：网络连接优化篇\"><a href=\"#2-2-1-百度APP移动端网络深度优化实践分享-二-：网络连接优化篇\" class=\"headerlink\" title=\"2.2.1 百度APP移动端网络深度优化实践分享(二)：网络连接优化篇\"></a>2.2.1 <a href=\"http://www.52im.net/thread-2479-1-1.html\">百度APP移动端网络深度优化实践分享(二)：网络连接优化篇</a></h4><h3 id=\"2-3-弱网优化\"><a href=\"#2-3-弱网优化\" class=\"headerlink\" title=\"2.3  弱网优化\"></a>2.3  弱网优化</h3><h4 id=\"2-3-1-弱网优化\"><a href=\"#2-3-1-弱网优化\" class=\"headerlink\" title=\"2.3.1 弱网优化\"></a>2.3.1 <a href=\"http://www.52im.net/forum.php?mod=collection&action=view&ctid=26&fromop=all\">弱网优化</a></h4><h4 id=\"2-3-2-网络编程懒人入门-十-：一泡尿的时间，快速读懂QUIC协议\"><a href=\"#2-3-2-网络编程懒人入门-十-：一泡尿的时间，快速读懂QUIC协议\" class=\"headerlink\" title=\"2.3.2 网络编程懒人入门(十)：一泡尿的时间，快速读懂QUIC协议\"></a>2.3.2 <a href=\"http://www.52im.net/thread-2816-1-1.html\">网络编程懒人入门(十)：一泡尿的时间，快速读懂QUIC协议</a></h4><h3 id=\"2-4-美团点评的移动端网络优化实践：大幅提升连接成功率、速度等\"><a href=\"#2-4-美团点评的移动端网络优化实践：大幅提升连接成功率、速度等\" class=\"headerlink\" title=\"2.4 美团点评的移动端网络优化实践：大幅提升连接成功率、速度等\"></a>2.4 <a href=\"https://segmentfault.com/a/1190000022781635\">美团点评的移动端网络优化实践：大幅提升连接成功率、速度等</a></h3><h2 id=\"3-移动端DNS域名劫持等杂症：原理、根源、HttpDNS解决方案等\"><a href=\"#3-移动端DNS域名劫持等杂症：原理、根源、HttpDNS解决方案等\" class=\"headerlink\" title=\"3. 移动端DNS域名劫持等杂症：原理、根源、HttpDNS解决方案等\"></a>3. <a href=\"http://www.52im.net/thread-2121-1-1.html\">移动端DNS域名劫持等杂症：原理、根源、HttpDNS解决方案等</a></h2>"},{"title":"服务认证","abbrlink":37872,"date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. cookie\n\n## 2. session\n\n## 3. [token](https://www.cnblogs.com/loveer/p/11429034.html)\n\n## 4. [JWT token](https://blog.csdn.net/sinat_35322593/article/details/88637897)\n\n## [oAuth2.0](https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html)\n\n## SSL Ping\n","source":"_posts/iOS/Network/服务认证.md","raw":"---\ntitle: 服务认证\nabbrlink: 37872\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. cookie\n\n## 2. session\n\n## 3. [token](https://www.cnblogs.com/loveer/p/11429034.html)\n\n## 4. [JWT token](https://blog.csdn.net/sinat_35322593/article/details/88637897)\n\n## [oAuth2.0](https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html)\n\n## SSL Ping\n","slug":"iOS/Network/服务认证","published":1,"updated":"2021-09-22T06:56:40.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn22001viu9k555qd3wq","content":"<h2 id=\"1-cookie\"><a href=\"#1-cookie\" class=\"headerlink\" title=\"1. cookie\"></a>1. cookie</h2><h2 id=\"2-session\"><a href=\"#2-session\" class=\"headerlink\" title=\"2. session\"></a>2. session</h2><h2 id=\"3-token\"><a href=\"#3-token\" class=\"headerlink\" title=\"3. token\"></a>3. <a href=\"https://www.cnblogs.com/loveer/p/11429034.html\">token</a></h2><h2 id=\"4-JWT-token\"><a href=\"#4-JWT-token\" class=\"headerlink\" title=\"4. JWT token\"></a>4. <a href=\"https://blog.csdn.net/sinat_35322593/article/details/88637897\">JWT token</a></h2><h2 id=\"oAuth2-0\"><a href=\"#oAuth2-0\" class=\"headerlink\" title=\"oAuth2.0\"></a><a href=\"https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html\">oAuth2.0</a></h2><h2 id=\"SSL-Ping\"><a href=\"#SSL-Ping\" class=\"headerlink\" title=\"SSL Ping\"></a>SSL Ping</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-cookie\"><a href=\"#1-cookie\" class=\"headerlink\" title=\"1. cookie\"></a>1. cookie</h2><h2 id=\"2-session\"><a href=\"#2-session\" class=\"headerlink\" title=\"2. session\"></a>2. session</h2><h2 id=\"3-token\"><a href=\"#3-token\" class=\"headerlink\" title=\"3. token\"></a>3. <a href=\"https://www.cnblogs.com/loveer/p/11429034.html\">token</a></h2><h2 id=\"4-JWT-token\"><a href=\"#4-JWT-token\" class=\"headerlink\" title=\"4. JWT token\"></a>4. <a href=\"https://blog.csdn.net/sinat_35322593/article/details/88637897\">JWT token</a></h2><h2 id=\"oAuth2-0\"><a href=\"#oAuth2-0\" class=\"headerlink\" title=\"oAuth2.0\"></a><a href=\"https://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html\">oAuth2.0</a></h2><h2 id=\"SSL-Ping\"><a href=\"#SSL-Ping\" class=\"headerlink\" title=\"SSL Ping\"></a>SSL Ping</h2>"},{"title":"网络协议","abbrlink":"1cd3002f","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1.协议簇、协议栈\n\n![流程](./Resource/protocols.png)\n\n## 2. 网络协议工作流程图\n\n![流程](./Resource/stream2.jpg)\n\n## 3. 链路层 协议\n\n![流程](./Resource/Ethernet.png)\n\n## 4. IP协议\n\n![流程](./Resource/IP.png)\n\n* 版本: 占4位,指IP协议的版本.通信双方使用的IP协议版本必须一致.日前广泛使用的 IP协议版本号为 4 (即 IPv4).IPv6 目前还处于起步阶段.\n\n* 首部长度:占 4 位,可表示的最大十进制数值是15.请注意,这个字段所表示数的单位是32位字 (1个32位字长是4 字节),因此,当 IP 的首部长度为 1111 时 (即十进制的 15),首部长度就达到 60字节.当 IP 分组的首部长度不是4字节的整数倍时,必须利用最后的填充字段加以填充.因此数据部分永远在 4字节的整数倍开始,这样在实现 IP协议时较为方便.首部长度限制为 60字节的缺点是有时可能不够用.这样做的目的是希望用户尽量减少开销.最常用的首部长度就是 20 字节 (即首部长度为 0101),这时不使用任何选项.\n\n* 服务:占 8 位,用来获得更好的服务.这个字段在旧标准中叫做服务类型,但实际上一直没有被使用过.1998年IETF把这个字段改名为区分服务 DS(Differentiated Services).只有在使用区分服务时,这个字段才起作用.\n\n* 总长度:总长度指首都及数据之和的长度,单位为字节.因为总长度字段为 16位,所以数据报的最大长度为 216-1=65 535字节.在IP层下面的每一种数据链路层都有自己的帧格式,其中包括帧格式中的数据字段的最大长度,即最大传送单元 MTU (Maximum Transfer Unit).当一个数据报封装成链路层的帧时,此数据报的总长度 (即首部加上数据部分)一定不能超过下面的数据链路层的MTU值,否则要分片.\n\n* 标识 (Identification):占 16位.IP软件在存储器中维持一个计数器,每产生一个数据报,计数器就加 1,并将此值赋给标识字段.但这个\"标识\"并不是序号,因为 IP是无连接的服务,数据报不存在按序接收的问题.当数据报由于长度超过网络的 MTU 而必须分片时,这个标识字段的值就被复制到所有的数据报的标识字段中.相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报.\n\n* 标志 (Flag):占3 位,但目前只有2位有意义. 标志字段中的最低位记为 MF(More Fragment).MF=1即表示后面\"还有分片\"的数据报.MF=0表示这已是若干数据报片中的最后一个.标志字段中间的一位记为DF(Don't Fragment),意思是\"不能分片\",只有当 DF=0时才允许分片.\n\n* 片偏移:占 13位.较长的分组在分片后,某片在原分组中的相对位置.也就是说,相对用户数据字段的起点,该片从何处开始.片偏移以 8个字节为偏移单位,这就是说,每个分片的长度一定是 8字节(64位)的整数倍.\n\n* 生存时间:占 8位,生存时间字段常用的英文缩写是TTL(Time To Live),其表明数据报在网络中的寿命.由发出数据报的源点设置这个字段.其目的是防止无法交付的数据报无限制地在因特网中兜圈子,因而白白消耗网络资源.最初的设计是以秒作为 TTL的单位.每经过一个路由器时,就把TTL减去数据报在路由器消耗掉的一段时间.若数据报在路由器消耗的时间小于 1 秒,就把TTL值减 1.当 TTL值为 0时,就丢弃这个数据报.\n\n* 协议:占 8 位.协议字段指出此数据报携带的数据是使用何种协议,以便使目的主机的IP层知道应将数据部分上交给哪个处理过程.详细资料请看文章最后附录一[^附录一].\n* 首部检验和:占 16位.这个字段只检验数据报的首部,但不包括数据部分.这是因为数据报每经过一个路由器,都要重新计算一下首都检验和 (一些字段,如生存时间,标志,片偏移等都可能发生变化),不检验数据部分可减少计算的工作量.\n\n* 源地址:占32位.\n\n* 目的地址:占 32位.\n\n* IP数据报首部的可变部分\n\n> IP首部的可变部分就是一个可选字段.选项字段用来支持排错,测量以及安全等措施,内容很丰富.此字段的长度可变,从1个字节到40个字节不等,取决于所选择的项目.某些选项项目只需要1个字节,它只包括1个字节的选项代码.但还有些选项需要多个字节,这些选项一个个拼接起来,中间不需要有分隔符,最后用全0的填充字段补齐成为4字节的整数倍.\n> 增加首部的可变部分是为了增加IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的.这就增加了每一个路由器处理数据报的开销,实际上这些选项很少被使用.新的IP版本IPv6就将IP数据报的首部长度做成固定的.\n\n目前,这些任选项定义如下:\n\n1. 安全和处理限制(用于军事领域);\n2. 记录路径(让每个路由器都记下它的IP地址);\n3. 时间戳(Time Stamp)(让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间);\n4. 宽松的源站路由(Loose Source Route)(为数据报指定一系列必须经过的IP地址);\n5. 严格的源站路由(Strict Source Route)(与宽松的源站路由类似,但是要求只能经过指定的这些地址,不能经过其他的地址).\n这些选项很少被使用,并非所有主机和路由器都支持这些选项.\n\n## 5. TCP 协议\n\n![流程](./Resource/TCP.gif)\n\n1、端口号：用来标识同一台计算机的不同的应用进程。\n\n1）源端口：源端口和IP地址的作用是标识报文的返回地址。\n\n2）目的端口：端口指明接收方计算机上的应用程序接口。\n\nTCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。\n\n2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。\n\n3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。\n\n4、保留：为将来定义新的用途保留，现在一般置0。\n\n5、控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。\n\n1）URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。\n\n2）ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。\n\n3）PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。\n\n4）RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。\n\n5）SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。\n\n6）FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。\n\n6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。\n\n7、校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。\n\n8、紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。\n\n9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。\n\n10、数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段\n\n```c\nstruct tcphdr {\n    __be16 source;//  16位源端口号\n    __be16 dest; //16位目的端口号\n    __be32 seq; //序列号\n    __be32 ack_seq; //确认号\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u16   res1:4,//保留位\n            doff:4, //tcp报头长度\n            fin:1,\n            syn:1,\n            rst:1,\n            psh:1,\n            ack:1,\n            urg:1,\n            ece:1,//ECN回显（发送方接受到了一个更早的拥塞通告)\n            cwr:1;//拥塞窗口减（发送方降低它的发送速率)\n#elif defined(__BIG_ENDIAN_BITFIELD)\n    __u16   doff:4,\n            res1:4,\n            cwr:1,\n            ece:1,\n            urg:1,\n            ack:1,\n            psh:1,\n            rst:1,\n            syn:1,\n            fin:1;\n#else\n#error \"Adjust your <asm/byteorder.h> defines\"\n#endif\n    __be16 window;//窗口大小\n    __be16 check;//效验和\n    __be16 urg_ptr;//紧急指针\n};\n```\n\n* 拥塞控制、流量控制、慢启动、快恢复、快重传，确认机制、校验和\n\n[校验和](https://blog.csdn.net/qq_15437629/article/details/79183076)：\n\n```text\n首先，把伪首部、TCP报头、TCP数据分为16位的字，如果总长度为奇数个字节，则在最后增添一个位都为0的字节。把TCP报头中的校验和字段置为0（否则就陷入鸡生蛋还是蛋生鸡的问题）。\n其次，用反码相加法累加所有的16位字（进位也要累加）。\n最后，对计算结果取反，作为TCP的校验和。\n```\n\n```C\nunsigned short \nchecksum(unsigned short * addr, int count)\n{\n    long sum = 0;\n    /*\n    计算所有数据的16bit对之和\n    */\n    while( count > 1  )  {\n        /*  This is the inner loop */\n        sum += *(unsigned short*)addr++;\n\n        count -= 2\n    }   \n\n    /* 如果数据长度为奇数，在该字节之后补一个字节(0),\n      然后将其转换为16bit整数，加到上面计算的校验和\n    　　中。\n    */\n    if( count > 0 ) { \n        char left_over[2] = {0};\n        left_over[0] = *addr;\n        sum += * (unsigned short*) left_over;\n    }   \n\n    /*  将32bit数据压缩成16bit数据，即将进位加大校验和\n    　　的低字节上，直到没有进位为止。\n    */\n    while (sum>>16)\n        sum = (sum & 0xffff) + (sum >> 16);\n　　\n    　/*返回校验和的反码*/\n    return ~sum;\n}\n```\n\n## 6. UDP 协议\n\nUDP协议是提供与IP一样的不可靠，无连接的交付服务，UDP报文可能出现丢失，重复或者乱序到达等现象。\n\nUDP协议在IP协议上增加了复用、分用和差错检测功能。UDP的特点：\n\n1. 是无连接的。相比于TCP协议，UDP协议在传送数据前不需要建立连接，当然也就没有释放连接。\n2. 是尽最大努力交付的。也就是说UDP协议无法保证数据能够准确的交付到目的主机。也不需要对接收到的UDP报文进行确认。\n3. 是面向报文的。也就是说UDP协议将应用层传输下来的数据封装在一个UDP包中，不进行拆分或合并。因此，运输层在收到对方的UDP包后，会去掉首部后，将数据原封不动的交给应用进程。\n4. 没有拥塞控制。因此UDP协议的发送速率不送网络的拥塞度影响。\n5. UDP支持一对一、一对多、多对一和多对多的交互通信。\n6. UDP的头部占用较小，只占用8个字节。\n\n![UPD协议](./Resource/UDP.jpeg)\n\n* 源端口：源端口号。在需要对方回信时选用。不需要时可用全0。\n* 目的端口：目的端口号。这在终点交付报文时必须要使用到。\n* 长度： UDP用户数据报的长度，其最小值是8（仅有首部）。\n* 校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。\n\n```c\ntypedef struct udphdr\n{\n    u_short uh_sport;//源端口地址\n    u_short uh_dport;//目的端口地址\n    u_short uh_ulen;//UD报文长度\n    u_short uh_sum;//16位校验和\n}UDP_HEADER;\n```\n\n## 7. KCP——可靠的UDP\n\n## 8. HTTP 协议\n\n![HTTTP 协议](./Resource/HTTP.png)\n\nTCP/IP、UDP(KCP)、HTTPS、HTTP2.0\n\n[HTTPS 升级指南](http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html)\n\n[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n[HTTP 协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html)\n\n[阮一峰网络日志](http://www.ruanyifeng.com/blog/)\n\nSocket(Web socket)、XMPP\n\nRTMP\n\nFRP、UPnP、VPN、WoL\n\nDNS、(N)ARP、令牌网络、ICMP\n\n附录一：\n\n[^附录一]:IP数据包的协议字段中，数值和所对应的协议\n\n| 数值     | 值描述                                      |\n| -------- | ------------------------------------------- |\n| 0        | 保留字段，用于IPv6(跳跃点到跳跃点选项)      |\n| 1        | Internet控制消息                            |\n| 2        | Internet组管理                              |\n| 3        | 网关到网关                                  |\n| 4        | IP中的IP(封装)                              |\n| 5        | 流                                          |\n| 6        | 传输控制                                    |\n| 7        | CBT                                         |\n| 8        | 外部网关协议                                |\n| 9        | 任何私有内部网关(Cisco在它的IGRP实现中使用) |\n| 10       | BBNRCC监视                                  |\n| 11       | 网络语音协议                                |\n| 12       | PUP                                         |\n| 13       | ARGUS                                       |\n| 14       | EMCON                                       |\n| 15       | 网络诊断工具                                |\n| 16       | 混乱(Chaos)                                 |\n| 17       | 用户数据报文                                |\n| 18       | 复用                                        |\n| 19       | DCN测量子系统                               |\n| 20       | 主机监视                                    |\n| 21       | 包无线测量                                  |\n| 22       | XEROXNSIDP                                  |\n| 23       | Trunk-1                                     |\n| 24       | Trunk-2                                     |\n| 25       | leaf-1                                      |\n| 26       | leaf-2                                      |\n| 27       | 可靠的数据协议                              |\n| 28       | Internet可靠交易                            |\n| 29       | ISO传输协议第四类                           |\n| 30       | 大块数据传输协议                            |\n| 31       | MFE网络服务协议                             |\n| 32       | MERIT节点之间协议                           |\n| 33       | 序列交换协议                                |\n| 34       | 第三方连接协议                              |\n| 35       | 域之间策略路由协议                          |\n| 36       | XTP                                         |\n| 37       | 数据报文传递协议                            |\n| 38       | IDPR控制消息传输协议                        |\n| 39       | TP+ +传输协议                               |\n| 40       | IL传输协议                                  |\n| 41       | IPv6                                        |\n| 42       | 资源命令路由协议                            |\n| 43       | IPv6的路由报头                              |\n| 44       | IPv6的片报头                                |\n| 45       | 域之间路由协议                              |\n| 46       | 保留协议                                    |\n| 47       | 通用路由封装                                |\n| 48       | 可移动主机路由协议                          |\n| 49       | BNA                                         |\n| 50       | IPv6封装安全有效负载                        |\n| 51       | IPv6验证报头                                |\n| 52       | 集成的网络层安全TUBA                        |\n| 53       | 带加密的IP                                  |\n| 54       | NBMA地址解析协议                            |\n| 55       | IP可移动性                                  |\n| 56       | 使用Kryptonet钥匙管理的传输层安全协议       |\n| 57       | SKIP                                        |\n| 58       | IPv6的ICMP                                  |\n| 59       | IPv6的无下一个报头                          |\n| 60       | IPv6的信宿选项                              |\n| 61       | 任何主机内部协议                            |\n| 62       | CFTP                                        |\n| 63       | 任何本地网络                                |\n| 64       | SATNET和BackroomEXPAK                       |\n| 65       | Kryptolan                                   |\n| 66       | MIT远程虚拟磁盘协议                         |\n| 67       | Internet Pluribus包核心                     |\n| 68       | 任何分布式文件系统                          |\n| 69       | SATNET监视                                  |\n| 70       | VISA协议                                    |\n| 71       | Internet包核心工具                          |\n| 72       | 计算机协议Network Executive                 |\n| 73       | 计算机协议Heart Beat                        |\n| 74       | Wang Span网络                               |\n| 75       | 包视频协议                                  |\n| 76       | Backroom SATNET监视                         |\n| 77       | SUN ND PROTOCOL—临时                        |\n| 78       | WIDEBAND监视                                |\n| 79       | WIDEBAND EXPAK                              |\n| 80       | ISO Internet协议                            |\n| 81       | VMTP                                        |\n| 82       | SECURE—VMTP(安全的VMTP)                     |\n| 83       | VINES                                       |\n| 84       | TTP                                         |\n| 85       | NSFNET—IGP                                  |\n| 86       | 不同网关协议                                |\n| 87       | TCF                                         |\n| 88       | EIGRP                                       |\n| 89       | OSPFIGP                                     |\n| 90       | Sprite RPC协议                              |\n| 91       | Locus地址解析协议                           |\n| 92       | 多播传输协议                                |\n| 93       | AX.25帧                                     |\n| 94       | IP内部的IP封装协议                          |\n| 95       | 可移动网络互连控制协议                      |\n| 96       | 旗语通讯安全协议                            |\n| 97       | IP中的以太封装                              |\n| 98       | 封装报头                                    |\n| 99       | 任何私有加密方案                            |\n| 100      | GMTP                                        |\n| 101      | Ipsilon流量管理协议                         |\n| 102      | PNNI over IP                                |\n| 103      | 协议独立多播                                |\n| 104      | ARIS                                        |\n| 105      | SCPS                                        |\n| 106      | QNX                                         |\n| 107      | 活动网络                                    |\n| 108      | IP有效负载压缩协议                          |\n| 109      | Sitara网络协议                              |\n| 110      | Compaq对等协议                              |\n| 111      | IP中的IPX                                   |\n| 112      | 虚拟路由器冗余协议                          |\n| 113      | PGM可靠传输协议                             |\n| 114      | 任何0跳跃协议                               |\n| 115      | 第二层隧道协议                              |\n| 116      | D-II数据交换(DDX)                           |\n| 117      | 交互式代理传输协议                          |\n| 118      | 日程计划传输协议                            |\n| 119      | SpectraLink无线协议                         |\n| 120      | UTI                                         |\n| 121      | 简单消息协议                                |\n| 122      | SM                                          |\n| 123      | 性能透明性协议                              |\n| 124      | ISIS over IPv4                              |\n| 125      | FIRE                                        |\n| 126      | Combat无线传输协议                          |\n| 127      | Combat无线用户数据报文                      |\n| 128      | SSCOPMCE                                    |\n| 129      | IPLT                                        |\n| 130      | 安全包防护                                  |\n| 131      | IP中的私有IP封装                            |\n| 132      | 流控制传输协议                              |\n| 133～254 | 未分配                                      |\n| 255      | 保留                                        |\n","source":"_posts/iOS/Network/Protocols.md","raw":"---\ntitle: 网络协议\nabbrlink: 1cd3002f\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1.协议簇、协议栈\n\n![流程](./Resource/protocols.png)\n\n## 2. 网络协议工作流程图\n\n![流程](./Resource/stream2.jpg)\n\n## 3. 链路层 协议\n\n![流程](./Resource/Ethernet.png)\n\n## 4. IP协议\n\n![流程](./Resource/IP.png)\n\n* 版本: 占4位,指IP协议的版本.通信双方使用的IP协议版本必须一致.日前广泛使用的 IP协议版本号为 4 (即 IPv4).IPv6 目前还处于起步阶段.\n\n* 首部长度:占 4 位,可表示的最大十进制数值是15.请注意,这个字段所表示数的单位是32位字 (1个32位字长是4 字节),因此,当 IP 的首部长度为 1111 时 (即十进制的 15),首部长度就达到 60字节.当 IP 分组的首部长度不是4字节的整数倍时,必须利用最后的填充字段加以填充.因此数据部分永远在 4字节的整数倍开始,这样在实现 IP协议时较为方便.首部长度限制为 60字节的缺点是有时可能不够用.这样做的目的是希望用户尽量减少开销.最常用的首部长度就是 20 字节 (即首部长度为 0101),这时不使用任何选项.\n\n* 服务:占 8 位,用来获得更好的服务.这个字段在旧标准中叫做服务类型,但实际上一直没有被使用过.1998年IETF把这个字段改名为区分服务 DS(Differentiated Services).只有在使用区分服务时,这个字段才起作用.\n\n* 总长度:总长度指首都及数据之和的长度,单位为字节.因为总长度字段为 16位,所以数据报的最大长度为 216-1=65 535字节.在IP层下面的每一种数据链路层都有自己的帧格式,其中包括帧格式中的数据字段的最大长度,即最大传送单元 MTU (Maximum Transfer Unit).当一个数据报封装成链路层的帧时,此数据报的总长度 (即首部加上数据部分)一定不能超过下面的数据链路层的MTU值,否则要分片.\n\n* 标识 (Identification):占 16位.IP软件在存储器中维持一个计数器,每产生一个数据报,计数器就加 1,并将此值赋给标识字段.但这个\"标识\"并不是序号,因为 IP是无连接的服务,数据报不存在按序接收的问题.当数据报由于长度超过网络的 MTU 而必须分片时,这个标识字段的值就被复制到所有的数据报的标识字段中.相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报.\n\n* 标志 (Flag):占3 位,但目前只有2位有意义. 标志字段中的最低位记为 MF(More Fragment).MF=1即表示后面\"还有分片\"的数据报.MF=0表示这已是若干数据报片中的最后一个.标志字段中间的一位记为DF(Don't Fragment),意思是\"不能分片\",只有当 DF=0时才允许分片.\n\n* 片偏移:占 13位.较长的分组在分片后,某片在原分组中的相对位置.也就是说,相对用户数据字段的起点,该片从何处开始.片偏移以 8个字节为偏移单位,这就是说,每个分片的长度一定是 8字节(64位)的整数倍.\n\n* 生存时间:占 8位,生存时间字段常用的英文缩写是TTL(Time To Live),其表明数据报在网络中的寿命.由发出数据报的源点设置这个字段.其目的是防止无法交付的数据报无限制地在因特网中兜圈子,因而白白消耗网络资源.最初的设计是以秒作为 TTL的单位.每经过一个路由器时,就把TTL减去数据报在路由器消耗掉的一段时间.若数据报在路由器消耗的时间小于 1 秒,就把TTL值减 1.当 TTL值为 0时,就丢弃这个数据报.\n\n* 协议:占 8 位.协议字段指出此数据报携带的数据是使用何种协议,以便使目的主机的IP层知道应将数据部分上交给哪个处理过程.详细资料请看文章最后附录一[^附录一].\n* 首部检验和:占 16位.这个字段只检验数据报的首部,但不包括数据部分.这是因为数据报每经过一个路由器,都要重新计算一下首都检验和 (一些字段,如生存时间,标志,片偏移等都可能发生变化),不检验数据部分可减少计算的工作量.\n\n* 源地址:占32位.\n\n* 目的地址:占 32位.\n\n* IP数据报首部的可变部分\n\n> IP首部的可变部分就是一个可选字段.选项字段用来支持排错,测量以及安全等措施,内容很丰富.此字段的长度可变,从1个字节到40个字节不等,取决于所选择的项目.某些选项项目只需要1个字节,它只包括1个字节的选项代码.但还有些选项需要多个字节,这些选项一个个拼接起来,中间不需要有分隔符,最后用全0的填充字段补齐成为4字节的整数倍.\n> 增加首部的可变部分是为了增加IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的.这就增加了每一个路由器处理数据报的开销,实际上这些选项很少被使用.新的IP版本IPv6就将IP数据报的首部长度做成固定的.\n\n目前,这些任选项定义如下:\n\n1. 安全和处理限制(用于军事领域);\n2. 记录路径(让每个路由器都记下它的IP地址);\n3. 时间戳(Time Stamp)(让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间);\n4. 宽松的源站路由(Loose Source Route)(为数据报指定一系列必须经过的IP地址);\n5. 严格的源站路由(Strict Source Route)(与宽松的源站路由类似,但是要求只能经过指定的这些地址,不能经过其他的地址).\n这些选项很少被使用,并非所有主机和路由器都支持这些选项.\n\n## 5. TCP 协议\n\n![流程](./Resource/TCP.gif)\n\n1、端口号：用来标识同一台计算机的不同的应用进程。\n\n1）源端口：源端口和IP地址的作用是标识报文的返回地址。\n\n2）目的端口：端口指明接收方计算机上的应用程序接口。\n\nTCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。\n\n2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。\n\n3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。\n\n4、保留：为将来定义新的用途保留，现在一般置0。\n\n5、控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。\n\n1）URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。\n\n2）ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。\n\n3）PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。\n\n4）RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。\n\n5）SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。\n\n6）FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。\n\n6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。\n\n7、校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。\n\n8、紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。\n\n9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。\n\n10、数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段\n\n```c\nstruct tcphdr {\n    __be16 source;//  16位源端口号\n    __be16 dest; //16位目的端口号\n    __be32 seq; //序列号\n    __be32 ack_seq; //确认号\n#if defined(__LITTLE_ENDIAN_BITFIELD)\n    __u16   res1:4,//保留位\n            doff:4, //tcp报头长度\n            fin:1,\n            syn:1,\n            rst:1,\n            psh:1,\n            ack:1,\n            urg:1,\n            ece:1,//ECN回显（发送方接受到了一个更早的拥塞通告)\n            cwr:1;//拥塞窗口减（发送方降低它的发送速率)\n#elif defined(__BIG_ENDIAN_BITFIELD)\n    __u16   doff:4,\n            res1:4,\n            cwr:1,\n            ece:1,\n            urg:1,\n            ack:1,\n            psh:1,\n            rst:1,\n            syn:1,\n            fin:1;\n#else\n#error \"Adjust your <asm/byteorder.h> defines\"\n#endif\n    __be16 window;//窗口大小\n    __be16 check;//效验和\n    __be16 urg_ptr;//紧急指针\n};\n```\n\n* 拥塞控制、流量控制、慢启动、快恢复、快重传，确认机制、校验和\n\n[校验和](https://blog.csdn.net/qq_15437629/article/details/79183076)：\n\n```text\n首先，把伪首部、TCP报头、TCP数据分为16位的字，如果总长度为奇数个字节，则在最后增添一个位都为0的字节。把TCP报头中的校验和字段置为0（否则就陷入鸡生蛋还是蛋生鸡的问题）。\n其次，用反码相加法累加所有的16位字（进位也要累加）。\n最后，对计算结果取反，作为TCP的校验和。\n```\n\n```C\nunsigned short \nchecksum(unsigned short * addr, int count)\n{\n    long sum = 0;\n    /*\n    计算所有数据的16bit对之和\n    */\n    while( count > 1  )  {\n        /*  This is the inner loop */\n        sum += *(unsigned short*)addr++;\n\n        count -= 2\n    }   \n\n    /* 如果数据长度为奇数，在该字节之后补一个字节(0),\n      然后将其转换为16bit整数，加到上面计算的校验和\n    　　中。\n    */\n    if( count > 0 ) { \n        char left_over[2] = {0};\n        left_over[0] = *addr;\n        sum += * (unsigned short*) left_over;\n    }   \n\n    /*  将32bit数据压缩成16bit数据，即将进位加大校验和\n    　　的低字节上，直到没有进位为止。\n    */\n    while (sum>>16)\n        sum = (sum & 0xffff) + (sum >> 16);\n　　\n    　/*返回校验和的反码*/\n    return ~sum;\n}\n```\n\n## 6. UDP 协议\n\nUDP协议是提供与IP一样的不可靠，无连接的交付服务，UDP报文可能出现丢失，重复或者乱序到达等现象。\n\nUDP协议在IP协议上增加了复用、分用和差错检测功能。UDP的特点：\n\n1. 是无连接的。相比于TCP协议，UDP协议在传送数据前不需要建立连接，当然也就没有释放连接。\n2. 是尽最大努力交付的。也就是说UDP协议无法保证数据能够准确的交付到目的主机。也不需要对接收到的UDP报文进行确认。\n3. 是面向报文的。也就是说UDP协议将应用层传输下来的数据封装在一个UDP包中，不进行拆分或合并。因此，运输层在收到对方的UDP包后，会去掉首部后，将数据原封不动的交给应用进程。\n4. 没有拥塞控制。因此UDP协议的发送速率不送网络的拥塞度影响。\n5. UDP支持一对一、一对多、多对一和多对多的交互通信。\n6. UDP的头部占用较小，只占用8个字节。\n\n![UPD协议](./Resource/UDP.jpeg)\n\n* 源端口：源端口号。在需要对方回信时选用。不需要时可用全0。\n* 目的端口：目的端口号。这在终点交付报文时必须要使用到。\n* 长度： UDP用户数据报的长度，其最小值是8（仅有首部）。\n* 校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。\n\n```c\ntypedef struct udphdr\n{\n    u_short uh_sport;//源端口地址\n    u_short uh_dport;//目的端口地址\n    u_short uh_ulen;//UD报文长度\n    u_short uh_sum;//16位校验和\n}UDP_HEADER;\n```\n\n## 7. KCP——可靠的UDP\n\n## 8. HTTP 协议\n\n![HTTTP 协议](./Resource/HTTP.png)\n\nTCP/IP、UDP(KCP)、HTTPS、HTTP2.0\n\n[HTTPS 升级指南](http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html)\n\n[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n[HTTP 协议入门](http://www.ruanyifeng.com/blog/2016/08/http.html)\n\n[阮一峰网络日志](http://www.ruanyifeng.com/blog/)\n\nSocket(Web socket)、XMPP\n\nRTMP\n\nFRP、UPnP、VPN、WoL\n\nDNS、(N)ARP、令牌网络、ICMP\n\n附录一：\n\n[^附录一]:IP数据包的协议字段中，数值和所对应的协议\n\n| 数值     | 值描述                                      |\n| -------- | ------------------------------------------- |\n| 0        | 保留字段，用于IPv6(跳跃点到跳跃点选项)      |\n| 1        | Internet控制消息                            |\n| 2        | Internet组管理                              |\n| 3        | 网关到网关                                  |\n| 4        | IP中的IP(封装)                              |\n| 5        | 流                                          |\n| 6        | 传输控制                                    |\n| 7        | CBT                                         |\n| 8        | 外部网关协议                                |\n| 9        | 任何私有内部网关(Cisco在它的IGRP实现中使用) |\n| 10       | BBNRCC监视                                  |\n| 11       | 网络语音协议                                |\n| 12       | PUP                                         |\n| 13       | ARGUS                                       |\n| 14       | EMCON                                       |\n| 15       | 网络诊断工具                                |\n| 16       | 混乱(Chaos)                                 |\n| 17       | 用户数据报文                                |\n| 18       | 复用                                        |\n| 19       | DCN测量子系统                               |\n| 20       | 主机监视                                    |\n| 21       | 包无线测量                                  |\n| 22       | XEROXNSIDP                                  |\n| 23       | Trunk-1                                     |\n| 24       | Trunk-2                                     |\n| 25       | leaf-1                                      |\n| 26       | leaf-2                                      |\n| 27       | 可靠的数据协议                              |\n| 28       | Internet可靠交易                            |\n| 29       | ISO传输协议第四类                           |\n| 30       | 大块数据传输协议                            |\n| 31       | MFE网络服务协议                             |\n| 32       | MERIT节点之间协议                           |\n| 33       | 序列交换协议                                |\n| 34       | 第三方连接协议                              |\n| 35       | 域之间策略路由协议                          |\n| 36       | XTP                                         |\n| 37       | 数据报文传递协议                            |\n| 38       | IDPR控制消息传输协议                        |\n| 39       | TP+ +传输协议                               |\n| 40       | IL传输协议                                  |\n| 41       | IPv6                                        |\n| 42       | 资源命令路由协议                            |\n| 43       | IPv6的路由报头                              |\n| 44       | IPv6的片报头                                |\n| 45       | 域之间路由协议                              |\n| 46       | 保留协议                                    |\n| 47       | 通用路由封装                                |\n| 48       | 可移动主机路由协议                          |\n| 49       | BNA                                         |\n| 50       | IPv6封装安全有效负载                        |\n| 51       | IPv6验证报头                                |\n| 52       | 集成的网络层安全TUBA                        |\n| 53       | 带加密的IP                                  |\n| 54       | NBMA地址解析协议                            |\n| 55       | IP可移动性                                  |\n| 56       | 使用Kryptonet钥匙管理的传输层安全协议       |\n| 57       | SKIP                                        |\n| 58       | IPv6的ICMP                                  |\n| 59       | IPv6的无下一个报头                          |\n| 60       | IPv6的信宿选项                              |\n| 61       | 任何主机内部协议                            |\n| 62       | CFTP                                        |\n| 63       | 任何本地网络                                |\n| 64       | SATNET和BackroomEXPAK                       |\n| 65       | Kryptolan                                   |\n| 66       | MIT远程虚拟磁盘协议                         |\n| 67       | Internet Pluribus包核心                     |\n| 68       | 任何分布式文件系统                          |\n| 69       | SATNET监视                                  |\n| 70       | VISA协议                                    |\n| 71       | Internet包核心工具                          |\n| 72       | 计算机协议Network Executive                 |\n| 73       | 计算机协议Heart Beat                        |\n| 74       | Wang Span网络                               |\n| 75       | 包视频协议                                  |\n| 76       | Backroom SATNET监视                         |\n| 77       | SUN ND PROTOCOL—临时                        |\n| 78       | WIDEBAND监视                                |\n| 79       | WIDEBAND EXPAK                              |\n| 80       | ISO Internet协议                            |\n| 81       | VMTP                                        |\n| 82       | SECURE—VMTP(安全的VMTP)                     |\n| 83       | VINES                                       |\n| 84       | TTP                                         |\n| 85       | NSFNET—IGP                                  |\n| 86       | 不同网关协议                                |\n| 87       | TCF                                         |\n| 88       | EIGRP                                       |\n| 89       | OSPFIGP                                     |\n| 90       | Sprite RPC协议                              |\n| 91       | Locus地址解析协议                           |\n| 92       | 多播传输协议                                |\n| 93       | AX.25帧                                     |\n| 94       | IP内部的IP封装协议                          |\n| 95       | 可移动网络互连控制协议                      |\n| 96       | 旗语通讯安全协议                            |\n| 97       | IP中的以太封装                              |\n| 98       | 封装报头                                    |\n| 99       | 任何私有加密方案                            |\n| 100      | GMTP                                        |\n| 101      | Ipsilon流量管理协议                         |\n| 102      | PNNI over IP                                |\n| 103      | 协议独立多播                                |\n| 104      | ARIS                                        |\n| 105      | SCPS                                        |\n| 106      | QNX                                         |\n| 107      | 活动网络                                    |\n| 108      | IP有效负载压缩协议                          |\n| 109      | Sitara网络协议                              |\n| 110      | Compaq对等协议                              |\n| 111      | IP中的IPX                                   |\n| 112      | 虚拟路由器冗余协议                          |\n| 113      | PGM可靠传输协议                             |\n| 114      | 任何0跳跃协议                               |\n| 115      | 第二层隧道协议                              |\n| 116      | D-II数据交换(DDX)                           |\n| 117      | 交互式代理传输协议                          |\n| 118      | 日程计划传输协议                            |\n| 119      | SpectraLink无线协议                         |\n| 120      | UTI                                         |\n| 121      | 简单消息协议                                |\n| 122      | SM                                          |\n| 123      | 性能透明性协议                              |\n| 124      | ISIS over IPv4                              |\n| 125      | FIRE                                        |\n| 126      | Combat无线传输协议                          |\n| 127      | Combat无线用户数据报文                      |\n| 128      | SSCOPMCE                                    |\n| 129      | IPLT                                        |\n| 130      | 安全包防护                                  |\n| 131      | IP中的私有IP封装                            |\n| 132      | 流控制传输协议                              |\n| 133～254 | 未分配                                      |\n| 255      | 保留                                        |\n","slug":"iOS/Network/Protocols","published":1,"updated":"2021-07-29T06:46:00.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn23001wiu9k8almgbze","content":"<h2 id=\"1-协议簇、协议栈\"><a href=\"#1-协议簇、协议栈\" class=\"headerlink\" title=\"1.协议簇、协议栈\"></a>1.协议簇、协议栈</h2><p><img src=\"/./Resource/protocols.png\" alt=\"流程\"></p>\n<h2 id=\"2-网络协议工作流程图\"><a href=\"#2-网络协议工作流程图\" class=\"headerlink\" title=\"2. 网络协议工作流程图\"></a>2. 网络协议工作流程图</h2><p><img src=\"/./Resource/stream2.jpg\" alt=\"流程\"></p>\n<h2 id=\"3-链路层-协议\"><a href=\"#3-链路层-协议\" class=\"headerlink\" title=\"3. 链路层 协议\"></a>3. 链路层 协议</h2><p><img src=\"/./Resource/Ethernet.png\" alt=\"流程\"></p>\n<h2 id=\"4-IP协议\"><a href=\"#4-IP协议\" class=\"headerlink\" title=\"4. IP协议\"></a>4. IP协议</h2><p><img src=\"/./Resource/IP.png\" alt=\"流程\"></p>\n<ul>\n<li><p>版本: 占4位,指IP协议的版本.通信双方使用的IP协议版本必须一致.日前广泛使用的 IP协议版本号为 4 (即 IPv4).IPv6 目前还处于起步阶段.</p>\n</li>\n<li><p>首部长度:占 4 位,可表示的最大十进制数值是15.请注意,这个字段所表示数的单位是32位字 (1个32位字长是4 字节),因此,当 IP 的首部长度为 1111 时 (即十进制的 15),首部长度就达到 60字节.当 IP 分组的首部长度不是4字节的整数倍时,必须利用最后的填充字段加以填充.因此数据部分永远在 4字节的整数倍开始,这样在实现 IP协议时较为方便.首部长度限制为 60字节的缺点是有时可能不够用.这样做的目的是希望用户尽量减少开销.最常用的首部长度就是 20 字节 (即首部长度为 0101),这时不使用任何选项.</p>\n</li>\n<li><p>服务:占 8 位,用来获得更好的服务.这个字段在旧标准中叫做服务类型,但实际上一直没有被使用过.1998年IETF把这个字段改名为区分服务 DS(Differentiated Services).只有在使用区分服务时,这个字段才起作用.</p>\n</li>\n<li><p>总长度:总长度指首都及数据之和的长度,单位为字节.因为总长度字段为 16位,所以数据报的最大长度为 216-1=65 535字节.在IP层下面的每一种数据链路层都有自己的帧格式,其中包括帧格式中的数据字段的最大长度,即最大传送单元 MTU (Maximum Transfer Unit).当一个数据报封装成链路层的帧时,此数据报的总长度 (即首部加上数据部分)一定不能超过下面的数据链路层的MTU值,否则要分片.</p>\n</li>\n<li><p>标识 (Identification):占 16位.IP软件在存储器中维持一个计数器,每产生一个数据报,计数器就加 1,并将此值赋给标识字段.但这个”标识”并不是序号,因为 IP是无连接的服务,数据报不存在按序接收的问题.当数据报由于长度超过网络的 MTU 而必须分片时,这个标识字段的值就被复制到所有的数据报的标识字段中.相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报.</p>\n</li>\n<li><p>标志 (Flag):占3 位,但目前只有2位有意义. 标志字段中的最低位记为 MF(More Fragment).MF=1即表示后面”还有分片”的数据报.MF=0表示这已是若干数据报片中的最后一个.标志字段中间的一位记为DF(Don’t Fragment),意思是”不能分片”,只有当 DF=0时才允许分片.</p>\n</li>\n<li><p>片偏移:占 13位.较长的分组在分片后,某片在原分组中的相对位置.也就是说,相对用户数据字段的起点,该片从何处开始.片偏移以 8个字节为偏移单位,这就是说,每个分片的长度一定是 8字节(64位)的整数倍.</p>\n</li>\n<li><p>生存时间:占 8位,生存时间字段常用的英文缩写是TTL(Time To Live),其表明数据报在网络中的寿命.由发出数据报的源点设置这个字段.其目的是防止无法交付的数据报无限制地在因特网中兜圈子,因而白白消耗网络资源.最初的设计是以秒作为 TTL的单位.每经过一个路由器时,就把TTL减去数据报在路由器消耗掉的一段时间.若数据报在路由器消耗的时间小于 1 秒,就把TTL值减 1.当 TTL值为 0时,就丢弃这个数据报.</p>\n</li>\n<li><p>协议:占 8 位.协议字段指出此数据报携带的数据是使用何种协议,以便使目的主机的IP层知道应将数据部分上交给哪个处理过程.详细资料请看文章最后附录一<a href=\"IP%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E5%8D%8F%E8%AE%AE%E5%AD%97%E6%AE%B5%E4%B8%AD%EF%BC%8C%E6%95%B0%E5%80%BC%E5%92%8C%E6%89%80%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8D%8F%E8%AE%AE\">^附录一</a>.</p>\n</li>\n<li><p>首部检验和:占 16位.这个字段只检验数据报的首部,但不包括数据部分.这是因为数据报每经过一个路由器,都要重新计算一下首都检验和 (一些字段,如生存时间,标志,片偏移等都可能发生变化),不检验数据部分可减少计算的工作量.</p>\n</li>\n<li><p>源地址:占32位.</p>\n</li>\n<li><p>目的地址:占 32位.</p>\n</li>\n<li><p>IP数据报首部的可变部分</p>\n</li>\n</ul>\n<blockquote>\n<p>IP首部的可变部分就是一个可选字段.选项字段用来支持排错,测量以及安全等措施,内容很丰富.此字段的长度可变,从1个字节到40个字节不等,取决于所选择的项目.某些选项项目只需要1个字节,它只包括1个字节的选项代码.但还有些选项需要多个字节,这些选项一个个拼接起来,中间不需要有分隔符,最后用全0的填充字段补齐成为4字节的整数倍.<br>增加首部的可变部分是为了增加IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的.这就增加了每一个路由器处理数据报的开销,实际上这些选项很少被使用.新的IP版本IPv6就将IP数据报的首部长度做成固定的.</p>\n</blockquote>\n<p>目前,这些任选项定义如下:</p>\n<ol>\n<li>安全和处理限制(用于军事领域);</li>\n<li>记录路径(让每个路由器都记下它的IP地址);</li>\n<li>时间戳(Time Stamp)(让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间);</li>\n<li>宽松的源站路由(Loose Source Route)(为数据报指定一系列必须经过的IP地址);</li>\n<li>严格的源站路由(Strict Source Route)(与宽松的源站路由类似,但是要求只能经过指定的这些地址,不能经过其他的地址).<br>这些选项很少被使用,并非所有主机和路由器都支持这些选项.</li>\n</ol>\n<h2 id=\"5-TCP-协议\"><a href=\"#5-TCP-协议\" class=\"headerlink\" title=\"5. TCP 协议\"></a>5. TCP 协议</h2><p><img src=\"/./Resource/TCP.gif\" alt=\"流程\"></p>\n<p>1、端口号：用来标识同一台计算机的不同的应用进程。</p>\n<p>1）源端口：源端口和IP地址的作用是标识报文的返回地址。</p>\n<p>2）目的端口：端口指明接收方计算机上的应用程序接口。</p>\n<p>TCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。</p>\n<p>2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。</p>\n<p>3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。</p>\n<p>4、保留：为将来定义新的用途保留，现在一般置0。</p>\n<p>5、控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。</p>\n<p>1）URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。</p>\n<p>2）ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。</p>\n<p>3）PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。</p>\n<p>4）RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。</p>\n<p>5）SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。</p>\n<p>6）FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。</p>\n<p>6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。</p>\n<p>7、校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。</p>\n<p>8、紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p>\n<p>9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。</p>\n<p>10、数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcphdr</span> &#123;</span></span><br><span class=\"line\">    __be16 source;<span class=\"comment\">//  16位源端口号</span></span><br><span class=\"line\">    __be16 dest; <span class=\"comment\">//16位目的端口号</span></span><br><span class=\"line\">    __be32 seq; <span class=\"comment\">//序列号</span></span><br><span class=\"line\">    __be32 ack_seq; <span class=\"comment\">//确认号</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(__LITTLE_ENDIAN_BITFIELD)</span></span><br><span class=\"line\">    __u16   res1:<span class=\"number\">4</span>,<span class=\"comment\">//保留位</span></span><br><span class=\"line\">            doff:<span class=\"number\">4</span>, <span class=\"comment\">//tcp报头长度</span></span><br><span class=\"line\">            fin:<span class=\"number\">1</span>,</span><br><span class=\"line\">            syn:<span class=\"number\">1</span>,</span><br><span class=\"line\">            rst:<span class=\"number\">1</span>,</span><br><span class=\"line\">            psh:<span class=\"number\">1</span>,</span><br><span class=\"line\">            ack:<span class=\"number\">1</span>,</span><br><span class=\"line\">            urg:<span class=\"number\">1</span>,</span><br><span class=\"line\">            ece:<span class=\"number\">1</span>,<span class=\"comment\">//ECN回显（发送方接受到了一个更早的拥塞通告)</span></span><br><span class=\"line\">            cwr:<span class=\"number\">1</span>;<span class=\"comment\">//拥塞窗口减（发送方降低它的发送速率)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(__BIG_ENDIAN_BITFIELD)</span></span><br><span class=\"line\">    __u16   doff:<span class=\"number\">4</span>,</span><br><span class=\"line\">            res1:<span class=\"number\">4</span>,</span><br><span class=\"line\">            cwr:<span class=\"number\">1</span>,</span><br><span class=\"line\">            ece:<span class=\"number\">1</span>,</span><br><span class=\"line\">            urg:<span class=\"number\">1</span>,</span><br><span class=\"line\">            ack:<span class=\"number\">1</span>,</span><br><span class=\"line\">            psh:<span class=\"number\">1</span>,</span><br><span class=\"line\">            rst:<span class=\"number\">1</span>,</span><br><span class=\"line\">            syn:<span class=\"number\">1</span>,</span><br><span class=\"line\">            fin:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">error</span> <span class=\"meta-string\">&quot;Adjust your &lt;asm/byteorder.h&gt; defines&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    __be16 window;<span class=\"comment\">//窗口大小</span></span><br><span class=\"line\">    __be16 check;<span class=\"comment\">//效验和</span></span><br><span class=\"line\">    __be16 urg_ptr;<span class=\"comment\">//紧急指针</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拥塞控制、流量控制、慢启动、快恢复、快重传，确认机制、校验和</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_15437629/article/details/79183076\">校验和</a>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先，把伪首部、TCP报头、TCP数据分为16位的字，如果总长度为奇数个字节，则在最后增添一个位都为0的字节。把TCP报头中的校验和字段置为0（否则就陷入鸡生蛋还是蛋生鸡的问题）。</span><br><span class=\"line\">其次，用反码相加法累加所有的16位字（进位也要累加）。</span><br><span class=\"line\">最后，对计算结果取反，作为TCP的校验和。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">checksum</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> * addr, <span class=\"keyword\">int</span> count)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    计算所有数据的16bit对之和</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>( count &gt; <span class=\"number\">1</span>  )  &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*  This is the inner loop */</span></span><br><span class=\"line\">        sum += *(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>*)addr++;</span><br><span class=\"line\"></span><br><span class=\"line\">        count -= <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果数据长度为奇数，在该字节之后补一个字节(0),</span></span><br><span class=\"line\"><span class=\"comment\">      然后将其转换为16bit整数，加到上面计算的校验和</span></span><br><span class=\"line\"><span class=\"comment\">    　　中。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( count &gt; <span class=\"number\">0</span> ) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">char</span> left_over[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        left_over[<span class=\"number\">0</span>] = *addr;</span><br><span class=\"line\">        sum += * (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>*) left_over;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*  将32bit数据压缩成16bit数据，即将进位加大校验和</span></span><br><span class=\"line\"><span class=\"comment\">    　　的低字节上，直到没有进位为止。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sum&gt;&gt;<span class=\"number\">16</span>)</span><br><span class=\"line\">        sum = (sum &amp; <span class=\"number\">0xffff</span>) + (sum &gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">　　</span><br><span class=\"line\">    　<span class=\"comment\">/*返回校验和的反码*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ~sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-UDP-协议\"><a href=\"#6-UDP-协议\" class=\"headerlink\" title=\"6. UDP 协议\"></a>6. UDP 协议</h2><p>UDP协议是提供与IP一样的不可靠，无连接的交付服务，UDP报文可能出现丢失，重复或者乱序到达等现象。</p>\n<p>UDP协议在IP协议上增加了复用、分用和差错检测功能。UDP的特点：</p>\n<ol>\n<li>是无连接的。相比于TCP协议，UDP协议在传送数据前不需要建立连接，当然也就没有释放连接。</li>\n<li>是尽最大努力交付的。也就是说UDP协议无法保证数据能够准确的交付到目的主机。也不需要对接收到的UDP报文进行确认。</li>\n<li>是面向报文的。也就是说UDP协议将应用层传输下来的数据封装在一个UDP包中，不进行拆分或合并。因此，运输层在收到对方的UDP包后，会去掉首部后，将数据原封不动的交给应用进程。</li>\n<li>没有拥塞控制。因此UDP协议的发送速率不送网络的拥塞度影响。</li>\n<li>UDP支持一对一、一对多、多对一和多对多的交互通信。</li>\n<li>UDP的头部占用较小，只占用8个字节。</li>\n</ol>\n<p><img src=\"/./Resource/UDP.jpeg\" alt=\"UPD协议\"></p>\n<ul>\n<li>源端口：源端口号。在需要对方回信时选用。不需要时可用全0。</li>\n<li>目的端口：目的端口号。这在终点交付报文时必须要使用到。</li>\n<li>长度： UDP用户数据报的长度，其最小值是8（仅有首部）。</li>\n<li>校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">udphdr</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    u_short uh_sport;<span class=\"comment\">//源端口地址</span></span><br><span class=\"line\">    u_short uh_dport;<span class=\"comment\">//目的端口地址</span></span><br><span class=\"line\">    u_short uh_ulen;<span class=\"comment\">//UD报文长度</span></span><br><span class=\"line\">    u_short uh_sum;<span class=\"comment\">//16位校验和</span></span><br><span class=\"line\">&#125;UDP_HEADER;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-KCP——可靠的UDP\"><a href=\"#7-KCP——可靠的UDP\" class=\"headerlink\" title=\"7. KCP——可靠的UDP\"></a>7. KCP——可靠的UDP</h2><h2 id=\"8-HTTP-协议\"><a href=\"#8-HTTP-协议\" class=\"headerlink\" title=\"8. HTTP 协议\"></a>8. HTTP 协议</h2><p><img src=\"/./Resource/HTTP.png\" alt=\"HTTTP 协议\"></p>\n<p>TCP/IP、UDP(KCP)、HTTPS、HTTP2.0</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html\">HTTPS 升级指南</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\">SSL/TLS协议运行机制的概述</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\">HTTP 协议入门</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/\">阮一峰网络日志</a></p>\n<p>Socket(Web socket)、XMPP</p>\n<p>RTMP</p>\n<p>FRP、UPnP、VPN、WoL</p>\n<p>DNS、(N)ARP、令牌网络、ICMP</p>\n<p>附录一：</p>\n<table>\n<thead>\n<tr>\n<th>数值</th>\n<th>值描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>保留字段，用于IPv6(跳跃点到跳跃点选项)</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Internet控制消息</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Internet组管理</td>\n</tr>\n<tr>\n<td>3</td>\n<td>网关到网关</td>\n</tr>\n<tr>\n<td>4</td>\n<td>IP中的IP(封装)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>流</td>\n</tr>\n<tr>\n<td>6</td>\n<td>传输控制</td>\n</tr>\n<tr>\n<td>7</td>\n<td>CBT</td>\n</tr>\n<tr>\n<td>8</td>\n<td>外部网关协议</td>\n</tr>\n<tr>\n<td>9</td>\n<td>任何私有内部网关(Cisco在它的IGRP实现中使用)</td>\n</tr>\n<tr>\n<td>10</td>\n<td>BBNRCC监视</td>\n</tr>\n<tr>\n<td>11</td>\n<td>网络语音协议</td>\n</tr>\n<tr>\n<td>12</td>\n<td>PUP</td>\n</tr>\n<tr>\n<td>13</td>\n<td>ARGUS</td>\n</tr>\n<tr>\n<td>14</td>\n<td>EMCON</td>\n</tr>\n<tr>\n<td>15</td>\n<td>网络诊断工具</td>\n</tr>\n<tr>\n<td>16</td>\n<td>混乱(Chaos)</td>\n</tr>\n<tr>\n<td>17</td>\n<td>用户数据报文</td>\n</tr>\n<tr>\n<td>18</td>\n<td>复用</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DCN测量子系统</td>\n</tr>\n<tr>\n<td>20</td>\n<td>主机监视</td>\n</tr>\n<tr>\n<td>21</td>\n<td>包无线测量</td>\n</tr>\n<tr>\n<td>22</td>\n<td>XEROXNSIDP</td>\n</tr>\n<tr>\n<td>23</td>\n<td>Trunk-1</td>\n</tr>\n<tr>\n<td>24</td>\n<td>Trunk-2</td>\n</tr>\n<tr>\n<td>25</td>\n<td>leaf-1</td>\n</tr>\n<tr>\n<td>26</td>\n<td>leaf-2</td>\n</tr>\n<tr>\n<td>27</td>\n<td>可靠的数据协议</td>\n</tr>\n<tr>\n<td>28</td>\n<td>Internet可靠交易</td>\n</tr>\n<tr>\n<td>29</td>\n<td>ISO传输协议第四类</td>\n</tr>\n<tr>\n<td>30</td>\n<td>大块数据传输协议</td>\n</tr>\n<tr>\n<td>31</td>\n<td>MFE网络服务协议</td>\n</tr>\n<tr>\n<td>32</td>\n<td>MERIT节点之间协议</td>\n</tr>\n<tr>\n<td>33</td>\n<td>序列交换协议</td>\n</tr>\n<tr>\n<td>34</td>\n<td>第三方连接协议</td>\n</tr>\n<tr>\n<td>35</td>\n<td>域之间策略路由协议</td>\n</tr>\n<tr>\n<td>36</td>\n<td>XTP</td>\n</tr>\n<tr>\n<td>37</td>\n<td>数据报文传递协议</td>\n</tr>\n<tr>\n<td>38</td>\n<td>IDPR控制消息传输协议</td>\n</tr>\n<tr>\n<td>39</td>\n<td>TP+ +传输协议</td>\n</tr>\n<tr>\n<td>40</td>\n<td>IL传输协议</td>\n</tr>\n<tr>\n<td>41</td>\n<td>IPv6</td>\n</tr>\n<tr>\n<td>42</td>\n<td>资源命令路由协议</td>\n</tr>\n<tr>\n<td>43</td>\n<td>IPv6的路由报头</td>\n</tr>\n<tr>\n<td>44</td>\n<td>IPv6的片报头</td>\n</tr>\n<tr>\n<td>45</td>\n<td>域之间路由协议</td>\n</tr>\n<tr>\n<td>46</td>\n<td>保留协议</td>\n</tr>\n<tr>\n<td>47</td>\n<td>通用路由封装</td>\n</tr>\n<tr>\n<td>48</td>\n<td>可移动主机路由协议</td>\n</tr>\n<tr>\n<td>49</td>\n<td>BNA</td>\n</tr>\n<tr>\n<td>50</td>\n<td>IPv6封装安全有效负载</td>\n</tr>\n<tr>\n<td>51</td>\n<td>IPv6验证报头</td>\n</tr>\n<tr>\n<td>52</td>\n<td>集成的网络层安全TUBA</td>\n</tr>\n<tr>\n<td>53</td>\n<td>带加密的IP</td>\n</tr>\n<tr>\n<td>54</td>\n<td>NBMA地址解析协议</td>\n</tr>\n<tr>\n<td>55</td>\n<td>IP可移动性</td>\n</tr>\n<tr>\n<td>56</td>\n<td>使用Kryptonet钥匙管理的传输层安全协议</td>\n</tr>\n<tr>\n<td>57</td>\n<td>SKIP</td>\n</tr>\n<tr>\n<td>58</td>\n<td>IPv6的ICMP</td>\n</tr>\n<tr>\n<td>59</td>\n<td>IPv6的无下一个报头</td>\n</tr>\n<tr>\n<td>60</td>\n<td>IPv6的信宿选项</td>\n</tr>\n<tr>\n<td>61</td>\n<td>任何主机内部协议</td>\n</tr>\n<tr>\n<td>62</td>\n<td>CFTP</td>\n</tr>\n<tr>\n<td>63</td>\n<td>任何本地网络</td>\n</tr>\n<tr>\n<td>64</td>\n<td>SATNET和BackroomEXPAK</td>\n</tr>\n<tr>\n<td>65</td>\n<td>Kryptolan</td>\n</tr>\n<tr>\n<td>66</td>\n<td>MIT远程虚拟磁盘协议</td>\n</tr>\n<tr>\n<td>67</td>\n<td>Internet Pluribus包核心</td>\n</tr>\n<tr>\n<td>68</td>\n<td>任何分布式文件系统</td>\n</tr>\n<tr>\n<td>69</td>\n<td>SATNET监视</td>\n</tr>\n<tr>\n<td>70</td>\n<td>VISA协议</td>\n</tr>\n<tr>\n<td>71</td>\n<td>Internet包核心工具</td>\n</tr>\n<tr>\n<td>72</td>\n<td>计算机协议Network Executive</td>\n</tr>\n<tr>\n<td>73</td>\n<td>计算机协议Heart Beat</td>\n</tr>\n<tr>\n<td>74</td>\n<td>Wang Span网络</td>\n</tr>\n<tr>\n<td>75</td>\n<td>包视频协议</td>\n</tr>\n<tr>\n<td>76</td>\n<td>Backroom SATNET监视</td>\n</tr>\n<tr>\n<td>77</td>\n<td>SUN ND PROTOCOL—临时</td>\n</tr>\n<tr>\n<td>78</td>\n<td>WIDEBAND监视</td>\n</tr>\n<tr>\n<td>79</td>\n<td>WIDEBAND EXPAK</td>\n</tr>\n<tr>\n<td>80</td>\n<td>ISO Internet协议</td>\n</tr>\n<tr>\n<td>81</td>\n<td>VMTP</td>\n</tr>\n<tr>\n<td>82</td>\n<td>SECURE—VMTP(安全的VMTP)</td>\n</tr>\n<tr>\n<td>83</td>\n<td>VINES</td>\n</tr>\n<tr>\n<td>84</td>\n<td>TTP</td>\n</tr>\n<tr>\n<td>85</td>\n<td>NSFNET—IGP</td>\n</tr>\n<tr>\n<td>86</td>\n<td>不同网关协议</td>\n</tr>\n<tr>\n<td>87</td>\n<td>TCF</td>\n</tr>\n<tr>\n<td>88</td>\n<td>EIGRP</td>\n</tr>\n<tr>\n<td>89</td>\n<td>OSPFIGP</td>\n</tr>\n<tr>\n<td>90</td>\n<td>Sprite RPC协议</td>\n</tr>\n<tr>\n<td>91</td>\n<td>Locus地址解析协议</td>\n</tr>\n<tr>\n<td>92</td>\n<td>多播传输协议</td>\n</tr>\n<tr>\n<td>93</td>\n<td>AX.25帧</td>\n</tr>\n<tr>\n<td>94</td>\n<td>IP内部的IP封装协议</td>\n</tr>\n<tr>\n<td>95</td>\n<td>可移动网络互连控制协议</td>\n</tr>\n<tr>\n<td>96</td>\n<td>旗语通讯安全协议</td>\n</tr>\n<tr>\n<td>97</td>\n<td>IP中的以太封装</td>\n</tr>\n<tr>\n<td>98</td>\n<td>封装报头</td>\n</tr>\n<tr>\n<td>99</td>\n<td>任何私有加密方案</td>\n</tr>\n<tr>\n<td>100</td>\n<td>GMTP</td>\n</tr>\n<tr>\n<td>101</td>\n<td>Ipsilon流量管理协议</td>\n</tr>\n<tr>\n<td>102</td>\n<td>PNNI over IP</td>\n</tr>\n<tr>\n<td>103</td>\n<td>协议独立多播</td>\n</tr>\n<tr>\n<td>104</td>\n<td>ARIS</td>\n</tr>\n<tr>\n<td>105</td>\n<td>SCPS</td>\n</tr>\n<tr>\n<td>106</td>\n<td>QNX</td>\n</tr>\n<tr>\n<td>107</td>\n<td>活动网络</td>\n</tr>\n<tr>\n<td>108</td>\n<td>IP有效负载压缩协议</td>\n</tr>\n<tr>\n<td>109</td>\n<td>Sitara网络协议</td>\n</tr>\n<tr>\n<td>110</td>\n<td>Compaq对等协议</td>\n</tr>\n<tr>\n<td>111</td>\n<td>IP中的IPX</td>\n</tr>\n<tr>\n<td>112</td>\n<td>虚拟路由器冗余协议</td>\n</tr>\n<tr>\n<td>113</td>\n<td>PGM可靠传输协议</td>\n</tr>\n<tr>\n<td>114</td>\n<td>任何0跳跃协议</td>\n</tr>\n<tr>\n<td>115</td>\n<td>第二层隧道协议</td>\n</tr>\n<tr>\n<td>116</td>\n<td>D-II数据交换(DDX)</td>\n</tr>\n<tr>\n<td>117</td>\n<td>交互式代理传输协议</td>\n</tr>\n<tr>\n<td>118</td>\n<td>日程计划传输协议</td>\n</tr>\n<tr>\n<td>119</td>\n<td>SpectraLink无线协议</td>\n</tr>\n<tr>\n<td>120</td>\n<td>UTI</td>\n</tr>\n<tr>\n<td>121</td>\n<td>简单消息协议</td>\n</tr>\n<tr>\n<td>122</td>\n<td>SM</td>\n</tr>\n<tr>\n<td>123</td>\n<td>性能透明性协议</td>\n</tr>\n<tr>\n<td>124</td>\n<td>ISIS over IPv4</td>\n</tr>\n<tr>\n<td>125</td>\n<td>FIRE</td>\n</tr>\n<tr>\n<td>126</td>\n<td>Combat无线传输协议</td>\n</tr>\n<tr>\n<td>127</td>\n<td>Combat无线用户数据报文</td>\n</tr>\n<tr>\n<td>128</td>\n<td>SSCOPMCE</td>\n</tr>\n<tr>\n<td>129</td>\n<td>IPLT</td>\n</tr>\n<tr>\n<td>130</td>\n<td>安全包防护</td>\n</tr>\n<tr>\n<td>131</td>\n<td>IP中的私有IP封装</td>\n</tr>\n<tr>\n<td>132</td>\n<td>流控制传输协议</td>\n</tr>\n<tr>\n<td>133～254</td>\n<td>未分配</td>\n</tr>\n<tr>\n<td>255</td>\n<td>保留</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-协议簇、协议栈\"><a href=\"#1-协议簇、协议栈\" class=\"headerlink\" title=\"1.协议簇、协议栈\"></a>1.协议簇、协议栈</h2><p><img src=\"/./Resource/protocols.png\" alt=\"流程\"></p>\n<h2 id=\"2-网络协议工作流程图\"><a href=\"#2-网络协议工作流程图\" class=\"headerlink\" title=\"2. 网络协议工作流程图\"></a>2. 网络协议工作流程图</h2><p><img src=\"/./Resource/stream2.jpg\" alt=\"流程\"></p>\n<h2 id=\"3-链路层-协议\"><a href=\"#3-链路层-协议\" class=\"headerlink\" title=\"3. 链路层 协议\"></a>3. 链路层 协议</h2><p><img src=\"/./Resource/Ethernet.png\" alt=\"流程\"></p>\n<h2 id=\"4-IP协议\"><a href=\"#4-IP协议\" class=\"headerlink\" title=\"4. IP协议\"></a>4. IP协议</h2><p><img src=\"/./Resource/IP.png\" alt=\"流程\"></p>\n<ul>\n<li><p>版本: 占4位,指IP协议的版本.通信双方使用的IP协议版本必须一致.日前广泛使用的 IP协议版本号为 4 (即 IPv4).IPv6 目前还处于起步阶段.</p>\n</li>\n<li><p>首部长度:占 4 位,可表示的最大十进制数值是15.请注意,这个字段所表示数的单位是32位字 (1个32位字长是4 字节),因此,当 IP 的首部长度为 1111 时 (即十进制的 15),首部长度就达到 60字节.当 IP 分组的首部长度不是4字节的整数倍时,必须利用最后的填充字段加以填充.因此数据部分永远在 4字节的整数倍开始,这样在实现 IP协议时较为方便.首部长度限制为 60字节的缺点是有时可能不够用.这样做的目的是希望用户尽量减少开销.最常用的首部长度就是 20 字节 (即首部长度为 0101),这时不使用任何选项.</p>\n</li>\n<li><p>服务:占 8 位,用来获得更好的服务.这个字段在旧标准中叫做服务类型,但实际上一直没有被使用过.1998年IETF把这个字段改名为区分服务 DS(Differentiated Services).只有在使用区分服务时,这个字段才起作用.</p>\n</li>\n<li><p>总长度:总长度指首都及数据之和的长度,单位为字节.因为总长度字段为 16位,所以数据报的最大长度为 216-1=65 535字节.在IP层下面的每一种数据链路层都有自己的帧格式,其中包括帧格式中的数据字段的最大长度,即最大传送单元 MTU (Maximum Transfer Unit).当一个数据报封装成链路层的帧时,此数据报的总长度 (即首部加上数据部分)一定不能超过下面的数据链路层的MTU值,否则要分片.</p>\n</li>\n<li><p>标识 (Identification):占 16位.IP软件在存储器中维持一个计数器,每产生一个数据报,计数器就加 1,并将此值赋给标识字段.但这个”标识”并不是序号,因为 IP是无连接的服务,数据报不存在按序接收的问题.当数据报由于长度超过网络的 MTU 而必须分片时,这个标识字段的值就被复制到所有的数据报的标识字段中.相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报.</p>\n</li>\n<li><p>标志 (Flag):占3 位,但目前只有2位有意义. 标志字段中的最低位记为 MF(More Fragment).MF=1即表示后面”还有分片”的数据报.MF=0表示这已是若干数据报片中的最后一个.标志字段中间的一位记为DF(Don’t Fragment),意思是”不能分片”,只有当 DF=0时才允许分片.</p>\n</li>\n<li><p>片偏移:占 13位.较长的分组在分片后,某片在原分组中的相对位置.也就是说,相对用户数据字段的起点,该片从何处开始.片偏移以 8个字节为偏移单位,这就是说,每个分片的长度一定是 8字节(64位)的整数倍.</p>\n</li>\n<li><p>生存时间:占 8位,生存时间字段常用的英文缩写是TTL(Time To Live),其表明数据报在网络中的寿命.由发出数据报的源点设置这个字段.其目的是防止无法交付的数据报无限制地在因特网中兜圈子,因而白白消耗网络资源.最初的设计是以秒作为 TTL的单位.每经过一个路由器时,就把TTL减去数据报在路由器消耗掉的一段时间.若数据报在路由器消耗的时间小于 1 秒,就把TTL值减 1.当 TTL值为 0时,就丢弃这个数据报.</p>\n</li>\n<li><p>协议:占 8 位.协议字段指出此数据报携带的数据是使用何种协议,以便使目的主机的IP层知道应将数据部分上交给哪个处理过程.详细资料请看文章最后附录一<a href=\"IP%E6%95%B0%E6%8D%AE%E5%8C%85%E7%9A%84%E5%8D%8F%E8%AE%AE%E5%AD%97%E6%AE%B5%E4%B8%AD%EF%BC%8C%E6%95%B0%E5%80%BC%E5%92%8C%E6%89%80%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8D%8F%E8%AE%AE\">^附录一</a>.</p>\n</li>\n<li><p>首部检验和:占 16位.这个字段只检验数据报的首部,但不包括数据部分.这是因为数据报每经过一个路由器,都要重新计算一下首都检验和 (一些字段,如生存时间,标志,片偏移等都可能发生变化),不检验数据部分可减少计算的工作量.</p>\n</li>\n<li><p>源地址:占32位.</p>\n</li>\n<li><p>目的地址:占 32位.</p>\n</li>\n<li><p>IP数据报首部的可变部分</p>\n</li>\n</ul>\n<blockquote>\n<p>IP首部的可变部分就是一个可选字段.选项字段用来支持排错,测量以及安全等措施,内容很丰富.此字段的长度可变,从1个字节到40个字节不等,取决于所选择的项目.某些选项项目只需要1个字节,它只包括1个字节的选项代码.但还有些选项需要多个字节,这些选项一个个拼接起来,中间不需要有分隔符,最后用全0的填充字段补齐成为4字节的整数倍.<br>增加首部的可变部分是为了增加IP数据报的功能,但这同时也使得IP数据报的首部长度成为可变的.这就增加了每一个路由器处理数据报的开销,实际上这些选项很少被使用.新的IP版本IPv6就将IP数据报的首部长度做成固定的.</p>\n</blockquote>\n<p>目前,这些任选项定义如下:</p>\n<ol>\n<li>安全和处理限制(用于军事领域);</li>\n<li>记录路径(让每个路由器都记下它的IP地址);</li>\n<li>时间戳(Time Stamp)(让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间);</li>\n<li>宽松的源站路由(Loose Source Route)(为数据报指定一系列必须经过的IP地址);</li>\n<li>严格的源站路由(Strict Source Route)(与宽松的源站路由类似,但是要求只能经过指定的这些地址,不能经过其他的地址).<br>这些选项很少被使用,并非所有主机和路由器都支持这些选项.</li>\n</ol>\n<h2 id=\"5-TCP-协议\"><a href=\"#5-TCP-协议\" class=\"headerlink\" title=\"5. TCP 协议\"></a>5. TCP 协议</h2><p><img src=\"/./Resource/TCP.gif\" alt=\"流程\"></p>\n<p>1、端口号：用来标识同一台计算机的不同的应用进程。</p>\n<p>1）源端口：源端口和IP地址的作用是标识报文的返回地址。</p>\n<p>2）目的端口：端口指明接收方计算机上的应用程序接口。</p>\n<p>TCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。</p>\n<p>2、序号和确认号：是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。</p>\n<p>3、数据偏移／首部长度：4bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。</p>\n<p>4、保留：为将来定义新的用途保留，现在一般置0。</p>\n<p>5、控制位：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。</p>\n<p>1）URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。</p>\n<p>2）ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。</p>\n<p>3）PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。</p>\n<p>4）RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。</p>\n<p>5）SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。</p>\n<p>6）FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。</p>\n<p>6、窗口：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。</p>\n<p>7、校验和：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。</p>\n<p>8、紧急指针：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p>\n<p>9、选项和填充：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。</p>\n<p>10、数据部分： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcphdr</span> &#123;</span></span><br><span class=\"line\">    __be16 source;<span class=\"comment\">//  16位源端口号</span></span><br><span class=\"line\">    __be16 dest; <span class=\"comment\">//16位目的端口号</span></span><br><span class=\"line\">    __be32 seq; <span class=\"comment\">//序列号</span></span><br><span class=\"line\">    __be32 ack_seq; <span class=\"comment\">//确认号</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(__LITTLE_ENDIAN_BITFIELD)</span></span><br><span class=\"line\">    __u16   res1:<span class=\"number\">4</span>,<span class=\"comment\">//保留位</span></span><br><span class=\"line\">            doff:<span class=\"number\">4</span>, <span class=\"comment\">//tcp报头长度</span></span><br><span class=\"line\">            fin:<span class=\"number\">1</span>,</span><br><span class=\"line\">            syn:<span class=\"number\">1</span>,</span><br><span class=\"line\">            rst:<span class=\"number\">1</span>,</span><br><span class=\"line\">            psh:<span class=\"number\">1</span>,</span><br><span class=\"line\">            ack:<span class=\"number\">1</span>,</span><br><span class=\"line\">            urg:<span class=\"number\">1</span>,</span><br><span class=\"line\">            ece:<span class=\"number\">1</span>,<span class=\"comment\">//ECN回显（发送方接受到了一个更早的拥塞通告)</span></span><br><span class=\"line\">            cwr:<span class=\"number\">1</span>;<span class=\"comment\">//拥塞窗口减（发送方降低它的发送速率)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(__BIG_ENDIAN_BITFIELD)</span></span><br><span class=\"line\">    __u16   doff:<span class=\"number\">4</span>,</span><br><span class=\"line\">            res1:<span class=\"number\">4</span>,</span><br><span class=\"line\">            cwr:<span class=\"number\">1</span>,</span><br><span class=\"line\">            ece:<span class=\"number\">1</span>,</span><br><span class=\"line\">            urg:<span class=\"number\">1</span>,</span><br><span class=\"line\">            ack:<span class=\"number\">1</span>,</span><br><span class=\"line\">            psh:<span class=\"number\">1</span>,</span><br><span class=\"line\">            rst:<span class=\"number\">1</span>,</span><br><span class=\"line\">            syn:<span class=\"number\">1</span>,</span><br><span class=\"line\">            fin:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">error</span> <span class=\"meta-string\">&quot;Adjust your &lt;asm/byteorder.h&gt; defines&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    __be16 window;<span class=\"comment\">//窗口大小</span></span><br><span class=\"line\">    __be16 check;<span class=\"comment\">//效验和</span></span><br><span class=\"line\">    __be16 urg_ptr;<span class=\"comment\">//紧急指针</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拥塞控制、流量控制、慢启动、快恢复、快重传，确认机制、校验和</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_15437629/article/details/79183076\">校验和</a>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首先，把伪首部、TCP报头、TCP数据分为16位的字，如果总长度为奇数个字节，则在最后增添一个位都为0的字节。把TCP报头中的校验和字段置为0（否则就陷入鸡生蛋还是蛋生鸡的问题）。</span><br><span class=\"line\">其次，用反码相加法累加所有的16位字（进位也要累加）。</span><br><span class=\"line\">最后，对计算结果取反，作为TCP的校验和。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">checksum</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> * addr, <span class=\"keyword\">int</span> count)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    计算所有数据的16bit对之和</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>( count &gt; <span class=\"number\">1</span>  )  &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*  This is the inner loop */</span></span><br><span class=\"line\">        sum += *(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>*)addr++;</span><br><span class=\"line\"></span><br><span class=\"line\">        count -= <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 如果数据长度为奇数，在该字节之后补一个字节(0),</span></span><br><span class=\"line\"><span class=\"comment\">      然后将其转换为16bit整数，加到上面计算的校验和</span></span><br><span class=\"line\"><span class=\"comment\">    　　中。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>( count &gt; <span class=\"number\">0</span> ) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">char</span> left_over[<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        left_over[<span class=\"number\">0</span>] = *addr;</span><br><span class=\"line\">        sum += * (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>*) left_over;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*  将32bit数据压缩成16bit数据，即将进位加大校验和</span></span><br><span class=\"line\"><span class=\"comment\">    　　的低字节上，直到没有进位为止。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sum&gt;&gt;<span class=\"number\">16</span>)</span><br><span class=\"line\">        sum = (sum &amp; <span class=\"number\">0xffff</span>) + (sum &gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">　　</span><br><span class=\"line\">    　<span class=\"comment\">/*返回校验和的反码*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ~sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-UDP-协议\"><a href=\"#6-UDP-协议\" class=\"headerlink\" title=\"6. UDP 协议\"></a>6. UDP 协议</h2><p>UDP协议是提供与IP一样的不可靠，无连接的交付服务，UDP报文可能出现丢失，重复或者乱序到达等现象。</p>\n<p>UDP协议在IP协议上增加了复用、分用和差错检测功能。UDP的特点：</p>\n<ol>\n<li>是无连接的。相比于TCP协议，UDP协议在传送数据前不需要建立连接，当然也就没有释放连接。</li>\n<li>是尽最大努力交付的。也就是说UDP协议无法保证数据能够准确的交付到目的主机。也不需要对接收到的UDP报文进行确认。</li>\n<li>是面向报文的。也就是说UDP协议将应用层传输下来的数据封装在一个UDP包中，不进行拆分或合并。因此，运输层在收到对方的UDP包后，会去掉首部后，将数据原封不动的交给应用进程。</li>\n<li>没有拥塞控制。因此UDP协议的发送速率不送网络的拥塞度影响。</li>\n<li>UDP支持一对一、一对多、多对一和多对多的交互通信。</li>\n<li>UDP的头部占用较小，只占用8个字节。</li>\n</ol>\n<p><img src=\"/./Resource/UDP.jpeg\" alt=\"UPD协议\"></p>\n<ul>\n<li>源端口：源端口号。在需要对方回信时选用。不需要时可用全0。</li>\n<li>目的端口：目的端口号。这在终点交付报文时必须要使用到。</li>\n<li>长度： UDP用户数据报的长度，其最小值是8（仅有首部）。</li>\n<li>校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">udphdr</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    u_short uh_sport;<span class=\"comment\">//源端口地址</span></span><br><span class=\"line\">    u_short uh_dport;<span class=\"comment\">//目的端口地址</span></span><br><span class=\"line\">    u_short uh_ulen;<span class=\"comment\">//UD报文长度</span></span><br><span class=\"line\">    u_short uh_sum;<span class=\"comment\">//16位校验和</span></span><br><span class=\"line\">&#125;UDP_HEADER;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-KCP——可靠的UDP\"><a href=\"#7-KCP——可靠的UDP\" class=\"headerlink\" title=\"7. KCP——可靠的UDP\"></a>7. KCP——可靠的UDP</h2><h2 id=\"8-HTTP-协议\"><a href=\"#8-HTTP-协议\" class=\"headerlink\" title=\"8. HTTP 协议\"></a>8. HTTP 协议</h2><p><img src=\"/./Resource/HTTP.png\" alt=\"HTTTP 协议\"></p>\n<p>TCP/IP、UDP(KCP)、HTTPS、HTTP2.0</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html\">HTTPS 升级指南</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\">SSL/TLS协议运行机制的概述</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/08/http.html\">HTTP 协议入门</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/\">阮一峰网络日志</a></p>\n<p>Socket(Web socket)、XMPP</p>\n<p>RTMP</p>\n<p>FRP、UPnP、VPN、WoL</p>\n<p>DNS、(N)ARP、令牌网络、ICMP</p>\n<p>附录一：</p>\n<table>\n<thead>\n<tr>\n<th>数值</th>\n<th>值描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>保留字段，用于IPv6(跳跃点到跳跃点选项)</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Internet控制消息</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Internet组管理</td>\n</tr>\n<tr>\n<td>3</td>\n<td>网关到网关</td>\n</tr>\n<tr>\n<td>4</td>\n<td>IP中的IP(封装)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>流</td>\n</tr>\n<tr>\n<td>6</td>\n<td>传输控制</td>\n</tr>\n<tr>\n<td>7</td>\n<td>CBT</td>\n</tr>\n<tr>\n<td>8</td>\n<td>外部网关协议</td>\n</tr>\n<tr>\n<td>9</td>\n<td>任何私有内部网关(Cisco在它的IGRP实现中使用)</td>\n</tr>\n<tr>\n<td>10</td>\n<td>BBNRCC监视</td>\n</tr>\n<tr>\n<td>11</td>\n<td>网络语音协议</td>\n</tr>\n<tr>\n<td>12</td>\n<td>PUP</td>\n</tr>\n<tr>\n<td>13</td>\n<td>ARGUS</td>\n</tr>\n<tr>\n<td>14</td>\n<td>EMCON</td>\n</tr>\n<tr>\n<td>15</td>\n<td>网络诊断工具</td>\n</tr>\n<tr>\n<td>16</td>\n<td>混乱(Chaos)</td>\n</tr>\n<tr>\n<td>17</td>\n<td>用户数据报文</td>\n</tr>\n<tr>\n<td>18</td>\n<td>复用</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DCN测量子系统</td>\n</tr>\n<tr>\n<td>20</td>\n<td>主机监视</td>\n</tr>\n<tr>\n<td>21</td>\n<td>包无线测量</td>\n</tr>\n<tr>\n<td>22</td>\n<td>XEROXNSIDP</td>\n</tr>\n<tr>\n<td>23</td>\n<td>Trunk-1</td>\n</tr>\n<tr>\n<td>24</td>\n<td>Trunk-2</td>\n</tr>\n<tr>\n<td>25</td>\n<td>leaf-1</td>\n</tr>\n<tr>\n<td>26</td>\n<td>leaf-2</td>\n</tr>\n<tr>\n<td>27</td>\n<td>可靠的数据协议</td>\n</tr>\n<tr>\n<td>28</td>\n<td>Internet可靠交易</td>\n</tr>\n<tr>\n<td>29</td>\n<td>ISO传输协议第四类</td>\n</tr>\n<tr>\n<td>30</td>\n<td>大块数据传输协议</td>\n</tr>\n<tr>\n<td>31</td>\n<td>MFE网络服务协议</td>\n</tr>\n<tr>\n<td>32</td>\n<td>MERIT节点之间协议</td>\n</tr>\n<tr>\n<td>33</td>\n<td>序列交换协议</td>\n</tr>\n<tr>\n<td>34</td>\n<td>第三方连接协议</td>\n</tr>\n<tr>\n<td>35</td>\n<td>域之间策略路由协议</td>\n</tr>\n<tr>\n<td>36</td>\n<td>XTP</td>\n</tr>\n<tr>\n<td>37</td>\n<td>数据报文传递协议</td>\n</tr>\n<tr>\n<td>38</td>\n<td>IDPR控制消息传输协议</td>\n</tr>\n<tr>\n<td>39</td>\n<td>TP+ +传输协议</td>\n</tr>\n<tr>\n<td>40</td>\n<td>IL传输协议</td>\n</tr>\n<tr>\n<td>41</td>\n<td>IPv6</td>\n</tr>\n<tr>\n<td>42</td>\n<td>资源命令路由协议</td>\n</tr>\n<tr>\n<td>43</td>\n<td>IPv6的路由报头</td>\n</tr>\n<tr>\n<td>44</td>\n<td>IPv6的片报头</td>\n</tr>\n<tr>\n<td>45</td>\n<td>域之间路由协议</td>\n</tr>\n<tr>\n<td>46</td>\n<td>保留协议</td>\n</tr>\n<tr>\n<td>47</td>\n<td>通用路由封装</td>\n</tr>\n<tr>\n<td>48</td>\n<td>可移动主机路由协议</td>\n</tr>\n<tr>\n<td>49</td>\n<td>BNA</td>\n</tr>\n<tr>\n<td>50</td>\n<td>IPv6封装安全有效负载</td>\n</tr>\n<tr>\n<td>51</td>\n<td>IPv6验证报头</td>\n</tr>\n<tr>\n<td>52</td>\n<td>集成的网络层安全TUBA</td>\n</tr>\n<tr>\n<td>53</td>\n<td>带加密的IP</td>\n</tr>\n<tr>\n<td>54</td>\n<td>NBMA地址解析协议</td>\n</tr>\n<tr>\n<td>55</td>\n<td>IP可移动性</td>\n</tr>\n<tr>\n<td>56</td>\n<td>使用Kryptonet钥匙管理的传输层安全协议</td>\n</tr>\n<tr>\n<td>57</td>\n<td>SKIP</td>\n</tr>\n<tr>\n<td>58</td>\n<td>IPv6的ICMP</td>\n</tr>\n<tr>\n<td>59</td>\n<td>IPv6的无下一个报头</td>\n</tr>\n<tr>\n<td>60</td>\n<td>IPv6的信宿选项</td>\n</tr>\n<tr>\n<td>61</td>\n<td>任何主机内部协议</td>\n</tr>\n<tr>\n<td>62</td>\n<td>CFTP</td>\n</tr>\n<tr>\n<td>63</td>\n<td>任何本地网络</td>\n</tr>\n<tr>\n<td>64</td>\n<td>SATNET和BackroomEXPAK</td>\n</tr>\n<tr>\n<td>65</td>\n<td>Kryptolan</td>\n</tr>\n<tr>\n<td>66</td>\n<td>MIT远程虚拟磁盘协议</td>\n</tr>\n<tr>\n<td>67</td>\n<td>Internet Pluribus包核心</td>\n</tr>\n<tr>\n<td>68</td>\n<td>任何分布式文件系统</td>\n</tr>\n<tr>\n<td>69</td>\n<td>SATNET监视</td>\n</tr>\n<tr>\n<td>70</td>\n<td>VISA协议</td>\n</tr>\n<tr>\n<td>71</td>\n<td>Internet包核心工具</td>\n</tr>\n<tr>\n<td>72</td>\n<td>计算机协议Network Executive</td>\n</tr>\n<tr>\n<td>73</td>\n<td>计算机协议Heart Beat</td>\n</tr>\n<tr>\n<td>74</td>\n<td>Wang Span网络</td>\n</tr>\n<tr>\n<td>75</td>\n<td>包视频协议</td>\n</tr>\n<tr>\n<td>76</td>\n<td>Backroom SATNET监视</td>\n</tr>\n<tr>\n<td>77</td>\n<td>SUN ND PROTOCOL—临时</td>\n</tr>\n<tr>\n<td>78</td>\n<td>WIDEBAND监视</td>\n</tr>\n<tr>\n<td>79</td>\n<td>WIDEBAND EXPAK</td>\n</tr>\n<tr>\n<td>80</td>\n<td>ISO Internet协议</td>\n</tr>\n<tr>\n<td>81</td>\n<td>VMTP</td>\n</tr>\n<tr>\n<td>82</td>\n<td>SECURE—VMTP(安全的VMTP)</td>\n</tr>\n<tr>\n<td>83</td>\n<td>VINES</td>\n</tr>\n<tr>\n<td>84</td>\n<td>TTP</td>\n</tr>\n<tr>\n<td>85</td>\n<td>NSFNET—IGP</td>\n</tr>\n<tr>\n<td>86</td>\n<td>不同网关协议</td>\n</tr>\n<tr>\n<td>87</td>\n<td>TCF</td>\n</tr>\n<tr>\n<td>88</td>\n<td>EIGRP</td>\n</tr>\n<tr>\n<td>89</td>\n<td>OSPFIGP</td>\n</tr>\n<tr>\n<td>90</td>\n<td>Sprite RPC协议</td>\n</tr>\n<tr>\n<td>91</td>\n<td>Locus地址解析协议</td>\n</tr>\n<tr>\n<td>92</td>\n<td>多播传输协议</td>\n</tr>\n<tr>\n<td>93</td>\n<td>AX.25帧</td>\n</tr>\n<tr>\n<td>94</td>\n<td>IP内部的IP封装协议</td>\n</tr>\n<tr>\n<td>95</td>\n<td>可移动网络互连控制协议</td>\n</tr>\n<tr>\n<td>96</td>\n<td>旗语通讯安全协议</td>\n</tr>\n<tr>\n<td>97</td>\n<td>IP中的以太封装</td>\n</tr>\n<tr>\n<td>98</td>\n<td>封装报头</td>\n</tr>\n<tr>\n<td>99</td>\n<td>任何私有加密方案</td>\n</tr>\n<tr>\n<td>100</td>\n<td>GMTP</td>\n</tr>\n<tr>\n<td>101</td>\n<td>Ipsilon流量管理协议</td>\n</tr>\n<tr>\n<td>102</td>\n<td>PNNI over IP</td>\n</tr>\n<tr>\n<td>103</td>\n<td>协议独立多播</td>\n</tr>\n<tr>\n<td>104</td>\n<td>ARIS</td>\n</tr>\n<tr>\n<td>105</td>\n<td>SCPS</td>\n</tr>\n<tr>\n<td>106</td>\n<td>QNX</td>\n</tr>\n<tr>\n<td>107</td>\n<td>活动网络</td>\n</tr>\n<tr>\n<td>108</td>\n<td>IP有效负载压缩协议</td>\n</tr>\n<tr>\n<td>109</td>\n<td>Sitara网络协议</td>\n</tr>\n<tr>\n<td>110</td>\n<td>Compaq对等协议</td>\n</tr>\n<tr>\n<td>111</td>\n<td>IP中的IPX</td>\n</tr>\n<tr>\n<td>112</td>\n<td>虚拟路由器冗余协议</td>\n</tr>\n<tr>\n<td>113</td>\n<td>PGM可靠传输协议</td>\n</tr>\n<tr>\n<td>114</td>\n<td>任何0跳跃协议</td>\n</tr>\n<tr>\n<td>115</td>\n<td>第二层隧道协议</td>\n</tr>\n<tr>\n<td>116</td>\n<td>D-II数据交换(DDX)</td>\n</tr>\n<tr>\n<td>117</td>\n<td>交互式代理传输协议</td>\n</tr>\n<tr>\n<td>118</td>\n<td>日程计划传输协议</td>\n</tr>\n<tr>\n<td>119</td>\n<td>SpectraLink无线协议</td>\n</tr>\n<tr>\n<td>120</td>\n<td>UTI</td>\n</tr>\n<tr>\n<td>121</td>\n<td>简单消息协议</td>\n</tr>\n<tr>\n<td>122</td>\n<td>SM</td>\n</tr>\n<tr>\n<td>123</td>\n<td>性能透明性协议</td>\n</tr>\n<tr>\n<td>124</td>\n<td>ISIS over IPv4</td>\n</tr>\n<tr>\n<td>125</td>\n<td>FIRE</td>\n</tr>\n<tr>\n<td>126</td>\n<td>Combat无线传输协议</td>\n</tr>\n<tr>\n<td>127</td>\n<td>Combat无线用户数据报文</td>\n</tr>\n<tr>\n<td>128</td>\n<td>SSCOPMCE</td>\n</tr>\n<tr>\n<td>129</td>\n<td>IPLT</td>\n</tr>\n<tr>\n<td>130</td>\n<td>安全包防护</td>\n</tr>\n<tr>\n<td>131</td>\n<td>IP中的私有IP封装</td>\n</tr>\n<tr>\n<td>132</td>\n<td>流控制传输协议</td>\n</tr>\n<tr>\n<td>133～254</td>\n<td>未分配</td>\n</tr>\n<tr>\n<td>255</td>\n<td>保留</td>\n</tr>\n</tbody></table>\n"},{"title":"iOS 之GCC attribute","abbrlink":"94e2f404","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Performance/GCCAttribute.md","raw":"---\ntitle: iOS 之GCC attribute\nabbrlink: 94e2f404\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Performance/GCCAttribute","published":1,"updated":"2021-07-29T06:46:00.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn24001xiu9k6wss41st","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之App瘦身","abbrlink":"c27b2933","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. 资源\n\n### 1.1 合适的资源配置\n\n* pod iOS 8.0 --> iOS 9.0， 影响因素：actool 编码压缩算法；\n\n* 使用 RGB with palette 压缩图片：--number-of-colors 16 --quality 40-80\n\n* Assets.car（BOM 文件） 合并， 多个库中 Asset Catalog 中的图片合并到一个 Asset Catalog 中，再经 actool 构建成 Assets.car 产物\n\n* 文本文件压缩：\n  1、压缩阶段：在 Build Phase 中添加脚本，构建期间对白名单内的文本文件做 zip 压缩；\n\n  2、解压阶段：在 App 启动阶段，在异步线程中进行解压操作，将解压产物存放到沙盒中；\n\n  3、读取阶段：在 App 运行时，hook 读取这些文件的方法，将读取路径从 Bundle 改为沙盒中的对应路径；\n\n## 2. Mac-O 文件优化\n\n### 2.1 使用 -Oz 编译参数\n\n原理： 对重复的连续机器指令外联成函数进行复用，和“内联函数”的原理正好相反。\n\n指标： 4.5%\n\n### 2.2 使用链接时优化 LTO\n\nIncremental LTO\n\n### 2.3 修正 Exported Symbols 配置\n\nXcode Build Settings 中的 EXPORTED_SYMBOLS_FILE 配置，控制着 Mach-O 中 __LINKEDIT 段中 Export Info 的信息。动态链接器 dyld 在做符号绑定时，会读取被绑定的动态库或可执行文件的 Export Info 信息，得到一个符号对应的实际调用地址。如果正在被绑定的符号，在目标动态库的 Export Info 中缺失，dyld 则会抛出异常，表现为 App 崩溃。\n\n### 2.4 属性动态化\n\n@dynamic --> 关联属性\n\n### 2.5 __TEXT 段迁移\n\n* xcconfig\n\n```shell\nAPP_THIN_LINK_FLAGS = -Wl,-rename_section,__TEXT,__cstring,__RODATA,__cstring,-rename_section,__TEXT,__objc_methname,__RODATA,__objc_methname,-rename_section,__TEXT,__objc_classname,__RODATA,__objc_classname,-rename_section,__TEXT,__objc_methtype,__RODATA,__objc_methtype,-rename_section,__TEXT,__gcc_except_tab,__RODATA,__gcc_except_tab,-rename_section,__TEXT,__const,__RODATA,__const,-rename_section,__TEXT,__text,__BD_TEXT,__text,-rename_section,__TEXT,__textcoal_nt,__BD_TEXT,__text,-rename_section,__TEXT,__StaticInit,__BD_TEXT,__text,-rename_section,__TEXT,__stubs,__BD_TEXT,__stubs,-rename_section,__TEXT,__picsymbolstub4,__BD_TEXT,__picsymbolstub4,-segprot,__BD_TEXT,rx,rx\n```\n\n* Other Linker Flags\n\n```shell\n-Wl,-rename_section,__TEXT,__cstring,__RODATA,__cstring\n-Wl,-rename_section,__TEXT,__objc_methname,__RODATA,__objc_methname\n-Wl,-rename_section,__TEXT,__objc_classname,__RODATA,__objc_classname\n-Wl,-rename_section,__TEXT,__objc_methtype,__RODATA,__objc_methtype\n-Wl,-rename_section,__TEXT,__gcc_except_tab,__RODATA,__gcc_except_tab\n-Wl,-rename_section,__TEXT,__const,__RODATA,__const\n-Wl,-rename_section,__TEXT,__text,__BD_TEXT,__text\n-Wl,-rename_section,__TEXT,__textcoal_nt,__BD_TEXT,__text\n-Wl,-rename_section,__TEXT,__StaticInit,__BD_TEXT,__text\n-Wl,-rename_section,__TEXT,__stubs,__BD_TEXT,__stubs\n-Wl,-rename_section,__TEXT,__picsymbolstub4,__BD_TEXT,__picsymbolstub4,\n-Wl,-segprot,__BD_TEXT,rx,rx\n```\n\n#### 2.5.1 不能移动的段\n\n首先，dyld 在启动阶段会检查 __unwind_info 和 __eh_frame 这两个 Section。如果移动这两个 Section，在启动后程序就会 Crash。\n\n第二，Swift 相关的 Section 不能移动，否则会引起 Crash。\n\n第三，自己在代码中指明要读取的 Section。\n\n#### 2.5.2\n\n![text_segments](./Resources/text_segments.png)\n\n**每个 Section 都属于其中一种类型。Branch Island 算法会对类型是 typeCode 的 Section 中的跳转指令做检查，如果跳转的距离超出限制，则会在它们之间插入 \"branch islands\"，跳转指令会先跳到一个 branch island ，再从这个 branch island 跳到目标地址，以此来保证其跳转距离不超过限制。\n__TEXT,__text 的类型是 typeCode，因此，__TEXT,__text 中超出范围跳转指令都会被保护，在最后 Output 检查时，就不会出现 branch out of range 的异常。所以，正常构建的 App，即使很大也不会出现链接失败的问题，这都是归功于 Branch Island 算法**\n\n移动```__TEXT,__text```需考虑两个问题：\n\n1. Branch Island 算法的检查逻辑没有适配到 Section 被移动的情况。\n2. Branch Island 算法不会保护自定义 Section。\n\n* __TEXT,__text 移不干净导致链接失败。\n\n* 不移动 __stubs 导致链接失败。\n\n* 自定义 Section 的问题。\n\n### 2.6 二进制段压缩\n\nMach-O 文件占据了 Install Size 中很大一部分比例，但并不是文件中的每个段/节在程序启动的第一时间都要被用到。可以在构建过程中将 Mach-O 文件中的这部分段/节压缩，然后只要在这些段被使用到之前将其解压到内存中，就能达到了减少包大小的效果，同时也能保证程序正常运行。由于苹果的一些限制，我们目前只压缩了```__TEXT,__gcc_except_tab``` 与 ```__TEXT,__objc_methtype```两个节，然后在 ```_dyld_register_func_for_add_image``` 的回调中对它进行解压。该方案累计优化了 3.5 MB Install Size。\n\n## 编译项\n\n* [今日头条 iOS 安装包大小优化—— 新阶段、新实践](https://www.infoq.cn/article/iowjwhbirqeobzf5m2o8)\n* [今日头条优化实践： iOS 包大小二进制优化，一行代码减少 60 MB 下载大小](https://www.infoq.cn/article/XUJL32hTDKYqAKz0hkMM)\n","source":"_posts/iOS/Performance/AppThin.md","raw":"---\ntitle: iOS之App瘦身\nabbrlink: c27b2933\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. 资源\n\n### 1.1 合适的资源配置\n\n* pod iOS 8.0 --> iOS 9.0， 影响因素：actool 编码压缩算法；\n\n* 使用 RGB with palette 压缩图片：--number-of-colors 16 --quality 40-80\n\n* Assets.car（BOM 文件） 合并， 多个库中 Asset Catalog 中的图片合并到一个 Asset Catalog 中，再经 actool 构建成 Assets.car 产物\n\n* 文本文件压缩：\n  1、压缩阶段：在 Build Phase 中添加脚本，构建期间对白名单内的文本文件做 zip 压缩；\n\n  2、解压阶段：在 App 启动阶段，在异步线程中进行解压操作，将解压产物存放到沙盒中；\n\n  3、读取阶段：在 App 运行时，hook 读取这些文件的方法，将读取路径从 Bundle 改为沙盒中的对应路径；\n\n## 2. Mac-O 文件优化\n\n### 2.1 使用 -Oz 编译参数\n\n原理： 对重复的连续机器指令外联成函数进行复用，和“内联函数”的原理正好相反。\n\n指标： 4.5%\n\n### 2.2 使用链接时优化 LTO\n\nIncremental LTO\n\n### 2.3 修正 Exported Symbols 配置\n\nXcode Build Settings 中的 EXPORTED_SYMBOLS_FILE 配置，控制着 Mach-O 中 __LINKEDIT 段中 Export Info 的信息。动态链接器 dyld 在做符号绑定时，会读取被绑定的动态库或可执行文件的 Export Info 信息，得到一个符号对应的实际调用地址。如果正在被绑定的符号，在目标动态库的 Export Info 中缺失，dyld 则会抛出异常，表现为 App 崩溃。\n\n### 2.4 属性动态化\n\n@dynamic --> 关联属性\n\n### 2.5 __TEXT 段迁移\n\n* xcconfig\n\n```shell\nAPP_THIN_LINK_FLAGS = -Wl,-rename_section,__TEXT,__cstring,__RODATA,__cstring,-rename_section,__TEXT,__objc_methname,__RODATA,__objc_methname,-rename_section,__TEXT,__objc_classname,__RODATA,__objc_classname,-rename_section,__TEXT,__objc_methtype,__RODATA,__objc_methtype,-rename_section,__TEXT,__gcc_except_tab,__RODATA,__gcc_except_tab,-rename_section,__TEXT,__const,__RODATA,__const,-rename_section,__TEXT,__text,__BD_TEXT,__text,-rename_section,__TEXT,__textcoal_nt,__BD_TEXT,__text,-rename_section,__TEXT,__StaticInit,__BD_TEXT,__text,-rename_section,__TEXT,__stubs,__BD_TEXT,__stubs,-rename_section,__TEXT,__picsymbolstub4,__BD_TEXT,__picsymbolstub4,-segprot,__BD_TEXT,rx,rx\n```\n\n* Other Linker Flags\n\n```shell\n-Wl,-rename_section,__TEXT,__cstring,__RODATA,__cstring\n-Wl,-rename_section,__TEXT,__objc_methname,__RODATA,__objc_methname\n-Wl,-rename_section,__TEXT,__objc_classname,__RODATA,__objc_classname\n-Wl,-rename_section,__TEXT,__objc_methtype,__RODATA,__objc_methtype\n-Wl,-rename_section,__TEXT,__gcc_except_tab,__RODATA,__gcc_except_tab\n-Wl,-rename_section,__TEXT,__const,__RODATA,__const\n-Wl,-rename_section,__TEXT,__text,__BD_TEXT,__text\n-Wl,-rename_section,__TEXT,__textcoal_nt,__BD_TEXT,__text\n-Wl,-rename_section,__TEXT,__StaticInit,__BD_TEXT,__text\n-Wl,-rename_section,__TEXT,__stubs,__BD_TEXT,__stubs\n-Wl,-rename_section,__TEXT,__picsymbolstub4,__BD_TEXT,__picsymbolstub4,\n-Wl,-segprot,__BD_TEXT,rx,rx\n```\n\n#### 2.5.1 不能移动的段\n\n首先，dyld 在启动阶段会检查 __unwind_info 和 __eh_frame 这两个 Section。如果移动这两个 Section，在启动后程序就会 Crash。\n\n第二，Swift 相关的 Section 不能移动，否则会引起 Crash。\n\n第三，自己在代码中指明要读取的 Section。\n\n#### 2.5.2\n\n![text_segments](./Resources/text_segments.png)\n\n**每个 Section 都属于其中一种类型。Branch Island 算法会对类型是 typeCode 的 Section 中的跳转指令做检查，如果跳转的距离超出限制，则会在它们之间插入 \"branch islands\"，跳转指令会先跳到一个 branch island ，再从这个 branch island 跳到目标地址，以此来保证其跳转距离不超过限制。\n__TEXT,__text 的类型是 typeCode，因此，__TEXT,__text 中超出范围跳转指令都会被保护，在最后 Output 检查时，就不会出现 branch out of range 的异常。所以，正常构建的 App，即使很大也不会出现链接失败的问题，这都是归功于 Branch Island 算法**\n\n移动```__TEXT,__text```需考虑两个问题：\n\n1. Branch Island 算法的检查逻辑没有适配到 Section 被移动的情况。\n2. Branch Island 算法不会保护自定义 Section。\n\n* __TEXT,__text 移不干净导致链接失败。\n\n* 不移动 __stubs 导致链接失败。\n\n* 自定义 Section 的问题。\n\n### 2.6 二进制段压缩\n\nMach-O 文件占据了 Install Size 中很大一部分比例，但并不是文件中的每个段/节在程序启动的第一时间都要被用到。可以在构建过程中将 Mach-O 文件中的这部分段/节压缩，然后只要在这些段被使用到之前将其解压到内存中，就能达到了减少包大小的效果，同时也能保证程序正常运行。由于苹果的一些限制，我们目前只压缩了```__TEXT,__gcc_except_tab``` 与 ```__TEXT,__objc_methtype```两个节，然后在 ```_dyld_register_func_for_add_image``` 的回调中对它进行解压。该方案累计优化了 3.5 MB Install Size。\n\n## 编译项\n\n* [今日头条 iOS 安装包大小优化—— 新阶段、新实践](https://www.infoq.cn/article/iowjwhbirqeobzf5m2o8)\n* [今日头条优化实践： iOS 包大小二进制优化，一行代码减少 60 MB 下载大小](https://www.infoq.cn/article/XUJL32hTDKYqAKz0hkMM)\n","slug":"iOS/Performance/AppThin","published":1,"updated":"2021-07-29T06:45:57.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn24001yiu9k0f3pceud","content":"<h2 id=\"1-资源\"><a href=\"#1-资源\" class=\"headerlink\" title=\"1. 资源\"></a>1. 资源</h2><h3 id=\"1-1-合适的资源配置\"><a href=\"#1-1-合适的资源配置\" class=\"headerlink\" title=\"1.1 合适的资源配置\"></a>1.1 合适的资源配置</h3><ul>\n<li><p>pod iOS 8.0 –&gt; iOS 9.0， 影响因素：actool 编码压缩算法；</p>\n</li>\n<li><p>使用 RGB with palette 压缩图片：–number-of-colors 16 –quality 40-80</p>\n</li>\n<li><p>Assets.car（BOM 文件） 合并， 多个库中 Asset Catalog 中的图片合并到一个 Asset Catalog 中，再经 actool 构建成 Assets.car 产物</p>\n</li>\n<li><p>文本文件压缩：<br>1、压缩阶段：在 Build Phase 中添加脚本，构建期间对白名单内的文本文件做 zip 压缩；</p>\n<p>2、解压阶段：在 App 启动阶段，在异步线程中进行解压操作，将解压产物存放到沙盒中；</p>\n<p>3、读取阶段：在 App 运行时，hook 读取这些文件的方法，将读取路径从 Bundle 改为沙盒中的对应路径；</p>\n</li>\n</ul>\n<h2 id=\"2-Mac-O-文件优化\"><a href=\"#2-Mac-O-文件优化\" class=\"headerlink\" title=\"2. Mac-O 文件优化\"></a>2. Mac-O 文件优化</h2><h3 id=\"2-1-使用-Oz-编译参数\"><a href=\"#2-1-使用-Oz-编译参数\" class=\"headerlink\" title=\"2.1 使用 -Oz 编译参数\"></a>2.1 使用 -Oz 编译参数</h3><p>原理： 对重复的连续机器指令外联成函数进行复用，和“内联函数”的原理正好相反。</p>\n<p>指标： 4.5%</p>\n<h3 id=\"2-2-使用链接时优化-LTO\"><a href=\"#2-2-使用链接时优化-LTO\" class=\"headerlink\" title=\"2.2 使用链接时优化 LTO\"></a>2.2 使用链接时优化 LTO</h3><p>Incremental LTO</p>\n<h3 id=\"2-3-修正-Exported-Symbols-配置\"><a href=\"#2-3-修正-Exported-Symbols-配置\" class=\"headerlink\" title=\"2.3 修正 Exported Symbols 配置\"></a>2.3 修正 Exported Symbols 配置</h3><p>Xcode Build Settings 中的 EXPORTED_SYMBOLS_FILE 配置，控制着 Mach-O 中 __LINKEDIT 段中 Export Info 的信息。动态链接器 dyld 在做符号绑定时，会读取被绑定的动态库或可执行文件的 Export Info 信息，得到一个符号对应的实际调用地址。如果正在被绑定的符号，在目标动态库的 Export Info 中缺失，dyld 则会抛出异常，表现为 App 崩溃。</p>\n<h3 id=\"2-4-属性动态化\"><a href=\"#2-4-属性动态化\" class=\"headerlink\" title=\"2.4 属性动态化\"></a>2.4 属性动态化</h3><p>@dynamic –&gt; 关联属性</p>\n<h3 id=\"2-5-TEXT-段迁移\"><a href=\"#2-5-TEXT-段迁移\" class=\"headerlink\" title=\"2.5 __TEXT 段迁移\"></a>2.5 __TEXT 段迁移</h3><ul>\n<li>xcconfig</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_THIN_LINK_FLAGS = -Wl,-rename_section,__TEXT,__cstring,__RODATA,__cstring,-rename_section,__TEXT,__objc_methname,__RODATA,__objc_methname,-rename_section,__TEXT,__objc_classname,__RODATA,__objc_classname,-rename_section,__TEXT,__objc_methtype,__RODATA,__objc_methtype,-rename_section,__TEXT,__gcc_except_tab,__RODATA,__gcc_except_tab,-rename_section,__TEXT,__const,__RODATA,__const,-rename_section,__TEXT,__text,__BD_TEXT,__text,-rename_section,__TEXT,__textcoal_nt,__BD_TEXT,__text,-rename_section,__TEXT,__StaticInit,__BD_TEXT,__text,-rename_section,__TEXT,__stubs,__BD_TEXT,__stubs,-rename_section,__TEXT,__picsymbolstub4,__BD_TEXT,__picsymbolstub4,-segprot,__BD_TEXT,rx,rx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Other Linker Flags</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Wl,-rename_section,__TEXT,__cstring,__RODATA,__cstring</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__objc_methname,__RODATA,__objc_methname</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__objc_classname,__RODATA,__objc_classname</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__objc_methtype,__RODATA,__objc_methtype</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__gcc_except_tab,__RODATA,__gcc_except_tab</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__const,__RODATA,__const</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__text,__BD_TEXT,__text</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__textcoal_nt,__BD_TEXT,__text</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__StaticInit,__BD_TEXT,__text</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__stubs,__BD_TEXT,__stubs</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__picsymbolstub4,__BD_TEXT,__picsymbolstub4,</span><br><span class=\"line\">-Wl,-segprot,__BD_TEXT,rx,rx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-1-不能移动的段\"><a href=\"#2-5-1-不能移动的段\" class=\"headerlink\" title=\"2.5.1 不能移动的段\"></a>2.5.1 不能移动的段</h4><p>首先，dyld 在启动阶段会检查 __unwind_info 和 __eh_frame 这两个 Section。如果移动这两个 Section，在启动后程序就会 Crash。</p>\n<p>第二，Swift 相关的 Section 不能移动，否则会引起 Crash。</p>\n<p>第三，自己在代码中指明要读取的 Section。</p>\n<h4 id=\"2-5-2\"><a href=\"#2-5-2\" class=\"headerlink\" title=\"2.5.2\"></a>2.5.2</h4><p><img src=\"/./Resources/text_segments.png\" alt=\"text_segments\"></p>\n<p><strong>每个 Section 都属于其中一种类型。Branch Island 算法会对类型是 typeCode 的 Section 中的跳转指令做检查，如果跳转的距离超出限制，则会在它们之间插入 “branch islands”，跳转指令会先跳到一个 branch island ，再从这个 branch island 跳到目标地址，以此来保证其跳转距离不超过限制。<br>__TEXT,__text 的类型是 typeCode，因此，__TEXT,__text 中超出范围跳转指令都会被保护，在最后 Output 检查时，就不会出现 branch out of range 的异常。所以，正常构建的 App，即使很大也不会出现链接失败的问题，这都是归功于 Branch Island 算法</strong></p>\n<p>移动<code>__TEXT,__text</code>需考虑两个问题：</p>\n<ol>\n<li>Branch Island 算法的检查逻辑没有适配到 Section 被移动的情况。</li>\n<li>Branch Island 算法不会保护自定义 Section。</li>\n</ol>\n<ul>\n<li><p>__TEXT,__text 移不干净导致链接失败。</p>\n</li>\n<li><p>不移动 __stubs 导致链接失败。</p>\n</li>\n<li><p>自定义 Section 的问题。</p>\n</li>\n</ul>\n<h3 id=\"2-6-二进制段压缩\"><a href=\"#2-6-二进制段压缩\" class=\"headerlink\" title=\"2.6 二进制段压缩\"></a>2.6 二进制段压缩</h3><p>Mach-O 文件占据了 Install Size 中很大一部分比例，但并不是文件中的每个段/节在程序启动的第一时间都要被用到。可以在构建过程中将 Mach-O 文件中的这部分段/节压缩，然后只要在这些段被使用到之前将其解压到内存中，就能达到了减少包大小的效果，同时也能保证程序正常运行。由于苹果的一些限制，我们目前只压缩了<code>__TEXT,__gcc_except_tab</code> 与 <code>__TEXT,__objc_methtype</code>两个节，然后在 <code>_dyld_register_func_for_add_image</code> 的回调中对它进行解压。该方案累计优化了 3.5 MB Install Size。</p>\n<h2 id=\"编译项\"><a href=\"#编译项\" class=\"headerlink\" title=\"编译项\"></a>编译项</h2><ul>\n<li><a href=\"https://www.infoq.cn/article/iowjwhbirqeobzf5m2o8\">今日头条 iOS 安装包大小优化—— 新阶段、新实践</a></li>\n<li><a href=\"https://www.infoq.cn/article/XUJL32hTDKYqAKz0hkMM\">今日头条优化实践： iOS 包大小二进制优化，一行代码减少 60 MB 下载大小</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-资源\"><a href=\"#1-资源\" class=\"headerlink\" title=\"1. 资源\"></a>1. 资源</h2><h3 id=\"1-1-合适的资源配置\"><a href=\"#1-1-合适的资源配置\" class=\"headerlink\" title=\"1.1 合适的资源配置\"></a>1.1 合适的资源配置</h3><ul>\n<li><p>pod iOS 8.0 –&gt; iOS 9.0， 影响因素：actool 编码压缩算法；</p>\n</li>\n<li><p>使用 RGB with palette 压缩图片：–number-of-colors 16 –quality 40-80</p>\n</li>\n<li><p>Assets.car（BOM 文件） 合并， 多个库中 Asset Catalog 中的图片合并到一个 Asset Catalog 中，再经 actool 构建成 Assets.car 产物</p>\n</li>\n<li><p>文本文件压缩：<br>1、压缩阶段：在 Build Phase 中添加脚本，构建期间对白名单内的文本文件做 zip 压缩；</p>\n<p>2、解压阶段：在 App 启动阶段，在异步线程中进行解压操作，将解压产物存放到沙盒中；</p>\n<p>3、读取阶段：在 App 运行时，hook 读取这些文件的方法，将读取路径从 Bundle 改为沙盒中的对应路径；</p>\n</li>\n</ul>\n<h2 id=\"2-Mac-O-文件优化\"><a href=\"#2-Mac-O-文件优化\" class=\"headerlink\" title=\"2. Mac-O 文件优化\"></a>2. Mac-O 文件优化</h2><h3 id=\"2-1-使用-Oz-编译参数\"><a href=\"#2-1-使用-Oz-编译参数\" class=\"headerlink\" title=\"2.1 使用 -Oz 编译参数\"></a>2.1 使用 -Oz 编译参数</h3><p>原理： 对重复的连续机器指令外联成函数进行复用，和“内联函数”的原理正好相反。</p>\n<p>指标： 4.5%</p>\n<h3 id=\"2-2-使用链接时优化-LTO\"><a href=\"#2-2-使用链接时优化-LTO\" class=\"headerlink\" title=\"2.2 使用链接时优化 LTO\"></a>2.2 使用链接时优化 LTO</h3><p>Incremental LTO</p>\n<h3 id=\"2-3-修正-Exported-Symbols-配置\"><a href=\"#2-3-修正-Exported-Symbols-配置\" class=\"headerlink\" title=\"2.3 修正 Exported Symbols 配置\"></a>2.3 修正 Exported Symbols 配置</h3><p>Xcode Build Settings 中的 EXPORTED_SYMBOLS_FILE 配置，控制着 Mach-O 中 __LINKEDIT 段中 Export Info 的信息。动态链接器 dyld 在做符号绑定时，会读取被绑定的动态库或可执行文件的 Export Info 信息，得到一个符号对应的实际调用地址。如果正在被绑定的符号，在目标动态库的 Export Info 中缺失，dyld 则会抛出异常，表现为 App 崩溃。</p>\n<h3 id=\"2-4-属性动态化\"><a href=\"#2-4-属性动态化\" class=\"headerlink\" title=\"2.4 属性动态化\"></a>2.4 属性动态化</h3><p>@dynamic –&gt; 关联属性</p>\n<h3 id=\"2-5-TEXT-段迁移\"><a href=\"#2-5-TEXT-段迁移\" class=\"headerlink\" title=\"2.5 __TEXT 段迁移\"></a>2.5 __TEXT 段迁移</h3><ul>\n<li>xcconfig</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_THIN_LINK_FLAGS = -Wl,-rename_section,__TEXT,__cstring,__RODATA,__cstring,-rename_section,__TEXT,__objc_methname,__RODATA,__objc_methname,-rename_section,__TEXT,__objc_classname,__RODATA,__objc_classname,-rename_section,__TEXT,__objc_methtype,__RODATA,__objc_methtype,-rename_section,__TEXT,__gcc_except_tab,__RODATA,__gcc_except_tab,-rename_section,__TEXT,__const,__RODATA,__const,-rename_section,__TEXT,__text,__BD_TEXT,__text,-rename_section,__TEXT,__textcoal_nt,__BD_TEXT,__text,-rename_section,__TEXT,__StaticInit,__BD_TEXT,__text,-rename_section,__TEXT,__stubs,__BD_TEXT,__stubs,-rename_section,__TEXT,__picsymbolstub4,__BD_TEXT,__picsymbolstub4,-segprot,__BD_TEXT,rx,rx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Other Linker Flags</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Wl,-rename_section,__TEXT,__cstring,__RODATA,__cstring</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__objc_methname,__RODATA,__objc_methname</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__objc_classname,__RODATA,__objc_classname</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__objc_methtype,__RODATA,__objc_methtype</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__gcc_except_tab,__RODATA,__gcc_except_tab</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__const,__RODATA,__const</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__text,__BD_TEXT,__text</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__textcoal_nt,__BD_TEXT,__text</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__StaticInit,__BD_TEXT,__text</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__stubs,__BD_TEXT,__stubs</span><br><span class=\"line\">-Wl,-rename_section,__TEXT,__picsymbolstub4,__BD_TEXT,__picsymbolstub4,</span><br><span class=\"line\">-Wl,-segprot,__BD_TEXT,rx,rx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-1-不能移动的段\"><a href=\"#2-5-1-不能移动的段\" class=\"headerlink\" title=\"2.5.1 不能移动的段\"></a>2.5.1 不能移动的段</h4><p>首先，dyld 在启动阶段会检查 __unwind_info 和 __eh_frame 这两个 Section。如果移动这两个 Section，在启动后程序就会 Crash。</p>\n<p>第二，Swift 相关的 Section 不能移动，否则会引起 Crash。</p>\n<p>第三，自己在代码中指明要读取的 Section。</p>\n<h4 id=\"2-5-2\"><a href=\"#2-5-2\" class=\"headerlink\" title=\"2.5.2\"></a>2.5.2</h4><p><img src=\"/./Resources/text_segments.png\" alt=\"text_segments\"></p>\n<p><strong>每个 Section 都属于其中一种类型。Branch Island 算法会对类型是 typeCode 的 Section 中的跳转指令做检查，如果跳转的距离超出限制，则会在它们之间插入 “branch islands”，跳转指令会先跳到一个 branch island ，再从这个 branch island 跳到目标地址，以此来保证其跳转距离不超过限制。<br>__TEXT,__text 的类型是 typeCode，因此，__TEXT,__text 中超出范围跳转指令都会被保护，在最后 Output 检查时，就不会出现 branch out of range 的异常。所以，正常构建的 App，即使很大也不会出现链接失败的问题，这都是归功于 Branch Island 算法</strong></p>\n<p>移动<code>__TEXT,__text</code>需考虑两个问题：</p>\n<ol>\n<li>Branch Island 算法的检查逻辑没有适配到 Section 被移动的情况。</li>\n<li>Branch Island 算法不会保护自定义 Section。</li>\n</ol>\n<ul>\n<li><p>__TEXT,__text 移不干净导致链接失败。</p>\n</li>\n<li><p>不移动 __stubs 导致链接失败。</p>\n</li>\n<li><p>自定义 Section 的问题。</p>\n</li>\n</ul>\n<h3 id=\"2-6-二进制段压缩\"><a href=\"#2-6-二进制段压缩\" class=\"headerlink\" title=\"2.6 二进制段压缩\"></a>2.6 二进制段压缩</h3><p>Mach-O 文件占据了 Install Size 中很大一部分比例，但并不是文件中的每个段/节在程序启动的第一时间都要被用到。可以在构建过程中将 Mach-O 文件中的这部分段/节压缩，然后只要在这些段被使用到之前将其解压到内存中，就能达到了减少包大小的效果，同时也能保证程序正常运行。由于苹果的一些限制，我们目前只压缩了<code>__TEXT,__gcc_except_tab</code> 与 <code>__TEXT,__objc_methtype</code>两个节，然后在 <code>_dyld_register_func_for_add_image</code> 的回调中对它进行解压。该方案累计优化了 3.5 MB Install Size。</p>\n<h2 id=\"编译项\"><a href=\"#编译项\" class=\"headerlink\" title=\"编译项\"></a>编译项</h2><ul>\n<li><a href=\"https://www.infoq.cn/article/iowjwhbirqeobzf5m2o8\">今日头条 iOS 安装包大小优化—— 新阶段、新实践</a></li>\n<li><a href=\"https://www.infoq.cn/article/XUJL32hTDKYqAKz0hkMM\">今日头条优化实践： iOS 包大小二进制优化，一行代码减少 60 MB 下载大小</a></li>\n</ul>\n"},{"title":"iOS之启动优化（二）","abbrlink":"58f7ab42","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [iOS App冷启动治理：来自美团外卖的实践](https://mp.weixin.qq.com/s/jN3jaNrvXczZoYIRCWZs7w)\n\n## 2. [Attribute Syntax](https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html)\n\n### 2.1、[OC 中的 __attribute__](https://www.jianshu.com/p/529dc0501bd3)\n\n### 2.2 [iOS __attribute__那点小事](https://www.jianshu.com/p/abeee47e82d8)\n\n## 3. [优化 App 的启动时间](http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/)\n\n## 4. [Dyld之二: 动态链接过程](https://blog.cnbluebox.com/blog/2017/10/12/dyld2/)\n\n## 5. [iOS摸鱼周报 第十六期](https://mp.weixin.qq.com/s/nuij8iKsARAF2rLwkVtA8w)\n\n### 5.1 [如何实现 iOS App 的冷启动优化](https://juejin.cn/post/6844904085108310024)\n","source":"_posts/iOS/Performance/LaunchOptimize2.md","raw":"---\ntitle: iOS之启动优化（二）\nabbrlink: 58f7ab42\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [iOS App冷启动治理：来自美团外卖的实践](https://mp.weixin.qq.com/s/jN3jaNrvXczZoYIRCWZs7w)\n\n## 2. [Attribute Syntax](https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html)\n\n### 2.1、[OC 中的 __attribute__](https://www.jianshu.com/p/529dc0501bd3)\n\n### 2.2 [iOS __attribute__那点小事](https://www.jianshu.com/p/abeee47e82d8)\n\n## 3. [优化 App 的启动时间](http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/)\n\n## 4. [Dyld之二: 动态链接过程](https://blog.cnbluebox.com/blog/2017/10/12/dyld2/)\n\n## 5. [iOS摸鱼周报 第十六期](https://mp.weixin.qq.com/s/nuij8iKsARAF2rLwkVtA8w)\n\n### 5.1 [如何实现 iOS App 的冷启动优化](https://juejin.cn/post/6844904085108310024)\n","slug":"iOS/Performance/LaunchOptimize2","published":1,"updated":"2021-07-29T06:45:57.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn25001ziu9k7ny56drz","content":"<h2 id=\"1-iOS-App冷启动治理：来自美团外卖的实践\"><a href=\"#1-iOS-App冷启动治理：来自美团外卖的实践\" class=\"headerlink\" title=\"1. iOS App冷启动治理：来自美团外卖的实践\"></a>1. <a href=\"https://mp.weixin.qq.com/s/jN3jaNrvXczZoYIRCWZs7w\">iOS App冷启动治理：来自美团外卖的实践</a></h2><h2 id=\"2-Attribute-Syntax\"><a href=\"#2-Attribute-Syntax\" class=\"headerlink\" title=\"2. Attribute Syntax\"></a>2. <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html\">Attribute Syntax</a></h2><h3 id=\"2-1、OC-中的-attribute\"><a href=\"#2-1、OC-中的-attribute\" class=\"headerlink\" title=\"2.1、OC 中的 attribute\"></a>2.1、<a href=\"https://www.jianshu.com/p/529dc0501bd3\">OC 中的 <strong>attribute</strong></a></h3><h3 id=\"2-2-iOS-attribute-那点小事\"><a href=\"#2-2-iOS-attribute-那点小事\" class=\"headerlink\" title=\"2.2 iOS __attribute__那点小事\"></a>2.2 <a href=\"https://www.jianshu.com/p/abeee47e82d8\">iOS __attribute__那点小事</a></h3><h2 id=\"3-优化-App-的启动时间\"><a href=\"#3-优化-App-的启动时间\" class=\"headerlink\" title=\"3. 优化 App 的启动时间\"></a>3. <a href=\"http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/\">优化 App 的启动时间</a></h2><h2 id=\"4-Dyld之二-动态链接过程\"><a href=\"#4-Dyld之二-动态链接过程\" class=\"headerlink\" title=\"4. Dyld之二: 动态链接过程\"></a>4. <a href=\"https://blog.cnbluebox.com/blog/2017/10/12/dyld2/\">Dyld之二: 动态链接过程</a></h2><h2 id=\"5-iOS摸鱼周报-第十六期\"><a href=\"#5-iOS摸鱼周报-第十六期\" class=\"headerlink\" title=\"5. iOS摸鱼周报 第十六期\"></a>5. <a href=\"https://mp.weixin.qq.com/s/nuij8iKsARAF2rLwkVtA8w\">iOS摸鱼周报 第十六期</a></h2><h3 id=\"5-1-如何实现-iOS-App-的冷启动优化\"><a href=\"#5-1-如何实现-iOS-App-的冷启动优化\" class=\"headerlink\" title=\"5.1 如何实现 iOS App 的冷启动优化\"></a>5.1 <a href=\"https://juejin.cn/post/6844904085108310024\">如何实现 iOS App 的冷启动优化</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-iOS-App冷启动治理：来自美团外卖的实践\"><a href=\"#1-iOS-App冷启动治理：来自美团外卖的实践\" class=\"headerlink\" title=\"1. iOS App冷启动治理：来自美团外卖的实践\"></a>1. <a href=\"https://mp.weixin.qq.com/s/jN3jaNrvXczZoYIRCWZs7w\">iOS App冷启动治理：来自美团外卖的实践</a></h2><h2 id=\"2-Attribute-Syntax\"><a href=\"#2-Attribute-Syntax\" class=\"headerlink\" title=\"2. Attribute Syntax\"></a>2. <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html\">Attribute Syntax</a></h2><h3 id=\"2-1、OC-中的-attribute\"><a href=\"#2-1、OC-中的-attribute\" class=\"headerlink\" title=\"2.1、OC 中的 attribute\"></a>2.1、<a href=\"https://www.jianshu.com/p/529dc0501bd3\">OC 中的 <strong>attribute</strong></a></h3><h3 id=\"2-2-iOS-attribute-那点小事\"><a href=\"#2-2-iOS-attribute-那点小事\" class=\"headerlink\" title=\"2.2 iOS __attribute__那点小事\"></a>2.2 <a href=\"https://www.jianshu.com/p/abeee47e82d8\">iOS __attribute__那点小事</a></h3><h2 id=\"3-优化-App-的启动时间\"><a href=\"#3-优化-App-的启动时间\" class=\"headerlink\" title=\"3. 优化 App 的启动时间\"></a>3. <a href=\"http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/\">优化 App 的启动时间</a></h2><h2 id=\"4-Dyld之二-动态链接过程\"><a href=\"#4-Dyld之二-动态链接过程\" class=\"headerlink\" title=\"4. Dyld之二: 动态链接过程\"></a>4. <a href=\"https://blog.cnbluebox.com/blog/2017/10/12/dyld2/\">Dyld之二: 动态链接过程</a></h2><h2 id=\"5-iOS摸鱼周报-第十六期\"><a href=\"#5-iOS摸鱼周报-第十六期\" class=\"headerlink\" title=\"5. iOS摸鱼周报 第十六期\"></a>5. <a href=\"https://mp.weixin.qq.com/s/nuij8iKsARAF2rLwkVtA8w\">iOS摸鱼周报 第十六期</a></h2><h3 id=\"5-1-如何实现-iOS-App-的冷启动优化\"><a href=\"#5-1-如何实现-iOS-App-的冷启动优化\" class=\"headerlink\" title=\"5.1 如何实现 iOS App 的冷启动优化\"></a>5.1 <a href=\"https://juejin.cn/post/6844904085108310024\">如何实现 iOS App 的冷启动优化</a></h3>"},{"title":"iOS之启动优化","abbrlink":"d31ab926","date":"2021-04-20T13:36:02.000Z","_content":"### 启动优化\n\n1、启动优化\n\n冷启动是指， App 点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的情况。这是一次完整的启动过程。\n\n热启动是指 ，App 在冷启动后用户将 App 退后台，在 App 的进程还在系统里的情况下，用户重新启动进入 App 的过程，这个过程做的事情非常少。\n\n* main() 函数执行前；\n\n* main() 函数执行后；\n\n* 首屏渲染完成后。\n\n#### 1、main() 函数执行前\n\n要做启动优化，就首先要知道，APP在启动前做了些什么？iOS APP 启动的时候，会做下面几件事情：\n\n* 加载可执行文件（Mac-o、App 的.o文件）；\n* 加载动态链接库，进行rebase指针调整和bind符号绑定；\n* Objc 运行时的初始化处理，包括Objc相关类的注册、category注册、selector唯一性检查等；\n* 初始化，包括 +load 方法，attribute((constructor))修饰函数的调用、创建C++静态全局变量。\n\n相应的，可以做的优化工作包括：\n\n* 减少动态库加载。每个库本身都有依赖关系，苹果公司建议使用更少的动态库，并且建议在使用动态库的数量较多时，尽量将多个动态库进行合并。数量上，苹果公司最多可以支持 6 个非系统动态库合并为一个。\n\n* 减少加载启动后不会去使用的类或者方法。\n\n* +load() 方法里的内容可以放到首屏渲染完成后再执行，或使用 +initialize() 方法替换掉。因为，在一个 +load() 方法里，进行运行时方法替换操作会带来 4 毫秒的消耗。不要小看这 4 毫秒，积少成多，执行 +load() 方法对启动速度的影响会越来越大。\n\n* 控制 C++ 全局变量的数量。\n\n#### 2、main() 函数执行后\n\n这阶段，主要是指从main函数之后到AppDelegate 的 `didFinishLuachingWithOptions` 方法里首屏渲染相关方法执行完成。主要包括：\n\n* 首屏初始化所需配置文件的读写操作；\n* 首屏列表大数据的读取；\n* 首屏渲染的大量计算等；\n\n对于这部分，做好结合业务和性能考虑，合理安排初始化。尽量不要阻塞主线程。\n\n#### 3、首屏渲染完成后\n\n这部分是指首屏渲染完成到`didFinishLuachingWithOptions`作用域结束。主要完成的是服务模块初始化、监听注册、配置文件读取等。这里分两种方式：功能级别和方法级别的启动优化。\n\n* 功能级别的优化的思路是： main() 函数开始执行后到首屏渲染完成前只处理首屏相关的业务，其他非首屏业务的初始 化、监听注册、配置文件读取等都放到首屏渲染完成后去做。\n\n* 在这之后，我们需要进一步做的，是检查首屏渲染完成前主线程上有哪些耗时方法，将没必要的耗时方法滞 后或者异步执行。通常情况下，耗时较长的方法主要发生在计算大量数据的情况下，具体的表现就是加载、 编辑、存储图片和文件等资源。\n\n目前来看，对App启动速度的监控，主要有两种手段。\n\n* 第一种方法是，定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时。Xcode 工具套件里自 带的 Time Profiler ，采用的就是这种方式。\n* 第二种方法是，对 objc_msgSend 方法进行 hook 来掌握所有方法的执行耗时。hook objc_msgSend 这种方式的优点是非常精确，而缺点是只能针对 Objective-C 的方法。当然，对于 c 方 法和 block 也不是没有办法，你可以使用 libffi 的 ffi_call 来达成 hook，但缺点就是编写维护相关工具门槛高。\n\n函数执行前(DYLD_PRINT_STATISTICS=1)，耗时：\n\n    Total pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n\n首屏出现时间——未登录： 0.4437880516052246\n首屏出现时间——已登录： 0.7114208936691284/0.6743890047073364\n                    end time：0.7480049133300781\n\n第一次优化：\n\n    show time: 0.2890850305557251\n    end time: 0.5157899856567383\n\n第二次优化：\n未登录：\n\n    show time: 0.27560102939605713\n    end time: 0.27729904651641846\n    mainAsynTime time: 0.3173290491104126\n    asynTime time: 0.7670600414276123\n\n已登录：\n\n    show time: 0.3778949975967407\n    end time: 0.37808406352996826\n    mainAsynTime time: 0.7077310085296631\n    asynTime time: 0.8228110074996948\n\n冷启动加载时间：\n\n    Total pre-main time: 1.0 seconds (100.0%)\n             dylib loading time: 597.56 milliseconds (55.8%)\n            rebase/binding time:  48.35 milliseconds (4.5%)\n                ObjC setup time:  59.63 milliseconds (5.5%)\n               initializer time: 364.73 milliseconds (34.0%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.15 milliseconds (0.7%)\n        libMainThreadChecker.dylib :  34.38 milliseconds (3.2%)\n              libglInterpose.dylib :  80.59 milliseconds (7.5%)\n             libMTLInterpose.dylib :  21.72 milliseconds (2.0%)\n                     sd_doctor_ios : 320.42 milliseconds (29.9%)\n\n启动优化总结：\n\n    使用DYLD_PRINT_STATISTICS测试启动加载时间\n    减少自定义的动态库集成\n    精简原有的Objective-C类和代码\n    移除静态的初始化操作\n    使用更多的Swift代码\n","source":"_posts/iOS/Performance/LaunchOptimize.md","raw":"---\ntitle: iOS之启动优化\nabbrlink: d31ab926\ndate: 2021-04-20 21:36:02\ntags:\n---\n### 启动优化\n\n1、启动优化\n\n冷启动是指， App 点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的情况。这是一次完整的启动过程。\n\n热启动是指 ，App 在冷启动后用户将 App 退后台，在 App 的进程还在系统里的情况下，用户重新启动进入 App 的过程，这个过程做的事情非常少。\n\n* main() 函数执行前；\n\n* main() 函数执行后；\n\n* 首屏渲染完成后。\n\n#### 1、main() 函数执行前\n\n要做启动优化，就首先要知道，APP在启动前做了些什么？iOS APP 启动的时候，会做下面几件事情：\n\n* 加载可执行文件（Mac-o、App 的.o文件）；\n* 加载动态链接库，进行rebase指针调整和bind符号绑定；\n* Objc 运行时的初始化处理，包括Objc相关类的注册、category注册、selector唯一性检查等；\n* 初始化，包括 +load 方法，attribute((constructor))修饰函数的调用、创建C++静态全局变量。\n\n相应的，可以做的优化工作包括：\n\n* 减少动态库加载。每个库本身都有依赖关系，苹果公司建议使用更少的动态库，并且建议在使用动态库的数量较多时，尽量将多个动态库进行合并。数量上，苹果公司最多可以支持 6 个非系统动态库合并为一个。\n\n* 减少加载启动后不会去使用的类或者方法。\n\n* +load() 方法里的内容可以放到首屏渲染完成后再执行，或使用 +initialize() 方法替换掉。因为，在一个 +load() 方法里，进行运行时方法替换操作会带来 4 毫秒的消耗。不要小看这 4 毫秒，积少成多，执行 +load() 方法对启动速度的影响会越来越大。\n\n* 控制 C++ 全局变量的数量。\n\n#### 2、main() 函数执行后\n\n这阶段，主要是指从main函数之后到AppDelegate 的 `didFinishLuachingWithOptions` 方法里首屏渲染相关方法执行完成。主要包括：\n\n* 首屏初始化所需配置文件的读写操作；\n* 首屏列表大数据的读取；\n* 首屏渲染的大量计算等；\n\n对于这部分，做好结合业务和性能考虑，合理安排初始化。尽量不要阻塞主线程。\n\n#### 3、首屏渲染完成后\n\n这部分是指首屏渲染完成到`didFinishLuachingWithOptions`作用域结束。主要完成的是服务模块初始化、监听注册、配置文件读取等。这里分两种方式：功能级别和方法级别的启动优化。\n\n* 功能级别的优化的思路是： main() 函数开始执行后到首屏渲染完成前只处理首屏相关的业务，其他非首屏业务的初始 化、监听注册、配置文件读取等都放到首屏渲染完成后去做。\n\n* 在这之后，我们需要进一步做的，是检查首屏渲染完成前主线程上有哪些耗时方法，将没必要的耗时方法滞 后或者异步执行。通常情况下，耗时较长的方法主要发生在计算大量数据的情况下，具体的表现就是加载、 编辑、存储图片和文件等资源。\n\n目前来看，对App启动速度的监控，主要有两种手段。\n\n* 第一种方法是，定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时。Xcode 工具套件里自 带的 Time Profiler ，采用的就是这种方式。\n* 第二种方法是，对 objc_msgSend 方法进行 hook 来掌握所有方法的执行耗时。hook objc_msgSend 这种方式的优点是非常精确，而缺点是只能针对 Objective-C 的方法。当然，对于 c 方 法和 block 也不是没有办法，你可以使用 libffi 的 ffi_call 来达成 hook，但缺点就是编写维护相关工具门槛高。\n\n函数执行前(DYLD_PRINT_STATISTICS=1)，耗时：\n\n    Total pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n\n首屏出现时间——未登录： 0.4437880516052246\n首屏出现时间——已登录： 0.7114208936691284/0.6743890047073364\n                    end time：0.7480049133300781\n\n第一次优化：\n\n    show time: 0.2890850305557251\n    end time: 0.5157899856567383\n\n第二次优化：\n未登录：\n\n    show time: 0.27560102939605713\n    end time: 0.27729904651641846\n    mainAsynTime time: 0.3173290491104126\n    asynTime time: 0.7670600414276123\n\n已登录：\n\n    show time: 0.3778949975967407\n    end time: 0.37808406352996826\n    mainAsynTime time: 0.7077310085296631\n    asynTime time: 0.8228110074996948\n\n冷启动加载时间：\n\n    Total pre-main time: 1.0 seconds (100.0%)\n             dylib loading time: 597.56 milliseconds (55.8%)\n            rebase/binding time:  48.35 milliseconds (4.5%)\n                ObjC setup time:  59.63 milliseconds (5.5%)\n               initializer time: 364.73 milliseconds (34.0%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.15 milliseconds (0.7%)\n        libMainThreadChecker.dylib :  34.38 milliseconds (3.2%)\n              libglInterpose.dylib :  80.59 milliseconds (7.5%)\n             libMTLInterpose.dylib :  21.72 milliseconds (2.0%)\n                     sd_doctor_ios : 320.42 milliseconds (29.9%)\n\n启动优化总结：\n\n    使用DYLD_PRINT_STATISTICS测试启动加载时间\n    减少自定义的动态库集成\n    精简原有的Objective-C类和代码\n    移除静态的初始化操作\n    使用更多的Swift代码\n","slug":"iOS/Performance/LaunchOptimize","published":1,"updated":"2021-07-29T06:46:00.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn260020iu9k5au8cx3p","content":"<h3 id=\"启动优化\"><a href=\"#启动优化\" class=\"headerlink\" title=\"启动优化\"></a>启动优化</h3><p>1、启动优化</p>\n<p>冷启动是指， App 点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的情况。这是一次完整的启动过程。</p>\n<p>热启动是指 ，App 在冷启动后用户将 App 退后台，在 App 的进程还在系统里的情况下，用户重新启动进入 App 的过程，这个过程做的事情非常少。</p>\n<ul>\n<li><p>main() 函数执行前；</p>\n</li>\n<li><p>main() 函数执行后；</p>\n</li>\n<li><p>首屏渲染完成后。</p>\n</li>\n</ul>\n<h4 id=\"1、main-函数执行前\"><a href=\"#1、main-函数执行前\" class=\"headerlink\" title=\"1、main() 函数执行前\"></a>1、main() 函数执行前</h4><p>要做启动优化，就首先要知道，APP在启动前做了些什么？iOS APP 启动的时候，会做下面几件事情：</p>\n<ul>\n<li>加载可执行文件（Mac-o、App 的.o文件）；</li>\n<li>加载动态链接库，进行rebase指针调整和bind符号绑定；</li>\n<li>Objc 运行时的初始化处理，包括Objc相关类的注册、category注册、selector唯一性检查等；</li>\n<li>初始化，包括 +load 方法，attribute((constructor))修饰函数的调用、创建C++静态全局变量。</li>\n</ul>\n<p>相应的，可以做的优化工作包括：</p>\n<ul>\n<li><p>减少动态库加载。每个库本身都有依赖关系，苹果公司建议使用更少的动态库，并且建议在使用动态库的数量较多时，尽量将多个动态库进行合并。数量上，苹果公司最多可以支持 6 个非系统动态库合并为一个。</p>\n</li>\n<li><p>减少加载启动后不会去使用的类或者方法。</p>\n</li>\n<li><p>+load() 方法里的内容可以放到首屏渲染完成后再执行，或使用 +initialize() 方法替换掉。因为，在一个 +load() 方法里，进行运行时方法替换操作会带来 4 毫秒的消耗。不要小看这 4 毫秒，积少成多，执行 +load() 方法对启动速度的影响会越来越大。</p>\n</li>\n<li><p>控制 C++ 全局变量的数量。</p>\n</li>\n</ul>\n<h4 id=\"2、main-函数执行后\"><a href=\"#2、main-函数执行后\" class=\"headerlink\" title=\"2、main() 函数执行后\"></a>2、main() 函数执行后</h4><p>这阶段，主要是指从main函数之后到AppDelegate 的 <code>didFinishLuachingWithOptions</code> 方法里首屏渲染相关方法执行完成。主要包括：</p>\n<ul>\n<li>首屏初始化所需配置文件的读写操作；</li>\n<li>首屏列表大数据的读取；</li>\n<li>首屏渲染的大量计算等；</li>\n</ul>\n<p>对于这部分，做好结合业务和性能考虑，合理安排初始化。尽量不要阻塞主线程。</p>\n<h4 id=\"3、首屏渲染完成后\"><a href=\"#3、首屏渲染完成后\" class=\"headerlink\" title=\"3、首屏渲染完成后\"></a>3、首屏渲染完成后</h4><p>这部分是指首屏渲染完成到<code>didFinishLuachingWithOptions</code>作用域结束。主要完成的是服务模块初始化、监听注册、配置文件读取等。这里分两种方式：功能级别和方法级别的启动优化。</p>\n<ul>\n<li><p>功能级别的优化的思路是： main() 函数开始执行后到首屏渲染完成前只处理首屏相关的业务，其他非首屏业务的初始 化、监听注册、配置文件读取等都放到首屏渲染完成后去做。</p>\n</li>\n<li><p>在这之后，我们需要进一步做的，是检查首屏渲染完成前主线程上有哪些耗时方法，将没必要的耗时方法滞 后或者异步执行。通常情况下，耗时较长的方法主要发生在计算大量数据的情况下，具体的表现就是加载、 编辑、存储图片和文件等资源。</p>\n</li>\n</ul>\n<p>目前来看，对App启动速度的监控，主要有两种手段。</p>\n<ul>\n<li>第一种方法是，定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时。Xcode 工具套件里自 带的 Time Profiler ，采用的就是这种方式。</li>\n<li>第二种方法是，对 objc_msgSend 方法进行 hook 来掌握所有方法的执行耗时。hook objc_msgSend 这种方式的优点是非常精确，而缺点是只能针对 Objective-C 的方法。当然，对于 c 方 法和 block 也不是没有办法，你可以使用 libffi 的 ffi_call 来达成 hook，但缺点就是编写维护相关工具门槛高。</li>\n</ul>\n<p>函数执行前(DYLD_PRINT_STATISTICS=1)，耗时：</p>\n<pre><code>Total pre-main time: 1.3 seconds (100.0%)\n         dylib loading time: 531.35 milliseconds (39.9%)\n        rebase/binding time:  46.17 milliseconds (3.4%)\n            ObjC setup time: 178.40 milliseconds (13.4%)\n           initializer time: 572.91 milliseconds (43.1%)\n           slowest intializers :\n             libSystem.B.dylib :   8.27 milliseconds (0.6%)\n    libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n          libglInterpose.dylib : 227.26 milliseconds (17.1%)\n         libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                 sd_doctor_ios : 402.81 milliseconds (30.3%)\n</code></pre>\n<p>首屏出现时间——未登录： 0.4437880516052246<br>首屏出现时间——已登录： 0.7114208936691284/0.6743890047073364<br>                    end time：0.7480049133300781</p>\n<p>第一次优化：</p>\n<pre><code>show time: 0.2890850305557251\nend time: 0.5157899856567383\n</code></pre>\n<p>第二次优化：<br>未登录：</p>\n<pre><code>show time: 0.27560102939605713\nend time: 0.27729904651641846\nmainAsynTime time: 0.3173290491104126\nasynTime time: 0.7670600414276123\n</code></pre>\n<p>已登录：</p>\n<pre><code>show time: 0.3778949975967407\nend time: 0.37808406352996826\nmainAsynTime time: 0.7077310085296631\nasynTime time: 0.8228110074996948\n</code></pre>\n<p>冷启动加载时间：</p>\n<pre><code>Total pre-main time: 1.0 seconds (100.0%)\n         dylib loading time: 597.56 milliseconds (55.8%)\n        rebase/binding time:  48.35 milliseconds (4.5%)\n            ObjC setup time:  59.63 milliseconds (5.5%)\n           initializer time: 364.73 milliseconds (34.0%)\n           slowest intializers :\n             libSystem.B.dylib :   8.15 milliseconds (0.7%)\n    libMainThreadChecker.dylib :  34.38 milliseconds (3.2%)\n          libglInterpose.dylib :  80.59 milliseconds (7.5%)\n         libMTLInterpose.dylib :  21.72 milliseconds (2.0%)\n                 sd_doctor_ios : 320.42 milliseconds (29.9%)\n</code></pre>\n<p>启动优化总结：</p>\n<pre><code>使用DYLD_PRINT_STATISTICS测试启动加载时间\n减少自定义的动态库集成\n精简原有的Objective-C类和代码\n移除静态的初始化操作\n使用更多的Swift代码\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"启动优化\"><a href=\"#启动优化\" class=\"headerlink\" title=\"启动优化\"></a>启动优化</h3><p>1、启动优化</p>\n<p>冷启动是指， App 点击启动前，它的进程不在系统里，需要系统新创建一个进程分配给它启动的情况。这是一次完整的启动过程。</p>\n<p>热启动是指 ，App 在冷启动后用户将 App 退后台，在 App 的进程还在系统里的情况下，用户重新启动进入 App 的过程，这个过程做的事情非常少。</p>\n<ul>\n<li><p>main() 函数执行前；</p>\n</li>\n<li><p>main() 函数执行后；</p>\n</li>\n<li><p>首屏渲染完成后。</p>\n</li>\n</ul>\n<h4 id=\"1、main-函数执行前\"><a href=\"#1、main-函数执行前\" class=\"headerlink\" title=\"1、main() 函数执行前\"></a>1、main() 函数执行前</h4><p>要做启动优化，就首先要知道，APP在启动前做了些什么？iOS APP 启动的时候，会做下面几件事情：</p>\n<ul>\n<li>加载可执行文件（Mac-o、App 的.o文件）；</li>\n<li>加载动态链接库，进行rebase指针调整和bind符号绑定；</li>\n<li>Objc 运行时的初始化处理，包括Objc相关类的注册、category注册、selector唯一性检查等；</li>\n<li>初始化，包括 +load 方法，attribute((constructor))修饰函数的调用、创建C++静态全局变量。</li>\n</ul>\n<p>相应的，可以做的优化工作包括：</p>\n<ul>\n<li><p>减少动态库加载。每个库本身都有依赖关系，苹果公司建议使用更少的动态库，并且建议在使用动态库的数量较多时，尽量将多个动态库进行合并。数量上，苹果公司最多可以支持 6 个非系统动态库合并为一个。</p>\n</li>\n<li><p>减少加载启动后不会去使用的类或者方法。</p>\n</li>\n<li><p>+load() 方法里的内容可以放到首屏渲染完成后再执行，或使用 +initialize() 方法替换掉。因为，在一个 +load() 方法里，进行运行时方法替换操作会带来 4 毫秒的消耗。不要小看这 4 毫秒，积少成多，执行 +load() 方法对启动速度的影响会越来越大。</p>\n</li>\n<li><p>控制 C++ 全局变量的数量。</p>\n</li>\n</ul>\n<h4 id=\"2、main-函数执行后\"><a href=\"#2、main-函数执行后\" class=\"headerlink\" title=\"2、main() 函数执行后\"></a>2、main() 函数执行后</h4><p>这阶段，主要是指从main函数之后到AppDelegate 的 <code>didFinishLuachingWithOptions</code> 方法里首屏渲染相关方法执行完成。主要包括：</p>\n<ul>\n<li>首屏初始化所需配置文件的读写操作；</li>\n<li>首屏列表大数据的读取；</li>\n<li>首屏渲染的大量计算等；</li>\n</ul>\n<p>对于这部分，做好结合业务和性能考虑，合理安排初始化。尽量不要阻塞主线程。</p>\n<h4 id=\"3、首屏渲染完成后\"><a href=\"#3、首屏渲染完成后\" class=\"headerlink\" title=\"3、首屏渲染完成后\"></a>3、首屏渲染完成后</h4><p>这部分是指首屏渲染完成到<code>didFinishLuachingWithOptions</code>作用域结束。主要完成的是服务模块初始化、监听注册、配置文件读取等。这里分两种方式：功能级别和方法级别的启动优化。</p>\n<ul>\n<li><p>功能级别的优化的思路是： main() 函数开始执行后到首屏渲染完成前只处理首屏相关的业务，其他非首屏业务的初始 化、监听注册、配置文件读取等都放到首屏渲染完成后去做。</p>\n</li>\n<li><p>在这之后，我们需要进一步做的，是检查首屏渲染完成前主线程上有哪些耗时方法，将没必要的耗时方法滞 后或者异步执行。通常情况下，耗时较长的方法主要发生在计算大量数据的情况下，具体的表现就是加载、 编辑、存储图片和文件等资源。</p>\n</li>\n</ul>\n<p>目前来看，对App启动速度的监控，主要有两种手段。</p>\n<ul>\n<li>第一种方法是，定时抓取主线程上的方法调用堆栈，计算一段时间里各个方法的耗时。Xcode 工具套件里自 带的 Time Profiler ，采用的就是这种方式。</li>\n<li>第二种方法是，对 objc_msgSend 方法进行 hook 来掌握所有方法的执行耗时。hook objc_msgSend 这种方式的优点是非常精确，而缺点是只能针对 Objective-C 的方法。当然，对于 c 方 法和 block 也不是没有办法，你可以使用 libffi 的 ffi_call 来达成 hook，但缺点就是编写维护相关工具门槛高。</li>\n</ul>\n<p>函数执行前(DYLD_PRINT_STATISTICS=1)，耗时：</p>\n<pre><code>Total pre-main time: 1.3 seconds (100.0%)\n         dylib loading time: 531.35 milliseconds (39.9%)\n        rebase/binding time:  46.17 milliseconds (3.4%)\n            ObjC setup time: 178.40 milliseconds (13.4%)\n           initializer time: 572.91 milliseconds (43.1%)\n           slowest intializers :\n             libSystem.B.dylib :   8.27 milliseconds (0.6%)\n    libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n          libglInterpose.dylib : 227.26 milliseconds (17.1%)\n         libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                 sd_doctor_ios : 402.81 milliseconds (30.3%)\n</code></pre>\n<p>首屏出现时间——未登录： 0.4437880516052246<br>首屏出现时间——已登录： 0.7114208936691284/0.6743890047073364<br>                    end time：0.7480049133300781</p>\n<p>第一次优化：</p>\n<pre><code>show time: 0.2890850305557251\nend time: 0.5157899856567383\n</code></pre>\n<p>第二次优化：<br>未登录：</p>\n<pre><code>show time: 0.27560102939605713\nend time: 0.27729904651641846\nmainAsynTime time: 0.3173290491104126\nasynTime time: 0.7670600414276123\n</code></pre>\n<p>已登录：</p>\n<pre><code>show time: 0.3778949975967407\nend time: 0.37808406352996826\nmainAsynTime time: 0.7077310085296631\nasynTime time: 0.8228110074996948\n</code></pre>\n<p>冷启动加载时间：</p>\n<pre><code>Total pre-main time: 1.0 seconds (100.0%)\n         dylib loading time: 597.56 milliseconds (55.8%)\n        rebase/binding time:  48.35 milliseconds (4.5%)\n            ObjC setup time:  59.63 milliseconds (5.5%)\n           initializer time: 364.73 milliseconds (34.0%)\n           slowest intializers :\n             libSystem.B.dylib :   8.15 milliseconds (0.7%)\n    libMainThreadChecker.dylib :  34.38 milliseconds (3.2%)\n          libglInterpose.dylib :  80.59 milliseconds (7.5%)\n         libMTLInterpose.dylib :  21.72 milliseconds (2.0%)\n                 sd_doctor_ios : 320.42 milliseconds (29.9%)\n</code></pre>\n<p>启动优化总结：</p>\n<pre><code>使用DYLD_PRINT_STATISTICS测试启动加载时间\n减少自定义的动态库集成\n精简原有的Objective-C类和代码\n移除静态的初始化操作\n使用更多的Swift代码\n</code></pre>\n"},{"title":"iOS之Mac-O 文件揭秘","abbrlink":"a4cb2df2","date":"2021-04-20T13:36:02.000Z","_content":"\n1、[Apple 操作系统可执行文件 Mach-O](https://ming1016.github.io/2020/03/29/apple-system-executable-file-macho/)\n\n2、[Mach-O 可执行文件](https://objccn.io/issue-6-3/)\n","source":"_posts/iOS/Performance/MacOFiles.md","raw":"---\ntitle: iOS之Mac-O 文件揭秘\nabbrlink: a4cb2df2\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n1、[Apple 操作系统可执行文件 Mach-O](https://ming1016.github.io/2020/03/29/apple-system-executable-file-macho/)\n\n2、[Mach-O 可执行文件](https://objccn.io/issue-6-3/)\n","slug":"iOS/Performance/MacOFiles","published":1,"updated":"2021-07-29T06:46:00.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn260021iu9kh3k2htr6","content":"<p>1、<a href=\"https://ming1016.github.io/2020/03/29/apple-system-executable-file-macho/\">Apple 操作系统可执行文件 Mach-O</a></p>\n<p>2、<a href=\"https://objccn.io/issue-6-3/\">Mach-O 可执行文件</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、<a href=\"https://ming1016.github.io/2020/03/29/apple-system-executable-file-macho/\">Apple 操作系统可执行文件 Mach-O</a></p>\n<p>2、<a href=\"https://objccn.io/issue-6-3/\">Mach-O 可执行文件</a></p>\n"},{"title":"iOS 之性能优化","abbrlink":1928,"date":"2021-07-29T02:05:02.000Z","_content":"## 性能优化\n\n1、[参考资料](https://github.com/skyming/iOS-Performance-Optimization.git)\n\n2、界面流畅性优化：\n\n* [facebookarchive/AsyncDisplayKit](https://github.com/facebookarchive/AsyncDisplayKit)\n* [TextureGroup/Texture](https://github.com/TextureGroup/Texture)\n* [iOS tableView 优化](https://juejin.cn/post/6850418118850789390#heading-7)\n\n3、webView加载优化：\n\n* [Tencent/VasSonic](https://github.com/Tencent/VasSonic)\n* 大前端？？webView\n\n工具：instrument -> Time Profiler\n\n[iOS性能优化总结](https://juejin.im/post/5ace078cf265da23994ee493)\n\n[WeRead团队博客](https://wereadteam.github.io/)\n\n[iOS性能优化](http://www.mengyueping.com/2018/08/19/iOS_optimization_all/)\n\n[iOS-Performance-Optimization](https://github.com/skyming/iOS-Performance-Optimization)\n","source":"_posts/iOS/Performance/Performance.md","raw":"---\ntitle: iOS 之性能优化\nabbrlink: 1928\ndate: 2021-07-29 10:05:02\ntags:\n---\n## 性能优化\n\n1、[参考资料](https://github.com/skyming/iOS-Performance-Optimization.git)\n\n2、界面流畅性优化：\n\n* [facebookarchive/AsyncDisplayKit](https://github.com/facebookarchive/AsyncDisplayKit)\n* [TextureGroup/Texture](https://github.com/TextureGroup/Texture)\n* [iOS tableView 优化](https://juejin.cn/post/6850418118850789390#heading-7)\n\n3、webView加载优化：\n\n* [Tencent/VasSonic](https://github.com/Tencent/VasSonic)\n* 大前端？？webView\n\n工具：instrument -> Time Profiler\n\n[iOS性能优化总结](https://juejin.im/post/5ace078cf265da23994ee493)\n\n[WeRead团队博客](https://wereadteam.github.io/)\n\n[iOS性能优化](http://www.mengyueping.com/2018/08/19/iOS_optimization_all/)\n\n[iOS-Performance-Optimization](https://github.com/skyming/iOS-Performance-Optimization)\n","slug":"iOS/Performance/Performance","published":1,"updated":"2021-07-29T06:46:00.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn270022iu9kczfqhhp1","content":"<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><p>1、<a href=\"https://github.com/skyming/iOS-Performance-Optimization.git\">参考资料</a></p>\n<p>2、界面流畅性优化：</p>\n<ul>\n<li><a href=\"https://github.com/facebookarchive/AsyncDisplayKit\">facebookarchive/AsyncDisplayKit</a></li>\n<li><a href=\"https://github.com/TextureGroup/Texture\">TextureGroup/Texture</a></li>\n<li><a href=\"https://juejin.cn/post/6850418118850789390#heading-7\">iOS tableView 优化</a></li>\n</ul>\n<p>3、webView加载优化：</p>\n<ul>\n<li><a href=\"https://github.com/Tencent/VasSonic\">Tencent/VasSonic</a></li>\n<li>大前端？？webView</li>\n</ul>\n<p>工具：instrument -&gt; Time Profiler</p>\n<p><a href=\"https://juejin.im/post/5ace078cf265da23994ee493\">iOS性能优化总结</a></p>\n<p><a href=\"https://wereadteam.github.io/\">WeRead团队博客</a></p>\n<p><a href=\"http://www.mengyueping.com/2018/08/19/iOS_optimization_all/\">iOS性能优化</a></p>\n<p><a href=\"https://github.com/skyming/iOS-Performance-Optimization\">iOS-Performance-Optimization</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><p>1、<a href=\"https://github.com/skyming/iOS-Performance-Optimization.git\">参考资料</a></p>\n<p>2、界面流畅性优化：</p>\n<ul>\n<li><a href=\"https://github.com/facebookarchive/AsyncDisplayKit\">facebookarchive/AsyncDisplayKit</a></li>\n<li><a href=\"https://github.com/TextureGroup/Texture\">TextureGroup/Texture</a></li>\n<li><a href=\"https://juejin.cn/post/6850418118850789390#heading-7\">iOS tableView 优化</a></li>\n</ul>\n<p>3、webView加载优化：</p>\n<ul>\n<li><a href=\"https://github.com/Tencent/VasSonic\">Tencent/VasSonic</a></li>\n<li>大前端？？webView</li>\n</ul>\n<p>工具：instrument -&gt; Time Profiler</p>\n<p><a href=\"https://juejin.im/post/5ace078cf265da23994ee493\">iOS性能优化总结</a></p>\n<p><a href=\"https://wereadteam.github.io/\">WeRead团队博客</a></p>\n<p><a href=\"http://www.mengyueping.com/2018/08/19/iOS_optimization_all/\">iOS性能优化</a></p>\n<p><a href=\"https://github.com/skyming/iOS-Performance-Optimization\">iOS-Performance-Optimization</a></p>\n"},{"title":"iOS 之功耗优化","abbrlink":"e6157ac4","date":"2021-04-20T13:36:02.000Z","_content":"\n1、[iOS进阶--App功耗优化看这篇就够了](http://www.cocoachina.com/articles/21428)\n\n2、[教你开发省电的 iOS app（WWDC17 观后）](https://www.jianshu.com/p/f0dc653d04ca)\n","source":"_posts/iOS/Performance/PowerOptimize.md","raw":"---\ntitle: iOS 之功耗优化\nabbrlink: e6157ac4\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n1、[iOS进阶--App功耗优化看这篇就够了](http://www.cocoachina.com/articles/21428)\n\n2、[教你开发省电的 iOS app（WWDC17 观后）](https://www.jianshu.com/p/f0dc653d04ca)\n","slug":"iOS/Performance/PowerOptimize","published":1,"updated":"2021-07-29T06:46:00.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn290023iu9k3aj6bnwk","content":"<p>1、<a href=\"http://www.cocoachina.com/articles/21428\">iOS进阶–App功耗优化看这篇就够了</a></p>\n<p>2、<a href=\"https://www.jianshu.com/p/f0dc653d04ca\">教你开发省电的 iOS app（WWDC17 观后）</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、<a href=\"http://www.cocoachina.com/articles/21428\">iOS进阶–App功耗优化看这篇就够了</a></p>\n<p>2、<a href=\"https://www.jianshu.com/p/f0dc653d04ca\">教你开发省电的 iOS app（WWDC17 观后）</a></p>\n"},{"title":"iOS之dyld环境变量介绍","abbrlink":"10329bb4","date":"2021-04-20T13:36:02.000Z","_content":"### [Xcode - 使用 dyld 环境变量进行调试](https://blog.csdn.net/lovechris00/article/details/82290773)\n\n一、使用 `DYLD_PRINT_STATISTICS` 获取启动时间\n\nedit scheme -> run -> arguments里面加入环境变量 DYLD_PRINT_STATISTICS = 1\n\n```shell\nTotal pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n```\n\n二、DYLD_PRINT 变量列表\n\n* 在终端通过命令：man dyld 可以列出所有的\n\n```shell\nDYLD_FRAMEWORK_PATH\nDYLD_FALLBACK_FRAMEWORK_PATH\nDYLD_VERSIONED_FRAMEWORK_PATH\nDYLD_LIBRARY_PATH\nDYLD_FALLBACK_LIBRARY_PATH\nDYLD_VERSIONED_LIBRARY_PATH\nDYLD_PRINT_TO_FILE\nDYLD_SHARED_REGION\nDYLD_INSERT_LIBRARIES\nDYLD_FORCE_FLAT_NAMESPACE\nDYLD_IMAGE_SUFFIX\nDYLD_PRINT_OPTS\nDYLD_PRINT_ENV\nDYLD_PRINT_LIBRARIES\nDYLD_BIND_AT_LAUNCH\nDYLD_DISABLE_DOFS\nDYLD_PRINT_APIS\nDYLD_PRINT_BINDINGS\nDYLD_PRINT_INITIALIZERS\nDYLD_PRINT_REBASINGS\nDYLD_PRINT_SEGMENTS\nDYLD_PRINT_STATISTICS\nDYLD_PRINT_DOFS\nDYLD_PRINT_RPATHS\nDYLD_SHARED_CACHE_DIR\nDYLD_SHARED_CACHE_DONT_VALIDATE\n```\n\n详情见：[dyld 命令简介](./dyld.txt)\n","source":"_posts/iOS/Performance/dyldVariables.md","raw":"---\ntitle: iOS之dyld环境变量介绍\nabbrlink: 10329bb4\ndate: 2021-04-20 21:36:02\ntags:\n---\n### [Xcode - 使用 dyld 环境变量进行调试](https://blog.csdn.net/lovechris00/article/details/82290773)\n\n一、使用 `DYLD_PRINT_STATISTICS` 获取启动时间\n\nedit scheme -> run -> arguments里面加入环境变量 DYLD_PRINT_STATISTICS = 1\n\n```shell\nTotal pre-main time: 1.3 seconds (100.0%)\n             dylib loading time: 531.35 milliseconds (39.9%)\n            rebase/binding time:  46.17 milliseconds (3.4%)\n                ObjC setup time: 178.40 milliseconds (13.4%)\n               initializer time: 572.91 milliseconds (43.1%)\n               slowest intializers :\n                 libSystem.B.dylib :   8.27 milliseconds (0.6%)\n        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)\n              libglInterpose.dylib : 227.26 milliseconds (17.1%)\n             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)\n                     sd_doctor_ios : 402.81 milliseconds (30.3%)\n```\n\n二、DYLD_PRINT 变量列表\n\n* 在终端通过命令：man dyld 可以列出所有的\n\n```shell\nDYLD_FRAMEWORK_PATH\nDYLD_FALLBACK_FRAMEWORK_PATH\nDYLD_VERSIONED_FRAMEWORK_PATH\nDYLD_LIBRARY_PATH\nDYLD_FALLBACK_LIBRARY_PATH\nDYLD_VERSIONED_LIBRARY_PATH\nDYLD_PRINT_TO_FILE\nDYLD_SHARED_REGION\nDYLD_INSERT_LIBRARIES\nDYLD_FORCE_FLAT_NAMESPACE\nDYLD_IMAGE_SUFFIX\nDYLD_PRINT_OPTS\nDYLD_PRINT_ENV\nDYLD_PRINT_LIBRARIES\nDYLD_BIND_AT_LAUNCH\nDYLD_DISABLE_DOFS\nDYLD_PRINT_APIS\nDYLD_PRINT_BINDINGS\nDYLD_PRINT_INITIALIZERS\nDYLD_PRINT_REBASINGS\nDYLD_PRINT_SEGMENTS\nDYLD_PRINT_STATISTICS\nDYLD_PRINT_DOFS\nDYLD_PRINT_RPATHS\nDYLD_SHARED_CACHE_DIR\nDYLD_SHARED_CACHE_DONT_VALIDATE\n```\n\n详情见：[dyld 命令简介](./dyld.txt)\n","slug":"iOS/Performance/dyldVariables","published":1,"updated":"2021-07-29T06:46:00.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2a0024iu9kb7g33j2n","content":"<h3 id=\"Xcode-使用-dyld-环境变量进行调试\"><a href=\"#Xcode-使用-dyld-环境变量进行调试\" class=\"headerlink\" title=\"Xcode - 使用 dyld 环境变量进行调试\"></a><a href=\"https://blog.csdn.net/lovechris00/article/details/82290773\">Xcode - 使用 dyld 环境变量进行调试</a></h3><p>一、使用 <code>DYLD_PRINT_STATISTICS</code> 获取启动时间</p>\n<p>edit scheme -&gt; run -&gt; arguments里面加入环境变量 DYLD_PRINT_STATISTICS = 1</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Total pre-main time: 1.3 seconds (100.0%)</span><br><span class=\"line\">             dylib loading time: 531.35 milliseconds (39.9%)</span><br><span class=\"line\">            rebase/binding time:  46.17 milliseconds (3.4%)</span><br><span class=\"line\">                ObjC setup time: 178.40 milliseconds (13.4%)</span><br><span class=\"line\">               initializer time: 572.91 milliseconds (43.1%)</span><br><span class=\"line\">               slowest intializers :</span><br><span class=\"line\">                 libSystem.B.dylib :   8.27 milliseconds (0.6%)</span><br><span class=\"line\">        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)</span><br><span class=\"line\">              libglInterpose.dylib : 227.26 milliseconds (17.1%)</span><br><span class=\"line\">             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)</span><br><span class=\"line\">                     sd_doctor_ios : 402.81 milliseconds (30.3%)</span><br></pre></td></tr></table></figure>\n\n<p>二、DYLD_PRINT 变量列表</p>\n<ul>\n<li>在终端通过命令：man dyld 可以列出所有的</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DYLD_FRAMEWORK_PATH</span><br><span class=\"line\">DYLD_FALLBACK_FRAMEWORK_PATH</span><br><span class=\"line\">DYLD_VERSIONED_FRAMEWORK_PATH</span><br><span class=\"line\">DYLD_LIBRARY_PATH</span><br><span class=\"line\">DYLD_FALLBACK_LIBRARY_PATH</span><br><span class=\"line\">DYLD_VERSIONED_LIBRARY_PATH</span><br><span class=\"line\">DYLD_PRINT_TO_FILE</span><br><span class=\"line\">DYLD_SHARED_REGION</span><br><span class=\"line\">DYLD_INSERT_LIBRARIES</span><br><span class=\"line\">DYLD_FORCE_FLAT_NAMESPACE</span><br><span class=\"line\">DYLD_IMAGE_SUFFIX</span><br><span class=\"line\">DYLD_PRINT_OPTS</span><br><span class=\"line\">DYLD_PRINT_ENV</span><br><span class=\"line\">DYLD_PRINT_LIBRARIES</span><br><span class=\"line\">DYLD_BIND_AT_LAUNCH</span><br><span class=\"line\">DYLD_DISABLE_DOFS</span><br><span class=\"line\">DYLD_PRINT_APIS</span><br><span class=\"line\">DYLD_PRINT_BINDINGS</span><br><span class=\"line\">DYLD_PRINT_INITIALIZERS</span><br><span class=\"line\">DYLD_PRINT_REBASINGS</span><br><span class=\"line\">DYLD_PRINT_SEGMENTS</span><br><span class=\"line\">DYLD_PRINT_STATISTICS</span><br><span class=\"line\">DYLD_PRINT_DOFS</span><br><span class=\"line\">DYLD_PRINT_RPATHS</span><br><span class=\"line\">DYLD_SHARED_CACHE_DIR</span><br><span class=\"line\">DYLD_SHARED_CACHE_DONT_VALIDATE</span><br></pre></td></tr></table></figure>\n\n<p>详情见：<a href=\"./dyld.txt\">dyld 命令简介</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Xcode-使用-dyld-环境变量进行调试\"><a href=\"#Xcode-使用-dyld-环境变量进行调试\" class=\"headerlink\" title=\"Xcode - 使用 dyld 环境变量进行调试\"></a><a href=\"https://blog.csdn.net/lovechris00/article/details/82290773\">Xcode - 使用 dyld 环境变量进行调试</a></h3><p>一、使用 <code>DYLD_PRINT_STATISTICS</code> 获取启动时间</p>\n<p>edit scheme -&gt; run -&gt; arguments里面加入环境变量 DYLD_PRINT_STATISTICS = 1</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Total pre-main time: 1.3 seconds (100.0%)</span><br><span class=\"line\">             dylib loading time: 531.35 milliseconds (39.9%)</span><br><span class=\"line\">            rebase/binding time:  46.17 milliseconds (3.4%)</span><br><span class=\"line\">                ObjC setup time: 178.40 milliseconds (13.4%)</span><br><span class=\"line\">               initializer time: 572.91 milliseconds (43.1%)</span><br><span class=\"line\">               slowest intializers :</span><br><span class=\"line\">                 libSystem.B.dylib :   8.27 milliseconds (0.6%)</span><br><span class=\"line\">        libMainThreadChecker.dylib :  42.80 milliseconds (3.2%)</span><br><span class=\"line\">              libglInterpose.dylib : 227.26 milliseconds (17.1%)</span><br><span class=\"line\">             libMTLInterpose.dylib :  40.13 milliseconds (3.0%)</span><br><span class=\"line\">                     sd_doctor_ios : 402.81 milliseconds (30.3%)</span><br></pre></td></tr></table></figure>\n\n<p>二、DYLD_PRINT 变量列表</p>\n<ul>\n<li>在终端通过命令：man dyld 可以列出所有的</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DYLD_FRAMEWORK_PATH</span><br><span class=\"line\">DYLD_FALLBACK_FRAMEWORK_PATH</span><br><span class=\"line\">DYLD_VERSIONED_FRAMEWORK_PATH</span><br><span class=\"line\">DYLD_LIBRARY_PATH</span><br><span class=\"line\">DYLD_FALLBACK_LIBRARY_PATH</span><br><span class=\"line\">DYLD_VERSIONED_LIBRARY_PATH</span><br><span class=\"line\">DYLD_PRINT_TO_FILE</span><br><span class=\"line\">DYLD_SHARED_REGION</span><br><span class=\"line\">DYLD_INSERT_LIBRARIES</span><br><span class=\"line\">DYLD_FORCE_FLAT_NAMESPACE</span><br><span class=\"line\">DYLD_IMAGE_SUFFIX</span><br><span class=\"line\">DYLD_PRINT_OPTS</span><br><span class=\"line\">DYLD_PRINT_ENV</span><br><span class=\"line\">DYLD_PRINT_LIBRARIES</span><br><span class=\"line\">DYLD_BIND_AT_LAUNCH</span><br><span class=\"line\">DYLD_DISABLE_DOFS</span><br><span class=\"line\">DYLD_PRINT_APIS</span><br><span class=\"line\">DYLD_PRINT_BINDINGS</span><br><span class=\"line\">DYLD_PRINT_INITIALIZERS</span><br><span class=\"line\">DYLD_PRINT_REBASINGS</span><br><span class=\"line\">DYLD_PRINT_SEGMENTS</span><br><span class=\"line\">DYLD_PRINT_STATISTICS</span><br><span class=\"line\">DYLD_PRINT_DOFS</span><br><span class=\"line\">DYLD_PRINT_RPATHS</span><br><span class=\"line\">DYLD_SHARED_CACHE_DIR</span><br><span class=\"line\">DYLD_SHARED_CACHE_DONT_VALIDATE</span><br></pre></td></tr></table></figure>\n\n<p>详情见：<a href=\"./dyld.txt\">dyld 命令简介</a></p>\n"},{"title":"DYLD","abbrlink":"7b2280c9","date":"2021-04-20T13:36:02.000Z","_content":"\n```shell\nDYLD(1)                                                                \nNAME\n\n       dyld - the dynamic linker\n\nSYNOPSIS\n\n       DYLD_FRAMEWORK_PATH\n       DYLD_FALLBACK_FRAMEWORK_PATH\n       DYLD_VERSIONED_FRAMEWORK_PATH\n       DYLD_LIBRARY_PATH\n       DYLD_FALLBACK_LIBRARY_PATH\n       DYLD_VERSIONED_LIBRARY_PATH\n       DYLD_PRINT_TO_FILE\n       DYLD_SHARED_REGION\n       DYLD_INSERT_LIBRARIES\n       DYLD_FORCE_FLAT_NAMESPACE\n       DYLD_IMAGE_SUFFIX\n       DYLD_PRINT_OPTS\n       DYLD_PRINT_ENV\n       DYLD_PRINT_LIBRARIES\n       DYLD_BIND_AT_LAUNCH\n       DYLD_DISABLE_DOFS\n       DYLD_PRINT_APIS\n       DYLD_PRINT_BINDINGS\n       DYLD_PRINT_INITIALIZERS\n       DYLD_PRINT_REBASINGS\n       DYLD_PRINT_SEGMENTS\n       DYLD_PRINT_STATISTICS\n       DYLD_PRINT_DOFS\n       DYLD_PRINT_RPATHS\n       DYLD_SHARED_CACHE_DIR\n       DYLD_SHARED_CACHE_DONT_VALIDATE\n\nDESCRIPTION\n\n       The  dynamic  linker  checks the following environment variables during\n       the launch of each process.\n       Note: If System Integrity  Protection  is  enabled,  these  environment\n       variables  are  ignored  when  executing  binaries  protected by System\n       Integrity Protection.\n\n       DYLD_FRAMEWORK_PATH\n              This is a colon  separated  list  of  directories  that  contain\n              frameworks.   The  dynamic  linker  searches  these  directories\n              before it searches for the framework by its  install  name.   It\n              allows  you  to  test  new  versions  of existing frameworks. (A\n              framework is a library  install  name  that  ends  in  the  form\n              XXX.framework/Versions/YYY/XXX  or  XXX.framework/XXX, where XXX\n              and YYY are any name.)\n\n              For each framework that a program uses, the dynamic linker looks\n              for  the  framework  in each directory in DYLD_FRAMEWORK_PATH in\n              turn. If it looks in all the  directories  and  can't  find  the\n              framework,  it  searches the directories in DYLD_LIBRARY_PATH in\n              turn. If it still can't find the  framework,  it  then  searches\n              DYLD_FALLBACK_FRAMEWORK_PATH  and  DYLD_FALLBACK_LIBRARY_PATH in\n              turn.\n\n              Use the -L option to otool(1).  to discover the  frameworks  and\n              shared libraries that the executable is linked against.\n\n       DYLD_FALLBACK_FRAMEWORK_PATH\n              This  is  a  colon  separated  list  of directories that contain\n              frameworks.  It is used as the default location  for  frameworks\n              not found in their install path.\n\n              By    default,    it   is   set   to   /Library/Frameworks:/Net-\n              work/Library/Frameworks:/System/Library/Frameworks\n\n       DYLD_VERSIONED_FRAMEWORK_PATH\n              This is a colon  separated  list  of  directories  that  contain\n              potential  override  frameworks.   The  dynamic  linker searches\n              these directories for frameworks.  For each framework found dyld\n              looks  at  its  LC_ID_DYLIB  and  gets  the  current_version and\n              install name.  Dyld then looks for the framework at the  install\n              name  path.  Whichever has the larger current_version value will\n              be used in the process whenever a framework  with  that  install\n              name is required.  This is similar to DYLD_FRAMEWORK_PATH except\n              instead of always overriding, it only overrides is the  supplied\n              framework  is  newer.  Note: dyld does not check the framework's\n              Info.plist to find its version.   Dyld  only  checks  the  -cur-\n              rrent_version number supplied when the framework was created.\n\n       DYLD_LIBRARY_PATH\n              This  is  a  colon  separated  list  of directories that contain\n              libraries. The dynamic linker searches these directories  before\n              it  searches  the default locations for libraries. It allows you\n              to test new versions of existing libraries.\n\n              For each library that a program uses, the dynamic  linker  looks\n              for  it  in  each  directory in DYLD_LIBRARY_PATH in turn. If it\n              still can't  find  the  library,  it  then  searches  DYLD_FALL-\n              BACK_FRAMEWORK_PATH and DYLD_FALLBACK_LIBRARY_PATH in turn.\n\n              Use  the  -L option to otool(1).  to discover the frameworks and\n              shared libraries that the executable is linked against.\n\n       DYLD_FALLBACK_LIBRARY_PATH\n              This is a colon  separated  list  of  directories  that  contain\n              libraries.  It is used as the default location for libraries not\n              found  in  their  install  path.   By  default,  it  is  set  to\n              $(HOME)/lib:/usr/local/lib:/lib:/usr/lib.\n\n       DYLD_VERSIONED_LIBRARY_PATH\n              This  is  a  colon  separated  list  of directories that contain\n              potential override libraries.  The dynamic linker searches these\n              directories  for dynamic libraries.  For each library found dyld\n              looks at  its  LC_ID_DYLIB  and  gets  the  current_version  and\n              install  name.   Dyld  then looks for the library at the install\n              name path.  Whichever has the larger current_version value  will\n              be  used  in the process whenever a dylib with that install name\n              is  required.   This  is  similar  to  DYLD_LIBRARY_PATH  except\n              instead  of always overriding, it only overrides is the supplied\n              library is newer.\n\n       DYLD_PRINT_TO_FILE\n              This is a path to  a  (writable)  file.  Normally,  the  dynamic\n              linker writes all logging output (triggered by DYLD_PRINT_* set-\n              tings) to file descriptor 2 (which is usually stderr).  But this\n              setting causes the dynamic linker to write logging output to the\n              specified file.\n\n       DYLD_SHARED_REGION\n              This can be \"use\" (the default), \"avoid\", or \"private\".  Setting\n              it  to  \"avoid\"  tells dyld to not use the shared cache.  All OS\n              dylibs are loaded dynamically just like every other dylib.  Set-\n              ting it to \"private\" tells dyld to remove the shared region from\n              the process address space and mmap() back in a private  copy  of\n              the  dyld  shared cache in the shared region address range. This\n              is only useful if the shared cache on disk has been updated  and\n              is different than the shared cache in use.\n\n       DYLD_INSERT_LIBRARIES\n              This  is  a  colon  separated  list of dynamic libraries to load\n              before the ones specified in the program.  This  lets  you  test\n              new  modules  of existing dynamic shared libraries that are used\n              in flat-namespace images by loading a temporary  dynamic  shared\n              library with just the new modules.  Note that this has no effect\n              on images built a two-level namespace  images  using  a  dynamic\n              shared library unless DYLD_FORCE_FLAT_NAMESPACE is also used.\n\n       DYLD_FORCE_FLAT_NAMESPACE\n              Force  all  images in the program to be linked as flat-namespace\n              images and ignore any two-level namespace  bindings.   This  may\n              cause programs to fail to execute with a multiply defined symbol\n              error if two-level namespace images are used to allow the images\n              to have multiply defined symbols.\n\n       DYLD_IMAGE_SUFFIX\n              This  is  set  to a string of a suffix to try to be used for all\n              shared libraries used by the program.  For libraries  ending  in\n              \".dylib\"  the  suffix  is applied just before the \".dylib\".  For\n              all other libraries the suffix is appended to the library  name.\n              This  is  useful  for using conventional \"_profile\" and \"_debug\"\n              libraries and frameworks.\n\n       DYLD_PRINT_OPTS\n              When this is set, the dynamic linker writes to file descriptor 2\n              (normally standard error) the command line options.\n\n       DYLD_PRINT_ENV\n              When this is set, the dynamic linker writes to file descriptor 2\n              (normally standard error) the environment variables.\n\n       DYLD_PRINT_LIBRARIES\n              When this is set, the dynamic linker writes to file descriptor 2\n              (normally  standard  error)  the  filenames of the libraries the\n              program is using.  This is useful to make sure that the  use  of\n              DYLD_LIBRARY_PATH is getting what you want.\n\n       DYLD_BIND_AT_LAUNCH\n              When this is set, the dynamic linker binds all undefined symbols\n              the program needs at launch time. This includes function symbols\n              that  can  are  normally lazily bound at the time of their first\n              call.\n\n       DYLD_PRINT_STATISTICS\n              Right before the process's main() is  called,  dyld  prints  out\n              information about how dyld spent its time.  Useful for analyzing\n              launch performance.\n\n       DYLD_PRINT_STATISTICS_DETAILS\n              Right before the process's main() is  called,  dyld  prints  out\n              detailed  information about how dyld spent its time.  Useful for\n              analyzing launch performance.\n\n       DYLD_DISABLE_DOFS\n              Causes dyld not register dtrace static probes with the kernel.\n\n       DYLD_PRINT_INITIALIZERS\n              Causes dyld to print out a line when running  each  initializers\n              in  every image.  Initializers run by dyld included constructors\n              for C++ statically  allocated  objects,  functions  marked  with\n              __attribute__((constructor)), and -init functions.\n\n       DYLD_PRINT_APIS\n              Causes  dyld to print a line whenever a dyld API is called (e.g.\n              NSAddImage()).\n\n       DYLD_PRINT_SEGMENTS\n              Causes dyld to print out a line containing the name and  address\n              range  of  each  mach-o  segment that dyld maps.  In addition it\n              prints information about if the image was from the  dyld  shared\n              cache.\n\n       DYLD_PRINT_BINDINGS\n              Causes  dyld to print a line each time a symbolic name is bound.\n\n       DYLD_PRINT_DOFS\n              Causes dyld to print out information about dtrace static  probes\n              registered with the kernel.\n\n       DYLD_PRINT_RPATHS\n              Cause dyld  to print a line each time it expands an @rpath vari-\n              able and whether that expansion was successful or not.\n\n       DYLD_SHARED_CACHE_DIR\n              This is a directory containing dyld shared  cache  files.   This\n              variable can be used in conjunction with DYLD_SHARED_REGION=pri-\n              vate and DYLD_SHARED_CACHE_DONT_VALIDATE to run a  process  with\n              an alternate shared cache.\n\n       DYLD_SHARED_CACHE_DONT_VALIDATE\n              Causes dyld to not check that the inode and mod-time of files in\n              the shared cache match the requested dylib on disk. Thus a  pro-\n              gram  can be made to run with the dylib in the shared cache even\n              though the real dylib has been updated on disk.\n       DYNAMIC LIBRARY LOADING\n              Unlike many other operating  systems,  Darwin  does  not  locate\n              dependent  dynamic  libraries via their leaf file name.  Instead\n              the full path to  each  dylib  is  used  (e.g.  /usr/lib/libSys-\n              tem.B.dylib).   But  there  are  times  when  a full path is not\n              appropriate; for instance, may want your binaries to be  instal-\n              lable in anywhere on the disk.  To support that, there are three\n              @xxx/ variables that can be used as a path prefix.   At  runtime\n              dyld substitutes a dynamically generated path for the @xxx/ pre-\n              fix.\n\n       @executable_path/\n              This variable is replaced with the path to  the  directory  con-\n              taining the main executable for the process.  This is useful for\n              loading dylibs/frameworks embedded in a .app directory.  If  the\n              main  executable  file is at /some/path/My.app/Contents/MacOS/My\n              and  a  framework  dylib  file  is   at   /some/path/My.app/Con-\n              tents/Frameworks/Foo.framework/Versions/A/Foo,  then  the frame-\n              work load path could be  encoded  as  @executable_path/../Frame-\n              works/Foo.framework/Versions/A/Foo  and the .app directory could\n              be moved around in the file system and dyld will still  be  able\n              to load the embedded framework.\n\n       @loader_path/\n              This  variable  is  replaced with the path to the directory con-\n              taining the mach-o binary which contains the load command  using\n              @loader_path.  Thus, in every binary, @loader_path resolves to a\n              different path, whereas @executable_path always resolves to  the\n              same  path. @loader_path is useful as the load path for a frame-\n              work/dylib embedded in a plug-in, if the final file system loca-\n              tion of the plugin-in unknown (so absolute paths cannot be used)\n              or if the plug-in is used by  multiple  applications  (so  @exe-\n              cutable_path  cannot  be used). If the plug-in mach-o file is at\n              /some/path/Myfilter.plugin/Contents/MacOS/Myfilter and a  frame-\n              work dylib file is at /some/path/Myfilter.plugin/Contents/Frame-\n              works/Foo.framework/Versions/A/Foo, then the framework load path\n              could   be   encoded   as  @loader_path/../Frameworks/Foo.frame-\n              work/Versions/A/Foo and the Myfilter.plugin directory  could  be\n              moved  around  in the file system and dyld will still be able to\n              load the embedded framework.\n\n       @rpath/\n              Dyld maintains a current stack of  paths  called  the  run  path\n              list.   When  @rpath  is encountered it is substituted with each\n              path in the run path list until a loadable dylib if found.   The\n              run  path  stack is built from the LC_RPATH load commands in the\n              depencency chain that lead to the current dylib load.   You  can\n              add  an LC_RPATH load command to an image with the -rpath option\n              to ld(1).  You can even add a LC_RPATH load  command  path  that\n              starts  with  @loader_path/,  and it will push a path on the run\n              path stack that relative to the image containing  the  LC_RPATH.\n              The  use of @rpath is most useful when you have a complex direc-\n              tory structure of programs and dylibs  which  can  be  installed\n              anywhere,  but  keep  their  relative  positions.  This scenario\n              could be implemented using @loader_path, but every client  of  a\n              dylib  could  need  a  different  load path because its relative\n              position in the file system is  different.  The  use  of  @rpath\n              introduces  a  level  of  indirection that simplies things.  You\n              pick a location in your directory structure as an anchor  point.\n              Each dylib then gets an install path that starts with @rpath and\n              is the path to the dylib relative to the anchor point. Each main\n              executable  is linked with -rpath @loader_path/zzz, where zzz is\n              the path from the executable to the anchor  point.   At  runtime\n              dyld sets it run path to be the anchor point, then each dylib is\n              found relative to the anchor point.\n\nSEE ALSO\n\n       dyldinfo(1), ld(1), otool(1)\n\nApple Inc.                       June 1, 2017                          DYLD(1)\n```\n\n* [@executable path, @load path and @rpath](https://wincent.com/wiki/%40executable_path%2C_%40load_path_and_%40rpath)\n","source":"_posts/iOS/Performance/dyld.md","raw":"---\ntitle: DYLD\nabbrlink: 7b2280c9\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n```shell\nDYLD(1)                                                                \nNAME\n\n       dyld - the dynamic linker\n\nSYNOPSIS\n\n       DYLD_FRAMEWORK_PATH\n       DYLD_FALLBACK_FRAMEWORK_PATH\n       DYLD_VERSIONED_FRAMEWORK_PATH\n       DYLD_LIBRARY_PATH\n       DYLD_FALLBACK_LIBRARY_PATH\n       DYLD_VERSIONED_LIBRARY_PATH\n       DYLD_PRINT_TO_FILE\n       DYLD_SHARED_REGION\n       DYLD_INSERT_LIBRARIES\n       DYLD_FORCE_FLAT_NAMESPACE\n       DYLD_IMAGE_SUFFIX\n       DYLD_PRINT_OPTS\n       DYLD_PRINT_ENV\n       DYLD_PRINT_LIBRARIES\n       DYLD_BIND_AT_LAUNCH\n       DYLD_DISABLE_DOFS\n       DYLD_PRINT_APIS\n       DYLD_PRINT_BINDINGS\n       DYLD_PRINT_INITIALIZERS\n       DYLD_PRINT_REBASINGS\n       DYLD_PRINT_SEGMENTS\n       DYLD_PRINT_STATISTICS\n       DYLD_PRINT_DOFS\n       DYLD_PRINT_RPATHS\n       DYLD_SHARED_CACHE_DIR\n       DYLD_SHARED_CACHE_DONT_VALIDATE\n\nDESCRIPTION\n\n       The  dynamic  linker  checks the following environment variables during\n       the launch of each process.\n       Note: If System Integrity  Protection  is  enabled,  these  environment\n       variables  are  ignored  when  executing  binaries  protected by System\n       Integrity Protection.\n\n       DYLD_FRAMEWORK_PATH\n              This is a colon  separated  list  of  directories  that  contain\n              frameworks.   The  dynamic  linker  searches  these  directories\n              before it searches for the framework by its  install  name.   It\n              allows  you  to  test  new  versions  of existing frameworks. (A\n              framework is a library  install  name  that  ends  in  the  form\n              XXX.framework/Versions/YYY/XXX  or  XXX.framework/XXX, where XXX\n              and YYY are any name.)\n\n              For each framework that a program uses, the dynamic linker looks\n              for  the  framework  in each directory in DYLD_FRAMEWORK_PATH in\n              turn. If it looks in all the  directories  and  can't  find  the\n              framework,  it  searches the directories in DYLD_LIBRARY_PATH in\n              turn. If it still can't find the  framework,  it  then  searches\n              DYLD_FALLBACK_FRAMEWORK_PATH  and  DYLD_FALLBACK_LIBRARY_PATH in\n              turn.\n\n              Use the -L option to otool(1).  to discover the  frameworks  and\n              shared libraries that the executable is linked against.\n\n       DYLD_FALLBACK_FRAMEWORK_PATH\n              This  is  a  colon  separated  list  of directories that contain\n              frameworks.  It is used as the default location  for  frameworks\n              not found in their install path.\n\n              By    default,    it   is   set   to   /Library/Frameworks:/Net-\n              work/Library/Frameworks:/System/Library/Frameworks\n\n       DYLD_VERSIONED_FRAMEWORK_PATH\n              This is a colon  separated  list  of  directories  that  contain\n              potential  override  frameworks.   The  dynamic  linker searches\n              these directories for frameworks.  For each framework found dyld\n              looks  at  its  LC_ID_DYLIB  and  gets  the  current_version and\n              install name.  Dyld then looks for the framework at the  install\n              name  path.  Whichever has the larger current_version value will\n              be used in the process whenever a framework  with  that  install\n              name is required.  This is similar to DYLD_FRAMEWORK_PATH except\n              instead of always overriding, it only overrides is the  supplied\n              framework  is  newer.  Note: dyld does not check the framework's\n              Info.plist to find its version.   Dyld  only  checks  the  -cur-\n              rrent_version number supplied when the framework was created.\n\n       DYLD_LIBRARY_PATH\n              This  is  a  colon  separated  list  of directories that contain\n              libraries. The dynamic linker searches these directories  before\n              it  searches  the default locations for libraries. It allows you\n              to test new versions of existing libraries.\n\n              For each library that a program uses, the dynamic  linker  looks\n              for  it  in  each  directory in DYLD_LIBRARY_PATH in turn. If it\n              still can't  find  the  library,  it  then  searches  DYLD_FALL-\n              BACK_FRAMEWORK_PATH and DYLD_FALLBACK_LIBRARY_PATH in turn.\n\n              Use  the  -L option to otool(1).  to discover the frameworks and\n              shared libraries that the executable is linked against.\n\n       DYLD_FALLBACK_LIBRARY_PATH\n              This is a colon  separated  list  of  directories  that  contain\n              libraries.  It is used as the default location for libraries not\n              found  in  their  install  path.   By  default,  it  is  set  to\n              $(HOME)/lib:/usr/local/lib:/lib:/usr/lib.\n\n       DYLD_VERSIONED_LIBRARY_PATH\n              This  is  a  colon  separated  list  of directories that contain\n              potential override libraries.  The dynamic linker searches these\n              directories  for dynamic libraries.  For each library found dyld\n              looks at  its  LC_ID_DYLIB  and  gets  the  current_version  and\n              install  name.   Dyld  then looks for the library at the install\n              name path.  Whichever has the larger current_version value  will\n              be  used  in the process whenever a dylib with that install name\n              is  required.   This  is  similar  to  DYLD_LIBRARY_PATH  except\n              instead  of always overriding, it only overrides is the supplied\n              library is newer.\n\n       DYLD_PRINT_TO_FILE\n              This is a path to  a  (writable)  file.  Normally,  the  dynamic\n              linker writes all logging output (triggered by DYLD_PRINT_* set-\n              tings) to file descriptor 2 (which is usually stderr).  But this\n              setting causes the dynamic linker to write logging output to the\n              specified file.\n\n       DYLD_SHARED_REGION\n              This can be \"use\" (the default), \"avoid\", or \"private\".  Setting\n              it  to  \"avoid\"  tells dyld to not use the shared cache.  All OS\n              dylibs are loaded dynamically just like every other dylib.  Set-\n              ting it to \"private\" tells dyld to remove the shared region from\n              the process address space and mmap() back in a private  copy  of\n              the  dyld  shared cache in the shared region address range. This\n              is only useful if the shared cache on disk has been updated  and\n              is different than the shared cache in use.\n\n       DYLD_INSERT_LIBRARIES\n              This  is  a  colon  separated  list of dynamic libraries to load\n              before the ones specified in the program.  This  lets  you  test\n              new  modules  of existing dynamic shared libraries that are used\n              in flat-namespace images by loading a temporary  dynamic  shared\n              library with just the new modules.  Note that this has no effect\n              on images built a two-level namespace  images  using  a  dynamic\n              shared library unless DYLD_FORCE_FLAT_NAMESPACE is also used.\n\n       DYLD_FORCE_FLAT_NAMESPACE\n              Force  all  images in the program to be linked as flat-namespace\n              images and ignore any two-level namespace  bindings.   This  may\n              cause programs to fail to execute with a multiply defined symbol\n              error if two-level namespace images are used to allow the images\n              to have multiply defined symbols.\n\n       DYLD_IMAGE_SUFFIX\n              This  is  set  to a string of a suffix to try to be used for all\n              shared libraries used by the program.  For libraries  ending  in\n              \".dylib\"  the  suffix  is applied just before the \".dylib\".  For\n              all other libraries the suffix is appended to the library  name.\n              This  is  useful  for using conventional \"_profile\" and \"_debug\"\n              libraries and frameworks.\n\n       DYLD_PRINT_OPTS\n              When this is set, the dynamic linker writes to file descriptor 2\n              (normally standard error) the command line options.\n\n       DYLD_PRINT_ENV\n              When this is set, the dynamic linker writes to file descriptor 2\n              (normally standard error) the environment variables.\n\n       DYLD_PRINT_LIBRARIES\n              When this is set, the dynamic linker writes to file descriptor 2\n              (normally  standard  error)  the  filenames of the libraries the\n              program is using.  This is useful to make sure that the  use  of\n              DYLD_LIBRARY_PATH is getting what you want.\n\n       DYLD_BIND_AT_LAUNCH\n              When this is set, the dynamic linker binds all undefined symbols\n              the program needs at launch time. This includes function symbols\n              that  can  are  normally lazily bound at the time of their first\n              call.\n\n       DYLD_PRINT_STATISTICS\n              Right before the process's main() is  called,  dyld  prints  out\n              information about how dyld spent its time.  Useful for analyzing\n              launch performance.\n\n       DYLD_PRINT_STATISTICS_DETAILS\n              Right before the process's main() is  called,  dyld  prints  out\n              detailed  information about how dyld spent its time.  Useful for\n              analyzing launch performance.\n\n       DYLD_DISABLE_DOFS\n              Causes dyld not register dtrace static probes with the kernel.\n\n       DYLD_PRINT_INITIALIZERS\n              Causes dyld to print out a line when running  each  initializers\n              in  every image.  Initializers run by dyld included constructors\n              for C++ statically  allocated  objects,  functions  marked  with\n              __attribute__((constructor)), and -init functions.\n\n       DYLD_PRINT_APIS\n              Causes  dyld to print a line whenever a dyld API is called (e.g.\n              NSAddImage()).\n\n       DYLD_PRINT_SEGMENTS\n              Causes dyld to print out a line containing the name and  address\n              range  of  each  mach-o  segment that dyld maps.  In addition it\n              prints information about if the image was from the  dyld  shared\n              cache.\n\n       DYLD_PRINT_BINDINGS\n              Causes  dyld to print a line each time a symbolic name is bound.\n\n       DYLD_PRINT_DOFS\n              Causes dyld to print out information about dtrace static  probes\n              registered with the kernel.\n\n       DYLD_PRINT_RPATHS\n              Cause dyld  to print a line each time it expands an @rpath vari-\n              able and whether that expansion was successful or not.\n\n       DYLD_SHARED_CACHE_DIR\n              This is a directory containing dyld shared  cache  files.   This\n              variable can be used in conjunction with DYLD_SHARED_REGION=pri-\n              vate and DYLD_SHARED_CACHE_DONT_VALIDATE to run a  process  with\n              an alternate shared cache.\n\n       DYLD_SHARED_CACHE_DONT_VALIDATE\n              Causes dyld to not check that the inode and mod-time of files in\n              the shared cache match the requested dylib on disk. Thus a  pro-\n              gram  can be made to run with the dylib in the shared cache even\n              though the real dylib has been updated on disk.\n       DYNAMIC LIBRARY LOADING\n              Unlike many other operating  systems,  Darwin  does  not  locate\n              dependent  dynamic  libraries via their leaf file name.  Instead\n              the full path to  each  dylib  is  used  (e.g.  /usr/lib/libSys-\n              tem.B.dylib).   But  there  are  times  when  a full path is not\n              appropriate; for instance, may want your binaries to be  instal-\n              lable in anywhere on the disk.  To support that, there are three\n              @xxx/ variables that can be used as a path prefix.   At  runtime\n              dyld substitutes a dynamically generated path for the @xxx/ pre-\n              fix.\n\n       @executable_path/\n              This variable is replaced with the path to  the  directory  con-\n              taining the main executable for the process.  This is useful for\n              loading dylibs/frameworks embedded in a .app directory.  If  the\n              main  executable  file is at /some/path/My.app/Contents/MacOS/My\n              and  a  framework  dylib  file  is   at   /some/path/My.app/Con-\n              tents/Frameworks/Foo.framework/Versions/A/Foo,  then  the frame-\n              work load path could be  encoded  as  @executable_path/../Frame-\n              works/Foo.framework/Versions/A/Foo  and the .app directory could\n              be moved around in the file system and dyld will still  be  able\n              to load the embedded framework.\n\n       @loader_path/\n              This  variable  is  replaced with the path to the directory con-\n              taining the mach-o binary which contains the load command  using\n              @loader_path.  Thus, in every binary, @loader_path resolves to a\n              different path, whereas @executable_path always resolves to  the\n              same  path. @loader_path is useful as the load path for a frame-\n              work/dylib embedded in a plug-in, if the final file system loca-\n              tion of the plugin-in unknown (so absolute paths cannot be used)\n              or if the plug-in is used by  multiple  applications  (so  @exe-\n              cutable_path  cannot  be used). If the plug-in mach-o file is at\n              /some/path/Myfilter.plugin/Contents/MacOS/Myfilter and a  frame-\n              work dylib file is at /some/path/Myfilter.plugin/Contents/Frame-\n              works/Foo.framework/Versions/A/Foo, then the framework load path\n              could   be   encoded   as  @loader_path/../Frameworks/Foo.frame-\n              work/Versions/A/Foo and the Myfilter.plugin directory  could  be\n              moved  around  in the file system and dyld will still be able to\n              load the embedded framework.\n\n       @rpath/\n              Dyld maintains a current stack of  paths  called  the  run  path\n              list.   When  @rpath  is encountered it is substituted with each\n              path in the run path list until a loadable dylib if found.   The\n              run  path  stack is built from the LC_RPATH load commands in the\n              depencency chain that lead to the current dylib load.   You  can\n              add  an LC_RPATH load command to an image with the -rpath option\n              to ld(1).  You can even add a LC_RPATH load  command  path  that\n              starts  with  @loader_path/,  and it will push a path on the run\n              path stack that relative to the image containing  the  LC_RPATH.\n              The  use of @rpath is most useful when you have a complex direc-\n              tory structure of programs and dylibs  which  can  be  installed\n              anywhere,  but  keep  their  relative  positions.  This scenario\n              could be implemented using @loader_path, but every client  of  a\n              dylib  could  need  a  different  load path because its relative\n              position in the file system is  different.  The  use  of  @rpath\n              introduces  a  level  of  indirection that simplies things.  You\n              pick a location in your directory structure as an anchor  point.\n              Each dylib then gets an install path that starts with @rpath and\n              is the path to the dylib relative to the anchor point. Each main\n              executable  is linked with -rpath @loader_path/zzz, where zzz is\n              the path from the executable to the anchor  point.   At  runtime\n              dyld sets it run path to be the anchor point, then each dylib is\n              found relative to the anchor point.\n\nSEE ALSO\n\n       dyldinfo(1), ld(1), otool(1)\n\nApple Inc.                       June 1, 2017                          DYLD(1)\n```\n\n* [@executable path, @load path and @rpath](https://wincent.com/wiki/%40executable_path%2C_%40load_path_and_%40rpath)\n","slug":"iOS/Performance/dyld","published":1,"updated":"2021-09-22T06:56:40.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2b0025iu9kb1cud5hi","content":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DYLD(1)                                                                </span><br><span class=\"line\">NAME</span><br><span class=\"line\"></span><br><span class=\"line\">       dyld - the dynamic linker</span><br><span class=\"line\"></span><br><span class=\"line\">SYNOPSIS</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_FRAMEWORK_PATH</span><br><span class=\"line\">       DYLD_FALLBACK_FRAMEWORK_PATH</span><br><span class=\"line\">       DYLD_VERSIONED_FRAMEWORK_PATH</span><br><span class=\"line\">       DYLD_LIBRARY_PATH</span><br><span class=\"line\">       DYLD_FALLBACK_LIBRARY_PATH</span><br><span class=\"line\">       DYLD_VERSIONED_LIBRARY_PATH</span><br><span class=\"line\">       DYLD_PRINT_TO_FILE</span><br><span class=\"line\">       DYLD_SHARED_REGION</span><br><span class=\"line\">       DYLD_INSERT_LIBRARIES</span><br><span class=\"line\">       DYLD_FORCE_FLAT_NAMESPACE</span><br><span class=\"line\">       DYLD_IMAGE_SUFFIX</span><br><span class=\"line\">       DYLD_PRINT_OPTS</span><br><span class=\"line\">       DYLD_PRINT_ENV</span><br><span class=\"line\">       DYLD_PRINT_LIBRARIES</span><br><span class=\"line\">       DYLD_BIND_AT_LAUNCH</span><br><span class=\"line\">       DYLD_DISABLE_DOFS</span><br><span class=\"line\">       DYLD_PRINT_APIS</span><br><span class=\"line\">       DYLD_PRINT_BINDINGS</span><br><span class=\"line\">       DYLD_PRINT_INITIALIZERS</span><br><span class=\"line\">       DYLD_PRINT_REBASINGS</span><br><span class=\"line\">       DYLD_PRINT_SEGMENTS</span><br><span class=\"line\">       DYLD_PRINT_STATISTICS</span><br><span class=\"line\">       DYLD_PRINT_DOFS</span><br><span class=\"line\">       DYLD_PRINT_RPATHS</span><br><span class=\"line\">       DYLD_SHARED_CACHE_DIR</span><br><span class=\"line\">       DYLD_SHARED_CACHE_DONT_VALIDATE</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION</span><br><span class=\"line\"></span><br><span class=\"line\">       The  dynamic  linker  checks the following environment variables during</span><br><span class=\"line\">       the launch of each process.</span><br><span class=\"line\">       Note: If System Integrity  Protection  is  enabled,  these  environment</span><br><span class=\"line\">       variables  are  ignored  when  executing  binaries  protected by System</span><br><span class=\"line\">       Integrity Protection.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_FRAMEWORK_PATH</span><br><span class=\"line\">              This is a colon  separated  list  of  directories  that  contain</span><br><span class=\"line\">              frameworks.   The  dynamic  linker  searches  these  directories</span><br><span class=\"line\">              before it searches for the framework by its  install  name.   It</span><br><span class=\"line\">              allows  you  to  test  new  versions  of existing frameworks. (A</span><br><span class=\"line\">              framework is a library  install  name  that  ends  in  the  form</span><br><span class=\"line\">              XXX.framework/Versions/YYY/XXX  or  XXX.framework/XXX, where XXX</span><br><span class=\"line\">              and YYY are any name.)</span><br><span class=\"line\"></span><br><span class=\"line\">              For each framework that a program uses, the dynamic linker looks</span><br><span class=\"line\">              for  the  framework  in each directory in DYLD_FRAMEWORK_PATH in</span><br><span class=\"line\">              turn. If it looks in all the  directories  and  can&#x27;t  find  the</span><br><span class=\"line\">              framework,  it  searches the directories in DYLD_LIBRARY_PATH in</span><br><span class=\"line\">              turn. If it still can&#x27;t find the  framework,  it  then  searches</span><br><span class=\"line\">              DYLD_FALLBACK_FRAMEWORK_PATH  and  DYLD_FALLBACK_LIBRARY_PATH in</span><br><span class=\"line\">              turn.</span><br><span class=\"line\"></span><br><span class=\"line\">              Use the -L option to otool(1).  to discover the  frameworks  and</span><br><span class=\"line\">              shared libraries that the executable is linked against.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_FALLBACK_FRAMEWORK_PATH</span><br><span class=\"line\">              This  is  a  colon  separated  list  of directories that contain</span><br><span class=\"line\">              frameworks.  It is used as the default location  for  frameworks</span><br><span class=\"line\">              not found in their install path.</span><br><span class=\"line\"></span><br><span class=\"line\">              By    default,    it   is   set   to   /Library/Frameworks:/Net-</span><br><span class=\"line\">              work/Library/Frameworks:/System/Library/Frameworks</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_VERSIONED_FRAMEWORK_PATH</span><br><span class=\"line\">              This is a colon  separated  list  of  directories  that  contain</span><br><span class=\"line\">              potential  override  frameworks.   The  dynamic  linker searches</span><br><span class=\"line\">              these directories for frameworks.  For each framework found dyld</span><br><span class=\"line\">              looks  at  its  LC_ID_DYLIB  and  gets  the  current_version and</span><br><span class=\"line\">              install name.  Dyld then looks for the framework at the  install</span><br><span class=\"line\">              name  path.  Whichever has the larger current_version value will</span><br><span class=\"line\">              be used in the process whenever a framework  with  that  install</span><br><span class=\"line\">              name is required.  This is similar to DYLD_FRAMEWORK_PATH except</span><br><span class=\"line\">              instead of always overriding, it only overrides is the  supplied</span><br><span class=\"line\">              framework  is  newer.  Note: dyld does not check the framework&#x27;s</span><br><span class=\"line\">              Info.plist to find its version.   Dyld  only  checks  the  -cur-</span><br><span class=\"line\">              rrent_version number supplied when the framework was created.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_LIBRARY_PATH</span><br><span class=\"line\">              This  is  a  colon  separated  list  of directories that contain</span><br><span class=\"line\">              libraries. The dynamic linker searches these directories  before</span><br><span class=\"line\">              it  searches  the default locations for libraries. It allows you</span><br><span class=\"line\">              to test new versions of existing libraries.</span><br><span class=\"line\"></span><br><span class=\"line\">              For each library that a program uses, the dynamic  linker  looks</span><br><span class=\"line\">              for  it  in  each  directory in DYLD_LIBRARY_PATH in turn. If it</span><br><span class=\"line\">              still can&#x27;t  find  the  library,  it  then  searches  DYLD_FALL-</span><br><span class=\"line\">              BACK_FRAMEWORK_PATH and DYLD_FALLBACK_LIBRARY_PATH in turn.</span><br><span class=\"line\"></span><br><span class=\"line\">              Use  the  -L option to otool(1).  to discover the frameworks and</span><br><span class=\"line\">              shared libraries that the executable is linked against.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_FALLBACK_LIBRARY_PATH</span><br><span class=\"line\">              This is a colon  separated  list  of  directories  that  contain</span><br><span class=\"line\">              libraries.  It is used as the default location for libraries not</span><br><span class=\"line\">              found  in  their  install  path.   By  default,  it  is  set  to</span><br><span class=\"line\">              $(HOME)/lib:/usr/local/lib:/lib:/usr/lib.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_VERSIONED_LIBRARY_PATH</span><br><span class=\"line\">              This  is  a  colon  separated  list  of directories that contain</span><br><span class=\"line\">              potential override libraries.  The dynamic linker searches these</span><br><span class=\"line\">              directories  for dynamic libraries.  For each library found dyld</span><br><span class=\"line\">              looks at  its  LC_ID_DYLIB  and  gets  the  current_version  and</span><br><span class=\"line\">              install  name.   Dyld  then looks for the library at the install</span><br><span class=\"line\">              name path.  Whichever has the larger current_version value  will</span><br><span class=\"line\">              be  used  in the process whenever a dylib with that install name</span><br><span class=\"line\">              is  required.   This  is  similar  to  DYLD_LIBRARY_PATH  except</span><br><span class=\"line\">              instead  of always overriding, it only overrides is the supplied</span><br><span class=\"line\">              library is newer.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_TO_FILE</span><br><span class=\"line\">              This is a path to  a  (writable)  file.  Normally,  the  dynamic</span><br><span class=\"line\">              linker writes all logging output (triggered by DYLD_PRINT_* set-</span><br><span class=\"line\">              tings) to file descriptor 2 (which is usually stderr).  But this</span><br><span class=\"line\">              setting causes the dynamic linker to write logging output to the</span><br><span class=\"line\">              specified file.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_SHARED_REGION</span><br><span class=\"line\">              This can be &quot;use&quot; (the default), &quot;avoid&quot;, or &quot;private&quot;.  Setting</span><br><span class=\"line\">              it  to  &quot;avoid&quot;  tells dyld to not use the shared cache.  All OS</span><br><span class=\"line\">              dylibs are loaded dynamically just like every other dylib.  Set-</span><br><span class=\"line\">              ting it to &quot;private&quot; tells dyld to remove the shared region from</span><br><span class=\"line\">              the process address space and mmap() back in a private  copy  of</span><br><span class=\"line\">              the  dyld  shared cache in the shared region address range. This</span><br><span class=\"line\">              is only useful if the shared cache on disk has been updated  and</span><br><span class=\"line\">              is different than the shared cache in use.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_INSERT_LIBRARIES</span><br><span class=\"line\">              This  is  a  colon  separated  list of dynamic libraries to load</span><br><span class=\"line\">              before the ones specified in the program.  This  lets  you  test</span><br><span class=\"line\">              new  modules  of existing dynamic shared libraries that are used</span><br><span class=\"line\">              in flat-namespace images by loading a temporary  dynamic  shared</span><br><span class=\"line\">              library with just the new modules.  Note that this has no effect</span><br><span class=\"line\">              on images built a two-level namespace  images  using  a  dynamic</span><br><span class=\"line\">              shared library unless DYLD_FORCE_FLAT_NAMESPACE is also used.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_FORCE_FLAT_NAMESPACE</span><br><span class=\"line\">              Force  all  images in the program to be linked as flat-namespace</span><br><span class=\"line\">              images and ignore any two-level namespace  bindings.   This  may</span><br><span class=\"line\">              cause programs to fail to execute with a multiply defined symbol</span><br><span class=\"line\">              error if two-level namespace images are used to allow the images</span><br><span class=\"line\">              to have multiply defined symbols.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_IMAGE_SUFFIX</span><br><span class=\"line\">              This  is  set  to a string of a suffix to try to be used for all</span><br><span class=\"line\">              shared libraries used by the program.  For libraries  ending  in</span><br><span class=\"line\">              &quot;.dylib&quot;  the  suffix  is applied just before the &quot;.dylib&quot;.  For</span><br><span class=\"line\">              all other libraries the suffix is appended to the library  name.</span><br><span class=\"line\">              This  is  useful  for using conventional &quot;_profile&quot; and &quot;_debug&quot;</span><br><span class=\"line\">              libraries and frameworks.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_OPTS</span><br><span class=\"line\">              When this is set, the dynamic linker writes to file descriptor 2</span><br><span class=\"line\">              (normally standard error) the command line options.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_ENV</span><br><span class=\"line\">              When this is set, the dynamic linker writes to file descriptor 2</span><br><span class=\"line\">              (normally standard error) the environment variables.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_LIBRARIES</span><br><span class=\"line\">              When this is set, the dynamic linker writes to file descriptor 2</span><br><span class=\"line\">              (normally  standard  error)  the  filenames of the libraries the</span><br><span class=\"line\">              program is using.  This is useful to make sure that the  use  of</span><br><span class=\"line\">              DYLD_LIBRARY_PATH is getting what you want.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_BIND_AT_LAUNCH</span><br><span class=\"line\">              When this is set, the dynamic linker binds all undefined symbols</span><br><span class=\"line\">              the program needs at launch time. This includes function symbols</span><br><span class=\"line\">              that  can  are  normally lazily bound at the time of their first</span><br><span class=\"line\">              call.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_STATISTICS</span><br><span class=\"line\">              Right before the process&#x27;s main() is  called,  dyld  prints  out</span><br><span class=\"line\">              information about how dyld spent its time.  Useful for analyzing</span><br><span class=\"line\">              launch performance.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_STATISTICS_DETAILS</span><br><span class=\"line\">              Right before the process&#x27;s main() is  called,  dyld  prints  out</span><br><span class=\"line\">              detailed  information about how dyld spent its time.  Useful for</span><br><span class=\"line\">              analyzing launch performance.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_DISABLE_DOFS</span><br><span class=\"line\">              Causes dyld not register dtrace static probes with the kernel.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_INITIALIZERS</span><br><span class=\"line\">              Causes dyld to print out a line when running  each  initializers</span><br><span class=\"line\">              in  every image.  Initializers run by dyld included constructors</span><br><span class=\"line\">              for C++ statically  allocated  objects,  functions  marked  with</span><br><span class=\"line\">              __attribute__((constructor)), and -init functions.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_APIS</span><br><span class=\"line\">              Causes  dyld to print a line whenever a dyld API is called (e.g.</span><br><span class=\"line\">              NSAddImage()).</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_SEGMENTS</span><br><span class=\"line\">              Causes dyld to print out a line containing the name and  address</span><br><span class=\"line\">              range  of  each  mach-o  segment that dyld maps.  In addition it</span><br><span class=\"line\">              prints information about if the image was from the  dyld  shared</span><br><span class=\"line\">              cache.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_BINDINGS</span><br><span class=\"line\">              Causes  dyld to print a line each time a symbolic name is bound.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_DOFS</span><br><span class=\"line\">              Causes dyld to print out information about dtrace static  probes</span><br><span class=\"line\">              registered with the kernel.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_RPATHS</span><br><span class=\"line\">              Cause dyld  to print a line each time it expands an @rpath vari-</span><br><span class=\"line\">              able and whether that expansion was successful or not.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_SHARED_CACHE_DIR</span><br><span class=\"line\">              This is a directory containing dyld shared  cache  files.   This</span><br><span class=\"line\">              variable can be used in conjunction with DYLD_SHARED_REGION=pri-</span><br><span class=\"line\">              vate and DYLD_SHARED_CACHE_DONT_VALIDATE to run a  process  with</span><br><span class=\"line\">              an alternate shared cache.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_SHARED_CACHE_DONT_VALIDATE</span><br><span class=\"line\">              Causes dyld to not check that the inode and mod-time of files in</span><br><span class=\"line\">              the shared cache match the requested dylib on disk. Thus a  pro-</span><br><span class=\"line\">              gram  can be made to run with the dylib in the shared cache even</span><br><span class=\"line\">              though the real dylib has been updated on disk.</span><br><span class=\"line\">       DYNAMIC LIBRARY LOADING</span><br><span class=\"line\">              Unlike many other operating  systems,  Darwin  does  not  locate</span><br><span class=\"line\">              dependent  dynamic  libraries via their leaf file name.  Instead</span><br><span class=\"line\">              the full path to  each  dylib  is  used  (e.g.  /usr/lib/libSys-</span><br><span class=\"line\">              tem.B.dylib).   But  there  are  times  when  a full path is not</span><br><span class=\"line\">              appropriate; for instance, may want your binaries to be  instal-</span><br><span class=\"line\">              lable in anywhere on the disk.  To support that, there are three</span><br><span class=\"line\">              @xxx/ variables that can be used as a path prefix.   At  runtime</span><br><span class=\"line\">              dyld substitutes a dynamically generated path for the @xxx/ pre-</span><br><span class=\"line\">              fix.</span><br><span class=\"line\"></span><br><span class=\"line\">       @executable_path/</span><br><span class=\"line\">              This variable is replaced with the path to  the  directory  con-</span><br><span class=\"line\">              taining the main executable for the process.  This is useful for</span><br><span class=\"line\">              loading dylibs/frameworks embedded in a .app directory.  If  the</span><br><span class=\"line\">              main  executable  file is at /some/path/My.app/Contents/MacOS/My</span><br><span class=\"line\">              and  a  framework  dylib  file  is   at   /some/path/My.app/Con-</span><br><span class=\"line\">              tents/Frameworks/Foo.framework/Versions/A/Foo,  then  the frame-</span><br><span class=\"line\">              work load path could be  encoded  as  @executable_path/../Frame-</span><br><span class=\"line\">              works/Foo.framework/Versions/A/Foo  and the .app directory could</span><br><span class=\"line\">              be moved around in the file system and dyld will still  be  able</span><br><span class=\"line\">              to load the embedded framework.</span><br><span class=\"line\"></span><br><span class=\"line\">       @loader_path/</span><br><span class=\"line\">              This  variable  is  replaced with the path to the directory con-</span><br><span class=\"line\">              taining the mach-o binary which contains the load command  using</span><br><span class=\"line\">              @loader_path.  Thus, in every binary, @loader_path resolves to a</span><br><span class=\"line\">              different path, whereas @executable_path always resolves to  the</span><br><span class=\"line\">              same  path. @loader_path is useful as the load path for a frame-</span><br><span class=\"line\">              work/dylib embedded in a plug-in, if the final file system loca-</span><br><span class=\"line\">              tion of the plugin-in unknown (so absolute paths cannot be used)</span><br><span class=\"line\">              or if the plug-in is used by  multiple  applications  (so  @exe-</span><br><span class=\"line\">              cutable_path  cannot  be used). If the plug-in mach-o file is at</span><br><span class=\"line\">              /some/path/Myfilter.plugin/Contents/MacOS/Myfilter and a  frame-</span><br><span class=\"line\">              work dylib file is at /some/path/Myfilter.plugin/Contents/Frame-</span><br><span class=\"line\">              works/Foo.framework/Versions/A/Foo, then the framework load path</span><br><span class=\"line\">              could   be   encoded   as  @loader_path/../Frameworks/Foo.frame-</span><br><span class=\"line\">              work/Versions/A/Foo and the Myfilter.plugin directory  could  be</span><br><span class=\"line\">              moved  around  in the file system and dyld will still be able to</span><br><span class=\"line\">              load the embedded framework.</span><br><span class=\"line\"></span><br><span class=\"line\">       @rpath/</span><br><span class=\"line\">              Dyld maintains a current stack of  paths  called  the  run  path</span><br><span class=\"line\">              list.   When  @rpath  is encountered it is substituted with each</span><br><span class=\"line\">              path in the run path list until a loadable dylib if found.   The</span><br><span class=\"line\">              run  path  stack is built from the LC_RPATH load commands in the</span><br><span class=\"line\">              depencency chain that lead to the current dylib load.   You  can</span><br><span class=\"line\">              add  an LC_RPATH load command to an image with the -rpath option</span><br><span class=\"line\">              to ld(1).  You can even add a LC_RPATH load  command  path  that</span><br><span class=\"line\">              starts  with  @loader_path/,  and it will push a path on the run</span><br><span class=\"line\">              path stack that relative to the image containing  the  LC_RPATH.</span><br><span class=\"line\">              The  use of @rpath is most useful when you have a complex direc-</span><br><span class=\"line\">              tory structure of programs and dylibs  which  can  be  installed</span><br><span class=\"line\">              anywhere,  but  keep  their  relative  positions.  This scenario</span><br><span class=\"line\">              could be implemented using @loader_path, but every client  of  a</span><br><span class=\"line\">              dylib  could  need  a  different  load path because its relative</span><br><span class=\"line\">              position in the file system is  different.  The  use  of  @rpath</span><br><span class=\"line\">              introduces  a  level  of  indirection that simplies things.  You</span><br><span class=\"line\">              pick a location in your directory structure as an anchor  point.</span><br><span class=\"line\">              Each dylib then gets an install path that starts with @rpath and</span><br><span class=\"line\">              is the path to the dylib relative to the anchor point. Each main</span><br><span class=\"line\">              executable  is linked with -rpath @loader_path/zzz, where zzz is</span><br><span class=\"line\">              the path from the executable to the anchor  point.   At  runtime</span><br><span class=\"line\">              dyld sets it run path to be the anchor point, then each dylib is</span><br><span class=\"line\">              found relative to the anchor point.</span><br><span class=\"line\"></span><br><span class=\"line\">SEE ALSO</span><br><span class=\"line\"></span><br><span class=\"line\">       dyldinfo(1), ld(1), otool(1)</span><br><span class=\"line\"></span><br><span class=\"line\">Apple Inc.                       June 1, 2017                          DYLD(1)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://wincent.com/wiki/%40executable_path%2C_%40load_path_and_%40rpath\">@executable path, @load path and @rpath</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DYLD(1)                                                                </span><br><span class=\"line\">NAME</span><br><span class=\"line\"></span><br><span class=\"line\">       dyld - the dynamic linker</span><br><span class=\"line\"></span><br><span class=\"line\">SYNOPSIS</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_FRAMEWORK_PATH</span><br><span class=\"line\">       DYLD_FALLBACK_FRAMEWORK_PATH</span><br><span class=\"line\">       DYLD_VERSIONED_FRAMEWORK_PATH</span><br><span class=\"line\">       DYLD_LIBRARY_PATH</span><br><span class=\"line\">       DYLD_FALLBACK_LIBRARY_PATH</span><br><span class=\"line\">       DYLD_VERSIONED_LIBRARY_PATH</span><br><span class=\"line\">       DYLD_PRINT_TO_FILE</span><br><span class=\"line\">       DYLD_SHARED_REGION</span><br><span class=\"line\">       DYLD_INSERT_LIBRARIES</span><br><span class=\"line\">       DYLD_FORCE_FLAT_NAMESPACE</span><br><span class=\"line\">       DYLD_IMAGE_SUFFIX</span><br><span class=\"line\">       DYLD_PRINT_OPTS</span><br><span class=\"line\">       DYLD_PRINT_ENV</span><br><span class=\"line\">       DYLD_PRINT_LIBRARIES</span><br><span class=\"line\">       DYLD_BIND_AT_LAUNCH</span><br><span class=\"line\">       DYLD_DISABLE_DOFS</span><br><span class=\"line\">       DYLD_PRINT_APIS</span><br><span class=\"line\">       DYLD_PRINT_BINDINGS</span><br><span class=\"line\">       DYLD_PRINT_INITIALIZERS</span><br><span class=\"line\">       DYLD_PRINT_REBASINGS</span><br><span class=\"line\">       DYLD_PRINT_SEGMENTS</span><br><span class=\"line\">       DYLD_PRINT_STATISTICS</span><br><span class=\"line\">       DYLD_PRINT_DOFS</span><br><span class=\"line\">       DYLD_PRINT_RPATHS</span><br><span class=\"line\">       DYLD_SHARED_CACHE_DIR</span><br><span class=\"line\">       DYLD_SHARED_CACHE_DONT_VALIDATE</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION</span><br><span class=\"line\"></span><br><span class=\"line\">       The  dynamic  linker  checks the following environment variables during</span><br><span class=\"line\">       the launch of each process.</span><br><span class=\"line\">       Note: If System Integrity  Protection  is  enabled,  these  environment</span><br><span class=\"line\">       variables  are  ignored  when  executing  binaries  protected by System</span><br><span class=\"line\">       Integrity Protection.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_FRAMEWORK_PATH</span><br><span class=\"line\">              This is a colon  separated  list  of  directories  that  contain</span><br><span class=\"line\">              frameworks.   The  dynamic  linker  searches  these  directories</span><br><span class=\"line\">              before it searches for the framework by its  install  name.   It</span><br><span class=\"line\">              allows  you  to  test  new  versions  of existing frameworks. (A</span><br><span class=\"line\">              framework is a library  install  name  that  ends  in  the  form</span><br><span class=\"line\">              XXX.framework/Versions/YYY/XXX  or  XXX.framework/XXX, where XXX</span><br><span class=\"line\">              and YYY are any name.)</span><br><span class=\"line\"></span><br><span class=\"line\">              For each framework that a program uses, the dynamic linker looks</span><br><span class=\"line\">              for  the  framework  in each directory in DYLD_FRAMEWORK_PATH in</span><br><span class=\"line\">              turn. If it looks in all the  directories  and  can&#x27;t  find  the</span><br><span class=\"line\">              framework,  it  searches the directories in DYLD_LIBRARY_PATH in</span><br><span class=\"line\">              turn. If it still can&#x27;t find the  framework,  it  then  searches</span><br><span class=\"line\">              DYLD_FALLBACK_FRAMEWORK_PATH  and  DYLD_FALLBACK_LIBRARY_PATH in</span><br><span class=\"line\">              turn.</span><br><span class=\"line\"></span><br><span class=\"line\">              Use the -L option to otool(1).  to discover the  frameworks  and</span><br><span class=\"line\">              shared libraries that the executable is linked against.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_FALLBACK_FRAMEWORK_PATH</span><br><span class=\"line\">              This  is  a  colon  separated  list  of directories that contain</span><br><span class=\"line\">              frameworks.  It is used as the default location  for  frameworks</span><br><span class=\"line\">              not found in their install path.</span><br><span class=\"line\"></span><br><span class=\"line\">              By    default,    it   is   set   to   /Library/Frameworks:/Net-</span><br><span class=\"line\">              work/Library/Frameworks:/System/Library/Frameworks</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_VERSIONED_FRAMEWORK_PATH</span><br><span class=\"line\">              This is a colon  separated  list  of  directories  that  contain</span><br><span class=\"line\">              potential  override  frameworks.   The  dynamic  linker searches</span><br><span class=\"line\">              these directories for frameworks.  For each framework found dyld</span><br><span class=\"line\">              looks  at  its  LC_ID_DYLIB  and  gets  the  current_version and</span><br><span class=\"line\">              install name.  Dyld then looks for the framework at the  install</span><br><span class=\"line\">              name  path.  Whichever has the larger current_version value will</span><br><span class=\"line\">              be used in the process whenever a framework  with  that  install</span><br><span class=\"line\">              name is required.  This is similar to DYLD_FRAMEWORK_PATH except</span><br><span class=\"line\">              instead of always overriding, it only overrides is the  supplied</span><br><span class=\"line\">              framework  is  newer.  Note: dyld does not check the framework&#x27;s</span><br><span class=\"line\">              Info.plist to find its version.   Dyld  only  checks  the  -cur-</span><br><span class=\"line\">              rrent_version number supplied when the framework was created.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_LIBRARY_PATH</span><br><span class=\"line\">              This  is  a  colon  separated  list  of directories that contain</span><br><span class=\"line\">              libraries. The dynamic linker searches these directories  before</span><br><span class=\"line\">              it  searches  the default locations for libraries. It allows you</span><br><span class=\"line\">              to test new versions of existing libraries.</span><br><span class=\"line\"></span><br><span class=\"line\">              For each library that a program uses, the dynamic  linker  looks</span><br><span class=\"line\">              for  it  in  each  directory in DYLD_LIBRARY_PATH in turn. If it</span><br><span class=\"line\">              still can&#x27;t  find  the  library,  it  then  searches  DYLD_FALL-</span><br><span class=\"line\">              BACK_FRAMEWORK_PATH and DYLD_FALLBACK_LIBRARY_PATH in turn.</span><br><span class=\"line\"></span><br><span class=\"line\">              Use  the  -L option to otool(1).  to discover the frameworks and</span><br><span class=\"line\">              shared libraries that the executable is linked against.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_FALLBACK_LIBRARY_PATH</span><br><span class=\"line\">              This is a colon  separated  list  of  directories  that  contain</span><br><span class=\"line\">              libraries.  It is used as the default location for libraries not</span><br><span class=\"line\">              found  in  their  install  path.   By  default,  it  is  set  to</span><br><span class=\"line\">              $(HOME)/lib:/usr/local/lib:/lib:/usr/lib.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_VERSIONED_LIBRARY_PATH</span><br><span class=\"line\">              This  is  a  colon  separated  list  of directories that contain</span><br><span class=\"line\">              potential override libraries.  The dynamic linker searches these</span><br><span class=\"line\">              directories  for dynamic libraries.  For each library found dyld</span><br><span class=\"line\">              looks at  its  LC_ID_DYLIB  and  gets  the  current_version  and</span><br><span class=\"line\">              install  name.   Dyld  then looks for the library at the install</span><br><span class=\"line\">              name path.  Whichever has the larger current_version value  will</span><br><span class=\"line\">              be  used  in the process whenever a dylib with that install name</span><br><span class=\"line\">              is  required.   This  is  similar  to  DYLD_LIBRARY_PATH  except</span><br><span class=\"line\">              instead  of always overriding, it only overrides is the supplied</span><br><span class=\"line\">              library is newer.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_TO_FILE</span><br><span class=\"line\">              This is a path to  a  (writable)  file.  Normally,  the  dynamic</span><br><span class=\"line\">              linker writes all logging output (triggered by DYLD_PRINT_* set-</span><br><span class=\"line\">              tings) to file descriptor 2 (which is usually stderr).  But this</span><br><span class=\"line\">              setting causes the dynamic linker to write logging output to the</span><br><span class=\"line\">              specified file.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_SHARED_REGION</span><br><span class=\"line\">              This can be &quot;use&quot; (the default), &quot;avoid&quot;, or &quot;private&quot;.  Setting</span><br><span class=\"line\">              it  to  &quot;avoid&quot;  tells dyld to not use the shared cache.  All OS</span><br><span class=\"line\">              dylibs are loaded dynamically just like every other dylib.  Set-</span><br><span class=\"line\">              ting it to &quot;private&quot; tells dyld to remove the shared region from</span><br><span class=\"line\">              the process address space and mmap() back in a private  copy  of</span><br><span class=\"line\">              the  dyld  shared cache in the shared region address range. This</span><br><span class=\"line\">              is only useful if the shared cache on disk has been updated  and</span><br><span class=\"line\">              is different than the shared cache in use.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_INSERT_LIBRARIES</span><br><span class=\"line\">              This  is  a  colon  separated  list of dynamic libraries to load</span><br><span class=\"line\">              before the ones specified in the program.  This  lets  you  test</span><br><span class=\"line\">              new  modules  of existing dynamic shared libraries that are used</span><br><span class=\"line\">              in flat-namespace images by loading a temporary  dynamic  shared</span><br><span class=\"line\">              library with just the new modules.  Note that this has no effect</span><br><span class=\"line\">              on images built a two-level namespace  images  using  a  dynamic</span><br><span class=\"line\">              shared library unless DYLD_FORCE_FLAT_NAMESPACE is also used.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_FORCE_FLAT_NAMESPACE</span><br><span class=\"line\">              Force  all  images in the program to be linked as flat-namespace</span><br><span class=\"line\">              images and ignore any two-level namespace  bindings.   This  may</span><br><span class=\"line\">              cause programs to fail to execute with a multiply defined symbol</span><br><span class=\"line\">              error if two-level namespace images are used to allow the images</span><br><span class=\"line\">              to have multiply defined symbols.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_IMAGE_SUFFIX</span><br><span class=\"line\">              This  is  set  to a string of a suffix to try to be used for all</span><br><span class=\"line\">              shared libraries used by the program.  For libraries  ending  in</span><br><span class=\"line\">              &quot;.dylib&quot;  the  suffix  is applied just before the &quot;.dylib&quot;.  For</span><br><span class=\"line\">              all other libraries the suffix is appended to the library  name.</span><br><span class=\"line\">              This  is  useful  for using conventional &quot;_profile&quot; and &quot;_debug&quot;</span><br><span class=\"line\">              libraries and frameworks.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_OPTS</span><br><span class=\"line\">              When this is set, the dynamic linker writes to file descriptor 2</span><br><span class=\"line\">              (normally standard error) the command line options.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_ENV</span><br><span class=\"line\">              When this is set, the dynamic linker writes to file descriptor 2</span><br><span class=\"line\">              (normally standard error) the environment variables.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_LIBRARIES</span><br><span class=\"line\">              When this is set, the dynamic linker writes to file descriptor 2</span><br><span class=\"line\">              (normally  standard  error)  the  filenames of the libraries the</span><br><span class=\"line\">              program is using.  This is useful to make sure that the  use  of</span><br><span class=\"line\">              DYLD_LIBRARY_PATH is getting what you want.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_BIND_AT_LAUNCH</span><br><span class=\"line\">              When this is set, the dynamic linker binds all undefined symbols</span><br><span class=\"line\">              the program needs at launch time. This includes function symbols</span><br><span class=\"line\">              that  can  are  normally lazily bound at the time of their first</span><br><span class=\"line\">              call.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_STATISTICS</span><br><span class=\"line\">              Right before the process&#x27;s main() is  called,  dyld  prints  out</span><br><span class=\"line\">              information about how dyld spent its time.  Useful for analyzing</span><br><span class=\"line\">              launch performance.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_STATISTICS_DETAILS</span><br><span class=\"line\">              Right before the process&#x27;s main() is  called,  dyld  prints  out</span><br><span class=\"line\">              detailed  information about how dyld spent its time.  Useful for</span><br><span class=\"line\">              analyzing launch performance.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_DISABLE_DOFS</span><br><span class=\"line\">              Causes dyld not register dtrace static probes with the kernel.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_INITIALIZERS</span><br><span class=\"line\">              Causes dyld to print out a line when running  each  initializers</span><br><span class=\"line\">              in  every image.  Initializers run by dyld included constructors</span><br><span class=\"line\">              for C++ statically  allocated  objects,  functions  marked  with</span><br><span class=\"line\">              __attribute__((constructor)), and -init functions.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_APIS</span><br><span class=\"line\">              Causes  dyld to print a line whenever a dyld API is called (e.g.</span><br><span class=\"line\">              NSAddImage()).</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_SEGMENTS</span><br><span class=\"line\">              Causes dyld to print out a line containing the name and  address</span><br><span class=\"line\">              range  of  each  mach-o  segment that dyld maps.  In addition it</span><br><span class=\"line\">              prints information about if the image was from the  dyld  shared</span><br><span class=\"line\">              cache.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_BINDINGS</span><br><span class=\"line\">              Causes  dyld to print a line each time a symbolic name is bound.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_DOFS</span><br><span class=\"line\">              Causes dyld to print out information about dtrace static  probes</span><br><span class=\"line\">              registered with the kernel.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_PRINT_RPATHS</span><br><span class=\"line\">              Cause dyld  to print a line each time it expands an @rpath vari-</span><br><span class=\"line\">              able and whether that expansion was successful or not.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_SHARED_CACHE_DIR</span><br><span class=\"line\">              This is a directory containing dyld shared  cache  files.   This</span><br><span class=\"line\">              variable can be used in conjunction with DYLD_SHARED_REGION=pri-</span><br><span class=\"line\">              vate and DYLD_SHARED_CACHE_DONT_VALIDATE to run a  process  with</span><br><span class=\"line\">              an alternate shared cache.</span><br><span class=\"line\"></span><br><span class=\"line\">       DYLD_SHARED_CACHE_DONT_VALIDATE</span><br><span class=\"line\">              Causes dyld to not check that the inode and mod-time of files in</span><br><span class=\"line\">              the shared cache match the requested dylib on disk. Thus a  pro-</span><br><span class=\"line\">              gram  can be made to run with the dylib in the shared cache even</span><br><span class=\"line\">              though the real dylib has been updated on disk.</span><br><span class=\"line\">       DYNAMIC LIBRARY LOADING</span><br><span class=\"line\">              Unlike many other operating  systems,  Darwin  does  not  locate</span><br><span class=\"line\">              dependent  dynamic  libraries via their leaf file name.  Instead</span><br><span class=\"line\">              the full path to  each  dylib  is  used  (e.g.  /usr/lib/libSys-</span><br><span class=\"line\">              tem.B.dylib).   But  there  are  times  when  a full path is not</span><br><span class=\"line\">              appropriate; for instance, may want your binaries to be  instal-</span><br><span class=\"line\">              lable in anywhere on the disk.  To support that, there are three</span><br><span class=\"line\">              @xxx/ variables that can be used as a path prefix.   At  runtime</span><br><span class=\"line\">              dyld substitutes a dynamically generated path for the @xxx/ pre-</span><br><span class=\"line\">              fix.</span><br><span class=\"line\"></span><br><span class=\"line\">       @executable_path/</span><br><span class=\"line\">              This variable is replaced with the path to  the  directory  con-</span><br><span class=\"line\">              taining the main executable for the process.  This is useful for</span><br><span class=\"line\">              loading dylibs/frameworks embedded in a .app directory.  If  the</span><br><span class=\"line\">              main  executable  file is at /some/path/My.app/Contents/MacOS/My</span><br><span class=\"line\">              and  a  framework  dylib  file  is   at   /some/path/My.app/Con-</span><br><span class=\"line\">              tents/Frameworks/Foo.framework/Versions/A/Foo,  then  the frame-</span><br><span class=\"line\">              work load path could be  encoded  as  @executable_path/../Frame-</span><br><span class=\"line\">              works/Foo.framework/Versions/A/Foo  and the .app directory could</span><br><span class=\"line\">              be moved around in the file system and dyld will still  be  able</span><br><span class=\"line\">              to load the embedded framework.</span><br><span class=\"line\"></span><br><span class=\"line\">       @loader_path/</span><br><span class=\"line\">              This  variable  is  replaced with the path to the directory con-</span><br><span class=\"line\">              taining the mach-o binary which contains the load command  using</span><br><span class=\"line\">              @loader_path.  Thus, in every binary, @loader_path resolves to a</span><br><span class=\"line\">              different path, whereas @executable_path always resolves to  the</span><br><span class=\"line\">              same  path. @loader_path is useful as the load path for a frame-</span><br><span class=\"line\">              work/dylib embedded in a plug-in, if the final file system loca-</span><br><span class=\"line\">              tion of the plugin-in unknown (so absolute paths cannot be used)</span><br><span class=\"line\">              or if the plug-in is used by  multiple  applications  (so  @exe-</span><br><span class=\"line\">              cutable_path  cannot  be used). If the plug-in mach-o file is at</span><br><span class=\"line\">              /some/path/Myfilter.plugin/Contents/MacOS/Myfilter and a  frame-</span><br><span class=\"line\">              work dylib file is at /some/path/Myfilter.plugin/Contents/Frame-</span><br><span class=\"line\">              works/Foo.framework/Versions/A/Foo, then the framework load path</span><br><span class=\"line\">              could   be   encoded   as  @loader_path/../Frameworks/Foo.frame-</span><br><span class=\"line\">              work/Versions/A/Foo and the Myfilter.plugin directory  could  be</span><br><span class=\"line\">              moved  around  in the file system and dyld will still be able to</span><br><span class=\"line\">              load the embedded framework.</span><br><span class=\"line\"></span><br><span class=\"line\">       @rpath/</span><br><span class=\"line\">              Dyld maintains a current stack of  paths  called  the  run  path</span><br><span class=\"line\">              list.   When  @rpath  is encountered it is substituted with each</span><br><span class=\"line\">              path in the run path list until a loadable dylib if found.   The</span><br><span class=\"line\">              run  path  stack is built from the LC_RPATH load commands in the</span><br><span class=\"line\">              depencency chain that lead to the current dylib load.   You  can</span><br><span class=\"line\">              add  an LC_RPATH load command to an image with the -rpath option</span><br><span class=\"line\">              to ld(1).  You can even add a LC_RPATH load  command  path  that</span><br><span class=\"line\">              starts  with  @loader_path/,  and it will push a path on the run</span><br><span class=\"line\">              path stack that relative to the image containing  the  LC_RPATH.</span><br><span class=\"line\">              The  use of @rpath is most useful when you have a complex direc-</span><br><span class=\"line\">              tory structure of programs and dylibs  which  can  be  installed</span><br><span class=\"line\">              anywhere,  but  keep  their  relative  positions.  This scenario</span><br><span class=\"line\">              could be implemented using @loader_path, but every client  of  a</span><br><span class=\"line\">              dylib  could  need  a  different  load path because its relative</span><br><span class=\"line\">              position in the file system is  different.  The  use  of  @rpath</span><br><span class=\"line\">              introduces  a  level  of  indirection that simplies things.  You</span><br><span class=\"line\">              pick a location in your directory structure as an anchor  point.</span><br><span class=\"line\">              Each dylib then gets an install path that starts with @rpath and</span><br><span class=\"line\">              is the path to the dylib relative to the anchor point. Each main</span><br><span class=\"line\">              executable  is linked with -rpath @loader_path/zzz, where zzz is</span><br><span class=\"line\">              the path from the executable to the anchor  point.   At  runtime</span><br><span class=\"line\">              dyld sets it run path to be the anchor point, then each dylib is</span><br><span class=\"line\">              found relative to the anchor point.</span><br><span class=\"line\"></span><br><span class=\"line\">SEE ALSO</span><br><span class=\"line\"></span><br><span class=\"line\">       dyldinfo(1), ld(1), otool(1)</span><br><span class=\"line\"></span><br><span class=\"line\">Apple Inc.                       June 1, 2017                          DYLD(1)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://wincent.com/wiki/%40executable_path%2C_%40load_path_and_%40rpath\">@executable path, @load path and @rpath</a></li>\n</ul>\n"},{"title":"iOS 之离屏渲染","abbrlink":45325,"date":"2021-05-04T13:36:02.000Z","_content":"\n## 1.  [离屏渲染](https://zhuanlan.zhihu.com/p/72653360)\n","source":"_posts/iOS/Performance/iOS 之离屏渲染.md","raw":"---\ntitle: iOS 之离屏渲染\nabbrlink: 45325\ndate: 2021-05-04 21:36:02\ntags:\n---\n\n## 1.  [离屏渲染](https://zhuanlan.zhihu.com/p/72653360)\n","slug":"iOS/Performance/iOS 之离屏渲染","published":1,"updated":"2021-09-22T06:56:40.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2c0026iu9kar29gk7u","content":"<h2 id=\"1-离屏渲染\"><a href=\"#1-离屏渲染\" class=\"headerlink\" title=\"1.  离屏渲染\"></a>1.  <a href=\"https://zhuanlan.zhihu.com/p/72653360\">离屏渲染</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-离屏渲染\"><a href=\"#1-离屏渲染\" class=\"headerlink\" title=\"1.  离屏渲染\"></a>1.  <a href=\"https://zhuanlan.zhihu.com/p/72653360\">离屏渲染</a></h2>"},{"title":"Linux","abbrlink":"53d0684b","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/OS/Linux.md","raw":"---\ntitle: Linux\nabbrlink: 53d0684b\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/OS/Linux","published":1,"updated":"2021-07-29T06:46:00.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2c0027iu9k0f5ubwhc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"操作系统","abbrlink":"d04bd5bc","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [页面置换算法](https://blog.csdn.net/dl674756321/article/details/103266331)\n\n## 2. [虚拟内存与物理内存的联系与区别](https://blog.csdn.net/lvyibin890/article/details/82217193)\n\n## 3. [死锁，死锁的四个必要条件以及处理策略](https://blog.csdn.net/wljliujuan/article/details/79614019)\n","source":"_posts/iOS/OS/OS.md","raw":"---\ntitle: 操作系统\nabbrlink: d04bd5bc\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [页面置换算法](https://blog.csdn.net/dl674756321/article/details/103266331)\n\n## 2. [虚拟内存与物理内存的联系与区别](https://blog.csdn.net/lvyibin890/article/details/82217193)\n\n## 3. [死锁，死锁的四个必要条件以及处理策略](https://blog.csdn.net/wljliujuan/article/details/79614019)\n","slug":"iOS/OS/OS","published":1,"updated":"2021-07-29T06:45:57.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2g0028iu9k90upc6c1","content":"<h2 id=\"1-页面置换算法\"><a href=\"#1-页面置换算法\" class=\"headerlink\" title=\"1. 页面置换算法\"></a>1. <a href=\"https://blog.csdn.net/dl674756321/article/details/103266331\">页面置换算法</a></h2><h2 id=\"2-虚拟内存与物理内存的联系与区别\"><a href=\"#2-虚拟内存与物理内存的联系与区别\" class=\"headerlink\" title=\"2. 虚拟内存与物理内存的联系与区别\"></a>2. <a href=\"https://blog.csdn.net/lvyibin890/article/details/82217193\">虚拟内存与物理内存的联系与区别</a></h2><h2 id=\"3-死锁，死锁的四个必要条件以及处理策略\"><a href=\"#3-死锁，死锁的四个必要条件以及处理策略\" class=\"headerlink\" title=\"3. 死锁，死锁的四个必要条件以及处理策略\"></a>3. <a href=\"https://blog.csdn.net/wljliujuan/article/details/79614019\">死锁，死锁的四个必要条件以及处理策略</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-页面置换算法\"><a href=\"#1-页面置换算法\" class=\"headerlink\" title=\"1. 页面置换算法\"></a>1. <a href=\"https://blog.csdn.net/dl674756321/article/details/103266331\">页面置换算法</a></h2><h2 id=\"2-虚拟内存与物理内存的联系与区别\"><a href=\"#2-虚拟内存与物理内存的联系与区别\" class=\"headerlink\" title=\"2. 虚拟内存与物理内存的联系与区别\"></a>2. <a href=\"https://blog.csdn.net/lvyibin890/article/details/82217193\">虚拟内存与物理内存的联系与区别</a></h2><h2 id=\"3-死锁，死锁的四个必要条件以及处理策略\"><a href=\"#3-死锁，死锁的四个必要条件以及处理策略\" class=\"headerlink\" title=\"3. 死锁，死锁的四个必要条件以及处理策略\"></a>3. <a href=\"https://blog.csdn.net/wljliujuan/article/details/79614019\">死锁，死锁的四个必要条件以及处理策略</a></h2>"},{"title":"Shell 配置文件","abbrlink":"7c8fd7c9","date":"2021-04-20T13:36:02.000Z","_content":"\nLinux中profile、bashrc、bash_profile之间的区别和联系\n\n1、/etc/profile:此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置.\n  所以如果你有对/etc/profile有修改的话必须得重启你的修改才会生效，此修改对每个用户都生效。\n\n2、/etc/bashrc:为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.\n  如果你想对所有的使用bash的用户修改某个配置并在以后打开的bash都生效的话可以修改这个文件，修改这个文件不用重启，重新打开一个bash即可生效。\n\n3、~/.bash_profile:每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.\n  此文件类似于/etc/profile，也是需要需要重启才会生效，/etc/profile对所有用户生效，~/.bash_profile只对当前用户生效。\n\n4、~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取.（每个用户都有一个.bashrc文件，在用户目录下）\n  此文件类似于/etc/bashrc，不需要重启生效，重新打开一个bash即可生效，  /etc/bashrc对所有用户新打开的bash都生效，但~/.bashrc只对当前用户新打开的bash生效。\n\n5、~/.bash_logout:当每次退出系统(退出bash shell)时,执行该文件.\n\n  另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量,他们是\"父子\"关系.\n\n6、~/.bash_profile 是交互式、login 方式进入bash 运行的；\n\n7、~/.bashrc 是交互式 non-login 方式进入bash 运行的；\n  通常二者设置大致相同，所以通常前者会调用后者。\n","source":"_posts/iOS/OS/ShellConfigs.md","raw":"---\ntitle: Shell 配置文件\nabbrlink: 7c8fd7c9\ndate: 2021-04-20 21:36:02\ntags:\n---\n\nLinux中profile、bashrc、bash_profile之间的区别和联系\n\n1、/etc/profile:此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置.\n  所以如果你有对/etc/profile有修改的话必须得重启你的修改才会生效，此修改对每个用户都生效。\n\n2、/etc/bashrc:为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.\n  如果你想对所有的使用bash的用户修改某个配置并在以后打开的bash都生效的话可以修改这个文件，修改这个文件不用重启，重新打开一个bash即可生效。\n\n3、~/.bash_profile:每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.\n  此文件类似于/etc/profile，也是需要需要重启才会生效，/etc/profile对所有用户生效，~/.bash_profile只对当前用户生效。\n\n4、~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取.（每个用户都有一个.bashrc文件，在用户目录下）\n  此文件类似于/etc/bashrc，不需要重启生效，重新打开一个bash即可生效，  /etc/bashrc对所有用户新打开的bash都生效，但~/.bashrc只对当前用户新打开的bash生效。\n\n5、~/.bash_logout:当每次退出系统(退出bash shell)时,执行该文件.\n\n  另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量,他们是\"父子\"关系.\n\n6、~/.bash_profile 是交互式、login 方式进入bash 运行的；\n\n7、~/.bashrc 是交互式 non-login 方式进入bash 运行的；\n  通常二者设置大致相同，所以通常前者会调用后者。\n","slug":"iOS/OS/ShellConfigs","published":1,"updated":"2021-07-29T06:46:00.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2h0029iu9kbfpo7yb3","content":"<p>Linux中profile、bashrc、bash_profile之间的区别和联系</p>\n<p>1、/etc/profile:此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置.<br>  所以如果你有对/etc/profile有修改的话必须得重启你的修改才会生效，此修改对每个用户都生效。</p>\n<p>2、/etc/bashrc:为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.<br>  如果你想对所有的使用bash的用户修改某个配置并在以后打开的bash都生效的话可以修改这个文件，修改这个文件不用重启，重新打开一个bash即可生效。</p>\n<p>3、<del>/.bash_profile:每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.<br>  此文件类似于/etc/profile，也是需要需要重启才会生效，/etc/profile对所有用户生效，</del>/.bash_profile只对当前用户生效。</p>\n<p>4、<del>/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取.（每个用户都有一个.bashrc文件，在用户目录下）<br>  此文件类似于/etc/bashrc，不需要重启生效，重新打开一个bash即可生效，  /etc/bashrc对所有用户新打开的bash都生效，但</del>/.bashrc只对当前用户新打开的bash生效。</p>\n<p>5、~/.bash_logout:当每次退出系统(退出bash shell)时,执行该文件.</p>\n<p>  另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量,他们是”父子”关系.</p>\n<p>6、~/.bash_profile 是交互式、login 方式进入bash 运行的；</p>\n<p>7、~/.bashrc 是交互式 non-login 方式进入bash 运行的；<br>  通常二者设置大致相同，所以通常前者会调用后者。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Linux中profile、bashrc、bash_profile之间的区别和联系</p>\n<p>1、/etc/profile:此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置.<br>  所以如果你有对/etc/profile有修改的话必须得重启你的修改才会生效，此修改对每个用户都生效。</p>\n<p>2、/etc/bashrc:为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.<br>  如果你想对所有的使用bash的用户修改某个配置并在以后打开的bash都生效的话可以修改这个文件，修改这个文件不用重启，重新打开一个bash即可生效。</p>\n<p>3、<del>/.bash_profile:每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.<br>  此文件类似于/etc/profile，也是需要需要重启才会生效，/etc/profile对所有用户生效，</del>/.bash_profile只对当前用户生效。</p>\n<p>4、<del>/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取.（每个用户都有一个.bashrc文件，在用户目录下）<br>  此文件类似于/etc/bashrc，不需要重启生效，重新打开一个bash即可生效，  /etc/bashrc对所有用户新打开的bash都生效，但</del>/.bashrc只对当前用户新打开的bash生效。</p>\n<p>5、~/.bash_logout:当每次退出系统(退出bash shell)时,执行该文件.</p>\n<p>  另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量,他们是”父子”关系.</p>\n<p>6、~/.bash_profile 是交互式、login 方式进入bash 运行的；</p>\n<p>7、~/.bashrc 是交互式 non-login 方式进入bash 运行的；<br>  通常二者设置大致相同，所以通常前者会调用后者。</p>\n"},{"title":"Unix","abbrlink":"753fef46","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/OS/Unix.md","raw":"---\ntitle: Unix\nabbrlink: 753fef46\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/OS/Unix","published":1,"updated":"2021-07-29T06:46:00.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2h002aiu9kgpfq62dp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之 Xcode Build 自动化","abbrlink":"a857ced4","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. 自动化命令配置项\n\n1. Project name: Bookshop.xcodeproj\n2. Workspace name: Bookshop.workspace\n3. Build Configurations: Debug and Release\n4. Targets: bookshop_dev and bookshop_release\n5. Schemes: bookshop_dev_scheme and bookshop_appStore_scheme.\n\n* The Build, Run, Test and Analyze are using Debug configuration.\n* The Profile and Archive are using Release configuration. Each of the scheme only includes 1 related target.\n\n## 2. Xcode build\n\n### 2.1 显示项目信息--list\n\n```shell\nxcodebuild -list\n\nInformation about project \"_Pods\":\n    Targets:\n        Pods-Bookshop_Example\n        Pods-Bookshop_Tests\n        Bookshop\n\n    Build Configurations:\n        Debug\n        Release\n\n    If no build configuration is specified and -scheme is not passed then \"Release\" is used.\n\n    Schemes:\n        Pods-Bookshop_Example\n        Pods-Bookshop_Example\n        Pods-Bookshop_Tests\n        Pods-Bookshop_Tests\n        Bookshop\n        Bookshop\n```\n\n### 2.2  清理工程--Clean\n\n```shell\nxcodebuild clean -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme\nxcodebuild clean -project Bookshop.xcodeproj -scheme bookshop_dev_scheme\n```\n\n## 2.3 编译工程--build\n\n```shell\nxcodebuild -workspace sm_ios_base.xcworkspace -scheme sm_ios_base-Example -configuration Debug\n\nxcodebuild -project _Pods.xcodeproj -target sm_ios_base  -configuration Debug\n```\n\n## 2.4 打包--archive\n\n```shell\nxcodebuild archive -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme -archivePath ~/Downloads/bookshop_dev.xcarchive\n```\n\n## 2.5 导出 IPA\n\n```shell\nxcodebuild -exportArchive -archivePath ~/Downloads/bookshop_dev.scarchive -exportPath ~/Downloads -exportOptionsPlist ~/Downloads/ExportOptions.plist\n```\n\n### 2.5.1  ExportOptions.plist\n\n这个文件允许在打IPA包的时候，指定一些配置选项。一般在Xcode 打包的时候，有个 Addtional Option 下面可以勾选这个选项，勾选后，导出的包里面就有这个文件。\n\n自动签名类型的 ExportOptions.plist：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>compileBitcode</key>\n  <true/>\n  <key>method</key>\n  <string>ad-hoc</string>\n  <key>signingStyle</key>\n  <string>automatic</string>\n  <key>stripSwiftSymbols</key>\n  <true/>\n  <key>teamID</key>\n  <string>YourTeamID</string>\n  <key>thinning</key>\n  <string>&lt;none&gt;</string>\n</dict>\n</plist>\n```\n\n手动签名的 ExportOptions.plist：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n <key>compileBitcode</key>\n <true/>\n <key>method</key>\n <string>ad-hoc</string>\n <key>provisioningProfiles</key>\n <dict>\n <key>AppBundleID</key>\n <string>AppProvisioningProfileNameInAppleDeveloperAccount</string>\n <key>AppBundleID.NotificationServiceExtension</key>\n <string>AppBundleID</string>\n </dict>\n <key>signingCertificate</key>\n <string>iPhone Distribution</string>\n <key>signingStyle</key>\n <string>manual</string>\n <key>stripSwiftSymbols</key>\n <true/>\n <key>teamID</key>\n <string>YourTeamID</string>\n <key>thinning</key>\n <string>&lt;none&gt;</string>\n</dict>\n</plist>\n```\n\n## 3. 一个打包脚本\n\n### 3.1 显示项目信息\n\n```shell\nxcodebuild -list\n```\n\n### 3.2 打包\n\n```shell\nxcodebuild clean -workspace SUMusic.xcworkspace -scheme SUMusic\n\nxcodebuild build -workspace SUMusic.xcworkspace -scheme SUMusic\n\nxcodebuild archive -workspace SUMusic.xcworkspace -scheme SUMusic -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive\n\nxcodebuild -exportArchive -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive -exportPath ~/Desktop/Packages/SUMusic/ -exportOptionsPlist ~/Desktop/Packages/SUMusic/ExportOptions.plist -allowProvisioningUpdates\n```\n","source":"_posts/iOS/ProjectManager/AutoRelease.md","raw":"---\ntitle: iOS之 Xcode Build 自动化\nabbrlink: a857ced4\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. 自动化命令配置项\n\n1. Project name: Bookshop.xcodeproj\n2. Workspace name: Bookshop.workspace\n3. Build Configurations: Debug and Release\n4. Targets: bookshop_dev and bookshop_release\n5. Schemes: bookshop_dev_scheme and bookshop_appStore_scheme.\n\n* The Build, Run, Test and Analyze are using Debug configuration.\n* The Profile and Archive are using Release configuration. Each of the scheme only includes 1 related target.\n\n## 2. Xcode build\n\n### 2.1 显示项目信息--list\n\n```shell\nxcodebuild -list\n\nInformation about project \"_Pods\":\n    Targets:\n        Pods-Bookshop_Example\n        Pods-Bookshop_Tests\n        Bookshop\n\n    Build Configurations:\n        Debug\n        Release\n\n    If no build configuration is specified and -scheme is not passed then \"Release\" is used.\n\n    Schemes:\n        Pods-Bookshop_Example\n        Pods-Bookshop_Example\n        Pods-Bookshop_Tests\n        Pods-Bookshop_Tests\n        Bookshop\n        Bookshop\n```\n\n### 2.2  清理工程--Clean\n\n```shell\nxcodebuild clean -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme\nxcodebuild clean -project Bookshop.xcodeproj -scheme bookshop_dev_scheme\n```\n\n## 2.3 编译工程--build\n\n```shell\nxcodebuild -workspace sm_ios_base.xcworkspace -scheme sm_ios_base-Example -configuration Debug\n\nxcodebuild -project _Pods.xcodeproj -target sm_ios_base  -configuration Debug\n```\n\n## 2.4 打包--archive\n\n```shell\nxcodebuild archive -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme -archivePath ~/Downloads/bookshop_dev.xcarchive\n```\n\n## 2.5 导出 IPA\n\n```shell\nxcodebuild -exportArchive -archivePath ~/Downloads/bookshop_dev.scarchive -exportPath ~/Downloads -exportOptionsPlist ~/Downloads/ExportOptions.plist\n```\n\n### 2.5.1  ExportOptions.plist\n\n这个文件允许在打IPA包的时候，指定一些配置选项。一般在Xcode 打包的时候，有个 Addtional Option 下面可以勾选这个选项，勾选后，导出的包里面就有这个文件。\n\n自动签名类型的 ExportOptions.plist：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>compileBitcode</key>\n  <true/>\n  <key>method</key>\n  <string>ad-hoc</string>\n  <key>signingStyle</key>\n  <string>automatic</string>\n  <key>stripSwiftSymbols</key>\n  <true/>\n  <key>teamID</key>\n  <string>YourTeamID</string>\n  <key>thinning</key>\n  <string>&lt;none&gt;</string>\n</dict>\n</plist>\n```\n\n手动签名的 ExportOptions.plist：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n <key>compileBitcode</key>\n <true/>\n <key>method</key>\n <string>ad-hoc</string>\n <key>provisioningProfiles</key>\n <dict>\n <key>AppBundleID</key>\n <string>AppProvisioningProfileNameInAppleDeveloperAccount</string>\n <key>AppBundleID.NotificationServiceExtension</key>\n <string>AppBundleID</string>\n </dict>\n <key>signingCertificate</key>\n <string>iPhone Distribution</string>\n <key>signingStyle</key>\n <string>manual</string>\n <key>stripSwiftSymbols</key>\n <true/>\n <key>teamID</key>\n <string>YourTeamID</string>\n <key>thinning</key>\n <string>&lt;none&gt;</string>\n</dict>\n</plist>\n```\n\n## 3. 一个打包脚本\n\n### 3.1 显示项目信息\n\n```shell\nxcodebuild -list\n```\n\n### 3.2 打包\n\n```shell\nxcodebuild clean -workspace SUMusic.xcworkspace -scheme SUMusic\n\nxcodebuild build -workspace SUMusic.xcworkspace -scheme SUMusic\n\nxcodebuild archive -workspace SUMusic.xcworkspace -scheme SUMusic -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive\n\nxcodebuild -exportArchive -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive -exportPath ~/Desktop/Packages/SUMusic/ -exportOptionsPlist ~/Desktop/Packages/SUMusic/ExportOptions.plist -allowProvisioningUpdates\n```\n","slug":"iOS/ProjectManager/AutoRelease","published":1,"updated":"2021-07-29T06:46:00.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2i002biu9k869qclg9","content":"<h2 id=\"1-自动化命令配置项\"><a href=\"#1-自动化命令配置项\" class=\"headerlink\" title=\"1. 自动化命令配置项\"></a>1. 自动化命令配置项</h2><ol>\n<li>Project name: Bookshop.xcodeproj</li>\n<li>Workspace name: Bookshop.workspace</li>\n<li>Build Configurations: Debug and Release</li>\n<li>Targets: bookshop_dev and bookshop_release</li>\n<li>Schemes: bookshop_dev_scheme and bookshop_appStore_scheme.</li>\n</ol>\n<ul>\n<li>The Build, Run, Test and Analyze are using Debug configuration.</li>\n<li>The Profile and Archive are using Release configuration. Each of the scheme only includes 1 related target.</li>\n</ul>\n<h2 id=\"2-Xcode-build\"><a href=\"#2-Xcode-build\" class=\"headerlink\" title=\"2. Xcode build\"></a>2. Xcode build</h2><h3 id=\"2-1-显示项目信息–list\"><a href=\"#2-1-显示项目信息–list\" class=\"headerlink\" title=\"2.1 显示项目信息–list\"></a>2.1 显示项目信息–list</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -list</span><br><span class=\"line\"></span><br><span class=\"line\">Information about project &quot;_Pods&quot;:</span><br><span class=\"line\">    Targets:</span><br><span class=\"line\">        Pods-Bookshop_Example</span><br><span class=\"line\">        Pods-Bookshop_Tests</span><br><span class=\"line\">        Bookshop</span><br><span class=\"line\"></span><br><span class=\"line\">    Build Configurations:</span><br><span class=\"line\">        Debug</span><br><span class=\"line\">        Release</span><br><span class=\"line\"></span><br><span class=\"line\">    If no build configuration is specified and -scheme is not passed then &quot;Release&quot; is used.</span><br><span class=\"line\"></span><br><span class=\"line\">    Schemes:</span><br><span class=\"line\">        Pods-Bookshop_Example</span><br><span class=\"line\">        Pods-Bookshop_Example</span><br><span class=\"line\">        Pods-Bookshop_Tests</span><br><span class=\"line\">        Pods-Bookshop_Tests</span><br><span class=\"line\">        Bookshop</span><br><span class=\"line\">        Bookshop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-清理工程–Clean\"><a href=\"#2-2-清理工程–Clean\" class=\"headerlink\" title=\"2.2  清理工程–Clean\"></a>2.2  清理工程–Clean</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild clean -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme</span><br><span class=\"line\">xcodebuild clean -project Bookshop.xcodeproj -scheme bookshop_dev_scheme</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-编译工程–build\"><a href=\"#2-3-编译工程–build\" class=\"headerlink\" title=\"2.3 编译工程–build\"></a>2.3 编译工程–build</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -workspace sm_ios_base.xcworkspace -scheme sm_ios_base-Example -configuration Debug</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -project _Pods.xcodeproj -target sm_ios_base  -configuration Debug</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-打包–archive\"><a href=\"#2-4-打包–archive\" class=\"headerlink\" title=\"2.4 打包–archive\"></a>2.4 打包–archive</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild archive -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme -archivePath ~/Downloads/bookshop_dev.xcarchive</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-5-导出-IPA\"><a href=\"#2-5-导出-IPA\" class=\"headerlink\" title=\"2.5 导出 IPA\"></a>2.5 导出 IPA</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -exportArchive -archivePath ~/Downloads/bookshop_dev.scarchive -exportPath ~/Downloads -exportOptionsPlist ~/Downloads/ExportOptions.plist</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-1-ExportOptions-plist\"><a href=\"#2-5-1-ExportOptions-plist\" class=\"headerlink\" title=\"2.5.1  ExportOptions.plist\"></a>2.5.1  ExportOptions.plist</h3><p>这个文件允许在打IPA包的时候，指定一些配置选项。一般在Xcode 打包的时候，有个 Addtional Option 下面可以勾选这个选项，勾选后，导出的包里面就有这个文件。</p>\n<p>自动签名类型的 ExportOptions.plist：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">plist</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class=\"meta-string\">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plist</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>compileBitcode<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>method<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>ad-hoc<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>signingStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>automatic<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>stripSwiftSymbols<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>teamID<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>YourTeamID<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>thinning<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span><span class=\"symbol\">&amp;lt;</span>none<span class=\"symbol\">&amp;gt;</span><span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>手动签名的 ExportOptions.plist：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">plist</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class=\"meta-string\">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plist</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>compileBitcode<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>method<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>ad-hoc<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>provisioningProfiles<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>AppBundleID<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AppProvisioningProfileNameInAppleDeveloperAccount<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>AppBundleID.NotificationServiceExtension<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AppBundleID<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>signingCertificate<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>iPhone Distribution<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>signingStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>manual<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>stripSwiftSymbols<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>teamID<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>YourTeamID<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>thinning<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span><span class=\"symbol\">&amp;lt;</span>none<span class=\"symbol\">&amp;gt;</span><span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-一个打包脚本\"><a href=\"#3-一个打包脚本\" class=\"headerlink\" title=\"3. 一个打包脚本\"></a>3. 一个打包脚本</h2><h3 id=\"3-1-显示项目信息\"><a href=\"#3-1-显示项目信息\" class=\"headerlink\" title=\"3.1 显示项目信息\"></a>3.1 显示项目信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -list</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-打包\"><a href=\"#3-2-打包\" class=\"headerlink\" title=\"3.2 打包\"></a>3.2 打包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild clean -workspace SUMusic.xcworkspace -scheme SUMusic</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild build -workspace SUMusic.xcworkspace -scheme SUMusic</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild archive -workspace SUMusic.xcworkspace -scheme SUMusic -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -exportArchive -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive -exportPath ~/Desktop/Packages/SUMusic/ -exportOptionsPlist ~/Desktop/Packages/SUMusic/ExportOptions.plist -allowProvisioningUpdates</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-自动化命令配置项\"><a href=\"#1-自动化命令配置项\" class=\"headerlink\" title=\"1. 自动化命令配置项\"></a>1. 自动化命令配置项</h2><ol>\n<li>Project name: Bookshop.xcodeproj</li>\n<li>Workspace name: Bookshop.workspace</li>\n<li>Build Configurations: Debug and Release</li>\n<li>Targets: bookshop_dev and bookshop_release</li>\n<li>Schemes: bookshop_dev_scheme and bookshop_appStore_scheme.</li>\n</ol>\n<ul>\n<li>The Build, Run, Test and Analyze are using Debug configuration.</li>\n<li>The Profile and Archive are using Release configuration. Each of the scheme only includes 1 related target.</li>\n</ul>\n<h2 id=\"2-Xcode-build\"><a href=\"#2-Xcode-build\" class=\"headerlink\" title=\"2. Xcode build\"></a>2. Xcode build</h2><h3 id=\"2-1-显示项目信息–list\"><a href=\"#2-1-显示项目信息–list\" class=\"headerlink\" title=\"2.1 显示项目信息–list\"></a>2.1 显示项目信息–list</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -list</span><br><span class=\"line\"></span><br><span class=\"line\">Information about project &quot;_Pods&quot;:</span><br><span class=\"line\">    Targets:</span><br><span class=\"line\">        Pods-Bookshop_Example</span><br><span class=\"line\">        Pods-Bookshop_Tests</span><br><span class=\"line\">        Bookshop</span><br><span class=\"line\"></span><br><span class=\"line\">    Build Configurations:</span><br><span class=\"line\">        Debug</span><br><span class=\"line\">        Release</span><br><span class=\"line\"></span><br><span class=\"line\">    If no build configuration is specified and -scheme is not passed then &quot;Release&quot; is used.</span><br><span class=\"line\"></span><br><span class=\"line\">    Schemes:</span><br><span class=\"line\">        Pods-Bookshop_Example</span><br><span class=\"line\">        Pods-Bookshop_Example</span><br><span class=\"line\">        Pods-Bookshop_Tests</span><br><span class=\"line\">        Pods-Bookshop_Tests</span><br><span class=\"line\">        Bookshop</span><br><span class=\"line\">        Bookshop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-清理工程–Clean\"><a href=\"#2-2-清理工程–Clean\" class=\"headerlink\" title=\"2.2  清理工程–Clean\"></a>2.2  清理工程–Clean</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild clean -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme</span><br><span class=\"line\">xcodebuild clean -project Bookshop.xcodeproj -scheme bookshop_dev_scheme</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-3-编译工程–build\"><a href=\"#2-3-编译工程–build\" class=\"headerlink\" title=\"2.3 编译工程–build\"></a>2.3 编译工程–build</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -workspace sm_ios_base.xcworkspace -scheme sm_ios_base-Example -configuration Debug</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -project _Pods.xcodeproj -target sm_ios_base  -configuration Debug</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-4-打包–archive\"><a href=\"#2-4-打包–archive\" class=\"headerlink\" title=\"2.4 打包–archive\"></a>2.4 打包–archive</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild archive -workspace Bookshop.xcworkspace -scheme bookshop_dev_scheme -archivePath ~/Downloads/bookshop_dev.xcarchive</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-5-导出-IPA\"><a href=\"#2-5-导出-IPA\" class=\"headerlink\" title=\"2.5 导出 IPA\"></a>2.5 导出 IPA</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -exportArchive -archivePath ~/Downloads/bookshop_dev.scarchive -exportPath ~/Downloads -exportOptionsPlist ~/Downloads/ExportOptions.plist</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-1-ExportOptions-plist\"><a href=\"#2-5-1-ExportOptions-plist\" class=\"headerlink\" title=\"2.5.1  ExportOptions.plist\"></a>2.5.1  ExportOptions.plist</h3><p>这个文件允许在打IPA包的时候，指定一些配置选项。一般在Xcode 打包的时候，有个 Addtional Option 下面可以勾选这个选项，勾选后，导出的包里面就有这个文件。</p>\n<p>自动签名类型的 ExportOptions.plist：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">plist</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class=\"meta-string\">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plist</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>compileBitcode<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>method<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>ad-hoc<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>signingStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>automatic<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>stripSwiftSymbols<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>teamID<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>YourTeamID<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>thinning<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span><span class=\"symbol\">&amp;lt;</span>none<span class=\"symbol\">&amp;gt;</span><span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>手动签名的 ExportOptions.plist：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">plist</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class=\"meta-string\">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plist</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>compileBitcode<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>method<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>ad-hoc<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>provisioningProfiles<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>AppBundleID<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AppProvisioningProfileNameInAppleDeveloperAccount<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>AppBundleID.NotificationServiceExtension<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AppBundleID<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>signingCertificate<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>iPhone Distribution<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>signingStyle<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>manual<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>stripSwiftSymbols<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>teamID<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>YourTeamID<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>thinning<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span><span class=\"symbol\">&amp;lt;</span>none<span class=\"symbol\">&amp;gt;</span><span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-一个打包脚本\"><a href=\"#3-一个打包脚本\" class=\"headerlink\" title=\"3. 一个打包脚本\"></a>3. 一个打包脚本</h2><h3 id=\"3-1-显示项目信息\"><a href=\"#3-1-显示项目信息\" class=\"headerlink\" title=\"3.1 显示项目信息\"></a>3.1 显示项目信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -list</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-打包\"><a href=\"#3-2-打包\" class=\"headerlink\" title=\"3.2 打包\"></a>3.2 打包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild clean -workspace SUMusic.xcworkspace -scheme SUMusic</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild build -workspace SUMusic.xcworkspace -scheme SUMusic</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild archive -workspace SUMusic.xcworkspace -scheme SUMusic -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -exportArchive -archivePath ~/Desktop/Packages/SUMusic/SUMusic.xcarchive -exportPath ~/Desktop/Packages/SUMusic/ -exportOptionsPlist ~/Desktop/Packages/SUMusic/ExportOptions.plist -allowProvisioningUpdates</span><br></pre></td></tr></table></figure>\n"},{"title":"iOS之CI集成","abbrlink":"a4334695","date":"2021-04-20T13:36:02.000Z","_content":"## 1. Shell\n\n## 2. AppleScript\n\n## 3. Jenkins\n\n## 4. XcodeServer\n\n## 5. 禅道\n","source":"_posts/iOS/ProjectManager/CI.md","raw":"---\ntitle: iOS之CI集成\nabbrlink: a4334695\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. Shell\n\n## 2. AppleScript\n\n## 3. Jenkins\n\n## 4. XcodeServer\n\n## 5. 禅道\n","slug":"iOS/ProjectManager/CI","published":1,"updated":"2021-07-29T06:46:00.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2j002ciu9kbl6g22ym","content":"<h2 id=\"1-Shell\"><a href=\"#1-Shell\" class=\"headerlink\" title=\"1. Shell\"></a>1. Shell</h2><h2 id=\"2-AppleScript\"><a href=\"#2-AppleScript\" class=\"headerlink\" title=\"2. AppleScript\"></a>2. AppleScript</h2><h2 id=\"3-Jenkins\"><a href=\"#3-Jenkins\" class=\"headerlink\" title=\"3. Jenkins\"></a>3. Jenkins</h2><h2 id=\"4-XcodeServer\"><a href=\"#4-XcodeServer\" class=\"headerlink\" title=\"4. XcodeServer\"></a>4. XcodeServer</h2><h2 id=\"5-禅道\"><a href=\"#5-禅道\" class=\"headerlink\" title=\"5. 禅道\"></a>5. 禅道</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Shell\"><a href=\"#1-Shell\" class=\"headerlink\" title=\"1. Shell\"></a>1. Shell</h2><h2 id=\"2-AppleScript\"><a href=\"#2-AppleScript\" class=\"headerlink\" title=\"2. AppleScript\"></a>2. AppleScript</h2><h2 id=\"3-Jenkins\"><a href=\"#3-Jenkins\" class=\"headerlink\" title=\"3. Jenkins\"></a>3. Jenkins</h2><h2 id=\"4-XcodeServer\"><a href=\"#4-XcodeServer\" class=\"headerlink\" title=\"4. XcodeServer\"></a>4. XcodeServer</h2><h2 id=\"5-禅道\"><a href=\"#5-禅道\" class=\"headerlink\" title=\"5. 禅道\"></a>5. 禅道</h2>"},{"title":"iOS 项目管理之 xcconfig","abbrlink":"cd33d51f","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [xcconfig（环境变量） 的使用](https://blog.csdn.net/weixin_45390999/article/details/104481185)\n\n## 2. [The Unofficial Guide to xcconfig files](https://pewpewthespells.com/blog/xcconfig_guide.html)\n","source":"_posts/iOS/ProjectManager/EnvironmentsVaraible.md","raw":"---\ntitle: iOS 项目管理之 xcconfig\nabbrlink: cd33d51f\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [xcconfig（环境变量） 的使用](https://blog.csdn.net/weixin_45390999/article/details/104481185)\n\n## 2. [The Unofficial Guide to xcconfig files](https://pewpewthespells.com/blog/xcconfig_guide.html)\n","slug":"iOS/ProjectManager/EnvironmentsVaraible","published":1,"updated":"2021-09-16T06:42:30.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2j002diu9k259vbekz","content":"<h2 id=\"1-xcconfig（环境变量）-的使用\"><a href=\"#1-xcconfig（环境变量）-的使用\" class=\"headerlink\" title=\"1. xcconfig（环境变量） 的使用\"></a>1. <a href=\"https://blog.csdn.net/weixin_45390999/article/details/104481185\">xcconfig（环境变量） 的使用</a></h2><h2 id=\"2-The-Unofficial-Guide-to-xcconfig-files\"><a href=\"#2-The-Unofficial-Guide-to-xcconfig-files\" class=\"headerlink\" title=\"2. The Unofficial Guide to xcconfig files\"></a>2. <a href=\"https://pewpewthespells.com/blog/xcconfig_guide.html\">The Unofficial Guide to xcconfig files</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-xcconfig（环境变量）-的使用\"><a href=\"#1-xcconfig（环境变量）-的使用\" class=\"headerlink\" title=\"1. xcconfig（环境变量） 的使用\"></a>1. <a href=\"https://blog.csdn.net/weixin_45390999/article/details/104481185\">xcconfig（环境变量） 的使用</a></h2><h2 id=\"2-The-Unofficial-Guide-to-xcconfig-files\"><a href=\"#2-The-Unofficial-Guide-to-xcconfig-files\" class=\"headerlink\" title=\"2. The Unofficial Guide to xcconfig files\"></a>2. <a href=\"https://pewpewthespells.com/blog/xcconfig_guide.html\">The Unofficial Guide to xcconfig files</a></h2>"},{"title":"iOS项目管理之杂项","abbrlink":"afb1c928","date":"2021-04-20T13:36:02.000Z","_content":"## 1. fir.im\n\n上传至fir\n\n```shell\nfir publish ${HOME}/Desktop/Package/${IPA_NAME} -Q -T 9cfdfbd241d63197a3b83a608708e16f --password sumian\n```\n\n## 2. 蒲公英\n\n上传至蒲公英\n\n```shell\n#curl -F \"file=@${IPA_PATH}\" \n      -F \"uKey=******************2f5e99f3a7495\" \n      -F \"_api_key  - 0 : 85 =******************eb2d5cb44d93183\" http://www.pgyer.com/apiv1/app/upload\n```\n\n## 3. 自建服务器交付环境\n\n* 打包\n\n  版本、scheme、target、workspace、profile、签名、archive、IPA\n\n* 上传\n* 下载\n* 多ID分发[批量IPA包管理]\n","source":"_posts/iOS/ProjectManager/Fir&PGYing.md","raw":"---\ntitle: iOS项目管理之杂项\nabbrlink: afb1c928\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. fir.im\n\n上传至fir\n\n```shell\nfir publish ${HOME}/Desktop/Package/${IPA_NAME} -Q -T 9cfdfbd241d63197a3b83a608708e16f --password sumian\n```\n\n## 2. 蒲公英\n\n上传至蒲公英\n\n```shell\n#curl -F \"file=@${IPA_PATH}\" \n      -F \"uKey=******************2f5e99f3a7495\" \n      -F \"_api_key  - 0 : 85 =******************eb2d5cb44d93183\" http://www.pgyer.com/apiv1/app/upload\n```\n\n## 3. 自建服务器交付环境\n\n* 打包\n\n  版本、scheme、target、workspace、profile、签名、archive、IPA\n\n* 上传\n* 下载\n* 多ID分发[批量IPA包管理]\n","slug":"iOS/ProjectManager/Fir&PGYing","published":1,"updated":"2021-07-29T06:46:00.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2k002eiu9kezub8j5n","content":"<h2 id=\"1-fir-im\"><a href=\"#1-fir-im\" class=\"headerlink\" title=\"1. fir.im\"></a>1. fir.im</h2><p>上传至fir</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fir publish $&#123;HOME&#125;/Desktop/Package/$&#123;IPA_NAME&#125; -Q -T 9cfdfbd241d63197a3b83a608708e16f --password sumian</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-蒲公英\"><a href=\"#2-蒲公英\" class=\"headerlink\" title=\"2. 蒲公英\"></a>2. 蒲公英</h2><p>上传至蒲公英</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">curl -F <span class=\"string\">&quot;file=@<span class=\"variable\">$&#123;IPA_PATH&#125;</span>&quot;</span></span> </span><br><span class=\"line\">      -F &quot;uKey=******************2f5e99f3a7495&quot; </span><br><span class=\"line\">      -F &quot;_api_key  - 0 : 85 =******************eb2d5cb44d93183&quot; http://www.pgyer.com/apiv1/app/upload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-自建服务器交付环境\"><a href=\"#3-自建服务器交付环境\" class=\"headerlink\" title=\"3. 自建服务器交付环境\"></a>3. 自建服务器交付环境</h2><ul>\n<li><p>打包</p>\n<p>版本、scheme、target、workspace、profile、签名、archive、IPA</p>\n</li>\n<li><p>上传</p>\n</li>\n<li><p>下载</p>\n</li>\n<li><p>多ID分发[批量IPA包管理]</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-fir-im\"><a href=\"#1-fir-im\" class=\"headerlink\" title=\"1. fir.im\"></a>1. fir.im</h2><p>上传至fir</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fir publish $&#123;HOME&#125;/Desktop/Package/$&#123;IPA_NAME&#125; -Q -T 9cfdfbd241d63197a3b83a608708e16f --password sumian</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-蒲公英\"><a href=\"#2-蒲公英\" class=\"headerlink\" title=\"2. 蒲公英\"></a>2. 蒲公英</h2><p>上传至蒲公英</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">curl -F <span class=\"string\">&quot;file=@<span class=\"variable\">$&#123;IPA_PATH&#125;</span>&quot;</span></span> </span><br><span class=\"line\">      -F &quot;uKey=******************2f5e99f3a7495&quot; </span><br><span class=\"line\">      -F &quot;_api_key  - 0 : 85 =******************eb2d5cb44d93183&quot; http://www.pgyer.com/apiv1/app/upload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-自建服务器交付环境\"><a href=\"#3-自建服务器交付环境\" class=\"headerlink\" title=\"3. 自建服务器交付环境\"></a>3. 自建服务器交付环境</h2><ul>\n<li><p>打包</p>\n<p>版本、scheme、target、workspace、profile、签名、archive、IPA</p>\n</li>\n<li><p>上传</p>\n</li>\n<li><p>下载</p>\n</li>\n<li><p>多ID分发[批量IPA包管理]</p>\n</li>\n</ul>\n"},{"title":"项目管理","abbrlink":41767,"date":"2021-04-20T13:36:02.000Z","_content":"\n## 2. 应用管理\n\n### 2.1 [应用路径管理](https://wincent.com/wiki/%40executable_path%2C_%40load_path_and_%40rpath)\n\n### 2.2 [Dynamic linker environment variables](https://developer.apple.com/library/archive/technotes/tn2239/_index.html#//apple_ref/doc/uid/DTS40010638-CH1-SUBSECTION21)\n\n### 2.3 [调试](https://developer.apple.com/support/debugging/)\n","source":"_posts/iOS/ProjectManager/ProjectManager.md","raw":"---\ntitle: 项目管理\nabbrlink: 41767\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 2. 应用管理\n\n### 2.1 [应用路径管理](https://wincent.com/wiki/%40executable_path%2C_%40load_path_and_%40rpath)\n\n### 2.2 [Dynamic linker environment variables](https://developer.apple.com/library/archive/technotes/tn2239/_index.html#//apple_ref/doc/uid/DTS40010638-CH1-SUBSECTION21)\n\n### 2.3 [调试](https://developer.apple.com/support/debugging/)\n","slug":"iOS/ProjectManager/ProjectManager","published":1,"updated":"2021-09-22T06:56:40.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2k002fiu9k3uqfb0bg","content":"<h2 id=\"2-应用管理\"><a href=\"#2-应用管理\" class=\"headerlink\" title=\"2. 应用管理\"></a>2. 应用管理</h2><h3 id=\"2-1-应用路径管理\"><a href=\"#2-1-应用路径管理\" class=\"headerlink\" title=\"2.1 应用路径管理\"></a>2.1 <a href=\"https://wincent.com/wiki/%40executable_path%2C_%40load_path_and_%40rpath\">应用路径管理</a></h3><h3 id=\"2-2-Dynamic-linker-environment-variables\"><a href=\"#2-2-Dynamic-linker-environment-variables\" class=\"headerlink\" title=\"2.2 Dynamic linker environment variables\"></a>2.2 <a href=\"https://developer.apple.com/library/archive/technotes/tn2239/_index.html#//apple_ref/doc/uid/DTS40010638-CH1-SUBSECTION21\">Dynamic linker environment variables</a></h3><h3 id=\"2-3-调试\"><a href=\"#2-3-调试\" class=\"headerlink\" title=\"2.3 调试\"></a>2.3 <a href=\"https://developer.apple.com/support/debugging/\">调试</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2-应用管理\"><a href=\"#2-应用管理\" class=\"headerlink\" title=\"2. 应用管理\"></a>2. 应用管理</h2><h3 id=\"2-1-应用路径管理\"><a href=\"#2-1-应用路径管理\" class=\"headerlink\" title=\"2.1 应用路径管理\"></a>2.1 <a href=\"https://wincent.com/wiki/%40executable_path%2C_%40load_path_and_%40rpath\">应用路径管理</a></h3><h3 id=\"2-2-Dynamic-linker-environment-variables\"><a href=\"#2-2-Dynamic-linker-environment-variables\" class=\"headerlink\" title=\"2.2 Dynamic linker environment variables\"></a>2.2 <a href=\"https://developer.apple.com/library/archive/technotes/tn2239/_index.html#//apple_ref/doc/uid/DTS40010638-CH1-SUBSECTION21\">Dynamic linker environment variables</a></h3><h3 id=\"2-3-调试\"><a href=\"#2-3-调试\" class=\"headerlink\" title=\"2.3 调试\"></a>2.3 <a href=\"https://developer.apple.com/support/debugging/\">调试</a></h3>"},{"title":"Tapd","date":"2021-07-29T06:46:00.615Z","abbrlink":"49de3a49","_content":"\n## 1. [Tapd](https://www.tapd.cn/help/show#1120003271001000028)\n","source":"_posts/iOS/ProjectManager/Tapd.md","raw":"---\ntitle: Tapd\ndate: ':year-:month-:day-'\nabbrlink: 49de3a49\n---\n\n## 1. [Tapd](https://www.tapd.cn/help/show#1120003271001000028)\n","slug":"iOS/ProjectManager/Tapd","published":1,"updated":"2021-07-29T06:46:00.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2l002giu9k2kphazkb","content":"<h2 id=\"1-Tapd\"><a href=\"#1-Tapd\" class=\"headerlink\" title=\"1. Tapd\"></a>1. <a href=\"https://www.tapd.cn/help/show#1120003271001000028\">Tapd</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Tapd\"><a href=\"#1-Tapd\" class=\"headerlink\" title=\"1. Tapd\"></a>1. <a href=\"https://www.tapd.cn/help/show#1120003271001000028\">Tapd</a></h2>"},{"title":"项目管理之禅道","abbrlink":"21181254","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/ProjectManager/ZenTao.md","raw":"---\ntitle: 项目管理之禅道\nabbrlink: '21181254'\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/ProjectManager/ZenTao","published":1,"updated":"2021-07-29T06:46:00.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2l002hiu9kgg3z5dth","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Charles","abbrlink":"f9078667","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Tools/Charles.md","raw":"---\ntitle: Charles\nabbrlink: f9078667\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Tools/Charles","published":1,"updated":"2021-07-29T06:45:59.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2m002iiu9k9pxi41v9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Cocoapod","abbrlink":"551d911c","date":"2021-04-20T13:36:02.000Z","_content":"## 1. [cocoapod 官网](https://guides.cocoapods.org/)\n\n## 2. cocoapod 之私有化仓库\n\n1. [iOS 私有化 pod](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)\n\n2. [Swift创建CocoaPod【转】](https://my.oschina.net/are1OfBlog/blog/488939)\n\n3. [Swift创建CocoaPod](https://www.raywenderlich.com/5823-how-to-create-a-cocoapod-in-swift)\n\n4. [Swift 如何建立自己的 CocoaPod 库](https://www.jianshu.com/p/777b0755480c)\n\n5. [模块化之路（cocoapod VS framework）](https://www.jianshu.com/p/9d49216682f4)\n\n## 3. cocoapod 开源仓库\n","source":"_posts/iOS/Tools/CocoapodMaker.md","raw":"---\ntitle: Cocoapod\nabbrlink: 551d911c\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. [cocoapod 官网](https://guides.cocoapods.org/)\n\n## 2. cocoapod 之私有化仓库\n\n1. [iOS 私有化 pod](http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/)\n\n2. [Swift创建CocoaPod【转】](https://my.oschina.net/are1OfBlog/blog/488939)\n\n3. [Swift创建CocoaPod](https://www.raywenderlich.com/5823-how-to-create-a-cocoapod-in-swift)\n\n4. [Swift 如何建立自己的 CocoaPod 库](https://www.jianshu.com/p/777b0755480c)\n\n5. [模块化之路（cocoapod VS framework）](https://www.jianshu.com/p/9d49216682f4)\n\n## 3. cocoapod 开源仓库\n","slug":"iOS/Tools/CocoapodMaker","published":1,"updated":"2021-07-29T06:45:59.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2n002jiu9k12edelzb","content":"<h2 id=\"1-cocoapod-官网\"><a href=\"#1-cocoapod-官网\" class=\"headerlink\" title=\"1. cocoapod 官网\"></a>1. <a href=\"https://guides.cocoapods.org/\">cocoapod 官网</a></h2><h2 id=\"2-cocoapod-之私有化仓库\"><a href=\"#2-cocoapod-之私有化仓库\" class=\"headerlink\" title=\"2. cocoapod 之私有化仓库\"></a>2. cocoapod 之私有化仓库</h2><ol>\n<li><p><a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\">iOS 私有化 pod</a></p>\n</li>\n<li><p><a href=\"https://my.oschina.net/are1OfBlog/blog/488939\">Swift创建CocoaPod【转】</a></p>\n</li>\n<li><p><a href=\"https://www.raywenderlich.com/5823-how-to-create-a-cocoapod-in-swift\">Swift创建CocoaPod</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/777b0755480c\">Swift 如何建立自己的 CocoaPod 库</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/9d49216682f4\">模块化之路（cocoapod VS framework）</a></p>\n</li>\n</ol>\n<h2 id=\"3-cocoapod-开源仓库\"><a href=\"#3-cocoapod-开源仓库\" class=\"headerlink\" title=\"3. cocoapod 开源仓库\"></a>3. cocoapod 开源仓库</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-cocoapod-官网\"><a href=\"#1-cocoapod-官网\" class=\"headerlink\" title=\"1. cocoapod 官网\"></a>1. <a href=\"https://guides.cocoapods.org/\">cocoapod 官网</a></h2><h2 id=\"2-cocoapod-之私有化仓库\"><a href=\"#2-cocoapod-之私有化仓库\" class=\"headerlink\" title=\"2. cocoapod 之私有化仓库\"></a>2. cocoapod 之私有化仓库</h2><ol>\n<li><p><a href=\"http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/\">iOS 私有化 pod</a></p>\n</li>\n<li><p><a href=\"https://my.oschina.net/are1OfBlog/blog/488939\">Swift创建CocoaPod【转】</a></p>\n</li>\n<li><p><a href=\"https://www.raywenderlich.com/5823-how-to-create-a-cocoapod-in-swift\">Swift创建CocoaPod</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/777b0755480c\">Swift 如何建立自己的 CocoaPod 库</a></p>\n</li>\n<li><p><a href=\"https://www.jianshu.com/p/9d49216682f4\">模块化之路（cocoapod VS framework）</a></p>\n</li>\n</ol>\n<h2 id=\"3-cocoapod-开源仓库\"><a href=\"#3-cocoapod-开源仓库\" class=\"headerlink\" title=\"3. cocoapod 开源仓库\"></a>3. cocoapod 开源仓库</h2>"},{"title":"Cocoapod 指南","abbrlink":"cbdca039","date":"2021-04-20T13:36:02.000Z","_content":"## 一、pod 公开库\n\n### 1. 索引库\n\n#### 1.1 添加索引库\n\n```shell\npod repo add WTSpecs https://coding.net/wtlucky/WTSpecs.git\n```\n\n#### 1.2 删除索引库\n\n```shell\npod repo remove WTSpecs\n```\n\n#### 2. pod库\n\n##### 2.1 创建pod库\n\n```shell\npod lib create podTestLibrary\n```\n\n##### 2.2 添加到远程\n\n```shell\ngit add .\ngit commit -s -m \"Initial Commit of Library\"\ngit remote add origin git@coding.net:wtlucky/podTestLibrary.git\ngit push origin master\n```\n\n##### 2.3 打tag\n\n```shell\ngit tag -a 0.1.0 -m \"first release\"\ngit push --tags / git push origin tag 0.1.0\n```\n\n##### 2.4 修改podspec文件\n\n##### 2.5 检验pod库、podspec\n\n```shell\npod lib lint\n```\n\n##### 2.6 提交pod库\n\n```shell\npod repo push WTSpecs PodTestLibrary.podspec  #前面是本地Repo名字 后面是podspec名字\n```\n\n##### 2.7 检索pod库\n\n```shell\npod search PodTestLibrary\n```\n\n##### 2.8 使用pod库\n\n```shel\npod 'PodTestLibrary', '~> 0.1.0'\n```\n  \n## 二、私有库\n\n### 1. 检验\n  \n```shell\npod lib lint --allow-warnings --sources=<https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git>\n```\n\n### 2. 远程检验\n  \n```shell\npod spec lint --allow-warnings --sources=<https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git>\n```\n\n### 3. 提交\n\n```shell\npod repo push sumian sm_ios_base.podspec --allow-warnings --sources='http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs'\n```\n\n## 3. pod 命令\n\n```shell\nUsage:\n\n    $ pod COMMAND\n\n      CocoaPods, the Cocoa library package manager.\n\nCommands:\n\n    + cache         Manipulate the CocoaPods cache\n    + deintegrate   Deintegrate CocoaPods from your project\n    + env           Display pod environment\n    + init          Generate a Podfile for the current directory\n    + install       Install project dependencies according to versions from a\n                    Podfile.lock\n    + ipc           Inter-process communication\n    + lib           Develop pods\n    + list          List pods\n    + outdated      Show outdated project dependencies\n    + package       Package a podspec into a static library.\n    + plugins       Show available CocoaPods plugins\n    + repo          Manage spec-repositories\n    + search        Search for pods\n    + setup         Setup the CocoaPods environment\n    + spec          Manage pod specs\n    + trunk         Interact with the CocoaPods API (e.g. publishing new specs)\n    + try           Try a Pod!\n    + update        Update outdated project dependencies and create new Podfile.lock\n\nOptions:\n\n    --silent        Show nothing\n    --version       Show the version of the tool\n    --verbose       Show more debugging information\n    --no-ansi       Show output without ANSI codes\n    --help          Show help banner of specified command\n```\n\n## 4. pod lib lint 命令\n\n```shell\nUsage:\n\n    $ pod lib lint\n\n      Validates the Pod using the files in the working directory.\n\nOptions:\n\n    --quick                                           Lint skips checks that would\n                                                      require to download and build\n                                                      the spec\n    --allow-warnings                                  Lint validates even if warnings\n                                                      are present\n    --subspec=NAME                                    Lint validates only the given\n                                                      subspec\n    --no-subspecs                                     Lint skips validation of\n                                                      subspecs\n    --no-clean                                        Lint leaves the build directory\n                                                      intact for inspection\n    --fail-fast                                       Lint stops on the first failing\n                                                      platform or subspec\n    --use-libraries                                   Lint uses static libraries to\n                                                      install the spec\n    --use-modular-headers                             Lint uses modular headers during\n                                                      installation\n    --sources=https://github.com/artsy/Specs,master   The sources from which to pull\n                                                      dependent pods (defaults to\n                                                      https://github.com/CocoaPods/Specs.git).\n                                                      Multiple sources must be\n                                                      comma-delimited.\n    --platforms=ios,macos                             Lint against specific\n                                                      platforms(defaults to all\n                                                      platforms supported by the\n                                                      podspec).Multiple platforms must\n                                                      be comma-delimited\n    --private                                         Lint skips checks that apply\n                                                      only to public specs\n    --swift-version=VERSION                           The SWIFT_VERSION that should be\n                                                      used to lint the spec. This\n                                                      takes precedence over a\n                                                      .swift-version file.\n    --skip-import-validation                          Lint skips validating that the\n                                                      pod can be imported\n    --skip-tests                                      Lint skips building and running\n                                                      tests during validation\n    --silent                                          Show nothing\n    --verbose                                         Show more debugging information\n    --no-ansi                                         Show output without ANSI codes\n    --help                                            Show help banner of specified\n                                                      command\n```\n\n## 5. pod 修改工程配置\n\n```shell\npost_install do |installer_representation|\n\n    installer_representation.pods_project.targets.each do |target|\n        target.build_configurations.each do |config|\n            #去警告\n            config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'\n            #判断scheme\n            if config.name.include?(\"SchemeAppTest_Release\")\n                #添加scheme对应的预编译宏\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTRELEASE=3'\n            end\n            if config.name.include?(\"SchemeAppTest_Debug\")\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTDEBUG=2'\n                #指定scheme的调试模式可见变量\n                config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'\n                #某些情况由于编译器不支持无法debug（可选）\n                config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'\n            end\n          end\n    end    \nend\n  ```\n","source":"_posts/iOS/Tools/CocoapodGuidance.md","raw":"---\ntitle: Cocoapod 指南\nabbrlink: cbdca039\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 一、pod 公开库\n\n### 1. 索引库\n\n#### 1.1 添加索引库\n\n```shell\npod repo add WTSpecs https://coding.net/wtlucky/WTSpecs.git\n```\n\n#### 1.2 删除索引库\n\n```shell\npod repo remove WTSpecs\n```\n\n#### 2. pod库\n\n##### 2.1 创建pod库\n\n```shell\npod lib create podTestLibrary\n```\n\n##### 2.2 添加到远程\n\n```shell\ngit add .\ngit commit -s -m \"Initial Commit of Library\"\ngit remote add origin git@coding.net:wtlucky/podTestLibrary.git\ngit push origin master\n```\n\n##### 2.3 打tag\n\n```shell\ngit tag -a 0.1.0 -m \"first release\"\ngit push --tags / git push origin tag 0.1.0\n```\n\n##### 2.4 修改podspec文件\n\n##### 2.5 检验pod库、podspec\n\n```shell\npod lib lint\n```\n\n##### 2.6 提交pod库\n\n```shell\npod repo push WTSpecs PodTestLibrary.podspec  #前面是本地Repo名字 后面是podspec名字\n```\n\n##### 2.7 检索pod库\n\n```shell\npod search PodTestLibrary\n```\n\n##### 2.8 使用pod库\n\n```shel\npod 'PodTestLibrary', '~> 0.1.0'\n```\n  \n## 二、私有库\n\n### 1. 检验\n  \n```shell\npod lib lint --allow-warnings --sources=<https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git>\n```\n\n### 2. 远程检验\n  \n```shell\npod spec lint --allow-warnings --sources=<https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git>\n```\n\n### 3. 提交\n\n```shell\npod repo push sumian sm_ios_base.podspec --allow-warnings --sources='http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs'\n```\n\n## 3. pod 命令\n\n```shell\nUsage:\n\n    $ pod COMMAND\n\n      CocoaPods, the Cocoa library package manager.\n\nCommands:\n\n    + cache         Manipulate the CocoaPods cache\n    + deintegrate   Deintegrate CocoaPods from your project\n    + env           Display pod environment\n    + init          Generate a Podfile for the current directory\n    + install       Install project dependencies according to versions from a\n                    Podfile.lock\n    + ipc           Inter-process communication\n    + lib           Develop pods\n    + list          List pods\n    + outdated      Show outdated project dependencies\n    + package       Package a podspec into a static library.\n    + plugins       Show available CocoaPods plugins\n    + repo          Manage spec-repositories\n    + search        Search for pods\n    + setup         Setup the CocoaPods environment\n    + spec          Manage pod specs\n    + trunk         Interact with the CocoaPods API (e.g. publishing new specs)\n    + try           Try a Pod!\n    + update        Update outdated project dependencies and create new Podfile.lock\n\nOptions:\n\n    --silent        Show nothing\n    --version       Show the version of the tool\n    --verbose       Show more debugging information\n    --no-ansi       Show output without ANSI codes\n    --help          Show help banner of specified command\n```\n\n## 4. pod lib lint 命令\n\n```shell\nUsage:\n\n    $ pod lib lint\n\n      Validates the Pod using the files in the working directory.\n\nOptions:\n\n    --quick                                           Lint skips checks that would\n                                                      require to download and build\n                                                      the spec\n    --allow-warnings                                  Lint validates even if warnings\n                                                      are present\n    --subspec=NAME                                    Lint validates only the given\n                                                      subspec\n    --no-subspecs                                     Lint skips validation of\n                                                      subspecs\n    --no-clean                                        Lint leaves the build directory\n                                                      intact for inspection\n    --fail-fast                                       Lint stops on the first failing\n                                                      platform or subspec\n    --use-libraries                                   Lint uses static libraries to\n                                                      install the spec\n    --use-modular-headers                             Lint uses modular headers during\n                                                      installation\n    --sources=https://github.com/artsy/Specs,master   The sources from which to pull\n                                                      dependent pods (defaults to\n                                                      https://github.com/CocoaPods/Specs.git).\n                                                      Multiple sources must be\n                                                      comma-delimited.\n    --platforms=ios,macos                             Lint against specific\n                                                      platforms(defaults to all\n                                                      platforms supported by the\n                                                      podspec).Multiple platforms must\n                                                      be comma-delimited\n    --private                                         Lint skips checks that apply\n                                                      only to public specs\n    --swift-version=VERSION                           The SWIFT_VERSION that should be\n                                                      used to lint the spec. This\n                                                      takes precedence over a\n                                                      .swift-version file.\n    --skip-import-validation                          Lint skips validating that the\n                                                      pod can be imported\n    --skip-tests                                      Lint skips building and running\n                                                      tests during validation\n    --silent                                          Show nothing\n    --verbose                                         Show more debugging information\n    --no-ansi                                         Show output without ANSI codes\n    --help                                            Show help banner of specified\n                                                      command\n```\n\n## 5. pod 修改工程配置\n\n```shell\npost_install do |installer_representation|\n\n    installer_representation.pods_project.targets.each do |target|\n        target.build_configurations.each do |config|\n            #去警告\n            config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'\n            #判断scheme\n            if config.name.include?(\"SchemeAppTest_Release\")\n                #添加scheme对应的预编译宏\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTRELEASE=3'\n            end\n            if config.name.include?(\"SchemeAppTest_Debug\")\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'SCHEMEAPPTESTDEBUG=2'\n                #指定scheme的调试模式可见变量\n                config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'\n                #某些情况由于编译器不支持无法debug（可选）\n                config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'\n            end\n          end\n    end    \nend\n  ```\n","slug":"iOS/Tools/CocoapodGuidance","published":1,"updated":"2021-07-29T06:45:59.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2n002kiu9kcdt2dcsb","content":"<h2 id=\"一、pod-公开库\"><a href=\"#一、pod-公开库\" class=\"headerlink\" title=\"一、pod 公开库\"></a>一、pod 公开库</h2><h3 id=\"1-索引库\"><a href=\"#1-索引库\" class=\"headerlink\" title=\"1. 索引库\"></a>1. 索引库</h3><h4 id=\"1-1-添加索引库\"><a href=\"#1-1-添加索引库\" class=\"headerlink\" title=\"1.1 添加索引库\"></a>1.1 添加索引库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod repo add WTSpecs https://coding.net/wtlucky/WTSpecs.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-删除索引库\"><a href=\"#1-2-删除索引库\" class=\"headerlink\" title=\"1.2 删除索引库\"></a>1.2 删除索引库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod repo remove WTSpecs</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-pod库\"><a href=\"#2-pod库\" class=\"headerlink\" title=\"2. pod库\"></a>2. pod库</h4><h5 id=\"2-1-创建pod库\"><a href=\"#2-1-创建pod库\" class=\"headerlink\" title=\"2.1 创建pod库\"></a>2.1 创建pod库</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod lib create podTestLibrary</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-添加到远程\"><a href=\"#2-2-添加到远程\" class=\"headerlink\" title=\"2.2 添加到远程\"></a>2.2 添加到远程</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -s -m &quot;Initial Commit of Library&quot;</span><br><span class=\"line\">git remote add origin git@coding.net:wtlucky/podTestLibrary.git</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-打tag\"><a href=\"#2-3-打tag\" class=\"headerlink\" title=\"2.3 打tag\"></a>2.3 打tag</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a 0.1.0 -m &quot;first release&quot;</span><br><span class=\"line\">git push --tags / git push origin tag 0.1.0</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-4-修改podspec文件\"><a href=\"#2-4-修改podspec文件\" class=\"headerlink\" title=\"2.4 修改podspec文件\"></a>2.4 修改podspec文件</h5><h5 id=\"2-5-检验pod库、podspec\"><a href=\"#2-5-检验pod库、podspec\" class=\"headerlink\" title=\"2.5 检验pod库、podspec\"></a>2.5 检验pod库、podspec</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod lib lint</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-6-提交pod库\"><a href=\"#2-6-提交pod库\" class=\"headerlink\" title=\"2.6 提交pod库\"></a>2.6 提交pod库</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod repo push WTSpecs PodTestLibrary.podspec  #前面是本地Repo名字 后面是podspec名字</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-7-检索pod库\"><a href=\"#2-7-检索pod库\" class=\"headerlink\" title=\"2.7 检索pod库\"></a>2.7 检索pod库</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod search PodTestLibrary</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-8-使用pod库\"><a href=\"#2-8-使用pod库\" class=\"headerlink\" title=\"2.8 使用pod库\"></a>2.8 使用pod库</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;PodTestLibrary&#x27;, &#x27;~&gt; 0.1.0&#x27;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、私有库\"><a href=\"#二、私有库\" class=\"headerlink\" title=\"二、私有库\"></a>二、私有库</h2><h3 id=\"1-检验\"><a href=\"#1-检验\" class=\"headerlink\" title=\"1. 检验\"></a>1. 检验</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod lib lint --allow-warnings --sources=&lt;https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-远程检验\"><a href=\"#2-远程检验\" class=\"headerlink\" title=\"2. 远程检验\"></a>2. 远程检验</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint --allow-warnings --sources=&lt;https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-提交\"><a href=\"#3-提交\" class=\"headerlink\" title=\"3. 提交\"></a>3. 提交</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod repo push sumian sm_ios_base.podspec --allow-warnings --sources=&#x27;http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-pod-命令\"><a href=\"#3-pod-命令\" class=\"headerlink\" title=\"3. pod 命令\"></a>3. pod 命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">    $ pod COMMAND</span><br><span class=\"line\"></span><br><span class=\"line\">      CocoaPods, the Cocoa library package manager.</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\"></span><br><span class=\"line\">    + cache         Manipulate the CocoaPods cache</span><br><span class=\"line\">    + deintegrate   Deintegrate CocoaPods from your project</span><br><span class=\"line\">    + env           Display pod environment</span><br><span class=\"line\">    + init          Generate a Podfile for the current directory</span><br><span class=\"line\">    + install       Install project dependencies according to versions from a</span><br><span class=\"line\">                    Podfile.lock</span><br><span class=\"line\">    + ipc           Inter-process communication</span><br><span class=\"line\">    + lib           Develop pods</span><br><span class=\"line\">    + list          List pods</span><br><span class=\"line\">    + outdated      Show outdated project dependencies</span><br><span class=\"line\">    + package       Package a podspec into a static library.</span><br><span class=\"line\">    + plugins       Show available CocoaPods plugins</span><br><span class=\"line\">    + repo          Manage spec-repositories</span><br><span class=\"line\">    + search        Search for pods</span><br><span class=\"line\">    + setup         Setup the CocoaPods environment</span><br><span class=\"line\">    + spec          Manage pod specs</span><br><span class=\"line\">    + trunk         Interact with the CocoaPods API (e.g. publishing new specs)</span><br><span class=\"line\">    + try           Try a Pod!</span><br><span class=\"line\">    + update        Update outdated project dependencies and create new Podfile.lock</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\"></span><br><span class=\"line\">    --silent        Show nothing</span><br><span class=\"line\">    --version       Show the version of the tool</span><br><span class=\"line\">    --verbose       Show more debugging information</span><br><span class=\"line\">    --no-ansi       Show output without ANSI codes</span><br><span class=\"line\">    --help          Show help banner of specified command</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-pod-lib-lint-命令\"><a href=\"#4-pod-lib-lint-命令\" class=\"headerlink\" title=\"4. pod lib lint 命令\"></a>4. pod lib lint 命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">    $ pod lib lint</span><br><span class=\"line\"></span><br><span class=\"line\">      Validates the Pod using the files in the working directory.</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\"></span><br><span class=\"line\">    --quick                                           Lint skips checks that would</span><br><span class=\"line\">                                                      require to download and build</span><br><span class=\"line\">                                                      the spec</span><br><span class=\"line\">    --allow-warnings                                  Lint validates even if warnings</span><br><span class=\"line\">                                                      are present</span><br><span class=\"line\">    --subspec=NAME                                    Lint validates only the given</span><br><span class=\"line\">                                                      subspec</span><br><span class=\"line\">    --no-subspecs                                     Lint skips validation of</span><br><span class=\"line\">                                                      subspecs</span><br><span class=\"line\">    --no-clean                                        Lint leaves the build directory</span><br><span class=\"line\">                                                      intact for inspection</span><br><span class=\"line\">    --fail-fast                                       Lint stops on the first failing</span><br><span class=\"line\">                                                      platform or subspec</span><br><span class=\"line\">    --use-libraries                                   Lint uses static libraries to</span><br><span class=\"line\">                                                      install the spec</span><br><span class=\"line\">    --use-modular-headers                             Lint uses modular headers during</span><br><span class=\"line\">                                                      installation</span><br><span class=\"line\">    --sources=https://github.com/artsy/Specs,master   The sources from which to pull</span><br><span class=\"line\">                                                      dependent pods (defaults to</span><br><span class=\"line\">                                                      https://github.com/CocoaPods/Specs.git).</span><br><span class=\"line\">                                                      Multiple sources must be</span><br><span class=\"line\">                                                      comma-delimited.</span><br><span class=\"line\">    --platforms=ios,macos                             Lint against specific</span><br><span class=\"line\">                                                      platforms(defaults to all</span><br><span class=\"line\">                                                      platforms supported by the</span><br><span class=\"line\">                                                      podspec).Multiple platforms must</span><br><span class=\"line\">                                                      be comma-delimited</span><br><span class=\"line\">    --private                                         Lint skips checks that apply</span><br><span class=\"line\">                                                      only to public specs</span><br><span class=\"line\">    --swift-version=VERSION                           The SWIFT_VERSION that should be</span><br><span class=\"line\">                                                      used to lint the spec. This</span><br><span class=\"line\">                                                      takes precedence over a</span><br><span class=\"line\">                                                      .swift-version file.</span><br><span class=\"line\">    --skip-import-validation                          Lint skips validating that the</span><br><span class=\"line\">                                                      pod can be imported</span><br><span class=\"line\">    --skip-tests                                      Lint skips building and running</span><br><span class=\"line\">                                                      tests during validation</span><br><span class=\"line\">    --silent                                          Show nothing</span><br><span class=\"line\">    --verbose                                         Show more debugging information</span><br><span class=\"line\">    --no-ansi                                         Show output without ANSI codes</span><br><span class=\"line\">    --help                                            Show help banner of specified</span><br><span class=\"line\">                                                      command</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-pod-修改工程配置\"><a href=\"#5-pod-修改工程配置\" class=\"headerlink\" title=\"5. pod 修改工程配置\"></a>5. pod 修改工程配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install do |installer_representation|</span><br><span class=\"line\"></span><br><span class=\"line\">    installer_representation.pods_project.targets.each do |target|</span><br><span class=\"line\">        target.build_configurations.each do |config|</span><br><span class=\"line\">            #去警告</span><br><span class=\"line\">            config.build_settings[&#x27;GCC_WARN_INHIBIT_ALL_WARNINGS&#x27;] = &#x27;YES&#x27;</span><br><span class=\"line\">            #判断scheme</span><br><span class=\"line\">            if config.name.include?(&quot;SchemeAppTest_Release&quot;)</span><br><span class=\"line\">                #添加scheme对应的预编译宏</span><br><span class=\"line\">                config.build_settings[&#x27;GCC_PREPROCESSOR_DEFINITIONS&#x27;] ||= [&#x27;$(inherited)&#x27;]</span><br><span class=\"line\">                config.build_settings[&#x27;GCC_PREPROCESSOR_DEFINITIONS&#x27;] &lt;&lt; &#x27;SCHEMEAPPTESTRELEASE=3&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            if config.name.include?(&quot;SchemeAppTest_Debug&quot;)</span><br><span class=\"line\">                config.build_settings[&#x27;GCC_PREPROCESSOR_DEFINITIONS&#x27;] ||= [&#x27;$(inherited)&#x27;]</span><br><span class=\"line\">                config.build_settings[&#x27;GCC_PREPROCESSOR_DEFINITIONS&#x27;] &lt;&lt; &#x27;SCHEMEAPPTESTDEBUG=2&#x27;</span><br><span class=\"line\">                #指定scheme的调试模式可见变量</span><br><span class=\"line\">                config.build_settings[&#x27;GCC_OPTIMIZATION_LEVEL&#x27;] = &#x27;0&#x27;</span><br><span class=\"line\">                #某些情况由于编译器不支持无法debug（可选）</span><br><span class=\"line\">                config.build_settings[&#x27;ONLY_ACTIVE_ARCH&#x27;] = &#x27;YES&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">          end</span><br><span class=\"line\">    end    </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、pod-公开库\"><a href=\"#一、pod-公开库\" class=\"headerlink\" title=\"一、pod 公开库\"></a>一、pod 公开库</h2><h3 id=\"1-索引库\"><a href=\"#1-索引库\" class=\"headerlink\" title=\"1. 索引库\"></a>1. 索引库</h3><h4 id=\"1-1-添加索引库\"><a href=\"#1-1-添加索引库\" class=\"headerlink\" title=\"1.1 添加索引库\"></a>1.1 添加索引库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod repo add WTSpecs https://coding.net/wtlucky/WTSpecs.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-删除索引库\"><a href=\"#1-2-删除索引库\" class=\"headerlink\" title=\"1.2 删除索引库\"></a>1.2 删除索引库</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod repo remove WTSpecs</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-pod库\"><a href=\"#2-pod库\" class=\"headerlink\" title=\"2. pod库\"></a>2. pod库</h4><h5 id=\"2-1-创建pod库\"><a href=\"#2-1-创建pod库\" class=\"headerlink\" title=\"2.1 创建pod库\"></a>2.1 创建pod库</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod lib create podTestLibrary</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-添加到远程\"><a href=\"#2-2-添加到远程\" class=\"headerlink\" title=\"2.2 添加到远程\"></a>2.2 添加到远程</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -s -m &quot;Initial Commit of Library&quot;</span><br><span class=\"line\">git remote add origin git@coding.net:wtlucky/podTestLibrary.git</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-打tag\"><a href=\"#2-3-打tag\" class=\"headerlink\" title=\"2.3 打tag\"></a>2.3 打tag</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a 0.1.0 -m &quot;first release&quot;</span><br><span class=\"line\">git push --tags / git push origin tag 0.1.0</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-4-修改podspec文件\"><a href=\"#2-4-修改podspec文件\" class=\"headerlink\" title=\"2.4 修改podspec文件\"></a>2.4 修改podspec文件</h5><h5 id=\"2-5-检验pod库、podspec\"><a href=\"#2-5-检验pod库、podspec\" class=\"headerlink\" title=\"2.5 检验pod库、podspec\"></a>2.5 检验pod库、podspec</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod lib lint</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-6-提交pod库\"><a href=\"#2-6-提交pod库\" class=\"headerlink\" title=\"2.6 提交pod库\"></a>2.6 提交pod库</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod repo push WTSpecs PodTestLibrary.podspec  #前面是本地Repo名字 后面是podspec名字</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-7-检索pod库\"><a href=\"#2-7-检索pod库\" class=\"headerlink\" title=\"2.7 检索pod库\"></a>2.7 检索pod库</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod search PodTestLibrary</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-8-使用pod库\"><a href=\"#2-8-使用pod库\" class=\"headerlink\" title=\"2.8 使用pod库\"></a>2.8 使用pod库</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod &#x27;PodTestLibrary&#x27;, &#x27;~&gt; 0.1.0&#x27;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、私有库\"><a href=\"#二、私有库\" class=\"headerlink\" title=\"二、私有库\"></a>二、私有库</h2><h3 id=\"1-检验\"><a href=\"#1-检验\" class=\"headerlink\" title=\"1. 检验\"></a>1. 检验</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod lib lint --allow-warnings --sources=&lt;https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-远程检验\"><a href=\"#2-远程检验\" class=\"headerlink\" title=\"2. 远程检验\"></a>2. 远程检验</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod spec lint --allow-warnings --sources=&lt;https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs.git&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-提交\"><a href=\"#3-提交\" class=\"headerlink\" title=\"3. 提交\"></a>3. 提交</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod repo push sumian sm_ios_base.podspec --allow-warnings --sources=&#x27;http://192.168.1.229/rysn/sm_ios_index_repo.git,https://github.com/aliyun/aliyun-specs.git,https://github.com/CocoaPods/Specs&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-pod-命令\"><a href=\"#3-pod-命令\" class=\"headerlink\" title=\"3. pod 命令\"></a>3. pod 命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">    $ pod COMMAND</span><br><span class=\"line\"></span><br><span class=\"line\">      CocoaPods, the Cocoa library package manager.</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\"></span><br><span class=\"line\">    + cache         Manipulate the CocoaPods cache</span><br><span class=\"line\">    + deintegrate   Deintegrate CocoaPods from your project</span><br><span class=\"line\">    + env           Display pod environment</span><br><span class=\"line\">    + init          Generate a Podfile for the current directory</span><br><span class=\"line\">    + install       Install project dependencies according to versions from a</span><br><span class=\"line\">                    Podfile.lock</span><br><span class=\"line\">    + ipc           Inter-process communication</span><br><span class=\"line\">    + lib           Develop pods</span><br><span class=\"line\">    + list          List pods</span><br><span class=\"line\">    + outdated      Show outdated project dependencies</span><br><span class=\"line\">    + package       Package a podspec into a static library.</span><br><span class=\"line\">    + plugins       Show available CocoaPods plugins</span><br><span class=\"line\">    + repo          Manage spec-repositories</span><br><span class=\"line\">    + search        Search for pods</span><br><span class=\"line\">    + setup         Setup the CocoaPods environment</span><br><span class=\"line\">    + spec          Manage pod specs</span><br><span class=\"line\">    + trunk         Interact with the CocoaPods API (e.g. publishing new specs)</span><br><span class=\"line\">    + try           Try a Pod!</span><br><span class=\"line\">    + update        Update outdated project dependencies and create new Podfile.lock</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\"></span><br><span class=\"line\">    --silent        Show nothing</span><br><span class=\"line\">    --version       Show the version of the tool</span><br><span class=\"line\">    --verbose       Show more debugging information</span><br><span class=\"line\">    --no-ansi       Show output without ANSI codes</span><br><span class=\"line\">    --help          Show help banner of specified command</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-pod-lib-lint-命令\"><a href=\"#4-pod-lib-lint-命令\" class=\"headerlink\" title=\"4. pod lib lint 命令\"></a>4. pod lib lint 命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">    $ pod lib lint</span><br><span class=\"line\"></span><br><span class=\"line\">      Validates the Pod using the files in the working directory.</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\"></span><br><span class=\"line\">    --quick                                           Lint skips checks that would</span><br><span class=\"line\">                                                      require to download and build</span><br><span class=\"line\">                                                      the spec</span><br><span class=\"line\">    --allow-warnings                                  Lint validates even if warnings</span><br><span class=\"line\">                                                      are present</span><br><span class=\"line\">    --subspec=NAME                                    Lint validates only the given</span><br><span class=\"line\">                                                      subspec</span><br><span class=\"line\">    --no-subspecs                                     Lint skips validation of</span><br><span class=\"line\">                                                      subspecs</span><br><span class=\"line\">    --no-clean                                        Lint leaves the build directory</span><br><span class=\"line\">                                                      intact for inspection</span><br><span class=\"line\">    --fail-fast                                       Lint stops on the first failing</span><br><span class=\"line\">                                                      platform or subspec</span><br><span class=\"line\">    --use-libraries                                   Lint uses static libraries to</span><br><span class=\"line\">                                                      install the spec</span><br><span class=\"line\">    --use-modular-headers                             Lint uses modular headers during</span><br><span class=\"line\">                                                      installation</span><br><span class=\"line\">    --sources=https://github.com/artsy/Specs,master   The sources from which to pull</span><br><span class=\"line\">                                                      dependent pods (defaults to</span><br><span class=\"line\">                                                      https://github.com/CocoaPods/Specs.git).</span><br><span class=\"line\">                                                      Multiple sources must be</span><br><span class=\"line\">                                                      comma-delimited.</span><br><span class=\"line\">    --platforms=ios,macos                             Lint against specific</span><br><span class=\"line\">                                                      platforms(defaults to all</span><br><span class=\"line\">                                                      platforms supported by the</span><br><span class=\"line\">                                                      podspec).Multiple platforms must</span><br><span class=\"line\">                                                      be comma-delimited</span><br><span class=\"line\">    --private                                         Lint skips checks that apply</span><br><span class=\"line\">                                                      only to public specs</span><br><span class=\"line\">    --swift-version=VERSION                           The SWIFT_VERSION that should be</span><br><span class=\"line\">                                                      used to lint the spec. This</span><br><span class=\"line\">                                                      takes precedence over a</span><br><span class=\"line\">                                                      .swift-version file.</span><br><span class=\"line\">    --skip-import-validation                          Lint skips validating that the</span><br><span class=\"line\">                                                      pod can be imported</span><br><span class=\"line\">    --skip-tests                                      Lint skips building and running</span><br><span class=\"line\">                                                      tests during validation</span><br><span class=\"line\">    --silent                                          Show nothing</span><br><span class=\"line\">    --verbose                                         Show more debugging information</span><br><span class=\"line\">    --no-ansi                                         Show output without ANSI codes</span><br><span class=\"line\">    --help                                            Show help banner of specified</span><br><span class=\"line\">                                                      command</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-pod-修改工程配置\"><a href=\"#5-pod-修改工程配置\" class=\"headerlink\" title=\"5. pod 修改工程配置\"></a>5. pod 修改工程配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_install do |installer_representation|</span><br><span class=\"line\"></span><br><span class=\"line\">    installer_representation.pods_project.targets.each do |target|</span><br><span class=\"line\">        target.build_configurations.each do |config|</span><br><span class=\"line\">            #去警告</span><br><span class=\"line\">            config.build_settings[&#x27;GCC_WARN_INHIBIT_ALL_WARNINGS&#x27;] = &#x27;YES&#x27;</span><br><span class=\"line\">            #判断scheme</span><br><span class=\"line\">            if config.name.include?(&quot;SchemeAppTest_Release&quot;)</span><br><span class=\"line\">                #添加scheme对应的预编译宏</span><br><span class=\"line\">                config.build_settings[&#x27;GCC_PREPROCESSOR_DEFINITIONS&#x27;] ||= [&#x27;$(inherited)&#x27;]</span><br><span class=\"line\">                config.build_settings[&#x27;GCC_PREPROCESSOR_DEFINITIONS&#x27;] &lt;&lt; &#x27;SCHEMEAPPTESTRELEASE=3&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">            if config.name.include?(&quot;SchemeAppTest_Debug&quot;)</span><br><span class=\"line\">                config.build_settings[&#x27;GCC_PREPROCESSOR_DEFINITIONS&#x27;] ||= [&#x27;$(inherited)&#x27;]</span><br><span class=\"line\">                config.build_settings[&#x27;GCC_PREPROCESSOR_DEFINITIONS&#x27;] &lt;&lt; &#x27;SCHEMEAPPTESTDEBUG=2&#x27;</span><br><span class=\"line\">                #指定scheme的调试模式可见变量</span><br><span class=\"line\">                config.build_settings[&#x27;GCC_OPTIMIZATION_LEVEL&#x27;] = &#x27;0&#x27;</span><br><span class=\"line\">                #某些情况由于编译器不支持无法debug（可选）</span><br><span class=\"line\">                config.build_settings[&#x27;ONLY_ACTIVE_ARCH&#x27;] = &#x27;YES&#x27;</span><br><span class=\"line\">            end</span><br><span class=\"line\">          end</span><br><span class=\"line\">    end    </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n"},{"title":"Fastlane 指南","abbrlink":"22641716","date":"2021-04-20T13:36:02.000Z","_content":"\n[TOC]\n\n## 1. [Fastlane](https://docs.fastlane.tools/)\n\nfastlane 是一个移动端用来做自动化部署的工具。他可以用来做一些反复枯燥无味的工作，比如截图，代码签名，APP 发版。\n\n## 2. 环境配置\n\n### 2.1 Bundler\n\n在 fastlane 中推荐使用 Bundler 和 Gemfile 管理依赖。\n\n* 安装 Bundler\n\n```shell\ngem install bundler\n```\n\n* 在项目根目录创建 Gemfile 文件，这个文件是管理 fastlane 的依赖，并把文件加入 git 管理，文件内容如下\n\n```ruby\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n```\n\n* 运行 fastlane 依赖更新\n\n```shell\nbundle update\n```\n\n* fastlane 使用\n  \n```shell\nbundle exec fastlane [lane]\n```\n\n* 安装 fastlane 依赖\n  \n```shell\nbundle install\n```\n\n* 更新 fastlane\n  \n```shell\nbundle update fastlane\n```\n\n### 2.2 设置 fastlane\n\n#### 2.2.1 fastlane 初始化\n\n默认使用 ruby 分支\n\n```shell\nfastlane init\n```\n\n可以指定使用 swift 分支（这个分支正式版还没有发布）\n\n```shell\nfastlane init swift\n```\n\n初始化的过程中会有一些问题需要回答，根据项目偏好，如实回答就好。\n\n初始化玩之后，项目根目录下面会生成一个 fastlane 文件夹，里面的内容，感兴趣的话，可以都看下，基本上都是一些自动打包过程中需要使用的信息，有些信息是初始化过程中一些问题的答案，有些事根据提供的 AppleID，fastlane 用 Apple Store Connect API 从你的开发者账号中拉取下来的。\n\n#### 2.2.2 注意\n\n* shell 环境配置最好加上这两句，避免一些编码问题导致配置不兼容的情况\n  \n```shell\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n```\n\n## 3. 运行测试用例\n\n### 3.1 使用\n\n运行单元测试或者 UI 测试的话，可以在 fastfile 中加入 lane\n\n```ruby\nlane :tests do\n  run_tests(scheme: \"MyAppTests\")\nend\n```\n\n或者\n\n```ruby\nlane :tests do\n  run_tests(workspace: \"Example.xcworkspace\",\n            devices: [\"iPhone 6s\", \"iPad Air\"],\n            scheme: \"MyAppTests\")\nend\n```\n\n然后在终端的项目根目录下，运行\n\n```shell\nfastlane tests\n```\n\n## 4. [截图](https://docs.fastlane.tools/getting-started/ios/screenshots/)\n\n## 5. [Beta 部署](https://docs.fastlane.tools/getting-started/ios/beta-deployment/)\n\n### 5.1 项目编译\n\n```ruby\nlane :beta do\n  build_app(scheme: \"MyApp\")\nend\n```\n\n或者\n\n```ruby\nlane :beta do\n  build_app(scheme: \"MyApp\",\n            workspace: \"Example.xcworkspace\",\n            include_bitcode: true)\nend\n```\n\n然后在终端的项目根目录下，运行\n\n```shell\nfastlane beta\n```\n\n### 5.2 上传 App Store 的 TestFlight\n\n```ruby\nlane :beta do\n  sync_code_signing(type: \"appstore\")    # see code signing guide for more information\n  build_app(scheme: \"MyApp\")\n  upload_to_testflight\n  slack(message: \"Successfully distributed a new beta build\") # slack 是一款团队协作的聊天应用\nend\n```\n\n## 6. [App Store 部署](https://docs.fastlane.tools/getting-started/ios/appstore-deployment/)\n\n### 6.1 编译项目\n\n```ruby\nlane :release do\n  build_app(scheme: \"MyApp\")\nend\n```\n\n或者\n\n```ruby\nlane :release do\n  build_app(scheme: \"MyApp\",\n            workspace: \"Example.xcworkspace\",\n            include_bitcode: true)\nend\n```\n\n然后在终端的项目根目录下，运行\n\n```shell\nfastlane release\n```\n\n### 6.2 提交 App Store\n\n```ruby\nlane :release do\n  capture_screenshots                  # generate new screenshots for the App Store\n  sync_code_signing(type: \"appstore\")  # see code signing guide for more information\n  build_app(scheme: \"MyApp\")\n  upload_to_app_store                  # upload your app to App Store Connect\n  slack(message: \"Successfully uploaded a new App Store build\")\nend\n```\n\n## 7. 工作机制\n\n### 7.1 Action\n\n#### 7.1.1 内置 Action\n\n每一个内置的 lane 都是一个 action。fastlane 有很多内置 lane，[这里](https://docs.fastlane.tools/actions/)列出了可用的内置 lane。\n\n### 7.1.2 自建 Action\n\n如果内置的 lane 不能满足你的需求，你还可以自建 lane，自建lane 的文档在[这里](https://docs.fastlane.tools/create-action/)。\n\n### 7.2 Plugin\n\n一般每个插件里面定义了一些相关的 action。[这里](https://docs.fastlane.tools/plugins/available-plugins/)列出了 fastlane 可以用的插件。\n\n文档里也包含了如何使用、创建自定义 plugin。\n\n### 7.3 使用 App Store Connect API\n\n由于历史原因，fastlane 一开始使用 AppleID 基于 cookie 的账号密码认证方式，并且会一直支持这种方式。但是还是推荐大家使用 App Store Connect API 的验证方式。因为 App Store Connect API的验证方式有多种好处\n\n* 没有两部认证\n* 更好的性能\n* 有文档化的 api\n* 增加了可靠性\n\n#### 7.3.1 创建 App Store Connect API Key\n\n* 需要开发者账号的管理员账号才能创建，[创建链接](https://appstoreconnect.apple.com/access/api)与[创建指南](https://developer.apple.com/documentation/appstoreconnectapi/creating_api_keys_for_app_store_connect_api)。\n\n* 创建好之后，下载 API Key 文件 (.p8格式)\n  \n#### 7.3.2 在 fastlane 中 使用\n\n每个 action 单独使用\n\n```ruby\nlane :release do\n  api_key = app_store_connect_api_key(\n    key_id: \"D383SF739\",\n    issuer_id: \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n    key_filepath: \"./AuthKey_D383SF739.p8\",\n    duration: 1200, # optional (maximum 1200)\n    in_house: false, # optional but may be required if using match/sigh\n  )\n\n  pilot(api_key: api_key)\nend\n```\n\n或者多 action，以共享的方式使用\n\n```ruby\nlane :release do\n  app_store_connect_api_key(\n    key_id: \"D383SF739\",\n    issuer_id: \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n    key_filepath: \"./AuthKey_D383SF739.p8\",\n    duration: 1200, # optional (maximum 1200)\n    in_house: false, # optional but may be required if using match/sigh\n  )\n\n  # Automatically loads Actions.lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]\n  pilot\nend\n```\n\n或者基于 json 文件的方式使用，先创建好 json 文件，文件内容格式如下\n\n```json\n{\n  \"key_id\": \"D383SF739\",\n  \"issuer_id\": \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n  \"key\": \"-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHknlhdlYdLu\\n-----END PRIVATE KEY-----\",\n  \"duration\": 1200, # optional (maximum 1200)\n  \"in_house\": false, # optional but may be required if using match/sigh\n}\n```\n\n然后在 fastlane 中使用\n\n```ruby\nlane :release do\n  pilot( api_key_path: \"fastlane/D383SF739.json\" )\nend\n```\n\n也可以在终端中使用\n\n```shell\nfastlane pilot distribute --api_key_path fastlane/D383SF739.json\n```\n\n### 7.4 [代码签名](https://docs.fastlane.tools/codesigning/getting-started/)\n\n有四种代码签名的方式，首推[match](https://docs.fastlane.tools/actions/match/)\n\n1. match\n2. cert 与 sigh\n3. Xcode code sign\n4. Manually\n\n### 7.5 [CI 集成](https://docs.fastlane.tools/best-practices/continuous-integration/)\n\nCI 集成方式支持很多种，其中可以分为 Self-Hosted CIs(自己部署) 与 Hosted CIs(托管部署)两种类型。\n\n集成工具包括但不限于\n\n```shell\n# Self-Hosted CIs\n1. Jenkins\n2. Gitlab\n3. Bamboo\n```\n\n```shell\n# Hosted CIs\n1. Travis\n2. Circle\n3. Visula Studio\n```\n\n## 8. 文件\n\n### 8.1 Fastfile\n\n### 8.2 APPfile\n\n### 8.3 Lanes\n\n### 8.4 Actions\n\n### 8.5 其他\n","source":"_posts/iOS/Tools/Fastlane.md","raw":"---\ntitle: Fastlane 指南\nabbrlink: '22641716'\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n[TOC]\n\n## 1. [Fastlane](https://docs.fastlane.tools/)\n\nfastlane 是一个移动端用来做自动化部署的工具。他可以用来做一些反复枯燥无味的工作，比如截图，代码签名，APP 发版。\n\n## 2. 环境配置\n\n### 2.1 Bundler\n\n在 fastlane 中推荐使用 Bundler 和 Gemfile 管理依赖。\n\n* 安装 Bundler\n\n```shell\ngem install bundler\n```\n\n* 在项目根目录创建 Gemfile 文件，这个文件是管理 fastlane 的依赖，并把文件加入 git 管理，文件内容如下\n\n```ruby\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n```\n\n* 运行 fastlane 依赖更新\n\n```shell\nbundle update\n```\n\n* fastlane 使用\n  \n```shell\nbundle exec fastlane [lane]\n```\n\n* 安装 fastlane 依赖\n  \n```shell\nbundle install\n```\n\n* 更新 fastlane\n  \n```shell\nbundle update fastlane\n```\n\n### 2.2 设置 fastlane\n\n#### 2.2.1 fastlane 初始化\n\n默认使用 ruby 分支\n\n```shell\nfastlane init\n```\n\n可以指定使用 swift 分支（这个分支正式版还没有发布）\n\n```shell\nfastlane init swift\n```\n\n初始化的过程中会有一些问题需要回答，根据项目偏好，如实回答就好。\n\n初始化玩之后，项目根目录下面会生成一个 fastlane 文件夹，里面的内容，感兴趣的话，可以都看下，基本上都是一些自动打包过程中需要使用的信息，有些信息是初始化过程中一些问题的答案，有些事根据提供的 AppleID，fastlane 用 Apple Store Connect API 从你的开发者账号中拉取下来的。\n\n#### 2.2.2 注意\n\n* shell 环境配置最好加上这两句，避免一些编码问题导致配置不兼容的情况\n  \n```shell\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n```\n\n## 3. 运行测试用例\n\n### 3.1 使用\n\n运行单元测试或者 UI 测试的话，可以在 fastfile 中加入 lane\n\n```ruby\nlane :tests do\n  run_tests(scheme: \"MyAppTests\")\nend\n```\n\n或者\n\n```ruby\nlane :tests do\n  run_tests(workspace: \"Example.xcworkspace\",\n            devices: [\"iPhone 6s\", \"iPad Air\"],\n            scheme: \"MyAppTests\")\nend\n```\n\n然后在终端的项目根目录下，运行\n\n```shell\nfastlane tests\n```\n\n## 4. [截图](https://docs.fastlane.tools/getting-started/ios/screenshots/)\n\n## 5. [Beta 部署](https://docs.fastlane.tools/getting-started/ios/beta-deployment/)\n\n### 5.1 项目编译\n\n```ruby\nlane :beta do\n  build_app(scheme: \"MyApp\")\nend\n```\n\n或者\n\n```ruby\nlane :beta do\n  build_app(scheme: \"MyApp\",\n            workspace: \"Example.xcworkspace\",\n            include_bitcode: true)\nend\n```\n\n然后在终端的项目根目录下，运行\n\n```shell\nfastlane beta\n```\n\n### 5.2 上传 App Store 的 TestFlight\n\n```ruby\nlane :beta do\n  sync_code_signing(type: \"appstore\")    # see code signing guide for more information\n  build_app(scheme: \"MyApp\")\n  upload_to_testflight\n  slack(message: \"Successfully distributed a new beta build\") # slack 是一款团队协作的聊天应用\nend\n```\n\n## 6. [App Store 部署](https://docs.fastlane.tools/getting-started/ios/appstore-deployment/)\n\n### 6.1 编译项目\n\n```ruby\nlane :release do\n  build_app(scheme: \"MyApp\")\nend\n```\n\n或者\n\n```ruby\nlane :release do\n  build_app(scheme: \"MyApp\",\n            workspace: \"Example.xcworkspace\",\n            include_bitcode: true)\nend\n```\n\n然后在终端的项目根目录下，运行\n\n```shell\nfastlane release\n```\n\n### 6.2 提交 App Store\n\n```ruby\nlane :release do\n  capture_screenshots                  # generate new screenshots for the App Store\n  sync_code_signing(type: \"appstore\")  # see code signing guide for more information\n  build_app(scheme: \"MyApp\")\n  upload_to_app_store                  # upload your app to App Store Connect\n  slack(message: \"Successfully uploaded a new App Store build\")\nend\n```\n\n## 7. 工作机制\n\n### 7.1 Action\n\n#### 7.1.1 内置 Action\n\n每一个内置的 lane 都是一个 action。fastlane 有很多内置 lane，[这里](https://docs.fastlane.tools/actions/)列出了可用的内置 lane。\n\n### 7.1.2 自建 Action\n\n如果内置的 lane 不能满足你的需求，你还可以自建 lane，自建lane 的文档在[这里](https://docs.fastlane.tools/create-action/)。\n\n### 7.2 Plugin\n\n一般每个插件里面定义了一些相关的 action。[这里](https://docs.fastlane.tools/plugins/available-plugins/)列出了 fastlane 可以用的插件。\n\n文档里也包含了如何使用、创建自定义 plugin。\n\n### 7.3 使用 App Store Connect API\n\n由于历史原因，fastlane 一开始使用 AppleID 基于 cookie 的账号密码认证方式，并且会一直支持这种方式。但是还是推荐大家使用 App Store Connect API 的验证方式。因为 App Store Connect API的验证方式有多种好处\n\n* 没有两部认证\n* 更好的性能\n* 有文档化的 api\n* 增加了可靠性\n\n#### 7.3.1 创建 App Store Connect API Key\n\n* 需要开发者账号的管理员账号才能创建，[创建链接](https://appstoreconnect.apple.com/access/api)与[创建指南](https://developer.apple.com/documentation/appstoreconnectapi/creating_api_keys_for_app_store_connect_api)。\n\n* 创建好之后，下载 API Key 文件 (.p8格式)\n  \n#### 7.3.2 在 fastlane 中 使用\n\n每个 action 单独使用\n\n```ruby\nlane :release do\n  api_key = app_store_connect_api_key(\n    key_id: \"D383SF739\",\n    issuer_id: \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n    key_filepath: \"./AuthKey_D383SF739.p8\",\n    duration: 1200, # optional (maximum 1200)\n    in_house: false, # optional but may be required if using match/sigh\n  )\n\n  pilot(api_key: api_key)\nend\n```\n\n或者多 action，以共享的方式使用\n\n```ruby\nlane :release do\n  app_store_connect_api_key(\n    key_id: \"D383SF739\",\n    issuer_id: \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n    key_filepath: \"./AuthKey_D383SF739.p8\",\n    duration: 1200, # optional (maximum 1200)\n    in_house: false, # optional but may be required if using match/sigh\n  )\n\n  # Automatically loads Actions.lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]\n  pilot\nend\n```\n\n或者基于 json 文件的方式使用，先创建好 json 文件，文件内容格式如下\n\n```json\n{\n  \"key_id\": \"D383SF739\",\n  \"issuer_id\": \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n  \"key\": \"-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHknlhdlYdLu\\n-----END PRIVATE KEY-----\",\n  \"duration\": 1200, # optional (maximum 1200)\n  \"in_house\": false, # optional but may be required if using match/sigh\n}\n```\n\n然后在 fastlane 中使用\n\n```ruby\nlane :release do\n  pilot( api_key_path: \"fastlane/D383SF739.json\" )\nend\n```\n\n也可以在终端中使用\n\n```shell\nfastlane pilot distribute --api_key_path fastlane/D383SF739.json\n```\n\n### 7.4 [代码签名](https://docs.fastlane.tools/codesigning/getting-started/)\n\n有四种代码签名的方式，首推[match](https://docs.fastlane.tools/actions/match/)\n\n1. match\n2. cert 与 sigh\n3. Xcode code sign\n4. Manually\n\n### 7.5 [CI 集成](https://docs.fastlane.tools/best-practices/continuous-integration/)\n\nCI 集成方式支持很多种，其中可以分为 Self-Hosted CIs(自己部署) 与 Hosted CIs(托管部署)两种类型。\n\n集成工具包括但不限于\n\n```shell\n# Self-Hosted CIs\n1. Jenkins\n2. Gitlab\n3. Bamboo\n```\n\n```shell\n# Hosted CIs\n1. Travis\n2. Circle\n3. Visula Studio\n```\n\n## 8. 文件\n\n### 8.1 Fastfile\n\n### 8.2 APPfile\n\n### 8.3 Lanes\n\n### 8.4 Actions\n\n### 8.5 其他\n","slug":"iOS/Tools/Fastlane","published":1,"updated":"2021-07-29T06:45:59.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2o002liu9k93hu69oa","content":"<p>[TOC]</p>\n<h2 id=\"1-Fastlane\"><a href=\"#1-Fastlane\" class=\"headerlink\" title=\"1. Fastlane\"></a>1. <a href=\"https://docs.fastlane.tools/\">Fastlane</a></h2><p>fastlane 是一个移动端用来做自动化部署的工具。他可以用来做一些反复枯燥无味的工作，比如截图，代码签名，APP 发版。</p>\n<h2 id=\"2-环境配置\"><a href=\"#2-环境配置\" class=\"headerlink\" title=\"2. 环境配置\"></a>2. 环境配置</h2><h3 id=\"2-1-Bundler\"><a href=\"#2-1-Bundler\" class=\"headerlink\" title=\"2.1 Bundler\"></a>2.1 Bundler</h3><p>在 fastlane 中推荐使用 Bundler 和 Gemfile 管理依赖。</p>\n<ul>\n<li>安装 Bundler</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install bundler</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在项目根目录创建 Gemfile 文件，这个文件是管理 fastlane 的依赖，并把文件加入 git 管理，文件内容如下</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source <span class=\"string\">&quot;https://rubygems.org&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem <span class=\"string\">&quot;fastlane&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>运行 fastlane 依赖更新</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle update</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>fastlane 使用</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle exec fastlane [lane]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装 fastlane 依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更新 fastlane</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle update fastlane</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-设置-fastlane\"><a href=\"#2-2-设置-fastlane\" class=\"headerlink\" title=\"2.2 设置 fastlane\"></a>2.2 设置 fastlane</h3><h4 id=\"2-2-1-fastlane-初始化\"><a href=\"#2-2-1-fastlane-初始化\" class=\"headerlink\" title=\"2.2.1 fastlane 初始化\"></a>2.2.1 fastlane 初始化</h4><p>默认使用 ruby 分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane init</span><br></pre></td></tr></table></figure>\n\n<p>可以指定使用 swift 分支（这个分支正式版还没有发布）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane init swift</span><br></pre></td></tr></table></figure>\n\n<p>初始化的过程中会有一些问题需要回答，根据项目偏好，如实回答就好。</p>\n<p>初始化玩之后，项目根目录下面会生成一个 fastlane 文件夹，里面的内容，感兴趣的话，可以都看下，基本上都是一些自动打包过程中需要使用的信息，有些信息是初始化过程中一些问题的答案，有些事根据提供的 AppleID，fastlane 用 Apple Store Connect API 从你的开发者账号中拉取下来的。</p>\n<h4 id=\"2-2-2-注意\"><a href=\"#2-2-2-注意\" class=\"headerlink\" title=\"2.2.2 注意\"></a>2.2.2 注意</h4><ul>\n<li>shell 环境配置最好加上这两句，避免一些编码问题导致配置不兼容的情况</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LC_ALL=en_US.UTF-8</span><br><span class=\"line\">export LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-运行测试用例\"><a href=\"#3-运行测试用例\" class=\"headerlink\" title=\"3. 运行测试用例\"></a>3. 运行测试用例</h2><h3 id=\"3-1-使用\"><a href=\"#3-1-使用\" class=\"headerlink\" title=\"3.1 使用\"></a>3.1 使用</h3><p>运行单元测试或者 UI 测试的话，可以在 fastfile 中加入 lane</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:tests</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run_tests(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyAppTests&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:tests</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run_tests(<span class=\"symbol\">workspace:</span> <span class=\"string\">&quot;Example.xcworkspace&quot;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">devices:</span> [<span class=\"string\">&quot;iPhone 6s&quot;</span>, <span class=\"string\">&quot;iPad Air&quot;</span>],</span><br><span class=\"line\">            <span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyAppTests&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在终端的项目根目录下，运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane tests</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-截图\"><a href=\"#4-截图\" class=\"headerlink\" title=\"4. 截图\"></a>4. <a href=\"https://docs.fastlane.tools/getting-started/ios/screenshots/\">截图</a></h2><h2 id=\"5-Beta-部署\"><a href=\"#5-Beta-部署\" class=\"headerlink\" title=\"5. Beta 部署\"></a>5. <a href=\"https://docs.fastlane.tools/getting-started/ios/beta-deployment/\">Beta 部署</a></h2><h3 id=\"5-1-项目编译\"><a href=\"#5-1-项目编译\" class=\"headerlink\" title=\"5.1 项目编译\"></a>5.1 项目编译</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:beta</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  build_app(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyApp&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:beta</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  build_app(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyApp&quot;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">workspace:</span> <span class=\"string\">&quot;Example.xcworkspace&quot;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">include_bitcode:</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在终端的项目根目录下，运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane beta</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-上传-App-Store-的-TestFlight\"><a href=\"#5-2-上传-App-Store-的-TestFlight\" class=\"headerlink\" title=\"5.2 上传 App Store 的 TestFlight\"></a>5.2 上传 App Store 的 TestFlight</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:beta</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  sync_code_signing(<span class=\"symbol\">type:</span> <span class=\"string\">&quot;appstore&quot;</span>)    <span class=\"comment\"># see code signing guide for more information</span></span><br><span class=\"line\">  build_app(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyApp&quot;</span>)</span><br><span class=\"line\">  upload_to_testflight</span><br><span class=\"line\">  slack(<span class=\"symbol\">message:</span> <span class=\"string\">&quot;Successfully distributed a new beta build&quot;</span>) <span class=\"comment\"># slack 是一款团队协作的聊天应用</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-App-Store-部署\"><a href=\"#6-App-Store-部署\" class=\"headerlink\" title=\"6. App Store 部署\"></a>6. <a href=\"https://docs.fastlane.tools/getting-started/ios/appstore-deployment/\">App Store 部署</a></h2><h3 id=\"6-1-编译项目\"><a href=\"#6-1-编译项目\" class=\"headerlink\" title=\"6.1 编译项目\"></a>6.1 编译项目</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  build_app(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyApp&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  build_app(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyApp&quot;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">workspace:</span> <span class=\"string\">&quot;Example.xcworkspace&quot;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">include_bitcode:</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在终端的项目根目录下，运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane release</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-提交-App-Store\"><a href=\"#6-2-提交-App-Store\" class=\"headerlink\" title=\"6.2 提交 App Store\"></a>6.2 提交 App Store</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  capture_screenshots                  <span class=\"comment\"># generate new screenshots for the App Store</span></span><br><span class=\"line\">  sync_code_signing(<span class=\"symbol\">type:</span> <span class=\"string\">&quot;appstore&quot;</span>)  <span class=\"comment\"># see code signing guide for more information</span></span><br><span class=\"line\">  build_app(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyApp&quot;</span>)</span><br><span class=\"line\">  upload_to_app_store                  <span class=\"comment\"># upload your app to App Store Connect</span></span><br><span class=\"line\">  slack(<span class=\"symbol\">message:</span> <span class=\"string\">&quot;Successfully uploaded a new App Store build&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-工作机制\"><a href=\"#7-工作机制\" class=\"headerlink\" title=\"7. 工作机制\"></a>7. 工作机制</h2><h3 id=\"7-1-Action\"><a href=\"#7-1-Action\" class=\"headerlink\" title=\"7.1 Action\"></a>7.1 Action</h3><h4 id=\"7-1-1-内置-Action\"><a href=\"#7-1-1-内置-Action\" class=\"headerlink\" title=\"7.1.1 内置 Action\"></a>7.1.1 内置 Action</h4><p>每一个内置的 lane 都是一个 action。fastlane 有很多内置 lane，<a href=\"https://docs.fastlane.tools/actions/\">这里</a>列出了可用的内置 lane。</p>\n<h3 id=\"7-1-2-自建-Action\"><a href=\"#7-1-2-自建-Action\" class=\"headerlink\" title=\"7.1.2 自建 Action\"></a>7.1.2 自建 Action</h3><p>如果内置的 lane 不能满足你的需求，你还可以自建 lane，自建lane 的文档在<a href=\"https://docs.fastlane.tools/create-action/\">这里</a>。</p>\n<h3 id=\"7-2-Plugin\"><a href=\"#7-2-Plugin\" class=\"headerlink\" title=\"7.2 Plugin\"></a>7.2 Plugin</h3><p>一般每个插件里面定义了一些相关的 action。<a href=\"https://docs.fastlane.tools/plugins/available-plugins/\">这里</a>列出了 fastlane 可以用的插件。</p>\n<p>文档里也包含了如何使用、创建自定义 plugin。</p>\n<h3 id=\"7-3-使用-App-Store-Connect-API\"><a href=\"#7-3-使用-App-Store-Connect-API\" class=\"headerlink\" title=\"7.3 使用 App Store Connect API\"></a>7.3 使用 App Store Connect API</h3><p>由于历史原因，fastlane 一开始使用 AppleID 基于 cookie 的账号密码认证方式，并且会一直支持这种方式。但是还是推荐大家使用 App Store Connect API 的验证方式。因为 App Store Connect API的验证方式有多种好处</p>\n<ul>\n<li>没有两部认证</li>\n<li>更好的性能</li>\n<li>有文档化的 api</li>\n<li>增加了可靠性</li>\n</ul>\n<h4 id=\"7-3-1-创建-App-Store-Connect-API-Key\"><a href=\"#7-3-1-创建-App-Store-Connect-API-Key\" class=\"headerlink\" title=\"7.3.1 创建 App Store Connect API Key\"></a>7.3.1 创建 App Store Connect API Key</h4><ul>\n<li><p>需要开发者账号的管理员账号才能创建，<a href=\"https://appstoreconnect.apple.com/access/api\">创建链接</a>与<a href=\"https://developer.apple.com/documentation/appstoreconnectapi/creating_api_keys_for_app_store_connect_api\">创建指南</a>。</p>\n</li>\n<li><p>创建好之后，下载 API Key 文件 (.p8格式)</p>\n</li>\n</ul>\n<h4 id=\"7-3-2-在-fastlane-中-使用\"><a href=\"#7-3-2-在-fastlane-中-使用\" class=\"headerlink\" title=\"7.3.2 在 fastlane 中 使用\"></a>7.3.2 在 fastlane 中 使用</h4><p>每个 action 单独使用</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  api_key = app_store_connect_api_key(</span><br><span class=\"line\">    <span class=\"symbol\">key_id:</span> <span class=\"string\">&quot;D383SF739&quot;</span>,</span><br><span class=\"line\">    <span class=\"symbol\">issuer_id:</span> <span class=\"string\">&quot;6053b7fe-68a8-4acb-89be-165aa6465141&quot;</span>,</span><br><span class=\"line\">    <span class=\"symbol\">key_filepath:</span> <span class=\"string\">&quot;./AuthKey_D383SF739.p8&quot;</span>,</span><br><span class=\"line\">    <span class=\"symbol\">duration:</span> <span class=\"number\">1200</span>, <span class=\"comment\"># optional (maximum 1200)</span></span><br><span class=\"line\">    <span class=\"symbol\">in_house:</span> <span class=\"literal\">false</span>, <span class=\"comment\"># optional but may be required if using match/sigh</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  pilot(<span class=\"symbol\">api_key:</span> api_key)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>或者多 action，以共享的方式使用</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  app_store_connect_api_key(</span><br><span class=\"line\">    <span class=\"symbol\">key_id:</span> <span class=\"string\">&quot;D383SF739&quot;</span>,</span><br><span class=\"line\">    <span class=\"symbol\">issuer_id:</span> <span class=\"string\">&quot;6053b7fe-68a8-4acb-89be-165aa6465141&quot;</span>,</span><br><span class=\"line\">    <span class=\"symbol\">key_filepath:</span> <span class=\"string\">&quot;./AuthKey_D383SF739.p8&quot;</span>,</span><br><span class=\"line\">    <span class=\"symbol\">duration:</span> <span class=\"number\">1200</span>, <span class=\"comment\"># optional (maximum 1200)</span></span><br><span class=\"line\">    <span class=\"symbol\">in_house:</span> <span class=\"literal\">false</span>, <span class=\"comment\"># optional but may be required if using match/sigh</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Automatically loads Actions.lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]</span></span><br><span class=\"line\">  pilot</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>或者基于 json 文件的方式使用，先创建好 json 文件，文件内容格式如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;key_id&quot;</span>: <span class=\"string\">&quot;D383SF739&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;issuer_id&quot;</span>: <span class=\"string\">&quot;6053b7fe-68a8-4acb-89be-165aa6465141&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;key&quot;</span>: <span class=\"string\">&quot;-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHknlhdlYdLu\\n-----END PRIVATE KEY-----&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;duration&quot;</span>: <span class=\"number\">1200</span>, # optional (maximum 1200)</span><br><span class=\"line\">  <span class=\"attr\">&quot;in_house&quot;</span>: <span class=\"literal\">false</span>, # optional but may be required if using match/sigh</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在 fastlane 中使用</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  pilot( <span class=\"symbol\">api_key_path:</span> <span class=\"string\">&quot;fastlane/D383SF739.json&quot;</span> )</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以在终端中使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane pilot distribute --api_key_path fastlane/D383SF739.json</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-代码签名\"><a href=\"#7-4-代码签名\" class=\"headerlink\" title=\"7.4 代码签名\"></a>7.4 <a href=\"https://docs.fastlane.tools/codesigning/getting-started/\">代码签名</a></h3><p>有四种代码签名的方式，首推<a href=\"https://docs.fastlane.tools/actions/match/\">match</a></p>\n<ol>\n<li>match</li>\n<li>cert 与 sigh</li>\n<li>Xcode code sign</li>\n<li>Manually</li>\n</ol>\n<h3 id=\"7-5-CI-集成\"><a href=\"#7-5-CI-集成\" class=\"headerlink\" title=\"7.5 CI 集成\"></a>7.5 <a href=\"https://docs.fastlane.tools/best-practices/continuous-integration/\">CI 集成</a></h3><p>CI 集成方式支持很多种，其中可以分为 Self-Hosted CIs(自己部署) 与 Hosted CIs(托管部署)两种类型。</p>\n<p>集成工具包括但不限于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Self-Hosted CIs</span></span><br><span class=\"line\">1. Jenkins</span><br><span class=\"line\">2. Gitlab</span><br><span class=\"line\">3. Bamboo</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Hosted CIs</span></span><br><span class=\"line\">1. Travis</span><br><span class=\"line\">2. Circle</span><br><span class=\"line\">3. Visula Studio</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-文件\"><a href=\"#8-文件\" class=\"headerlink\" title=\"8. 文件\"></a>8. 文件</h2><h3 id=\"8-1-Fastfile\"><a href=\"#8-1-Fastfile\" class=\"headerlink\" title=\"8.1 Fastfile\"></a>8.1 Fastfile</h3><h3 id=\"8-2-APPfile\"><a href=\"#8-2-APPfile\" class=\"headerlink\" title=\"8.2 APPfile\"></a>8.2 APPfile</h3><h3 id=\"8-3-Lanes\"><a href=\"#8-3-Lanes\" class=\"headerlink\" title=\"8.3 Lanes\"></a>8.3 Lanes</h3><h3 id=\"8-4-Actions\"><a href=\"#8-4-Actions\" class=\"headerlink\" title=\"8.4 Actions\"></a>8.4 Actions</h3><h3 id=\"8-5-其他\"><a href=\"#8-5-其他\" class=\"headerlink\" title=\"8.5 其他\"></a>8.5 其他</h3>","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"1-Fastlane\"><a href=\"#1-Fastlane\" class=\"headerlink\" title=\"1. Fastlane\"></a>1. <a href=\"https://docs.fastlane.tools/\">Fastlane</a></h2><p>fastlane 是一个移动端用来做自动化部署的工具。他可以用来做一些反复枯燥无味的工作，比如截图，代码签名，APP 发版。</p>\n<h2 id=\"2-环境配置\"><a href=\"#2-环境配置\" class=\"headerlink\" title=\"2. 环境配置\"></a>2. 环境配置</h2><h3 id=\"2-1-Bundler\"><a href=\"#2-1-Bundler\" class=\"headerlink\" title=\"2.1 Bundler\"></a>2.1 Bundler</h3><p>在 fastlane 中推荐使用 Bundler 和 Gemfile 管理依赖。</p>\n<ul>\n<li>安装 Bundler</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install bundler</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在项目根目录创建 Gemfile 文件，这个文件是管理 fastlane 的依赖，并把文件加入 git 管理，文件内容如下</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source <span class=\"string\">&quot;https://rubygems.org&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">gem <span class=\"string\">&quot;fastlane&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>运行 fastlane 依赖更新</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle update</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>fastlane 使用</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle exec fastlane [lane]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装 fastlane 依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更新 fastlane</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle update fastlane</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-设置-fastlane\"><a href=\"#2-2-设置-fastlane\" class=\"headerlink\" title=\"2.2 设置 fastlane\"></a>2.2 设置 fastlane</h3><h4 id=\"2-2-1-fastlane-初始化\"><a href=\"#2-2-1-fastlane-初始化\" class=\"headerlink\" title=\"2.2.1 fastlane 初始化\"></a>2.2.1 fastlane 初始化</h4><p>默认使用 ruby 分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane init</span><br></pre></td></tr></table></figure>\n\n<p>可以指定使用 swift 分支（这个分支正式版还没有发布）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane init swift</span><br></pre></td></tr></table></figure>\n\n<p>初始化的过程中会有一些问题需要回答，根据项目偏好，如实回答就好。</p>\n<p>初始化玩之后，项目根目录下面会生成一个 fastlane 文件夹，里面的内容，感兴趣的话，可以都看下，基本上都是一些自动打包过程中需要使用的信息，有些信息是初始化过程中一些问题的答案，有些事根据提供的 AppleID，fastlane 用 Apple Store Connect API 从你的开发者账号中拉取下来的。</p>\n<h4 id=\"2-2-2-注意\"><a href=\"#2-2-2-注意\" class=\"headerlink\" title=\"2.2.2 注意\"></a>2.2.2 注意</h4><ul>\n<li>shell 环境配置最好加上这两句，避免一些编码问题导致配置不兼容的情况</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LC_ALL=en_US.UTF-8</span><br><span class=\"line\">export LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-运行测试用例\"><a href=\"#3-运行测试用例\" class=\"headerlink\" title=\"3. 运行测试用例\"></a>3. 运行测试用例</h2><h3 id=\"3-1-使用\"><a href=\"#3-1-使用\" class=\"headerlink\" title=\"3.1 使用\"></a>3.1 使用</h3><p>运行单元测试或者 UI 测试的话，可以在 fastfile 中加入 lane</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:tests</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run_tests(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyAppTests&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:tests</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  run_tests(<span class=\"symbol\">workspace:</span> <span class=\"string\">&quot;Example.xcworkspace&quot;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">devices:</span> [<span class=\"string\">&quot;iPhone 6s&quot;</span>, <span class=\"string\">&quot;iPad Air&quot;</span>],</span><br><span class=\"line\">            <span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyAppTests&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在终端的项目根目录下，运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane tests</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-截图\"><a href=\"#4-截图\" class=\"headerlink\" title=\"4. 截图\"></a>4. <a href=\"https://docs.fastlane.tools/getting-started/ios/screenshots/\">截图</a></h2><h2 id=\"5-Beta-部署\"><a href=\"#5-Beta-部署\" class=\"headerlink\" title=\"5. Beta 部署\"></a>5. <a href=\"https://docs.fastlane.tools/getting-started/ios/beta-deployment/\">Beta 部署</a></h2><h3 id=\"5-1-项目编译\"><a href=\"#5-1-项目编译\" class=\"headerlink\" title=\"5.1 项目编译\"></a>5.1 项目编译</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:beta</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  build_app(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyApp&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:beta</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  build_app(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyApp&quot;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">workspace:</span> <span class=\"string\">&quot;Example.xcworkspace&quot;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">include_bitcode:</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在终端的项目根目录下，运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane beta</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-上传-App-Store-的-TestFlight\"><a href=\"#5-2-上传-App-Store-的-TestFlight\" class=\"headerlink\" title=\"5.2 上传 App Store 的 TestFlight\"></a>5.2 上传 App Store 的 TestFlight</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:beta</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  sync_code_signing(<span class=\"symbol\">type:</span> <span class=\"string\">&quot;appstore&quot;</span>)    <span class=\"comment\"># see code signing guide for more information</span></span><br><span class=\"line\">  build_app(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyApp&quot;</span>)</span><br><span class=\"line\">  upload_to_testflight</span><br><span class=\"line\">  slack(<span class=\"symbol\">message:</span> <span class=\"string\">&quot;Successfully distributed a new beta build&quot;</span>) <span class=\"comment\"># slack 是一款团队协作的聊天应用</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-App-Store-部署\"><a href=\"#6-App-Store-部署\" class=\"headerlink\" title=\"6. App Store 部署\"></a>6. <a href=\"https://docs.fastlane.tools/getting-started/ios/appstore-deployment/\">App Store 部署</a></h2><h3 id=\"6-1-编译项目\"><a href=\"#6-1-编译项目\" class=\"headerlink\" title=\"6.1 编译项目\"></a>6.1 编译项目</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  build_app(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyApp&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  build_app(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyApp&quot;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">workspace:</span> <span class=\"string\">&quot;Example.xcworkspace&quot;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">include_bitcode:</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在终端的项目根目录下，运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane release</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-提交-App-Store\"><a href=\"#6-2-提交-App-Store\" class=\"headerlink\" title=\"6.2 提交 App Store\"></a>6.2 提交 App Store</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  capture_screenshots                  <span class=\"comment\"># generate new screenshots for the App Store</span></span><br><span class=\"line\">  sync_code_signing(<span class=\"symbol\">type:</span> <span class=\"string\">&quot;appstore&quot;</span>)  <span class=\"comment\"># see code signing guide for more information</span></span><br><span class=\"line\">  build_app(<span class=\"symbol\">scheme:</span> <span class=\"string\">&quot;MyApp&quot;</span>)</span><br><span class=\"line\">  upload_to_app_store                  <span class=\"comment\"># upload your app to App Store Connect</span></span><br><span class=\"line\">  slack(<span class=\"symbol\">message:</span> <span class=\"string\">&quot;Successfully uploaded a new App Store build&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-工作机制\"><a href=\"#7-工作机制\" class=\"headerlink\" title=\"7. 工作机制\"></a>7. 工作机制</h2><h3 id=\"7-1-Action\"><a href=\"#7-1-Action\" class=\"headerlink\" title=\"7.1 Action\"></a>7.1 Action</h3><h4 id=\"7-1-1-内置-Action\"><a href=\"#7-1-1-内置-Action\" class=\"headerlink\" title=\"7.1.1 内置 Action\"></a>7.1.1 内置 Action</h4><p>每一个内置的 lane 都是一个 action。fastlane 有很多内置 lane，<a href=\"https://docs.fastlane.tools/actions/\">这里</a>列出了可用的内置 lane。</p>\n<h3 id=\"7-1-2-自建-Action\"><a href=\"#7-1-2-自建-Action\" class=\"headerlink\" title=\"7.1.2 自建 Action\"></a>7.1.2 自建 Action</h3><p>如果内置的 lane 不能满足你的需求，你还可以自建 lane，自建lane 的文档在<a href=\"https://docs.fastlane.tools/create-action/\">这里</a>。</p>\n<h3 id=\"7-2-Plugin\"><a href=\"#7-2-Plugin\" class=\"headerlink\" title=\"7.2 Plugin\"></a>7.2 Plugin</h3><p>一般每个插件里面定义了一些相关的 action。<a href=\"https://docs.fastlane.tools/plugins/available-plugins/\">这里</a>列出了 fastlane 可以用的插件。</p>\n<p>文档里也包含了如何使用、创建自定义 plugin。</p>\n<h3 id=\"7-3-使用-App-Store-Connect-API\"><a href=\"#7-3-使用-App-Store-Connect-API\" class=\"headerlink\" title=\"7.3 使用 App Store Connect API\"></a>7.3 使用 App Store Connect API</h3><p>由于历史原因，fastlane 一开始使用 AppleID 基于 cookie 的账号密码认证方式，并且会一直支持这种方式。但是还是推荐大家使用 App Store Connect API 的验证方式。因为 App Store Connect API的验证方式有多种好处</p>\n<ul>\n<li>没有两部认证</li>\n<li>更好的性能</li>\n<li>有文档化的 api</li>\n<li>增加了可靠性</li>\n</ul>\n<h4 id=\"7-3-1-创建-App-Store-Connect-API-Key\"><a href=\"#7-3-1-创建-App-Store-Connect-API-Key\" class=\"headerlink\" title=\"7.3.1 创建 App Store Connect API Key\"></a>7.3.1 创建 App Store Connect API Key</h4><ul>\n<li><p>需要开发者账号的管理员账号才能创建，<a href=\"https://appstoreconnect.apple.com/access/api\">创建链接</a>与<a href=\"https://developer.apple.com/documentation/appstoreconnectapi/creating_api_keys_for_app_store_connect_api\">创建指南</a>。</p>\n</li>\n<li><p>创建好之后，下载 API Key 文件 (.p8格式)</p>\n</li>\n</ul>\n<h4 id=\"7-3-2-在-fastlane-中-使用\"><a href=\"#7-3-2-在-fastlane-中-使用\" class=\"headerlink\" title=\"7.3.2 在 fastlane 中 使用\"></a>7.3.2 在 fastlane 中 使用</h4><p>每个 action 单独使用</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  api_key = app_store_connect_api_key(</span><br><span class=\"line\">    <span class=\"symbol\">key_id:</span> <span class=\"string\">&quot;D383SF739&quot;</span>,</span><br><span class=\"line\">    <span class=\"symbol\">issuer_id:</span> <span class=\"string\">&quot;6053b7fe-68a8-4acb-89be-165aa6465141&quot;</span>,</span><br><span class=\"line\">    <span class=\"symbol\">key_filepath:</span> <span class=\"string\">&quot;./AuthKey_D383SF739.p8&quot;</span>,</span><br><span class=\"line\">    <span class=\"symbol\">duration:</span> <span class=\"number\">1200</span>, <span class=\"comment\"># optional (maximum 1200)</span></span><br><span class=\"line\">    <span class=\"symbol\">in_house:</span> <span class=\"literal\">false</span>, <span class=\"comment\"># optional but may be required if using match/sigh</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  pilot(<span class=\"symbol\">api_key:</span> api_key)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>或者多 action，以共享的方式使用</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  app_store_connect_api_key(</span><br><span class=\"line\">    <span class=\"symbol\">key_id:</span> <span class=\"string\">&quot;D383SF739&quot;</span>,</span><br><span class=\"line\">    <span class=\"symbol\">issuer_id:</span> <span class=\"string\">&quot;6053b7fe-68a8-4acb-89be-165aa6465141&quot;</span>,</span><br><span class=\"line\">    <span class=\"symbol\">key_filepath:</span> <span class=\"string\">&quot;./AuthKey_D383SF739.p8&quot;</span>,</span><br><span class=\"line\">    <span class=\"symbol\">duration:</span> <span class=\"number\">1200</span>, <span class=\"comment\"># optional (maximum 1200)</span></span><br><span class=\"line\">    <span class=\"symbol\">in_house:</span> <span class=\"literal\">false</span>, <span class=\"comment\"># optional but may be required if using match/sigh</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Automatically loads Actions.lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]</span></span><br><span class=\"line\">  pilot</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>或者基于 json 文件的方式使用，先创建好 json 文件，文件内容格式如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;key_id&quot;</span>: <span class=\"string\">&quot;D383SF739&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;issuer_id&quot;</span>: <span class=\"string\">&quot;6053b7fe-68a8-4acb-89be-165aa6465141&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;key&quot;</span>: <span class=\"string\">&quot;-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHknlhdlYdLu\\n-----END PRIVATE KEY-----&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;duration&quot;</span>: <span class=\"number\">1200</span>, # optional (maximum 1200)</span><br><span class=\"line\">  <span class=\"attr\">&quot;in_house&quot;</span>: <span class=\"literal\">false</span>, # optional but may be required if using match/sigh</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在 fastlane 中使用</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lane <span class=\"symbol\">:release</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  pilot( <span class=\"symbol\">api_key_path:</span> <span class=\"string\">&quot;fastlane/D383SF739.json&quot;</span> )</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以在终端中使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastlane pilot distribute --api_key_path fastlane/D383SF739.json</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-代码签名\"><a href=\"#7-4-代码签名\" class=\"headerlink\" title=\"7.4 代码签名\"></a>7.4 <a href=\"https://docs.fastlane.tools/codesigning/getting-started/\">代码签名</a></h3><p>有四种代码签名的方式，首推<a href=\"https://docs.fastlane.tools/actions/match/\">match</a></p>\n<ol>\n<li>match</li>\n<li>cert 与 sigh</li>\n<li>Xcode code sign</li>\n<li>Manually</li>\n</ol>\n<h3 id=\"7-5-CI-集成\"><a href=\"#7-5-CI-集成\" class=\"headerlink\" title=\"7.5 CI 集成\"></a>7.5 <a href=\"https://docs.fastlane.tools/best-practices/continuous-integration/\">CI 集成</a></h3><p>CI 集成方式支持很多种，其中可以分为 Self-Hosted CIs(自己部署) 与 Hosted CIs(托管部署)两种类型。</p>\n<p>集成工具包括但不限于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Self-Hosted CIs</span></span><br><span class=\"line\">1. Jenkins</span><br><span class=\"line\">2. Gitlab</span><br><span class=\"line\">3. Bamboo</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Hosted CIs</span></span><br><span class=\"line\">1. Travis</span><br><span class=\"line\">2. Circle</span><br><span class=\"line\">3. Visula Studio</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-文件\"><a href=\"#8-文件\" class=\"headerlink\" title=\"8. 文件\"></a>8. 文件</h2><h3 id=\"8-1-Fastfile\"><a href=\"#8-1-Fastfile\" class=\"headerlink\" title=\"8.1 Fastfile\"></a>8.1 Fastfile</h3><h3 id=\"8-2-APPfile\"><a href=\"#8-2-APPfile\" class=\"headerlink\" title=\"8.2 APPfile\"></a>8.2 APPfile</h3><h3 id=\"8-3-Lanes\"><a href=\"#8-3-Lanes\" class=\"headerlink\" title=\"8.3 Lanes\"></a>8.3 Lanes</h3><h3 id=\"8-4-Actions\"><a href=\"#8-4-Actions\" class=\"headerlink\" title=\"8.4 Actions\"></a>8.4 Actions</h3><h3 id=\"8-5-其他\"><a href=\"#8-5-其他\" class=\"headerlink\" title=\"8.5 其他\"></a>8.5 其他</h3>"},{"title":"Git 规范","abbrlink":"96d69a66","date":"2021-04-20T13:36:02.000Z","_content":"\ncommit代码规范\n\n基本样式：[type] [module] : --bug=1000627 Message\n\n//空一行\n\ndetail\n\n//空一行\n\n说明：\n\n其中：\ntype, module 和 message 是必选。\ndetail 为可选。\n\ntype 用于说明 commit 的类别，使用下面标识：\n  bug-fix：修复bug\n\n  feature：新功能实现\n\n  optimize：重构，优化，工程配置等\n\n  merge: 用于替换自动生成合并分支log\n\nmodule 用于说明commit内容所属的业务模块（如果不属于任何模块，使用“通用”）\n\nmessage 修改的内容\n\ndetail 用于在该commit有多条内容的时候，加以说明\nbug-fix需要添加关键字：--bug=bugid\nfeature需要添加关键字：--story=storyid\n\n样例1、\n\n[fixbug] [咨询] : 修复会话页面在iOS10上显示异常的问题\n\n样例2、\n\n[fixbug] [咨询] [tapd id: 1009080,1090900] : 修复以下bug：\n\n1.修复会话页面在iOS10上显示异常的问题\n\n2.修复tabbarItem小红点显示逻辑不正确bug\n\n3.修复navigationbar高度不正确的问题\n\n样例3、\n\n[feature] [登陆] : 导入微信SDK，实现微信登陆\n\n样例4、\n\n[optimize] [工程配置] : 增加会话创建失败后的重连，降低失败概率\n\n样例5、\n\n[merge] : Merge branch 'releaseV0.2.0' into ‘develop’\n","source":"_posts/iOS/Tools/GitSpecification.md","raw":"---\ntitle: Git 规范\nabbrlink: 96d69a66\ndate: 2021-04-20 21:36:02\ntags:\n---\n\ncommit代码规范\n\n基本样式：[type] [module] : --bug=1000627 Message\n\n//空一行\n\ndetail\n\n//空一行\n\n说明：\n\n其中：\ntype, module 和 message 是必选。\ndetail 为可选。\n\ntype 用于说明 commit 的类别，使用下面标识：\n  bug-fix：修复bug\n\n  feature：新功能实现\n\n  optimize：重构，优化，工程配置等\n\n  merge: 用于替换自动生成合并分支log\n\nmodule 用于说明commit内容所属的业务模块（如果不属于任何模块，使用“通用”）\n\nmessage 修改的内容\n\ndetail 用于在该commit有多条内容的时候，加以说明\nbug-fix需要添加关键字：--bug=bugid\nfeature需要添加关键字：--story=storyid\n\n样例1、\n\n[fixbug] [咨询] : 修复会话页面在iOS10上显示异常的问题\n\n样例2、\n\n[fixbug] [咨询] [tapd id: 1009080,1090900] : 修复以下bug：\n\n1.修复会话页面在iOS10上显示异常的问题\n\n2.修复tabbarItem小红点显示逻辑不正确bug\n\n3.修复navigationbar高度不正确的问题\n\n样例3、\n\n[feature] [登陆] : 导入微信SDK，实现微信登陆\n\n样例4、\n\n[optimize] [工程配置] : 增加会话创建失败后的重连，降低失败概率\n\n样例5、\n\n[merge] : Merge branch 'releaseV0.2.0' into ‘develop’\n","slug":"iOS/Tools/GitSpecification","published":1,"updated":"2021-07-29T06:45:59.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2p002miu9k1r644dea","content":"<p>commit代码规范</p>\n<p>基本样式：[type] [module] : –bug=1000627 Message</p>\n<p>//空一行</p>\n<p>detail</p>\n<p>//空一行</p>\n<p>说明：</p>\n<p>其中：<br>type, module 和 message 是必选。<br>detail 为可选。</p>\n<p>type 用于说明 commit 的类别，使用下面标识：<br>  bug-fix：修复bug</p>\n<p>  feature：新功能实现</p>\n<p>  optimize：重构，优化，工程配置等</p>\n<p>  merge: 用于替换自动生成合并分支log</p>\n<p>module 用于说明commit内容所属的业务模块（如果不属于任何模块，使用“通用”）</p>\n<p>message 修改的内容</p>\n<p>detail 用于在该commit有多条内容的时候，加以说明<br>bug-fix需要添加关键字：–bug=bugid<br>feature需要添加关键字：–story=storyid</p>\n<p>样例1、</p>\n<p>[fixbug] [咨询] : 修复会话页面在iOS10上显示异常的问题</p>\n<p>样例2、</p>\n<p>[fixbug] [咨询] [tapd id: 1009080,1090900] : 修复以下bug：</p>\n<p>1.修复会话页面在iOS10上显示异常的问题</p>\n<p>2.修复tabbarItem小红点显示逻辑不正确bug</p>\n<p>3.修复navigationbar高度不正确的问题</p>\n<p>样例3、</p>\n<p>[feature] [登陆] : 导入微信SDK，实现微信登陆</p>\n<p>样例4、</p>\n<p>[optimize] [工程配置] : 增加会话创建失败后的重连，降低失败概率</p>\n<p>样例5、</p>\n<p>[merge] : Merge branch ‘releaseV0.2.0’ into ‘develop’</p>\n","site":{"data":{}},"excerpt":"","more":"<p>commit代码规范</p>\n<p>基本样式：[type] [module] : –bug=1000627 Message</p>\n<p>//空一行</p>\n<p>detail</p>\n<p>//空一行</p>\n<p>说明：</p>\n<p>其中：<br>type, module 和 message 是必选。<br>detail 为可选。</p>\n<p>type 用于说明 commit 的类别，使用下面标识：<br>  bug-fix：修复bug</p>\n<p>  feature：新功能实现</p>\n<p>  optimize：重构，优化，工程配置等</p>\n<p>  merge: 用于替换自动生成合并分支log</p>\n<p>module 用于说明commit内容所属的业务模块（如果不属于任何模块，使用“通用”）</p>\n<p>message 修改的内容</p>\n<p>detail 用于在该commit有多条内容的时候，加以说明<br>bug-fix需要添加关键字：–bug=bugid<br>feature需要添加关键字：–story=storyid</p>\n<p>样例1、</p>\n<p>[fixbug] [咨询] : 修复会话页面在iOS10上显示异常的问题</p>\n<p>样例2、</p>\n<p>[fixbug] [咨询] [tapd id: 1009080,1090900] : 修复以下bug：</p>\n<p>1.修复会话页面在iOS10上显示异常的问题</p>\n<p>2.修复tabbarItem小红点显示逻辑不正确bug</p>\n<p>3.修复navigationbar高度不正确的问题</p>\n<p>样例3、</p>\n<p>[feature] [登陆] : 导入微信SDK，实现微信登陆</p>\n<p>样例4、</p>\n<p>[optimize] [工程配置] : 增加会话创建失败后的重连，降低失败概率</p>\n<p>样例5、</p>\n<p>[merge] : Merge branch ‘releaseV0.2.0’ into ‘develop’</p>\n"},{"title":"iOS之LLDB","abbrlink":"bc630799","date":"2021-04-20T13:36:02.000Z","_content":"\nDebugger commands:\n  apropos           -- List debugger commands related to a word or subject.\n  breakpoint        -- Commands for operating on breakpoints (see 'help b' for shorthand.)\n  bugreport         -- Commands for creating domain-specific bug reports.\n  command           -- Commands for managing custom LLDB commands.\n  disassemble       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  expression        -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  frame             -- Commands for selecting and examing the current thread's stack frames.\n  gdb-remote        -- Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.\n  gui               -- Switch into the curses based GUI mode.\n  help              -- Show a list of all debugger commands, or give details about a specific command.\n  kdp-remote        -- Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.\n  language          -- Commands specific to a source language.\n  log               -- Commands controlling LLDB internal logging.\n  memory            -- Commands for operating on memory in the current target process.\n  platform          -- Commands to manage and create platforms.\n  plugin            -- Commands for managing LLDB plugins.\n  process           -- Commands for interacting with processes on the current platform.\n  quit              -- Quit the LLDB debugger.\n  register          -- Commands to access registers for the current thread and stack frame.\n  script            -- Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.\n  settings          -- Commands for managing LLDB settings.\n  source            -- Commands for examining source code described by debug information for the current target process.\n  statistics        -- Print statistics about a debugging session\n  target            -- Commands for operating on debugger targets.\n  thread            -- Commands for operating on one or more threads in the current process.\n  type              -- Commands for operating on the type system.\n  version           -- Show the LLDB debugger version.\n  watchpoint        -- Commands for operating on watchpoints.\nCurrent command abbreviations (type 'help command alias' for more info):\n  add-dsym  -- Add a debug symbol file to one of the target's current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.\n  attach    -- Attach to process by ID or name.\n  b         -- Set a breakpoint using one of several shorthand formats.\n  bt        -- Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.\n  c         -- Continue execution of all threads in the current process.\n  call      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  continue  -- Continue execution of all threads in the current process.\n  detach    -- Detach from the current target process.\n  di        -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  dis       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  display   -- Evaluate an expression at every stop (see 'help target stop-hook'.)\n  down      -- Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  env       -- Shorthand for viewing and setting environment variables.\n  exit      -- Quit the LLDB debugger.\n  f         -- Select the current stack frame by index from within the current thread (see 'thread backtrace'.)\n  file      -- Create a target using the argument as the main executable.\n  finish    -- Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.\n  image     -- Commands for accessing information for one or more target modules.\n  j         -- Set the program counter to a new address.\n  jump      -- Set the program counter to a new address.\n  kill      -- Terminate the current target process.\n  l         -- List relevant source code using one of several shorthand formats.\n  list      -- List relevant source code using one of several shorthand formats.\n  n         -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  next      -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  nexti     -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  ni        -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  p         -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  parray    -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  po        -- Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type's author.\n  poarray   -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  print     -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  q         -- Quit the LLDB debugger.\n  r         -- Launch the executable in the debugger.\n  rbreak    -- Sets a breakpoint or set of breakpoints in the executable.\n  repl      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  run       -- Launch the executable in the debugger.\n  s         -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  si        -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  sif       -- Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.\n  step      -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  stepi     -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  t         -- Change the currently selected thread.\n  tbreak    -- Set a one-shot breakpoint using one of several shorthand formats.\n  undisplay -- Stop displaying expression at every stop (specified by stop-hook index.)\n  up        -- Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  v         -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  var       -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  vo        -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  x         -- Read from the memory of the current target process.\nFor more information on any command, type 'help <command-name>'.","source":"_posts/iOS/Tools/LLDB.md","raw":"---\ntitle: iOS之LLDB\nabbrlink: bc630799\ndate: 2021-04-20 21:36:02\ntags:\n---\n\nDebugger commands:\n  apropos           -- List debugger commands related to a word or subject.\n  breakpoint        -- Commands for operating on breakpoints (see 'help b' for shorthand.)\n  bugreport         -- Commands for creating domain-specific bug reports.\n  command           -- Commands for managing custom LLDB commands.\n  disassemble       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  expression        -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  frame             -- Commands for selecting and examing the current thread's stack frames.\n  gdb-remote        -- Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.\n  gui               -- Switch into the curses based GUI mode.\n  help              -- Show a list of all debugger commands, or give details about a specific command.\n  kdp-remote        -- Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.\n  language          -- Commands specific to a source language.\n  log               -- Commands controlling LLDB internal logging.\n  memory            -- Commands for operating on memory in the current target process.\n  platform          -- Commands to manage and create platforms.\n  plugin            -- Commands for managing LLDB plugins.\n  process           -- Commands for interacting with processes on the current platform.\n  quit              -- Quit the LLDB debugger.\n  register          -- Commands to access registers for the current thread and stack frame.\n  script            -- Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.\n  settings          -- Commands for managing LLDB settings.\n  source            -- Commands for examining source code described by debug information for the current target process.\n  statistics        -- Print statistics about a debugging session\n  target            -- Commands for operating on debugger targets.\n  thread            -- Commands for operating on one or more threads in the current process.\n  type              -- Commands for operating on the type system.\n  version           -- Show the LLDB debugger version.\n  watchpoint        -- Commands for operating on watchpoints.\nCurrent command abbreviations (type 'help command alias' for more info):\n  add-dsym  -- Add a debug symbol file to one of the target's current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.\n  attach    -- Attach to process by ID or name.\n  b         -- Set a breakpoint using one of several shorthand formats.\n  bt        -- Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.\n  c         -- Continue execution of all threads in the current process.\n  call      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  continue  -- Continue execution of all threads in the current process.\n  detach    -- Detach from the current target process.\n  di        -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  dis       -- Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n  display   -- Evaluate an expression at every stop (see 'help target stop-hook'.)\n  down      -- Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  env       -- Shorthand for viewing and setting environment variables.\n  exit      -- Quit the LLDB debugger.\n  f         -- Select the current stack frame by index from within the current thread (see 'thread backtrace'.)\n  file      -- Create a target using the argument as the main executable.\n  finish    -- Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.\n  image     -- Commands for accessing information for one or more target modules.\n  j         -- Set the program counter to a new address.\n  jump      -- Set the program counter to a new address.\n  kill      -- Terminate the current target process.\n  l         -- List relevant source code using one of several shorthand formats.\n  list      -- List relevant source code using one of several shorthand formats.\n  n         -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  next      -- Source level single step, stepping over calls.  Defaults to current thread unless specified.\n  nexti     -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  ni        -- Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n  p         -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  parray    -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  po        -- Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type's author.\n  poarray   -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  print     -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  q         -- Quit the LLDB debugger.\n  r         -- Launch the executable in the debugger.\n  rbreak    -- Sets a breakpoint or set of breakpoints in the executable.\n  repl      -- Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n  run       -- Launch the executable in the debugger.\n  s         -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  si        -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  sif       -- Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.\n  step      -- Source level single step, stepping into calls.  Defaults to current thread unless specified.\n  stepi     -- Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n  t         -- Change the currently selected thread.\n  tbreak    -- Set a one-shot breakpoint using one of several shorthand formats.\n  undisplay -- Stop displaying expression at every stop (specified by stop-hook index.)\n  up        -- Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n  v         -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  var       -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  vo        -- Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as\n               'var->child.x'.  The -> and [] operators in 'frame variable' do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable\n               instead.\n               It is worth noting that except for overloaded operators, when printing local variables 'expr local_var' and 'frame var local_var' produce the same results.  However, 'frame variable' is more efficient, since it uses debug information and memory\n               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.\n  x         -- Read from the memory of the current target process.\nFor more information on any command, type 'help <command-name>'.","slug":"iOS/Tools/LLDB","published":1,"updated":"2021-07-29T06:45:59.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2q002niu9kfq8wbllx","content":"<p>Debugger commands:<br>  apropos           – List debugger commands related to a word or subject.<br>  breakpoint        – Commands for operating on breakpoints (see ‘help b’ for shorthand.)<br>  bugreport         – Commands for creating domain-specific bug reports.<br>  command           – Commands for managing custom LLDB commands.<br>  disassemble       – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br>  expression        – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  frame             – Commands for selecting and examing the current thread’s stack frames.<br>  gdb-remote        – Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.<br>  gui               – Switch into the curses based GUI mode.<br>  help              – Show a list of all debugger commands, or give details about a specific command.<br>  kdp-remote        – Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.<br>  language          – Commands specific to a source language.<br>  log               – Commands controlling LLDB internal logging.<br>  memory            – Commands for operating on memory in the current target process.<br>  platform          – Commands to manage and create platforms.<br>  plugin            – Commands for managing LLDB plugins.<br>  process           – Commands for interacting with processes on the current platform.<br>  quit              – Quit the LLDB debugger.<br>  register          – Commands to access registers for the current thread and stack frame.<br>  script            – Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.<br>  settings          – Commands for managing LLDB settings.<br>  source            – Commands for examining source code described by debug information for the current target process.<br>  statistics        – Print statistics about a debugging session<br>  target            – Commands for operating on debugger targets.<br>  thread            – Commands for operating on one or more threads in the current process.<br>  type              – Commands for operating on the type system.<br>  version           – Show the LLDB debugger version.<br>  watchpoint        – Commands for operating on watchpoints.<br>Current command abbreviations (type ‘help command alias’ for more info):<br>  add-dsym  – Add a debug symbol file to one of the target’s current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.<br>  attach    – Attach to process by ID or name.<br>  b         – Set a breakpoint using one of several shorthand formats.<br>  bt        – Show the current thread’s call stack.  Any numeric argument displays at most that many frames.  The argument ‘all’ displays all threads.<br>  c         – Continue execution of all threads in the current process.<br>  call      – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  continue  – Continue execution of all threads in the current process.<br>  detach    – Detach from the current target process.<br>  di        – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br>  dis       – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br>  display   – Evaluate an expression at every stop (see ‘help target stop-hook’.)<br>  down      – Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.<br>  env       – Shorthand for viewing and setting environment variables.<br>  exit      – Quit the LLDB debugger.<br>  f         – Select the current stack frame by index from within the current thread (see ‘thread backtrace’.)<br>  file      – Create a target using the argument as the main executable.<br>  finish    – Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.<br>  image     – Commands for accessing information for one or more target modules.<br>  j         – Set the program counter to a new address.<br>  jump      – Set the program counter to a new address.<br>  kill      – Terminate the current target process.<br>  l         – List relevant source code using one of several shorthand formats.<br>  list      – List relevant source code using one of several shorthand formats.<br>  n         – Source level single step, stepping over calls.  Defaults to current thread unless specified.<br>  next      – Source level single step, stepping over calls.  Defaults to current thread unless specified.<br>  nexti     – Instruction level single step, stepping over calls.  Defaults to current thread unless specified.<br>  ni        – Instruction level single step, stepping over calls.  Defaults to current thread unless specified.<br>  p         – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  parray    – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  po        – Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type’s author.<br>  poarray   – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  print     – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  q         – Quit the LLDB debugger.<br>  r         – Launch the executable in the debugger.<br>  rbreak    – Sets a breakpoint or set of breakpoints in the executable.<br>  repl      – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  run       – Launch the executable in the debugger.<br>  s         – Source level single step, stepping into calls.  Defaults to current thread unless specified.<br>  si        – Instruction level single step, stepping into calls.  Defaults to current thread unless specified.<br>  sif       – Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.<br>  step      – Source level single step, stepping into calls.  Defaults to current thread unless specified.<br>  stepi     – Instruction level single step, stepping into calls.  Defaults to current thread unless specified.<br>  t         – Change the currently selected thread.<br>  tbreak    – Set a one-shot breakpoint using one of several shorthand formats.<br>  undisplay – Stop displaying expression at every stop (specified by stop-hook index.)<br>  up        – Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.<br>  v         – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br>               ‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br>               instead.<br>               It is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br>               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br>  var       – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br>               ‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br>               instead.<br>               It is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br>               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br>  vo        – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br>               ‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br>               instead.<br>               It is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br>               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br>  x         – Read from the memory of the current target process.<br>For more information on any command, type ‘help <command-name>‘.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Debugger commands:<br>  apropos           – List debugger commands related to a word or subject.<br>  breakpoint        – Commands for operating on breakpoints (see ‘help b’ for shorthand.)<br>  bugreport         – Commands for creating domain-specific bug reports.<br>  command           – Commands for managing custom LLDB commands.<br>  disassemble       – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br>  expression        – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  frame             – Commands for selecting and examing the current thread’s stack frames.<br>  gdb-remote        – Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.<br>  gui               – Switch into the curses based GUI mode.<br>  help              – Show a list of all debugger commands, or give details about a specific command.<br>  kdp-remote        – Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.<br>  language          – Commands specific to a source language.<br>  log               – Commands controlling LLDB internal logging.<br>  memory            – Commands for operating on memory in the current target process.<br>  platform          – Commands to manage and create platforms.<br>  plugin            – Commands for managing LLDB plugins.<br>  process           – Commands for interacting with processes on the current platform.<br>  quit              – Quit the LLDB debugger.<br>  register          – Commands to access registers for the current thread and stack frame.<br>  script            – Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.<br>  settings          – Commands for managing LLDB settings.<br>  source            – Commands for examining source code described by debug information for the current target process.<br>  statistics        – Print statistics about a debugging session<br>  target            – Commands for operating on debugger targets.<br>  thread            – Commands for operating on one or more threads in the current process.<br>  type              – Commands for operating on the type system.<br>  version           – Show the LLDB debugger version.<br>  watchpoint        – Commands for operating on watchpoints.<br>Current command abbreviations (type ‘help command alias’ for more info):<br>  add-dsym  – Add a debug symbol file to one of the target’s current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.<br>  attach    – Attach to process by ID or name.<br>  b         – Set a breakpoint using one of several shorthand formats.<br>  bt        – Show the current thread’s call stack.  Any numeric argument displays at most that many frames.  The argument ‘all’ displays all threads.<br>  c         – Continue execution of all threads in the current process.<br>  call      – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  continue  – Continue execution of all threads in the current process.<br>  detach    – Detach from the current target process.<br>  di        – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br>  dis       – Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.<br>  display   – Evaluate an expression at every stop (see ‘help target stop-hook’.)<br>  down      – Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.<br>  env       – Shorthand for viewing and setting environment variables.<br>  exit      – Quit the LLDB debugger.<br>  f         – Select the current stack frame by index from within the current thread (see ‘thread backtrace’.)<br>  file      – Create a target using the argument as the main executable.<br>  finish    – Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.<br>  image     – Commands for accessing information for one or more target modules.<br>  j         – Set the program counter to a new address.<br>  jump      – Set the program counter to a new address.<br>  kill      – Terminate the current target process.<br>  l         – List relevant source code using one of several shorthand formats.<br>  list      – List relevant source code using one of several shorthand formats.<br>  n         – Source level single step, stepping over calls.  Defaults to current thread unless specified.<br>  next      – Source level single step, stepping over calls.  Defaults to current thread unless specified.<br>  nexti     – Instruction level single step, stepping over calls.  Defaults to current thread unless specified.<br>  ni        – Instruction level single step, stepping over calls.  Defaults to current thread unless specified.<br>  p         – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  parray    – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  po        – Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type’s author.<br>  poarray   – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  print     – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  q         – Quit the LLDB debugger.<br>  r         – Launch the executable in the debugger.<br>  rbreak    – Sets a breakpoint or set of breakpoints in the executable.<br>  repl      – Evaluate an expression on the current thread.  Displays any returned value with LLDB’s default formatting.<br>  run       – Launch the executable in the debugger.<br>  s         – Source level single step, stepping into calls.  Defaults to current thread unless specified.<br>  si        – Instruction level single step, stepping into calls.  Defaults to current thread unless specified.<br>  sif       – Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.<br>  step      – Source level single step, stepping into calls.  Defaults to current thread unless specified.<br>  stepi     – Instruction level single step, stepping into calls.  Defaults to current thread unless specified.<br>  t         – Change the currently selected thread.<br>  tbreak    – Set a one-shot breakpoint using one of several shorthand formats.<br>  undisplay – Stop displaying expression at every stop (specified by stop-hook index.)<br>  up        – Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.<br>  v         – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br>               ‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br>               instead.<br>               It is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br>               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br>  var       – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br>               ‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br>               instead.<br>               It is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br>               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br>  vo        – Show variables for the current stack frame. Defaults to all arguments and local variables in scope. Names of argument, local, file static and file global variables can be specified. Children of aggregate variables can be specified such as<br>               ‘var-&gt;child.x’.  The -&gt; and [] operators in ‘frame variable’ do not invoke operator overloads if they exist, but directly access the specified element.  If you want to trigger operator overloads use the expression command to print the variable<br>               instead.<br>               It is worth noting that except for overloaded operators, when printing local variables ‘expr local_var’ and ‘frame var local_var’ produce the same results.  However, ‘frame variable’ is more efficient, since it uses debug information and memory<br>               reads directly, rather than parsing and evaluating an expression, which may even involve JITing and running code in the target program.<br>  x         – Read from the memory of the current target process.<br>For more information on any command, type ‘help <command-name>‘.</p>\n"},{"title":"iOS 之监控插件库","abbrlink":"8a2d2538","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. 功能\n\n### 1.1 CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】\n\n### 1.2、结构：core 层【必要功能】，base层【插件管理等】，应用层【APP】\n\n### 1.3、日志记录和显示模块\n\n 日志级别【debug、info、warn、error】：（富文本呈现）\n 模块日志【蓝牙、Moya、APP】\n 启动/函数调用耗时等\n 日志截获并传递给显示组件\n\n### 1.4、APP信息\n\n环境，版本等。\n\n### 1.5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）\n\n “小程序”（小进程，线程形式，尽量不阻塞业务功能）\n 转场动画\n\n---------------------------------------------\n\na、权限集中管理；\n\nb、自动化【fastlane】\n\nc、pod管理【七鱼】\n\n---------------------------------------------\n\na、苹果登录；\n\nb、加解密；\n\nc、swiftUI；\n\nd、响应式：combine，RxSwift，PromiseKit·······\n\ne、服务器；\n\nf、Metal；\n\n* 美图： 鹰眼;\n* 滴滴： 哆啦A梦;\n* 微信： Matrix;\n","source":"_posts/iOS/Tools/Monitors.md","raw":"---\ntitle: iOS 之监控插件库\nabbrlink: 8a2d2538\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. 功能\n\n### 1.1 CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】\n\n### 1.2、结构：core 层【必要功能】，base层【插件管理等】，应用层【APP】\n\n### 1.3、日志记录和显示模块\n\n 日志级别【debug、info、warn、error】：（富文本呈现）\n 模块日志【蓝牙、Moya、APP】\n 启动/函数调用耗时等\n 日志截获并传递给显示组件\n\n### 1.4、APP信息\n\n环境，版本等。\n\n### 1.5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）\n\n “小程序”（小进程，线程形式，尽量不阻塞业务功能）\n 转场动画\n\n---------------------------------------------\n\na、权限集中管理；\n\nb、自动化【fastlane】\n\nc、pod管理【七鱼】\n\n---------------------------------------------\n\na、苹果登录；\n\nb、加解密；\n\nc、swiftUI；\n\nd、响应式：combine，RxSwift，PromiseKit·······\n\ne、服务器；\n\nf、Metal；\n\n* 美图： 鹰眼;\n* 滴滴： 哆啦A梦;\n* 微信： Matrix;\n","slug":"iOS/Tools/Monitors","published":1,"updated":"2021-07-29T06:45:59.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2r002oiu9kaj8r97tv","content":"<h2 id=\"1-功能\"><a href=\"#1-功能\" class=\"headerlink\" title=\"1. 功能\"></a>1. 功能</h2><h3 id=\"1-1-CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】\"><a href=\"#1-1-CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】\" class=\"headerlink\" title=\"1.1 CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】\"></a>1.1 CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】</h3><h3 id=\"1-2、结构：core-层【必要功能】，base层【插件管理等】，应用层【APP】\"><a href=\"#1-2、结构：core-层【必要功能】，base层【插件管理等】，应用层【APP】\" class=\"headerlink\" title=\"1.2、结构：core 层【必要功能】，base层【插件管理等】，应用层【APP】\"></a>1.2、结构：core 层【必要功能】，base层【插件管理等】，应用层【APP】</h3><h3 id=\"1-3、日志记录和显示模块\"><a href=\"#1-3、日志记录和显示模块\" class=\"headerlink\" title=\"1.3、日志记录和显示模块\"></a>1.3、日志记录和显示模块</h3><p> 日志级别【debug、info、warn、error】：（富文本呈现）<br> 模块日志【蓝牙、Moya、APP】<br> 启动/函数调用耗时等<br> 日志截获并传递给显示组件</p>\n<h3 id=\"1-4、APP信息\"><a href=\"#1-4、APP信息\" class=\"headerlink\" title=\"1.4、APP信息\"></a>1.4、APP信息</h3><p>环境，版本等。</p>\n<h3 id=\"1-5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）\"><a href=\"#1-5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）\" class=\"headerlink\" title=\"1.5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）\"></a>1.5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）</h3><p> “小程序”（小进程，线程形式，尽量不阻塞业务功能）<br> 转场动画</p>\n<hr>\n<p>a、权限集中管理；</p>\n<p>b、自动化【fastlane】</p>\n<p>c、pod管理【七鱼】</p>\n<hr>\n<p>a、苹果登录；</p>\n<p>b、加解密；</p>\n<p>c、swiftUI；</p>\n<p>d、响应式：combine，RxSwift，PromiseKit·······</p>\n<p>e、服务器；</p>\n<p>f、Metal；</p>\n<ul>\n<li>美图： 鹰眼;</li>\n<li>滴滴： 哆啦A梦;</li>\n<li>微信： Matrix;</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-功能\"><a href=\"#1-功能\" class=\"headerlink\" title=\"1. 功能\"></a>1. 功能</h2><h3 id=\"1-1-CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】\"><a href=\"#1-1-CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】\" class=\"headerlink\" title=\"1.1 CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】\"></a>1.1 CPU、GPU、GPS、网络、电池、内存（RAM）、存储（ROM）【归档：UserDefault、文件、keychain、数据库······】、异常【崩溃、卡顿、阻塞······】、缓存、cookie、蓝牙、【睡眠数据】</h3><h3 id=\"1-2、结构：core-层【必要功能】，base层【插件管理等】，应用层【APP】\"><a href=\"#1-2、结构：core-层【必要功能】，base层【插件管理等】，应用层【APP】\" class=\"headerlink\" title=\"1.2、结构：core 层【必要功能】，base层【插件管理等】，应用层【APP】\"></a>1.2、结构：core 层【必要功能】，base层【插件管理等】，应用层【APP】</h3><h3 id=\"1-3、日志记录和显示模块\"><a href=\"#1-3、日志记录和显示模块\" class=\"headerlink\" title=\"1.3、日志记录和显示模块\"></a>1.3、日志记录和显示模块</h3><p> 日志级别【debug、info、warn、error】：（富文本呈现）<br> 模块日志【蓝牙、Moya、APP】<br> 启动/函数调用耗时等<br> 日志截获并传递给显示组件</p>\n<h3 id=\"1-4、APP信息\"><a href=\"#1-4、APP信息\" class=\"headerlink\" title=\"1.4、APP信息\"></a>1.4、APP信息</h3><p>环境，版本等。</p>\n<h3 id=\"1-5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）\"><a href=\"#1-5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）\" class=\"headerlink\" title=\"1.5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）\"></a>1.5、以浮动窗口的形式展示（类似微信文章阅读浮动窗口）</h3><p> “小程序”（小进程，线程形式，尽量不阻塞业务功能）<br> 转场动画</p>\n<hr>\n<p>a、权限集中管理；</p>\n<p>b、自动化【fastlane】</p>\n<p>c、pod管理【七鱼】</p>\n<hr>\n<p>a、苹果登录；</p>\n<p>b、加解密；</p>\n<p>c、swiftUI；</p>\n<p>d、响应式：combine，RxSwift，PromiseKit·······</p>\n<p>e、服务器；</p>\n<p>f、Metal；</p>\n<ul>\n<li>美图： 鹰眼;</li>\n<li>滴滴： 哆啦A梦;</li>\n<li>微信： Matrix;</li>\n</ul>\n"},{"title":"OmniGraffle","abbrlink":"94b82552","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Tools/OmniGraffle.md","raw":"---\ntitle: OmniGraffle\nabbrlink: 94b82552\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Tools/OmniGraffle","published":1,"updated":"2021-07-29T06:45:59.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2r002piu9kh7pudavc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS逆向工程","abbrlink":"31682cc0","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. IPA 包\n\n### 1.1 [获取IPA包](~Library/Group\\ Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/)\n\n### 1.2 [Mac-o](http://www.cocoachina.com/mac/20150122/10988.html)\n\n### 1.3 [MachOView](https://sourceforge.net/projects/machoview/files/?source)\n\n### 1.4  [iOS注入动态库](https://www.jianshu.com/p/6c45da26040d)\n\n### 1.5 [Mac install IPA](https://www.jianshu.com/p/8568a8897489)\n\n#### 1.5.1 解决方案\n\n```shell\nbrew uninstall --ignore-dependencies \nlibimobiledevice\nbrew uninstall --ignore-dependencies usbmuxd\nbrew install --HEAD usbmuxd\nbrew unlink usbmux\ndbrew link usbmuxd\nbrew install --HEAD libimobiledevice\n```\n\n#### 1.5.2 [libimobiledevice 源码](https://github.com/libimobiledevice)\n\n### 1.6 工具集\n\n```markdown\nidevice\natos\notool\nsigh\nmokeyDev、OpenDev\nTheOS\nrvictl\nwireshark\ncharles\n```\n\n### 1.7 逆向工程师\n\n#### 1.7.1 要求\n\n```txt\n“硬件构成、iOS系统的运行原理，还要具备丰富的iOS开发经验。”\n```\n\n#### 1.7.2 逆向作用\n\n```txt\n恶意软件\n去除限制\n评定安全等级\n检查后门\n逆向iOS SDK？\n借鉴\n  WireLurker\n```\n\n#### 1.7.3 病毒\n\n```txt\nIkee -> iOS：alpine\nWireLurker\n```\n\n#### 1.7.4 团队\n\n```txt\n“evad3rs、盘古、太极”\n```\n\n#### 1.7.5 iOS 逆向工具\n\n```txt\n 1、监测工具\n    Reveal\n    snoop-it\n    introspy\n\n  2、反汇编工具（disassembler）\n    IDA\n    Hopper\n    Cydia:\n      xsellize\n      iFile（MAcOS: AFC2、iFunBox）\n      SMSNinja\n\n  3、调试工具（debugger）\n    LLDB\n    LLVM\n\n  4、以及开发工具\n    iOSOpenDev（Xcode）\n    TheOS（command line）\n```\n\n#### 1.7.6 获取 APP bundleID\n\n```shell\nsudo plutil -p smartpark.app/Info.plist | grep CFBundleIdentifier\n\"CFBundleIdentifier\" => \"com.jieshun.hatc\"\n```\n\n#### 1.7.7 逆向工程师招聘信息示例\n\n示例一：\n\n```txt\niOS高级安全工程师/专家\n岗位要求\n1.熟悉IDA Pro、GDB、JEB、lldb等常用逆向分析工具，具备较强的逆向分析能力，熟悉ARM、x86/64等指令集；\n2.熟练掌握应用逆向的静态分析、动态调试、代码跟踪等；\n3.负责对接业务安全需求与工具研发；\n4.熟悉C/C++、Objective-C、python语言之中一个或多个；熟悉各种通用加密算法；\n5.良好的逻辑思维能力和团队合作精神，善于交流和表达；\n\n加分项：\n1.有一定的iOS越狱开发经验；\n2.有安全编程相关经验, 熟悉业务安全技术对抗的常见技术手段；\n3.多平台逆向经验(iOS/Android/Windows)\n4.了解业务安全黑灰产；\n\n工作地点：北京/杭州\n简历请投: lanjun007@alibaba-inc.com (简历快到碗里来吧)\n\n公司信息\n上海某广告公司\n\n联系方式\n电话:13818882062\n```\n\n示例二：\n\n```txt\n职位名称\niOS逆向工程师\n\n职位职责\n网络协议层逆向兼顾iOS远程控制开发\n\n职位要求\n0.2-3年iOS开发经验\n1.静态分析 IDA pro、Hopper Disassembler\n2.动态分析 lldb、cycript、frida\n3.网络分析 Charles(https)、Wireshark(socket)\n4.视图分析 Reveal、Flex\n5.编译工具 clang、cmake、theos、\n6.注入工具 cynject、yololib、insert_dylib、optool、install_name_tool\n7.砸壳工具 clutch、dumpdecrypted、dumpexec\n8.Hook工具 MobileSubstrate、fishhook、HookZz、substitute、libcapstone\n9.基础技能 签名、脱壳、class-dump、常用的命令行工具例如ssh、ps等\n10.熟悉SpringBoard以及它依赖的framework加分\na.熟悉VideoToolBox编解码加分\nb.熟悉Unity3D和cocos2D逆向或者正向开发加分\nc.熟悉AppStore以及它交互的几个进程加分\nd.自我驱动力强，态度比能力更重要\ne.邮箱地址 请调试该app <https://www.pgyer.com/crackme_> 15\nPS:0和d是硬性要求，不过要是0-1年时间技能到达了2-3年的也ok，还会加分。1-9项中的工具，单独掌握一种即可，自己研发的加分。a-c的经验多多益善\n\n工作地点: 上海徐汇\n简历请投: 参考e项\n```\n","source":"_posts/iOS/Tools/Reverse.md","raw":"---\ntitle: iOS逆向工程\nabbrlink: 31682cc0\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. IPA 包\n\n### 1.1 [获取IPA包](~Library/Group\\ Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/)\n\n### 1.2 [Mac-o](http://www.cocoachina.com/mac/20150122/10988.html)\n\n### 1.3 [MachOView](https://sourceforge.net/projects/machoview/files/?source)\n\n### 1.4  [iOS注入动态库](https://www.jianshu.com/p/6c45da26040d)\n\n### 1.5 [Mac install IPA](https://www.jianshu.com/p/8568a8897489)\n\n#### 1.5.1 解决方案\n\n```shell\nbrew uninstall --ignore-dependencies \nlibimobiledevice\nbrew uninstall --ignore-dependencies usbmuxd\nbrew install --HEAD usbmuxd\nbrew unlink usbmux\ndbrew link usbmuxd\nbrew install --HEAD libimobiledevice\n```\n\n#### 1.5.2 [libimobiledevice 源码](https://github.com/libimobiledevice)\n\n### 1.6 工具集\n\n```markdown\nidevice\natos\notool\nsigh\nmokeyDev、OpenDev\nTheOS\nrvictl\nwireshark\ncharles\n```\n\n### 1.7 逆向工程师\n\n#### 1.7.1 要求\n\n```txt\n“硬件构成、iOS系统的运行原理，还要具备丰富的iOS开发经验。”\n```\n\n#### 1.7.2 逆向作用\n\n```txt\n恶意软件\n去除限制\n评定安全等级\n检查后门\n逆向iOS SDK？\n借鉴\n  WireLurker\n```\n\n#### 1.7.3 病毒\n\n```txt\nIkee -> iOS：alpine\nWireLurker\n```\n\n#### 1.7.4 团队\n\n```txt\n“evad3rs、盘古、太极”\n```\n\n#### 1.7.5 iOS 逆向工具\n\n```txt\n 1、监测工具\n    Reveal\n    snoop-it\n    introspy\n\n  2、反汇编工具（disassembler）\n    IDA\n    Hopper\n    Cydia:\n      xsellize\n      iFile（MAcOS: AFC2、iFunBox）\n      SMSNinja\n\n  3、调试工具（debugger）\n    LLDB\n    LLVM\n\n  4、以及开发工具\n    iOSOpenDev（Xcode）\n    TheOS（command line）\n```\n\n#### 1.7.6 获取 APP bundleID\n\n```shell\nsudo plutil -p smartpark.app/Info.plist | grep CFBundleIdentifier\n\"CFBundleIdentifier\" => \"com.jieshun.hatc\"\n```\n\n#### 1.7.7 逆向工程师招聘信息示例\n\n示例一：\n\n```txt\niOS高级安全工程师/专家\n岗位要求\n1.熟悉IDA Pro、GDB、JEB、lldb等常用逆向分析工具，具备较强的逆向分析能力，熟悉ARM、x86/64等指令集；\n2.熟练掌握应用逆向的静态分析、动态调试、代码跟踪等；\n3.负责对接业务安全需求与工具研发；\n4.熟悉C/C++、Objective-C、python语言之中一个或多个；熟悉各种通用加密算法；\n5.良好的逻辑思维能力和团队合作精神，善于交流和表达；\n\n加分项：\n1.有一定的iOS越狱开发经验；\n2.有安全编程相关经验, 熟悉业务安全技术对抗的常见技术手段；\n3.多平台逆向经验(iOS/Android/Windows)\n4.了解业务安全黑灰产；\n\n工作地点：北京/杭州\n简历请投: lanjun007@alibaba-inc.com (简历快到碗里来吧)\n\n公司信息\n上海某广告公司\n\n联系方式\n电话:13818882062\n```\n\n示例二：\n\n```txt\n职位名称\niOS逆向工程师\n\n职位职责\n网络协议层逆向兼顾iOS远程控制开发\n\n职位要求\n0.2-3年iOS开发经验\n1.静态分析 IDA pro、Hopper Disassembler\n2.动态分析 lldb、cycript、frida\n3.网络分析 Charles(https)、Wireshark(socket)\n4.视图分析 Reveal、Flex\n5.编译工具 clang、cmake、theos、\n6.注入工具 cynject、yololib、insert_dylib、optool、install_name_tool\n7.砸壳工具 clutch、dumpdecrypted、dumpexec\n8.Hook工具 MobileSubstrate、fishhook、HookZz、substitute、libcapstone\n9.基础技能 签名、脱壳、class-dump、常用的命令行工具例如ssh、ps等\n10.熟悉SpringBoard以及它依赖的framework加分\na.熟悉VideoToolBox编解码加分\nb.熟悉Unity3D和cocos2D逆向或者正向开发加分\nc.熟悉AppStore以及它交互的几个进程加分\nd.自我驱动力强，态度比能力更重要\ne.邮箱地址 请调试该app <https://www.pgyer.com/crackme_> 15\nPS:0和d是硬性要求，不过要是0-1年时间技能到达了2-3年的也ok，还会加分。1-9项中的工具，单独掌握一种即可，自己研发的加分。a-c的经验多多益善\n\n工作地点: 上海徐汇\n简历请投: 参考e项\n```\n","slug":"iOS/Tools/Reverse","published":1,"updated":"2021-07-29T06:45:59.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2s002qiu9k81deavvt","content":"<h2 id=\"1-IPA-包\"><a href=\"#1-IPA-包\" class=\"headerlink\" title=\"1. IPA 包\"></a>1. IPA 包</h2><h3 id=\"1-1-获取IPA包-Library-Group-Containers-K36BKF7T3D-group-com-apple-configurator-Library-Caches-Assets-TemporaryItems-MobileApps\"><a href=\"#1-1-获取IPA包-Library-Group-Containers-K36BKF7T3D-group-com-apple-configurator-Library-Caches-Assets-TemporaryItems-MobileApps\" class=\"headerlink\" title=\"1.1 [获取IPA包](~Library/Group\\ Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/)\"></a>1.1 [获取IPA包](~Library/Group\\ Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/)</h3><h3 id=\"1-2-Mac-o\"><a href=\"#1-2-Mac-o\" class=\"headerlink\" title=\"1.2 Mac-o\"></a>1.2 <a href=\"http://www.cocoachina.com/mac/20150122/10988.html\">Mac-o</a></h3><h3 id=\"1-3-MachOView\"><a href=\"#1-3-MachOView\" class=\"headerlink\" title=\"1.3 MachOView\"></a>1.3 <a href=\"https://sourceforge.net/projects/machoview/files/?source\">MachOView</a></h3><h3 id=\"1-4-iOS注入动态库\"><a href=\"#1-4-iOS注入动态库\" class=\"headerlink\" title=\"1.4  iOS注入动态库\"></a>1.4  <a href=\"https://www.jianshu.com/p/6c45da26040d\">iOS注入动态库</a></h3><h3 id=\"1-5-Mac-install-IPA\"><a href=\"#1-5-Mac-install-IPA\" class=\"headerlink\" title=\"1.5 Mac install IPA\"></a>1.5 <a href=\"https://www.jianshu.com/p/8568a8897489\">Mac install IPA</a></h3><h4 id=\"1-5-1-解决方案\"><a href=\"#1-5-1-解决方案\" class=\"headerlink\" title=\"1.5.1 解决方案\"></a>1.5.1 解决方案</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew uninstall --ignore-dependencies </span><br><span class=\"line\">libimobiledevice</span><br><span class=\"line\">brew uninstall --ignore-dependencies usbmuxd</span><br><span class=\"line\">brew install --HEAD usbmuxd</span><br><span class=\"line\">brew unlink usbmux</span><br><span class=\"line\">dbrew link usbmuxd</span><br><span class=\"line\">brew install --HEAD libimobiledevice</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-5-2-libimobiledevice-源码\"><a href=\"#1-5-2-libimobiledevice-源码\" class=\"headerlink\" title=\"1.5.2 libimobiledevice 源码\"></a>1.5.2 <a href=\"https://github.com/libimobiledevice\">libimobiledevice 源码</a></h4><h3 id=\"1-6-工具集\"><a href=\"#1-6-工具集\" class=\"headerlink\" title=\"1.6 工具集\"></a>1.6 工具集</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">idevice</span><br><span class=\"line\">atos</span><br><span class=\"line\">otool</span><br><span class=\"line\">sigh</span><br><span class=\"line\">mokeyDev、OpenDev</span><br><span class=\"line\">TheOS</span><br><span class=\"line\">rvictl</span><br><span class=\"line\">wireshark</span><br><span class=\"line\">charles</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-7-逆向工程师\"><a href=\"#1-7-逆向工程师\" class=\"headerlink\" title=\"1.7 逆向工程师\"></a>1.7 逆向工程师</h3><h4 id=\"1-7-1-要求\"><a href=\"#1-7-1-要求\" class=\"headerlink\" title=\"1.7.1 要求\"></a>1.7.1 要求</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“硬件构成、iOS系统的运行原理，还要具备丰富的iOS开发经验。”</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-7-2-逆向作用\"><a href=\"#1-7-2-逆向作用\" class=\"headerlink\" title=\"1.7.2 逆向作用\"></a>1.7.2 逆向作用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">恶意软件</span><br><span class=\"line\">去除限制</span><br><span class=\"line\">评定安全等级</span><br><span class=\"line\">检查后门</span><br><span class=\"line\">逆向iOS SDK？</span><br><span class=\"line\">借鉴</span><br><span class=\"line\">  WireLurker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-7-3-病毒\"><a href=\"#1-7-3-病毒\" class=\"headerlink\" title=\"1.7.3 病毒\"></a>1.7.3 病毒</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ikee -&gt; iOS：alpine</span><br><span class=\"line\">WireLurker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-7-4-团队\"><a href=\"#1-7-4-团队\" class=\"headerlink\" title=\"1.7.4 团队\"></a>1.7.4 团队</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“evad3rs、盘古、太极”</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-7-5-iOS-逆向工具\"><a href=\"#1-7-5-iOS-逆向工具\" class=\"headerlink\" title=\"1.7.5 iOS 逆向工具\"></a>1.7.5 iOS 逆向工具</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、监测工具</span><br><span class=\"line\">   Reveal</span><br><span class=\"line\">   snoop-it</span><br><span class=\"line\">   introspy</span><br><span class=\"line\"></span><br><span class=\"line\"> 2、反汇编工具（disassembler）</span><br><span class=\"line\">   IDA</span><br><span class=\"line\">   Hopper</span><br><span class=\"line\">   Cydia:</span><br><span class=\"line\">     xsellize</span><br><span class=\"line\">     iFile（MAcOS: AFC2、iFunBox）</span><br><span class=\"line\">     SMSNinja</span><br><span class=\"line\"></span><br><span class=\"line\"> 3、调试工具（debugger）</span><br><span class=\"line\">   LLDB</span><br><span class=\"line\">   LLVM</span><br><span class=\"line\"></span><br><span class=\"line\"> 4、以及开发工具</span><br><span class=\"line\">   iOSOpenDev（Xcode）</span><br><span class=\"line\">   TheOS（command line）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-7-6-获取-APP-bundleID\"><a href=\"#1-7-6-获取-APP-bundleID\" class=\"headerlink\" title=\"1.7.6 获取 APP bundleID\"></a>1.7.6 获取 APP bundleID</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo plutil -p smartpark.app/Info.plist | grep CFBundleIdentifier</span><br><span class=\"line\">&quot;CFBundleIdentifier&quot; =&gt; &quot;com.jieshun.hatc&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-7-7-逆向工程师招聘信息示例\"><a href=\"#1-7-7-逆向工程师招聘信息示例\" class=\"headerlink\" title=\"1.7.7 逆向工程师招聘信息示例\"></a>1.7.7 逆向工程师招聘信息示例</h4><p>示例一：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iOS高级安全工程师/专家</span><br><span class=\"line\">岗位要求</span><br><span class=\"line\">1.熟悉IDA Pro、GDB、JEB、lldb等常用逆向分析工具，具备较强的逆向分析能力，熟悉ARM、x86/64等指令集；</span><br><span class=\"line\">2.熟练掌握应用逆向的静态分析、动态调试、代码跟踪等；</span><br><span class=\"line\">3.负责对接业务安全需求与工具研发；</span><br><span class=\"line\">4.熟悉C/C++、Objective-C、python语言之中一个或多个；熟悉各种通用加密算法；</span><br><span class=\"line\">5.良好的逻辑思维能力和团队合作精神，善于交流和表达；</span><br><span class=\"line\"></span><br><span class=\"line\">加分项：</span><br><span class=\"line\">1.有一定的iOS越狱开发经验；</span><br><span class=\"line\">2.有安全编程相关经验, 熟悉业务安全技术对抗的常见技术手段；</span><br><span class=\"line\">3.多平台逆向经验(iOS/Android/Windows)</span><br><span class=\"line\">4.了解业务安全黑灰产；</span><br><span class=\"line\"></span><br><span class=\"line\">工作地点：北京/杭州</span><br><span class=\"line\">简历请投: lanjun007@alibaba-inc.com (简历快到碗里来吧)</span><br><span class=\"line\"></span><br><span class=\"line\">公司信息</span><br><span class=\"line\">上海某广告公司</span><br><span class=\"line\"></span><br><span class=\"line\">联系方式</span><br><span class=\"line\">电话:13818882062</span><br></pre></td></tr></table></figure>\n\n<p>示例二：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">职位名称</span><br><span class=\"line\">iOS逆向工程师</span><br><span class=\"line\"></span><br><span class=\"line\">职位职责</span><br><span class=\"line\">网络协议层逆向兼顾iOS远程控制开发</span><br><span class=\"line\"></span><br><span class=\"line\">职位要求</span><br><span class=\"line\">0.2-3年iOS开发经验</span><br><span class=\"line\">1.静态分析 IDA pro、Hopper Disassembler</span><br><span class=\"line\">2.动态分析 lldb、cycript、frida</span><br><span class=\"line\">3.网络分析 Charles(https)、Wireshark(socket)</span><br><span class=\"line\">4.视图分析 Reveal、Flex</span><br><span class=\"line\">5.编译工具 clang、cmake、theos、</span><br><span class=\"line\">6.注入工具 cynject、yololib、insert_dylib、optool、install_name_tool</span><br><span class=\"line\">7.砸壳工具 clutch、dumpdecrypted、dumpexec</span><br><span class=\"line\">8.Hook工具 MobileSubstrate、fishhook、HookZz、substitute、libcapstone</span><br><span class=\"line\">9.基础技能 签名、脱壳、class-dump、常用的命令行工具例如ssh、ps等</span><br><span class=\"line\">10.熟悉SpringBoard以及它依赖的framework加分</span><br><span class=\"line\">a.熟悉VideoToolBox编解码加分</span><br><span class=\"line\">b.熟悉Unity3D和cocos2D逆向或者正向开发加分</span><br><span class=\"line\">c.熟悉AppStore以及它交互的几个进程加分</span><br><span class=\"line\">d.自我驱动力强，态度比能力更重要</span><br><span class=\"line\">e.邮箱地址 请调试该app &lt;https://www.pgyer.com/crackme_&gt; 15</span><br><span class=\"line\">PS:0和d是硬性要求，不过要是0-1年时间技能到达了2-3年的也ok，还会加分。1-9项中的工具，单独掌握一种即可，自己研发的加分。a-c的经验多多益善</span><br><span class=\"line\"></span><br><span class=\"line\">工作地点: 上海徐汇</span><br><span class=\"line\">简历请投: 参考e项</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-IPA-包\"><a href=\"#1-IPA-包\" class=\"headerlink\" title=\"1. IPA 包\"></a>1. IPA 包</h2><h3 id=\"1-1-获取IPA包-Library-Group-Containers-K36BKF7T3D-group-com-apple-configurator-Library-Caches-Assets-TemporaryItems-MobileApps\"><a href=\"#1-1-获取IPA包-Library-Group-Containers-K36BKF7T3D-group-com-apple-configurator-Library-Caches-Assets-TemporaryItems-MobileApps\" class=\"headerlink\" title=\"1.1 [获取IPA包](~Library/Group\\ Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/)\"></a>1.1 [获取IPA包](~Library/Group\\ Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/)</h3><h3 id=\"1-2-Mac-o\"><a href=\"#1-2-Mac-o\" class=\"headerlink\" title=\"1.2 Mac-o\"></a>1.2 <a href=\"http://www.cocoachina.com/mac/20150122/10988.html\">Mac-o</a></h3><h3 id=\"1-3-MachOView\"><a href=\"#1-3-MachOView\" class=\"headerlink\" title=\"1.3 MachOView\"></a>1.3 <a href=\"https://sourceforge.net/projects/machoview/files/?source\">MachOView</a></h3><h3 id=\"1-4-iOS注入动态库\"><a href=\"#1-4-iOS注入动态库\" class=\"headerlink\" title=\"1.4  iOS注入动态库\"></a>1.4  <a href=\"https://www.jianshu.com/p/6c45da26040d\">iOS注入动态库</a></h3><h3 id=\"1-5-Mac-install-IPA\"><a href=\"#1-5-Mac-install-IPA\" class=\"headerlink\" title=\"1.5 Mac install IPA\"></a>1.5 <a href=\"https://www.jianshu.com/p/8568a8897489\">Mac install IPA</a></h3><h4 id=\"1-5-1-解决方案\"><a href=\"#1-5-1-解决方案\" class=\"headerlink\" title=\"1.5.1 解决方案\"></a>1.5.1 解决方案</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew uninstall --ignore-dependencies </span><br><span class=\"line\">libimobiledevice</span><br><span class=\"line\">brew uninstall --ignore-dependencies usbmuxd</span><br><span class=\"line\">brew install --HEAD usbmuxd</span><br><span class=\"line\">brew unlink usbmux</span><br><span class=\"line\">dbrew link usbmuxd</span><br><span class=\"line\">brew install --HEAD libimobiledevice</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-5-2-libimobiledevice-源码\"><a href=\"#1-5-2-libimobiledevice-源码\" class=\"headerlink\" title=\"1.5.2 libimobiledevice 源码\"></a>1.5.2 <a href=\"https://github.com/libimobiledevice\">libimobiledevice 源码</a></h4><h3 id=\"1-6-工具集\"><a href=\"#1-6-工具集\" class=\"headerlink\" title=\"1.6 工具集\"></a>1.6 工具集</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">idevice</span><br><span class=\"line\">atos</span><br><span class=\"line\">otool</span><br><span class=\"line\">sigh</span><br><span class=\"line\">mokeyDev、OpenDev</span><br><span class=\"line\">TheOS</span><br><span class=\"line\">rvictl</span><br><span class=\"line\">wireshark</span><br><span class=\"line\">charles</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-7-逆向工程师\"><a href=\"#1-7-逆向工程师\" class=\"headerlink\" title=\"1.7 逆向工程师\"></a>1.7 逆向工程师</h3><h4 id=\"1-7-1-要求\"><a href=\"#1-7-1-要求\" class=\"headerlink\" title=\"1.7.1 要求\"></a>1.7.1 要求</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“硬件构成、iOS系统的运行原理，还要具备丰富的iOS开发经验。”</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-7-2-逆向作用\"><a href=\"#1-7-2-逆向作用\" class=\"headerlink\" title=\"1.7.2 逆向作用\"></a>1.7.2 逆向作用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">恶意软件</span><br><span class=\"line\">去除限制</span><br><span class=\"line\">评定安全等级</span><br><span class=\"line\">检查后门</span><br><span class=\"line\">逆向iOS SDK？</span><br><span class=\"line\">借鉴</span><br><span class=\"line\">  WireLurker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-7-3-病毒\"><a href=\"#1-7-3-病毒\" class=\"headerlink\" title=\"1.7.3 病毒\"></a>1.7.3 病毒</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ikee -&gt; iOS：alpine</span><br><span class=\"line\">WireLurker</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-7-4-团队\"><a href=\"#1-7-4-团队\" class=\"headerlink\" title=\"1.7.4 团队\"></a>1.7.4 团队</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“evad3rs、盘古、太极”</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-7-5-iOS-逆向工具\"><a href=\"#1-7-5-iOS-逆向工具\" class=\"headerlink\" title=\"1.7.5 iOS 逆向工具\"></a>1.7.5 iOS 逆向工具</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、监测工具</span><br><span class=\"line\">   Reveal</span><br><span class=\"line\">   snoop-it</span><br><span class=\"line\">   introspy</span><br><span class=\"line\"></span><br><span class=\"line\"> 2、反汇编工具（disassembler）</span><br><span class=\"line\">   IDA</span><br><span class=\"line\">   Hopper</span><br><span class=\"line\">   Cydia:</span><br><span class=\"line\">     xsellize</span><br><span class=\"line\">     iFile（MAcOS: AFC2、iFunBox）</span><br><span class=\"line\">     SMSNinja</span><br><span class=\"line\"></span><br><span class=\"line\"> 3、调试工具（debugger）</span><br><span class=\"line\">   LLDB</span><br><span class=\"line\">   LLVM</span><br><span class=\"line\"></span><br><span class=\"line\"> 4、以及开发工具</span><br><span class=\"line\">   iOSOpenDev（Xcode）</span><br><span class=\"line\">   TheOS（command line）</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-7-6-获取-APP-bundleID\"><a href=\"#1-7-6-获取-APP-bundleID\" class=\"headerlink\" title=\"1.7.6 获取 APP bundleID\"></a>1.7.6 获取 APP bundleID</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo plutil -p smartpark.app/Info.plist | grep CFBundleIdentifier</span><br><span class=\"line\">&quot;CFBundleIdentifier&quot; =&gt; &quot;com.jieshun.hatc&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-7-7-逆向工程师招聘信息示例\"><a href=\"#1-7-7-逆向工程师招聘信息示例\" class=\"headerlink\" title=\"1.7.7 逆向工程师招聘信息示例\"></a>1.7.7 逆向工程师招聘信息示例</h4><p>示例一：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iOS高级安全工程师/专家</span><br><span class=\"line\">岗位要求</span><br><span class=\"line\">1.熟悉IDA Pro、GDB、JEB、lldb等常用逆向分析工具，具备较强的逆向分析能力，熟悉ARM、x86/64等指令集；</span><br><span class=\"line\">2.熟练掌握应用逆向的静态分析、动态调试、代码跟踪等；</span><br><span class=\"line\">3.负责对接业务安全需求与工具研发；</span><br><span class=\"line\">4.熟悉C/C++、Objective-C、python语言之中一个或多个；熟悉各种通用加密算法；</span><br><span class=\"line\">5.良好的逻辑思维能力和团队合作精神，善于交流和表达；</span><br><span class=\"line\"></span><br><span class=\"line\">加分项：</span><br><span class=\"line\">1.有一定的iOS越狱开发经验；</span><br><span class=\"line\">2.有安全编程相关经验, 熟悉业务安全技术对抗的常见技术手段；</span><br><span class=\"line\">3.多平台逆向经验(iOS/Android/Windows)</span><br><span class=\"line\">4.了解业务安全黑灰产；</span><br><span class=\"line\"></span><br><span class=\"line\">工作地点：北京/杭州</span><br><span class=\"line\">简历请投: lanjun007@alibaba-inc.com (简历快到碗里来吧)</span><br><span class=\"line\"></span><br><span class=\"line\">公司信息</span><br><span class=\"line\">上海某广告公司</span><br><span class=\"line\"></span><br><span class=\"line\">联系方式</span><br><span class=\"line\">电话:13818882062</span><br></pre></td></tr></table></figure>\n\n<p>示例二：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">职位名称</span><br><span class=\"line\">iOS逆向工程师</span><br><span class=\"line\"></span><br><span class=\"line\">职位职责</span><br><span class=\"line\">网络协议层逆向兼顾iOS远程控制开发</span><br><span class=\"line\"></span><br><span class=\"line\">职位要求</span><br><span class=\"line\">0.2-3年iOS开发经验</span><br><span class=\"line\">1.静态分析 IDA pro、Hopper Disassembler</span><br><span class=\"line\">2.动态分析 lldb、cycript、frida</span><br><span class=\"line\">3.网络分析 Charles(https)、Wireshark(socket)</span><br><span class=\"line\">4.视图分析 Reveal、Flex</span><br><span class=\"line\">5.编译工具 clang、cmake、theos、</span><br><span class=\"line\">6.注入工具 cynject、yololib、insert_dylib、optool、install_name_tool</span><br><span class=\"line\">7.砸壳工具 clutch、dumpdecrypted、dumpexec</span><br><span class=\"line\">8.Hook工具 MobileSubstrate、fishhook、HookZz、substitute、libcapstone</span><br><span class=\"line\">9.基础技能 签名、脱壳、class-dump、常用的命令行工具例如ssh、ps等</span><br><span class=\"line\">10.熟悉SpringBoard以及它依赖的framework加分</span><br><span class=\"line\">a.熟悉VideoToolBox编解码加分</span><br><span class=\"line\">b.熟悉Unity3D和cocos2D逆向或者正向开发加分</span><br><span class=\"line\">c.熟悉AppStore以及它交互的几个进程加分</span><br><span class=\"line\">d.自我驱动力强，态度比能力更重要</span><br><span class=\"line\">e.邮箱地址 请调试该app &lt;https://www.pgyer.com/crackme_&gt; 15</span><br><span class=\"line\">PS:0和d是硬性要求，不过要是0-1年时间技能到达了2-3年的也ok，还会加分。1-9项中的工具，单独掌握一种即可，自己研发的加分。a-c的经验多多益善</span><br><span class=\"line\"></span><br><span class=\"line\">工作地点: 上海徐汇</span><br><span class=\"line\">简历请投: 参考e项</span><br></pre></td></tr></table></figure>\n"},{"title":"iOS 之Xcode Debugging","date":"2021-05-04T23:49:00.000Z","abbrlink":45397,"_content":"\n## [Debugging](https://developer.apple.com/support/debugging/)\n","source":"_posts/iOS/Tools/Xcode.md","raw":"---\ntitle: iOS 之Xcode Debugging\ndate: '2021-05-05 07:49'\nabbrlink: 45397\ntags:\n---\n\n## [Debugging](https://developer.apple.com/support/debugging/)\n","slug":"iOS/Tools/Xcode","published":1,"updated":"2021-09-22T06:56:40.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2t002riu9khnr10uh1","content":"<h2 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a><a href=\"https://developer.apple.com/support/debugging/\">Debugging</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a><a href=\"https://developer.apple.com/support/debugging/\">Debugging</a></h2>"},{"title":"a-shell","abbrlink":8786,"date":"2021-08-10T06:40:02.000Z","_content":"\n在 iOS 设备上提供类 Unix 终端命令的工具。\n\n## 1. 命令\n\n```shell\n## 打开新窗口\nnewWindow\n## 关闭当前窗口\nexit\n## 列举所有可用命令\nhelp -l\n```\n\n## 2. 主目录\n\n默认有权限的目录：\n\n`~/Documents/`, `~/Library/` and `~/tmp`\n\n### 2.1 访问 APP 目录\n\n```shell\npickFolder\n```\n\n### 2.2 沙盒&书签\n\n```shell\n## 给当前目录加书签\nbookmark\n## 列举所有书签\nshowmarks\n## 跳转到书签\njump mark\n## 重命名书签\nrenamemark\n## 删除书签\ndeletemark\n```\n\n## 3. 快捷方式\n\n`Execute Command` 顺序执行命令集合，可以是命令文件，或者命令文本 node\n\n`Put File` and `Get File` 用来收发文件\n\n快捷方式有两种执行方式：APP 拓展（推荐）里 或者 APP 里\n\n`open shortcuts://` 从打开的命令中返回\n\n## 4. 更多\n\na-shell 安装了： `Python, Lua, JS, C, C++ and TeX.` 这些环境。\n\n### 4.1 C++\n\n编译：`clang program.c`\n\n汇编：`wasm a.out`\n\n链接：`ar`\n\n[可使用工具](https://github.com/holzschu/a-Shell-commands)：`zip, unzip, xz, ffmpeg`\n\n### 4.2 Python\n\n`pip install packagename`\n\n### 4.3 TeX\n\n这个默认没安装，输入任意 TeX 命令，将会提示安装 TeX。LuaTeX 也是一样的。\n","source":"_posts/iOS/Tools/a-shell.md","raw":"---\ntitle: a-shell\nabbrlink: 8786\ndate: 2021-08-10 14:40:02\ntags:\n---\n\n在 iOS 设备上提供类 Unix 终端命令的工具。\n\n## 1. 命令\n\n```shell\n## 打开新窗口\nnewWindow\n## 关闭当前窗口\nexit\n## 列举所有可用命令\nhelp -l\n```\n\n## 2. 主目录\n\n默认有权限的目录：\n\n`~/Documents/`, `~/Library/` and `~/tmp`\n\n### 2.1 访问 APP 目录\n\n```shell\npickFolder\n```\n\n### 2.2 沙盒&书签\n\n```shell\n## 给当前目录加书签\nbookmark\n## 列举所有书签\nshowmarks\n## 跳转到书签\njump mark\n## 重命名书签\nrenamemark\n## 删除书签\ndeletemark\n```\n\n## 3. 快捷方式\n\n`Execute Command` 顺序执行命令集合，可以是命令文件，或者命令文本 node\n\n`Put File` and `Get File` 用来收发文件\n\n快捷方式有两种执行方式：APP 拓展（推荐）里 或者 APP 里\n\n`open shortcuts://` 从打开的命令中返回\n\n## 4. 更多\n\na-shell 安装了： `Python, Lua, JS, C, C++ and TeX.` 这些环境。\n\n### 4.1 C++\n\n编译：`clang program.c`\n\n汇编：`wasm a.out`\n\n链接：`ar`\n\n[可使用工具](https://github.com/holzschu/a-Shell-commands)：`zip, unzip, xz, ffmpeg`\n\n### 4.2 Python\n\n`pip install packagename`\n\n### 4.3 TeX\n\n这个默认没安装，输入任意 TeX 命令，将会提示安装 TeX。LuaTeX 也是一样的。\n","slug":"iOS/Tools/a-shell","published":1,"updated":"2021-09-22T06:56:40.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2w002siu9k0cdg0gnc","content":"<p>在 iOS 设备上提供类 Unix 终端命令的工具。</p>\n<h2 id=\"1-命令\"><a href=\"#1-命令\" class=\"headerlink\" title=\"1. 命令\"></a>1. 命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 打开新窗口</span></span></span><br><span class=\"line\">newWindow</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 关闭当前窗口</span></span></span><br><span class=\"line\">exit</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 列举所有可用命令</span></span></span><br><span class=\"line\">help -l</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-主目录\"><a href=\"#2-主目录\" class=\"headerlink\" title=\"2. 主目录\"></a>2. 主目录</h2><p>默认有权限的目录：</p>\n<p><code>~/Documents/</code>, <code>~/Library/</code> and <code>~/tmp</code></p>\n<h3 id=\"2-1-访问-APP-目录\"><a href=\"#2-1-访问-APP-目录\" class=\"headerlink\" title=\"2.1 访问 APP 目录\"></a>2.1 访问 APP 目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pickFolder</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-沙盒-amp-书签\"><a href=\"#2-2-沙盒-amp-书签\" class=\"headerlink\" title=\"2.2 沙盒&amp;书签\"></a>2.2 沙盒&amp;书签</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 给当前目录加书签</span></span></span><br><span class=\"line\">bookmark</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 列举所有书签</span></span></span><br><span class=\"line\">showmarks</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 跳转到书签</span></span></span><br><span class=\"line\">jump mark</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 重命名书签</span></span></span><br><span class=\"line\">renamemark</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 删除书签</span></span></span><br><span class=\"line\">deletemark</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-快捷方式\"><a href=\"#3-快捷方式\" class=\"headerlink\" title=\"3. 快捷方式\"></a>3. 快捷方式</h2><p><code>Execute Command</code> 顺序执行命令集合，可以是命令文件，或者命令文本 node</p>\n<p><code>Put File</code> and <code>Get File</code> 用来收发文件</p>\n<p>快捷方式有两种执行方式：APP 拓展（推荐）里 或者 APP 里</p>\n<p><code>open shortcuts://</code> 从打开的命令中返回</p>\n<h2 id=\"4-更多\"><a href=\"#4-更多\" class=\"headerlink\" title=\"4. 更多\"></a>4. 更多</h2><p>a-shell 安装了： <code>Python, Lua, JS, C, C++ and TeX.</code> 这些环境。</p>\n<h3 id=\"4-1-C\"><a href=\"#4-1-C\" class=\"headerlink\" title=\"4.1 C++\"></a>4.1 C++</h3><p>编译：<code>clang program.c</code></p>\n<p>汇编：<code>wasm a.out</code></p>\n<p>链接：<code>ar</code></p>\n<p><a href=\"https://github.com/holzschu/a-Shell-commands\">可使用工具</a>：<code>zip, unzip, xz, ffmpeg</code></p>\n<h3 id=\"4-2-Python\"><a href=\"#4-2-Python\" class=\"headerlink\" title=\"4.2 Python\"></a>4.2 Python</h3><p><code>pip install packagename</code></p>\n<h3 id=\"4-3-TeX\"><a href=\"#4-3-TeX\" class=\"headerlink\" title=\"4.3 TeX\"></a>4.3 TeX</h3><p>这个默认没安装，输入任意 TeX 命令，将会提示安装 TeX。LuaTeX 也是一样的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 iOS 设备上提供类 Unix 终端命令的工具。</p>\n<h2 id=\"1-命令\"><a href=\"#1-命令\" class=\"headerlink\" title=\"1. 命令\"></a>1. 命令</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 打开新窗口</span></span></span><br><span class=\"line\">newWindow</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 关闭当前窗口</span></span></span><br><span class=\"line\">exit</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 列举所有可用命令</span></span></span><br><span class=\"line\">help -l</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-主目录\"><a href=\"#2-主目录\" class=\"headerlink\" title=\"2. 主目录\"></a>2. 主目录</h2><p>默认有权限的目录：</p>\n<p><code>~/Documents/</code>, <code>~/Library/</code> and <code>~/tmp</code></p>\n<h3 id=\"2-1-访问-APP-目录\"><a href=\"#2-1-访问-APP-目录\" class=\"headerlink\" title=\"2.1 访问 APP 目录\"></a>2.1 访问 APP 目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pickFolder</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-沙盒-amp-书签\"><a href=\"#2-2-沙盒-amp-书签\" class=\"headerlink\" title=\"2.2 沙盒&amp;书签\"></a>2.2 沙盒&amp;书签</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 给当前目录加书签</span></span></span><br><span class=\"line\">bookmark</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 列举所有书签</span></span></span><br><span class=\"line\">showmarks</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 跳转到书签</span></span></span><br><span class=\"line\">jump mark</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 重命名书签</span></span></span><br><span class=\"line\">renamemark</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># 删除书签</span></span></span><br><span class=\"line\">deletemark</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-快捷方式\"><a href=\"#3-快捷方式\" class=\"headerlink\" title=\"3. 快捷方式\"></a>3. 快捷方式</h2><p><code>Execute Command</code> 顺序执行命令集合，可以是命令文件，或者命令文本 node</p>\n<p><code>Put File</code> and <code>Get File</code> 用来收发文件</p>\n<p>快捷方式有两种执行方式：APP 拓展（推荐）里 或者 APP 里</p>\n<p><code>open shortcuts://</code> 从打开的命令中返回</p>\n<h2 id=\"4-更多\"><a href=\"#4-更多\" class=\"headerlink\" title=\"4. 更多\"></a>4. 更多</h2><p>a-shell 安装了： <code>Python, Lua, JS, C, C++ and TeX.</code> 这些环境。</p>\n<h3 id=\"4-1-C\"><a href=\"#4-1-C\" class=\"headerlink\" title=\"4.1 C++\"></a>4.1 C++</h3><p>编译：<code>clang program.c</code></p>\n<p>汇编：<code>wasm a.out</code></p>\n<p>链接：<code>ar</code></p>\n<p><a href=\"https://github.com/holzschu/a-Shell-commands\">可使用工具</a>：<code>zip, unzip, xz, ffmpeg</code></p>\n<h3 id=\"4-2-Python\"><a href=\"#4-2-Python\" class=\"headerlink\" title=\"4.2 Python\"></a>4.2 Python</h3><p><code>pip install packagename</code></p>\n<h3 id=\"4-3-TeX\"><a href=\"#4-3-TeX\" class=\"headerlink\" title=\"4.3 TeX\"></a>4.3 TeX</h3><p>这个默认没安装，输入任意 TeX 命令，将会提示安装 TeX。LuaTeX 也是一样的。</p>\n"},{"title":"iOS 之开发工具","abbrlink":"98b688e0","date":"2021-04-20T13:36:02.000Z","_content":"\n* 抓包工具：Charles\n* 快捷键工具：cheatsheet\n* 流程图工具：OmniGraffle\n* IPA安装工具：iTools\n* Applescript 编辑器：ScriptDebug\n* 翻墙工具：Lantern\n* 命令行工具：Terminal（平时要多用）\n* MarkDown编辑器：MacDown (免费的)\n* 代码编辑器：Sublime（收费）、Atom（开源免费）\n","source":"_posts/iOS/Tools/iOSTools.md","raw":"---\ntitle: iOS 之开发工具\nabbrlink: 98b688e0\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n* 抓包工具：Charles\n* 快捷键工具：cheatsheet\n* 流程图工具：OmniGraffle\n* IPA安装工具：iTools\n* Applescript 编辑器：ScriptDebug\n* 翻墙工具：Lantern\n* 命令行工具：Terminal（平时要多用）\n* MarkDown编辑器：MacDown (免费的)\n* 代码编辑器：Sublime（收费）、Atom（开源免费）\n","slug":"iOS/Tools/iOSTools","published":1,"updated":"2021-07-29T06:45:59.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2x002tiu9kdjvf85cp","content":"<ul>\n<li>抓包工具：Charles</li>\n<li>快捷键工具：cheatsheet</li>\n<li>流程图工具：OmniGraffle</li>\n<li>IPA安装工具：iTools</li>\n<li>Applescript 编辑器：ScriptDebug</li>\n<li>翻墙工具：Lantern</li>\n<li>命令行工具：Terminal（平时要多用）</li>\n<li>MarkDown编辑器：MacDown (免费的)</li>\n<li>代码编辑器：Sublime（收费）、Atom（开源免费）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>抓包工具：Charles</li>\n<li>快捷键工具：cheatsheet</li>\n<li>流程图工具：OmniGraffle</li>\n<li>IPA安装工具：iTools</li>\n<li>Applescript 编辑器：ScriptDebug</li>\n<li>翻墙工具：Lantern</li>\n<li>命令行工具：Terminal（平时要多用）</li>\n<li>MarkDown编辑器：MacDown (免费的)</li>\n<li>代码编辑器：Sublime（收费）、Atom（开源免费）</li>\n</ul>\n"},{"title":"iOS之移动端跨端技术及原理","abbrlink":"65506eb3","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [JS-Native 通信技术](https://mp.weixin.qq.com/s/_Xo6O3NoE1z9AIMJm_uSsA)\n\n## 1.1 postMessage （iOS WKWebview）\n\n这种方式是在 iOS 中处理消息非常方便，但是在 Android 中并不支持。\n\nweb 端发送消息:\n\n```javaScript\nwindow.webkit.messageHandlers.SYJSBridge.postMessage(msg);\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)userContentController:(WKUserContentController *)uc\ndidReceiveScriptMessage:(WKScriptMessage *)message\n{\n    // 处理消息\n}\n```\n\n## 1.2 prompt（iOS、Android、WebView）\n\n巧用 webview 的弹窗，弹窗内容定义消息体。\n\nweb 端发送消息：\n\n```javascript\nwindow.prompt(msg);\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)webView:(WKWebView *)webView \nrunJavaScriptTextInputPanelWithPrompt:(NSString *)prompt \ndefaultText:(NSString *)defaultText \ninitiatedByFrame:(WKFrameInfo *)frame \ncompletionHandler:(void (^)(NSString *))completionHandler\n{\n    completionHandler(@\"OC input\");\n}\n```\n\n## 1.3 iframe（iOS、Android、WebView）\n\n创建一个隐形的 iframe，Native 侧会收到一个请求，可以通过请求地址来做一个处理，达到通信的目的。\n\nweb 端发送消息：\n\n```javascript\nconst callIframe = function(url) {\n  var iframe = document.createElement('iframe');\n  iframe.src = url;\n  document.body.appendChild(iframe);\n  document.body.removeChild(iframe);\n}\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)webView:(WKWebView *)webView\ndecidePolicyForNavigationAction:(WKNavigationAction *)na \ndecisionHandler:(void (^)(WKNavigationActionPolicy))h {\n    NSLog(@\"%@\", NSStringFromSelector(_cmd));\n    decisionHandler(WKNavigationActionPolicyAllow);\n}\n```\n\n## 1.4 注入 JS\n\n  这种方式主要通过 webview 提供的 API 向 JavaScript 执行引擎中注入 JavaScript 代码。下面的代码在页面加载时注入了一个 add 函数，这个函数被挂载到了 window 下，在网页中可直接调用。\n\niOS 端实现：\n\n```objective-c\nWKUserScript *script = [[WKUserScript alloc] \ninitWithSource:@\"function add(a, b) { return a + b; }\"\ninjectionTime:WKUserScriptInjectionTimeAtDocumentStart \nforMainFrameOnly:YES];\n[webview.configuration.userContentController addUserScript:script];\n```\n\n### 1.5 location.href （iOS、Android、WebView）\n\n这种方式和 1.3 方法类似，不过需要对做通信 API 的路由做拦截处理，否则会跳转到新的页面。\n\nweb 端发送消息：\n\n```javascript\nwindow.location.href = url;\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)webView:(WKWebView *)webView \ndecidePolicyForNavigationAction:(WKNavigationAction *)na \ndecisionHandler:(void (^)(WKNavigationActionPolicy))d {\n    NSLog(@\"%@\", NSStringFromSelector(_cmd));\n    if ([na.request.URL.absoluteString containsString:@\"suyan\"]) {\n        d(WKNavigationActionPolicyCancel);\n    }\n    else {\n        d(WKNavigationActionPolicyAllow);\n    }\n}\n```\n\n### 1.6 addJavaScriptInterface （Android、WebView）\n\n把一个 Java 对象注入到 JavaScript 执行环境当中，使得在 webivew 中可直接调用该方法，间接调用 Native 方法。\n\n## 2. 常见跨端方案\n\n### 2.1 React-Native & WeeX\n\n#### 2.1.1 [React-Native](https://www.react-native.cn/docs/getting-started)\n\n#### 2.1.2 [WeeX](https://weex.apache.org/zh/docs/api/weex-variable.html)\n\n#### 2.1.3 [Hippy](https://github.com/Tencent/Hippy/blob/master/README.zh_CN.md)\n\n### 2.2 [Flutter](https://flutterchina.club/docs/)\n\n### 2.3 [JavaScriptCore](https://trac.webkit.org/wiki/JavaScriptCore)\n\n#### 2.3.1 [iOS 版](https://developer.apple.com/documentation/javascriptcore)\n\n### 2.4 [JSPatch](https://github.com/bang590/JSPatch/wiki)\n\n### 2.5 [WKWebViewBridgeHandler](https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md)\n\n### 2.6 [Capacitor](https://capacitorjs.com/docs/v3)\n\n#### 2.6.1 [cordova](https://capacitorjs.com/docs/v3/cordova)\n\n#### 2.6.2 [PhoneGap](https://github.com/phonegap)\n\n##### 2.6.2.1 参考资料\n\n1. [PhoneGap 手机 Web 应用开发平台](https://www.oschina.net/p/phonegap?hmsr=aladdin1e1)\n\n#### 2.6.3 [Ionic](https://ionicframework.com/docs)\n\n### 2.7 [DCloud](https://ask.dcloud.net.cn/docs/)\n\n### 2.8 [Xamarin](https://docs.microsoft.com/zh-cn/xamarin/)\n\n### 2.9 PWA & 轻应用 & 小程序 等\n\n#### 2.9.1 [PWA](https://capacitorjs.com/docs/v3/web)  \n\n#### 2.9.2 [轻应用](https://uniapp.dcloud.io/history)\n\n### 2.10 [QT](https://doc.qt.io/qt-6/mobiledevelopment.html)\n\n轻应用、流应用\n\n### 2.9.3 小程序\n\n#### 1. [微信小程序](https://developers.weixin.qq.com/miniprogram/dev/framework/)\n\n#### 2. [uni-app](https://uniapp.dcloud.io/)\n\n小程序联盟\n\n## 3. 源码解读\n\n### 3.1 源码阅读\n\n### 3.1.1 [JSPatch](https://github.com/bang590/JSPatch/wiki)\n\n### 3.1.2 [WKWebViewBridgeHandler]\n\n1. [WKWebViewBridgeHandler](https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md)\n\n2. [iOS系列之WebViewJavascriptBridge源码分析](http://www.zyiner.com/article/3)\n\n库结构图、使用的通信技术、通讯方式\n\n### 3.2 推荐阅读博客\n\n* 戴明的[深入剖析 JavaScriptCore](https://ming1016.github.io/2018/04/21/deeply-analyse-javascriptcore/)\n* 戴明的[深入剖析 JavaScript 编译器/解释器引擎 QuickJS](https://ming1016.github.io/2021/02/21/deeply-analyse-quickjs/)\n* 戴明的[深入剖析 WebKit](https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/)\n\n## 4. 跨端常讨论的问题\n\n### 4.1 性能\n\n### 4.2 交互体验\n\n### 4.3 社区（基础建筑）完备性\n\n### 4.4 未来前景探讨\n\n### 4.4.1 [为什么说现在 React Native 凉了？](https://www.zhihu.com/question/266630840/answer/312188874)\n\n### 4.4.2 [Flutter 正在被悄悄放弃吗？](https://mp.weixin.qq.com/s/hDjbMSPNz_D5JeEBMEJZCA)\n\n### 4.4.3 [Flutter 2 正式发布！](https://mp.weixin.qq.com/s/tJe2ScLgKWFTybpBtDl2TA)\n\n### 4.5 人力/资源节省\n\n## 5. 其他 Mobile Web 技术/方案\n\n### 5.1 [VasSonic](https://github.com/Tencent/VasSonic/wiki)\n\n## 6. 期待\n\n### 6.1 [鸿蒙](https://developer.harmonyos.com/cn/documentation)\n\n### 6.2 统一\n\n1. 有一个统一的、通用的系统；\n2. 有一门流行的统一的[元]语言：有处理前后端、脚本、硬件的能力；\n3. 计算机行业基础、设计、开放标准；\n\n* 网络协议就是个很好的概念\n","source":"_posts/iOS/Webs/Hybrids.md","raw":"---\ntitle: iOS之移动端跨端技术及原理\nabbrlink: 65506eb3\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [JS-Native 通信技术](https://mp.weixin.qq.com/s/_Xo6O3NoE1z9AIMJm_uSsA)\n\n## 1.1 postMessage （iOS WKWebview）\n\n这种方式是在 iOS 中处理消息非常方便，但是在 Android 中并不支持。\n\nweb 端发送消息:\n\n```javaScript\nwindow.webkit.messageHandlers.SYJSBridge.postMessage(msg);\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)userContentController:(WKUserContentController *)uc\ndidReceiveScriptMessage:(WKScriptMessage *)message\n{\n    // 处理消息\n}\n```\n\n## 1.2 prompt（iOS、Android、WebView）\n\n巧用 webview 的弹窗，弹窗内容定义消息体。\n\nweb 端发送消息：\n\n```javascript\nwindow.prompt(msg);\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)webView:(WKWebView *)webView \nrunJavaScriptTextInputPanelWithPrompt:(NSString *)prompt \ndefaultText:(NSString *)defaultText \ninitiatedByFrame:(WKFrameInfo *)frame \ncompletionHandler:(void (^)(NSString *))completionHandler\n{\n    completionHandler(@\"OC input\");\n}\n```\n\n## 1.3 iframe（iOS、Android、WebView）\n\n创建一个隐形的 iframe，Native 侧会收到一个请求，可以通过请求地址来做一个处理，达到通信的目的。\n\nweb 端发送消息：\n\n```javascript\nconst callIframe = function(url) {\n  var iframe = document.createElement('iframe');\n  iframe.src = url;\n  document.body.appendChild(iframe);\n  document.body.removeChild(iframe);\n}\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)webView:(WKWebView *)webView\ndecidePolicyForNavigationAction:(WKNavigationAction *)na \ndecisionHandler:(void (^)(WKNavigationActionPolicy))h {\n    NSLog(@\"%@\", NSStringFromSelector(_cmd));\n    decisionHandler(WKNavigationActionPolicyAllow);\n}\n```\n\n## 1.4 注入 JS\n\n  这种方式主要通过 webview 提供的 API 向 JavaScript 执行引擎中注入 JavaScript 代码。下面的代码在页面加载时注入了一个 add 函数，这个函数被挂载到了 window 下，在网页中可直接调用。\n\niOS 端实现：\n\n```objective-c\nWKUserScript *script = [[WKUserScript alloc] \ninitWithSource:@\"function add(a, b) { return a + b; }\"\ninjectionTime:WKUserScriptInjectionTimeAtDocumentStart \nforMainFrameOnly:YES];\n[webview.configuration.userContentController addUserScript:script];\n```\n\n### 1.5 location.href （iOS、Android、WebView）\n\n这种方式和 1.3 方法类似，不过需要对做通信 API 的路由做拦截处理，否则会跳转到新的页面。\n\nweb 端发送消息：\n\n```javascript\nwindow.location.href = url;\n```\n\niOS 端接受消息：\n\n```objective-c\n- (void)webView:(WKWebView *)webView \ndecidePolicyForNavigationAction:(WKNavigationAction *)na \ndecisionHandler:(void (^)(WKNavigationActionPolicy))d {\n    NSLog(@\"%@\", NSStringFromSelector(_cmd));\n    if ([na.request.URL.absoluteString containsString:@\"suyan\"]) {\n        d(WKNavigationActionPolicyCancel);\n    }\n    else {\n        d(WKNavigationActionPolicyAllow);\n    }\n}\n```\n\n### 1.6 addJavaScriptInterface （Android、WebView）\n\n把一个 Java 对象注入到 JavaScript 执行环境当中，使得在 webivew 中可直接调用该方法，间接调用 Native 方法。\n\n## 2. 常见跨端方案\n\n### 2.1 React-Native & WeeX\n\n#### 2.1.1 [React-Native](https://www.react-native.cn/docs/getting-started)\n\n#### 2.1.2 [WeeX](https://weex.apache.org/zh/docs/api/weex-variable.html)\n\n#### 2.1.3 [Hippy](https://github.com/Tencent/Hippy/blob/master/README.zh_CN.md)\n\n### 2.2 [Flutter](https://flutterchina.club/docs/)\n\n### 2.3 [JavaScriptCore](https://trac.webkit.org/wiki/JavaScriptCore)\n\n#### 2.3.1 [iOS 版](https://developer.apple.com/documentation/javascriptcore)\n\n### 2.4 [JSPatch](https://github.com/bang590/JSPatch/wiki)\n\n### 2.5 [WKWebViewBridgeHandler](https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md)\n\n### 2.6 [Capacitor](https://capacitorjs.com/docs/v3)\n\n#### 2.6.1 [cordova](https://capacitorjs.com/docs/v3/cordova)\n\n#### 2.6.2 [PhoneGap](https://github.com/phonegap)\n\n##### 2.6.2.1 参考资料\n\n1. [PhoneGap 手机 Web 应用开发平台](https://www.oschina.net/p/phonegap?hmsr=aladdin1e1)\n\n#### 2.6.3 [Ionic](https://ionicframework.com/docs)\n\n### 2.7 [DCloud](https://ask.dcloud.net.cn/docs/)\n\n### 2.8 [Xamarin](https://docs.microsoft.com/zh-cn/xamarin/)\n\n### 2.9 PWA & 轻应用 & 小程序 等\n\n#### 2.9.1 [PWA](https://capacitorjs.com/docs/v3/web)  \n\n#### 2.9.2 [轻应用](https://uniapp.dcloud.io/history)\n\n### 2.10 [QT](https://doc.qt.io/qt-6/mobiledevelopment.html)\n\n轻应用、流应用\n\n### 2.9.3 小程序\n\n#### 1. [微信小程序](https://developers.weixin.qq.com/miniprogram/dev/framework/)\n\n#### 2. [uni-app](https://uniapp.dcloud.io/)\n\n小程序联盟\n\n## 3. 源码解读\n\n### 3.1 源码阅读\n\n### 3.1.1 [JSPatch](https://github.com/bang590/JSPatch/wiki)\n\n### 3.1.2 [WKWebViewBridgeHandler]\n\n1. [WKWebViewBridgeHandler](https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md)\n\n2. [iOS系列之WebViewJavascriptBridge源码分析](http://www.zyiner.com/article/3)\n\n库结构图、使用的通信技术、通讯方式\n\n### 3.2 推荐阅读博客\n\n* 戴明的[深入剖析 JavaScriptCore](https://ming1016.github.io/2018/04/21/deeply-analyse-javascriptcore/)\n* 戴明的[深入剖析 JavaScript 编译器/解释器引擎 QuickJS](https://ming1016.github.io/2021/02/21/deeply-analyse-quickjs/)\n* 戴明的[深入剖析 WebKit](https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/)\n\n## 4. 跨端常讨论的问题\n\n### 4.1 性能\n\n### 4.2 交互体验\n\n### 4.3 社区（基础建筑）完备性\n\n### 4.4 未来前景探讨\n\n### 4.4.1 [为什么说现在 React Native 凉了？](https://www.zhihu.com/question/266630840/answer/312188874)\n\n### 4.4.2 [Flutter 正在被悄悄放弃吗？](https://mp.weixin.qq.com/s/hDjbMSPNz_D5JeEBMEJZCA)\n\n### 4.4.3 [Flutter 2 正式发布！](https://mp.weixin.qq.com/s/tJe2ScLgKWFTybpBtDl2TA)\n\n### 4.5 人力/资源节省\n\n## 5. 其他 Mobile Web 技术/方案\n\n### 5.1 [VasSonic](https://github.com/Tencent/VasSonic/wiki)\n\n## 6. 期待\n\n### 6.1 [鸿蒙](https://developer.harmonyos.com/cn/documentation)\n\n### 6.2 统一\n\n1. 有一个统一的、通用的系统；\n2. 有一门流行的统一的[元]语言：有处理前后端、脚本、硬件的能力；\n3. 计算机行业基础、设计、开放标准；\n\n* 网络协议就是个很好的概念\n","slug":"iOS/Webs/Hybrids","published":1,"updated":"2021-07-29T06:45:59.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2y002uiu9k3pd47sij","content":"<h2 id=\"1-JS-Native-通信技术\"><a href=\"#1-JS-Native-通信技术\" class=\"headerlink\" title=\"1. JS-Native 通信技术\"></a>1. <a href=\"https://mp.weixin.qq.com/s/_Xo6O3NoE1z9AIMJm_uSsA\">JS-Native 通信技术</a></h2><h2 id=\"1-1-postMessage-（iOS-WKWebview）\"><a href=\"#1-1-postMessage-（iOS-WKWebview）\" class=\"headerlink\" title=\"1.1 postMessage （iOS WKWebview）\"></a>1.1 postMessage （iOS WKWebview）</h2><p>这种方式是在 iOS 中处理消息非常方便，但是在 Android 中并不支持。</p>\n<p>web 端发送消息:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.webkit.messageHandlers.SYJSBridge.postMessage(msg);</span><br></pre></td></tr></table></figure>\n\n<p>iOS 端接受消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)userContentController:(WKUserContentController *)uc</span><br><span class=\"line\">didReceiveScriptMessage:(WKScriptMessage *)message</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 处理消息</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-prompt（iOS、Android、WebView）\"><a href=\"#1-2-prompt（iOS、Android、WebView）\" class=\"headerlink\" title=\"1.2 prompt（iOS、Android、WebView）\"></a>1.2 prompt（iOS、Android、WebView）</h2><p>巧用 webview 的弹窗，弹窗内容定义消息体。</p>\n<p>web 端发送消息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.prompt(msg);</span><br></pre></td></tr></table></figure>\n\n<p>iOS 端接受消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)webView:(WKWebView *)webView </span><br><span class=\"line\">runJavaScriptTextInputPanelWithPrompt:(NSString *)prompt </span><br><span class=\"line\">defaultText:(NSString *)defaultText </span><br><span class=\"line\">initiatedByFrame:(WKFrameInfo *)frame </span><br><span class=\"line\">completionHandler:(void (^)(NSString *))completionHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    completionHandler(@&quot;OC input&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-3-iframe（iOS、Android、WebView）\"><a href=\"#1-3-iframe（iOS、Android、WebView）\" class=\"headerlink\" title=\"1.3 iframe（iOS、Android、WebView）\"></a>1.3 iframe（iOS、Android、WebView）</h2><p>创建一个隐形的 iframe，Native 侧会收到一个请求，可以通过请求地址来做一个处理，达到通信的目的。</p>\n<p>web 端发送消息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callIframe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;iframe&#x27;</span>);</span><br><span class=\"line\">  iframe.src = url;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.removeChild(iframe);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>iOS 端接受消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)webView:(WKWebView *)webView</span><br><span class=\"line\">decidePolicyForNavigationAction:(WKNavigationAction *)na </span><br><span class=\"line\">decisionHandler:(void (^)(WKNavigationActionPolicy))h &#123;</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, NSStringFromSelector(_cmd));</span><br><span class=\"line\">    decisionHandler(WKNavigationActionPolicyAllow);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-4-注入-JS\"><a href=\"#1-4-注入-JS\" class=\"headerlink\" title=\"1.4 注入 JS\"></a>1.4 注入 JS</h2><p>  这种方式主要通过 webview 提供的 API 向 JavaScript 执行引擎中注入 JavaScript 代码。下面的代码在页面加载时注入了一个 add 函数，这个函数被挂载到了 window 下，在网页中可直接调用。</p>\n<p>iOS 端实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WKUserScript *script = [[WKUserScript alloc] </span><br><span class=\"line\">initWithSource:@&quot;function add(a, b) &#123; return a + b; &#125;&quot;</span><br><span class=\"line\">injectionTime:WKUserScriptInjectionTimeAtDocumentStart </span><br><span class=\"line\">forMainFrameOnly:YES];</span><br><span class=\"line\">[webview.configuration.userContentController addUserScript:script];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-5-location-href-（iOS、Android、WebView）\"><a href=\"#1-5-location-href-（iOS、Android、WebView）\" class=\"headerlink\" title=\"1.5 location.href （iOS、Android、WebView）\"></a>1.5 location.href （iOS、Android、WebView）</h3><p>这种方式和 1.3 方法类似，不过需要对做通信 API 的路由做拦截处理，否则会跳转到新的页面。</p>\n<p>web 端发送消息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location.href = url;</span><br></pre></td></tr></table></figure>\n\n<p>iOS 端接受消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)webView:(WKWebView *)webView </span><br><span class=\"line\">decidePolicyForNavigationAction:(WKNavigationAction *)na </span><br><span class=\"line\">decisionHandler:(void (^)(WKNavigationActionPolicy))d &#123;</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, NSStringFromSelector(_cmd));</span><br><span class=\"line\">    if ([na.request.URL.absoluteString containsString:@&quot;suyan&quot;]) &#123;</span><br><span class=\"line\">        d(WKNavigationActionPolicyCancel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        d(WKNavigationActionPolicyAllow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-addJavaScriptInterface-（Android、WebView）\"><a href=\"#1-6-addJavaScriptInterface-（Android、WebView）\" class=\"headerlink\" title=\"1.6 addJavaScriptInterface （Android、WebView）\"></a>1.6 addJavaScriptInterface （Android、WebView）</h3><p>把一个 Java 对象注入到 JavaScript 执行环境当中，使得在 webivew 中可直接调用该方法，间接调用 Native 方法。</p>\n<h2 id=\"2-常见跨端方案\"><a href=\"#2-常见跨端方案\" class=\"headerlink\" title=\"2. 常见跨端方案\"></a>2. 常见跨端方案</h2><h3 id=\"2-1-React-Native-amp-WeeX\"><a href=\"#2-1-React-Native-amp-WeeX\" class=\"headerlink\" title=\"2.1 React-Native &amp; WeeX\"></a>2.1 React-Native &amp; WeeX</h3><h4 id=\"2-1-1-React-Native\"><a href=\"#2-1-1-React-Native\" class=\"headerlink\" title=\"2.1.1 React-Native\"></a>2.1.1 <a href=\"https://www.react-native.cn/docs/getting-started\">React-Native</a></h4><h4 id=\"2-1-2-WeeX\"><a href=\"#2-1-2-WeeX\" class=\"headerlink\" title=\"2.1.2 WeeX\"></a>2.1.2 <a href=\"https://weex.apache.org/zh/docs/api/weex-variable.html\">WeeX</a></h4><h4 id=\"2-1-3-Hippy\"><a href=\"#2-1-3-Hippy\" class=\"headerlink\" title=\"2.1.3 Hippy\"></a>2.1.3 <a href=\"https://github.com/Tencent/Hippy/blob/master/README.zh_CN.md\">Hippy</a></h4><h3 id=\"2-2-Flutter\"><a href=\"#2-2-Flutter\" class=\"headerlink\" title=\"2.2 Flutter\"></a>2.2 <a href=\"https://flutterchina.club/docs/\">Flutter</a></h3><h3 id=\"2-3-JavaScriptCore\"><a href=\"#2-3-JavaScriptCore\" class=\"headerlink\" title=\"2.3 JavaScriptCore\"></a>2.3 <a href=\"https://trac.webkit.org/wiki/JavaScriptCore\">JavaScriptCore</a></h3><h4 id=\"2-3-1-iOS-版\"><a href=\"#2-3-1-iOS-版\" class=\"headerlink\" title=\"2.3.1 iOS 版\"></a>2.3.1 <a href=\"https://developer.apple.com/documentation/javascriptcore\">iOS 版</a></h4><h3 id=\"2-4-JSPatch\"><a href=\"#2-4-JSPatch\" class=\"headerlink\" title=\"2.4 JSPatch\"></a>2.4 <a href=\"https://github.com/bang590/JSPatch/wiki\">JSPatch</a></h3><h3 id=\"2-5-WKWebViewBridgeHandler\"><a href=\"#2-5-WKWebViewBridgeHandler\" class=\"headerlink\" title=\"2.5 WKWebViewBridgeHandler\"></a>2.5 <a href=\"https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md\">WKWebViewBridgeHandler</a></h3><h3 id=\"2-6-Capacitor\"><a href=\"#2-6-Capacitor\" class=\"headerlink\" title=\"2.6 Capacitor\"></a>2.6 <a href=\"https://capacitorjs.com/docs/v3\">Capacitor</a></h3><h4 id=\"2-6-1-cordova\"><a href=\"#2-6-1-cordova\" class=\"headerlink\" title=\"2.6.1 cordova\"></a>2.6.1 <a href=\"https://capacitorjs.com/docs/v3/cordova\">cordova</a></h4><h4 id=\"2-6-2-PhoneGap\"><a href=\"#2-6-2-PhoneGap\" class=\"headerlink\" title=\"2.6.2 PhoneGap\"></a>2.6.2 <a href=\"https://github.com/phonegap\">PhoneGap</a></h4><h5 id=\"2-6-2-1-参考资料\"><a href=\"#2-6-2-1-参考资料\" class=\"headerlink\" title=\"2.6.2.1 参考资料\"></a>2.6.2.1 参考资料</h5><ol>\n<li><a href=\"https://www.oschina.net/p/phonegap?hmsr=aladdin1e1\">PhoneGap 手机 Web 应用开发平台</a></li>\n</ol>\n<h4 id=\"2-6-3-Ionic\"><a href=\"#2-6-3-Ionic\" class=\"headerlink\" title=\"2.6.3 Ionic\"></a>2.6.3 <a href=\"https://ionicframework.com/docs\">Ionic</a></h4><h3 id=\"2-7-DCloud\"><a href=\"#2-7-DCloud\" class=\"headerlink\" title=\"2.7 DCloud\"></a>2.7 <a href=\"https://ask.dcloud.net.cn/docs/\">DCloud</a></h3><h3 id=\"2-8-Xamarin\"><a href=\"#2-8-Xamarin\" class=\"headerlink\" title=\"2.8 Xamarin\"></a>2.8 <a href=\"https://docs.microsoft.com/zh-cn/xamarin/\">Xamarin</a></h3><h3 id=\"2-9-PWA-amp-轻应用-amp-小程序-等\"><a href=\"#2-9-PWA-amp-轻应用-amp-小程序-等\" class=\"headerlink\" title=\"2.9 PWA &amp; 轻应用 &amp; 小程序 等\"></a>2.9 PWA &amp; 轻应用 &amp; 小程序 等</h3><h4 id=\"2-9-1-PWA\"><a href=\"#2-9-1-PWA\" class=\"headerlink\" title=\"2.9.1 PWA\"></a>2.9.1 <a href=\"https://capacitorjs.com/docs/v3/web\">PWA</a></h4><h4 id=\"2-9-2-轻应用\"><a href=\"#2-9-2-轻应用\" class=\"headerlink\" title=\"2.9.2 轻应用\"></a>2.9.2 <a href=\"https://uniapp.dcloud.io/history\">轻应用</a></h4><h3 id=\"2-10-QT\"><a href=\"#2-10-QT\" class=\"headerlink\" title=\"2.10 QT\"></a>2.10 <a href=\"https://doc.qt.io/qt-6/mobiledevelopment.html\">QT</a></h3><p>轻应用、流应用</p>\n<h3 id=\"2-9-3-小程序\"><a href=\"#2-9-3-小程序\" class=\"headerlink\" title=\"2.9.3 小程序\"></a>2.9.3 小程序</h3><h4 id=\"1-微信小程序\"><a href=\"#1-微信小程序\" class=\"headerlink\" title=\"1. 微信小程序\"></a>1. <a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/\">微信小程序</a></h4><h4 id=\"2-uni-app\"><a href=\"#2-uni-app\" class=\"headerlink\" title=\"2. uni-app\"></a>2. <a href=\"https://uniapp.dcloud.io/\">uni-app</a></h4><p>小程序联盟</p>\n<h2 id=\"3-源码解读\"><a href=\"#3-源码解读\" class=\"headerlink\" title=\"3. 源码解读\"></a>3. 源码解读</h2><h3 id=\"3-1-源码阅读\"><a href=\"#3-1-源码阅读\" class=\"headerlink\" title=\"3.1 源码阅读\"></a>3.1 源码阅读</h3><h3 id=\"3-1-1-JSPatch\"><a href=\"#3-1-1-JSPatch\" class=\"headerlink\" title=\"3.1.1 JSPatch\"></a>3.1.1 <a href=\"https://github.com/bang590/JSPatch/wiki\">JSPatch</a></h3><h3 id=\"3-1-2-WKWebViewBridgeHandler\"><a href=\"#3-1-2-WKWebViewBridgeHandler\" class=\"headerlink\" title=\"3.1.2 [WKWebViewBridgeHandler]\"></a>3.1.2 [WKWebViewBridgeHandler]</h3><ol>\n<li><p><a href=\"https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md\">WKWebViewBridgeHandler</a></p>\n</li>\n<li><p><a href=\"http://www.zyiner.com/article/3\">iOS系列之WebViewJavascriptBridge源码分析</a></p>\n</li>\n</ol>\n<p>库结构图、使用的通信技术、通讯方式</p>\n<h3 id=\"3-2-推荐阅读博客\"><a href=\"#3-2-推荐阅读博客\" class=\"headerlink\" title=\"3.2 推荐阅读博客\"></a>3.2 推荐阅读博客</h3><ul>\n<li>戴明的<a href=\"https://ming1016.github.io/2018/04/21/deeply-analyse-javascriptcore/\">深入剖析 JavaScriptCore</a></li>\n<li>戴明的<a href=\"https://ming1016.github.io/2021/02/21/deeply-analyse-quickjs/\">深入剖析 JavaScript 编译器/解释器引擎 QuickJS</a></li>\n<li>戴明的<a href=\"https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/\">深入剖析 WebKit</a></li>\n</ul>\n<h2 id=\"4-跨端常讨论的问题\"><a href=\"#4-跨端常讨论的问题\" class=\"headerlink\" title=\"4. 跨端常讨论的问题\"></a>4. 跨端常讨论的问题</h2><h3 id=\"4-1-性能\"><a href=\"#4-1-性能\" class=\"headerlink\" title=\"4.1 性能\"></a>4.1 性能</h3><h3 id=\"4-2-交互体验\"><a href=\"#4-2-交互体验\" class=\"headerlink\" title=\"4.2 交互体验\"></a>4.2 交互体验</h3><h3 id=\"4-3-社区（基础建筑）完备性\"><a href=\"#4-3-社区（基础建筑）完备性\" class=\"headerlink\" title=\"4.3 社区（基础建筑）完备性\"></a>4.3 社区（基础建筑）完备性</h3><h3 id=\"4-4-未来前景探讨\"><a href=\"#4-4-未来前景探讨\" class=\"headerlink\" title=\"4.4 未来前景探讨\"></a>4.4 未来前景探讨</h3><h3 id=\"4-4-1-为什么说现在-React-Native-凉了？\"><a href=\"#4-4-1-为什么说现在-React-Native-凉了？\" class=\"headerlink\" title=\"4.4.1 为什么说现在 React Native 凉了？\"></a>4.4.1 <a href=\"https://www.zhihu.com/question/266630840/answer/312188874\">为什么说现在 React Native 凉了？</a></h3><h3 id=\"4-4-2-Flutter-正在被悄悄放弃吗？\"><a href=\"#4-4-2-Flutter-正在被悄悄放弃吗？\" class=\"headerlink\" title=\"4.4.2 Flutter 正在被悄悄放弃吗？\"></a>4.4.2 <a href=\"https://mp.weixin.qq.com/s/hDjbMSPNz_D5JeEBMEJZCA\">Flutter 正在被悄悄放弃吗？</a></h3><h3 id=\"4-4-3-Flutter-2-正式发布！\"><a href=\"#4-4-3-Flutter-2-正式发布！\" class=\"headerlink\" title=\"4.4.3 Flutter 2 正式发布！\"></a>4.4.3 <a href=\"https://mp.weixin.qq.com/s/tJe2ScLgKWFTybpBtDl2TA\">Flutter 2 正式发布！</a></h3><h3 id=\"4-5-人力-资源节省\"><a href=\"#4-5-人力-资源节省\" class=\"headerlink\" title=\"4.5 人力/资源节省\"></a>4.5 人力/资源节省</h3><h2 id=\"5-其他-Mobile-Web-技术-方案\"><a href=\"#5-其他-Mobile-Web-技术-方案\" class=\"headerlink\" title=\"5. 其他 Mobile Web 技术/方案\"></a>5. 其他 Mobile Web 技术/方案</h2><h3 id=\"5-1-VasSonic\"><a href=\"#5-1-VasSonic\" class=\"headerlink\" title=\"5.1 VasSonic\"></a>5.1 <a href=\"https://github.com/Tencent/VasSonic/wiki\">VasSonic</a></h3><h2 id=\"6-期待\"><a href=\"#6-期待\" class=\"headerlink\" title=\"6. 期待\"></a>6. 期待</h2><h3 id=\"6-1-鸿蒙\"><a href=\"#6-1-鸿蒙\" class=\"headerlink\" title=\"6.1 鸿蒙\"></a>6.1 <a href=\"https://developer.harmonyos.com/cn/documentation\">鸿蒙</a></h3><h3 id=\"6-2-统一\"><a href=\"#6-2-统一\" class=\"headerlink\" title=\"6.2 统一\"></a>6.2 统一</h3><ol>\n<li>有一个统一的、通用的系统；</li>\n<li>有一门流行的统一的[元]语言：有处理前后端、脚本、硬件的能力；</li>\n<li>计算机行业基础、设计、开放标准；</li>\n</ol>\n<ul>\n<li>网络协议就是个很好的概念</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-JS-Native-通信技术\"><a href=\"#1-JS-Native-通信技术\" class=\"headerlink\" title=\"1. JS-Native 通信技术\"></a>1. <a href=\"https://mp.weixin.qq.com/s/_Xo6O3NoE1z9AIMJm_uSsA\">JS-Native 通信技术</a></h2><h2 id=\"1-1-postMessage-（iOS-WKWebview）\"><a href=\"#1-1-postMessage-（iOS-WKWebview）\" class=\"headerlink\" title=\"1.1 postMessage （iOS WKWebview）\"></a>1.1 postMessage （iOS WKWebview）</h2><p>这种方式是在 iOS 中处理消息非常方便，但是在 Android 中并不支持。</p>\n<p>web 端发送消息:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.webkit.messageHandlers.SYJSBridge.postMessage(msg);</span><br></pre></td></tr></table></figure>\n\n<p>iOS 端接受消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)userContentController:(WKUserContentController *)uc</span><br><span class=\"line\">didReceiveScriptMessage:(WKScriptMessage *)message</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 处理消息</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-prompt（iOS、Android、WebView）\"><a href=\"#1-2-prompt（iOS、Android、WebView）\" class=\"headerlink\" title=\"1.2 prompt（iOS、Android、WebView）\"></a>1.2 prompt（iOS、Android、WebView）</h2><p>巧用 webview 的弹窗，弹窗内容定义消息体。</p>\n<p>web 端发送消息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.prompt(msg);</span><br></pre></td></tr></table></figure>\n\n<p>iOS 端接受消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)webView:(WKWebView *)webView </span><br><span class=\"line\">runJavaScriptTextInputPanelWithPrompt:(NSString *)prompt </span><br><span class=\"line\">defaultText:(NSString *)defaultText </span><br><span class=\"line\">initiatedByFrame:(WKFrameInfo *)frame </span><br><span class=\"line\">completionHandler:(void (^)(NSString *))completionHandler</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    completionHandler(@&quot;OC input&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-3-iframe（iOS、Android、WebView）\"><a href=\"#1-3-iframe（iOS、Android、WebView）\" class=\"headerlink\" title=\"1.3 iframe（iOS、Android、WebView）\"></a>1.3 iframe（iOS、Android、WebView）</h2><p>创建一个隐形的 iframe，Native 侧会收到一个请求，可以通过请求地址来做一个处理，达到通信的目的。</p>\n<p>web 端发送消息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callIframe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;iframe&#x27;</span>);</span><br><span class=\"line\">  iframe.src = url;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.removeChild(iframe);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>iOS 端接受消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)webView:(WKWebView *)webView</span><br><span class=\"line\">decidePolicyForNavigationAction:(WKNavigationAction *)na </span><br><span class=\"line\">decisionHandler:(void (^)(WKNavigationActionPolicy))h &#123;</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, NSStringFromSelector(_cmd));</span><br><span class=\"line\">    decisionHandler(WKNavigationActionPolicyAllow);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-4-注入-JS\"><a href=\"#1-4-注入-JS\" class=\"headerlink\" title=\"1.4 注入 JS\"></a>1.4 注入 JS</h2><p>  这种方式主要通过 webview 提供的 API 向 JavaScript 执行引擎中注入 JavaScript 代码。下面的代码在页面加载时注入了一个 add 函数，这个函数被挂载到了 window 下，在网页中可直接调用。</p>\n<p>iOS 端实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WKUserScript *script = [[WKUserScript alloc] </span><br><span class=\"line\">initWithSource:@&quot;function add(a, b) &#123; return a + b; &#125;&quot;</span><br><span class=\"line\">injectionTime:WKUserScriptInjectionTimeAtDocumentStart </span><br><span class=\"line\">forMainFrameOnly:YES];</span><br><span class=\"line\">[webview.configuration.userContentController addUserScript:script];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-5-location-href-（iOS、Android、WebView）\"><a href=\"#1-5-location-href-（iOS、Android、WebView）\" class=\"headerlink\" title=\"1.5 location.href （iOS、Android、WebView）\"></a>1.5 location.href （iOS、Android、WebView）</h3><p>这种方式和 1.3 方法类似，不过需要对做通信 API 的路由做拦截处理，否则会跳转到新的页面。</p>\n<p>web 端发送消息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location.href = url;</span><br></pre></td></tr></table></figure>\n\n<p>iOS 端接受消息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)webView:(WKWebView *)webView </span><br><span class=\"line\">decidePolicyForNavigationAction:(WKNavigationAction *)na </span><br><span class=\"line\">decisionHandler:(void (^)(WKNavigationActionPolicy))d &#123;</span><br><span class=\"line\">    NSLog(@&quot;%@&quot;, NSStringFromSelector(_cmd));</span><br><span class=\"line\">    if ([na.request.URL.absoluteString containsString:@&quot;suyan&quot;]) &#123;</span><br><span class=\"line\">        d(WKNavigationActionPolicyCancel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        d(WKNavigationActionPolicyAllow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-6-addJavaScriptInterface-（Android、WebView）\"><a href=\"#1-6-addJavaScriptInterface-（Android、WebView）\" class=\"headerlink\" title=\"1.6 addJavaScriptInterface （Android、WebView）\"></a>1.6 addJavaScriptInterface （Android、WebView）</h3><p>把一个 Java 对象注入到 JavaScript 执行环境当中，使得在 webivew 中可直接调用该方法，间接调用 Native 方法。</p>\n<h2 id=\"2-常见跨端方案\"><a href=\"#2-常见跨端方案\" class=\"headerlink\" title=\"2. 常见跨端方案\"></a>2. 常见跨端方案</h2><h3 id=\"2-1-React-Native-amp-WeeX\"><a href=\"#2-1-React-Native-amp-WeeX\" class=\"headerlink\" title=\"2.1 React-Native &amp; WeeX\"></a>2.1 React-Native &amp; WeeX</h3><h4 id=\"2-1-1-React-Native\"><a href=\"#2-1-1-React-Native\" class=\"headerlink\" title=\"2.1.1 React-Native\"></a>2.1.1 <a href=\"https://www.react-native.cn/docs/getting-started\">React-Native</a></h4><h4 id=\"2-1-2-WeeX\"><a href=\"#2-1-2-WeeX\" class=\"headerlink\" title=\"2.1.2 WeeX\"></a>2.1.2 <a href=\"https://weex.apache.org/zh/docs/api/weex-variable.html\">WeeX</a></h4><h4 id=\"2-1-3-Hippy\"><a href=\"#2-1-3-Hippy\" class=\"headerlink\" title=\"2.1.3 Hippy\"></a>2.1.3 <a href=\"https://github.com/Tencent/Hippy/blob/master/README.zh_CN.md\">Hippy</a></h4><h3 id=\"2-2-Flutter\"><a href=\"#2-2-Flutter\" class=\"headerlink\" title=\"2.2 Flutter\"></a>2.2 <a href=\"https://flutterchina.club/docs/\">Flutter</a></h3><h3 id=\"2-3-JavaScriptCore\"><a href=\"#2-3-JavaScriptCore\" class=\"headerlink\" title=\"2.3 JavaScriptCore\"></a>2.3 <a href=\"https://trac.webkit.org/wiki/JavaScriptCore\">JavaScriptCore</a></h3><h4 id=\"2-3-1-iOS-版\"><a href=\"#2-3-1-iOS-版\" class=\"headerlink\" title=\"2.3.1 iOS 版\"></a>2.3.1 <a href=\"https://developer.apple.com/documentation/javascriptcore\">iOS 版</a></h4><h3 id=\"2-4-JSPatch\"><a href=\"#2-4-JSPatch\" class=\"headerlink\" title=\"2.4 JSPatch\"></a>2.4 <a href=\"https://github.com/bang590/JSPatch/wiki\">JSPatch</a></h3><h3 id=\"2-5-WKWebViewBridgeHandler\"><a href=\"#2-5-WKWebViewBridgeHandler\" class=\"headerlink\" title=\"2.5 WKWebViewBridgeHandler\"></a>2.5 <a href=\"https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md\">WKWebViewBridgeHandler</a></h3><h3 id=\"2-6-Capacitor\"><a href=\"#2-6-Capacitor\" class=\"headerlink\" title=\"2.6 Capacitor\"></a>2.6 <a href=\"https://capacitorjs.com/docs/v3\">Capacitor</a></h3><h4 id=\"2-6-1-cordova\"><a href=\"#2-6-1-cordova\" class=\"headerlink\" title=\"2.6.1 cordova\"></a>2.6.1 <a href=\"https://capacitorjs.com/docs/v3/cordova\">cordova</a></h4><h4 id=\"2-6-2-PhoneGap\"><a href=\"#2-6-2-PhoneGap\" class=\"headerlink\" title=\"2.6.2 PhoneGap\"></a>2.6.2 <a href=\"https://github.com/phonegap\">PhoneGap</a></h4><h5 id=\"2-6-2-1-参考资料\"><a href=\"#2-6-2-1-参考资料\" class=\"headerlink\" title=\"2.6.2.1 参考资料\"></a>2.6.2.1 参考资料</h5><ol>\n<li><a href=\"https://www.oschina.net/p/phonegap?hmsr=aladdin1e1\">PhoneGap 手机 Web 应用开发平台</a></li>\n</ol>\n<h4 id=\"2-6-3-Ionic\"><a href=\"#2-6-3-Ionic\" class=\"headerlink\" title=\"2.6.3 Ionic\"></a>2.6.3 <a href=\"https://ionicframework.com/docs\">Ionic</a></h4><h3 id=\"2-7-DCloud\"><a href=\"#2-7-DCloud\" class=\"headerlink\" title=\"2.7 DCloud\"></a>2.7 <a href=\"https://ask.dcloud.net.cn/docs/\">DCloud</a></h3><h3 id=\"2-8-Xamarin\"><a href=\"#2-8-Xamarin\" class=\"headerlink\" title=\"2.8 Xamarin\"></a>2.8 <a href=\"https://docs.microsoft.com/zh-cn/xamarin/\">Xamarin</a></h3><h3 id=\"2-9-PWA-amp-轻应用-amp-小程序-等\"><a href=\"#2-9-PWA-amp-轻应用-amp-小程序-等\" class=\"headerlink\" title=\"2.9 PWA &amp; 轻应用 &amp; 小程序 等\"></a>2.9 PWA &amp; 轻应用 &amp; 小程序 等</h3><h4 id=\"2-9-1-PWA\"><a href=\"#2-9-1-PWA\" class=\"headerlink\" title=\"2.9.1 PWA\"></a>2.9.1 <a href=\"https://capacitorjs.com/docs/v3/web\">PWA</a></h4><h4 id=\"2-9-2-轻应用\"><a href=\"#2-9-2-轻应用\" class=\"headerlink\" title=\"2.9.2 轻应用\"></a>2.9.2 <a href=\"https://uniapp.dcloud.io/history\">轻应用</a></h4><h3 id=\"2-10-QT\"><a href=\"#2-10-QT\" class=\"headerlink\" title=\"2.10 QT\"></a>2.10 <a href=\"https://doc.qt.io/qt-6/mobiledevelopment.html\">QT</a></h3><p>轻应用、流应用</p>\n<h3 id=\"2-9-3-小程序\"><a href=\"#2-9-3-小程序\" class=\"headerlink\" title=\"2.9.3 小程序\"></a>2.9.3 小程序</h3><h4 id=\"1-微信小程序\"><a href=\"#1-微信小程序\" class=\"headerlink\" title=\"1. 微信小程序\"></a>1. <a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/\">微信小程序</a></h4><h4 id=\"2-uni-app\"><a href=\"#2-uni-app\" class=\"headerlink\" title=\"2. uni-app\"></a>2. <a href=\"https://uniapp.dcloud.io/\">uni-app</a></h4><p>小程序联盟</p>\n<h2 id=\"3-源码解读\"><a href=\"#3-源码解读\" class=\"headerlink\" title=\"3. 源码解读\"></a>3. 源码解读</h2><h3 id=\"3-1-源码阅读\"><a href=\"#3-1-源码阅读\" class=\"headerlink\" title=\"3.1 源码阅读\"></a>3.1 源码阅读</h3><h3 id=\"3-1-1-JSPatch\"><a href=\"#3-1-1-JSPatch\" class=\"headerlink\" title=\"3.1.1 JSPatch\"></a>3.1.1 <a href=\"https://github.com/bang590/JSPatch/wiki\">JSPatch</a></h3><h3 id=\"3-1-2-WKWebViewBridgeHandler\"><a href=\"#3-1-2-WKWebViewBridgeHandler\" class=\"headerlink\" title=\"3.1.2 [WKWebViewBridgeHandler]\"></a>3.1.2 [WKWebViewBridgeHandler]</h3><ol>\n<li><p><a href=\"https://github.com/Lision/ELSEWHERE/blob/master/Categroy/iOS/WebViewJavascriptBridge/webview-javascript-bridge.md\">WKWebViewBridgeHandler</a></p>\n</li>\n<li><p><a href=\"http://www.zyiner.com/article/3\">iOS系列之WebViewJavascriptBridge源码分析</a></p>\n</li>\n</ol>\n<p>库结构图、使用的通信技术、通讯方式</p>\n<h3 id=\"3-2-推荐阅读博客\"><a href=\"#3-2-推荐阅读博客\" class=\"headerlink\" title=\"3.2 推荐阅读博客\"></a>3.2 推荐阅读博客</h3><ul>\n<li>戴明的<a href=\"https://ming1016.github.io/2018/04/21/deeply-analyse-javascriptcore/\">深入剖析 JavaScriptCore</a></li>\n<li>戴明的<a href=\"https://ming1016.github.io/2021/02/21/deeply-analyse-quickjs/\">深入剖析 JavaScript 编译器/解释器引擎 QuickJS</a></li>\n<li>戴明的<a href=\"https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/\">深入剖析 WebKit</a></li>\n</ul>\n<h2 id=\"4-跨端常讨论的问题\"><a href=\"#4-跨端常讨论的问题\" class=\"headerlink\" title=\"4. 跨端常讨论的问题\"></a>4. 跨端常讨论的问题</h2><h3 id=\"4-1-性能\"><a href=\"#4-1-性能\" class=\"headerlink\" title=\"4.1 性能\"></a>4.1 性能</h3><h3 id=\"4-2-交互体验\"><a href=\"#4-2-交互体验\" class=\"headerlink\" title=\"4.2 交互体验\"></a>4.2 交互体验</h3><h3 id=\"4-3-社区（基础建筑）完备性\"><a href=\"#4-3-社区（基础建筑）完备性\" class=\"headerlink\" title=\"4.3 社区（基础建筑）完备性\"></a>4.3 社区（基础建筑）完备性</h3><h3 id=\"4-4-未来前景探讨\"><a href=\"#4-4-未来前景探讨\" class=\"headerlink\" title=\"4.4 未来前景探讨\"></a>4.4 未来前景探讨</h3><h3 id=\"4-4-1-为什么说现在-React-Native-凉了？\"><a href=\"#4-4-1-为什么说现在-React-Native-凉了？\" class=\"headerlink\" title=\"4.4.1 为什么说现在 React Native 凉了？\"></a>4.4.1 <a href=\"https://www.zhihu.com/question/266630840/answer/312188874\">为什么说现在 React Native 凉了？</a></h3><h3 id=\"4-4-2-Flutter-正在被悄悄放弃吗？\"><a href=\"#4-4-2-Flutter-正在被悄悄放弃吗？\" class=\"headerlink\" title=\"4.4.2 Flutter 正在被悄悄放弃吗？\"></a>4.4.2 <a href=\"https://mp.weixin.qq.com/s/hDjbMSPNz_D5JeEBMEJZCA\">Flutter 正在被悄悄放弃吗？</a></h3><h3 id=\"4-4-3-Flutter-2-正式发布！\"><a href=\"#4-4-3-Flutter-2-正式发布！\" class=\"headerlink\" title=\"4.4.3 Flutter 2 正式发布！\"></a>4.4.3 <a href=\"https://mp.weixin.qq.com/s/tJe2ScLgKWFTybpBtDl2TA\">Flutter 2 正式发布！</a></h3><h3 id=\"4-5-人力-资源节省\"><a href=\"#4-5-人力-资源节省\" class=\"headerlink\" title=\"4.5 人力/资源节省\"></a>4.5 人力/资源节省</h3><h2 id=\"5-其他-Mobile-Web-技术-方案\"><a href=\"#5-其他-Mobile-Web-技术-方案\" class=\"headerlink\" title=\"5. 其他 Mobile Web 技术/方案\"></a>5. 其他 Mobile Web 技术/方案</h2><h3 id=\"5-1-VasSonic\"><a href=\"#5-1-VasSonic\" class=\"headerlink\" title=\"5.1 VasSonic\"></a>5.1 <a href=\"https://github.com/Tencent/VasSonic/wiki\">VasSonic</a></h3><h2 id=\"6-期待\"><a href=\"#6-期待\" class=\"headerlink\" title=\"6. 期待\"></a>6. 期待</h2><h3 id=\"6-1-鸿蒙\"><a href=\"#6-1-鸿蒙\" class=\"headerlink\" title=\"6.1 鸿蒙\"></a>6.1 <a href=\"https://developer.harmonyos.com/cn/documentation\">鸿蒙</a></h3><h3 id=\"6-2-统一\"><a href=\"#6-2-统一\" class=\"headerlink\" title=\"6.2 统一\"></a>6.2 统一</h3><ol>\n<li>有一个统一的、通用的系统；</li>\n<li>有一门流行的统一的[元]语言：有处理前后端、脚本、硬件的能力；</li>\n<li>计算机行业基础、设计、开放标准；</li>\n</ol>\n<ul>\n<li>网络协议就是个很好的概念</li>\n</ul>\n"},{"title":"iOS之JSPatch原理","abbrlink":"6b9e677","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [JSPatch](https://github.com/bang590/JSPatch)\n\n## 2. [JSPatch 基础用法](https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95)\n\n## 3. [JSPatch 文档](https://github.com/bang590/JSPatch/wiki)\n\n## 4. [JSPatch 实现原理详解](https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3)\n","source":"_posts/iOS/Webs/JSPatchPrinciple.md","raw":"---\ntitle: iOS之JSPatch原理\nabbrlink: 6b9e677\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [JSPatch](https://github.com/bang590/JSPatch)\n\n## 2. [JSPatch 基础用法](https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95)\n\n## 3. [JSPatch 文档](https://github.com/bang590/JSPatch/wiki)\n\n## 4. [JSPatch 实现原理详解](https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3)\n","slug":"iOS/Webs/JSPatchPrinciple","published":1,"updated":"2021-07-29T06:45:59.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2y002viu9k61en6xn1","content":"<h2 id=\"1-JSPatch\"><a href=\"#1-JSPatch\" class=\"headerlink\" title=\"1. JSPatch\"></a>1. <a href=\"https://github.com/bang590/JSPatch\">JSPatch</a></h2><h2 id=\"2-JSPatch-基础用法\"><a href=\"#2-JSPatch-基础用法\" class=\"headerlink\" title=\"2. JSPatch 基础用法\"></a>2. <a href=\"https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95\">JSPatch 基础用法</a></h2><h2 id=\"3-JSPatch-文档\"><a href=\"#3-JSPatch-文档\" class=\"headerlink\" title=\"3. JSPatch 文档\"></a>3. <a href=\"https://github.com/bang590/JSPatch/wiki\">JSPatch 文档</a></h2><h2 id=\"4-JSPatch-实现原理详解\"><a href=\"#4-JSPatch-实现原理详解\" class=\"headerlink\" title=\"4. JSPatch 实现原理详解\"></a>4. <a href=\"https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3\">JSPatch 实现原理详解</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-JSPatch\"><a href=\"#1-JSPatch\" class=\"headerlink\" title=\"1. JSPatch\"></a>1. <a href=\"https://github.com/bang590/JSPatch\">JSPatch</a></h2><h2 id=\"2-JSPatch-基础用法\"><a href=\"#2-JSPatch-基础用法\" class=\"headerlink\" title=\"2. JSPatch 基础用法\"></a>2. <a href=\"https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95\">JSPatch 基础用法</a></h2><h2 id=\"3-JSPatch-文档\"><a href=\"#3-JSPatch-文档\" class=\"headerlink\" title=\"3. JSPatch 文档\"></a>3. <a href=\"https://github.com/bang590/JSPatch/wiki\">JSPatch 文档</a></h2><h2 id=\"4-JSPatch-实现原理详解\"><a href=\"#4-JSPatch-实现原理详解\" class=\"headerlink\" title=\"4. JSPatch 实现原理详解\"></a>4. <a href=\"https://github.com/bang590/JSPatch/wiki/JSPatch-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3\">JSPatch 实现原理详解</a></h2>"},{"title":"iOS之JavaScriptCore","abbrlink":"c205a432","date":"2021-06-10T16:00:00.000Z","_content":"\n## 1. [深入理解JavaScriptCore](https://zhuanlan.zhihu.com/p/42859905)\n","source":"_posts/iOS/Webs/JavaScriptCore.md","raw":"---\ntitle: iOS之JavaScriptCore\nabbrlink: c205a432\ndate: 2021-06-11 00:00:00\ntags:\n---\n\n## 1. [深入理解JavaScriptCore](https://zhuanlan.zhihu.com/p/42859905)\n","slug":"iOS/Webs/JavaScriptCore","published":1,"updated":"2021-07-29T06:45:58.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2z002wiu9k0wq91ahl","content":"<h2 id=\"1-深入理解JavaScriptCore\"><a href=\"#1-深入理解JavaScriptCore\" class=\"headerlink\" title=\"1. 深入理解JavaScriptCore\"></a>1. <a href=\"https://zhuanlan.zhihu.com/p/42859905\">深入理解JavaScriptCore</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-深入理解JavaScriptCore\"><a href=\"#1-深入理解JavaScriptCore\" class=\"headerlink\" title=\"1. 深入理解JavaScriptCore\"></a>1. <a href=\"https://zhuanlan.zhihu.com/p/42859905\">深入理解JavaScriptCore</a></h2>"},{"title":"iOS之 Vue","abbrlink":"bf75db5d","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Webs/Vue.md","raw":"---\ntitle: iOS之 Vue\nabbrlink: bf75db5d\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Webs/Vue","published":1,"updated":"2021-07-29T06:45:59.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn2z002xiu9k9sptftmz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS游戏之引擎","abbrlink":"77fcdcbb","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Games/Engine.md","raw":"---\ntitle: iOS游戏之引擎\nabbrlink: 77fcdcbb\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Games/Engine","published":1,"updated":"2021-07-29T06:46:00.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn30002yiu9kgl6u8st1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之WWDC2019","abbrlink":"f63d368d","date":"2021-04-20T13:36:02.000Z","_content":"\nBundle Resources\n\nSwift UI\n\nPencilKit\n\nRealityKit\n\nBackgroundTasks\n\nCombine\n\nQuickLookThumbnailing\n\nCore Audio Types\n\nCore Haptics\n\nSoundAnalysis\n\nVisionKit\n\nMaps Web Snapshots\n\nLinkPresentation\n\nAPPle CryptoKit\n\nIOUSBHost\n\nLogging\n\nMetricKit\n\nNetWorkingDriveKit\n\nDriveKit\n\nOSLog\n\nEndpointSecurity\n\nExecutionPolicy\n\nSystemExtensions\n\nUSBDriverKit\n\nHIDDriverKit\n","source":"_posts/iOS/WWDC/WWDC2019.md","raw":"---\ntitle: iOS之WWDC2019\nabbrlink: f63d368d\ndate: 2021-04-20 21:36:02\ntags:\n---\n\nBundle Resources\n\nSwift UI\n\nPencilKit\n\nRealityKit\n\nBackgroundTasks\n\nCombine\n\nQuickLookThumbnailing\n\nCore Audio Types\n\nCore Haptics\n\nSoundAnalysis\n\nVisionKit\n\nMaps Web Snapshots\n\nLinkPresentation\n\nAPPle CryptoKit\n\nIOUSBHost\n\nLogging\n\nMetricKit\n\nNetWorkingDriveKit\n\nDriveKit\n\nOSLog\n\nEndpointSecurity\n\nExecutionPolicy\n\nSystemExtensions\n\nUSBDriverKit\n\nHIDDriverKit\n","slug":"iOS/WWDC/WWDC2019","published":1,"updated":"2021-07-29T06:45:59.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn30002ziu9khp1n1st8","content":"<p>Bundle Resources</p>\n<p>Swift UI</p>\n<p>PencilKit</p>\n<p>RealityKit</p>\n<p>BackgroundTasks</p>\n<p>Combine</p>\n<p>QuickLookThumbnailing</p>\n<p>Core Audio Types</p>\n<p>Core Haptics</p>\n<p>SoundAnalysis</p>\n<p>VisionKit</p>\n<p>Maps Web Snapshots</p>\n<p>LinkPresentation</p>\n<p>APPle CryptoKit</p>\n<p>IOUSBHost</p>\n<p>Logging</p>\n<p>MetricKit</p>\n<p>NetWorkingDriveKit</p>\n<p>DriveKit</p>\n<p>OSLog</p>\n<p>EndpointSecurity</p>\n<p>ExecutionPolicy</p>\n<p>SystemExtensions</p>\n<p>USBDriverKit</p>\n<p>HIDDriverKit</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Bundle Resources</p>\n<p>Swift UI</p>\n<p>PencilKit</p>\n<p>RealityKit</p>\n<p>BackgroundTasks</p>\n<p>Combine</p>\n<p>QuickLookThumbnailing</p>\n<p>Core Audio Types</p>\n<p>Core Haptics</p>\n<p>SoundAnalysis</p>\n<p>VisionKit</p>\n<p>Maps Web Snapshots</p>\n<p>LinkPresentation</p>\n<p>APPle CryptoKit</p>\n<p>IOUSBHost</p>\n<p>Logging</p>\n<p>MetricKit</p>\n<p>NetWorkingDriveKit</p>\n<p>DriveKit</p>\n<p>OSLog</p>\n<p>EndpointSecurity</p>\n<p>ExecutionPolicy</p>\n<p>SystemExtensions</p>\n<p>USBDriverKit</p>\n<p>HIDDriverKit</p>\n"},{"title":"游戏","abbrlink":61012,"date":"2021-07-29T02:19:02.000Z","_content":"","source":"_posts/iOS/Games/Games.md","raw":"---\ntitle: 游戏\nabbrlink: 61012\ndate: 2021-07-29 10:19:02\ntags:\n---\n","slug":"iOS/Games/Games","published":1,"updated":"2021-07-29T06:45:56.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn310030iu9k71xff3bm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS游戏之Lua","abbrlink":"93b8edd7","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Games/Lua.md","raw":"---\ntitle: iOS游戏之Lua\nabbrlink: 93b8edd7\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Games/Lua","published":1,"updated":"2021-07-29T06:46:00.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn310031iu9kemrs1xsw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之Core Image Filter","abbrlink":"16a61484","date":"2021-05-28T13:36:02.000Z","_content":"\n## 1. [如何自定义Core Image Filter——Core Image 编程指南（下） Core Image Programming Guide](https://www.zhaojianfei.com/archives/756)\n","source":"_posts/iOS/UI/CoreImageFilter.md","raw":"---\ntitle: iOS之Core Image Filter\nabbrlink: 16a61484\ndate: 2021-05-28 21:36:02\ntags:\n---\n\n## 1. [如何自定义Core Image Filter——Core Image 编程指南（下） Core Image Programming Guide](https://www.zhaojianfei.com/archives/756)\n","slug":"iOS/UI/CoreImageFilter","published":1,"updated":"2021-09-16T06:42:30.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn320032iu9kcumv88hp","content":"<h2 id=\"1-如何自定义Core-Image-Filter——Core-Image-编程指南（下）-Core-Image-Programming-Guide\"><a href=\"#1-如何自定义Core-Image-Filter——Core-Image-编程指南（下）-Core-Image-Programming-Guide\" class=\"headerlink\" title=\"1. 如何自定义Core Image Filter——Core Image 编程指南（下） Core Image Programming Guide\"></a>1. <a href=\"https://www.zhaojianfei.com/archives/756\">如何自定义Core Image Filter——Core Image 编程指南（下） Core Image Programming Guide</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-如何自定义Core-Image-Filter——Core-Image-编程指南（下）-Core-Image-Programming-Guide\"><a href=\"#1-如何自定义Core-Image-Filter——Core-Image-编程指南（下）-Core-Image-Programming-Guide\" class=\"headerlink\" title=\"1. 如何自定义Core Image Filter——Core Image 编程指南（下） Core Image Programming Guide\"></a>1. <a href=\"https://www.zhaojianfei.com/archives/756\">如何自定义Core Image Filter——Core Image 编程指南（下） Core Image Programming Guide</a></h2>"},{"title":"iOS之动画","abbrlink":6960,"date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [iOS动画详解(学习动画看这一篇就够了)](http://www.cocoachina.com/articles/18617)\n\n## 2. [iOS动画篇_CoreAnimation(超详细解析核心动画)](http://www.cocoachina.com/articles/19612)\n\n## 3. Lottie\n\n## 4. [Core Animation Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html?language=objc#//apple_ref/doc/uid/TP40004514)\n","source":"_posts/iOS/UI/Animation.md","raw":"---\ntitle: iOS之动画\nabbrlink: 6960\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [iOS动画详解(学习动画看这一篇就够了)](http://www.cocoachina.com/articles/18617)\n\n## 2. [iOS动画篇_CoreAnimation(超详细解析核心动画)](http://www.cocoachina.com/articles/19612)\n\n## 3. Lottie\n\n## 4. [Core Animation Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html?language=objc#//apple_ref/doc/uid/TP40004514)\n","slug":"iOS/UI/Animation","published":1,"updated":"2021-09-22T06:56:40.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn330033iu9k7ifg7qfg","content":"<h2 id=\"1-iOS动画详解-学习动画看这一篇就够了\"><a href=\"#1-iOS动画详解-学习动画看这一篇就够了\" class=\"headerlink\" title=\"1. iOS动画详解(学习动画看这一篇就够了)\"></a>1. <a href=\"http://www.cocoachina.com/articles/18617\">iOS动画详解(学习动画看这一篇就够了)</a></h2><h2 id=\"2-iOS动画篇-CoreAnimation-超详细解析核心动画\"><a href=\"#2-iOS动画篇-CoreAnimation-超详细解析核心动画\" class=\"headerlink\" title=\"2. iOS动画篇_CoreAnimation(超详细解析核心动画)\"></a>2. <a href=\"http://www.cocoachina.com/articles/19612\">iOS动画篇_CoreAnimation(超详细解析核心动画)</a></h2><h2 id=\"3-Lottie\"><a href=\"#3-Lottie\" class=\"headerlink\" title=\"3. Lottie\"></a>3. Lottie</h2><h2 id=\"4-Core-Animation-Programming-Guide\"><a href=\"#4-Core-Animation-Programming-Guide\" class=\"headerlink\" title=\"4. Core Animation Programming Guide\"></a>4. <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html?language=objc#//apple_ref/doc/uid/TP40004514\">Core Animation Programming Guide</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-iOS动画详解-学习动画看这一篇就够了\"><a href=\"#1-iOS动画详解-学习动画看这一篇就够了\" class=\"headerlink\" title=\"1. iOS动画详解(学习动画看这一篇就够了)\"></a>1. <a href=\"http://www.cocoachina.com/articles/18617\">iOS动画详解(学习动画看这一篇就够了)</a></h2><h2 id=\"2-iOS动画篇-CoreAnimation-超详细解析核心动画\"><a href=\"#2-iOS动画篇-CoreAnimation-超详细解析核心动画\" class=\"headerlink\" title=\"2. iOS动画篇_CoreAnimation(超详细解析核心动画)\"></a>2. <a href=\"http://www.cocoachina.com/articles/19612\">iOS动画篇_CoreAnimation(超详细解析核心动画)</a></h2><h2 id=\"3-Lottie\"><a href=\"#3-Lottie\" class=\"headerlink\" title=\"3. Lottie\"></a>3. Lottie</h2><h2 id=\"4-Core-Animation-Programming-Guide\"><a href=\"#4-Core-Animation-Programming-Guide\" class=\"headerlink\" title=\"4. Core Animation Programming Guide\"></a>4. <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html?language=objc#//apple_ref/doc/uid/TP40004514\">Core Animation Programming Guide</a></h2>"},{"title":"iOS之排版——Coretext","abbrlink":"f4c691c7","date":"2021-04-20T13:36:02.000Z","_content":"\n**1、概念：**在操作之前，先了解一下 CoreText 概念，以便理解。\n\n1.1、[CoreText](https://developer.apple.com/documentation/coretext) 框架中最常用的几个类：\n\n```objective-c\nCTFont\nCTFontCollection\nCTFontDescriptor\nCTFrame\nCTFramesetter\nCTGlyphInfo\nCTLine\nCTParagraphStyle\nCTRun\nCTTextTab\nCTTypesett\n```\n\n下面是该框架的结构图\n![CTFrame](Resources/ctframe.png)\nCTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。\n注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。\n通常处理步聚：\n1.使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－>attributedString －> 生成 CTFramesetter -> 得到CTFrame -> 绘制（CTFrameDraw）\n其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。\n\n2.绘制只是显示，点击事件就需要一个判断了。\nCTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。\n\n**1.2 字体的基本知识**\n\n**字体(Font):**是一系列字号、样式和磅值相同的字符(例如:10磅黑体Palatino)。现多被视为字样的同义词\n\n**字面(Face):**是所有字号的磅值和格式的综合\n\n**字体集(Font family):**是一组相关字体(例如:Franklin family包括Franklin Gothic、Fran-klinHeavy和Franklin Compressed)\n\n**磅值(Weight):**用于描述字体粗度。典型的磅值,从最粗到最细,有极细、细、book、中等、半粗、粗、较粗、极粗\n\n**样式(Style):**字形有三种形式:Roman type是直体;oblique type是斜体;utakuc type是斜体兼曲线(比Roman type更像书法体)。\n\n**x高度(X height):**指小写字母的平均高度(以x为基准)。磅值相同的两字母,x高度越大的字母看起来比x高度小的字母要大\n\n**Cap高度(Cap height):**与x高度相似。指大写字母的平均高度(以C为基准)\n\n**下行字母(Descender):**例如在字母q中,基线以下的字母部分叫下伸部分\n\n**上行字母(Ascender):**x高度以上的部分(比如字母b)叫做上伸部分\n\n**基线(Baseline):**通常在x、v、b、m下的那条线\n\n**描边(Stroke):**组成字符的线或曲线。可以加粗或改变字符形状\n\n**衬线(Serif):**用来使字符更可视的一条水平线。如字母左上角和下部的水平线。\n\n**无衬线(Sans Serif):**可以让排字员不使用衬线装饰。\n\n**方形字(Block):**这种字体的笔画使字符看起来比无衬线字更显眼,但还不到常见的衬线字的程度。例如Lubalin Graph就是方形字,这种字看起来好像是木头块刻的一样\n\n**手写体脚本(Calligraphic script):**是一种仿效手写体的字体。例如Murray Hill或者Fraktur字体\n\n**艺术字(Decorative):**像绘画般的字体\n\n**Pi符号(Pisymbol):**非标准的字母数字字符的特殊符号。例如Wingdings和Mathematical Pi\n\n**连写(Ligature):**是一系列连写字母如fi、fl、ffi或ffl。由于字些字母形状的原因经常被连写,故排字员已习惯将它们连写。\n\n读完了上面这些概念，可以参考一下下面的图片，看看具体的位置\n![CTFrame](Resources/text_glpy_info.gif)\n\n![CTFrame](Resources/text_glpy_info_1.gif)\n\n* **引用原文：**[CoreText 基础概念](https://www.jianshu.com/p/9553fcbbaab1)\n\n**2、操作：**这里有两篇文章对于操作讲解的还是比较详细的\n\n1、[基于 CoreText 的排版引擎：基础](http://blog.devtang.com/2015/06/27/using-coretext-1/)\n\n2、[基于 CoreText 的排版引擎：进阶](基于 CoreText 的排版引擎：进阶)\n","source":"_posts/iOS/UI/CoreText.md","raw":"---\ntitle: iOS之排版——Coretext\nabbrlink: f4c691c7\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n**1、概念：**在操作之前，先了解一下 CoreText 概念，以便理解。\n\n1.1、[CoreText](https://developer.apple.com/documentation/coretext) 框架中最常用的几个类：\n\n```objective-c\nCTFont\nCTFontCollection\nCTFontDescriptor\nCTFrame\nCTFramesetter\nCTGlyphInfo\nCTLine\nCTParagraphStyle\nCTRun\nCTTextTab\nCTTypesett\n```\n\n下面是该框架的结构图\n![CTFrame](Resources/ctframe.png)\nCTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。\n注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。\n通常处理步聚：\n1.使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－>attributedString －> 生成 CTFramesetter -> 得到CTFrame -> 绘制（CTFrameDraw）\n其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。\n\n2.绘制只是显示，点击事件就需要一个判断了。\nCTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。\n\n**1.2 字体的基本知识**\n\n**字体(Font):**是一系列字号、样式和磅值相同的字符(例如:10磅黑体Palatino)。现多被视为字样的同义词\n\n**字面(Face):**是所有字号的磅值和格式的综合\n\n**字体集(Font family):**是一组相关字体(例如:Franklin family包括Franklin Gothic、Fran-klinHeavy和Franklin Compressed)\n\n**磅值(Weight):**用于描述字体粗度。典型的磅值,从最粗到最细,有极细、细、book、中等、半粗、粗、较粗、极粗\n\n**样式(Style):**字形有三种形式:Roman type是直体;oblique type是斜体;utakuc type是斜体兼曲线(比Roman type更像书法体)。\n\n**x高度(X height):**指小写字母的平均高度(以x为基准)。磅值相同的两字母,x高度越大的字母看起来比x高度小的字母要大\n\n**Cap高度(Cap height):**与x高度相似。指大写字母的平均高度(以C为基准)\n\n**下行字母(Descender):**例如在字母q中,基线以下的字母部分叫下伸部分\n\n**上行字母(Ascender):**x高度以上的部分(比如字母b)叫做上伸部分\n\n**基线(Baseline):**通常在x、v、b、m下的那条线\n\n**描边(Stroke):**组成字符的线或曲线。可以加粗或改变字符形状\n\n**衬线(Serif):**用来使字符更可视的一条水平线。如字母左上角和下部的水平线。\n\n**无衬线(Sans Serif):**可以让排字员不使用衬线装饰。\n\n**方形字(Block):**这种字体的笔画使字符看起来比无衬线字更显眼,但还不到常见的衬线字的程度。例如Lubalin Graph就是方形字,这种字看起来好像是木头块刻的一样\n\n**手写体脚本(Calligraphic script):**是一种仿效手写体的字体。例如Murray Hill或者Fraktur字体\n\n**艺术字(Decorative):**像绘画般的字体\n\n**Pi符号(Pisymbol):**非标准的字母数字字符的特殊符号。例如Wingdings和Mathematical Pi\n\n**连写(Ligature):**是一系列连写字母如fi、fl、ffi或ffl。由于字些字母形状的原因经常被连写,故排字员已习惯将它们连写。\n\n读完了上面这些概念，可以参考一下下面的图片，看看具体的位置\n![CTFrame](Resources/text_glpy_info.gif)\n\n![CTFrame](Resources/text_glpy_info_1.gif)\n\n* **引用原文：**[CoreText 基础概念](https://www.jianshu.com/p/9553fcbbaab1)\n\n**2、操作：**这里有两篇文章对于操作讲解的还是比较详细的\n\n1、[基于 CoreText 的排版引擎：基础](http://blog.devtang.com/2015/06/27/using-coretext-1/)\n\n2、[基于 CoreText 的排版引擎：进阶](基于 CoreText 的排版引擎：进阶)\n","slug":"iOS/UI/CoreText","published":1,"updated":"2021-09-16T06:42:30.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn340034iu9k45kd6nju","content":"<p><strong>1、概念：</strong>在操作之前，先了解一下 CoreText 概念，以便理解。</p>\n<p>1.1、<a href=\"https://developer.apple.com/documentation/coretext\">CoreText</a> 框架中最常用的几个类：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CTFont</span><br><span class=\"line\">CTFontCollection</span><br><span class=\"line\">CTFontDescriptor</span><br><span class=\"line\">CTFrame</span><br><span class=\"line\">CTFramesetter</span><br><span class=\"line\">CTGlyphInfo</span><br><span class=\"line\">CTLine</span><br><span class=\"line\">CTParagraphStyle</span><br><span class=\"line\">CTRun</span><br><span class=\"line\">CTTextTab</span><br><span class=\"line\">CTTypesett</span><br></pre></td></tr></table></figure>\n\n<p>下面是该框架的结构图<br><img src=\"/Resources/ctframe.png\" alt=\"CTFrame\"><br>CTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。<br>注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。<br>通常处理步聚：<br>1.使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－&gt;attributedString －&gt; 生成 CTFramesetter -&gt; 得到CTFrame -&gt; 绘制（CTFrameDraw）<br>其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。</p>\n<p>2.绘制只是显示，点击事件就需要一个判断了。<br>CTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。</p>\n<p><strong>1.2 字体的基本知识</strong></p>\n<p>**字体(Font):**是一系列字号、样式和磅值相同的字符(例如:10磅黑体Palatino)。现多被视为字样的同义词</p>\n<p>**字面(Face):**是所有字号的磅值和格式的综合</p>\n<p>**字体集(Font family):**是一组相关字体(例如:Franklin family包括Franklin Gothic、Fran-klinHeavy和Franklin Compressed)</p>\n<p>**磅值(Weight):**用于描述字体粗度。典型的磅值,从最粗到最细,有极细、细、book、中等、半粗、粗、较粗、极粗</p>\n<p>**样式(Style):**字形有三种形式:Roman type是直体;oblique type是斜体;utakuc type是斜体兼曲线(比Roman type更像书法体)。</p>\n<p>**x高度(X height):**指小写字母的平均高度(以x为基准)。磅值相同的两字母,x高度越大的字母看起来比x高度小的字母要大</p>\n<p>**Cap高度(Cap height):**与x高度相似。指大写字母的平均高度(以C为基准)</p>\n<p>**下行字母(Descender):**例如在字母q中,基线以下的字母部分叫下伸部分</p>\n<p>**上行字母(Ascender):**x高度以上的部分(比如字母b)叫做上伸部分</p>\n<p>**基线(Baseline):**通常在x、v、b、m下的那条线</p>\n<p>**描边(Stroke):**组成字符的线或曲线。可以加粗或改变字符形状</p>\n<p>**衬线(Serif):**用来使字符更可视的一条水平线。如字母左上角和下部的水平线。</p>\n<p>**无衬线(Sans Serif):**可以让排字员不使用衬线装饰。</p>\n<p>**方形字(Block):**这种字体的笔画使字符看起来比无衬线字更显眼,但还不到常见的衬线字的程度。例如Lubalin Graph就是方形字,这种字看起来好像是木头块刻的一样</p>\n<p>**手写体脚本(Calligraphic script):**是一种仿效手写体的字体。例如Murray Hill或者Fraktur字体</p>\n<p>**艺术字(Decorative):**像绘画般的字体</p>\n<p>**Pi符号(Pisymbol):**非标准的字母数字字符的特殊符号。例如Wingdings和Mathematical Pi</p>\n<p>**连写(Ligature):**是一系列连写字母如fi、fl、ffi或ffl。由于字些字母形状的原因经常被连写,故排字员已习惯将它们连写。</p>\n<p>读完了上面这些概念，可以参考一下下面的图片，看看具体的位置<br><img src=\"/Resources/text_glpy_info.gif\" alt=\"CTFrame\"></p>\n<p><img src=\"/Resources/text_glpy_info_1.gif\" alt=\"CTFrame\"></p>\n<ul>\n<li><strong>引用原文：</strong><a href=\"https://www.jianshu.com/p/9553fcbbaab1\">CoreText 基础概念</a></li>\n</ul>\n<p><strong>2、操作：</strong>这里有两篇文章对于操作讲解的还是比较详细的</p>\n<p>1、<a href=\"http://blog.devtang.com/2015/06/27/using-coretext-1/\">基于 CoreText 的排版引擎：基础</a></p>\n<p>2、[基于 CoreText 的排版引擎：进阶](基于 CoreText 的排版引擎：进阶)</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>1、概念：</strong>在操作之前，先了解一下 CoreText 概念，以便理解。</p>\n<p>1.1、<a href=\"https://developer.apple.com/documentation/coretext\">CoreText</a> 框架中最常用的几个类：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CTFont</span><br><span class=\"line\">CTFontCollection</span><br><span class=\"line\">CTFontDescriptor</span><br><span class=\"line\">CTFrame</span><br><span class=\"line\">CTFramesetter</span><br><span class=\"line\">CTGlyphInfo</span><br><span class=\"line\">CTLine</span><br><span class=\"line\">CTParagraphStyle</span><br><span class=\"line\">CTRun</span><br><span class=\"line\">CTTextTab</span><br><span class=\"line\">CTTypesett</span><br></pre></td></tr></table></figure>\n\n<p>下面是该框架的结构图<br><img src=\"/Resources/ctframe.png\" alt=\"CTFrame\"><br>CTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。<br>注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。<br>通常处理步聚：<br>1.使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－&gt;attributedString －&gt; 生成 CTFramesetter -&gt; 得到CTFrame -&gt; 绘制（CTFrameDraw）<br>其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。</p>\n<p>2.绘制只是显示，点击事件就需要一个判断了。<br>CTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。</p>\n<p><strong>1.2 字体的基本知识</strong></p>\n<p>**字体(Font):**是一系列字号、样式和磅值相同的字符(例如:10磅黑体Palatino)。现多被视为字样的同义词</p>\n<p>**字面(Face):**是所有字号的磅值和格式的综合</p>\n<p>**字体集(Font family):**是一组相关字体(例如:Franklin family包括Franklin Gothic、Fran-klinHeavy和Franklin Compressed)</p>\n<p>**磅值(Weight):**用于描述字体粗度。典型的磅值,从最粗到最细,有极细、细、book、中等、半粗、粗、较粗、极粗</p>\n<p>**样式(Style):**字形有三种形式:Roman type是直体;oblique type是斜体;utakuc type是斜体兼曲线(比Roman type更像书法体)。</p>\n<p>**x高度(X height):**指小写字母的平均高度(以x为基准)。磅值相同的两字母,x高度越大的字母看起来比x高度小的字母要大</p>\n<p>**Cap高度(Cap height):**与x高度相似。指大写字母的平均高度(以C为基准)</p>\n<p>**下行字母(Descender):**例如在字母q中,基线以下的字母部分叫下伸部分</p>\n<p>**上行字母(Ascender):**x高度以上的部分(比如字母b)叫做上伸部分</p>\n<p>**基线(Baseline):**通常在x、v、b、m下的那条线</p>\n<p>**描边(Stroke):**组成字符的线或曲线。可以加粗或改变字符形状</p>\n<p>**衬线(Serif):**用来使字符更可视的一条水平线。如字母左上角和下部的水平线。</p>\n<p>**无衬线(Sans Serif):**可以让排字员不使用衬线装饰。</p>\n<p>**方形字(Block):**这种字体的笔画使字符看起来比无衬线字更显眼,但还不到常见的衬线字的程度。例如Lubalin Graph就是方形字,这种字看起来好像是木头块刻的一样</p>\n<p>**手写体脚本(Calligraphic script):**是一种仿效手写体的字体。例如Murray Hill或者Fraktur字体</p>\n<p>**艺术字(Decorative):**像绘画般的字体</p>\n<p>**Pi符号(Pisymbol):**非标准的字母数字字符的特殊符号。例如Wingdings和Mathematical Pi</p>\n<p>**连写(Ligature):**是一系列连写字母如fi、fl、ffi或ffl。由于字些字母形状的原因经常被连写,故排字员已习惯将它们连写。</p>\n<p>读完了上面这些概念，可以参考一下下面的图片，看看具体的位置<br><img src=\"/Resources/text_glpy_info.gif\" alt=\"CTFrame\"></p>\n<p><img src=\"/Resources/text_glpy_info_1.gif\" alt=\"CTFrame\"></p>\n<ul>\n<li><strong>引用原文：</strong><a href=\"https://www.jianshu.com/p/9553fcbbaab1\">CoreText 基础概念</a></li>\n</ul>\n<p><strong>2、操作：</strong>这里有两篇文章对于操作讲解的还是比较详细的</p>\n<p>1、<a href=\"http://blog.devtang.com/2015/06/27/using-coretext-1/\">基于 CoreText 的排版引擎：基础</a></p>\n<p>2、[基于 CoreText 的排版引擎：进阶](基于 CoreText 的排版引擎：进阶)</p>\n"},{"title":"iOS排版与渲染引擎——TextKit","abbrlink":"6a4a572f","date":"2021-04-20T13:36:02.000Z","_content":"\n\n[TexkKit 探究](https://www.jianshu.com/p/3f445d7f44d6)\n\n[iOS7 排版与渲染引擎](https://www.jianshu.com/p/e05b43faa106)\n","source":"_posts/iOS/UI/TextKit.md","raw":"---\ntitle: iOS排版与渲染引擎——TextKit\nabbrlink: 6a4a572f\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n\n[TexkKit 探究](https://www.jianshu.com/p/3f445d7f44d6)\n\n[iOS7 排版与渲染引擎](https://www.jianshu.com/p/e05b43faa106)\n","slug":"iOS/UI/TextKit","published":1,"updated":"2021-09-16T06:42:30.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn350035iu9kfwwk6p2k","content":"<p><a href=\"https://www.jianshu.com/p/3f445d7f44d6\">TexkKit 探究</a></p>\n<p><a href=\"https://www.jianshu.com/p/e05b43faa106\">iOS7 排版与渲染引擎</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.jianshu.com/p/3f445d7f44d6\">TexkKit 探究</a></p>\n<p><a href=\"https://www.jianshu.com/p/e05b43faa106\">iOS7 排版与渲染引擎</a></p>\n"},{"title":"iOS之UI界面","abbrlink":"5eb1e5","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. TextKit\n\n## 2. CoreText\n\n## 3. WebKit\n\n## 4. 文字渲染\n\n### 4.1 PDF\n\n## 5. CoreGraphic\n\n## 6. QuartZ\n\n## 7. 布局\n\n## 8. 动画\n\n## 9. [Texture](https://github.com/texturegroup/texture/  'AsyncDisplayKit')\n","source":"_posts/iOS/UI/UI.md","raw":"---\ntitle: iOS之UI界面\nabbrlink: 5eb1e5\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. TextKit\n\n## 2. CoreText\n\n## 3. WebKit\n\n## 4. 文字渲染\n\n### 4.1 PDF\n\n## 5. CoreGraphic\n\n## 6. QuartZ\n\n## 7. 布局\n\n## 8. 动画\n\n## 9. [Texture](https://github.com/texturegroup/texture/  'AsyncDisplayKit')\n","slug":"iOS/UI/UI","published":1,"updated":"2021-09-16T06:42:30.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn360036iu9k2wdyejvu","content":"<h2 id=\"1-TextKit\"><a href=\"#1-TextKit\" class=\"headerlink\" title=\"1. TextKit\"></a>1. TextKit</h2><h2 id=\"2-CoreText\"><a href=\"#2-CoreText\" class=\"headerlink\" title=\"2. CoreText\"></a>2. CoreText</h2><h2 id=\"3-WebKit\"><a href=\"#3-WebKit\" class=\"headerlink\" title=\"3. WebKit\"></a>3. WebKit</h2><h2 id=\"4-文字渲染\"><a href=\"#4-文字渲染\" class=\"headerlink\" title=\"4. 文字渲染\"></a>4. 文字渲染</h2><h3 id=\"4-1-PDF\"><a href=\"#4-1-PDF\" class=\"headerlink\" title=\"4.1 PDF\"></a>4.1 PDF</h3><h2 id=\"5-CoreGraphic\"><a href=\"#5-CoreGraphic\" class=\"headerlink\" title=\"5. CoreGraphic\"></a>5. CoreGraphic</h2><h2 id=\"6-QuartZ\"><a href=\"#6-QuartZ\" class=\"headerlink\" title=\"6. QuartZ\"></a>6. QuartZ</h2><h2 id=\"7-布局\"><a href=\"#7-布局\" class=\"headerlink\" title=\"7. 布局\"></a>7. 布局</h2><h2 id=\"8-动画\"><a href=\"#8-动画\" class=\"headerlink\" title=\"8. 动画\"></a>8. 动画</h2><h2 id=\"9-Texture\"><a href=\"#9-Texture\" class=\"headerlink\" title=\"9. Texture\"></a>9. <a href=\"https://github.com/texturegroup/texture/\" title=\"AsyncDisplayKit\">Texture</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-TextKit\"><a href=\"#1-TextKit\" class=\"headerlink\" title=\"1. TextKit\"></a>1. TextKit</h2><h2 id=\"2-CoreText\"><a href=\"#2-CoreText\" class=\"headerlink\" title=\"2. CoreText\"></a>2. CoreText</h2><h2 id=\"3-WebKit\"><a href=\"#3-WebKit\" class=\"headerlink\" title=\"3. WebKit\"></a>3. WebKit</h2><h2 id=\"4-文字渲染\"><a href=\"#4-文字渲染\" class=\"headerlink\" title=\"4. 文字渲染\"></a>4. 文字渲染</h2><h3 id=\"4-1-PDF\"><a href=\"#4-1-PDF\" class=\"headerlink\" title=\"4.1 PDF\"></a>4.1 PDF</h3><h2 id=\"5-CoreGraphic\"><a href=\"#5-CoreGraphic\" class=\"headerlink\" title=\"5. CoreGraphic\"></a>5. CoreGraphic</h2><h2 id=\"6-QuartZ\"><a href=\"#6-QuartZ\" class=\"headerlink\" title=\"6. QuartZ\"></a>6. QuartZ</h2><h2 id=\"7-布局\"><a href=\"#7-布局\" class=\"headerlink\" title=\"7. 布局\"></a>7. 布局</h2><h2 id=\"8-动画\"><a href=\"#8-动画\" class=\"headerlink\" title=\"8. 动画\"></a>8. 动画</h2><h2 id=\"9-Texture\"><a href=\"#9-Texture\" class=\"headerlink\" title=\"9. Texture\"></a>9. <a href=\"https://github.com/texturegroup/texture/\" title=\"AsyncDisplayKit\">Texture</a></h2>"},{"title":"iOS之交互体验","abbrlink":"970e4944","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/UI/UserExperences.md","raw":"---\ntitle: iOS之交互体验\nabbrlink: '970e4944'\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/UI/UserExperences","published":1,"updated":"2021-09-16T06:42:30.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn370037iu9k88pcc121","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"iOS之算法","date":"2021-04-20T13:36:02.000Z","_content":"## 1、算法--Swift\n\n### 1.1 [raywenderlich/swift-algorithm-club](https://github.com/raywenderlich/swift-algorithm-club.git)\n\nAlgorithms and data structures in Swift, with explanations!\n\n## 2. 算法概要\n\n### 2.1 随机数\n\n| 函数名       | 返回值   | 取值范围      |\n| ------------ | -------- | ------------- |\n| rand()       | int      | 0～2147483647 |\n| random()     | long     | 0～2147483647 |\n| arc4random() | uint32_t | 0～4294967295 |\n\n#### 2.1.1 随机数和伪随机数\n\n真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。\n\n而计算机中的随机数并不是真正的随机数，而是通过通过随机函数按照一定算法模拟产生的，其结果是确定可预见的，所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数。\n\n硬件方法是指采集某一种物理噪声，经过抽样、量化之后得到的随机数。例如大气噪声。此类噪声是由自然界中的布朗运动等现象产生的，因此可以看作真正的随机数生成器，只要是通过算法产生的随机数都是伪随机数。通过真实随机事件取得的随机数才是真随机数。\n\n#### 2.1.2 随机种子（Random Seed）\n\n一种以随机数作为对象的以真随机数（种子）为初始条件的随机数。计算机中的随机数都是伪随机数，以一个真随机数（种子）作为初始条件，然后用一定的算法不停迭代产生随机数。通俗来讲种子就是个序号，这个序号交给一个数列管理器，通过这个序号，你从管理器中取出一个数列，这个数列就是你通过那个序号得到的随机数。\n\n种子和随机数列是一一对应的。{An}=f(x), x 就是种子，F()是算法，{An}是数列，这个数列看上去是随机的，这是因为An的通项很复杂。\n\n种子的选择有规律吗？肯定是有！那么生成的随机数也一定是有规律的了。既然有规律，那肯定就是伪随机了，因为你不知道种子和随机数算法对你来说当然就是随机数。\n\n*原文链接： [iOS 随机数](https://www.jianshu.com/p/3e751235ecd0)\n","source":"_drafts/Computers/Algorithm/Algorithm.md","raw":"---\ntitle: iOS之算法\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1、算法--Swift\n\n### 1.1 [raywenderlich/swift-algorithm-club](https://github.com/raywenderlich/swift-algorithm-club.git)\n\nAlgorithms and data structures in Swift, with explanations!\n\n## 2. 算法概要\n\n### 2.1 随机数\n\n| 函数名       | 返回值   | 取值范围      |\n| ------------ | -------- | ------------- |\n| rand()       | int      | 0～2147483647 |\n| random()     | long     | 0～2147483647 |\n| arc4random() | uint32_t | 0～4294967295 |\n\n#### 2.1.1 随机数和伪随机数\n\n真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。\n\n而计算机中的随机数并不是真正的随机数，而是通过通过随机函数按照一定算法模拟产生的，其结果是确定可预见的，所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数。\n\n硬件方法是指采集某一种物理噪声，经过抽样、量化之后得到的随机数。例如大气噪声。此类噪声是由自然界中的布朗运动等现象产生的，因此可以看作真正的随机数生成器，只要是通过算法产生的随机数都是伪随机数。通过真实随机事件取得的随机数才是真随机数。\n\n#### 2.1.2 随机种子（Random Seed）\n\n一种以随机数作为对象的以真随机数（种子）为初始条件的随机数。计算机中的随机数都是伪随机数，以一个真随机数（种子）作为初始条件，然后用一定的算法不停迭代产生随机数。通俗来讲种子就是个序号，这个序号交给一个数列管理器，通过这个序号，你从管理器中取出一个数列，这个数列就是你通过那个序号得到的随机数。\n\n种子和随机数列是一一对应的。{An}=f(x), x 就是种子，F()是算法，{An}是数列，这个数列看上去是随机的，这是因为An的通项很复杂。\n\n种子的选择有规律吗？肯定是有！那么生成的随机数也一定是有规律的了。既然有规律，那肯定就是伪随机了，因为你不知道种子和随机数算法对你来说当然就是随机数。\n\n*原文链接： [iOS 随机数](https://www.jianshu.com/p/3e751235ecd0)\n","slug":"Computers/Algorithm/Algorithm","published":0,"updated":"2021-07-29T06:46:01.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn370038iu9k1n8q4wb4","content":"<h2 id=\"1、算法–Swift\"><a href=\"#1、算法–Swift\" class=\"headerlink\" title=\"1、算法–Swift\"></a>1、算法–Swift</h2><h3 id=\"1-1-raywenderlich-swift-algorithm-club\"><a href=\"#1-1-raywenderlich-swift-algorithm-club\" class=\"headerlink\" title=\"1.1 raywenderlich/swift-algorithm-club\"></a>1.1 <a href=\"https://github.com/raywenderlich/swift-algorithm-club.git\">raywenderlich/swift-algorithm-club</a></h3><p>Algorithms and data structures in Swift, with explanations!</p>\n<h2 id=\"2-算法概要\"><a href=\"#2-算法概要\" class=\"headerlink\" title=\"2. 算法概要\"></a>2. 算法概要</h2><h3 id=\"2-1-随机数\"><a href=\"#2-1-随机数\" class=\"headerlink\" title=\"2.1 随机数\"></a>2.1 随机数</h3><table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>返回值</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rand()</td>\n<td>int</td>\n<td>0～2147483647</td>\n</tr>\n<tr>\n<td>random()</td>\n<td>long</td>\n<td>0～2147483647</td>\n</tr>\n<tr>\n<td>arc4random()</td>\n<td>uint32_t</td>\n<td>0～4294967295</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-1-1-随机数和伪随机数\"><a href=\"#2-1-1-随机数和伪随机数\" class=\"headerlink\" title=\"2.1.1 随机数和伪随机数\"></a>2.1.1 随机数和伪随机数</h4><p>真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。</p>\n<p>而计算机中的随机数并不是真正的随机数，而是通过通过随机函数按照一定算法模拟产生的，其结果是确定可预见的，所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数。</p>\n<p>硬件方法是指采集某一种物理噪声，经过抽样、量化之后得到的随机数。例如大气噪声。此类噪声是由自然界中的布朗运动等现象产生的，因此可以看作真正的随机数生成器，只要是通过算法产生的随机数都是伪随机数。通过真实随机事件取得的随机数才是真随机数。</p>\n<h4 id=\"2-1-2-随机种子（Random-Seed）\"><a href=\"#2-1-2-随机种子（Random-Seed）\" class=\"headerlink\" title=\"2.1.2 随机种子（Random Seed）\"></a>2.1.2 随机种子（Random Seed）</h4><p>一种以随机数作为对象的以真随机数（种子）为初始条件的随机数。计算机中的随机数都是伪随机数，以一个真随机数（种子）作为初始条件，然后用一定的算法不停迭代产生随机数。通俗来讲种子就是个序号，这个序号交给一个数列管理器，通过这个序号，你从管理器中取出一个数列，这个数列就是你通过那个序号得到的随机数。</p>\n<p>种子和随机数列是一一对应的。{An}=f(x), x 就是种子，F()是算法，{An}是数列，这个数列看上去是随机的，这是因为An的通项很复杂。</p>\n<p>种子的选择有规律吗？肯定是有！那么生成的随机数也一定是有规律的了。既然有规律，那肯定就是伪随机了，因为你不知道种子和随机数算法对你来说当然就是随机数。</p>\n<p>*原文链接： <a href=\"https://www.jianshu.com/p/3e751235ecd0\">iOS 随机数</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、算法–Swift\"><a href=\"#1、算法–Swift\" class=\"headerlink\" title=\"1、算法–Swift\"></a>1、算法–Swift</h2><h3 id=\"1-1-raywenderlich-swift-algorithm-club\"><a href=\"#1-1-raywenderlich-swift-algorithm-club\" class=\"headerlink\" title=\"1.1 raywenderlich/swift-algorithm-club\"></a>1.1 <a href=\"https://github.com/raywenderlich/swift-algorithm-club.git\">raywenderlich/swift-algorithm-club</a></h3><p>Algorithms and data structures in Swift, with explanations!</p>\n<h2 id=\"2-算法概要\"><a href=\"#2-算法概要\" class=\"headerlink\" title=\"2. 算法概要\"></a>2. 算法概要</h2><h3 id=\"2-1-随机数\"><a href=\"#2-1-随机数\" class=\"headerlink\" title=\"2.1 随机数\"></a>2.1 随机数</h3><table>\n<thead>\n<tr>\n<th>函数名</th>\n<th>返回值</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rand()</td>\n<td>int</td>\n<td>0～2147483647</td>\n</tr>\n<tr>\n<td>random()</td>\n<td>long</td>\n<td>0～2147483647</td>\n</tr>\n<tr>\n<td>arc4random()</td>\n<td>uint32_t</td>\n<td>0～4294967295</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-1-1-随机数和伪随机数\"><a href=\"#2-1-1-随机数和伪随机数\" class=\"headerlink\" title=\"2.1.1 随机数和伪随机数\"></a>2.1.1 随机数和伪随机数</h4><p>真正意义上的随机数（或者随机事件）在某次产生过程中是按照实验过程中表现的分布概率随机产生的，其结果是不可预测的，是不可见的。</p>\n<p>而计算机中的随机数并不是真正的随机数，而是通过通过随机函数按照一定算法模拟产生的，其结果是确定可预见的，所以用计算机随机函数所产生的“随机数”并不随机，是伪随机数。</p>\n<p>硬件方法是指采集某一种物理噪声，经过抽样、量化之后得到的随机数。例如大气噪声。此类噪声是由自然界中的布朗运动等现象产生的，因此可以看作真正的随机数生成器，只要是通过算法产生的随机数都是伪随机数。通过真实随机事件取得的随机数才是真随机数。</p>\n<h4 id=\"2-1-2-随机种子（Random-Seed）\"><a href=\"#2-1-2-随机种子（Random-Seed）\" class=\"headerlink\" title=\"2.1.2 随机种子（Random Seed）\"></a>2.1.2 随机种子（Random Seed）</h4><p>一种以随机数作为对象的以真随机数（种子）为初始条件的随机数。计算机中的随机数都是伪随机数，以一个真随机数（种子）作为初始条件，然后用一定的算法不停迭代产生随机数。通俗来讲种子就是个序号，这个序号交给一个数列管理器，通过这个序号，你从管理器中取出一个数列，这个数列就是你通过那个序号得到的随机数。</p>\n<p>种子和随机数列是一一对应的。{An}=f(x), x 就是种子，F()是算法，{An}是数列，这个数列看上去是随机的，这是因为An的通项很复杂。</p>\n<p>种子的选择有规律吗？肯定是有！那么生成的随机数也一定是有规律的了。既然有规律，那肯定就是伪随机了，因为你不知道种子和随机数算法对你来说当然就是随机数。</p>\n<p>*原文链接： <a href=\"https://www.jianshu.com/p/3e751235ecd0\">iOS 随机数</a></p>\n"},{"title":"算法之哈希","date":"2021-04-20T13:36:02.000Z","_content":"## 1.1 数据结构\n\n根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称为哈希表，这一映像过程称为哈希造表或者散列，所得的存储位置称哈希地址或散列地址。\n\n## 1.2 寻址\n\n## 1.3 冲突\n\n### 1.3.1 解决办法\n\n### 1.3.1.1 再哈希\n\n用不同的哈希函数，对产生地址冲突的关键字再次进行哈希计算，获取另一个哈希地址，直到不在产生冲突，这种方法不易产生“二次聚集”，但是增加的计算的时间。\n\n### 1.3.1.2 链地址\n\n将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。\n\n### 1.3.1.3 建立公共溢出区\n\n这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表\n\n### 1.3.1.4 开放定址法(再散列法)\n\n1.线性探测再散列：\n\ndii=1，2，3，…，m-1         冲突发生时，顺序查看表中下一单元，直到找出一个空单元或查遍全表。\n\n2.二次探测再散列：\n\ndi=12，-12，22，-22，…，k2，-k2    ( k<=m/2 )         冲突发生时，在表的左右进行跳跃式探测，比较灵活。\n\n3.伪随机探测再散列：\n\ndi=伪随机数序列。  具体实现时，应建立一个伪随机数发生器，（如i=(i+p) % m），并给定一个随机数做起点。\n\n### 1.3.2 哈希函数的构造方法\n\n### 1.3.2.1 数字分析法\n\n可以从关键如果事先知道关键字集合，并且每个关键字的位数比哈希表的地址码位数多时，可以从关键字中选出分布较均匀的若干位，构成哈希地址。\n\n### 1.3.2.2 平方取中法\n\n当无法确定关键字中哪几位分布较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为哈希地址。\n\n### 1.3.2.3 分段叠加法\n\n这种方法是按哈希表地址位数将关键字分成位数相等的几部分（最后一部分可以较短），然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。\n\n### 1.3.2.4 除留余数法\n\n假设哈希表长为m，p为小于等于m的最大素数，则哈希函数为 h（k）=k  %  p ，其中%为模p取余运算。\n\n## 1.4 参考[^参考]\n\n[^参考]: [哈希表冲突及处理冲突的方法](https://blog.csdn.net/qq_40803710/article/details/80945617?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&dist_request_id=1328767.80835.16177609952348745&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control)\n","source":"_drafts/Computers/Algorithm/Hash.md","raw":"---\ntitle: 算法之哈希\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1.1 数据结构\n\n根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称为哈希表，这一映像过程称为哈希造表或者散列，所得的存储位置称哈希地址或散列地址。\n\n## 1.2 寻址\n\n## 1.3 冲突\n\n### 1.3.1 解决办法\n\n### 1.3.1.1 再哈希\n\n用不同的哈希函数，对产生地址冲突的关键字再次进行哈希计算，获取另一个哈希地址，直到不在产生冲突，这种方法不易产生“二次聚集”，但是增加的计算的时间。\n\n### 1.3.1.2 链地址\n\n将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。\n\n### 1.3.1.3 建立公共溢出区\n\n这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表\n\n### 1.3.1.4 开放定址法(再散列法)\n\n1.线性探测再散列：\n\ndii=1，2，3，…，m-1         冲突发生时，顺序查看表中下一单元，直到找出一个空单元或查遍全表。\n\n2.二次探测再散列：\n\ndi=12，-12，22，-22，…，k2，-k2    ( k<=m/2 )         冲突发生时，在表的左右进行跳跃式探测，比较灵活。\n\n3.伪随机探测再散列：\n\ndi=伪随机数序列。  具体实现时，应建立一个伪随机数发生器，（如i=(i+p) % m），并给定一个随机数做起点。\n\n### 1.3.2 哈希函数的构造方法\n\n### 1.3.2.1 数字分析法\n\n可以从关键如果事先知道关键字集合，并且每个关键字的位数比哈希表的地址码位数多时，可以从关键字中选出分布较均匀的若干位，构成哈希地址。\n\n### 1.3.2.2 平方取中法\n\n当无法确定关键字中哪几位分布较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为哈希地址。\n\n### 1.3.2.3 分段叠加法\n\n这种方法是按哈希表地址位数将关键字分成位数相等的几部分（最后一部分可以较短），然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。\n\n### 1.3.2.4 除留余数法\n\n假设哈希表长为m，p为小于等于m的最大素数，则哈希函数为 h（k）=k  %  p ，其中%为模p取余运算。\n\n## 1.4 参考[^参考]\n\n[^参考]: [哈希表冲突及处理冲突的方法](https://blog.csdn.net/qq_40803710/article/details/80945617?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&dist_request_id=1328767.80835.16177609952348745&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control)\n","slug":"Computers/Algorithm/Hash","published":0,"updated":"2021-07-29T06:46:01.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn380039iu9kcq2xb5dq","content":"<h2 id=\"1-1-数据结构\"><a href=\"#1-1-数据结构\" class=\"headerlink\" title=\"1.1 数据结构\"></a>1.1 数据结构</h2><p>根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称为哈希表，这一映像过程称为哈希造表或者散列，所得的存储位置称哈希地址或散列地址。</p>\n<h2 id=\"1-2-寻址\"><a href=\"#1-2-寻址\" class=\"headerlink\" title=\"1.2 寻址\"></a>1.2 寻址</h2><h2 id=\"1-3-冲突\"><a href=\"#1-3-冲突\" class=\"headerlink\" title=\"1.3 冲突\"></a>1.3 冲突</h2><h3 id=\"1-3-1-解决办法\"><a href=\"#1-3-1-解决办法\" class=\"headerlink\" title=\"1.3.1 解决办法\"></a>1.3.1 解决办法</h3><h3 id=\"1-3-1-1-再哈希\"><a href=\"#1-3-1-1-再哈希\" class=\"headerlink\" title=\"1.3.1.1 再哈希\"></a>1.3.1.1 再哈希</h3><p>用不同的哈希函数，对产生地址冲突的关键字再次进行哈希计算，获取另一个哈希地址，直到不在产生冲突，这种方法不易产生“二次聚集”，但是增加的计算的时间。</p>\n<h3 id=\"1-3-1-2-链地址\"><a href=\"#1-3-1-2-链地址\" class=\"headerlink\" title=\"1.3.1.2 链地址\"></a>1.3.1.2 链地址</h3><p>将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。</p>\n<h3 id=\"1-3-1-3-建立公共溢出区\"><a href=\"#1-3-1-3-建立公共溢出区\" class=\"headerlink\" title=\"1.3.1.3 建立公共溢出区\"></a>1.3.1.3 建立公共溢出区</h3><p>这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表</p>\n<h3 id=\"1-3-1-4-开放定址法-再散列法\"><a href=\"#1-3-1-4-开放定址法-再散列法\" class=\"headerlink\" title=\"1.3.1.4 开放定址法(再散列法)\"></a>1.3.1.4 开放定址法(再散列法)</h3><p>1.线性探测再散列：</p>\n<p>dii=1，2，3，…，m-1         冲突发生时，顺序查看表中下一单元，直到找出一个空单元或查遍全表。</p>\n<p>2.二次探测再散列：</p>\n<p>di=12，-12，22，-22，…，k2，-k2    ( k&lt;=m/2 )         冲突发生时，在表的左右进行跳跃式探测，比较灵活。</p>\n<p>3.伪随机探测再散列：</p>\n<p>di=伪随机数序列。  具体实现时，应建立一个伪随机数发生器，（如i=(i+p) % m），并给定一个随机数做起点。</p>\n<h3 id=\"1-3-2-哈希函数的构造方法\"><a href=\"#1-3-2-哈希函数的构造方法\" class=\"headerlink\" title=\"1.3.2 哈希函数的构造方法\"></a>1.3.2 哈希函数的构造方法</h3><h3 id=\"1-3-2-1-数字分析法\"><a href=\"#1-3-2-1-数字分析法\" class=\"headerlink\" title=\"1.3.2.1 数字分析法\"></a>1.3.2.1 数字分析法</h3><p>可以从关键如果事先知道关键字集合，并且每个关键字的位数比哈希表的地址码位数多时，可以从关键字中选出分布较均匀的若干位，构成哈希地址。</p>\n<h3 id=\"1-3-2-2-平方取中法\"><a href=\"#1-3-2-2-平方取中法\" class=\"headerlink\" title=\"1.3.2.2 平方取中法\"></a>1.3.2.2 平方取中法</h3><p>当无法确定关键字中哪几位分布较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为哈希地址。</p>\n<h3 id=\"1-3-2-3-分段叠加法\"><a href=\"#1-3-2-3-分段叠加法\" class=\"headerlink\" title=\"1.3.2.3 分段叠加法\"></a>1.3.2.3 分段叠加法</h3><p>这种方法是按哈希表地址位数将关键字分成位数相等的几部分（最后一部分可以较短），然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。</p>\n<h3 id=\"1-3-2-4-除留余数法\"><a href=\"#1-3-2-4-除留余数法\" class=\"headerlink\" title=\"1.3.2.4 除留余数法\"></a>1.3.2.4 除留余数法</h3><p>假设哈希表长为m，p为小于等于m的最大素数，则哈希函数为 h（k）=k  %  p ，其中%为模p取余运算。</p>\n<h2 id=\"1-4-参考-参考\"><a href=\"#1-4-参考-参考\" class=\"headerlink\" title=\"1.4 参考^参考\"></a>1.4 参考<a href=\"%5B%E5%93%88%E5%B8%8C%E8%A1%A8%E5%86%B2%E7%AA%81%E5%8F%8A%E5%A4%84%E7%90%86%E5%86%B2%E7%AA%81%E7%9A%84%E6%96%B9%E6%B3%95%5D(https://blog.csdn.net/qq_40803710/article/details/80945617?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&dist_request_id=1328767.80835.16177609952348745&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control)\">^参考</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-1-数据结构\"><a href=\"#1-1-数据结构\" class=\"headerlink\" title=\"1.1 数据结构\"></a>1.1 数据结构</h2><p>根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称为哈希表，这一映像过程称为哈希造表或者散列，所得的存储位置称哈希地址或散列地址。</p>\n<h2 id=\"1-2-寻址\"><a href=\"#1-2-寻址\" class=\"headerlink\" title=\"1.2 寻址\"></a>1.2 寻址</h2><h2 id=\"1-3-冲突\"><a href=\"#1-3-冲突\" class=\"headerlink\" title=\"1.3 冲突\"></a>1.3 冲突</h2><h3 id=\"1-3-1-解决办法\"><a href=\"#1-3-1-解决办法\" class=\"headerlink\" title=\"1.3.1 解决办法\"></a>1.3.1 解决办法</h3><h3 id=\"1-3-1-1-再哈希\"><a href=\"#1-3-1-1-再哈希\" class=\"headerlink\" title=\"1.3.1.1 再哈希\"></a>1.3.1.1 再哈希</h3><p>用不同的哈希函数，对产生地址冲突的关键字再次进行哈希计算，获取另一个哈希地址，直到不在产生冲突，这种方法不易产生“二次聚集”，但是增加的计算的时间。</p>\n<h3 id=\"1-3-1-2-链地址\"><a href=\"#1-3-1-2-链地址\" class=\"headerlink\" title=\"1.3.1.2 链地址\"></a>1.3.1.2 链地址</h3><p>将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。</p>\n<h3 id=\"1-3-1-3-建立公共溢出区\"><a href=\"#1-3-1-3-建立公共溢出区\" class=\"headerlink\" title=\"1.3.1.3 建立公共溢出区\"></a>1.3.1.3 建立公共溢出区</h3><p>这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表</p>\n<h3 id=\"1-3-1-4-开放定址法-再散列法\"><a href=\"#1-3-1-4-开放定址法-再散列法\" class=\"headerlink\" title=\"1.3.1.4 开放定址法(再散列法)\"></a>1.3.1.4 开放定址法(再散列法)</h3><p>1.线性探测再散列：</p>\n<p>dii=1，2，3，…，m-1         冲突发生时，顺序查看表中下一单元，直到找出一个空单元或查遍全表。</p>\n<p>2.二次探测再散列：</p>\n<p>di=12，-12，22，-22，…，k2，-k2    ( k&lt;=m/2 )         冲突发生时，在表的左右进行跳跃式探测，比较灵活。</p>\n<p>3.伪随机探测再散列：</p>\n<p>di=伪随机数序列。  具体实现时，应建立一个伪随机数发生器，（如i=(i+p) % m），并给定一个随机数做起点。</p>\n<h3 id=\"1-3-2-哈希函数的构造方法\"><a href=\"#1-3-2-哈希函数的构造方法\" class=\"headerlink\" title=\"1.3.2 哈希函数的构造方法\"></a>1.3.2 哈希函数的构造方法</h3><h3 id=\"1-3-2-1-数字分析法\"><a href=\"#1-3-2-1-数字分析法\" class=\"headerlink\" title=\"1.3.2.1 数字分析法\"></a>1.3.2.1 数字分析法</h3><p>可以从关键如果事先知道关键字集合，并且每个关键字的位数比哈希表的地址码位数多时，可以从关键字中选出分布较均匀的若干位，构成哈希地址。</p>\n<h3 id=\"1-3-2-2-平方取中法\"><a href=\"#1-3-2-2-平方取中法\" class=\"headerlink\" title=\"1.3.2.2 平方取中法\"></a>1.3.2.2 平方取中法</h3><p>当无法确定关键字中哪几位分布较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为哈希地址。</p>\n<h3 id=\"1-3-2-3-分段叠加法\"><a href=\"#1-3-2-3-分段叠加法\" class=\"headerlink\" title=\"1.3.2.3 分段叠加法\"></a>1.3.2.3 分段叠加法</h3><p>这种方法是按哈希表地址位数将关键字分成位数相等的几部分（最后一部分可以较短），然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。</p>\n<h3 id=\"1-3-2-4-除留余数法\"><a href=\"#1-3-2-4-除留余数法\" class=\"headerlink\" title=\"1.3.2.4 除留余数法\"></a>1.3.2.4 除留余数法</h3><p>假设哈希表长为m，p为小于等于m的最大素数，则哈希函数为 h（k）=k  %  p ，其中%为模p取余运算。</p>\n<h2 id=\"1-4-参考-参考\"><a href=\"#1-4-参考-参考\" class=\"headerlink\" title=\"1.4 参考^参考\"></a>1.4 参考<a href=\"%5B%E5%93%88%E5%B8%8C%E8%A1%A8%E5%86%B2%E7%AA%81%E5%8F%8A%E5%A4%84%E7%90%86%E5%86%B2%E7%AA%81%E7%9A%84%E6%96%B9%E6%B3%95%5D(https://blog.csdn.net/qq_40803710/article/details/80945617?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&dist_request_id=1328767.80835.16177609952348745&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control)\">^参考</a></h2>"},{"_content":"<!--\n * @Author: hepeng.l\n * @Date: 2021-05-21 21:22:49\n * @LastEditors: hepeng.l\n * @LastEditTime: 2021-05-21 21:23:21\n * @Description: \n-->\n\n# LRU\n\n## 1. [手写LRU](https://www.jianshu.com/p/13e575ce4f8d)\n","source":"_drafts/Computers/Algorithm/LRU.md","raw":"<!--\n * @Author: hepeng.l\n * @Date: 2021-05-21 21:22:49\n * @LastEditors: hepeng.l\n * @LastEditTime: 2021-05-21 21:23:21\n * @Description: \n-->\n\n# LRU\n\n## 1. [手写LRU](https://www.jianshu.com/p/13e575ce4f8d)\n","slug":"Computers/Algorithm/LRU","published":0,"date":"2021-07-29T06:45:56.726Z","updated":"2021-07-29T06:45:56.726Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn39003aiu9kfqhngx4a","content":"<!--\n * @Author: hepeng.l\n * @Date: 2021-05-21 21:22:49\n * @LastEditors: hepeng.l\n * @LastEditTime: 2021-05-21 21:23:21\n * @Description: \n-->\n\n<h1 id=\"LRU\"><a href=\"#LRU\" class=\"headerlink\" title=\"LRU\"></a>LRU</h1><h2 id=\"1-手写LRU\"><a href=\"#1-手写LRU\" class=\"headerlink\" title=\"1. 手写LRU\"></a>1. <a href=\"https://www.jianshu.com/p/13e575ce4f8d\">手写LRU</a></h2>","site":{"data":{}},"excerpt":"","more":"<!--\n * @Author: hepeng.l\n * @Date: 2021-05-21 21:22:49\n * @LastEditors: hepeng.l\n * @LastEditTime: 2021-05-21 21:23:21\n * @Description: \n-->\n\n<h1 id=\"LRU\"><a href=\"#LRU\" class=\"headerlink\" title=\"LRU\"></a>LRU</h1><h2 id=\"1-手写LRU\"><a href=\"#1-手写LRU\" class=\"headerlink\" title=\"1. 手写LRU\"></a>1. <a href=\"https://www.jianshu.com/p/13e575ce4f8d\">手写LRU</a></h2>"},{"title":"LinkList","_content":"\n## 1. [链表反转解法](https://zhuanlan.zhihu.com/p/102908327)\n","source":"_drafts/Computers/Algorithm/LinkList.md","raw":"---\ntitle: LinkList\ntags:\n---\n\n## 1. [链表反转解法](https://zhuanlan.zhihu.com/p/102908327)\n","slug":"Computers/Algorithm/LinkList","published":0,"date":"2021-09-16T06:42:30.057Z","updated":"2021-09-16T06:42:30.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn39003biu9k8jvm17r1","content":"<h2 id=\"1-链表反转解法\"><a href=\"#1-链表反转解法\" class=\"headerlink\" title=\"1. 链表反转解法\"></a>1. <a href=\"https://zhuanlan.zhihu.com/p/102908327\">链表反转解法</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-链表反转解法\"><a href=\"#1-链表反转解法\" class=\"headerlink\" title=\"1. 链表反转解法\"></a>1. <a href=\"https://zhuanlan.zhihu.com/p/102908327\">链表反转解法</a></h2>"},{"title":"算法准备","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [算法准备](https://www.jianshu.com/p/5423ac01475f)\n","source":"_drafts/Computers/Algorithm/Pre.md","raw":"---\ntitle: 算法准备\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [算法准备](https://www.jianshu.com/p/5423ac01475f)\n","slug":"Computers/Algorithm/Pre","published":0,"updated":"2021-07-29T06:45:56.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3a003ciu9k66gt534r","content":"<h2 id=\"1-算法准备\"><a href=\"#1-算法准备\" class=\"headerlink\" title=\"1. 算法准备\"></a>1. <a href=\"https://www.jianshu.com/p/5423ac01475f\">算法准备</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-算法准备\"><a href=\"#1-算法准备\" class=\"headerlink\" title=\"1. 算法准备\"></a>1. <a href=\"https://www.jianshu.com/p/5423ac01475f\">算法准备</a></h2>"},{"title":"GuideLine","abbrlink":1351,"date":"2021-08-04T08:37:45.000Z","_content":"\n## 1. TypeScript 指南\n\nJavaScript 的面向对象式编程语言\n\n## 2. 基础类型\n\n基础类型：string，boolean，number\n\n数组，元组，枚举\n\nObject，Any\n\nvoid， Null， Undefined\n\nNever\n\n## 3. 变量声明\n\n作用域规则\n\nvar，let，const\n\nreadonly\n\n### 3.1 解构\n\n数组解构，对象解构\n\n属性重命名\n\n默认值\n\n函数声明中的结构：可选值，默认值，必须参数\n\n展开(...):\n\n1. 后面的覆盖前面的\n\n2. 展开一个对象实例，会丢失其方法\n\n## 4. 接口\n\n可选属性：？\n\n只读属性：readonly\n\n### 4.1 额外的属性检查\n\n对象字面量会被特殊对待而且会经过 `额外属性检查`，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。\n\n索引签名/可索引的类型:\n\n```typescript\ninterface SquareConfig {\n    color?: string;\n    width?: number;\n    [propName: string]: any;\n}\n```\n\n接口定义函数：\n\n```typescript\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n}\n```\n\n### 4.2 类类型\n\n接口描述了类的公共部分，而不是公共和私有两部分。\n\n当一个类实现了一个接口时，只对其实例部分进行类型检查。constructor存在于类的静态部分，所以不在检查的范围内。\n\n```typescript\ninterface ClockConstructor {\n    new (hour: number, minute: number): ClockInterface;\n}\ninterface ClockInterface {\n    tick();\n}\n\nfunction createClock(ctor: ClockConstructor, hour: number, minute: number): ClockInterface {\n    return new ctor(hour, minute);\n}\n\nclass DigitalClock implements ClockInterface {\n    constructor(h: number, m: number) { }\n    tick() {\n        console.log(\"beep beep\");\n    }\n}\nclass AnalogClock implements ClockInterface {\n    constructor(h: number, m: number) { }\n    tick() {\n        console.log(\"tick tock\");\n    }\n}\n\nlet digital = createClock(DigitalClock, 12, 17);\nlet analog = createClock(AnalogClock, 7, 32);\n```\n\n### 4.3 接口继承\n\n和类一样，接口也可以相互继承。\n\n混合类型:\n\n```typescript\ninterface Counter {\n    (start: number): string;\n    interval: number;\n    reset(): void;\n}\n\nfunction getCounter(): Counter {\n    let counter = <Counter>function (start: number) { };\n    counter.interval = 123;\n    counter.reset = function () { };\n    return counter;\n}\n\nlet c = getCounter();\nc(10);\nc.reset();\nc.interval = 5.0;\n```\n\n接口继承类:\n\n当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的private和protected成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。\n\n## 5. 类\n\n继承\n\n公共，私有与受保护的修饰符\n\n### 5.1 参数属性\n\n```typescript\nclass Octopus {\n    readonly numberOfLegs: number = 8;\n    constructor(readonly name: string) {\n    }\n}\n```\n\n### 5.2 抽象类\n\n```typescript\nabstract class Department {\n\n    constructor(public name: string) {\n    }\n\n    printName(): void {\n        console.log('Department name: ' + this.name);\n    }\n\n    abstract printMeeting(): void; // 必须在派生类中实现\n}\n\nclass AccountingDepartment extends Department {\n\n    constructor() {\n        super('Accounting and Auditing'); // 在派生类的构造函数中必须调用 super()\n    }\n\n    printMeeting(): void {\n        console.log('The Accounting Department meets each Monday at 10am.');\n    }\n\n    generateReports(): void {\n        console.log('Generating accounting reports...');\n    }\n}\n\nlet department: Department; // 允许创建一个对抽象类型的引用\ndepartment = new Department(); // 错误: 不能创建一个抽象类的实例\ndepartment = new AccountingDepartment(); // 允许对一个抽象子类进行实例化和赋值\ndepartment.printName();\ndepartment.printMeeting();\ndepartment.generateReports(); // 错误: 方法在声明的抽象类中不存在\n```\n\n### 5.3 构造函数\n\n```typescript\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nlet greeter: Greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n转换为 JavaScript 后\n\n```typescript\nlet Greeter = (function () {\n    function Greeter(message) {\n        this.greeting = message;\n    }\n    Greeter.prototype.greet = function () {\n        return \"Hello, \" + this.greeting;\n    };\n    return Greeter;\n})();\n\nlet greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n改写一下这个例子，看看它们之间的区别:\n\n```typescript\nclass Greeter {\n    static standardGreeting = \"Hello, there\";\n    greeting: string;\n    greet() {\n        if (this.greeting) {\n            return \"Hello, \" + this.greeting;\n        }\n        else {\n            return Greeter.standardGreeting;\n        }\n    }\n}\n\nlet greeter1: Greeter;\ngreeter1 = new Greeter();\nconsole.log(greeter1.greet());\n\nlet greeterMaker: typeof Greeter = Greeter;\ngreeterMaker.standardGreeting = \"Hey there!\";\n\nlet greeter2: Greeter = new greeterMaker();\nconsole.log(greeter2.greet());\n```\n\n创建了一个叫做 greeterMaker的变量。 这个变量保存了这个类或者说保存了类构造函数。 然后我们使用 typeof Greeter，意思是取Greeter类的类型，而不是实例的类型。 或者更确切的说，\"告诉我 Greeter标识符的类型\"，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在 greeterMaker上使用 new，创建 Greeter的实例。\n\n## 6 函数\n\n### 6.1 函数类型\n\n```typescript\nlet myAdd: (x: number, y: number) => number =\n    function(x: number, y: number): number { return x + y; };\n```\n\n可选参数和默认参数\n\n剩余参数\n\n### 6.2 `this`\n\n```typescript\nlet deck = {\n    suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n    cards: Array(52),\n    createCardPicker: function() {\n        return function() {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n```\n\nthis 为 window，在严格模式下为 undefined。\n\n为了解决这个问题，我们可以在函数被返回时就绑好正确的this。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭头函数能保存函数创建时的 this值，而不是调用时的值：\n\n```typescript\nlet deck = {\n    suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n    cards: Array(52),\n    createCardPicker: function() {\n        // NOTE: the line below is now an arrow function, allowing us to capture 'this' right here\n        return () => {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n```\n\n更好事情是，TypeScript会警告你犯了一个错误，如果你给编译器设置了--noImplicitThis标记。 它会指出 this.suits[pickedSuit]里的this的类型为any。\n\n```typescript\ninterface Card {\n    suit: string;\n    card: number;\n}\ninterface Deck {\n    suits: string[];\n    cards: number[];\n    createCardPicker(this: Deck): () => Card;\n}\nlet deck: Deck = {\n    suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n    cards: Array(52),\n    createCardPicker: function(this: Deck) {\n        return () => {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n```\n\n现在TypeScript知道createCardPicker期望在某个Deck对象上调用。 也就是说 this是Deck类型的，而非any，因此--noImplicitThis不会报错了。\n\n## 7. 泛型\n\n用带有调用签名的对象字面量来定义泛型函数：\n\n```typescript\ninterface GenericIdentityFn {\n    <T>(arg: T): T;\n}\n\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\nlet myIdentity: GenericIdentityFn = identity;\n```\n\n泛型接口：\n\n```typescript\ninterface GenericIdentityFn {\n    <T>(arg: T): T;\n}\n\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\nlet myIdentity: GenericIdentityFn = identity;\n```\n\n下面的写法与上面的等效\n\n```typescript\ninterface GenericIdentityFn<T> {\n    (arg: T): T;\n}\n\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\nlet myIdentity: GenericIdentityFn<number> = identity;\n```\n\n### 7.1 泛型类\n\n```typescript\nclass GenericNumber<T> {\n    zeroValue: T;\n    add: (x: T, y: T) => T;\n}\n\nlet myGenericNumber = new GenericNumber<number>();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function(x, y) { return x + y; };\n```\n\n### 7.2 泛型约束\n\n```typescript\ninterface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n    console.log(arg.length);  // Now we know it has a .length property, so no more error\n    return arg;\n}\n```\n\n### 7.3 在泛型约束中使用类型参数\n\n```typescript\nfunction getProperty(obj: T, key: K) {\n    return obj[key];\n}\n\nlet x = { a: 1, b: 2, c: 3, d: 4 };\n\ngetProperty(x, \"a\"); // okay\ngetProperty(x, \"m\"); // error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'.\n```\n\n### 7.4 在泛型里使用类类型\n\n在TypeScript使用泛型创建工厂函数时，需要引用构造函数的类类型。\n\n```typescript\nfunction create<T>(c: {new(): T; }): T {\n    return new c();\n}\n```\n\n原型属性推断并约束构造函数与类实例的关系:\n\n```typescript\nclass BeeKeeper {\n    hasMask: boolean;\n}\n\nclass ZooKeeper {\n    nametag: string;\n}\n\nclass Animal {\n    numLegs: number;\n}\n\nclass Bee extends Animal {\n    keeper: BeeKeeper;\n}\n\nclass Lion extends Animal {\n    keeper: ZooKeeper;\n}\n\nfunction createInstance<A extends Animal>(c: new () => A): A {\n    return new c();\n}\n\ncreateInstance(Lion).keeper.nametag;  // typechecks!\ncreateInstance(Bee).keeper.hasMask;   // typechecks!\n```\n\n## 8. 枚举\n\n异构枚举\n\n```typescript\nenum BooleanLikeHeterogeneousEnum {\n    No = 0,\n    Yes = \"YES\",\n}\n```\n\n联合枚举与枚举成员的类型\n\n运行时的枚举\n\n```typescript\nenum E {\n    X, Y, Z\n}\n```\n\n```typescript\nfunction f(obj: { X: number }) {\n    return obj.X;\n}\n\n// Works, since 'E' has a property named 'X' which is a number.\nf(E);\n```\n\n反向映射\n\n```typescript\nenum Enum {\n    A\n}\nlet a = Enum.A;\nlet nameOfA = Enum[a]; // \"A\"\n```\n\n外部枚举\n\n```typescript\ndeclare enum Enum {\n    A = 1,\n    B,\n    C = 2\n}\n```\n\n外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。 对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。\n\n## 9. 高级类型[^高级类型]\n\n### 9.1 交叉类型\n\n`Person & Serializable & Loggable`\n\n```typescript\nfunction extend<T, U>(first: T, second: U): T & U {\n    let result = <T & U>{};\n    for (let id in first) {\n        (<any>result)[id] = (<any>first)[id];\n    }\n    for (let id in second) {\n        if (!result.hasOwnProperty(id)) {\n            (<any>result)[id] = (<any>second)[id];\n        }\n    }\n    return result;\n}\n\nclass Person {\n    constructor(public name: string) { }\n}\ninterface Loggable {\n    log(): void;\n}\nclass ConsoleLogger implements Loggable {\n    log() {\n        // ...\n    }\n}\nvar jim = extend(new Person(\"Jim\"), new ConsoleLogger());\nvar n = jim.name;\njim.log();\n```\n\n### 9.2 联合类型（Union Types）\n\n形式： `number | string | boolean`\n\n```typescript\ninterface Bird {\n    fly();\n    layEggs();\n}\n\ninterface Fish {\n    swim();\n    layEggs();\n}\n\nfunction getSmallPet(): Fish | Bird {\n    // ...\n}\n\nlet pet = getSmallPet();\npet.layEggs(); // okay\npet.swim();    // errors\n```\n\n### 9.3 类型保护与区分类型（Type Guards and Differentiating Types）\n\n用户自定义类型保护：\n\n```typescript\nfunction isFish(pet: Fish | Bird): pet is Fish {\n    return (<Fish>pet).swim !== undefined;\n}\n```\n\ntypeof类型保护：\n\n```typescript\nfunction isNumber(x: any): x is number {\n    return typeof x === \"number\";\n}\n\nfunction isString(x: any): x is string {\n    return typeof x === \"string\";\n}\n\nfunction padLeft(value: string, padding: string | number) {\n    if (isNumber(padding)) {\n        return Array(padding + 1).join(\" \") + value;\n    }\n    if (isString(padding)) {\n        return padding + value;\n    }\n    throw new Error(`Expected string or number, got '${padding}'.`);\n}\n```\n\ninstanceof类型保护：\n\n```typescript\ninterface Padder {\n    getPaddingString(): string\n}\n\nclass SpaceRepeatingPadder implements Padder {\n    constructor(private numSpaces: number) { }\n    getPaddingString() {\n        return Array(this.numSpaces + 1).join(\" \");\n    }\n}\n\nclass StringPadder implements Padder {\n    constructor(private value: string) { }\n    getPaddingString() {\n        return this.value;\n    }\n}\n\nfunction getRandomPadder() {\n    return Math.random() < 0.5 ?\n        new SpaceRepeatingPadder(4) :\n        new StringPadder(\"  \");\n}\n\n// 类型为SpaceRepeatingPadder | StringPadder\nlet padder: Padder = getRandomPadder();\n\nif (padder instanceof SpaceRepeatingPadder) {\n    padder; // 类型细化为'SpaceRepeatingPadder'\n}\nif (padder instanceof StringPadder) {\n    padder; // 类型细化为'StringPadder'\n}\n```\n\n### 9.4 可辨识联合（Discriminated Unions）\n\n1. 具有普通的单例类型属性— 可辨识的特征。\n2. 一个类型别名包含了那些类型的联合— 联合。\n3. 此属性上的类型保护。\n\n```typescript\ninterface Square {\n    kind: \"square\"; // 可辨识的特征或 标签\n    size: number;\n}\ninterface Rectangle {\n    kind: \"rectangle\"; // 可辨识的特征或 标签\n    width: number;\n    height: number;\n}\ninterface Circle {\n    kind: \"circle\"; // 可辨识的特征或 标签\n    radius: number;\n}\n\ntype Shape = Square | Rectangle | Circle; // 联合\n\nfunction area(s: Shape) {\n    switch (s.kind) {\n        case \"square\": return s.size * s.size;\n        case \"rectangle\": return s.height * s.width;\n        case \"circle\": return Math.PI * s.radius ** 2;\n    }\n}\n```\n\n### 9.5 多态的 this类型\n\n```typescript\nclass BasicCalculator {\n    public constructor(protected value: number = 0) { }\n    public currentValue(): number {\n        return this.value;\n    }\n    public add(operand: number): this {\n        this.value += operand;\n        return this;\n    }\n    public multiply(operand: number): this {\n        this.value *= operand;\n        return this;\n    }\n    // ... other operations go here ...\n}\n\nlet v = new BasicCalculator(2)\n            .multiply(5)\n            .add(1)\n            .currentValue();\n\n\n```\n\n由于这个类使用了 this类型，你可以继承它，新的类可以直接使用之前的方法，不需要做任何的改变。\n\n```typescript\nclass ScientificCalculator extends BasicCalculator {\n    public constructor(value = 0) {\n        super(value);\n    }\n    public sin() {\n        this.value = Math.sin(this.value);\n        return this;\n    }\n    // ... other operations go here ...\n}\n\nlet v = new ScientificCalculator(2)\n        .multiply(5)\n        .sin()\n        .add(1)\n        .currentValue();\n```\n\n如果没有 this类型， ScientificCalculator就不能够在继承 BasicCalculator的同时还保持接口的连贯性。 multiply将会返回 BasicCalculator，它并没有 sin方法。 然而，使用 this类型， multiply会返回 this，在这里就是 ScientificCalculator。\n\n### 9.6 索引类型（Index types）\n\n```typescript\nfunction pluck(o, names) {\n    return names.map(n => o[n]);\n}\n```\n\n下面是如何在TypeScript里使用此函数，通过 `索引类型查询`和 `索引访问`操作符：\n\n```typescript\nfunction pluck<T, K extends keyof T>(o: T, names: K[]): T[K][] {\n  return names.map(n => o[n]);\n}\n\ninterface Person {\n    name: string;\n    age: number;\n}\nlet person: Person = {\n    name: 'Jarid',\n    age: 35\n};\nlet strings: string[] = pluck(person, ['name']); // ok, string[]\n```\n\n编译器会检查 name是否真的是 Person的一个属性。 本例还引入了几个新的类型操作符。 首先是 keyof T， 索引类型查询操作符。 对于任何类型 T， keyof T的结果为 T上已知的公共属性名的联合。\n\n```typescript\nlet personProps: keyof Person; // 'name' | 'age'\n```\n\n第二个操作符是 `T[K]`， 索引访问操作符。 在这里，类型语法反映了表达式语法。 这意味着 `person['name']`具有类型 `Person['name']` — 在我们的例子里则为 `string`类型。 然而，就像索引类型查询一样，你可以在普通的上下文里使用 `T[K]`，这正是它的强大所在。 你只要确保类型变量 K extends keyof T就可以了。\n\n```typescript\nfunction getProperty<T, K extends keyof T>(o: T, name: K): T[K] {\n    return o[name]; // o[name] is of type T[K]\n}\n```\n\n#### 9.6.1 索引类型和字符串索引签名\n\n`keyof` 和 `T[K]`与字符串索引签名进行交互。 如果你有一个带有字符串索引签名的类型，那么 `keyof T`会是 `string`。 并且 `T[string]`为索引签名的类型：\n\n```typescript\ninterface Map<T> {\n    [key: string]: T;\n}\nlet keys: keyof Map<number>; // string\nlet value: Map<number>['foo']; // number\n```\n\n### 9.7 映射类型\n\n```typescript\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n}\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n}\n```\n\n像下面这样使用：\n\n```typescript\ntype PersonPartial = Partial<Person>;\ntype ReadonlyPerson = Readonly<Person>;\n```\n\n基于一些已存在的类型，且按照一定的方式转换字段。 这就是 keyof和索引访问类型要做的事情：\n\n```typescript\ntype Nullable<T> = { [P in keyof T]: T[P] | null }\ntype Partial<T> = { [P in keyof T]?: T[P] }\n```\n\n在这些例子里，属性列表是 keyof T且结果类型是 T[P]的变体。 这是使用通用映射类型的一个好模版。 因为这类转换是 `同态的`，映射只作用于 `T`的属性而没有其它的。 编译器知道在添加任何新属性之前可以拷贝所有存在的属性修饰符。 例如，假设 `Person.name`是只读的，那么 `Partial<Person>.name`也将是只读的且为可选的。\n\n下面是另一个例子， `T[P]`被包装在 `Proxy<T>`类里：\n\n```typescript\ntype Proxy<T> = {\n    get(): T;\n    set(value: T): void;\n}\ntype Proxify<T> = {\n    [P in keyof T]: Proxy<T[P]>;\n}\nfunction proxify<T>(o: T): Proxify<T> {\n   // ... wrap proxies ...\n}\nlet proxyProps = proxify(props);\n```\n\n注意 `Readonly<T>`和 `Partial<T>`用处不小，因此它们与 `Pick`和 `Record`一同被包含进了TypeScript的标准库里：\n\n```typescript\ntype Pick<T, K extends keyof T> = {\n    [P in K]: T[P];\n}\ntype Record<K extends string, T> = {\n    [P in K]: T;\n}\n```\n\n#### 9.7.1 由映射类型进行推断\n\n现在你了解了如何包装一个类型的属性，那么接下来就是如何拆包。 其实这也非常容易：\n\n```typescript\nfunction unproxify<T>(t: Proxify<T>): T {\n    let result = {} as T;\n    for (const k in t) {\n        result[k] = t[k].get();\n    }\n    return result;\n}\n\nlet originalProps = unproxify(proxyProps);\n```\n\n**注意:** 这个拆包推断只适用于同态的映射类型。 如果映射类型不是同态的，那么需要给拆包函数一个明确的类型参数。\n\n#### 9.7.2 预定义的有条件类型\n\n`TypeScript 2.8`在`lib.d.ts`里增加了一些预定义的有条件类型：\n\n* `Exclude<T, U>` -- 从T中剔除可以赋值给U的类型。\n* `Extract<T, U>` -- 提取T中可以赋值给U的类型。\n* `NonNullable<T>` -- 从T中剔除null和undefined。\n* `ReturnType<T>` -- 获取函数返回值类型。\n* `InstanceType<T>` -- 获取构造函数类型的实例类型。\n\n```typescript\ntype T00 = Exclude<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"b\" | \"d\"\ntype T01 = Extract<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"a\" | \"c\"\n\ntype T02 = Exclude<string | number | (() => void), Function>;  // string | number\ntype T03 = Extract<string | number | (() => void), Function>;  // () => void\n\ntype T04 = NonNullable<string | number | undefined>;  // string | number\ntype T05 = NonNullable<(() => string) | string[] | null | undefined>;  // (() => string) | string[]\n\nfunction f1(s: string) {\n    return { a: 1, b: s };\n}\n\nclass C {\n    x = 0;\n    y = 0;\n}\n\ntype T10 = ReturnType<() => string>;  // string\ntype T11 = ReturnType<(s: string) => void>;  // void\ntype T12 = ReturnType<(<T>() => T)>;  // {}\ntype T13 = ReturnType<(<T extends U, U extends number[]>() => T)>;  // number[]\ntype T14 = ReturnType<typeof f1>;  // { a: number, b: string }\ntype T15 = ReturnType<any>;  // any\ntype T16 = ReturnType<never>;  // any\ntype T17 = ReturnType<string>;  // Error\ntype T18 = ReturnType<Function>;  // Error\n\ntype T20 = InstanceType<typeof C>;  // C\ntype T21 = InstanceType<any>;  // any\ntype T22 = InstanceType<never>;  // any\ntype T23 = InstanceType<string>;  // Error\ntype T24 = InstanceType<Function>;  // Error\n```\n\n**注意：** `Exclude`类型是建议的Diff类型的一种实现。我们使用`Exclude`这个名字是为了避免破坏已经定义了`Diff`的代码，并且我们感觉这个名字能更好地表达类型的语义。我们没有增加`Omit<T, K>`类型，因为它可以很容易的用`Pick<T, Exclude<keyof T, K>>`来表示。\n\n[^高级类型]: [TypeScript 高级类型清单](https://chinese.freecodecamp.org/news/advanced-typescript-types-cheatsheet/)\n","source":"_posts/Web/JavaScript/TypeScript/GuideLine.md","raw":"---\ntitle: GuideLine\nabbrlink: 1351\ndate: 2021-08-04 16:37:45\ntags:\n---\n\n## 1. TypeScript 指南\n\nJavaScript 的面向对象式编程语言\n\n## 2. 基础类型\n\n基础类型：string，boolean，number\n\n数组，元组，枚举\n\nObject，Any\n\nvoid， Null， Undefined\n\nNever\n\n## 3. 变量声明\n\n作用域规则\n\nvar，let，const\n\nreadonly\n\n### 3.1 解构\n\n数组解构，对象解构\n\n属性重命名\n\n默认值\n\n函数声明中的结构：可选值，默认值，必须参数\n\n展开(...):\n\n1. 后面的覆盖前面的\n\n2. 展开一个对象实例，会丢失其方法\n\n## 4. 接口\n\n可选属性：？\n\n只读属性：readonly\n\n### 4.1 额外的属性检查\n\n对象字面量会被特殊对待而且会经过 `额外属性检查`，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。\n\n索引签名/可索引的类型:\n\n```typescript\ninterface SquareConfig {\n    color?: string;\n    width?: number;\n    [propName: string]: any;\n}\n```\n\n接口定义函数：\n\n```typescript\ninterface SearchFunc {\n  (source: string, subString: string): boolean;\n}\n```\n\n### 4.2 类类型\n\n接口描述了类的公共部分，而不是公共和私有两部分。\n\n当一个类实现了一个接口时，只对其实例部分进行类型检查。constructor存在于类的静态部分，所以不在检查的范围内。\n\n```typescript\ninterface ClockConstructor {\n    new (hour: number, minute: number): ClockInterface;\n}\ninterface ClockInterface {\n    tick();\n}\n\nfunction createClock(ctor: ClockConstructor, hour: number, minute: number): ClockInterface {\n    return new ctor(hour, minute);\n}\n\nclass DigitalClock implements ClockInterface {\n    constructor(h: number, m: number) { }\n    tick() {\n        console.log(\"beep beep\");\n    }\n}\nclass AnalogClock implements ClockInterface {\n    constructor(h: number, m: number) { }\n    tick() {\n        console.log(\"tick tock\");\n    }\n}\n\nlet digital = createClock(DigitalClock, 12, 17);\nlet analog = createClock(AnalogClock, 7, 32);\n```\n\n### 4.3 接口继承\n\n和类一样，接口也可以相互继承。\n\n混合类型:\n\n```typescript\ninterface Counter {\n    (start: number): string;\n    interval: number;\n    reset(): void;\n}\n\nfunction getCounter(): Counter {\n    let counter = <Counter>function (start: number) { };\n    counter.interval = 123;\n    counter.reset = function () { };\n    return counter;\n}\n\nlet c = getCounter();\nc(10);\nc.reset();\nc.interval = 5.0;\n```\n\n接口继承类:\n\n当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的private和protected成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。\n\n## 5. 类\n\n继承\n\n公共，私有与受保护的修饰符\n\n### 5.1 参数属性\n\n```typescript\nclass Octopus {\n    readonly numberOfLegs: number = 8;\n    constructor(readonly name: string) {\n    }\n}\n```\n\n### 5.2 抽象类\n\n```typescript\nabstract class Department {\n\n    constructor(public name: string) {\n    }\n\n    printName(): void {\n        console.log('Department name: ' + this.name);\n    }\n\n    abstract printMeeting(): void; // 必须在派生类中实现\n}\n\nclass AccountingDepartment extends Department {\n\n    constructor() {\n        super('Accounting and Auditing'); // 在派生类的构造函数中必须调用 super()\n    }\n\n    printMeeting(): void {\n        console.log('The Accounting Department meets each Monday at 10am.');\n    }\n\n    generateReports(): void {\n        console.log('Generating accounting reports...');\n    }\n}\n\nlet department: Department; // 允许创建一个对抽象类型的引用\ndepartment = new Department(); // 错误: 不能创建一个抽象类的实例\ndepartment = new AccountingDepartment(); // 允许对一个抽象子类进行实例化和赋值\ndepartment.printName();\ndepartment.printMeeting();\ndepartment.generateReports(); // 错误: 方法在声明的抽象类中不存在\n```\n\n### 5.3 构造函数\n\n```typescript\nclass Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nlet greeter: Greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n转换为 JavaScript 后\n\n```typescript\nlet Greeter = (function () {\n    function Greeter(message) {\n        this.greeting = message;\n    }\n    Greeter.prototype.greet = function () {\n        return \"Hello, \" + this.greeting;\n    };\n    return Greeter;\n})();\n\nlet greeter;\ngreeter = new Greeter(\"world\");\nconsole.log(greeter.greet());\n```\n\n改写一下这个例子，看看它们之间的区别:\n\n```typescript\nclass Greeter {\n    static standardGreeting = \"Hello, there\";\n    greeting: string;\n    greet() {\n        if (this.greeting) {\n            return \"Hello, \" + this.greeting;\n        }\n        else {\n            return Greeter.standardGreeting;\n        }\n    }\n}\n\nlet greeter1: Greeter;\ngreeter1 = new Greeter();\nconsole.log(greeter1.greet());\n\nlet greeterMaker: typeof Greeter = Greeter;\ngreeterMaker.standardGreeting = \"Hey there!\";\n\nlet greeter2: Greeter = new greeterMaker();\nconsole.log(greeter2.greet());\n```\n\n创建了一个叫做 greeterMaker的变量。 这个变量保存了这个类或者说保存了类构造函数。 然后我们使用 typeof Greeter，意思是取Greeter类的类型，而不是实例的类型。 或者更确切的说，\"告诉我 Greeter标识符的类型\"，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在 greeterMaker上使用 new，创建 Greeter的实例。\n\n## 6 函数\n\n### 6.1 函数类型\n\n```typescript\nlet myAdd: (x: number, y: number) => number =\n    function(x: number, y: number): number { return x + y; };\n```\n\n可选参数和默认参数\n\n剩余参数\n\n### 6.2 `this`\n\n```typescript\nlet deck = {\n    suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n    cards: Array(52),\n    createCardPicker: function() {\n        return function() {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n```\n\nthis 为 window，在严格模式下为 undefined。\n\n为了解决这个问题，我们可以在函数被返回时就绑好正确的this。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭头函数能保存函数创建时的 this值，而不是调用时的值：\n\n```typescript\nlet deck = {\n    suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n    cards: Array(52),\n    createCardPicker: function() {\n        // NOTE: the line below is now an arrow function, allowing us to capture 'this' right here\n        return () => {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n```\n\n更好事情是，TypeScript会警告你犯了一个错误，如果你给编译器设置了--noImplicitThis标记。 它会指出 this.suits[pickedSuit]里的this的类型为any。\n\n```typescript\ninterface Card {\n    suit: string;\n    card: number;\n}\ninterface Deck {\n    suits: string[];\n    cards: number[];\n    createCardPicker(this: Deck): () => Card;\n}\nlet deck: Deck = {\n    suits: [\"hearts\", \"spades\", \"clubs\", \"diamonds\"],\n    cards: Array(52),\n    createCardPicker: function(this: Deck) {\n        return () => {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert(\"card: \" + pickedCard.card + \" of \" + pickedCard.suit);\n```\n\n现在TypeScript知道createCardPicker期望在某个Deck对象上调用。 也就是说 this是Deck类型的，而非any，因此--noImplicitThis不会报错了。\n\n## 7. 泛型\n\n用带有调用签名的对象字面量来定义泛型函数：\n\n```typescript\ninterface GenericIdentityFn {\n    <T>(arg: T): T;\n}\n\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\nlet myIdentity: GenericIdentityFn = identity;\n```\n\n泛型接口：\n\n```typescript\ninterface GenericIdentityFn {\n    <T>(arg: T): T;\n}\n\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\nlet myIdentity: GenericIdentityFn = identity;\n```\n\n下面的写法与上面的等效\n\n```typescript\ninterface GenericIdentityFn<T> {\n    (arg: T): T;\n}\n\nfunction identity<T>(arg: T): T {\n    return arg;\n}\n\nlet myIdentity: GenericIdentityFn<number> = identity;\n```\n\n### 7.1 泛型类\n\n```typescript\nclass GenericNumber<T> {\n    zeroValue: T;\n    add: (x: T, y: T) => T;\n}\n\nlet myGenericNumber = new GenericNumber<number>();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function(x, y) { return x + y; };\n```\n\n### 7.2 泛型约束\n\n```typescript\ninterface Lengthwise {\n    length: number;\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n    console.log(arg.length);  // Now we know it has a .length property, so no more error\n    return arg;\n}\n```\n\n### 7.3 在泛型约束中使用类型参数\n\n```typescript\nfunction getProperty(obj: T, key: K) {\n    return obj[key];\n}\n\nlet x = { a: 1, b: 2, c: 3, d: 4 };\n\ngetProperty(x, \"a\"); // okay\ngetProperty(x, \"m\"); // error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'.\n```\n\n### 7.4 在泛型里使用类类型\n\n在TypeScript使用泛型创建工厂函数时，需要引用构造函数的类类型。\n\n```typescript\nfunction create<T>(c: {new(): T; }): T {\n    return new c();\n}\n```\n\n原型属性推断并约束构造函数与类实例的关系:\n\n```typescript\nclass BeeKeeper {\n    hasMask: boolean;\n}\n\nclass ZooKeeper {\n    nametag: string;\n}\n\nclass Animal {\n    numLegs: number;\n}\n\nclass Bee extends Animal {\n    keeper: BeeKeeper;\n}\n\nclass Lion extends Animal {\n    keeper: ZooKeeper;\n}\n\nfunction createInstance<A extends Animal>(c: new () => A): A {\n    return new c();\n}\n\ncreateInstance(Lion).keeper.nametag;  // typechecks!\ncreateInstance(Bee).keeper.hasMask;   // typechecks!\n```\n\n## 8. 枚举\n\n异构枚举\n\n```typescript\nenum BooleanLikeHeterogeneousEnum {\n    No = 0,\n    Yes = \"YES\",\n}\n```\n\n联合枚举与枚举成员的类型\n\n运行时的枚举\n\n```typescript\nenum E {\n    X, Y, Z\n}\n```\n\n```typescript\nfunction f(obj: { X: number }) {\n    return obj.X;\n}\n\n// Works, since 'E' has a property named 'X' which is a number.\nf(E);\n```\n\n反向映射\n\n```typescript\nenum Enum {\n    A\n}\nlet a = Enum.A;\nlet nameOfA = Enum[a]; // \"A\"\n```\n\n外部枚举\n\n```typescript\ndeclare enum Enum {\n    A = 1,\n    B,\n    C = 2\n}\n```\n\n外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。 对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。\n\n## 9. 高级类型[^高级类型]\n\n### 9.1 交叉类型\n\n`Person & Serializable & Loggable`\n\n```typescript\nfunction extend<T, U>(first: T, second: U): T & U {\n    let result = <T & U>{};\n    for (let id in first) {\n        (<any>result)[id] = (<any>first)[id];\n    }\n    for (let id in second) {\n        if (!result.hasOwnProperty(id)) {\n            (<any>result)[id] = (<any>second)[id];\n        }\n    }\n    return result;\n}\n\nclass Person {\n    constructor(public name: string) { }\n}\ninterface Loggable {\n    log(): void;\n}\nclass ConsoleLogger implements Loggable {\n    log() {\n        // ...\n    }\n}\nvar jim = extend(new Person(\"Jim\"), new ConsoleLogger());\nvar n = jim.name;\njim.log();\n```\n\n### 9.2 联合类型（Union Types）\n\n形式： `number | string | boolean`\n\n```typescript\ninterface Bird {\n    fly();\n    layEggs();\n}\n\ninterface Fish {\n    swim();\n    layEggs();\n}\n\nfunction getSmallPet(): Fish | Bird {\n    // ...\n}\n\nlet pet = getSmallPet();\npet.layEggs(); // okay\npet.swim();    // errors\n```\n\n### 9.3 类型保护与区分类型（Type Guards and Differentiating Types）\n\n用户自定义类型保护：\n\n```typescript\nfunction isFish(pet: Fish | Bird): pet is Fish {\n    return (<Fish>pet).swim !== undefined;\n}\n```\n\ntypeof类型保护：\n\n```typescript\nfunction isNumber(x: any): x is number {\n    return typeof x === \"number\";\n}\n\nfunction isString(x: any): x is string {\n    return typeof x === \"string\";\n}\n\nfunction padLeft(value: string, padding: string | number) {\n    if (isNumber(padding)) {\n        return Array(padding + 1).join(\" \") + value;\n    }\n    if (isString(padding)) {\n        return padding + value;\n    }\n    throw new Error(`Expected string or number, got '${padding}'.`);\n}\n```\n\ninstanceof类型保护：\n\n```typescript\ninterface Padder {\n    getPaddingString(): string\n}\n\nclass SpaceRepeatingPadder implements Padder {\n    constructor(private numSpaces: number) { }\n    getPaddingString() {\n        return Array(this.numSpaces + 1).join(\" \");\n    }\n}\n\nclass StringPadder implements Padder {\n    constructor(private value: string) { }\n    getPaddingString() {\n        return this.value;\n    }\n}\n\nfunction getRandomPadder() {\n    return Math.random() < 0.5 ?\n        new SpaceRepeatingPadder(4) :\n        new StringPadder(\"  \");\n}\n\n// 类型为SpaceRepeatingPadder | StringPadder\nlet padder: Padder = getRandomPadder();\n\nif (padder instanceof SpaceRepeatingPadder) {\n    padder; // 类型细化为'SpaceRepeatingPadder'\n}\nif (padder instanceof StringPadder) {\n    padder; // 类型细化为'StringPadder'\n}\n```\n\n### 9.4 可辨识联合（Discriminated Unions）\n\n1. 具有普通的单例类型属性— 可辨识的特征。\n2. 一个类型别名包含了那些类型的联合— 联合。\n3. 此属性上的类型保护。\n\n```typescript\ninterface Square {\n    kind: \"square\"; // 可辨识的特征或 标签\n    size: number;\n}\ninterface Rectangle {\n    kind: \"rectangle\"; // 可辨识的特征或 标签\n    width: number;\n    height: number;\n}\ninterface Circle {\n    kind: \"circle\"; // 可辨识的特征或 标签\n    radius: number;\n}\n\ntype Shape = Square | Rectangle | Circle; // 联合\n\nfunction area(s: Shape) {\n    switch (s.kind) {\n        case \"square\": return s.size * s.size;\n        case \"rectangle\": return s.height * s.width;\n        case \"circle\": return Math.PI * s.radius ** 2;\n    }\n}\n```\n\n### 9.5 多态的 this类型\n\n```typescript\nclass BasicCalculator {\n    public constructor(protected value: number = 0) { }\n    public currentValue(): number {\n        return this.value;\n    }\n    public add(operand: number): this {\n        this.value += operand;\n        return this;\n    }\n    public multiply(operand: number): this {\n        this.value *= operand;\n        return this;\n    }\n    // ... other operations go here ...\n}\n\nlet v = new BasicCalculator(2)\n            .multiply(5)\n            .add(1)\n            .currentValue();\n\n\n```\n\n由于这个类使用了 this类型，你可以继承它，新的类可以直接使用之前的方法，不需要做任何的改变。\n\n```typescript\nclass ScientificCalculator extends BasicCalculator {\n    public constructor(value = 0) {\n        super(value);\n    }\n    public sin() {\n        this.value = Math.sin(this.value);\n        return this;\n    }\n    // ... other operations go here ...\n}\n\nlet v = new ScientificCalculator(2)\n        .multiply(5)\n        .sin()\n        .add(1)\n        .currentValue();\n```\n\n如果没有 this类型， ScientificCalculator就不能够在继承 BasicCalculator的同时还保持接口的连贯性。 multiply将会返回 BasicCalculator，它并没有 sin方法。 然而，使用 this类型， multiply会返回 this，在这里就是 ScientificCalculator。\n\n### 9.6 索引类型（Index types）\n\n```typescript\nfunction pluck(o, names) {\n    return names.map(n => o[n]);\n}\n```\n\n下面是如何在TypeScript里使用此函数，通过 `索引类型查询`和 `索引访问`操作符：\n\n```typescript\nfunction pluck<T, K extends keyof T>(o: T, names: K[]): T[K][] {\n  return names.map(n => o[n]);\n}\n\ninterface Person {\n    name: string;\n    age: number;\n}\nlet person: Person = {\n    name: 'Jarid',\n    age: 35\n};\nlet strings: string[] = pluck(person, ['name']); // ok, string[]\n```\n\n编译器会检查 name是否真的是 Person的一个属性。 本例还引入了几个新的类型操作符。 首先是 keyof T， 索引类型查询操作符。 对于任何类型 T， keyof T的结果为 T上已知的公共属性名的联合。\n\n```typescript\nlet personProps: keyof Person; // 'name' | 'age'\n```\n\n第二个操作符是 `T[K]`， 索引访问操作符。 在这里，类型语法反映了表达式语法。 这意味着 `person['name']`具有类型 `Person['name']` — 在我们的例子里则为 `string`类型。 然而，就像索引类型查询一样，你可以在普通的上下文里使用 `T[K]`，这正是它的强大所在。 你只要确保类型变量 K extends keyof T就可以了。\n\n```typescript\nfunction getProperty<T, K extends keyof T>(o: T, name: K): T[K] {\n    return o[name]; // o[name] is of type T[K]\n}\n```\n\n#### 9.6.1 索引类型和字符串索引签名\n\n`keyof` 和 `T[K]`与字符串索引签名进行交互。 如果你有一个带有字符串索引签名的类型，那么 `keyof T`会是 `string`。 并且 `T[string]`为索引签名的类型：\n\n```typescript\ninterface Map<T> {\n    [key: string]: T;\n}\nlet keys: keyof Map<number>; // string\nlet value: Map<number>['foo']; // number\n```\n\n### 9.7 映射类型\n\n```typescript\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n}\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n}\n```\n\n像下面这样使用：\n\n```typescript\ntype PersonPartial = Partial<Person>;\ntype ReadonlyPerson = Readonly<Person>;\n```\n\n基于一些已存在的类型，且按照一定的方式转换字段。 这就是 keyof和索引访问类型要做的事情：\n\n```typescript\ntype Nullable<T> = { [P in keyof T]: T[P] | null }\ntype Partial<T> = { [P in keyof T]?: T[P] }\n```\n\n在这些例子里，属性列表是 keyof T且结果类型是 T[P]的变体。 这是使用通用映射类型的一个好模版。 因为这类转换是 `同态的`，映射只作用于 `T`的属性而没有其它的。 编译器知道在添加任何新属性之前可以拷贝所有存在的属性修饰符。 例如，假设 `Person.name`是只读的，那么 `Partial<Person>.name`也将是只读的且为可选的。\n\n下面是另一个例子， `T[P]`被包装在 `Proxy<T>`类里：\n\n```typescript\ntype Proxy<T> = {\n    get(): T;\n    set(value: T): void;\n}\ntype Proxify<T> = {\n    [P in keyof T]: Proxy<T[P]>;\n}\nfunction proxify<T>(o: T): Proxify<T> {\n   // ... wrap proxies ...\n}\nlet proxyProps = proxify(props);\n```\n\n注意 `Readonly<T>`和 `Partial<T>`用处不小，因此它们与 `Pick`和 `Record`一同被包含进了TypeScript的标准库里：\n\n```typescript\ntype Pick<T, K extends keyof T> = {\n    [P in K]: T[P];\n}\ntype Record<K extends string, T> = {\n    [P in K]: T;\n}\n```\n\n#### 9.7.1 由映射类型进行推断\n\n现在你了解了如何包装一个类型的属性，那么接下来就是如何拆包。 其实这也非常容易：\n\n```typescript\nfunction unproxify<T>(t: Proxify<T>): T {\n    let result = {} as T;\n    for (const k in t) {\n        result[k] = t[k].get();\n    }\n    return result;\n}\n\nlet originalProps = unproxify(proxyProps);\n```\n\n**注意:** 这个拆包推断只适用于同态的映射类型。 如果映射类型不是同态的，那么需要给拆包函数一个明确的类型参数。\n\n#### 9.7.2 预定义的有条件类型\n\n`TypeScript 2.8`在`lib.d.ts`里增加了一些预定义的有条件类型：\n\n* `Exclude<T, U>` -- 从T中剔除可以赋值给U的类型。\n* `Extract<T, U>` -- 提取T中可以赋值给U的类型。\n* `NonNullable<T>` -- 从T中剔除null和undefined。\n* `ReturnType<T>` -- 获取函数返回值类型。\n* `InstanceType<T>` -- 获取构造函数类型的实例类型。\n\n```typescript\ntype T00 = Exclude<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"b\" | \"d\"\ntype T01 = Extract<\"a\" | \"b\" | \"c\" | \"d\", \"a\" | \"c\" | \"f\">;  // \"a\" | \"c\"\n\ntype T02 = Exclude<string | number | (() => void), Function>;  // string | number\ntype T03 = Extract<string | number | (() => void), Function>;  // () => void\n\ntype T04 = NonNullable<string | number | undefined>;  // string | number\ntype T05 = NonNullable<(() => string) | string[] | null | undefined>;  // (() => string) | string[]\n\nfunction f1(s: string) {\n    return { a: 1, b: s };\n}\n\nclass C {\n    x = 0;\n    y = 0;\n}\n\ntype T10 = ReturnType<() => string>;  // string\ntype T11 = ReturnType<(s: string) => void>;  // void\ntype T12 = ReturnType<(<T>() => T)>;  // {}\ntype T13 = ReturnType<(<T extends U, U extends number[]>() => T)>;  // number[]\ntype T14 = ReturnType<typeof f1>;  // { a: number, b: string }\ntype T15 = ReturnType<any>;  // any\ntype T16 = ReturnType<never>;  // any\ntype T17 = ReturnType<string>;  // Error\ntype T18 = ReturnType<Function>;  // Error\n\ntype T20 = InstanceType<typeof C>;  // C\ntype T21 = InstanceType<any>;  // any\ntype T22 = InstanceType<never>;  // any\ntype T23 = InstanceType<string>;  // Error\ntype T24 = InstanceType<Function>;  // Error\n```\n\n**注意：** `Exclude`类型是建议的Diff类型的一种实现。我们使用`Exclude`这个名字是为了避免破坏已经定义了`Diff`的代码，并且我们感觉这个名字能更好地表达类型的语义。我们没有增加`Omit<T, K>`类型，因为它可以很容易的用`Pick<T, Exclude<keyof T, K>>`来表示。\n\n[^高级类型]: [TypeScript 高级类型清单](https://chinese.freecodecamp.org/news/advanced-typescript-types-cheatsheet/)\n","slug":"Web/JavaScript/TypeScript/GuideLine","published":1,"updated":"2021-09-22T06:56:40.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3b003diu9k360set0q","content":"<h2 id=\"1-TypeScript-指南\"><a href=\"#1-TypeScript-指南\" class=\"headerlink\" title=\"1. TypeScript 指南\"></a>1. TypeScript 指南</h2><p>JavaScript 的面向对象式编程语言</p>\n<h2 id=\"2-基础类型\"><a href=\"#2-基础类型\" class=\"headerlink\" title=\"2. 基础类型\"></a>2. 基础类型</h2><p>基础类型：string，boolean，number</p>\n<p>数组，元组，枚举</p>\n<p>Object，Any</p>\n<p>void， Null， Undefined</p>\n<p>Never</p>\n<h2 id=\"3-变量声明\"><a href=\"#3-变量声明\" class=\"headerlink\" title=\"3. 变量声明\"></a>3. 变量声明</h2><p>作用域规则</p>\n<p>var，let，const</p>\n<p>readonly</p>\n<h3 id=\"3-1-解构\"><a href=\"#3-1-解构\" class=\"headerlink\" title=\"3.1 解构\"></a>3.1 解构</h3><p>数组解构，对象解构</p>\n<p>属性重命名</p>\n<p>默认值</p>\n<p>函数声明中的结构：可选值，默认值，必须参数</p>\n<p>展开(…):</p>\n<ol>\n<li><p>后面的覆盖前面的</p>\n</li>\n<li><p>展开一个对象实例，会丢失其方法</p>\n</li>\n</ol>\n<h2 id=\"4-接口\"><a href=\"#4-接口\" class=\"headerlink\" title=\"4. 接口\"></a>4. 接口</h2><p>可选属性：？</p>\n<p>只读属性：readonly</p>\n<h3 id=\"4-1-额外的属性检查\"><a href=\"#4-1-额外的属性检查\" class=\"headerlink\" title=\"4.1 额外的属性检查\"></a>4.1 额外的属性检查</h3><p>对象字面量会被特殊对待而且会经过 <code>额外属性检查</code>，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。</p>\n<p>索引签名/可索引的类型:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> SquareConfig &#123;</span><br><span class=\"line\">    color?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    width?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    [propName: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口定义函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> SearchFunc &#123;</span><br><span class=\"line\">  (source: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-类类型\"><a href=\"#4-2-类类型\" class=\"headerlink\" title=\"4.2 类类型\"></a>4.2 类类型</h3><p>接口描述了类的公共部分，而不是公共和私有两部分。</p>\n<p>当一个类实现了一个接口时，只对其实例部分进行类型检查。constructor存在于类的静态部分，所以不在检查的范围内。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> ClockConstructor &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> (hour: <span class=\"built_in\">number</span>, <span class=\"attr\">minute</span>: <span class=\"built_in\">number</span>): ClockInterface;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</span><br><span class=\"line\">    tick();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createClock</span>(<span class=\"params\">ctor: ClockConstructor, hour: <span class=\"built_in\">number</span>, minute: <span class=\"built_in\">number</span></span>): <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ctor(hour, minute);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DigitalClock</span> <span class=\"title\">implements</span> <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">tick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;beep beep&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnalogClock</span> <span class=\"title\">implements</span> <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">tick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;tick tock&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> digital = createClock(DigitalClock, <span class=\"number\">12</span>, <span class=\"number\">17</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> analog = createClock(AnalogClock, <span class=\"number\">7</span>, <span class=\"number\">32</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-接口继承\"><a href=\"#4-3-接口继承\" class=\"headerlink\" title=\"4.3 接口继承\"></a>4.3 接口继承</h3><p>和类一样，接口也可以相互继承。</p>\n<p>混合类型:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Counter &#123;</span><br><span class=\"line\">    (start: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    interval: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    reset(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCounter</span>(<span class=\"params\"></span>): <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> counter = &lt;Counter&gt;<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">start: <span class=\"built_in\">number</span></span>) </span>&#123; &#125;;</span><br><span class=\"line\">    counter.interval = <span class=\"number\">123</span>;</span><br><span class=\"line\">    counter.reset = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = getCounter();</span><br><span class=\"line\">c(<span class=\"number\">10</span>);</span><br><span class=\"line\">c.reset();</span><br><span class=\"line\">c.interval = <span class=\"number\">5.0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>接口继承类:</p>\n<p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的private和protected成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。</p>\n<h2 id=\"5-类\"><a href=\"#5-类\" class=\"headerlink\" title=\"5. 类\"></a>5. 类</h2><p>继承</p>\n<p>公共，私有与受保护的修饰符</p>\n<h3 id=\"5-1-参数属性\"><a href=\"#5-1-参数属性\" class=\"headerlink\" title=\"5.1 参数属性\"></a>5.1 参数属性</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Octopus</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> numberOfLegs: <span class=\"built_in\">number</span> = <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">readonly</span> name: <span class=\"built_in\">string</span></span>)</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-抽象类\"><a href=\"#5-2-抽象类\" class=\"headerlink\" title=\"5.2 抽象类\"></a>5.2 抽象类</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span></span>)</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printName(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Department name: &#x27;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> printMeeting(): <span class=\"built_in\">void</span>; <span class=\"comment\">// 必须在派生类中实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountingDepartment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Department</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(<span class=\"string\">&#x27;Accounting and Auditing&#x27;</span>); <span class=\"comment\">// 在派生类的构造函数中必须调用 super()</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printMeeting(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;The Accounting Department meets each Monday at 10am.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    generateReports(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Generating accounting reports...&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> department: Department; <span class=\"comment\">// 允许创建一个对抽象类型的引用</span></span><br><span class=\"line\">department = <span class=\"keyword\">new</span> Department(); <span class=\"comment\">// 错误: 不能创建一个抽象类的实例</span></span><br><span class=\"line\">department = <span class=\"keyword\">new</span> AccountingDepartment(); <span class=\"comment\">// 允许对一个抽象子类进行实例化和赋值</span></span><br><span class=\"line\">department.printName();</span><br><span class=\"line\">department.printMeeting();</span><br><span class=\"line\">department.generateReports(); <span class=\"comment\">// 错误: 方法在声明的抽象类中不存在</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-构造函数\"><a href=\"#5-3-构造函数\" class=\"headerlink\" title=\"5.3 构造函数\"></a>5.3 构造函数</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">greeting</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.greeting = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">greet</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"built_in\">this</span>.greeting;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter: Greeter;</span><br><span class=\"line\">greeter = <span class=\"keyword\">new</span> Greeter(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greeter.greet());</span><br></pre></td></tr></table></figure>\n\n<p>转换为 JavaScript 后</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Greeter = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Greeter</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.greeting = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Greeter.prototype.greet = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"built_in\">this</span>.greeting;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Greeter;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter;</span><br><span class=\"line\">greeter = <span class=\"keyword\">new</span> Greeter(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greeter.greet());</span><br></pre></td></tr></table></figure>\n\n<p>改写一下这个例子，看看它们之间的区别:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> standardGreeting = <span class=\"string\">&quot;Hello, there&quot;</span>;</span><br><span class=\"line\">    greeting: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">greet</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.greeting) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"built_in\">this</span>.greeting;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Greeter.standardGreeting;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter1: Greeter;</span><br><span class=\"line\">greeter1 = <span class=\"keyword\">new</span> Greeter();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greeter1.greet());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeterMaker: <span class=\"keyword\">typeof</span> Greeter = Greeter;</span><br><span class=\"line\">greeterMaker.standardGreeting = <span class=\"string\">&quot;Hey there!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter2: Greeter = <span class=\"keyword\">new</span> greeterMaker();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greeter2.greet());</span><br></pre></td></tr></table></figure>\n\n<p>创建了一个叫做 greeterMaker的变量。 这个变量保存了这个类或者说保存了类构造函数。 然后我们使用 typeof Greeter，意思是取Greeter类的类型，而不是实例的类型。 或者更确切的说，”告诉我 Greeter标识符的类型”，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在 greeterMaker上使用 new，创建 Greeter的实例。</p>\n<h2 id=\"6-函数\"><a href=\"#6-函数\" class=\"headerlink\" title=\"6 函数\"></a>6 函数</h2><h3 id=\"6-1-函数类型\"><a href=\"#6-1-函数类型\" class=\"headerlink\" title=\"6.1 函数类型\"></a>6.1 函数类型</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myAdd: <span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span> =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可选参数和默认参数</p>\n<p>剩余参数</p>\n<h3 id=\"6-2-this\"><a href=\"#6-2-this\" class=\"headerlink\" title=\"6.2 this\"></a>6.2 <code>this</code></h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deck = &#123;</span><br><span class=\"line\">    <span class=\"attr\">suits</span>: [<span class=\"string\">&quot;hearts&quot;</span>, <span class=\"string\">&quot;spades&quot;</span>, <span class=\"string\">&quot;clubs&quot;</span>, <span class=\"string\">&quot;diamonds&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">cards</span>: <span class=\"built_in\">Array</span>(<span class=\"number\">52</span>),</span><br><span class=\"line\">    <span class=\"attr\">createCardPicker</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedCard = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">52</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedSuit = <span class=\"built_in\">Math</span>.floor(pickedCard / <span class=\"number\">13</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">suit</span>: <span class=\"built_in\">this</span>.suits[pickedSuit], <span class=\"attr\">card</span>: pickedCard % <span class=\"number\">13</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cardPicker = deck.createCardPicker();</span><br><span class=\"line\"><span class=\"keyword\">let</span> pickedCard = cardPicker();</span><br><span class=\"line\"></span><br><span class=\"line\">alert(<span class=\"string\">&quot;card: &quot;</span> + pickedCard.card + <span class=\"string\">&quot; of &quot;</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure>\n\n<p>this 为 window，在严格模式下为 undefined。</p>\n<p>为了解决这个问题，我们可以在函数被返回时就绑好正确的this。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭头函数能保存函数创建时的 this值，而不是调用时的值：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deck = &#123;</span><br><span class=\"line\">    <span class=\"attr\">suits</span>: [<span class=\"string\">&quot;hearts&quot;</span>, <span class=\"string\">&quot;spades&quot;</span>, <span class=\"string\">&quot;clubs&quot;</span>, <span class=\"string\">&quot;diamonds&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">cards</span>: <span class=\"built_in\">Array</span>(<span class=\"number\">52</span>),</span><br><span class=\"line\">    <span class=\"attr\">createCardPicker</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> the line below is now an arrow function, allowing us to capture &#x27;this&#x27; right here</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedCard = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">52</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedSuit = <span class=\"built_in\">Math</span>.floor(pickedCard / <span class=\"number\">13</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">suit</span>: <span class=\"built_in\">this</span>.suits[pickedSuit], <span class=\"attr\">card</span>: pickedCard % <span class=\"number\">13</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cardPicker = deck.createCardPicker();</span><br><span class=\"line\"><span class=\"keyword\">let</span> pickedCard = cardPicker();</span><br><span class=\"line\"></span><br><span class=\"line\">alert(<span class=\"string\">&quot;card: &quot;</span> + pickedCard.card + <span class=\"string\">&quot; of &quot;</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure>\n\n<p>更好事情是，TypeScript会警告你犯了一个错误，如果你给编译器设置了–noImplicitThis标记。 它会指出 this.suits[pickedSuit]里的this的类型为any。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Card &#123;</span><br><span class=\"line\">    <span class=\"attr\">suit</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    card: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> Deck &#123;</span><br><span class=\"line\">    <span class=\"attr\">suits</span>: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">    cards: <span class=\"built_in\">number</span>[];</span><br><span class=\"line\">    createCardPicker(<span class=\"built_in\">this</span>: Deck): <span class=\"function\">() =&gt;</span> Card;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> deck: Deck = &#123;</span><br><span class=\"line\">    <span class=\"attr\">suits</span>: [<span class=\"string\">&quot;hearts&quot;</span>, <span class=\"string\">&quot;spades&quot;</span>, <span class=\"string\">&quot;clubs&quot;</span>, <span class=\"string\">&quot;diamonds&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">cards</span>: <span class=\"built_in\">Array</span>(<span class=\"number\">52</span>),</span><br><span class=\"line\">    <span class=\"attr\">createCardPicker</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">this</span>: Deck</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedCard = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">52</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedSuit = <span class=\"built_in\">Math</span>.floor(pickedCard / <span class=\"number\">13</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">suit</span>: <span class=\"built_in\">this</span>.suits[pickedSuit], <span class=\"attr\">card</span>: pickedCard % <span class=\"number\">13</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cardPicker = deck.createCardPicker();</span><br><span class=\"line\"><span class=\"keyword\">let</span> pickedCard = cardPicker();</span><br><span class=\"line\"></span><br><span class=\"line\">alert(<span class=\"string\">&quot;card: &quot;</span> + pickedCard.card + <span class=\"string\">&quot; of &quot;</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure>\n\n<p>现在TypeScript知道createCardPicker期望在某个Deck对象上调用。 也就是说 this是Deck类型的，而非any，因此–noImplicitThis不会报错了。</p>\n<h2 id=\"7-泛型\"><a href=\"#7-泛型\" class=\"headerlink\" title=\"7. 泛型\"></a>7. 泛型</h2><p>用带有调用签名的对象字面量来定义泛型函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> GenericIdentityFn &#123;</span><br><span class=\"line\">    &lt;T&gt;(arg: T): T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identity</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myIdentity: GenericIdentityFn = identity;</span><br></pre></td></tr></table></figure>\n\n<p>泛型接口：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> GenericIdentityFn &#123;</span><br><span class=\"line\">    &lt;T&gt;(arg: T): T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identity</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myIdentity: GenericIdentityFn = identity;</span><br></pre></td></tr></table></figure>\n\n<p>下面的写法与上面的等效</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> GenericIdentityFn&lt;T&gt; &#123;</span><br><span class=\"line\">    (arg: T): T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identity</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myIdentity: GenericIdentityFn&lt;<span class=\"built_in\">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-1-泛型类\"><a href=\"#7-1-泛型类\" class=\"headerlink\" title=\"7.1 泛型类\"></a>7.1 泛型类</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericNumber</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">zeroValue</span>: T;</span><br><span class=\"line\">    add: <span class=\"function\">(<span class=\"params\">x: T, y: T</span>) =&gt;</span> T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myGenericNumber = <span class=\"keyword\">new</span> GenericNumber&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">myGenericNumber.zeroValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">myGenericNumber.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-泛型约束\"><a href=\"#7-2-泛型约束\" class=\"headerlink\" title=\"7.2 泛型约束\"></a>7.2 泛型约束</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Lengthwise &#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loggingIdentity</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">Lengthwise</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg.length);  <span class=\"comment\">// Now we know it has a .length property, so no more error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-在泛型约束中使用类型参数\"><a href=\"#7-3-在泛型约束中使用类型参数\" class=\"headerlink\" title=\"7.3 在泛型约束中使用类型参数\"></a>7.3 在泛型约束中使用类型参数</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperty</span>(<span class=\"params\">obj: T, key: K</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span>, <span class=\"attr\">d</span>: <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getProperty(x, <span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// okay</span></span><br><span class=\"line\">getProperty(x, <span class=\"string\">&quot;m&quot;</span>); <span class=\"comment\">// error: Argument of type &#x27;m&#x27; isn&#x27;t assignable to &#x27;a&#x27; | &#x27;b&#x27; | &#x27;c&#x27; | &#x27;d&#x27;.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-在泛型里使用类类型\"><a href=\"#7-4-在泛型里使用类类型\" class=\"headerlink\" title=\"7.4 在泛型里使用类类型\"></a>7.4 在泛型里使用类类型</h3><p>在TypeScript使用泛型创建工厂函数时，需要引用构造函数的类类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">c: &#123;<span class=\"keyword\">new</span>(): T; &#125;</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> c();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原型属性推断并约束构造函数与类实例的关系:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeeKeeper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">hasMask</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZooKeeper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">nametag</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">numLegs</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">keeper</span>: BeeKeeper;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lion</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">keeper</span>: ZooKeeper;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createInstance</span>&lt;<span class=\"title\">A</span> <span class=\"title\">extends</span> <span class=\"title\">Animal</span>&gt;(<span class=\"params\">c: <span class=\"keyword\">new</span> () =&gt; A</span>): <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> c();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createInstance(Lion).keeper.nametag;  <span class=\"comment\">// typechecks!</span></span><br><span class=\"line\">createInstance(Bee).keeper.hasMask;   <span class=\"comment\">// typechecks!</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-枚举\"><a href=\"#8-枚举\" class=\"headerlink\" title=\"8. 枚举\"></a>8. 枚举</h2><p>异构枚举</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> BooleanLikeHeterogeneousEnum &#123;</span><br><span class=\"line\">    No = <span class=\"number\">0</span>,</span><br><span class=\"line\">    Yes = <span class=\"string\">&quot;YES&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>联合枚举与枚举成员的类型</p>\n<p>运行时的枚举</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> E &#123;</span><br><span class=\"line\">    X, Y, Z</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">obj: &#123; X: <span class=\"built_in\">number</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj.X;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Works, since &#x27;E&#x27; has a property named &#x27;X&#x27; which is a number.</span></span><br><span class=\"line\">f(E);</span><br></pre></td></tr></table></figure>\n\n<p>反向映射</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> Enum &#123;</span><br><span class=\"line\">    A</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = Enum.A;</span><br><span class=\"line\"><span class=\"keyword\">let</span> nameOfA = Enum[a]; <span class=\"comment\">// &quot;A&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>外部枚举</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"built_in\">enum</span> Enum &#123;</span><br><span class=\"line\">    A = <span class=\"number\">1</span>,</span><br><span class=\"line\">    B,</span><br><span class=\"line\">    C = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。 对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。</p>\n<h2 id=\"9-高级类型-高级类型\"><a href=\"#9-高级类型-高级类型\" class=\"headerlink\" title=\"9. 高级类型[^高级类型]\"></a>9. 高级类型[^高级类型]</h2><h3 id=\"9-1-交叉类型\"><a href=\"#9-1-交叉类型\" class=\"headerlink\" title=\"9.1 交叉类型\"></a>9.1 交叉类型</h3><p><code>Person &amp; Serializable &amp; Loggable</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">U</span>&gt;(<span class=\"params\">first: T, second: U</span>): <span class=\"title\">T</span> &amp; <span class=\"title\">U</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class=\"line\">    for (let id in first) &#123;</span><br><span class=\"line\">        (&lt;any&gt;result)[id] = (&lt;any&gt;first)[id];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (let id in second) &#123;</span><br><span class=\"line\">        if (!result.hasOwnProperty(id)) &#123;</span><br><span class=\"line\">            (&lt;any&gt;result)[id] = (&lt;any&gt;second)[id];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    constructor(public name: string) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Loggable &#123;</span><br><span class=\"line\">    log(): void;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ConsoleLogger implements Loggable &#123;</span><br><span class=\"line\">    log() &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var jim = extend(new Person(&quot;Jim&quot;), new ConsoleLogger());</span><br><span class=\"line\">var n = jim.name;</span><br><span class=\"line\">jim.log();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-2-联合类型（Union-Types）\"><a href=\"#9-2-联合类型（Union-Types）\" class=\"headerlink\" title=\"9.2 联合类型（Union Types）\"></a>9.2 联合类型（Union Types）</h3><p>形式： <code>number | string | boolean</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Bird &#123;</span><br><span class=\"line\">    fly();</span><br><span class=\"line\">    layEggs();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Fish &#123;</span><br><span class=\"line\">    swim();</span><br><span class=\"line\">    layEggs();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSmallPet</span>(<span class=\"params\"></span>): <span class=\"title\">Fish</span> | <span class=\"title\">Bird</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> pet = getSmallPet();</span><br><span class=\"line\">pet.layEggs(); <span class=\"comment\">// okay</span></span><br><span class=\"line\">pet.swim();    <span class=\"comment\">// errors</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-3-类型保护与区分类型（Type-Guards-and-Differentiating-Types）\"><a href=\"#9-3-类型保护与区分类型（Type-Guards-and-Differentiating-Types）\" class=\"headerlink\" title=\"9.3 类型保护与区分类型（Type Guards and Differentiating Types）\"></a>9.3 类型保护与区分类型（Type Guards and Differentiating Types）</h3><p>用户自定义类型保护：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFish</span>(<span class=\"params\">pet: Fish | Bird</span>): <span class=\"title\">pet</span> <span class=\"title\">is</span> <span class=\"title\">Fish</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (&lt;Fish&gt;pet).swim !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>typeof类型保护：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNumber</span>(<span class=\"params\">x: <span class=\"built_in\">any</span></span>): <span class=\"title\">x</span> <span class=\"title\">is</span> <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x === <span class=\"string\">&quot;number&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">x: <span class=\"built_in\">any</span></span>): <span class=\"title\">x</span> <span class=\"title\">is</span> <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x === <span class=\"string\">&quot;string&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">padLeft</span>(<span class=\"params\">value: <span class=\"built_in\">string</span>, padding: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNumber(padding)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>(padding + <span class=\"number\">1</span>).join(<span class=\"string\">&quot; &quot;</span>) + value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isString(padding)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> padding + value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Expected string or number, got &#x27;<span class=\"subst\">$&#123;padding&#125;</span>&#x27;.`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>instanceof类型保护：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Padder &#123;</span><br><span class=\"line\">    getPaddingString(): <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpaceRepeatingPadder</span> <span class=\"title\">implements</span> <span class=\"title\">Padder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> numSpaces: <span class=\"built_in\">number</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getPaddingString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>(<span class=\"built_in\">this</span>.numSpaces + <span class=\"number\">1</span>).join(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringPadder</span> <span class=\"title\">implements</span> <span class=\"title\">Padder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> value: <span class=\"built_in\">string</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getPaddingString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandomPadder</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random() &lt; <span class=\"number\">0.5</span> ?</span><br><span class=\"line\">        <span class=\"keyword\">new</span> SpaceRepeatingPadder(<span class=\"number\">4</span>) :</span><br><span class=\"line\">        <span class=\"keyword\">new</span> StringPadder(<span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型为SpaceRepeatingPadder | StringPadder</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> padder: Padder = getRandomPadder();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (padder <span class=\"keyword\">instanceof</span> SpaceRepeatingPadder) &#123;</span><br><span class=\"line\">    padder; <span class=\"comment\">// 类型细化为&#x27;SpaceRepeatingPadder&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (padder <span class=\"keyword\">instanceof</span> StringPadder) &#123;</span><br><span class=\"line\">    padder; <span class=\"comment\">// 类型细化为&#x27;StringPadder&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-4-可辨识联合（Discriminated-Unions）\"><a href=\"#9-4-可辨识联合（Discriminated-Unions）\" class=\"headerlink\" title=\"9.4 可辨识联合（Discriminated Unions）\"></a>9.4 可辨识联合（Discriminated Unions）</h3><ol>\n<li>具有普通的单例类型属性— 可辨识的特征。</li>\n<li>一个类型别名包含了那些类型的联合— 联合。</li>\n<li>此属性上的类型保护。</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Square &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;square&quot;</span>; <span class=\"comment\">// 可辨识的特征或 标签</span></span><br><span class=\"line\">    size: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> Rectangle &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;rectangle&quot;</span>; <span class=\"comment\">// 可辨识的特征或 标签</span></span><br><span class=\"line\">    width: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    height: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> Circle &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;circle&quot;</span>; <span class=\"comment\">// 可辨识的特征或 标签</span></span><br><span class=\"line\">    radius: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Shape = Square | Rectangle | Circle; <span class=\"comment\">// 联合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\">s: Shape</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (s.kind) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;square&quot;</span>: <span class=\"keyword\">return</span> s.size * s.size;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;rectangle&quot;</span>: <span class=\"keyword\">return</span> s.height * s.width;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;circle&quot;</span>: <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * s.radius ** <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-5-多态的-this类型\"><a href=\"#9-5-多态的-this类型\" class=\"headerlink\" title=\"9.5 多态的 this类型\"></a>9.5 多态的 this类型</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicCalculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">protected</span> value: <span class=\"built_in\">number</span> = <span class=\"number\">0</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> currentValue(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> add(operand: <span class=\"built_in\">number</span>): <span class=\"built_in\">this</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value += operand;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> multiply(operand: <span class=\"built_in\">number</span>): <span class=\"built_in\">this</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value *= operand;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... other operations go here ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> v = <span class=\"keyword\">new</span> BasicCalculator(<span class=\"number\">2</span>)</span><br><span class=\"line\">            .multiply(<span class=\"number\">5</span>)</span><br><span class=\"line\">            .add(<span class=\"number\">1</span>)</span><br><span class=\"line\">            .currentValue();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>由于这个类使用了 this类型，你可以继承它，新的类可以直接使用之前的方法，不需要做任何的改变。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScientificCalculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasicCalculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">value = <span class=\"number\">0</span></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"title\">sin</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = <span class=\"built_in\">Math</span>.sin(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... other operations go here ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> v = <span class=\"keyword\">new</span> ScientificCalculator(<span class=\"number\">2</span>)</span><br><span class=\"line\">        .multiply(<span class=\"number\">5</span>)</span><br><span class=\"line\">        .sin()</span><br><span class=\"line\">        .add(<span class=\"number\">1</span>)</span><br><span class=\"line\">        .currentValue();</span><br></pre></td></tr></table></figure>\n\n<p>如果没有 this类型， ScientificCalculator就不能够在继承 BasicCalculator的同时还保持接口的连贯性。 multiply将会返回 BasicCalculator，它并没有 sin方法。 然而，使用 this类型， multiply会返回 this，在这里就是 ScientificCalculator。</p>\n<h3 id=\"9-6-索引类型（Index-types）\"><a href=\"#9-6-索引类型（Index-types）\" class=\"headerlink\" title=\"9.6 索引类型（Index types）\"></a>9.6 索引类型（Index types）</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pluck</span>(<span class=\"params\">o, names</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> names.map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> o[n]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是如何在TypeScript里使用此函数，通过 <code>索引类型查询</code>和 <code>索引访问</code>操作符：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pluck</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">T</span>&gt;(<span class=\"params\">o: T, names: K[]</span>): <span class=\"title\">T</span>[<span class=\"title\">K</span>][] </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> names.map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> o[n]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Person &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person: Person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jarid&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">35</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strings: <span class=\"built_in\">string</span>[] = pluck(person, [<span class=\"string\">&#x27;name&#x27;</span>]); <span class=\"comment\">// ok, string[]</span></span><br></pre></td></tr></table></figure>\n\n<p>编译器会检查 name是否真的是 Person的一个属性。 本例还引入了几个新的类型操作符。 首先是 keyof T， 索引类型查询操作符。 对于任何类型 T， keyof T的结果为 T上已知的公共属性名的联合。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> personProps: keyof Person; <span class=\"comment\">// &#x27;name&#x27; | &#x27;age&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二个操作符是 <code>T[K]</code>， 索引访问操作符。 在这里，类型语法反映了表达式语法。 这意味着 <code>person[&#39;name&#39;]</code>具有类型 <code>Person[&#39;name&#39;]</code> — 在我们的例子里则为 <code>string</code>类型。 然而，就像索引类型查询一样，你可以在普通的上下文里使用 <code>T[K]</code>，这正是它的强大所在。 你只要确保类型变量 K extends keyof T就可以了。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperty</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">T</span>&gt;(<span class=\"params\">o: T, name: K</span>): <span class=\"title\">T</span>[<span class=\"title\">K</span>] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o[name]; <span class=\"comment\">// o[name] is of type T[K]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-6-1-索引类型和字符串索引签名\"><a href=\"#9-6-1-索引类型和字符串索引签名\" class=\"headerlink\" title=\"9.6.1 索引类型和字符串索引签名\"></a>9.6.1 索引类型和字符串索引签名</h4><p><code>keyof</code> 和 <code>T[K]</code>与字符串索引签名进行交互。 如果你有一个带有字符串索引签名的类型，那么 <code>keyof T</code>会是 <code>string</code>。 并且 <code>T[string]</code>为索引签名的类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Map&lt;T&gt; &#123;</span><br><span class=\"line\">    [key: <span class=\"built_in\">string</span>]: T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> keys: keyof <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">number</span>&gt;; <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> value: <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">number</span>&gt;[<span class=\"string\">&#x27;foo&#x27;</span>]; <span class=\"comment\">// number</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-7-映射类型\"><a href=\"#9-7-映射类型\" class=\"headerlink\" title=\"9.7 映射类型\"></a>9.7 映射类型</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Readonly&lt;T&gt; = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> [P <span class=\"keyword\">in</span> keyof T]: T[P];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Partial&lt;T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> keyof T]?: T[P];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像下面这样使用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> PersonPartial = Partial&lt;Person&gt;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> ReadonlyPerson = Readonly&lt;Person&gt;;</span><br></pre></td></tr></table></figure>\n\n<p>基于一些已存在的类型，且按照一定的方式转换字段。 这就是 keyof和索引访问类型要做的事情：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Nullable&lt;T&gt; = &#123; [P <span class=\"keyword\">in</span> keyof T]: T[P] | <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Partial&lt;T&gt; = &#123; [P <span class=\"keyword\">in</span> keyof T]?: T[P] &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这些例子里，属性列表是 keyof T且结果类型是 T[P]的变体。 这是使用通用映射类型的一个好模版。 因为这类转换是 <code>同态的</code>，映射只作用于 <code>T</code>的属性而没有其它的。 编译器知道在添加任何新属性之前可以拷贝所有存在的属性修饰符。 例如，假设 <code>Person.name</code>是只读的，那么 <code>Partial&lt;Person&gt;.name</code>也将是只读的且为可选的。</p>\n<p>下面是另一个例子， <code>T[P]</code>被包装在 <code>Proxy&lt;T&gt;</code>类里：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"built_in\">Proxy</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">    get(): T;</span><br><span class=\"line\">    set(value: T): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Proxify&lt;T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> keyof T]: <span class=\"built_in\">Proxy</span>&lt;T[P]&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxify</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">o: T</span>): <span class=\"title\">Proxify</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// ... wrap proxies ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> proxyProps = proxify(props);</span><br></pre></td></tr></table></figure>\n\n<p>注意 <code>Readonly&lt;T&gt;</code>和 <code>Partial&lt;T&gt;</code>用处不小，因此它们与 <code>Pick</code>和 <code>Record</code>一同被包含进了TypeScript的标准库里：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Pick&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> K]: T[P];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Record&lt;K <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>, T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> K]: T;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-7-1-由映射类型进行推断\"><a href=\"#9-7-1-由映射类型进行推断\" class=\"headerlink\" title=\"9.7.1 由映射类型进行推断\"></a>9.7.1 由映射类型进行推断</h4><p>现在你了解了如何包装一个类型的属性，那么接下来就是如何拆包。 其实这也非常容易：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unproxify</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">t: Proxify&lt;T&gt;</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = &#123;&#125; <span class=\"keyword\">as</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> k <span class=\"keyword\">in</span> t) &#123;</span><br><span class=\"line\">        result[k] = t[k].get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> originalProps = unproxify(proxyProps);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong> 这个拆包推断只适用于同态的映射类型。 如果映射类型不是同态的，那么需要给拆包函数一个明确的类型参数。</p>\n<h4 id=\"9-7-2-预定义的有条件类型\"><a href=\"#9-7-2-预定义的有条件类型\" class=\"headerlink\" title=\"9.7.2 预定义的有条件类型\"></a>9.7.2 预定义的有条件类型</h4><p><code>TypeScript 2.8</code>在<code>lib.d.ts</code>里增加了一些预定义的有条件类型：</p>\n<ul>\n<li><code>Exclude&lt;T, U&gt;</code> – 从T中剔除可以赋值给U的类型。</li>\n<li><code>Extract&lt;T, U&gt;</code> – 提取T中可以赋值给U的类型。</li>\n<li><code>NonNullable&lt;T&gt;</code> – 从T中剔除null和undefined。</li>\n<li><code>ReturnType&lt;T&gt;</code> – 获取函数返回值类型。</li>\n<li><code>InstanceType&lt;T&gt;</code> – 获取构造函数类型的实例类型。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> T00 = Exclude&lt;<span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;b&quot;</span> | <span class=\"string\">&quot;c&quot;</span> | <span class=\"string\">&quot;d&quot;</span>, <span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;c&quot;</span> | <span class=\"string\">&quot;f&quot;</span>&gt;;  <span class=\"comment\">// &quot;b&quot; | &quot;d&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T01 = Extract&lt;<span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;b&quot;</span> | <span class=\"string\">&quot;c&quot;</span> | <span class=\"string\">&quot;d&quot;</span>, <span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;c&quot;</span> | <span class=\"string\">&quot;f&quot;</span>&gt;;  <span class=\"comment\">// &quot;a&quot; | &quot;c&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T02 = Exclude&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | (<span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>), <span class=\"built_in\">Function</span>&gt;;  <span class=\"comment\">// string | number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T03 = Extract&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | (<span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>), <span class=\"built_in\">Function</span>&gt;;  <span class=\"comment\">// () =&gt; void</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T04 = NonNullable&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>&gt;;  <span class=\"comment\">// string | number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T05 = NonNullable&lt;(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">string</span>) | <span class=\"built_in\">string</span>[] | <span class=\"literal\">null</span> | <span class=\"literal\">undefined</span>&gt;;  <span class=\"comment\">// (() =&gt; string) | string[]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: s &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    y = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T10 = ReturnType&lt;<span class=\"function\">() =&gt;</span> <span class=\"built_in\">string</span>&gt;;  <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T11 = ReturnType&lt;<span class=\"function\">(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;;  <span class=\"comment\">// void</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T12 = ReturnType&lt;(&lt;T&gt;<span class=\"function\">() =&gt;</span> T)&gt;;  <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T13 = ReturnType&lt;(&lt;T extends U, U extends number[]&gt;() =&gt; T)&gt;;  // number[]</span><br><span class=\"line\">type T14 = ReturnType&lt;typeof f1&gt;;  // &#123; a: number, b: string &#125;</span><br><span class=\"line\">type T15 = ReturnType&lt;any&gt;;  // any</span><br><span class=\"line\">type T16 = ReturnType&lt;never&gt;;  // any</span><br><span class=\"line\">type T17 = ReturnType&lt;string&gt;;  // Error</span><br><span class=\"line\">type T18 = ReturnType&lt;Function&gt;;  // Error</span><br><span class=\"line\"></span><br><span class=\"line\">type T20 = InstanceType&lt;typeof C&gt;;  // C</span><br><span class=\"line\">type T21 = InstanceType&lt;any&gt;;  // any</span><br><span class=\"line\">type T22 = InstanceType&lt;never&gt;;  // any</span><br><span class=\"line\">type T23 = InstanceType&lt;string&gt;;  // Error</span><br><span class=\"line\">type T24 = InstanceType&lt;Function&gt;;  // Error</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong> <code>Exclude</code>类型是建议的Diff类型的一种实现。我们使用<code>Exclude</code>这个名字是为了避免破坏已经定义了<code>Diff</code>的代码，并且我们感觉这个名字能更好地表达类型的语义。我们没有增加<code>Omit&lt;T, K&gt;</code>类型，因为它可以很容易的用<code>Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;</code>来表示。</p>\n<p>[^高级类型]: <a href=\"https://chinese.freecodecamp.org/news/advanced-typescript-types-cheatsheet/\">TypeScript 高级类型清单</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-TypeScript-指南\"><a href=\"#1-TypeScript-指南\" class=\"headerlink\" title=\"1. TypeScript 指南\"></a>1. TypeScript 指南</h2><p>JavaScript 的面向对象式编程语言</p>\n<h2 id=\"2-基础类型\"><a href=\"#2-基础类型\" class=\"headerlink\" title=\"2. 基础类型\"></a>2. 基础类型</h2><p>基础类型：string，boolean，number</p>\n<p>数组，元组，枚举</p>\n<p>Object，Any</p>\n<p>void， Null， Undefined</p>\n<p>Never</p>\n<h2 id=\"3-变量声明\"><a href=\"#3-变量声明\" class=\"headerlink\" title=\"3. 变量声明\"></a>3. 变量声明</h2><p>作用域规则</p>\n<p>var，let，const</p>\n<p>readonly</p>\n<h3 id=\"3-1-解构\"><a href=\"#3-1-解构\" class=\"headerlink\" title=\"3.1 解构\"></a>3.1 解构</h3><p>数组解构，对象解构</p>\n<p>属性重命名</p>\n<p>默认值</p>\n<p>函数声明中的结构：可选值，默认值，必须参数</p>\n<p>展开(…):</p>\n<ol>\n<li><p>后面的覆盖前面的</p>\n</li>\n<li><p>展开一个对象实例，会丢失其方法</p>\n</li>\n</ol>\n<h2 id=\"4-接口\"><a href=\"#4-接口\" class=\"headerlink\" title=\"4. 接口\"></a>4. 接口</h2><p>可选属性：？</p>\n<p>只读属性：readonly</p>\n<h3 id=\"4-1-额外的属性检查\"><a href=\"#4-1-额外的属性检查\" class=\"headerlink\" title=\"4.1 额外的属性检查\"></a>4.1 额外的属性检查</h3><p>对象字面量会被特殊对待而且会经过 <code>额外属性检查</code>，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。</p>\n<p>索引签名/可索引的类型:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> SquareConfig &#123;</span><br><span class=\"line\">    color?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    width?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    [propName: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口定义函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> SearchFunc &#123;</span><br><span class=\"line\">  (source: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-类类型\"><a href=\"#4-2-类类型\" class=\"headerlink\" title=\"4.2 类类型\"></a>4.2 类类型</h3><p>接口描述了类的公共部分，而不是公共和私有两部分。</p>\n<p>当一个类实现了一个接口时，只对其实例部分进行类型检查。constructor存在于类的静态部分，所以不在检查的范围内。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> ClockConstructor &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> (hour: <span class=\"built_in\">number</span>, <span class=\"attr\">minute</span>: <span class=\"built_in\">number</span>): ClockInterface;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> ClockInterface &#123;</span><br><span class=\"line\">    tick();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createClock</span>(<span class=\"params\">ctor: ClockConstructor, hour: <span class=\"built_in\">number</span>, minute: <span class=\"built_in\">number</span></span>): <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ctor(hour, minute);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DigitalClock</span> <span class=\"title\">implements</span> <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">tick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;beep beep&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnalogClock</span> <span class=\"title\">implements</span> <span class=\"title\">ClockInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">h: <span class=\"built_in\">number</span>, m: <span class=\"built_in\">number</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">tick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;tick tock&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> digital = createClock(DigitalClock, <span class=\"number\">12</span>, <span class=\"number\">17</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> analog = createClock(AnalogClock, <span class=\"number\">7</span>, <span class=\"number\">32</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-接口继承\"><a href=\"#4-3-接口继承\" class=\"headerlink\" title=\"4.3 接口继承\"></a>4.3 接口继承</h3><p>和类一样，接口也可以相互继承。</p>\n<p>混合类型:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Counter &#123;</span><br><span class=\"line\">    (start: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    interval: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    reset(): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCounter</span>(<span class=\"params\"></span>): <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> counter = &lt;Counter&gt;<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">start: <span class=\"built_in\">number</span></span>) </span>&#123; &#125;;</span><br><span class=\"line\">    counter.interval = <span class=\"number\">123</span>;</span><br><span class=\"line\">    counter.reset = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = getCounter();</span><br><span class=\"line\">c(<span class=\"number\">10</span>);</span><br><span class=\"line\">c.reset();</span><br><span class=\"line\">c.interval = <span class=\"number\">5.0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>接口继承类:</p>\n<p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的private和protected成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。</p>\n<h2 id=\"5-类\"><a href=\"#5-类\" class=\"headerlink\" title=\"5. 类\"></a>5. 类</h2><p>继承</p>\n<p>公共，私有与受保护的修饰符</p>\n<h3 id=\"5-1-参数属性\"><a href=\"#5-1-参数属性\" class=\"headerlink\" title=\"5.1 参数属性\"></a>5.1 参数属性</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Octopus</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> numberOfLegs: <span class=\"built_in\">number</span> = <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">readonly</span> name: <span class=\"built_in\">string</span></span>)</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-抽象类\"><a href=\"#5-2-抽象类\" class=\"headerlink\" title=\"5.2 抽象类\"></a>5.2 抽象类</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span></span>)</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printName(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Department name: &#x27;</span> + <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> printMeeting(): <span class=\"built_in\">void</span>; <span class=\"comment\">// 必须在派生类中实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountingDepartment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Department</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(<span class=\"string\">&#x27;Accounting and Auditing&#x27;</span>); <span class=\"comment\">// 在派生类的构造函数中必须调用 super()</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printMeeting(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;The Accounting Department meets each Monday at 10am.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    generateReports(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Generating accounting reports...&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> department: Department; <span class=\"comment\">// 允许创建一个对抽象类型的引用</span></span><br><span class=\"line\">department = <span class=\"keyword\">new</span> Department(); <span class=\"comment\">// 错误: 不能创建一个抽象类的实例</span></span><br><span class=\"line\">department = <span class=\"keyword\">new</span> AccountingDepartment(); <span class=\"comment\">// 允许对一个抽象子类进行实例化和赋值</span></span><br><span class=\"line\">department.printName();</span><br><span class=\"line\">department.printMeeting();</span><br><span class=\"line\">department.generateReports(); <span class=\"comment\">// 错误: 方法在声明的抽象类中不存在</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-构造函数\"><a href=\"#5-3-构造函数\" class=\"headerlink\" title=\"5.3 构造函数\"></a>5.3 构造函数</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">greeting</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.greeting = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">greet</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"built_in\">this</span>.greeting;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter: Greeter;</span><br><span class=\"line\">greeter = <span class=\"keyword\">new</span> Greeter(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greeter.greet());</span><br></pre></td></tr></table></figure>\n\n<p>转换为 JavaScript 后</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Greeter = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Greeter</span>(<span class=\"params\">message</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.greeting = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Greeter.prototype.greet = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"built_in\">this</span>.greeting;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Greeter;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter;</span><br><span class=\"line\">greeter = <span class=\"keyword\">new</span> Greeter(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greeter.greet());</span><br></pre></td></tr></table></figure>\n\n<p>改写一下这个例子，看看它们之间的区别:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> standardGreeting = <span class=\"string\">&quot;Hello, there&quot;</span>;</span><br><span class=\"line\">    greeting: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">greet</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.greeting) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"built_in\">this</span>.greeting;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Greeter.standardGreeting;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter1: Greeter;</span><br><span class=\"line\">greeter1 = <span class=\"keyword\">new</span> Greeter();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greeter1.greet());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeterMaker: <span class=\"keyword\">typeof</span> Greeter = Greeter;</span><br><span class=\"line\">greeterMaker.standardGreeting = <span class=\"string\">&quot;Hey there!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> greeter2: Greeter = <span class=\"keyword\">new</span> greeterMaker();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(greeter2.greet());</span><br></pre></td></tr></table></figure>\n\n<p>创建了一个叫做 greeterMaker的变量。 这个变量保存了这个类或者说保存了类构造函数。 然后我们使用 typeof Greeter，意思是取Greeter类的类型，而不是实例的类型。 或者更确切的说，”告诉我 Greeter标识符的类型”，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在 greeterMaker上使用 new，创建 Greeter的实例。</p>\n<h2 id=\"6-函数\"><a href=\"#6-函数\" class=\"headerlink\" title=\"6 函数\"></a>6 函数</h2><h3 id=\"6-1-函数类型\"><a href=\"#6-1-函数类型\" class=\"headerlink\" title=\"6.1 函数类型\"></a>6.1 函数类型</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myAdd: <span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span> =</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>可选参数和默认参数</p>\n<p>剩余参数</p>\n<h3 id=\"6-2-this\"><a href=\"#6-2-this\" class=\"headerlink\" title=\"6.2 this\"></a>6.2 <code>this</code></h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deck = &#123;</span><br><span class=\"line\">    <span class=\"attr\">suits</span>: [<span class=\"string\">&quot;hearts&quot;</span>, <span class=\"string\">&quot;spades&quot;</span>, <span class=\"string\">&quot;clubs&quot;</span>, <span class=\"string\">&quot;diamonds&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">cards</span>: <span class=\"built_in\">Array</span>(<span class=\"number\">52</span>),</span><br><span class=\"line\">    <span class=\"attr\">createCardPicker</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedCard = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">52</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedSuit = <span class=\"built_in\">Math</span>.floor(pickedCard / <span class=\"number\">13</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">suit</span>: <span class=\"built_in\">this</span>.suits[pickedSuit], <span class=\"attr\">card</span>: pickedCard % <span class=\"number\">13</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cardPicker = deck.createCardPicker();</span><br><span class=\"line\"><span class=\"keyword\">let</span> pickedCard = cardPicker();</span><br><span class=\"line\"></span><br><span class=\"line\">alert(<span class=\"string\">&quot;card: &quot;</span> + pickedCard.card + <span class=\"string\">&quot; of &quot;</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure>\n\n<p>this 为 window，在严格模式下为 undefined。</p>\n<p>为了解决这个问题，我们可以在函数被返回时就绑好正确的this。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭头函数能保存函数创建时的 this值，而不是调用时的值：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deck = &#123;</span><br><span class=\"line\">    <span class=\"attr\">suits</span>: [<span class=\"string\">&quot;hearts&quot;</span>, <span class=\"string\">&quot;spades&quot;</span>, <span class=\"string\">&quot;clubs&quot;</span>, <span class=\"string\">&quot;diamonds&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">cards</span>: <span class=\"built_in\">Array</span>(<span class=\"number\">52</span>),</span><br><span class=\"line\">    <span class=\"attr\">createCardPicker</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> the line below is now an arrow function, allowing us to capture &#x27;this&#x27; right here</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedCard = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">52</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedSuit = <span class=\"built_in\">Math</span>.floor(pickedCard / <span class=\"number\">13</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">suit</span>: <span class=\"built_in\">this</span>.suits[pickedSuit], <span class=\"attr\">card</span>: pickedCard % <span class=\"number\">13</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cardPicker = deck.createCardPicker();</span><br><span class=\"line\"><span class=\"keyword\">let</span> pickedCard = cardPicker();</span><br><span class=\"line\"></span><br><span class=\"line\">alert(<span class=\"string\">&quot;card: &quot;</span> + pickedCard.card + <span class=\"string\">&quot; of &quot;</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure>\n\n<p>更好事情是，TypeScript会警告你犯了一个错误，如果你给编译器设置了–noImplicitThis标记。 它会指出 this.suits[pickedSuit]里的this的类型为any。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Card &#123;</span><br><span class=\"line\">    <span class=\"attr\">suit</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    card: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> Deck &#123;</span><br><span class=\"line\">    <span class=\"attr\">suits</span>: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">    cards: <span class=\"built_in\">number</span>[];</span><br><span class=\"line\">    createCardPicker(<span class=\"built_in\">this</span>: Deck): <span class=\"function\">() =&gt;</span> Card;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> deck: Deck = &#123;</span><br><span class=\"line\">    <span class=\"attr\">suits</span>: [<span class=\"string\">&quot;hearts&quot;</span>, <span class=\"string\">&quot;spades&quot;</span>, <span class=\"string\">&quot;clubs&quot;</span>, <span class=\"string\">&quot;diamonds&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">cards</span>: <span class=\"built_in\">Array</span>(<span class=\"number\">52</span>),</span><br><span class=\"line\">    <span class=\"attr\">createCardPicker</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">this</span>: Deck</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedCard = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">52</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> pickedSuit = <span class=\"built_in\">Math</span>.floor(pickedCard / <span class=\"number\">13</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">suit</span>: <span class=\"built_in\">this</span>.suits[pickedSuit], <span class=\"attr\">card</span>: pickedCard % <span class=\"number\">13</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cardPicker = deck.createCardPicker();</span><br><span class=\"line\"><span class=\"keyword\">let</span> pickedCard = cardPicker();</span><br><span class=\"line\"></span><br><span class=\"line\">alert(<span class=\"string\">&quot;card: &quot;</span> + pickedCard.card + <span class=\"string\">&quot; of &quot;</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure>\n\n<p>现在TypeScript知道createCardPicker期望在某个Deck对象上调用。 也就是说 this是Deck类型的，而非any，因此–noImplicitThis不会报错了。</p>\n<h2 id=\"7-泛型\"><a href=\"#7-泛型\" class=\"headerlink\" title=\"7. 泛型\"></a>7. 泛型</h2><p>用带有调用签名的对象字面量来定义泛型函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> GenericIdentityFn &#123;</span><br><span class=\"line\">    &lt;T&gt;(arg: T): T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identity</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myIdentity: GenericIdentityFn = identity;</span><br></pre></td></tr></table></figure>\n\n<p>泛型接口：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> GenericIdentityFn &#123;</span><br><span class=\"line\">    &lt;T&gt;(arg: T): T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identity</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myIdentity: GenericIdentityFn = identity;</span><br></pre></td></tr></table></figure>\n\n<p>下面的写法与上面的等效</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> GenericIdentityFn&lt;T&gt; &#123;</span><br><span class=\"line\">    (arg: T): T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identity</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myIdentity: GenericIdentityFn&lt;<span class=\"built_in\">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-1-泛型类\"><a href=\"#7-1-泛型类\" class=\"headerlink\" title=\"7.1 泛型类\"></a>7.1 泛型类</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericNumber</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">zeroValue</span>: T;</span><br><span class=\"line\">    add: <span class=\"function\">(<span class=\"params\">x: T, y: T</span>) =&gt;</span> T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myGenericNumber = <span class=\"keyword\">new</span> GenericNumber&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">myGenericNumber.zeroValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">myGenericNumber.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-泛型约束\"><a href=\"#7-2-泛型约束\" class=\"headerlink\" title=\"7.2 泛型约束\"></a>7.2 泛型约束</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Lengthwise &#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loggingIdentity</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">Lengthwise</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg.length);  <span class=\"comment\">// Now we know it has a .length property, so no more error</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-在泛型约束中使用类型参数\"><a href=\"#7-3-在泛型约束中使用类型参数\" class=\"headerlink\" title=\"7.3 在泛型约束中使用类型参数\"></a>7.3 在泛型约束中使用类型参数</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperty</span>(<span class=\"params\">obj: T, key: K</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span>, <span class=\"attr\">d</span>: <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getProperty(x, <span class=\"string\">&quot;a&quot;</span>); <span class=\"comment\">// okay</span></span><br><span class=\"line\">getProperty(x, <span class=\"string\">&quot;m&quot;</span>); <span class=\"comment\">// error: Argument of type &#x27;m&#x27; isn&#x27;t assignable to &#x27;a&#x27; | &#x27;b&#x27; | &#x27;c&#x27; | &#x27;d&#x27;.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-在泛型里使用类类型\"><a href=\"#7-4-在泛型里使用类类型\" class=\"headerlink\" title=\"7.4 在泛型里使用类类型\"></a>7.4 在泛型里使用类类型</h3><p>在TypeScript使用泛型创建工厂函数时，需要引用构造函数的类类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">c: &#123;<span class=\"keyword\">new</span>(): T; &#125;</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> c();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原型属性推断并约束构造函数与类实例的关系:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeeKeeper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">hasMask</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZooKeeper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">nametag</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">numLegs</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">keeper</span>: BeeKeeper;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lion</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">keeper</span>: ZooKeeper;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createInstance</span>&lt;<span class=\"title\">A</span> <span class=\"title\">extends</span> <span class=\"title\">Animal</span>&gt;(<span class=\"params\">c: <span class=\"keyword\">new</span> () =&gt; A</span>): <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> c();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createInstance(Lion).keeper.nametag;  <span class=\"comment\">// typechecks!</span></span><br><span class=\"line\">createInstance(Bee).keeper.hasMask;   <span class=\"comment\">// typechecks!</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-枚举\"><a href=\"#8-枚举\" class=\"headerlink\" title=\"8. 枚举\"></a>8. 枚举</h2><p>异构枚举</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> BooleanLikeHeterogeneousEnum &#123;</span><br><span class=\"line\">    No = <span class=\"number\">0</span>,</span><br><span class=\"line\">    Yes = <span class=\"string\">&quot;YES&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>联合枚举与枚举成员的类型</p>\n<p>运行时的枚举</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> E &#123;</span><br><span class=\"line\">    X, Y, Z</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">obj: &#123; X: <span class=\"built_in\">number</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj.X;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Works, since &#x27;E&#x27; has a property named &#x27;X&#x27; which is a number.</span></span><br><span class=\"line\">f(E);</span><br></pre></td></tr></table></figure>\n\n<p>反向映射</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> Enum &#123;</span><br><span class=\"line\">    A</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = Enum.A;</span><br><span class=\"line\"><span class=\"keyword\">let</span> nameOfA = Enum[a]; <span class=\"comment\">// &quot;A&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>外部枚举</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"built_in\">enum</span> Enum &#123;</span><br><span class=\"line\">    A = <span class=\"number\">1</span>,</span><br><span class=\"line\">    B,</span><br><span class=\"line\">    C = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。 对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。</p>\n<h2 id=\"9-高级类型-高级类型\"><a href=\"#9-高级类型-高级类型\" class=\"headerlink\" title=\"9. 高级类型[^高级类型]\"></a>9. 高级类型[^高级类型]</h2><h3 id=\"9-1-交叉类型\"><a href=\"#9-1-交叉类型\" class=\"headerlink\" title=\"9.1 交叉类型\"></a>9.1 交叉类型</h3><p><code>Person &amp; Serializable &amp; Loggable</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extend</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">U</span>&gt;(<span class=\"params\">first: T, second: U</span>): <span class=\"title\">T</span> &amp; <span class=\"title\">U</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class=\"line\">    for (let id in first) &#123;</span><br><span class=\"line\">        (&lt;any&gt;result)[id] = (&lt;any&gt;first)[id];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (let id in second) &#123;</span><br><span class=\"line\">        if (!result.hasOwnProperty(id)) &#123;</span><br><span class=\"line\">            (&lt;any&gt;result)[id] = (&lt;any&gt;second)[id];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Person &#123;</span><br><span class=\"line\">    constructor(public name: string) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Loggable &#123;</span><br><span class=\"line\">    log(): void;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ConsoleLogger implements Loggable &#123;</span><br><span class=\"line\">    log() &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var jim = extend(new Person(&quot;Jim&quot;), new ConsoleLogger());</span><br><span class=\"line\">var n = jim.name;</span><br><span class=\"line\">jim.log();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-2-联合类型（Union-Types）\"><a href=\"#9-2-联合类型（Union-Types）\" class=\"headerlink\" title=\"9.2 联合类型（Union Types）\"></a>9.2 联合类型（Union Types）</h3><p>形式： <code>number | string | boolean</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Bird &#123;</span><br><span class=\"line\">    fly();</span><br><span class=\"line\">    layEggs();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Fish &#123;</span><br><span class=\"line\">    swim();</span><br><span class=\"line\">    layEggs();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSmallPet</span>(<span class=\"params\"></span>): <span class=\"title\">Fish</span> | <span class=\"title\">Bird</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> pet = getSmallPet();</span><br><span class=\"line\">pet.layEggs(); <span class=\"comment\">// okay</span></span><br><span class=\"line\">pet.swim();    <span class=\"comment\">// errors</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-3-类型保护与区分类型（Type-Guards-and-Differentiating-Types）\"><a href=\"#9-3-类型保护与区分类型（Type-Guards-and-Differentiating-Types）\" class=\"headerlink\" title=\"9.3 类型保护与区分类型（Type Guards and Differentiating Types）\"></a>9.3 类型保护与区分类型（Type Guards and Differentiating Types）</h3><p>用户自定义类型保护：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFish</span>(<span class=\"params\">pet: Fish | Bird</span>): <span class=\"title\">pet</span> <span class=\"title\">is</span> <span class=\"title\">Fish</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (&lt;Fish&gt;pet).swim !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>typeof类型保护：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNumber</span>(<span class=\"params\">x: <span class=\"built_in\">any</span></span>): <span class=\"title\">x</span> <span class=\"title\">is</span> <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x === <span class=\"string\">&quot;number&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isString</span>(<span class=\"params\">x: <span class=\"built_in\">any</span></span>): <span class=\"title\">x</span> <span class=\"title\">is</span> <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> x === <span class=\"string\">&quot;string&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">padLeft</span>(<span class=\"params\">value: <span class=\"built_in\">string</span>, padding: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNumber(padding)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>(padding + <span class=\"number\">1</span>).join(<span class=\"string\">&quot; &quot;</span>) + value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isString(padding)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> padding + value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Expected string or number, got &#x27;<span class=\"subst\">$&#123;padding&#125;</span>&#x27;.`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>instanceof类型保护：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Padder &#123;</span><br><span class=\"line\">    getPaddingString(): <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpaceRepeatingPadder</span> <span class=\"title\">implements</span> <span class=\"title\">Padder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> numSpaces: <span class=\"built_in\">number</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getPaddingString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>(<span class=\"built_in\">this</span>.numSpaces + <span class=\"number\">1</span>).join(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringPadder</span> <span class=\"title\">implements</span> <span class=\"title\">Padder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> value: <span class=\"built_in\">string</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getPaddingString</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandomPadder</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random() &lt; <span class=\"number\">0.5</span> ?</span><br><span class=\"line\">        <span class=\"keyword\">new</span> SpaceRepeatingPadder(<span class=\"number\">4</span>) :</span><br><span class=\"line\">        <span class=\"keyword\">new</span> StringPadder(<span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型为SpaceRepeatingPadder | StringPadder</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> padder: Padder = getRandomPadder();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (padder <span class=\"keyword\">instanceof</span> SpaceRepeatingPadder) &#123;</span><br><span class=\"line\">    padder; <span class=\"comment\">// 类型细化为&#x27;SpaceRepeatingPadder&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (padder <span class=\"keyword\">instanceof</span> StringPadder) &#123;</span><br><span class=\"line\">    padder; <span class=\"comment\">// 类型细化为&#x27;StringPadder&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-4-可辨识联合（Discriminated-Unions）\"><a href=\"#9-4-可辨识联合（Discriminated-Unions）\" class=\"headerlink\" title=\"9.4 可辨识联合（Discriminated Unions）\"></a>9.4 可辨识联合（Discriminated Unions）</h3><ol>\n<li>具有普通的单例类型属性— 可辨识的特征。</li>\n<li>一个类型别名包含了那些类型的联合— 联合。</li>\n<li>此属性上的类型保护。</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Square &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;square&quot;</span>; <span class=\"comment\">// 可辨识的特征或 标签</span></span><br><span class=\"line\">    size: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> Rectangle &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;rectangle&quot;</span>; <span class=\"comment\">// 可辨识的特征或 标签</span></span><br><span class=\"line\">    width: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    height: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> Circle &#123;</span><br><span class=\"line\">    <span class=\"attr\">kind</span>: <span class=\"string\">&quot;circle&quot;</span>; <span class=\"comment\">// 可辨识的特征或 标签</span></span><br><span class=\"line\">    radius: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Shape = Square | Rectangle | Circle; <span class=\"comment\">// 联合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">area</span>(<span class=\"params\">s: Shape</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (s.kind) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;square&quot;</span>: <span class=\"keyword\">return</span> s.size * s.size;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;rectangle&quot;</span>: <span class=\"keyword\">return</span> s.height * s.width;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;circle&quot;</span>: <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * s.radius ** <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-5-多态的-this类型\"><a href=\"#9-5-多态的-this类型\" class=\"headerlink\" title=\"9.5 多态的 this类型\"></a>9.5 多态的 this类型</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicCalculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">protected</span> value: <span class=\"built_in\">number</span> = <span class=\"number\">0</span></span>)</span> &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> currentValue(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> add(operand: <span class=\"built_in\">number</span>): <span class=\"built_in\">this</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value += operand;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> multiply(operand: <span class=\"built_in\">number</span>): <span class=\"built_in\">this</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value *= operand;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... other operations go here ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> v = <span class=\"keyword\">new</span> BasicCalculator(<span class=\"number\">2</span>)</span><br><span class=\"line\">            .multiply(<span class=\"number\">5</span>)</span><br><span class=\"line\">            .add(<span class=\"number\">1</span>)</span><br><span class=\"line\">            .currentValue();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>由于这个类使用了 this类型，你可以继承它，新的类可以直接使用之前的方法，不需要做任何的改变。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScientificCalculator</span> <span class=\"keyword\">extends</span> <span class=\"title\">BasicCalculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">value = <span class=\"number\">0</span></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"title\">sin</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = <span class=\"built_in\">Math</span>.sin(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... other operations go here ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> v = <span class=\"keyword\">new</span> ScientificCalculator(<span class=\"number\">2</span>)</span><br><span class=\"line\">        .multiply(<span class=\"number\">5</span>)</span><br><span class=\"line\">        .sin()</span><br><span class=\"line\">        .add(<span class=\"number\">1</span>)</span><br><span class=\"line\">        .currentValue();</span><br></pre></td></tr></table></figure>\n\n<p>如果没有 this类型， ScientificCalculator就不能够在继承 BasicCalculator的同时还保持接口的连贯性。 multiply将会返回 BasicCalculator，它并没有 sin方法。 然而，使用 this类型， multiply会返回 this，在这里就是 ScientificCalculator。</p>\n<h3 id=\"9-6-索引类型（Index-types）\"><a href=\"#9-6-索引类型（Index-types）\" class=\"headerlink\" title=\"9.6 索引类型（Index types）\"></a>9.6 索引类型（Index types）</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pluck</span>(<span class=\"params\">o, names</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> names.map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> o[n]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是如何在TypeScript里使用此函数，通过 <code>索引类型查询</code>和 <code>索引访问</code>操作符：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pluck</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">T</span>&gt;(<span class=\"params\">o: T, names: K[]</span>): <span class=\"title\">T</span>[<span class=\"title\">K</span>][] </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> names.map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> o[n]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Person &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person: Person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jarid&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">35</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> strings: <span class=\"built_in\">string</span>[] = pluck(person, [<span class=\"string\">&#x27;name&#x27;</span>]); <span class=\"comment\">// ok, string[]</span></span><br></pre></td></tr></table></figure>\n\n<p>编译器会检查 name是否真的是 Person的一个属性。 本例还引入了几个新的类型操作符。 首先是 keyof T， 索引类型查询操作符。 对于任何类型 T， keyof T的结果为 T上已知的公共属性名的联合。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> personProps: keyof Person; <span class=\"comment\">// &#x27;name&#x27; | &#x27;age&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二个操作符是 <code>T[K]</code>， 索引访问操作符。 在这里，类型语法反映了表达式语法。 这意味着 <code>person[&#39;name&#39;]</code>具有类型 <code>Person[&#39;name&#39;]</code> — 在我们的例子里则为 <code>string</code>类型。 然而，就像索引类型查询一样，你可以在普通的上下文里使用 <code>T[K]</code>，这正是它的强大所在。 你只要确保类型变量 K extends keyof T就可以了。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperty</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">T</span>&gt;(<span class=\"params\">o: T, name: K</span>): <span class=\"title\">T</span>[<span class=\"title\">K</span>] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o[name]; <span class=\"comment\">// o[name] is of type T[K]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-6-1-索引类型和字符串索引签名\"><a href=\"#9-6-1-索引类型和字符串索引签名\" class=\"headerlink\" title=\"9.6.1 索引类型和字符串索引签名\"></a>9.6.1 索引类型和字符串索引签名</h4><p><code>keyof</code> 和 <code>T[K]</code>与字符串索引签名进行交互。 如果你有一个带有字符串索引签名的类型，那么 <code>keyof T</code>会是 <code>string</code>。 并且 <code>T[string]</code>为索引签名的类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Map&lt;T&gt; &#123;</span><br><span class=\"line\">    [key: <span class=\"built_in\">string</span>]: T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> keys: keyof <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">number</span>&gt;; <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> value: <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">number</span>&gt;[<span class=\"string\">&#x27;foo&#x27;</span>]; <span class=\"comment\">// number</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-7-映射类型\"><a href=\"#9-7-映射类型\" class=\"headerlink\" title=\"9.7 映射类型\"></a>9.7 映射类型</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Readonly&lt;T&gt; = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> [P <span class=\"keyword\">in</span> keyof T]: T[P];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Partial&lt;T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> keyof T]?: T[P];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>像下面这样使用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> PersonPartial = Partial&lt;Person&gt;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> ReadonlyPerson = Readonly&lt;Person&gt;;</span><br></pre></td></tr></table></figure>\n\n<p>基于一些已存在的类型，且按照一定的方式转换字段。 这就是 keyof和索引访问类型要做的事情：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Nullable&lt;T&gt; = &#123; [P <span class=\"keyword\">in</span> keyof T]: T[P] | <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Partial&lt;T&gt; = &#123; [P <span class=\"keyword\">in</span> keyof T]?: T[P] &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这些例子里，属性列表是 keyof T且结果类型是 T[P]的变体。 这是使用通用映射类型的一个好模版。 因为这类转换是 <code>同态的</code>，映射只作用于 <code>T</code>的属性而没有其它的。 编译器知道在添加任何新属性之前可以拷贝所有存在的属性修饰符。 例如，假设 <code>Person.name</code>是只读的，那么 <code>Partial&lt;Person&gt;.name</code>也将是只读的且为可选的。</p>\n<p>下面是另一个例子， <code>T[P]</code>被包装在 <code>Proxy&lt;T&gt;</code>类里：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"built_in\">Proxy</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">    get(): T;</span><br><span class=\"line\">    set(value: T): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Proxify&lt;T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> keyof T]: <span class=\"built_in\">Proxy</span>&lt;T[P]&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxify</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">o: T</span>): <span class=\"title\">Proxify</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// ... wrap proxies ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> proxyProps = proxify(props);</span><br></pre></td></tr></table></figure>\n\n<p>注意 <code>Readonly&lt;T&gt;</code>和 <code>Partial&lt;T&gt;</code>用处不小，因此它们与 <code>Pick</code>和 <code>Record</code>一同被包含进了TypeScript的标准库里：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Pick&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> K]: T[P];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Record&lt;K <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span>, T&gt; = &#123;</span><br><span class=\"line\">    [P <span class=\"keyword\">in</span> K]: T;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-7-1-由映射类型进行推断\"><a href=\"#9-7-1-由映射类型进行推断\" class=\"headerlink\" title=\"9.7.1 由映射类型进行推断\"></a>9.7.1 由映射类型进行推断</h4><p>现在你了解了如何包装一个类型的属性，那么接下来就是如何拆包。 其实这也非常容易：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unproxify</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">t: Proxify&lt;T&gt;</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = &#123;&#125; <span class=\"keyword\">as</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> k <span class=\"keyword\">in</span> t) &#123;</span><br><span class=\"line\">        result[k] = t[k].get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> originalProps = unproxify(proxyProps);</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong> 这个拆包推断只适用于同态的映射类型。 如果映射类型不是同态的，那么需要给拆包函数一个明确的类型参数。</p>\n<h4 id=\"9-7-2-预定义的有条件类型\"><a href=\"#9-7-2-预定义的有条件类型\" class=\"headerlink\" title=\"9.7.2 预定义的有条件类型\"></a>9.7.2 预定义的有条件类型</h4><p><code>TypeScript 2.8</code>在<code>lib.d.ts</code>里增加了一些预定义的有条件类型：</p>\n<ul>\n<li><code>Exclude&lt;T, U&gt;</code> – 从T中剔除可以赋值给U的类型。</li>\n<li><code>Extract&lt;T, U&gt;</code> – 提取T中可以赋值给U的类型。</li>\n<li><code>NonNullable&lt;T&gt;</code> – 从T中剔除null和undefined。</li>\n<li><code>ReturnType&lt;T&gt;</code> – 获取函数返回值类型。</li>\n<li><code>InstanceType&lt;T&gt;</code> – 获取构造函数类型的实例类型。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> T00 = Exclude&lt;<span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;b&quot;</span> | <span class=\"string\">&quot;c&quot;</span> | <span class=\"string\">&quot;d&quot;</span>, <span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;c&quot;</span> | <span class=\"string\">&quot;f&quot;</span>&gt;;  <span class=\"comment\">// &quot;b&quot; | &quot;d&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T01 = Extract&lt;<span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;b&quot;</span> | <span class=\"string\">&quot;c&quot;</span> | <span class=\"string\">&quot;d&quot;</span>, <span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;c&quot;</span> | <span class=\"string\">&quot;f&quot;</span>&gt;;  <span class=\"comment\">// &quot;a&quot; | &quot;c&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T02 = Exclude&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | (<span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>), <span class=\"built_in\">Function</span>&gt;;  <span class=\"comment\">// string | number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T03 = Extract&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | (<span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>), <span class=\"built_in\">Function</span>&gt;;  <span class=\"comment\">// () =&gt; void</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T04 = NonNullable&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>&gt;;  <span class=\"comment\">// string | number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T05 = NonNullable&lt;(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">string</span>) | <span class=\"built_in\">string</span>[] | <span class=\"literal\">null</span> | <span class=\"literal\">undefined</span>&gt;;  <span class=\"comment\">// (() =&gt; string) | string[]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: s &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">    x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    y = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T10 = ReturnType&lt;<span class=\"function\">() =&gt;</span> <span class=\"built_in\">string</span>&gt;;  <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T11 = ReturnType&lt;<span class=\"function\">(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>&gt;;  <span class=\"comment\">// void</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T12 = ReturnType&lt;(&lt;T&gt;<span class=\"function\">() =&gt;</span> T)&gt;;  <span class=\"comment\">// &#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T13 = ReturnType&lt;(&lt;T extends U, U extends number[]&gt;() =&gt; T)&gt;;  // number[]</span><br><span class=\"line\">type T14 = ReturnType&lt;typeof f1&gt;;  // &#123; a: number, b: string &#125;</span><br><span class=\"line\">type T15 = ReturnType&lt;any&gt;;  // any</span><br><span class=\"line\">type T16 = ReturnType&lt;never&gt;;  // any</span><br><span class=\"line\">type T17 = ReturnType&lt;string&gt;;  // Error</span><br><span class=\"line\">type T18 = ReturnType&lt;Function&gt;;  // Error</span><br><span class=\"line\"></span><br><span class=\"line\">type T20 = InstanceType&lt;typeof C&gt;;  // C</span><br><span class=\"line\">type T21 = InstanceType&lt;any&gt;;  // any</span><br><span class=\"line\">type T22 = InstanceType&lt;never&gt;;  // any</span><br><span class=\"line\">type T23 = InstanceType&lt;string&gt;;  // Error</span><br><span class=\"line\">type T24 = InstanceType&lt;Function&gt;;  // Error</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong> <code>Exclude</code>类型是建议的Diff类型的一种实现。我们使用<code>Exclude</code>这个名字是为了避免破坏已经定义了<code>Diff</code>的代码，并且我们感觉这个名字能更好地表达类型的语义。我们没有增加<code>Omit&lt;T, K&gt;</code>类型，因为它可以很容易的用<code>Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;</code>来表示。</p>\n<p>[^高级类型]: <a href=\"https://chinese.freecodecamp.org/news/advanced-typescript-types-cheatsheet/\">TypeScript 高级类型清单</a></p>\n"},{"title":"AppleScript","abbrlink":"8e8ec497","date":"2021-04-19T16:00:00.000Z","_content":"","source":"_posts/iOS/Languages/AppleScript/AppleScript.md","raw":"---\ntitle: AppleScript\nabbrlink: 8e8ec497\ndate: 2021-04-20 00:00:00\ntags:\n---\n","slug":"iOS/Languages/AppleScript/AppleScript","published":1,"updated":"2021-07-29T06:45:57.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3b003eiu9kcobu5ato","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"系统中断信号","abbrlink":"f317f6e0","date":"2021-04-19T16:00:00.000Z","_content":"\n```shell\n# 查看信号列表\nkill -l\n\nConstant    Explanation\nSIGTERM    termination request, sent to the program\nSIGSEGV    invalid memory access (segmentation fault)\nSIGINT    external interrupt, usually initiated by the user\nSIGILL    invalid program image, such as invalid instruction\nSIGABRT    abnormal termination condition, as is e.g. initiated by abort()\nSIGFPE       erroneous arithmetic operation such as divide by zero\n```\n","source":"_posts/iOS/Languages/CAlians/Interupt.md","raw":"---\ntitle: 系统中断信号\nabbrlink: f317f6e0\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n```shell\n# 查看信号列表\nkill -l\n\nConstant    Explanation\nSIGTERM    termination request, sent to the program\nSIGSEGV    invalid memory access (segmentation fault)\nSIGINT    external interrupt, usually initiated by the user\nSIGILL    invalid program image, such as invalid instruction\nSIGABRT    abnormal termination condition, as is e.g. initiated by abort()\nSIGFPE       erroneous arithmetic operation such as divide by zero\n```\n","slug":"iOS/Languages/CAlians/Interupt","published":1,"updated":"2021-09-16T06:42:30.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3c003fiu9kf6z6co8y","content":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看信号列表</span></span><br><span class=\"line\">kill -l</span><br><span class=\"line\"></span><br><span class=\"line\">Constant    Explanation</span><br><span class=\"line\">SIGTERM    termination request, sent to the program</span><br><span class=\"line\">SIGSEGV    invalid memory access (segmentation fault)</span><br><span class=\"line\">SIGINT    external interrupt, usually initiated by the user</span><br><span class=\"line\">SIGILL    invalid program image, such as invalid instruction</span><br><span class=\"line\">SIGABRT    abnormal termination condition, as is e.g. initiated by abort()</span><br><span class=\"line\">SIGFPE       erroneous arithmetic operation such as divide by zero</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看信号列表</span></span><br><span class=\"line\">kill -l</span><br><span class=\"line\"></span><br><span class=\"line\">Constant    Explanation</span><br><span class=\"line\">SIGTERM    termination request, sent to the program</span><br><span class=\"line\">SIGSEGV    invalid memory access (segmentation fault)</span><br><span class=\"line\">SIGINT    external interrupt, usually initiated by the user</span><br><span class=\"line\">SIGILL    invalid program image, such as invalid instruction</span><br><span class=\"line\">SIGABRT    abnormal termination condition, as is e.g. initiated by abort()</span><br><span class=\"line\">SIGFPE       erroneous arithmetic operation such as divide by zero</span><br></pre></td></tr></table></figure>\n"},{"title":"编译工具 CMake 入门","abbrlink":56914,"date":"2021-09-01T02:56:00.000Z","_content":"\n[TOC]\n\ncmake 的用法，分为三步\n\n1. 编写 CMake 配置文件 CMakeLists.txt 。\n2. 执行命令 `cmake PATH` 或者 `ccmake PATH` 生成 Makefile。其中， PATH 是   CMakeLists.txt 所在的目录。\n3. 使用 `make` 命令进行编译。\n\n`ccmake` 和 `cmake` 的区别在于前者提供了一个交互式的界面。\n\n## 1. 设置项目\n\n### 1.1 设置名称与版本\n\n```cmake\ncmake_minimum_required(VERSION 3.10)\n\n# set the project name and version\nproject(Tutorial VERSION 1.0)\n\n# add the executable\nadd_executable(Tutorial tutorial.cxx)\n```\n\n### 1.2 设置 C++ 编译器环境\n\n比如可以这么设置 C++11\n\n```cmake\n# specify the C++ standard 11\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\n```\n\n### 1.3 设置 GDB\n\nCMake 支持 gdb 的设置，也很容易，只需要指定 Debug 模式下开启 -g 选项\n\n```cmake\nset(CMAKE_BUILD_TYPE \"Debug\")\nset(CMAKE_CXX_FLAGS_DEBUG \"$ENV{CXXFLAGS} -O0 -Wall -g -ggdb\")\nset(CMAKE_CXX_FLAGS_RELEASE \"$ENV{CXXFLAGS} -O3 -Wall\")\n```\n\n## 2. 编译多个目录多个文件\n\n例如工程文件目录如下：\n\n```shell\n./Tutorial\n    |\n    +--- main.cc\n    |\n    +--- math/\n          |\n          +--- MathFunctions.cc\n          |\n          +--- MathFunctions.h\n\n```\n\n首先需要在 Tutorial 文件夹和 math 文件夹下，分别建一个 CMakeLists.txt 文件，其中 Tutorial 目录下的 CMakeLists.txt 称为顶层 CMakeLists.txt。\n\nTutorial 目录下的 CMakeLists.txt 内容如下\n\n```cmake\n# CMake 最低版本号要求\ncmake_minimum_required (VERSION 3.10)\n\n# 项目信息\nproject(Tutorial VERSION 1.0)\n\n# 查找当前目录下的所有源文件，并将名称保存到 DIR_SRCS 变量\n# 方法签名为：aux_source_directory(<dir> <variable>)\naux_source_directory(. DIR_SRCS)\n\n# 添加 math 子目录\nadd_subdirectory(math)\n\n# 指定生成目标 \nadd_executable(Tutorial main.cc)\n\n# 添加链接库\ntarget_link_libraries(Tutorial MathFunctions)\n```\n\nmath 目录下的 CMakeLists.txt 内容如下\n\n```cmake\n# 查找当前目录下的所有源文件，并将名称保存到 DIR_LIB_SRCS 变量\naux_source_directory(. DIR_LIB_SRCS)\n\n# 生成链接库\nadd_library(MathFunctions ${DIR_LIB_SRCS})\n```\n\n## 3. 编译选项\n\n### 3.1 设置版本\n\n在 CMakeLists.txt 文件里添加\n\n```cmake\n# 加入一个配置头文件，用于处理 CMake 对源码的设置\nconfigure_file(config.h.in config.h)\n\ntarget_include_directories(Tutorial PUBLIC\n                           \"${PROJECT_BINARY_DIR}\"\n                           )\n```\n\n创建 `config.h.in` 配置文件\n\n```cmake\n// the configured options and settings for Tutorial\n#define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@\n#define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@\n```\n\n在代码里使用参数选项\n\n```cpp\nif (argc < 2) {\n    // report version\n    std::cout << argv[0] << \" Version \" << Tutorial_VERSION_MAJOR << \".\"\n              << Tutorial_VERSION_MINOR << std::endl;\n    std::cout << \"Usage: \" << argv[0] << \" number\" << std::endl;\n    return 1;\n  }\n```\n\n### 3.2 自定义选项\n\nCMake 允许为项目增加编译选项，可以根据用户的环境和需求选择最合适的编译方案。\n\n首先在顶层 CMakeLists.txt 添加选项\n\n```cmake\n# CMake 最低版本号要求\ncmake_minimum_required (VERSION 3.10)\n\n# 项目信息\nproject(Tutorial VERSION 1.0)\n\n# 加入一个配置头文件，用于处理 CMake 对源码的设置\nconfigure_file (\n  \"${PROJECT_SOURCE_DIR}/config.h.in\"\n  \"${PROJECT_BINARY_DIR}/config.h\"\n  )\n\n# 是否使用自己的 MathFunctions 库\noption (USE_MYMATH\n       \"Use provided math implementation\" ON)\n\n# 是否加入 MathFunctions 库\nif (USE_MYMATH)\n  include_directories (\"${PROJECT_SOURCE_DIR}/math\")\n  add_subdirectory (math)  \n  set (EXTRA_LIBS ${EXTRA_LIBS} MathFunctions)\nendif (USE_MYMATH)\n\n# 查找当前目录下的所有源文件\n# 并将名称保存到 DIR_SRCS 变量\naux_source_directory(. DIR_SRCS)\n\n# 指定生成目标\nadd_executable(Tutorial ${DIR_SRCS})\ntarget_link_libraries (Tutorial  ${EXTRA_LIBS})\n```\n\n`config.h.in` 文件内容如下\n\n```cmake\n#cmakedefine USE_MYMATH\n```\n\n代码里，可以这么使用\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include \"config.h\"\n\n#ifdef USE_MYMATH\n  #include \"math/MathFunctions.h\"\n#else\n  #include <math.h>\n#endif\n\n\nint main(int argc, char *argv[])\n{\n    if (argc < 3){\n        printf(\"Usage: %s base exponent \\n\", argv[0]);\n        return 1;\n    }\n    double base = atof(argv[1]);\n    int exponent = atoi(argv[2]);\n    \n#ifdef USE_MYMATH\n    printf(\"Now we use our own Math library. \\n\");\n    double result = power(base, exponent);\n#else\n    printf(\"Now we use the standard library. \\n\");\n    double result = pow(base, exponent);\n#endif\n    printf(\"%g ^ %d is %g\\n\", base, exponent, result);\n    return 0;\n}\n```\n\n然后可以去编译执行一下看看效果，由于这是一个有选项的编译过程，可以用 ccmake 尝试一下。\n\n### 3.3 环境检查\n\n有时候可能要对系统环境做点检查，例如要使用一个平台相关的特性的时候。在这个例子中，我们检查系统是否自带 `pow` 函数。如果带有 `pow` 函数，就使用它；否则使用我们定义的 `power` 函数。\n\n首先在顶层 `CMakeLists` 文件中添加 `CheckFunctionExists.cmake` 宏，并调用 `check_function_exists` 命令测试链接器是否能够在链接阶段找到 `pow` 函数。\n\n```cmake\n# 检查系统是否支持 pow 函数\ninclude (${CMAKE_ROOT}/Modules/CheckFunctionExists.cmake)\ncheck_function_exists (pow HAVE_POW)\n```\n\n或者使用 `CheckSymbolExists` 的 `check_symbol_exists`检查\n\n```cmake\ninclude(CheckSymbolExists)\ncheck_symbol_exists(log \"math.h\" HAVE_LOG)\ncheck_symbol_exists(exp \"math.h\" HAVE_EXP)\nif(NOT (HAVE_LOG AND HAVE_EXP))\n  unset(HAVE_LOG CACHE)\n  unset(HAVE_EXP CACHE)\n  set(CMAKE_REQUIRED_LIBRARIES \"m\")\n  check_symbol_exists(log \"math.h\" HAVE_LOG)\n  check_symbol_exists(exp \"math.h\" HAVE_EXP)\n  if(HAVE_LOG AND HAVE_EXP)\n    target_link_libraries(MathFunctions PRIVATE m)\n  endif()\nendif()\n```\n\n将上面这段代码放在 configure_file 命令前。\n\n接下来修改 `config.h.in` 文件，预定义相关的宏变量。\n\n```cmake\n// does the platform provide pow function?\n#cmakedefine HAVE_POW\n```\n\n最后一步是修改 cpp 源代码 ，在代码中使用宏和函数：\n\n```cpp\n#ifdef HAVE_POW\n    printf(\"Now we use the standard library. \\n\");\n    double result = pow(base, exponent);\n#else\n    printf(\"Now we use our own Math library. \\n\");\n    double result = power(base, exponent);\n#endif\n```\n\n## 4. 测试\n\n添加测试同样很简单。`CMake` 提供了一个称为 `CTest` 的测试工具。我们要做的只是在项目根目录的 `CMakeLists` 文件中调用一系列的 `add_test` 命令。\n\n```cmake\n# 启用测试\nenable_testing()\n\n# 测试程序是否成功运行\nadd_test (test_run Demo 5 2)\n\n# 测试帮助信息是否可以正常提示\nadd_test (test_usage Tutorial)\nset_tests_properties (test_usage\n  PROPERTIES PASS_REGULAR_EXPRESSION \"Usage: .* base exponent\")\n\n# 测试 5 的平方\nadd_test (test_5_2 Tutorial 5 2)\n\nset_tests_properties (test_5_2\n PROPERTIES PASS_REGULAR_EXPRESSION \"is 25\")\n\n# 测试 10 的 5 次方\nadd_test (test_10_5 Tutorial 10 5)\n\nset_tests_properties (test_10_5\n PROPERTIES PASS_REGULAR_EXPRESSION \"is 100000\")\n\n# 测试 2 的 10 次方\nadd_test (test_2_10 Tutorial 2 10)\n\nset_tests_properties (test_2_10\n PROPERTIES PASS_REGULAR_EXPRESSION \"is 1024\")\n```\n\n其中，第一个测试 test_run 用来测试程序是否成功运行并返回 0 值。 `PASS_REGULAR_EXPRESSION` 用来测试输出是否包含后面跟着的字符串。\n\n上面的代码，可以简洁一点\n\n```cmake\n# 定义一个宏，用来简化测试工作\nmacro (do_test arg1 arg2 result)\n  add_test (test_${arg1}_${arg2} Tutorial ${arg1} ${arg2})\n  set_tests_properties (test_${arg1}_${arg2}\n    PROPERTIES PASS_REGULAR_EXPRESSION ${result})\nendmacro (do_test)\n \n# 使用该宏进行一系列的数据测试\ndo_test (5 2 \"is 25\")\ndo_test (10 5 \"is 100000\")\ndo_test (2 10 \"is 1024\")\n```\n\n**提示：** CTest 文档，可以查看`man 1 ctest`。\n\n## 5. 安装\n\n### 5.1 make 安装\n\n在 `CMakeLists.txt` 指定安装路径与头文件存放路径。对于子目录，比如 math，可以在子目录下的 `CMakeLists.txt`文件添加\n\n```cmake\n# 指定 MathFunctions 库的安装路径\ninstall (TARGETS MathFunctions DESTINATION bin)\ninstall (FILES MathFunctions.h DESTINATION include)\n```\n\n然后在顶层 `CMakeLists.txt`文件里添加\n\n```cmake\n# 指定安装路径\ninstall (TARGETS Demo DESTINATION bin)\ninstall (FILES \"${PROJECT_BINARY_DIR}/config.h\" DESTINATION include)\n```\n\n通过上面的定制，生成的 `Tutorial` 文件和 `MathFunctions` 函数库 `libMathFunctions.o` 文件将会被复制到 `/usr/local/bin` 中，而 `MathFunctions.h` 和生成的 `config.h` 文件则会被复制到 `/usr/local/include` 中。我们可以编译然后安装`sudo make install`验证一下（顺带一提的是，这里的 `/usr/local/` 是默认安装到的根目录，可以通过修改 `CMAKE_INSTALL_PREFIX` 变量的值来指定这些文件应该拷贝到哪个根目录）：\n\n### 5.2 生成安装包\n\n如何配置生成各种平台上的安装包，包括二进制安装包和源码安装包。为了完成这个任务，我们需要用到 CPack ，它同样也是由 CMake 提供的一个工具，专门用于打包。\n\n首先在顶层的 CMakeLists.txt 文件尾部添加下面几行：\n\n```cmake\n# 构建一个 CPack 安装包\ninclude (InstallRequiredSystemLibraries)\nset (CPACK_RESOURCE_FILE_LICENSE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/License.txt\")\nset (CPACK_PACKAGE_VERSION_MAJOR \"${Demo_VERSION_MAJOR}\")\nset (CPACK_PACKAGE_VERSION_MINOR \"${Demo_VERSION_MINOR}\")\ninclude (CPack)\n```\n\n然后编译，并执行 CPack 命令，生成二进制安装包\n\n```cmake\ncpack -C CPackConfig.cmake\n```\n\n或则生成源码安装包\n\n```cmake\ncpack -C CPackSourceConfig.cmake\n```\n\n命令执行后，会在该目录下生成安装包，可以通过如下命令安装\n\n```sh\nsh Tutorial-1.0.1-Linux.sh\n```\n\n此时会出现一个由 CPack 自动生成的交互式安装界面，按照提示操作就好。\n\n然后，就可以通过在终端验证该可执行程序\n\n```sh\n./Tutorial-1.0.1-Linux 5 2\n```\n\n## 6. 平台迁移\n\n可以将其他工具系列的项目迁移到 cmake 上来，具体参考[迁移到 cmake](https://gitlab.kitware.com/cmake/community/-/wikis/home#converters-from-other-buildsystems-to-cmake)\n\n## 7. 杂项\n\n### 7.1 CMake Language\n\n* 英文版：[CMake Language](https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#syntax)\n* 中文版：[CMake Language](https://vvingerfly.github.io/2018/04-15-CMakeLanguage/)\n\n### 7.2 [CMake 官方文档](https://cmake.org/cmake/help/v3.21/index.html)\n\n### 7.3 [CMake 社区文档](https://gitlab.kitware.com/cmake/community)\n\n### 7.4 [CMake 入门实战](https://www.hahack.com/codes/cmake/)\n\n### 7.5 [Cmake中文实战教程](https://brightxiaohan.github.io/CMakeTutorial/)\n\n### 7.6 [CMake 支持的变量](https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/Useful-Variables)\n\n## 8. 本文使用到的资源\n\nmain.cpp 源代码\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n\n/**\n * power - Calculate the power of number.\n * @param base: Base value.\n * @param exponent: Exponent value.\n *\n * @return base raised to the power exponent.\n */\ndouble power(double base, int exponent)\n{\n    int result = base;\n    int i;\n    \n    if (exponent == 0) {\n        return 1;\n    }\n    \n    for(i = 1; i < exponent; ++i){\n        result = result * base;\n    }\n\n    return result;\n}\n\nint main(int argc, char *argv[])\n{\n    if (argc < 3){\n        printf(\"Usage: %s base exponent \\n\", argv[0]);\n        return 1;\n    }\n    double base = atof(argv[1]);\n    int exponent = atoi(argv[2]);\n    double result = power(base, exponent);\n    printf(\"%g ^ %d is %g\\n\", base, exponent, result);\n    return 0;\n}\n```\n","source":"_posts/iOS/Languages/CAlians/CMake.md","raw":"---\ntitle: 编译工具 CMake 入门\nabbrlink: 56914\ndate: 2021-09-01 10:56:00\ntags:\n---\n\n[TOC]\n\ncmake 的用法，分为三步\n\n1. 编写 CMake 配置文件 CMakeLists.txt 。\n2. 执行命令 `cmake PATH` 或者 `ccmake PATH` 生成 Makefile。其中， PATH 是   CMakeLists.txt 所在的目录。\n3. 使用 `make` 命令进行编译。\n\n`ccmake` 和 `cmake` 的区别在于前者提供了一个交互式的界面。\n\n## 1. 设置项目\n\n### 1.1 设置名称与版本\n\n```cmake\ncmake_minimum_required(VERSION 3.10)\n\n# set the project name and version\nproject(Tutorial VERSION 1.0)\n\n# add the executable\nadd_executable(Tutorial tutorial.cxx)\n```\n\n### 1.2 设置 C++ 编译器环境\n\n比如可以这么设置 C++11\n\n```cmake\n# specify the C++ standard 11\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\n```\n\n### 1.3 设置 GDB\n\nCMake 支持 gdb 的设置，也很容易，只需要指定 Debug 模式下开启 -g 选项\n\n```cmake\nset(CMAKE_BUILD_TYPE \"Debug\")\nset(CMAKE_CXX_FLAGS_DEBUG \"$ENV{CXXFLAGS} -O0 -Wall -g -ggdb\")\nset(CMAKE_CXX_FLAGS_RELEASE \"$ENV{CXXFLAGS} -O3 -Wall\")\n```\n\n## 2. 编译多个目录多个文件\n\n例如工程文件目录如下：\n\n```shell\n./Tutorial\n    |\n    +--- main.cc\n    |\n    +--- math/\n          |\n          +--- MathFunctions.cc\n          |\n          +--- MathFunctions.h\n\n```\n\n首先需要在 Tutorial 文件夹和 math 文件夹下，分别建一个 CMakeLists.txt 文件，其中 Tutorial 目录下的 CMakeLists.txt 称为顶层 CMakeLists.txt。\n\nTutorial 目录下的 CMakeLists.txt 内容如下\n\n```cmake\n# CMake 最低版本号要求\ncmake_minimum_required (VERSION 3.10)\n\n# 项目信息\nproject(Tutorial VERSION 1.0)\n\n# 查找当前目录下的所有源文件，并将名称保存到 DIR_SRCS 变量\n# 方法签名为：aux_source_directory(<dir> <variable>)\naux_source_directory(. DIR_SRCS)\n\n# 添加 math 子目录\nadd_subdirectory(math)\n\n# 指定生成目标 \nadd_executable(Tutorial main.cc)\n\n# 添加链接库\ntarget_link_libraries(Tutorial MathFunctions)\n```\n\nmath 目录下的 CMakeLists.txt 内容如下\n\n```cmake\n# 查找当前目录下的所有源文件，并将名称保存到 DIR_LIB_SRCS 变量\naux_source_directory(. DIR_LIB_SRCS)\n\n# 生成链接库\nadd_library(MathFunctions ${DIR_LIB_SRCS})\n```\n\n## 3. 编译选项\n\n### 3.1 设置版本\n\n在 CMakeLists.txt 文件里添加\n\n```cmake\n# 加入一个配置头文件，用于处理 CMake 对源码的设置\nconfigure_file(config.h.in config.h)\n\ntarget_include_directories(Tutorial PUBLIC\n                           \"${PROJECT_BINARY_DIR}\"\n                           )\n```\n\n创建 `config.h.in` 配置文件\n\n```cmake\n// the configured options and settings for Tutorial\n#define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@\n#define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@\n```\n\n在代码里使用参数选项\n\n```cpp\nif (argc < 2) {\n    // report version\n    std::cout << argv[0] << \" Version \" << Tutorial_VERSION_MAJOR << \".\"\n              << Tutorial_VERSION_MINOR << std::endl;\n    std::cout << \"Usage: \" << argv[0] << \" number\" << std::endl;\n    return 1;\n  }\n```\n\n### 3.2 自定义选项\n\nCMake 允许为项目增加编译选项，可以根据用户的环境和需求选择最合适的编译方案。\n\n首先在顶层 CMakeLists.txt 添加选项\n\n```cmake\n# CMake 最低版本号要求\ncmake_minimum_required (VERSION 3.10)\n\n# 项目信息\nproject(Tutorial VERSION 1.0)\n\n# 加入一个配置头文件，用于处理 CMake 对源码的设置\nconfigure_file (\n  \"${PROJECT_SOURCE_DIR}/config.h.in\"\n  \"${PROJECT_BINARY_DIR}/config.h\"\n  )\n\n# 是否使用自己的 MathFunctions 库\noption (USE_MYMATH\n       \"Use provided math implementation\" ON)\n\n# 是否加入 MathFunctions 库\nif (USE_MYMATH)\n  include_directories (\"${PROJECT_SOURCE_DIR}/math\")\n  add_subdirectory (math)  \n  set (EXTRA_LIBS ${EXTRA_LIBS} MathFunctions)\nendif (USE_MYMATH)\n\n# 查找当前目录下的所有源文件\n# 并将名称保存到 DIR_SRCS 变量\naux_source_directory(. DIR_SRCS)\n\n# 指定生成目标\nadd_executable(Tutorial ${DIR_SRCS})\ntarget_link_libraries (Tutorial  ${EXTRA_LIBS})\n```\n\n`config.h.in` 文件内容如下\n\n```cmake\n#cmakedefine USE_MYMATH\n```\n\n代码里，可以这么使用\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include \"config.h\"\n\n#ifdef USE_MYMATH\n  #include \"math/MathFunctions.h\"\n#else\n  #include <math.h>\n#endif\n\n\nint main(int argc, char *argv[])\n{\n    if (argc < 3){\n        printf(\"Usage: %s base exponent \\n\", argv[0]);\n        return 1;\n    }\n    double base = atof(argv[1]);\n    int exponent = atoi(argv[2]);\n    \n#ifdef USE_MYMATH\n    printf(\"Now we use our own Math library. \\n\");\n    double result = power(base, exponent);\n#else\n    printf(\"Now we use the standard library. \\n\");\n    double result = pow(base, exponent);\n#endif\n    printf(\"%g ^ %d is %g\\n\", base, exponent, result);\n    return 0;\n}\n```\n\n然后可以去编译执行一下看看效果，由于这是一个有选项的编译过程，可以用 ccmake 尝试一下。\n\n### 3.3 环境检查\n\n有时候可能要对系统环境做点检查，例如要使用一个平台相关的特性的时候。在这个例子中，我们检查系统是否自带 `pow` 函数。如果带有 `pow` 函数，就使用它；否则使用我们定义的 `power` 函数。\n\n首先在顶层 `CMakeLists` 文件中添加 `CheckFunctionExists.cmake` 宏，并调用 `check_function_exists` 命令测试链接器是否能够在链接阶段找到 `pow` 函数。\n\n```cmake\n# 检查系统是否支持 pow 函数\ninclude (${CMAKE_ROOT}/Modules/CheckFunctionExists.cmake)\ncheck_function_exists (pow HAVE_POW)\n```\n\n或者使用 `CheckSymbolExists` 的 `check_symbol_exists`检查\n\n```cmake\ninclude(CheckSymbolExists)\ncheck_symbol_exists(log \"math.h\" HAVE_LOG)\ncheck_symbol_exists(exp \"math.h\" HAVE_EXP)\nif(NOT (HAVE_LOG AND HAVE_EXP))\n  unset(HAVE_LOG CACHE)\n  unset(HAVE_EXP CACHE)\n  set(CMAKE_REQUIRED_LIBRARIES \"m\")\n  check_symbol_exists(log \"math.h\" HAVE_LOG)\n  check_symbol_exists(exp \"math.h\" HAVE_EXP)\n  if(HAVE_LOG AND HAVE_EXP)\n    target_link_libraries(MathFunctions PRIVATE m)\n  endif()\nendif()\n```\n\n将上面这段代码放在 configure_file 命令前。\n\n接下来修改 `config.h.in` 文件，预定义相关的宏变量。\n\n```cmake\n// does the platform provide pow function?\n#cmakedefine HAVE_POW\n```\n\n最后一步是修改 cpp 源代码 ，在代码中使用宏和函数：\n\n```cpp\n#ifdef HAVE_POW\n    printf(\"Now we use the standard library. \\n\");\n    double result = pow(base, exponent);\n#else\n    printf(\"Now we use our own Math library. \\n\");\n    double result = power(base, exponent);\n#endif\n```\n\n## 4. 测试\n\n添加测试同样很简单。`CMake` 提供了一个称为 `CTest` 的测试工具。我们要做的只是在项目根目录的 `CMakeLists` 文件中调用一系列的 `add_test` 命令。\n\n```cmake\n# 启用测试\nenable_testing()\n\n# 测试程序是否成功运行\nadd_test (test_run Demo 5 2)\n\n# 测试帮助信息是否可以正常提示\nadd_test (test_usage Tutorial)\nset_tests_properties (test_usage\n  PROPERTIES PASS_REGULAR_EXPRESSION \"Usage: .* base exponent\")\n\n# 测试 5 的平方\nadd_test (test_5_2 Tutorial 5 2)\n\nset_tests_properties (test_5_2\n PROPERTIES PASS_REGULAR_EXPRESSION \"is 25\")\n\n# 测试 10 的 5 次方\nadd_test (test_10_5 Tutorial 10 5)\n\nset_tests_properties (test_10_5\n PROPERTIES PASS_REGULAR_EXPRESSION \"is 100000\")\n\n# 测试 2 的 10 次方\nadd_test (test_2_10 Tutorial 2 10)\n\nset_tests_properties (test_2_10\n PROPERTIES PASS_REGULAR_EXPRESSION \"is 1024\")\n```\n\n其中，第一个测试 test_run 用来测试程序是否成功运行并返回 0 值。 `PASS_REGULAR_EXPRESSION` 用来测试输出是否包含后面跟着的字符串。\n\n上面的代码，可以简洁一点\n\n```cmake\n# 定义一个宏，用来简化测试工作\nmacro (do_test arg1 arg2 result)\n  add_test (test_${arg1}_${arg2} Tutorial ${arg1} ${arg2})\n  set_tests_properties (test_${arg1}_${arg2}\n    PROPERTIES PASS_REGULAR_EXPRESSION ${result})\nendmacro (do_test)\n \n# 使用该宏进行一系列的数据测试\ndo_test (5 2 \"is 25\")\ndo_test (10 5 \"is 100000\")\ndo_test (2 10 \"is 1024\")\n```\n\n**提示：** CTest 文档，可以查看`man 1 ctest`。\n\n## 5. 安装\n\n### 5.1 make 安装\n\n在 `CMakeLists.txt` 指定安装路径与头文件存放路径。对于子目录，比如 math，可以在子目录下的 `CMakeLists.txt`文件添加\n\n```cmake\n# 指定 MathFunctions 库的安装路径\ninstall (TARGETS MathFunctions DESTINATION bin)\ninstall (FILES MathFunctions.h DESTINATION include)\n```\n\n然后在顶层 `CMakeLists.txt`文件里添加\n\n```cmake\n# 指定安装路径\ninstall (TARGETS Demo DESTINATION bin)\ninstall (FILES \"${PROJECT_BINARY_DIR}/config.h\" DESTINATION include)\n```\n\n通过上面的定制，生成的 `Tutorial` 文件和 `MathFunctions` 函数库 `libMathFunctions.o` 文件将会被复制到 `/usr/local/bin` 中，而 `MathFunctions.h` 和生成的 `config.h` 文件则会被复制到 `/usr/local/include` 中。我们可以编译然后安装`sudo make install`验证一下（顺带一提的是，这里的 `/usr/local/` 是默认安装到的根目录，可以通过修改 `CMAKE_INSTALL_PREFIX` 变量的值来指定这些文件应该拷贝到哪个根目录）：\n\n### 5.2 生成安装包\n\n如何配置生成各种平台上的安装包，包括二进制安装包和源码安装包。为了完成这个任务，我们需要用到 CPack ，它同样也是由 CMake 提供的一个工具，专门用于打包。\n\n首先在顶层的 CMakeLists.txt 文件尾部添加下面几行：\n\n```cmake\n# 构建一个 CPack 安装包\ninclude (InstallRequiredSystemLibraries)\nset (CPACK_RESOURCE_FILE_LICENSE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/License.txt\")\nset (CPACK_PACKAGE_VERSION_MAJOR \"${Demo_VERSION_MAJOR}\")\nset (CPACK_PACKAGE_VERSION_MINOR \"${Demo_VERSION_MINOR}\")\ninclude (CPack)\n```\n\n然后编译，并执行 CPack 命令，生成二进制安装包\n\n```cmake\ncpack -C CPackConfig.cmake\n```\n\n或则生成源码安装包\n\n```cmake\ncpack -C CPackSourceConfig.cmake\n```\n\n命令执行后，会在该目录下生成安装包，可以通过如下命令安装\n\n```sh\nsh Tutorial-1.0.1-Linux.sh\n```\n\n此时会出现一个由 CPack 自动生成的交互式安装界面，按照提示操作就好。\n\n然后，就可以通过在终端验证该可执行程序\n\n```sh\n./Tutorial-1.0.1-Linux 5 2\n```\n\n## 6. 平台迁移\n\n可以将其他工具系列的项目迁移到 cmake 上来，具体参考[迁移到 cmake](https://gitlab.kitware.com/cmake/community/-/wikis/home#converters-from-other-buildsystems-to-cmake)\n\n## 7. 杂项\n\n### 7.1 CMake Language\n\n* 英文版：[CMake Language](https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#syntax)\n* 中文版：[CMake Language](https://vvingerfly.github.io/2018/04-15-CMakeLanguage/)\n\n### 7.2 [CMake 官方文档](https://cmake.org/cmake/help/v3.21/index.html)\n\n### 7.3 [CMake 社区文档](https://gitlab.kitware.com/cmake/community)\n\n### 7.4 [CMake 入门实战](https://www.hahack.com/codes/cmake/)\n\n### 7.5 [Cmake中文实战教程](https://brightxiaohan.github.io/CMakeTutorial/)\n\n### 7.6 [CMake 支持的变量](https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/Useful-Variables)\n\n## 8. 本文使用到的资源\n\nmain.cpp 源代码\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n\n/**\n * power - Calculate the power of number.\n * @param base: Base value.\n * @param exponent: Exponent value.\n *\n * @return base raised to the power exponent.\n */\ndouble power(double base, int exponent)\n{\n    int result = base;\n    int i;\n    \n    if (exponent == 0) {\n        return 1;\n    }\n    \n    for(i = 1; i < exponent; ++i){\n        result = result * base;\n    }\n\n    return result;\n}\n\nint main(int argc, char *argv[])\n{\n    if (argc < 3){\n        printf(\"Usage: %s base exponent \\n\", argv[0]);\n        return 1;\n    }\n    double base = atof(argv[1]);\n    int exponent = atoi(argv[2]);\n    double result = power(base, exponent);\n    printf(\"%g ^ %d is %g\\n\", base, exponent, result);\n    return 0;\n}\n```\n","slug":"iOS/Languages/CAlians/CMake","published":1,"updated":"2021-09-22T06:56:40.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3d003giu9kcwkf3h4j","content":"<p>[TOC]</p>\n<p>cmake 的用法，分为三步</p>\n<ol>\n<li>编写 CMake 配置文件 CMakeLists.txt 。</li>\n<li>执行命令 <code>cmake PATH</code> 或者 <code>ccmake PATH</code> 生成 Makefile。其中， PATH 是   CMakeLists.txt 所在的目录。</li>\n<li>使用 <code>make</code> 命令进行编译。</li>\n</ol>\n<p><code>ccmake</code> 和 <code>cmake</code> 的区别在于前者提供了一个交互式的界面。</p>\n<h2 id=\"1-设置项目\"><a href=\"#1-设置项目\" class=\"headerlink\" title=\"1. 设置项目\"></a>1. 设置项目</h2><h3 id=\"1-1-设置名称与版本\"><a href=\"#1-1-设置名称与版本\" class=\"headerlink\" title=\"1.1 设置名称与版本\"></a>1.1 设置名称与版本</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set the project name and version</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(Tutorial VERSION <span class=\"number\">1.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add the executable</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(Tutorial tutorial.cxx)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-设置-C-编译器环境\"><a href=\"#1-2-设置-C-编译器环境\" class=\"headerlink\" title=\"1.2 设置 C++ 编译器环境\"></a>1.2 设置 C++ 编译器环境</h3><p>比如可以这么设置 C++11</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># specify the C++ standard 11</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_STANDARD <span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-设置-GDB\"><a href=\"#1-3-设置-GDB\" class=\"headerlink\" title=\"1.3 设置 GDB\"></a>1.3 设置 GDB</h3><p>CMake 支持 gdb 的设置，也很容易，只需要指定 Debug 模式下开启 -g 选项</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_BUILD_TYPE <span class=\"string\">&quot;Debug&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_FLAGS_DEBUG <span class=\"string\">&quot;$ENV&#123;CXXFLAGS&#125; -O0 -Wall -g -ggdb&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_FLAGS_RELEASE <span class=\"string\">&quot;$ENV&#123;CXXFLAGS&#125; -O3 -Wall&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-编译多个目录多个文件\"><a href=\"#2-编译多个目录多个文件\" class=\"headerlink\" title=\"2. 编译多个目录多个文件\"></a>2. 编译多个目录多个文件</h2><p>例如工程文件目录如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Tutorial</span><br><span class=\"line\">    |</span><br><span class=\"line\">    +--- main.cc</span><br><span class=\"line\">    |</span><br><span class=\"line\">    +--- math/</span><br><span class=\"line\">          |</span><br><span class=\"line\">          +--- MathFunctions.cc</span><br><span class=\"line\">          |</span><br><span class=\"line\">          +--- MathFunctions.h</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>首先需要在 Tutorial 文件夹和 math 文件夹下，分别建一个 CMakeLists.txt 文件，其中 Tutorial 目录下的 CMakeLists.txt 称为顶层 CMakeLists.txt。</p>\n<p>Tutorial 目录下的 CMakeLists.txt 内容如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CMake 最低版本号要求</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span> (VERSION <span class=\"number\">3.10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目信息</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(Tutorial VERSION <span class=\"number\">1.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找当前目录下的所有源文件，并将名称保存到 DIR_SRCS 变量</span></span><br><span class=\"line\"><span class=\"comment\"># 方法签名为：aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(. DIR_SRCS)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 math 子目录</span></span><br><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>(<span class=\"keyword\">math</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定生成目标 </span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(Tutorial main.cc)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加链接库</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(Tutorial MathFunctions)</span><br></pre></td></tr></table></figure>\n\n<p>math 目录下的 CMakeLists.txt 内容如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找当前目录下的所有源文件，并将名称保存到 DIR_LIB_SRCS 变量</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(. DIR_LIB_SRCS)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成链接库</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(MathFunctions <span class=\"variable\">$&#123;DIR_LIB_SRCS&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-编译选项\"><a href=\"#3-编译选项\" class=\"headerlink\" title=\"3. 编译选项\"></a>3. 编译选项</h2><h3 id=\"3-1-设置版本\"><a href=\"#3-1-设置版本\" class=\"headerlink\" title=\"3.1 设置版本\"></a>3.1 设置版本</h3><p>在 CMakeLists.txt 文件里添加</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 加入一个配置头文件，用于处理 CMake 对源码的设置</span></span><br><span class=\"line\"><span class=\"keyword\">configure_file</span>(config.h.in config.h)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">target_include_directories</span>(Tutorial PUBLIC</span><br><span class=\"line\">                           <span class=\"string\">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span></span><br><span class=\"line\">                           )</span><br></pre></td></tr></table></figure>\n\n<p>创建 <code>config.h.in</code> 配置文件</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// the configured options <span class=\"keyword\">and</span> settings for Tutorial</span><br><span class=\"line\"><span class=\"comment\">#define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@</span></span><br><span class=\"line\"><span class=\"comment\">#define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@</span></span><br></pre></td></tr></table></figure>\n\n<p>在代码里使用参数选项</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// report version</span></span><br><span class=\"line\">    std::cout &lt;&lt; argv[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">&quot; Version &quot;</span> &lt;&lt; Tutorial_VERSION_MAJOR &lt;&lt; <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">              &lt;&lt; Tutorial_VERSION_MINOR &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">&quot; number&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-自定义选项\"><a href=\"#3-2-自定义选项\" class=\"headerlink\" title=\"3.2 自定义选项\"></a>3.2 自定义选项</h3><p>CMake 允许为项目增加编译选项，可以根据用户的环境和需求选择最合适的编译方案。</p>\n<p>首先在顶层 CMakeLists.txt 添加选项</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CMake 最低版本号要求</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span> (VERSION <span class=\"number\">3.10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目信息</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(Tutorial VERSION <span class=\"number\">1.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加入一个配置头文件，用于处理 CMake 对源码的设置</span></span><br><span class=\"line\"><span class=\"keyword\">configure_file</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/config.h.in&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;$&#123;PROJECT_BINARY_DIR&#125;/config.h&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否使用自己的 MathFunctions 库</span></span><br><span class=\"line\"><span class=\"keyword\">option</span> (USE_MYMATH</span><br><span class=\"line\">       <span class=\"string\">&quot;Use provided math implementation&quot;</span> <span class=\"keyword\">ON</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否加入 MathFunctions 库</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (USE_MYMATH)</span><br><span class=\"line\">  <span class=\"keyword\">include_directories</span> (<span class=\"string\">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/math&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">add_subdirectory</span> (<span class=\"keyword\">math</span>)  </span><br><span class=\"line\">  <span class=\"keyword\">set</span> (EXTRA_LIBS <span class=\"variable\">$&#123;EXTRA_LIBS&#125;</span> MathFunctions)</span><br><span class=\"line\"><span class=\"keyword\">endif</span> (USE_MYMATH)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找当前目录下的所有源文件</span></span><br><span class=\"line\"><span class=\"comment\"># 并将名称保存到 DIR_SRCS 变量</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(. DIR_SRCS)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定生成目标</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(Tutorial <span class=\"variable\">$&#123;DIR_SRCS&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span> (Tutorial  <span class=\"variable\">$&#123;EXTRA_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>config.h.in</code> 文件内容如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cmakedefine USE_MYMATH</span></span><br></pre></td></tr></table></figure>\n\n<p>代码里，可以这么使用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;config.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> USE_MYMATH</span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;math/MathFunctions.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Usage: %s base exponent \\n&quot;</span>, argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> base = <span class=\"built_in\">atof</span>(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> exponent = <span class=\"built_in\">atoi</span>(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> USE_MYMATH</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Now we use our own Math library. \\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"built_in\">power</span>(base, exponent);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Now we use the standard library. \\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"built_in\">pow</span>(base, exponent);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%g ^ %d is %g\\n&quot;</span>, base, exponent, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后可以去编译执行一下看看效果，由于这是一个有选项的编译过程，可以用 ccmake 尝试一下。</p>\n<h3 id=\"3-3-环境检查\"><a href=\"#3-3-环境检查\" class=\"headerlink\" title=\"3.3 环境检查\"></a>3.3 环境检查</h3><p>有时候可能要对系统环境做点检查，例如要使用一个平台相关的特性的时候。在这个例子中，我们检查系统是否自带 <code>pow</code> 函数。如果带有 <code>pow</code> 函数，就使用它；否则使用我们定义的 <code>power</code> 函数。</p>\n<p>首先在顶层 <code>CMakeLists</code> 文件中添加 <code>CheckFunctionExists.cmake</code> 宏，并调用 <code>check_function_exists</code> 命令测试链接器是否能够在链接阶段找到 <code>pow</code> 函数。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查系统是否支持 pow 函数</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> (<span class=\"variable\">$&#123;CMAKE_ROOT&#125;</span>/Modules/CheckFunctionExists.cmake)</span><br><span class=\"line\">check_function_exists (pow HAVE_POW)</span><br></pre></td></tr></table></figure>\n\n<p>或者使用 <code>CheckSymbolExists</code> 的 <code>check_symbol_exists</code>检查</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>(CheckSymbolExists)</span><br><span class=\"line\">check_symbol_exists(log <span class=\"string\">&quot;math.h&quot;</span> HAVE_LOG)</span><br><span class=\"line\">check_symbol_exists(exp <span class=\"string\">&quot;math.h&quot;</span> HAVE_EXP)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> (HAVE_LOG <span class=\"keyword\">AND</span> HAVE_EXP))</span><br><span class=\"line\">  <span class=\"keyword\">unset</span>(HAVE_LOG CACHE)</span><br><span class=\"line\">  <span class=\"keyword\">unset</span>(HAVE_EXP CACHE)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(CMAKE_REQUIRED_LIBRARIES <span class=\"string\">&quot;m&quot;</span>)</span><br><span class=\"line\">  check_symbol_exists(log <span class=\"string\">&quot;math.h&quot;</span> HAVE_LOG)</span><br><span class=\"line\">  check_symbol_exists(exp <span class=\"string\">&quot;math.h&quot;</span> HAVE_EXP)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(HAVE_LOG <span class=\"keyword\">AND</span> HAVE_EXP)</span><br><span class=\"line\">    <span class=\"keyword\">target_link_libraries</span>(MathFunctions PRIVATE m)</span><br><span class=\"line\">  <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure>\n\n<p>将上面这段代码放在 configure_file 命令前。</p>\n<p>接下来修改 <code>config.h.in</code> 文件，预定义相关的宏变量。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// does the platform provide pow <span class=\"keyword\">function</span>?</span><br><span class=\"line\"><span class=\"comment\">#cmakedefine HAVE_POW</span></span><br></pre></td></tr></table></figure>\n\n<p>最后一步是修改 cpp 源代码 ，在代码中使用宏和函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_POW</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Now we use the standard library. \\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"built_in\">pow</span>(base, exponent);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Now we use our own Math library. \\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"built_in\">power</span>(base, exponent);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h2><p>添加测试同样很简单。<code>CMake</code> 提供了一个称为 <code>CTest</code> 的测试工具。我们要做的只是在项目根目录的 <code>CMakeLists</code> 文件中调用一系列的 <code>add_test</code> 命令。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启用测试</span></span><br><span class=\"line\"><span class=\"keyword\">enable_testing</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试程序是否成功运行</span></span><br><span class=\"line\"><span class=\"keyword\">add_test</span> (test_run Demo <span class=\"number\">5</span> <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试帮助信息是否可以正常提示</span></span><br><span class=\"line\"><span class=\"keyword\">add_test</span> (test_usage Tutorial)</span><br><span class=\"line\"><span class=\"keyword\">set_tests_properties</span> (test_usage</span><br><span class=\"line\">  PROPERTIES PASS_REGULAR_EXPRESSION <span class=\"string\">&quot;Usage: .* base exponent&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试 5 的平方</span></span><br><span class=\"line\"><span class=\"keyword\">add_test</span> (test_5_2 Tutorial <span class=\"number\">5</span> <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set_tests_properties</span> (test_5_2</span><br><span class=\"line\"> PROPERTIES PASS_REGULAR_EXPRESSION <span class=\"string\">&quot;is 25&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试 10 的 5 次方</span></span><br><span class=\"line\"><span class=\"keyword\">add_test</span> (test_10_5 Tutorial <span class=\"number\">10</span> <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set_tests_properties</span> (test_10_5</span><br><span class=\"line\"> PROPERTIES PASS_REGULAR_EXPRESSION <span class=\"string\">&quot;is 100000&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试 2 的 10 次方</span></span><br><span class=\"line\"><span class=\"keyword\">add_test</span> (test_2_10 Tutorial <span class=\"number\">2</span> <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set_tests_properties</span> (test_2_10</span><br><span class=\"line\"> PROPERTIES PASS_REGULAR_EXPRESSION <span class=\"string\">&quot;is 1024&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其中，第一个测试 test_run 用来测试程序是否成功运行并返回 0 值。 <code>PASS_REGULAR_EXPRESSION</code> 用来测试输出是否包含后面跟着的字符串。</p>\n<p>上面的代码，可以简洁一点</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个宏，用来简化测试工作</span></span><br><span class=\"line\"><span class=\"keyword\">macro</span> (do_test arg1 arg2 result)</span><br><span class=\"line\">  <span class=\"keyword\">add_test</span> (test_<span class=\"variable\">$&#123;arg1&#125;</span>_<span class=\"variable\">$&#123;arg2&#125;</span> Tutorial <span class=\"variable\">$&#123;arg1&#125;</span> <span class=\"variable\">$&#123;arg2&#125;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">set_tests_properties</span> (test_<span class=\"variable\">$&#123;arg1&#125;</span>_<span class=\"variable\">$&#123;arg2&#125;</span></span><br><span class=\"line\">    PROPERTIES PASS_REGULAR_EXPRESSION <span class=\"variable\">$&#123;result&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endmacro</span> (do_test)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 使用该宏进行一系列的数据测试</span></span><br><span class=\"line\">do_test (<span class=\"number\">5</span> <span class=\"number\">2</span> <span class=\"string\">&quot;is 25&quot;</span>)</span><br><span class=\"line\">do_test (<span class=\"number\">10</span> <span class=\"number\">5</span> <span class=\"string\">&quot;is 100000&quot;</span>)</span><br><span class=\"line\">do_test (<span class=\"number\">2</span> <span class=\"number\">10</span> <span class=\"string\">&quot;is 1024&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong> CTest 文档，可以查看<code>man 1 ctest</code>。</p>\n<h2 id=\"5-安装\"><a href=\"#5-安装\" class=\"headerlink\" title=\"5. 安装\"></a>5. 安装</h2><h3 id=\"5-1-make-安装\"><a href=\"#5-1-make-安装\" class=\"headerlink\" title=\"5.1 make 安装\"></a>5.1 make 安装</h3><p>在 <code>CMakeLists.txt</code> 指定安装路径与头文件存放路径。对于子目录，比如 math，可以在子目录下的 <code>CMakeLists.txt</code>文件添加</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定 MathFunctions 库的安装路径</span></span><br><span class=\"line\"><span class=\"keyword\">install</span> (TARGETS MathFunctions DESTINATION bin)</span><br><span class=\"line\"><span class=\"keyword\">install</span> (FILES MathFunctions.h DESTINATION <span class=\"keyword\">include</span>)</span><br></pre></td></tr></table></figure>\n\n<p>然后在顶层 <code>CMakeLists.txt</code>文件里添加</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定安装路径</span></span><br><span class=\"line\"><span class=\"keyword\">install</span> (TARGETS Demo DESTINATION bin)</span><br><span class=\"line\"><span class=\"keyword\">install</span> (FILES <span class=\"string\">&quot;$&#123;PROJECT_BINARY_DIR&#125;/config.h&quot;</span> DESTINATION <span class=\"keyword\">include</span>)</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的定制，生成的 <code>Tutorial</code> 文件和 <code>MathFunctions</code> 函数库 <code>libMathFunctions.o</code> 文件将会被复制到 <code>/usr/local/bin</code> 中，而 <code>MathFunctions.h</code> 和生成的 <code>config.h</code> 文件则会被复制到 <code>/usr/local/include</code> 中。我们可以编译然后安装<code>sudo make install</code>验证一下（顺带一提的是，这里的 <code>/usr/local/</code> 是默认安装到的根目录，可以通过修改 <code>CMAKE_INSTALL_PREFIX</code> 变量的值来指定这些文件应该拷贝到哪个根目录）：</p>\n<h3 id=\"5-2-生成安装包\"><a href=\"#5-2-生成安装包\" class=\"headerlink\" title=\"5.2 生成安装包\"></a>5.2 生成安装包</h3><p>如何配置生成各种平台上的安装包，包括二进制安装包和源码安装包。为了完成这个任务，我们需要用到 CPack ，它同样也是由 CMake 提供的一个工具，专门用于打包。</p>\n<p>首先在顶层的 CMakeLists.txt 文件尾部添加下面几行：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建一个 CPack 安装包</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> (InstallRequiredSystemLibraries)</span><br><span class=\"line\"><span class=\"keyword\">set</span> (CPACK_RESOURCE_FILE_LICENSE</span><br><span class=\"line\">  <span class=\"string\">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/License.txt&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span> (CPACK_PACKAGE_VERSION_MAJOR <span class=\"string\">&quot;$&#123;Demo_VERSION_MAJOR&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span> (CPACK_PACKAGE_VERSION_MINOR <span class=\"string\">&quot;$&#123;Demo_VERSION_MINOR&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">include</span> (CPack)</span><br></pre></td></tr></table></figure>\n\n<p>然后编译，并执行 CPack 命令，生成二进制安装包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpack -C CPackConfig.cmake</span><br></pre></td></tr></table></figure>\n\n<p>或则生成源码安装包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpack -C CPackSourceConfig.cmake</span><br></pre></td></tr></table></figure>\n\n<p>命令执行后，会在该目录下生成安装包，可以通过如下命令安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh Tutorial-1.0.1-Linux.sh</span><br></pre></td></tr></table></figure>\n\n<p>此时会出现一个由 CPack 自动生成的交互式安装界面，按照提示操作就好。</p>\n<p>然后，就可以通过在终端验证该可执行程序</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Tutorial-1.0.1-Linux 5 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-平台迁移\"><a href=\"#6-平台迁移\" class=\"headerlink\" title=\"6. 平台迁移\"></a>6. 平台迁移</h2><p>可以将其他工具系列的项目迁移到 cmake 上来，具体参考<a href=\"https://gitlab.kitware.com/cmake/community/-/wikis/home#converters-from-other-buildsystems-to-cmake\">迁移到 cmake</a></p>\n<h2 id=\"7-杂项\"><a href=\"#7-杂项\" class=\"headerlink\" title=\"7. 杂项\"></a>7. 杂项</h2><h3 id=\"7-1-CMake-Language\"><a href=\"#7-1-CMake-Language\" class=\"headerlink\" title=\"7.1 CMake Language\"></a>7.1 CMake Language</h3><ul>\n<li>英文版：<a href=\"https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#syntax\">CMake Language</a></li>\n<li>中文版：<a href=\"https://vvingerfly.github.io/2018/04-15-CMakeLanguage/\">CMake Language</a></li>\n</ul>\n<h3 id=\"7-2-CMake-官方文档\"><a href=\"#7-2-CMake-官方文档\" class=\"headerlink\" title=\"7.2 CMake 官方文档\"></a>7.2 <a href=\"https://cmake.org/cmake/help/v3.21/index.html\">CMake 官方文档</a></h3><h3 id=\"7-3-CMake-社区文档\"><a href=\"#7-3-CMake-社区文档\" class=\"headerlink\" title=\"7.3 CMake 社区文档\"></a>7.3 <a href=\"https://gitlab.kitware.com/cmake/community\">CMake 社区文档</a></h3><h3 id=\"7-4-CMake-入门实战\"><a href=\"#7-4-CMake-入门实战\" class=\"headerlink\" title=\"7.4 CMake 入门实战\"></a>7.4 <a href=\"https://www.hahack.com/codes/cmake/\">CMake 入门实战</a></h3><h3 id=\"7-5-Cmake中文实战教程\"><a href=\"#7-5-Cmake中文实战教程\" class=\"headerlink\" title=\"7.5 Cmake中文实战教程\"></a>7.5 <a href=\"https://brightxiaohan.github.io/CMakeTutorial/\">Cmake中文实战教程</a></h3><h3 id=\"7-6-CMake-支持的变量\"><a href=\"#7-6-CMake-支持的变量\" class=\"headerlink\" title=\"7.6 CMake 支持的变量\"></a>7.6 <a href=\"https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/Useful-Variables\">CMake 支持的变量</a></h3><h2 id=\"8-本文使用到的资源\"><a href=\"#8-本文使用到的资源\" class=\"headerlink\" title=\"8. 本文使用到的资源\"></a>8. 本文使用到的资源</h2><p>main.cpp 源代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * power - Calculate the power of number.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param base: Base value.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param exponent: Exponent value.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @return base raised to the power exponent.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">double</span> base, <span class=\"keyword\">int</span> exponent)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = base;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exponent == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt; exponent; ++i)&#123;</span><br><span class=\"line\">        result = result * base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Usage: %s base exponent \\n&quot;</span>, argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> base = <span class=\"built_in\">atof</span>(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> exponent = <span class=\"built_in\">atoi</span>(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"built_in\">power</span>(base, exponent);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%g ^ %d is %g\\n&quot;</span>, base, exponent, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<p>cmake 的用法，分为三步</p>\n<ol>\n<li>编写 CMake 配置文件 CMakeLists.txt 。</li>\n<li>执行命令 <code>cmake PATH</code> 或者 <code>ccmake PATH</code> 生成 Makefile。其中， PATH 是   CMakeLists.txt 所在的目录。</li>\n<li>使用 <code>make</code> 命令进行编译。</li>\n</ol>\n<p><code>ccmake</code> 和 <code>cmake</code> 的区别在于前者提供了一个交互式的界面。</p>\n<h2 id=\"1-设置项目\"><a href=\"#1-设置项目\" class=\"headerlink\" title=\"1. 设置项目\"></a>1. 设置项目</h2><h3 id=\"1-1-设置名称与版本\"><a href=\"#1-1-设置名称与版本\" class=\"headerlink\" title=\"1.1 设置名称与版本\"></a>1.1 设置名称与版本</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set the project name and version</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(Tutorial VERSION <span class=\"number\">1.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add the executable</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(Tutorial tutorial.cxx)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-设置-C-编译器环境\"><a href=\"#1-2-设置-C-编译器环境\" class=\"headerlink\" title=\"1.2 设置 C++ 编译器环境\"></a>1.2 设置 C++ 编译器环境</h3><p>比如可以这么设置 C++11</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># specify the C++ standard 11</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_STANDARD <span class=\"number\">11</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-设置-GDB\"><a href=\"#1-3-设置-GDB\" class=\"headerlink\" title=\"1.3 设置 GDB\"></a>1.3 设置 GDB</h3><p>CMake 支持 gdb 的设置，也很容易，只需要指定 Debug 模式下开启 -g 选项</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_BUILD_TYPE <span class=\"string\">&quot;Debug&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_FLAGS_DEBUG <span class=\"string\">&quot;$ENV&#123;CXXFLAGS&#125; -O0 -Wall -g -ggdb&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_FLAGS_RELEASE <span class=\"string\">&quot;$ENV&#123;CXXFLAGS&#125; -O3 -Wall&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-编译多个目录多个文件\"><a href=\"#2-编译多个目录多个文件\" class=\"headerlink\" title=\"2. 编译多个目录多个文件\"></a>2. 编译多个目录多个文件</h2><p>例如工程文件目录如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Tutorial</span><br><span class=\"line\">    |</span><br><span class=\"line\">    +--- main.cc</span><br><span class=\"line\">    |</span><br><span class=\"line\">    +--- math/</span><br><span class=\"line\">          |</span><br><span class=\"line\">          +--- MathFunctions.cc</span><br><span class=\"line\">          |</span><br><span class=\"line\">          +--- MathFunctions.h</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>首先需要在 Tutorial 文件夹和 math 文件夹下，分别建一个 CMakeLists.txt 文件，其中 Tutorial 目录下的 CMakeLists.txt 称为顶层 CMakeLists.txt。</p>\n<p>Tutorial 目录下的 CMakeLists.txt 内容如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CMake 最低版本号要求</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span> (VERSION <span class=\"number\">3.10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目信息</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(Tutorial VERSION <span class=\"number\">1.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找当前目录下的所有源文件，并将名称保存到 DIR_SRCS 变量</span></span><br><span class=\"line\"><span class=\"comment\"># 方法签名为：aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(. DIR_SRCS)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 math 子目录</span></span><br><span class=\"line\"><span class=\"keyword\">add_subdirectory</span>(<span class=\"keyword\">math</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定生成目标 </span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(Tutorial main.cc)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加链接库</span></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(Tutorial MathFunctions)</span><br></pre></td></tr></table></figure>\n\n<p>math 目录下的 CMakeLists.txt 内容如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找当前目录下的所有源文件，并将名称保存到 DIR_LIB_SRCS 变量</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(. DIR_LIB_SRCS)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成链接库</span></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(MathFunctions <span class=\"variable\">$&#123;DIR_LIB_SRCS&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-编译选项\"><a href=\"#3-编译选项\" class=\"headerlink\" title=\"3. 编译选项\"></a>3. 编译选项</h2><h3 id=\"3-1-设置版本\"><a href=\"#3-1-设置版本\" class=\"headerlink\" title=\"3.1 设置版本\"></a>3.1 设置版本</h3><p>在 CMakeLists.txt 文件里添加</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 加入一个配置头文件，用于处理 CMake 对源码的设置</span></span><br><span class=\"line\"><span class=\"keyword\">configure_file</span>(config.h.in config.h)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">target_include_directories</span>(Tutorial PUBLIC</span><br><span class=\"line\">                           <span class=\"string\">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span></span><br><span class=\"line\">                           )</span><br></pre></td></tr></table></figure>\n\n<p>创建 <code>config.h.in</code> 配置文件</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// the configured options <span class=\"keyword\">and</span> settings for Tutorial</span><br><span class=\"line\"><span class=\"comment\">#define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@</span></span><br><span class=\"line\"><span class=\"comment\">#define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@</span></span><br></pre></td></tr></table></figure>\n\n<p>在代码里使用参数选项</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// report version</span></span><br><span class=\"line\">    std::cout &lt;&lt; argv[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">&quot; Version &quot;</span> &lt;&lt; Tutorial_VERSION_MAJOR &lt;&lt; <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">              &lt;&lt; Tutorial_VERSION_MINOR &lt;&lt; std::endl;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Usage: &quot;</span> &lt;&lt; argv[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">&quot; number&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-自定义选项\"><a href=\"#3-2-自定义选项\" class=\"headerlink\" title=\"3.2 自定义选项\"></a>3.2 自定义选项</h3><p>CMake 允许为项目增加编译选项，可以根据用户的环境和需求选择最合适的编译方案。</p>\n<p>首先在顶层 CMakeLists.txt 添加选项</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># CMake 最低版本号要求</span></span><br><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span> (VERSION <span class=\"number\">3.10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目信息</span></span><br><span class=\"line\"><span class=\"keyword\">project</span>(Tutorial VERSION <span class=\"number\">1.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加入一个配置头文件，用于处理 CMake 对源码的设置</span></span><br><span class=\"line\"><span class=\"keyword\">configure_file</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/config.h.in&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;$&#123;PROJECT_BINARY_DIR&#125;/config.h&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否使用自己的 MathFunctions 库</span></span><br><span class=\"line\"><span class=\"keyword\">option</span> (USE_MYMATH</span><br><span class=\"line\">       <span class=\"string\">&quot;Use provided math implementation&quot;</span> <span class=\"keyword\">ON</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否加入 MathFunctions 库</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (USE_MYMATH)</span><br><span class=\"line\">  <span class=\"keyword\">include_directories</span> (<span class=\"string\">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/math&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">add_subdirectory</span> (<span class=\"keyword\">math</span>)  </span><br><span class=\"line\">  <span class=\"keyword\">set</span> (EXTRA_LIBS <span class=\"variable\">$&#123;EXTRA_LIBS&#125;</span> MathFunctions)</span><br><span class=\"line\"><span class=\"keyword\">endif</span> (USE_MYMATH)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找当前目录下的所有源文件</span></span><br><span class=\"line\"><span class=\"comment\"># 并将名称保存到 DIR_SRCS 变量</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(. DIR_SRCS)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定生成目标</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(Tutorial <span class=\"variable\">$&#123;DIR_SRCS&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span> (Tutorial  <span class=\"variable\">$&#123;EXTRA_LIBS&#125;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>config.h.in</code> 文件内容如下</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cmakedefine USE_MYMATH</span></span><br></pre></td></tr></table></figure>\n\n<p>代码里，可以这么使用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;config.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> USE_MYMATH</span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;math/MathFunctions.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Usage: %s base exponent \\n&quot;</span>, argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> base = <span class=\"built_in\">atof</span>(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> exponent = <span class=\"built_in\">atoi</span>(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> USE_MYMATH</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Now we use our own Math library. \\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"built_in\">power</span>(base, exponent);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Now we use the standard library. \\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"built_in\">pow</span>(base, exponent);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%g ^ %d is %g\\n&quot;</span>, base, exponent, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后可以去编译执行一下看看效果，由于这是一个有选项的编译过程，可以用 ccmake 尝试一下。</p>\n<h3 id=\"3-3-环境检查\"><a href=\"#3-3-环境检查\" class=\"headerlink\" title=\"3.3 环境检查\"></a>3.3 环境检查</h3><p>有时候可能要对系统环境做点检查，例如要使用一个平台相关的特性的时候。在这个例子中，我们检查系统是否自带 <code>pow</code> 函数。如果带有 <code>pow</code> 函数，就使用它；否则使用我们定义的 <code>power</code> 函数。</p>\n<p>首先在顶层 <code>CMakeLists</code> 文件中添加 <code>CheckFunctionExists.cmake</code> 宏，并调用 <code>check_function_exists</code> 命令测试链接器是否能够在链接阶段找到 <code>pow</code> 函数。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查系统是否支持 pow 函数</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> (<span class=\"variable\">$&#123;CMAKE_ROOT&#125;</span>/Modules/CheckFunctionExists.cmake)</span><br><span class=\"line\">check_function_exists (pow HAVE_POW)</span><br></pre></td></tr></table></figure>\n\n<p>或者使用 <code>CheckSymbolExists</code> 的 <code>check_symbol_exists</code>检查</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">include</span>(CheckSymbolExists)</span><br><span class=\"line\">check_symbol_exists(log <span class=\"string\">&quot;math.h&quot;</span> HAVE_LOG)</span><br><span class=\"line\">check_symbol_exists(exp <span class=\"string\">&quot;math.h&quot;</span> HAVE_EXP)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> (HAVE_LOG <span class=\"keyword\">AND</span> HAVE_EXP))</span><br><span class=\"line\">  <span class=\"keyword\">unset</span>(HAVE_LOG CACHE)</span><br><span class=\"line\">  <span class=\"keyword\">unset</span>(HAVE_EXP CACHE)</span><br><span class=\"line\">  <span class=\"keyword\">set</span>(CMAKE_REQUIRED_LIBRARIES <span class=\"string\">&quot;m&quot;</span>)</span><br><span class=\"line\">  check_symbol_exists(log <span class=\"string\">&quot;math.h&quot;</span> HAVE_LOG)</span><br><span class=\"line\">  check_symbol_exists(exp <span class=\"string\">&quot;math.h&quot;</span> HAVE_EXP)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(HAVE_LOG <span class=\"keyword\">AND</span> HAVE_EXP)</span><br><span class=\"line\">    <span class=\"keyword\">target_link_libraries</span>(MathFunctions PRIVATE m)</span><br><span class=\"line\">  <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br></pre></td></tr></table></figure>\n\n<p>将上面这段代码放在 configure_file 命令前。</p>\n<p>接下来修改 <code>config.h.in</code> 文件，预定义相关的宏变量。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// does the platform provide pow <span class=\"keyword\">function</span>?</span><br><span class=\"line\"><span class=\"comment\">#cmakedefine HAVE_POW</span></span><br></pre></td></tr></table></figure>\n\n<p>最后一步是修改 cpp 源代码 ，在代码中使用宏和函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> HAVE_POW</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Now we use the standard library. \\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"built_in\">pow</span>(base, exponent);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Now we use our own Math library. \\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"built_in\">power</span>(base, exponent);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h2><p>添加测试同样很简单。<code>CMake</code> 提供了一个称为 <code>CTest</code> 的测试工具。我们要做的只是在项目根目录的 <code>CMakeLists</code> 文件中调用一系列的 <code>add_test</code> 命令。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启用测试</span></span><br><span class=\"line\"><span class=\"keyword\">enable_testing</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试程序是否成功运行</span></span><br><span class=\"line\"><span class=\"keyword\">add_test</span> (test_run Demo <span class=\"number\">5</span> <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试帮助信息是否可以正常提示</span></span><br><span class=\"line\"><span class=\"keyword\">add_test</span> (test_usage Tutorial)</span><br><span class=\"line\"><span class=\"keyword\">set_tests_properties</span> (test_usage</span><br><span class=\"line\">  PROPERTIES PASS_REGULAR_EXPRESSION <span class=\"string\">&quot;Usage: .* base exponent&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试 5 的平方</span></span><br><span class=\"line\"><span class=\"keyword\">add_test</span> (test_5_2 Tutorial <span class=\"number\">5</span> <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set_tests_properties</span> (test_5_2</span><br><span class=\"line\"> PROPERTIES PASS_REGULAR_EXPRESSION <span class=\"string\">&quot;is 25&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试 10 的 5 次方</span></span><br><span class=\"line\"><span class=\"keyword\">add_test</span> (test_10_5 Tutorial <span class=\"number\">10</span> <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set_tests_properties</span> (test_10_5</span><br><span class=\"line\"> PROPERTIES PASS_REGULAR_EXPRESSION <span class=\"string\">&quot;is 100000&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试 2 的 10 次方</span></span><br><span class=\"line\"><span class=\"keyword\">add_test</span> (test_2_10 Tutorial <span class=\"number\">2</span> <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set_tests_properties</span> (test_2_10</span><br><span class=\"line\"> PROPERTIES PASS_REGULAR_EXPRESSION <span class=\"string\">&quot;is 1024&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其中，第一个测试 test_run 用来测试程序是否成功运行并返回 0 值。 <code>PASS_REGULAR_EXPRESSION</code> 用来测试输出是否包含后面跟着的字符串。</p>\n<p>上面的代码，可以简洁一点</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义一个宏，用来简化测试工作</span></span><br><span class=\"line\"><span class=\"keyword\">macro</span> (do_test arg1 arg2 result)</span><br><span class=\"line\">  <span class=\"keyword\">add_test</span> (test_<span class=\"variable\">$&#123;arg1&#125;</span>_<span class=\"variable\">$&#123;arg2&#125;</span> Tutorial <span class=\"variable\">$&#123;arg1&#125;</span> <span class=\"variable\">$&#123;arg2&#125;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">set_tests_properties</span> (test_<span class=\"variable\">$&#123;arg1&#125;</span>_<span class=\"variable\">$&#123;arg2&#125;</span></span><br><span class=\"line\">    PROPERTIES PASS_REGULAR_EXPRESSION <span class=\"variable\">$&#123;result&#125;</span>)</span><br><span class=\"line\"><span class=\"keyword\">endmacro</span> (do_test)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 使用该宏进行一系列的数据测试</span></span><br><span class=\"line\">do_test (<span class=\"number\">5</span> <span class=\"number\">2</span> <span class=\"string\">&quot;is 25&quot;</span>)</span><br><span class=\"line\">do_test (<span class=\"number\">10</span> <span class=\"number\">5</span> <span class=\"string\">&quot;is 100000&quot;</span>)</span><br><span class=\"line\">do_test (<span class=\"number\">2</span> <span class=\"number\">10</span> <span class=\"string\">&quot;is 1024&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong> CTest 文档，可以查看<code>man 1 ctest</code>。</p>\n<h2 id=\"5-安装\"><a href=\"#5-安装\" class=\"headerlink\" title=\"5. 安装\"></a>5. 安装</h2><h3 id=\"5-1-make-安装\"><a href=\"#5-1-make-安装\" class=\"headerlink\" title=\"5.1 make 安装\"></a>5.1 make 安装</h3><p>在 <code>CMakeLists.txt</code> 指定安装路径与头文件存放路径。对于子目录，比如 math，可以在子目录下的 <code>CMakeLists.txt</code>文件添加</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定 MathFunctions 库的安装路径</span></span><br><span class=\"line\"><span class=\"keyword\">install</span> (TARGETS MathFunctions DESTINATION bin)</span><br><span class=\"line\"><span class=\"keyword\">install</span> (FILES MathFunctions.h DESTINATION <span class=\"keyword\">include</span>)</span><br></pre></td></tr></table></figure>\n\n<p>然后在顶层 <code>CMakeLists.txt</code>文件里添加</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定安装路径</span></span><br><span class=\"line\"><span class=\"keyword\">install</span> (TARGETS Demo DESTINATION bin)</span><br><span class=\"line\"><span class=\"keyword\">install</span> (FILES <span class=\"string\">&quot;$&#123;PROJECT_BINARY_DIR&#125;/config.h&quot;</span> DESTINATION <span class=\"keyword\">include</span>)</span><br></pre></td></tr></table></figure>\n\n<p>通过上面的定制，生成的 <code>Tutorial</code> 文件和 <code>MathFunctions</code> 函数库 <code>libMathFunctions.o</code> 文件将会被复制到 <code>/usr/local/bin</code> 中，而 <code>MathFunctions.h</code> 和生成的 <code>config.h</code> 文件则会被复制到 <code>/usr/local/include</code> 中。我们可以编译然后安装<code>sudo make install</code>验证一下（顺带一提的是，这里的 <code>/usr/local/</code> 是默认安装到的根目录，可以通过修改 <code>CMAKE_INSTALL_PREFIX</code> 变量的值来指定这些文件应该拷贝到哪个根目录）：</p>\n<h3 id=\"5-2-生成安装包\"><a href=\"#5-2-生成安装包\" class=\"headerlink\" title=\"5.2 生成安装包\"></a>5.2 生成安装包</h3><p>如何配置生成各种平台上的安装包，包括二进制安装包和源码安装包。为了完成这个任务，我们需要用到 CPack ，它同样也是由 CMake 提供的一个工具，专门用于打包。</p>\n<p>首先在顶层的 CMakeLists.txt 文件尾部添加下面几行：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建一个 CPack 安装包</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> (InstallRequiredSystemLibraries)</span><br><span class=\"line\"><span class=\"keyword\">set</span> (CPACK_RESOURCE_FILE_LICENSE</span><br><span class=\"line\">  <span class=\"string\">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/License.txt&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span> (CPACK_PACKAGE_VERSION_MAJOR <span class=\"string\">&quot;$&#123;Demo_VERSION_MAJOR&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">set</span> (CPACK_PACKAGE_VERSION_MINOR <span class=\"string\">&quot;$&#123;Demo_VERSION_MINOR&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">include</span> (CPack)</span><br></pre></td></tr></table></figure>\n\n<p>然后编译，并执行 CPack 命令，生成二进制安装包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpack -C CPackConfig.cmake</span><br></pre></td></tr></table></figure>\n\n<p>或则生成源码安装包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpack -C CPackSourceConfig.cmake</span><br></pre></td></tr></table></figure>\n\n<p>命令执行后，会在该目录下生成安装包，可以通过如下命令安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh Tutorial-1.0.1-Linux.sh</span><br></pre></td></tr></table></figure>\n\n<p>此时会出现一个由 CPack 自动生成的交互式安装界面，按照提示操作就好。</p>\n<p>然后，就可以通过在终端验证该可执行程序</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Tutorial-1.0.1-Linux 5 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-平台迁移\"><a href=\"#6-平台迁移\" class=\"headerlink\" title=\"6. 平台迁移\"></a>6. 平台迁移</h2><p>可以将其他工具系列的项目迁移到 cmake 上来，具体参考<a href=\"https://gitlab.kitware.com/cmake/community/-/wikis/home#converters-from-other-buildsystems-to-cmake\">迁移到 cmake</a></p>\n<h2 id=\"7-杂项\"><a href=\"#7-杂项\" class=\"headerlink\" title=\"7. 杂项\"></a>7. 杂项</h2><h3 id=\"7-1-CMake-Language\"><a href=\"#7-1-CMake-Language\" class=\"headerlink\" title=\"7.1 CMake Language\"></a>7.1 CMake Language</h3><ul>\n<li>英文版：<a href=\"https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#syntax\">CMake Language</a></li>\n<li>中文版：<a href=\"https://vvingerfly.github.io/2018/04-15-CMakeLanguage/\">CMake Language</a></li>\n</ul>\n<h3 id=\"7-2-CMake-官方文档\"><a href=\"#7-2-CMake-官方文档\" class=\"headerlink\" title=\"7.2 CMake 官方文档\"></a>7.2 <a href=\"https://cmake.org/cmake/help/v3.21/index.html\">CMake 官方文档</a></h3><h3 id=\"7-3-CMake-社区文档\"><a href=\"#7-3-CMake-社区文档\" class=\"headerlink\" title=\"7.3 CMake 社区文档\"></a>7.3 <a href=\"https://gitlab.kitware.com/cmake/community\">CMake 社区文档</a></h3><h3 id=\"7-4-CMake-入门实战\"><a href=\"#7-4-CMake-入门实战\" class=\"headerlink\" title=\"7.4 CMake 入门实战\"></a>7.4 <a href=\"https://www.hahack.com/codes/cmake/\">CMake 入门实战</a></h3><h3 id=\"7-5-Cmake中文实战教程\"><a href=\"#7-5-Cmake中文实战教程\" class=\"headerlink\" title=\"7.5 Cmake中文实战教程\"></a>7.5 <a href=\"https://brightxiaohan.github.io/CMakeTutorial/\">Cmake中文实战教程</a></h3><h3 id=\"7-6-CMake-支持的变量\"><a href=\"#7-6-CMake-支持的变量\" class=\"headerlink\" title=\"7.6 CMake 支持的变量\"></a>7.6 <a href=\"https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/Useful-Variables\">CMake 支持的变量</a></h3><h2 id=\"8-本文使用到的资源\"><a href=\"#8-本文使用到的资源\" class=\"headerlink\" title=\"8. 本文使用到的资源\"></a>8. 本文使用到的资源</h2><p>main.cpp 源代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * power - Calculate the power of number.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param base: Base value.</span></span><br><span class=\"line\"><span class=\"comment\"> * @param exponent: Exponent value.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @return base raised to the power exponent.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">double</span> base, <span class=\"keyword\">int</span> exponent)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = base;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exponent == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt; exponent; ++i)&#123;</span><br><span class=\"line\">        result = result * base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Usage: %s base exponent \\n&quot;</span>, argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> base = <span class=\"built_in\">atof</span>(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> exponent = <span class=\"built_in\">atoi</span>(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> result = <span class=\"built_in\">power</span>(base, exponent);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%g ^ %d is %g\\n&quot;</span>, base, exponent, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"编译工具链","abbrlink":2396,"date":"2021-08-25T02:36:00.000Z","_content":"\n## 1. [编译工具链](https://zhuanlan.zhihu.com/p/110402378)\n","source":"_posts/iOS/Languages/CAlians/ToolChain.md","raw":"---\ntitle: 编译工具链\nabbrlink: 2396\ndate: 2021-08-25 10:36:00\ntags:\n---\n\n## 1. [编译工具链](https://zhuanlan.zhihu.com/p/110402378)\n","slug":"iOS/Languages/CAlians/ToolChain","published":1,"updated":"2021-09-22T06:56:40.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3e003hiu9k490ggy09","content":"<h2 id=\"1-编译工具链\"><a href=\"#1-编译工具链\" class=\"headerlink\" title=\"1. 编译工具链\"></a>1. <a href=\"https://zhuanlan.zhihu.com/p/110402378\">编译工具链</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-编译工具链\"><a href=\"#1-编译工具链\" class=\"headerlink\" title=\"1. 编译工具链\"></a>1. <a href=\"https://zhuanlan.zhihu.com/p/110402378\">编译工具链</a></h2>"},{"title":"boost 编译器 b2","abbrlink":"7b5090af","date":"2021-04-19T16:00:00.000Z","_content":"\n## 帮助文档\n\n```sh\n./b2 --help\n```\n\n```sh\nBoost.Build 2018.02-git\n\nProject-specific help:\n\n  Project has jamfile at Jamroot\n\nUsage:\n\n  b2 [options] [properties] [install|stage]\n\n  Builds and installs Boost.\n\nTargets and Related Options:\n\n  install                 Install headers and compiled library files to the\n  =======                 configured locations (below).\n\n  --prefix=<PREFIX>       Install architecture independent files here.\n                          Default; C:\\Boost on Win32\n                          Default; /usr/local on Unix. Linux, etc.\n\n  --exec-prefix=<EPREFIX> Install architecture dependent files here.\n                          Default; <PREFIX>\n\n  --libdir=<DIR>          Install library files here.\n                          Default; <EPREFIX>/lib\n\n  --includedir=<HDRDIR>   Install header files here.\n                          Default; <PREFIX>/include\n\n  stage                   Build and install only compiled library files to the\n  =====                   stage directory.\n\n  --stagedir=<STAGEDIR>   Install library files here\n                          Default; ./stage\n\nOther Options:\n\n  --build-type=<type>     Build the specified pre-defined set of variations of\n                          the libraries. Note, that which variants get built\n                          depends on what each library supports.\n\n                              -- minimal -- (default) Builds a minimal set of\n                              variants. On Windows, these are static\n                              multithreaded libraries in debug and release\n                              modes, using shared runtime. On Linux, these are\n                              static and shared multithreaded libraries in\n                              release mode.\n\n                              -- complete -- Build all possible variations.\n\n  --build-dir=DIR         Build in this location instead of building within\n                          the distribution tree. Recommended!\n\n  --show-libraries        Display the list of Boost libraries that require\n                          build and installation steps, and then exit.\n\n  --layout=<layout>       Determine whether to choose library names and header\n                          locations such that multiple versions of Boost or\n                          multiple compilers can be used on the same system.\n\n                              -- versioned -- Names of boost binaries include\n                              the Boost version number, name and version of\n                              the compiler and encoded build properties. Boost\n                              headers are installed in a subdirectory of\n                              <HDRDIR> whose name contains the Boost version\n                              number.\n\n                              -- tagged -- Names of boost binaries include the\n                              encoded build properties such as variant and\n                              threading, but do not including compiler name\n                              and version, or Boost version. This option is\n                              useful if you build several variants of Boost,\n                              using the same compiler.\n\n                              -- system -- Binaries names do not include the\n                              Boost version number or the name and version\n                              number of the compiler. Boost headers are\n                              installed directly into <HDRDIR>. This option is\n                              intended for system integrators building\n                              distribution packages.\n\n                          The default value is 'versioned' on Windows, and\n                          'system' on Unix.\n\n  --buildid=ID            Add the specified ID to the name of built libraries.\n                          The default is to not add anything.\n\n  --python-buildid=ID     Add the specified ID to the name of built libraries\n                          that depend on Python. The default is to not add\n                          anything. This ID is added in addition to --buildid.\n\n  --help                  This message.\n\n  --with-<library>        Build and install the specified <library>. If this\n                          option is used, only libraries specified using this\n                          option will be built.\n\n  --without-<library>     Do not build, stage, or install the specified\n                          <library>. By default, all libraries are built.\n\nProperties:\n\n  toolset=toolset         Indicate the toolset to build with.\n\n  variant=debug|release   Select the build variant\n\n  link=static|shared      Whether to build static or shared libraries\n\n  threading=single|multi  Whether to build single or multithreaded binaries\n\n  runtime-link=static|shared\n                          Whether to link to static or shared C and C++\n                          runtime.\n\n\nGeneral command line usage:\n\n    b2 [options] [properties] [targets]\n\n  Options, properties and targets can be specified in any order.\n      \nImportant Options:\n\n  * --clean Remove targets instead of building\n  * -a Rebuild everything\n  * -n Don't execute the commands, only print them\n  * -d+2 Show commands as they are executed\n  * -d0 Suppress all informational messages\n  * -q Stop at first error\n  * --reconfigure Rerun all configuration checks\n  * --debug-configuration Diagnose configuration\n  * --debug-building Report which targets are built with what properties\n  * --debug-generator Diagnose generator search/execution\n\nFurther Help:\n\n  The following options can be used to obtain additional documentation.\n\n  * --help-options Print more obscure command line options.\n  * --help-internal Boost.Build implementation details.\n  * --help-doc-options Implementation details doc formatting.\n\n...found 1 target...\n\n```\n\n1.69.0 需要编译部分：\n\n```sh\n./b2 --show-libraries\n```\n\n```sh\n- atomic\n- chrono\n- container\n- context\n- contract\n- coroutine\n- date_time\n- exception\n- fiber\n- filesystem\n- graph\n- graph_parallel\n- iostreams\n- locale\n- log\n- math\n- mpi\n- program_options\n- python\n- random\n- regex\n- serialization\n- stacktrace\n- system\n- test\n- thread\n- timer\n- type_erasure\n- wave\n```\n","source":"_posts/iOS/Languages/CAlians/boost-b2.md","raw":"---\ntitle: boost 编译器 b2\nabbrlink: 7b5090af\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n## 帮助文档\n\n```sh\n./b2 --help\n```\n\n```sh\nBoost.Build 2018.02-git\n\nProject-specific help:\n\n  Project has jamfile at Jamroot\n\nUsage:\n\n  b2 [options] [properties] [install|stage]\n\n  Builds and installs Boost.\n\nTargets and Related Options:\n\n  install                 Install headers and compiled library files to the\n  =======                 configured locations (below).\n\n  --prefix=<PREFIX>       Install architecture independent files here.\n                          Default; C:\\Boost on Win32\n                          Default; /usr/local on Unix. Linux, etc.\n\n  --exec-prefix=<EPREFIX> Install architecture dependent files here.\n                          Default; <PREFIX>\n\n  --libdir=<DIR>          Install library files here.\n                          Default; <EPREFIX>/lib\n\n  --includedir=<HDRDIR>   Install header files here.\n                          Default; <PREFIX>/include\n\n  stage                   Build and install only compiled library files to the\n  =====                   stage directory.\n\n  --stagedir=<STAGEDIR>   Install library files here\n                          Default; ./stage\n\nOther Options:\n\n  --build-type=<type>     Build the specified pre-defined set of variations of\n                          the libraries. Note, that which variants get built\n                          depends on what each library supports.\n\n                              -- minimal -- (default) Builds a minimal set of\n                              variants. On Windows, these are static\n                              multithreaded libraries in debug and release\n                              modes, using shared runtime. On Linux, these are\n                              static and shared multithreaded libraries in\n                              release mode.\n\n                              -- complete -- Build all possible variations.\n\n  --build-dir=DIR         Build in this location instead of building within\n                          the distribution tree. Recommended!\n\n  --show-libraries        Display the list of Boost libraries that require\n                          build and installation steps, and then exit.\n\n  --layout=<layout>       Determine whether to choose library names and header\n                          locations such that multiple versions of Boost or\n                          multiple compilers can be used on the same system.\n\n                              -- versioned -- Names of boost binaries include\n                              the Boost version number, name and version of\n                              the compiler and encoded build properties. Boost\n                              headers are installed in a subdirectory of\n                              <HDRDIR> whose name contains the Boost version\n                              number.\n\n                              -- tagged -- Names of boost binaries include the\n                              encoded build properties such as variant and\n                              threading, but do not including compiler name\n                              and version, or Boost version. This option is\n                              useful if you build several variants of Boost,\n                              using the same compiler.\n\n                              -- system -- Binaries names do not include the\n                              Boost version number or the name and version\n                              number of the compiler. Boost headers are\n                              installed directly into <HDRDIR>. This option is\n                              intended for system integrators building\n                              distribution packages.\n\n                          The default value is 'versioned' on Windows, and\n                          'system' on Unix.\n\n  --buildid=ID            Add the specified ID to the name of built libraries.\n                          The default is to not add anything.\n\n  --python-buildid=ID     Add the specified ID to the name of built libraries\n                          that depend on Python. The default is to not add\n                          anything. This ID is added in addition to --buildid.\n\n  --help                  This message.\n\n  --with-<library>        Build and install the specified <library>. If this\n                          option is used, only libraries specified using this\n                          option will be built.\n\n  --without-<library>     Do not build, stage, or install the specified\n                          <library>. By default, all libraries are built.\n\nProperties:\n\n  toolset=toolset         Indicate the toolset to build with.\n\n  variant=debug|release   Select the build variant\n\n  link=static|shared      Whether to build static or shared libraries\n\n  threading=single|multi  Whether to build single or multithreaded binaries\n\n  runtime-link=static|shared\n                          Whether to link to static or shared C and C++\n                          runtime.\n\n\nGeneral command line usage:\n\n    b2 [options] [properties] [targets]\n\n  Options, properties and targets can be specified in any order.\n      \nImportant Options:\n\n  * --clean Remove targets instead of building\n  * -a Rebuild everything\n  * -n Don't execute the commands, only print them\n  * -d+2 Show commands as they are executed\n  * -d0 Suppress all informational messages\n  * -q Stop at first error\n  * --reconfigure Rerun all configuration checks\n  * --debug-configuration Diagnose configuration\n  * --debug-building Report which targets are built with what properties\n  * --debug-generator Diagnose generator search/execution\n\nFurther Help:\n\n  The following options can be used to obtain additional documentation.\n\n  * --help-options Print more obscure command line options.\n  * --help-internal Boost.Build implementation details.\n  * --help-doc-options Implementation details doc formatting.\n\n...found 1 target...\n\n```\n\n1.69.0 需要编译部分：\n\n```sh\n./b2 --show-libraries\n```\n\n```sh\n- atomic\n- chrono\n- container\n- context\n- contract\n- coroutine\n- date_time\n- exception\n- fiber\n- filesystem\n- graph\n- graph_parallel\n- iostreams\n- locale\n- log\n- math\n- mpi\n- program_options\n- python\n- random\n- regex\n- serialization\n- stacktrace\n- system\n- test\n- thread\n- timer\n- type_erasure\n- wave\n```\n","slug":"iOS/Languages/CAlians/boost-b2","published":1,"updated":"2021-07-29T06:46:00.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3h003iiu9kck6zfe6y","content":"<h2 id=\"帮助文档\"><a href=\"#帮助文档\" class=\"headerlink\" title=\"帮助文档\"></a>帮助文档</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./b2 --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boost.Build 2018.02-git</span><br><span class=\"line\"></span><br><span class=\"line\">Project-specific <span class=\"built_in\">help</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  Project has jamfile at Jamroot</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">  b2 [options] [properties] [install|stage]</span><br><span class=\"line\"></span><br><span class=\"line\">  Builds and installs Boost.</span><br><span class=\"line\"></span><br><span class=\"line\">Targets and Related Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  install                 Install headers and compiled library files to the</span><br><span class=\"line\">  =======                 configured locations (below).</span><br><span class=\"line\"></span><br><span class=\"line\">  --prefix=&lt;PREFIX&gt;       Install architecture independent files here.</span><br><span class=\"line\">                          Default; C:\\Boost on Win32</span><br><span class=\"line\">                          Default; /usr/<span class=\"built_in\">local</span> on Unix. Linux, etc.</span><br><span class=\"line\"></span><br><span class=\"line\">  --exec-prefix=&lt;EPREFIX&gt; Install architecture dependent files here.</span><br><span class=\"line\">                          Default; &lt;PREFIX&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  --libdir=&lt;DIR&gt;          Install library files here.</span><br><span class=\"line\">                          Default; &lt;EPREFIX&gt;/lib</span><br><span class=\"line\"></span><br><span class=\"line\">  --includedir=&lt;HDRDIR&gt;   Install header files here.</span><br><span class=\"line\">                          Default; &lt;PREFIX&gt;/include</span><br><span class=\"line\"></span><br><span class=\"line\">  stage                   Build and install only compiled library files to the</span><br><span class=\"line\">  =====                   stage directory.</span><br><span class=\"line\"></span><br><span class=\"line\">  --stagedir=&lt;STAGEDIR&gt;   Install library files here</span><br><span class=\"line\">                          Default; ./stage</span><br><span class=\"line\"></span><br><span class=\"line\">Other Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  --build-type=&lt;<span class=\"built_in\">type</span>&gt;     Build the specified pre-defined <span class=\"built_in\">set</span> of variations of</span><br><span class=\"line\">                          the libraries. Note, that <span class=\"built_in\">which</span> variants get built</span><br><span class=\"line\">                          depends on what each library supports.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- minimal -- (default) Builds a minimal <span class=\"built_in\">set</span> of</span><br><span class=\"line\">                              variants. On Windows, these are static</span><br><span class=\"line\">                              multithreaded libraries <span class=\"keyword\">in</span> debug and release</span><br><span class=\"line\">                              modes, using shared runtime. On Linux, these are</span><br><span class=\"line\">                              static and shared multithreaded libraries <span class=\"keyword\">in</span></span><br><span class=\"line\">                              release mode.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- complete -- Build all possible variations.</span><br><span class=\"line\"></span><br><span class=\"line\">  --build-dir=DIR         Build <span class=\"keyword\">in</span> this location instead of building within</span><br><span class=\"line\">                          the distribution tree. Recommended!</span><br><span class=\"line\"></span><br><span class=\"line\">  --show-libraries        Display the list of Boost libraries that require</span><br><span class=\"line\">                          build and installation steps, and <span class=\"keyword\">then</span> <span class=\"built_in\">exit</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">  --layout=&lt;layout&gt;       Determine whether to choose library names and header</span><br><span class=\"line\">                          locations such that multiple versions of Boost or</span><br><span class=\"line\">                          multiple compilers can be used on the same system.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- versioned -- Names of boost binaries include</span><br><span class=\"line\">                              the Boost version number, name and version of</span><br><span class=\"line\">                              the compiler and encoded build properties. Boost</span><br><span class=\"line\">                              headers are installed <span class=\"keyword\">in</span> a subdirectory of</span><br><span class=\"line\">                              &lt;HDRDIR&gt; whose name contains the Boost version</span><br><span class=\"line\">                              number.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- tagged -- Names of boost binaries include the</span><br><span class=\"line\">                              encoded build properties such as variant and</span><br><span class=\"line\">                              threading, but <span class=\"keyword\">do</span> not including compiler name</span><br><span class=\"line\">                              and version, or Boost version. This option is</span><br><span class=\"line\">                              useful <span class=\"keyword\">if</span> you build several variants of Boost,</span><br><span class=\"line\">                              using the same compiler.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- system -- Binaries names <span class=\"keyword\">do</span> not include the</span><br><span class=\"line\">                              Boost version number or the name and version</span><br><span class=\"line\">                              number of the compiler. Boost headers are</span><br><span class=\"line\">                              installed directly into &lt;HDRDIR&gt;. This option is</span><br><span class=\"line\">                              intended <span class=\"keyword\">for</span> system integrators building</span><br><span class=\"line\">                              distribution packages.</span><br><span class=\"line\"></span><br><span class=\"line\">                          The default value is <span class=\"string\">&#x27;versioned&#x27;</span> on Windows, and</span><br><span class=\"line\">                          <span class=\"string\">&#x27;system&#x27;</span> on Unix.</span><br><span class=\"line\"></span><br><span class=\"line\">  --buildid=ID            Add the specified ID to the name of built libraries.</span><br><span class=\"line\">                          The default is to not add anything.</span><br><span class=\"line\"></span><br><span class=\"line\">  --python-buildid=ID     Add the specified ID to the name of built libraries</span><br><span class=\"line\">                          that depend on Python. The default is to not add</span><br><span class=\"line\">                          anything. This ID is added <span class=\"keyword\">in</span> addition to --buildid.</span><br><span class=\"line\"></span><br><span class=\"line\">  --<span class=\"built_in\">help</span>                  This message.</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-&lt;library&gt;        Build and install the specified &lt;library&gt;. If this</span><br><span class=\"line\">                          option is used, only libraries specified using this</span><br><span class=\"line\">                          option will be built.</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-&lt;library&gt;     Do not build, stage, or install the specified</span><br><span class=\"line\">                          &lt;library&gt;. By default, all libraries are built.</span><br><span class=\"line\"></span><br><span class=\"line\">Properties:</span><br><span class=\"line\"></span><br><span class=\"line\">  toolset=toolset         Indicate the toolset to build with.</span><br><span class=\"line\"></span><br><span class=\"line\">  variant=debug|release   Select the build variant</span><br><span class=\"line\"></span><br><span class=\"line\">  link=static|shared      Whether to build static or shared libraries</span><br><span class=\"line\"></span><br><span class=\"line\">  threading=single|multi  Whether to build single or multithreaded binaries</span><br><span class=\"line\"></span><br><span class=\"line\">  runtime-link=static|shared</span><br><span class=\"line\">                          Whether to link to static or shared C and C++</span><br><span class=\"line\">                          runtime.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">General <span class=\"built_in\">command</span> line usage:</span><br><span class=\"line\"></span><br><span class=\"line\">    b2 [options] [properties] [targets]</span><br><span class=\"line\"></span><br><span class=\"line\">  Options, properties and targets can be specified <span class=\"keyword\">in</span> any order.</span><br><span class=\"line\">      </span><br><span class=\"line\">Important Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  * --clean Remove targets instead of building</span><br><span class=\"line\">  * -a Rebuild everything</span><br><span class=\"line\">  * -n Don<span class=\"string\">&#x27;t execute the commands, only print them</span></span><br><span class=\"line\"><span class=\"string\">  * -d+2 Show commands as they are executed</span></span><br><span class=\"line\"><span class=\"string\">  * -d0 Suppress all informational messages</span></span><br><span class=\"line\"><span class=\"string\">  * -q Stop at first error</span></span><br><span class=\"line\"><span class=\"string\">  * --reconfigure Rerun all configuration checks</span></span><br><span class=\"line\"><span class=\"string\">  * --debug-configuration Diagnose configuration</span></span><br><span class=\"line\"><span class=\"string\">  * --debug-building Report which targets are built with what properties</span></span><br><span class=\"line\"><span class=\"string\">  * --debug-generator Diagnose generator search/execution</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Further Help:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  The following options can be used to obtain additional documentation.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  * --help-options Print more obscure command line options.</span></span><br><span class=\"line\"><span class=\"string\">  * --help-internal Boost.Build implementation details.</span></span><br><span class=\"line\"><span class=\"string\">  * --help-doc-options Implementation details doc formatting.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">...found 1 target...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<p>1.69.0 需要编译部分：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./b2 --show-libraries</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- atomic</span><br><span class=\"line\">- chrono</span><br><span class=\"line\">- container</span><br><span class=\"line\">- context</span><br><span class=\"line\">- contract</span><br><span class=\"line\">- coroutine</span><br><span class=\"line\">- date_time</span><br><span class=\"line\">- exception</span><br><span class=\"line\">- fiber</span><br><span class=\"line\">- filesystem</span><br><span class=\"line\">- graph</span><br><span class=\"line\">- graph_parallel</span><br><span class=\"line\">- iostreams</span><br><span class=\"line\">- locale</span><br><span class=\"line\">- <span class=\"built_in\">log</span></span><br><span class=\"line\">- math</span><br><span class=\"line\">- mpi</span><br><span class=\"line\">- program_options</span><br><span class=\"line\">- python</span><br><span class=\"line\">- random</span><br><span class=\"line\">- regex</span><br><span class=\"line\">- serialization</span><br><span class=\"line\">- stacktrace</span><br><span class=\"line\">- system</span><br><span class=\"line\">- <span class=\"built_in\">test</span></span><br><span class=\"line\">- thread</span><br><span class=\"line\">- timer</span><br><span class=\"line\">- type_erasure</span><br><span class=\"line\">- wave</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"帮助文档\"><a href=\"#帮助文档\" class=\"headerlink\" title=\"帮助文档\"></a>帮助文档</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./b2 --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boost.Build 2018.02-git</span><br><span class=\"line\"></span><br><span class=\"line\">Project-specific <span class=\"built_in\">help</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  Project has jamfile at Jamroot</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\"></span><br><span class=\"line\">  b2 [options] [properties] [install|stage]</span><br><span class=\"line\"></span><br><span class=\"line\">  Builds and installs Boost.</span><br><span class=\"line\"></span><br><span class=\"line\">Targets and Related Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  install                 Install headers and compiled library files to the</span><br><span class=\"line\">  =======                 configured locations (below).</span><br><span class=\"line\"></span><br><span class=\"line\">  --prefix=&lt;PREFIX&gt;       Install architecture independent files here.</span><br><span class=\"line\">                          Default; C:\\Boost on Win32</span><br><span class=\"line\">                          Default; /usr/<span class=\"built_in\">local</span> on Unix. Linux, etc.</span><br><span class=\"line\"></span><br><span class=\"line\">  --exec-prefix=&lt;EPREFIX&gt; Install architecture dependent files here.</span><br><span class=\"line\">                          Default; &lt;PREFIX&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  --libdir=&lt;DIR&gt;          Install library files here.</span><br><span class=\"line\">                          Default; &lt;EPREFIX&gt;/lib</span><br><span class=\"line\"></span><br><span class=\"line\">  --includedir=&lt;HDRDIR&gt;   Install header files here.</span><br><span class=\"line\">                          Default; &lt;PREFIX&gt;/include</span><br><span class=\"line\"></span><br><span class=\"line\">  stage                   Build and install only compiled library files to the</span><br><span class=\"line\">  =====                   stage directory.</span><br><span class=\"line\"></span><br><span class=\"line\">  --stagedir=&lt;STAGEDIR&gt;   Install library files here</span><br><span class=\"line\">                          Default; ./stage</span><br><span class=\"line\"></span><br><span class=\"line\">Other Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  --build-type=&lt;<span class=\"built_in\">type</span>&gt;     Build the specified pre-defined <span class=\"built_in\">set</span> of variations of</span><br><span class=\"line\">                          the libraries. Note, that <span class=\"built_in\">which</span> variants get built</span><br><span class=\"line\">                          depends on what each library supports.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- minimal -- (default) Builds a minimal <span class=\"built_in\">set</span> of</span><br><span class=\"line\">                              variants. On Windows, these are static</span><br><span class=\"line\">                              multithreaded libraries <span class=\"keyword\">in</span> debug and release</span><br><span class=\"line\">                              modes, using shared runtime. On Linux, these are</span><br><span class=\"line\">                              static and shared multithreaded libraries <span class=\"keyword\">in</span></span><br><span class=\"line\">                              release mode.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- complete -- Build all possible variations.</span><br><span class=\"line\"></span><br><span class=\"line\">  --build-dir=DIR         Build <span class=\"keyword\">in</span> this location instead of building within</span><br><span class=\"line\">                          the distribution tree. Recommended!</span><br><span class=\"line\"></span><br><span class=\"line\">  --show-libraries        Display the list of Boost libraries that require</span><br><span class=\"line\">                          build and installation steps, and <span class=\"keyword\">then</span> <span class=\"built_in\">exit</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">  --layout=&lt;layout&gt;       Determine whether to choose library names and header</span><br><span class=\"line\">                          locations such that multiple versions of Boost or</span><br><span class=\"line\">                          multiple compilers can be used on the same system.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- versioned -- Names of boost binaries include</span><br><span class=\"line\">                              the Boost version number, name and version of</span><br><span class=\"line\">                              the compiler and encoded build properties. Boost</span><br><span class=\"line\">                              headers are installed <span class=\"keyword\">in</span> a subdirectory of</span><br><span class=\"line\">                              &lt;HDRDIR&gt; whose name contains the Boost version</span><br><span class=\"line\">                              number.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- tagged -- Names of boost binaries include the</span><br><span class=\"line\">                              encoded build properties such as variant and</span><br><span class=\"line\">                              threading, but <span class=\"keyword\">do</span> not including compiler name</span><br><span class=\"line\">                              and version, or Boost version. This option is</span><br><span class=\"line\">                              useful <span class=\"keyword\">if</span> you build several variants of Boost,</span><br><span class=\"line\">                              using the same compiler.</span><br><span class=\"line\"></span><br><span class=\"line\">                              -- system -- Binaries names <span class=\"keyword\">do</span> not include the</span><br><span class=\"line\">                              Boost version number or the name and version</span><br><span class=\"line\">                              number of the compiler. Boost headers are</span><br><span class=\"line\">                              installed directly into &lt;HDRDIR&gt;. This option is</span><br><span class=\"line\">                              intended <span class=\"keyword\">for</span> system integrators building</span><br><span class=\"line\">                              distribution packages.</span><br><span class=\"line\"></span><br><span class=\"line\">                          The default value is <span class=\"string\">&#x27;versioned&#x27;</span> on Windows, and</span><br><span class=\"line\">                          <span class=\"string\">&#x27;system&#x27;</span> on Unix.</span><br><span class=\"line\"></span><br><span class=\"line\">  --buildid=ID            Add the specified ID to the name of built libraries.</span><br><span class=\"line\">                          The default is to not add anything.</span><br><span class=\"line\"></span><br><span class=\"line\">  --python-buildid=ID     Add the specified ID to the name of built libraries</span><br><span class=\"line\">                          that depend on Python. The default is to not add</span><br><span class=\"line\">                          anything. This ID is added <span class=\"keyword\">in</span> addition to --buildid.</span><br><span class=\"line\"></span><br><span class=\"line\">  --<span class=\"built_in\">help</span>                  This message.</span><br><span class=\"line\"></span><br><span class=\"line\">  --with-&lt;library&gt;        Build and install the specified &lt;library&gt;. If this</span><br><span class=\"line\">                          option is used, only libraries specified using this</span><br><span class=\"line\">                          option will be built.</span><br><span class=\"line\"></span><br><span class=\"line\">  --without-&lt;library&gt;     Do not build, stage, or install the specified</span><br><span class=\"line\">                          &lt;library&gt;. By default, all libraries are built.</span><br><span class=\"line\"></span><br><span class=\"line\">Properties:</span><br><span class=\"line\"></span><br><span class=\"line\">  toolset=toolset         Indicate the toolset to build with.</span><br><span class=\"line\"></span><br><span class=\"line\">  variant=debug|release   Select the build variant</span><br><span class=\"line\"></span><br><span class=\"line\">  link=static|shared      Whether to build static or shared libraries</span><br><span class=\"line\"></span><br><span class=\"line\">  threading=single|multi  Whether to build single or multithreaded binaries</span><br><span class=\"line\"></span><br><span class=\"line\">  runtime-link=static|shared</span><br><span class=\"line\">                          Whether to link to static or shared C and C++</span><br><span class=\"line\">                          runtime.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">General <span class=\"built_in\">command</span> line usage:</span><br><span class=\"line\"></span><br><span class=\"line\">    b2 [options] [properties] [targets]</span><br><span class=\"line\"></span><br><span class=\"line\">  Options, properties and targets can be specified <span class=\"keyword\">in</span> any order.</span><br><span class=\"line\">      </span><br><span class=\"line\">Important Options:</span><br><span class=\"line\"></span><br><span class=\"line\">  * --clean Remove targets instead of building</span><br><span class=\"line\">  * -a Rebuild everything</span><br><span class=\"line\">  * -n Don<span class=\"string\">&#x27;t execute the commands, only print them</span></span><br><span class=\"line\"><span class=\"string\">  * -d+2 Show commands as they are executed</span></span><br><span class=\"line\"><span class=\"string\">  * -d0 Suppress all informational messages</span></span><br><span class=\"line\"><span class=\"string\">  * -q Stop at first error</span></span><br><span class=\"line\"><span class=\"string\">  * --reconfigure Rerun all configuration checks</span></span><br><span class=\"line\"><span class=\"string\">  * --debug-configuration Diagnose configuration</span></span><br><span class=\"line\"><span class=\"string\">  * --debug-building Report which targets are built with what properties</span></span><br><span class=\"line\"><span class=\"string\">  * --debug-generator Diagnose generator search/execution</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Further Help:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  The following options can be used to obtain additional documentation.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  * --help-options Print more obscure command line options.</span></span><br><span class=\"line\"><span class=\"string\">  * --help-internal Boost.Build implementation details.</span></span><br><span class=\"line\"><span class=\"string\">  * --help-doc-options Implementation details doc formatting.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">...found 1 target...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<p>1.69.0 需要编译部分：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./b2 --show-libraries</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- atomic</span><br><span class=\"line\">- chrono</span><br><span class=\"line\">- container</span><br><span class=\"line\">- context</span><br><span class=\"line\">- contract</span><br><span class=\"line\">- coroutine</span><br><span class=\"line\">- date_time</span><br><span class=\"line\">- exception</span><br><span class=\"line\">- fiber</span><br><span class=\"line\">- filesystem</span><br><span class=\"line\">- graph</span><br><span class=\"line\">- graph_parallel</span><br><span class=\"line\">- iostreams</span><br><span class=\"line\">- locale</span><br><span class=\"line\">- <span class=\"built_in\">log</span></span><br><span class=\"line\">- math</span><br><span class=\"line\">- mpi</span><br><span class=\"line\">- program_options</span><br><span class=\"line\">- python</span><br><span class=\"line\">- random</span><br><span class=\"line\">- regex</span><br><span class=\"line\">- serialization</span><br><span class=\"line\">- stacktrace</span><br><span class=\"line\">- system</span><br><span class=\"line\">- <span class=\"built_in\">test</span></span><br><span class=\"line\">- thread</span><br><span class=\"line\">- timer</span><br><span class=\"line\">- type_erasure</span><br><span class=\"line\">- wave</span><br></pre></td></tr></table></figure>\n"},{"title":"Java","abbrlink":"df2849ec","date":"2021-04-19T16:00:00.000Z","_content":"","source":"_posts/iOS/Languages/Java/Java.md","raw":"---\ntitle: Java\nabbrlink: df2849ec\ndate: 2021-04-20 00:00:00\ntags:\n---\n","slug":"iOS/Languages/Java/Java","published":1,"updated":"2021-07-29T06:45:57.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3i003jiu9k73oq5p83","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"汇编语言","abbrlink":"8e41db39","date":"2021-04-19T16:00:00.000Z","_content":"\n[汇编语言入门教程](http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html)\n\n```assemble\n_add_a_and_b:\n   push   %ebx\n   mov    %eax, [%esp+8] \n   mov    %ebx, [%esp+12]\n   add    %eax, %ebx \n   pop    %ebx \n   ret  \n\n_main:\n   push   3\n   push   2\n   call   _add_a_and_b \n   add    %esp, 8\n   ret\n```\n\n<https://blog.nelhage.com/2010/10/amd64-and-va_arg/>\n\n<http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf>\n\n<https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html>\n","source":"_posts/iOS/Languages/Assemble/Assemble.md","raw":"---\ntitle: 汇编语言\nabbrlink: 8e41db39\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n[汇编语言入门教程](http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html)\n\n```assemble\n_add_a_and_b:\n   push   %ebx\n   mov    %eax, [%esp+8] \n   mov    %ebx, [%esp+12]\n   add    %eax, %ebx \n   pop    %ebx \n   ret  \n\n_main:\n   push   3\n   push   2\n   call   _add_a_and_b \n   add    %esp, 8\n   ret\n```\n\n<https://blog.nelhage.com/2010/10/amd64-and-va_arg/>\n\n<http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf>\n\n<https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html>\n","slug":"iOS/Languages/Assemble/Assemble","published":1,"updated":"2021-07-29T06:46:00.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3i003kiu9kfh0l1ejk","content":"<p><a href=\"http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html\">汇编语言入门教程</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_add_a_and_b:</span><br><span class=\"line\">   push   %ebx</span><br><span class=\"line\">   mov    %eax, [%esp+8] </span><br><span class=\"line\">   mov    %ebx, [%esp+12]</span><br><span class=\"line\">   add    %eax, %ebx </span><br><span class=\"line\">   pop    %ebx </span><br><span class=\"line\">   ret  </span><br><span class=\"line\"></span><br><span class=\"line\">_main:</span><br><span class=\"line\">   push   3</span><br><span class=\"line\">   push   2</span><br><span class=\"line\">   call   _add_a_and_b </span><br><span class=\"line\">   add    %esp, 8</span><br><span class=\"line\">   ret</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.nelhage.com/2010/10/amd64-and-va_arg/\">https://blog.nelhage.com/2010/10/amd64-and-va_arg/</a></p>\n<p><a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf\">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf</a></p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html\">https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html\">汇编语言入门教程</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_add_a_and_b:</span><br><span class=\"line\">   push   %ebx</span><br><span class=\"line\">   mov    %eax, [%esp+8] </span><br><span class=\"line\">   mov    %ebx, [%esp+12]</span><br><span class=\"line\">   add    %eax, %ebx </span><br><span class=\"line\">   pop    %ebx </span><br><span class=\"line\">   ret  </span><br><span class=\"line\"></span><br><span class=\"line\">_main:</span><br><span class=\"line\">   push   3</span><br><span class=\"line\">   push   2</span><br><span class=\"line\">   call   _add_a_and_b </span><br><span class=\"line\">   add    %esp, 8</span><br><span class=\"line\">   ret</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.nelhage.com/2010/10/amd64-and-va_arg/\">https://blog.nelhage.com/2010/10/amd64-and-va_arg/</a></p>\n<p><a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf\">http://infocenter.arm.com/help/topic/com.arm.doc.ihi0055b/IHI0055B_aapcs64.pdf</a></p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html\">https://developer.apple.com/library/ios/documentation/Xcode/Conceptual/iPhoneOSABIReference/Articles/ARM64FunctionCallingConventions.html</a></p>\n"},{"title":"iOS之Category","abbrlink":"b93f8f76","date":"2021-05-21T16:00:00.000Z","_content":"\n## 1. [深入理解Objective-C：Category](https://tech.meituan.com/2015/03/03/diveintocategory.html)\n\ncategory 加载过程，从objc-os.mm文件的_objc_init函数开始\n\n```objc\n_objc_init:\ndyld_register_image_state_change_handler(dyld_image_state_bound,1, &map_images);\ndyld_register_image_state_change_handler(dyld_image_state_dependents_initialized, 0/*not batch*/, &load_images);\n\n-->map_2_images-->map_images_nolock-->\n_read_images-->remethodizeClass-->attachCategories-->\nattachLists-->realloc、memmove、 memcpy。\n```\n\n## 2. [iOS中Category的底层实现原理](https://juejin.cn/post/6844904039671398407)\n\n### 2.1 Category 结构体\n\n```Objective-C\nstruct objc_category {\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n} \n\n/// An opaque type that represents a category.\ntypedef struct objc_category *Category;\n```\n\n### 2.2 关联对象\n\n```objc\n// 设置\nvoid objc_setAssociatedObject(id object, \n                              const void * key,\n                              id value, \n                              objc_AssociationPolicy policy);\n\n// 获取\nid objc_getAssociatedObject(id object, const void * key);\n\n// 移除\nvoid objc_removeAssociatedObjects(id object);\n```\n\n|      objc_AssociationPolicy       |   对应的修饰符    |\n| :-------------------------------: | :---------------: |\n|      OBJC_ASSOCIATION_ASSIGN      |      assign       |\n| OBJC_ASSOCIATION_RETAIN_NONATOMIC | strong, nonatomic |\n|  OBJC_ASSOCIATION_COPY_NONATOMIC  |  copy, nonatomic  |\n|      OBJC_ASSOCIATION_RETAIN      |  strong, atomic   |\n|       OBJC_ASSOCIATION_COPY       |   copy, atomic    |\n\n### 2.3 关联对象存储结构\n\n* `ObjcAssociation`：这个对象里面有2个成员`uintptr_t _policy`和`id _value`，这两个很显然就是我们设置关联对象传入的参数`policy`和`value`。\n* `ObjectAssociationMap`：这是一个HashMap(以键值对方式存储，可以理解为是一个字典)，以设置关联对象时传入的`key`值作为`HashMap`的键，以`ObjcAssociation`对象作为`HashMap`的值。比如一个分类添加了3个属性，那一个实例对象给这3个属性都赋值了，那么这个`HashMap`中就有3个元素，如果给这个实例对象的其中一个属性赋值为`nil`，那这个`HashMap`就会把这个属性对应的键值对给移除，然后`HashMap中`就还剩2个元素。\n* `AssociationsHashMap`：这也是一个`HashMap`，以设置关联属性时传入的参数`object`作为键(实际是对`object`对象通过某个算法计算出一个值作为键)。以`ObjectAssociationMap`作为值。所以当某个类(前提是这个类的分类中有设置关联对象)每实例化一个对象，这个`HashMap`就会新增一个元素，当某个实例化对象被释放时，其对应的键值对也会被这个`HashMap`给移除。注意整个程序运行期间，`AssociationsHashMap`只会有一个，也就是说所有的类的关联对象信息都是存储在这个`HashMap`中。\n* `AssociationsManager`：从名字就可以看出它是一个管理者，注意整个程序运行期间它也只有一个，他就只包含一个`AssociationsHashMap`。\n\n![category association](../Resources/category_association.webp)\n","source":"_posts/iOS/Languages/Objective-C/Category.md","raw":"---\ntitle: iOS之Category\nabbrlink: b93f8f76\ndate: 2021-05-22 00:00:00\ntags:\n---\n\n## 1. [深入理解Objective-C：Category](https://tech.meituan.com/2015/03/03/diveintocategory.html)\n\ncategory 加载过程，从objc-os.mm文件的_objc_init函数开始\n\n```objc\n_objc_init:\ndyld_register_image_state_change_handler(dyld_image_state_bound,1, &map_images);\ndyld_register_image_state_change_handler(dyld_image_state_dependents_initialized, 0/*not batch*/, &load_images);\n\n-->map_2_images-->map_images_nolock-->\n_read_images-->remethodizeClass-->attachCategories-->\nattachLists-->realloc、memmove、 memcpy。\n```\n\n## 2. [iOS中Category的底层实现原理](https://juejin.cn/post/6844904039671398407)\n\n### 2.1 Category 结构体\n\n```Objective-C\nstruct objc_category {\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n} \n\n/// An opaque type that represents a category.\ntypedef struct objc_category *Category;\n```\n\n### 2.2 关联对象\n\n```objc\n// 设置\nvoid objc_setAssociatedObject(id object, \n                              const void * key,\n                              id value, \n                              objc_AssociationPolicy policy);\n\n// 获取\nid objc_getAssociatedObject(id object, const void * key);\n\n// 移除\nvoid objc_removeAssociatedObjects(id object);\n```\n\n|      objc_AssociationPolicy       |   对应的修饰符    |\n| :-------------------------------: | :---------------: |\n|      OBJC_ASSOCIATION_ASSIGN      |      assign       |\n| OBJC_ASSOCIATION_RETAIN_NONATOMIC | strong, nonatomic |\n|  OBJC_ASSOCIATION_COPY_NONATOMIC  |  copy, nonatomic  |\n|      OBJC_ASSOCIATION_RETAIN      |  strong, atomic   |\n|       OBJC_ASSOCIATION_COPY       |   copy, atomic    |\n\n### 2.3 关联对象存储结构\n\n* `ObjcAssociation`：这个对象里面有2个成员`uintptr_t _policy`和`id _value`，这两个很显然就是我们设置关联对象传入的参数`policy`和`value`。\n* `ObjectAssociationMap`：这是一个HashMap(以键值对方式存储，可以理解为是一个字典)，以设置关联对象时传入的`key`值作为`HashMap`的键，以`ObjcAssociation`对象作为`HashMap`的值。比如一个分类添加了3个属性，那一个实例对象给这3个属性都赋值了，那么这个`HashMap`中就有3个元素，如果给这个实例对象的其中一个属性赋值为`nil`，那这个`HashMap`就会把这个属性对应的键值对给移除，然后`HashMap中`就还剩2个元素。\n* `AssociationsHashMap`：这也是一个`HashMap`，以设置关联属性时传入的参数`object`作为键(实际是对`object`对象通过某个算法计算出一个值作为键)。以`ObjectAssociationMap`作为值。所以当某个类(前提是这个类的分类中有设置关联对象)每实例化一个对象，这个`HashMap`就会新增一个元素，当某个实例化对象被释放时，其对应的键值对也会被这个`HashMap`给移除。注意整个程序运行期间，`AssociationsHashMap`只会有一个，也就是说所有的类的关联对象信息都是存储在这个`HashMap`中。\n* `AssociationsManager`：从名字就可以看出它是一个管理者，注意整个程序运行期间它也只有一个，他就只包含一个`AssociationsHashMap`。\n\n![category association](../Resources/category_association.webp)\n","slug":"iOS/Languages/Objective-C/Category","published":1,"updated":"2021-09-22T06:56:40.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3j003liu9khtza6nl8","content":"<h2 id=\"1-深入理解Objective-C：Category\"><a href=\"#1-深入理解Objective-C：Category\" class=\"headerlink\" title=\"1. 深入理解Objective-C：Category\"></a>1. <a href=\"https://tech.meituan.com/2015/03/03/diveintocategory.html\">深入理解Objective-C：Category</a></h2><p>category 加载过程，从objc-os.mm文件的_objc_init函数开始</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_objc_init:</span><br><span class=\"line\">dyld_register_image_state_change_handler(dyld_image_state_bound,<span class=\"number\">1</span>, &amp;map_images);</span><br><span class=\"line\">dyld_register_image_state_change_handler(dyld_image_state_dependents_initialized, <span class=\"number\">0</span><span class=\"comment\">/*not batch*/</span>, &amp;load_images);</span><br><span class=\"line\"></span><br><span class=\"line\">--&gt;map_2_images--&gt;map_images_nolock--&gt;</span><br><span class=\"line\">_read_images--&gt;remethodizeClass--&gt;attachCategories--&gt;</span><br><span class=\"line\">attachLists--&gt;realloc、memmove、 memcpy。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-iOS中Category的底层实现原理\"><a href=\"#2-iOS中Category的底层实现原理\" class=\"headerlink\" title=\"2. iOS中Category的底层实现原理\"></a>2. <a href=\"https://juejin.cn/post/6844904039671398407\">iOS中Category的底层实现原理</a></h2><h3 id=\"2-1-Category-结构体\"><a href=\"#2-1-Category-结构体\" class=\"headerlink\" title=\"2.1 Category 结构体\"></a>2.1 Category 结构体</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_category &#123;</span><br><span class=\"line\">    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents a category.</span><br><span class=\"line\">typedef struct objc_category *Category;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-关联对象\"><a href=\"#2-2-关联对象\" class=\"headerlink\" title=\"2.2 关联对象\"></a>2.2 关联对象</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> objc_setAssociatedObject(<span class=\"keyword\">id</span> object, </span><br><span class=\"line\">                              <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * key,</span><br><span class=\"line\">                              <span class=\"keyword\">id</span> value, </span><br><span class=\"line\">                              objc_AssociationPolicy policy);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\"><span class=\"keyword\">id</span> objc_getAssociatedObject(<span class=\"keyword\">id</span> object, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * key);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> objc_removeAssociatedObjects(<span class=\"keyword\">id</span> object);</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">objc_AssociationPolicy</th>\n<th align=\"center\">对应的修饰符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">OBJC_ASSOCIATION_ASSIGN</td>\n<td align=\"center\">assign</td>\n</tr>\n<tr>\n<td align=\"center\">OBJC_ASSOCIATION_RETAIN_NONATOMIC</td>\n<td align=\"center\">strong, nonatomic</td>\n</tr>\n<tr>\n<td align=\"center\">OBJC_ASSOCIATION_COPY_NONATOMIC</td>\n<td align=\"center\">copy, nonatomic</td>\n</tr>\n<tr>\n<td align=\"center\">OBJC_ASSOCIATION_RETAIN</td>\n<td align=\"center\">strong, atomic</td>\n</tr>\n<tr>\n<td align=\"center\">OBJC_ASSOCIATION_COPY</td>\n<td align=\"center\">copy, atomic</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-关联对象存储结构\"><a href=\"#2-3-关联对象存储结构\" class=\"headerlink\" title=\"2.3 关联对象存储结构\"></a>2.3 关联对象存储结构</h3><ul>\n<li><code>ObjcAssociation</code>：这个对象里面有2个成员<code>uintptr_t _policy</code>和<code>id _value</code>，这两个很显然就是我们设置关联对象传入的参数<code>policy</code>和<code>value</code>。</li>\n<li><code>ObjectAssociationMap</code>：这是一个HashMap(以键值对方式存储，可以理解为是一个字典)，以设置关联对象时传入的<code>key</code>值作为<code>HashMap</code>的键，以<code>ObjcAssociation</code>对象作为<code>HashMap</code>的值。比如一个分类添加了3个属性，那一个实例对象给这3个属性都赋值了，那么这个<code>HashMap</code>中就有3个元素，如果给这个实例对象的其中一个属性赋值为<code>nil</code>，那这个<code>HashMap</code>就会把这个属性对应的键值对给移除，然后<code>HashMap中</code>就还剩2个元素。</li>\n<li><code>AssociationsHashMap</code>：这也是一个<code>HashMap</code>，以设置关联属性时传入的参数<code>object</code>作为键(实际是对<code>object</code>对象通过某个算法计算出一个值作为键)。以<code>ObjectAssociationMap</code>作为值。所以当某个类(前提是这个类的分类中有设置关联对象)每实例化一个对象，这个<code>HashMap</code>就会新增一个元素，当某个实例化对象被释放时，其对应的键值对也会被这个<code>HashMap</code>给移除。注意整个程序运行期间，<code>AssociationsHashMap</code>只会有一个，也就是说所有的类的关联对象信息都是存储在这个<code>HashMap</code>中。</li>\n<li><code>AssociationsManager</code>：从名字就可以看出它是一个管理者，注意整个程序运行期间它也只有一个，他就只包含一个<code>AssociationsHashMap</code>。</li>\n</ul>\n<p><img src=\"/../Resources/category_association.webp\" alt=\"category association\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-深入理解Objective-C：Category\"><a href=\"#1-深入理解Objective-C：Category\" class=\"headerlink\" title=\"1. 深入理解Objective-C：Category\"></a>1. <a href=\"https://tech.meituan.com/2015/03/03/diveintocategory.html\">深入理解Objective-C：Category</a></h2><p>category 加载过程，从objc-os.mm文件的_objc_init函数开始</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_objc_init:</span><br><span class=\"line\">dyld_register_image_state_change_handler(dyld_image_state_bound,<span class=\"number\">1</span>, &amp;map_images);</span><br><span class=\"line\">dyld_register_image_state_change_handler(dyld_image_state_dependents_initialized, <span class=\"number\">0</span><span class=\"comment\">/*not batch*/</span>, &amp;load_images);</span><br><span class=\"line\"></span><br><span class=\"line\">--&gt;map_2_images--&gt;map_images_nolock--&gt;</span><br><span class=\"line\">_read_images--&gt;remethodizeClass--&gt;attachCategories--&gt;</span><br><span class=\"line\">attachLists--&gt;realloc、memmove、 memcpy。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-iOS中Category的底层实现原理\"><a href=\"#2-iOS中Category的底层实现原理\" class=\"headerlink\" title=\"2. iOS中Category的底层实现原理\"></a>2. <a href=\"https://juejin.cn/post/6844904039671398407\">iOS中Category的底层实现原理</a></h2><h3 id=\"2-1-Category-结构体\"><a href=\"#2-1-Category-结构体\" class=\"headerlink\" title=\"2.1 Category 结构体\"></a>2.1 Category 结构体</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_category &#123;</span><br><span class=\"line\">    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents a category.</span><br><span class=\"line\">typedef struct objc_category *Category;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-关联对象\"><a href=\"#2-2-关联对象\" class=\"headerlink\" title=\"2.2 关联对象\"></a>2.2 关联对象</h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> objc_setAssociatedObject(<span class=\"keyword\">id</span> object, </span><br><span class=\"line\">                              <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * key,</span><br><span class=\"line\">                              <span class=\"keyword\">id</span> value, </span><br><span class=\"line\">                              objc_AssociationPolicy policy);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\"><span class=\"keyword\">id</span> objc_getAssociatedObject(<span class=\"keyword\">id</span> object, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * key);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 移除</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> objc_removeAssociatedObjects(<span class=\"keyword\">id</span> object);</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">objc_AssociationPolicy</th>\n<th align=\"center\">对应的修饰符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">OBJC_ASSOCIATION_ASSIGN</td>\n<td align=\"center\">assign</td>\n</tr>\n<tr>\n<td align=\"center\">OBJC_ASSOCIATION_RETAIN_NONATOMIC</td>\n<td align=\"center\">strong, nonatomic</td>\n</tr>\n<tr>\n<td align=\"center\">OBJC_ASSOCIATION_COPY_NONATOMIC</td>\n<td align=\"center\">copy, nonatomic</td>\n</tr>\n<tr>\n<td align=\"center\">OBJC_ASSOCIATION_RETAIN</td>\n<td align=\"center\">strong, atomic</td>\n</tr>\n<tr>\n<td align=\"center\">OBJC_ASSOCIATION_COPY</td>\n<td align=\"center\">copy, atomic</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-3-关联对象存储结构\"><a href=\"#2-3-关联对象存储结构\" class=\"headerlink\" title=\"2.3 关联对象存储结构\"></a>2.3 关联对象存储结构</h3><ul>\n<li><code>ObjcAssociation</code>：这个对象里面有2个成员<code>uintptr_t _policy</code>和<code>id _value</code>，这两个很显然就是我们设置关联对象传入的参数<code>policy</code>和<code>value</code>。</li>\n<li><code>ObjectAssociationMap</code>：这是一个HashMap(以键值对方式存储，可以理解为是一个字典)，以设置关联对象时传入的<code>key</code>值作为<code>HashMap</code>的键，以<code>ObjcAssociation</code>对象作为<code>HashMap</code>的值。比如一个分类添加了3个属性，那一个实例对象给这3个属性都赋值了，那么这个<code>HashMap</code>中就有3个元素，如果给这个实例对象的其中一个属性赋值为<code>nil</code>，那这个<code>HashMap</code>就会把这个属性对应的键值对给移除，然后<code>HashMap中</code>就还剩2个元素。</li>\n<li><code>AssociationsHashMap</code>：这也是一个<code>HashMap</code>，以设置关联属性时传入的参数<code>object</code>作为键(实际是对<code>object</code>对象通过某个算法计算出一个值作为键)。以<code>ObjectAssociationMap</code>作为值。所以当某个类(前提是这个类的分类中有设置关联对象)每实例化一个对象，这个<code>HashMap</code>就会新增一个元素，当某个实例化对象被释放时，其对应的键值对也会被这个<code>HashMap</code>给移除。注意整个程序运行期间，<code>AssociationsHashMap</code>只会有一个，也就是说所有的类的关联对象信息都是存储在这个<code>HashMap</code>中。</li>\n<li><code>AssociationsManager</code>：从名字就可以看出它是一个管理者，注意整个程序运行期间它也只有一个，他就只包含一个<code>AssociationsHashMap</code>。</li>\n</ul>\n<p><img src=\"/../Resources/category_association.webp\" alt=\"category association\"></p>\n"},{"title":"Block","abbrlink":"42dab826","date":"2021-04-19T16:00:00.000Z","_content":"\n## 1. [iOS-Block底层实现原理](https://limeng99.club/learning/2020/05/25/iOS-Block底层实现原理.html)\n\n## 2. Block 类型\n\n### 2.1 全局 Block\n\n```c\nvoid (^global_block)(void) = ^{\n    NSLog(@\"global_block\");\n};\n```\n\n### 2.2 栈 Block\n\n```c\n __block int age = 1;\nvoid (^stack_block)(void) = ^{\n    NSLog(@\"stack_block %d\", age++);\n};\n```\n\n### 2.3 堆 Block\n\n```c\nvoid (^malloc_block)(void) = [stack_block copy];\n```\n\nblock 发生 copy 的时机：\n\n1. copy 操作；\n2. 函数返回值；\n3. 赋值给__strong 修饰符 id 类型的类 或者 Block 类型成员时；\n4. 方法名中有 useingBlock 的 cocoa 框架方法或者 GCD 中的 api 传递时；\n\n## 3. Block 内部结构\n\n1. 全局变量捕获，不影响 block 结构；\n2. auto 变量 捕获成 block 结构体内的普通变量；\n3. static 变量捕获成 block 结构体内的指针类型变量；\n4. 对象型变量捕获成 block 结构体内的对象型变量；\n5. `__block` 型捕获成引用型 block 结构体；\n6. `__weak` 型捕获成对象型 `__weak` block 结构体；\n\n### 3.1 普通 Block 结构\n\n```c\nstruct __block_impl {\n  void *isa;      //isa指针，所以说Block是对象\n  int Flags;\n  int Reserved;\n  void *FuncPtr;  //函数指针\n};\n\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int age;\n  // 构造函数（类似于OC的init方法），返回结构体对象\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _age, int flags=0) : age(_age) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n  int age = __cself->age; // bound by copy\n  NSLog((NSString *)&__NSConstantStringImpl__var_folders_sx_ygl_c8ln07jdwrz6w5rgbq8m0000gn_T_blcok_8142ea_mi_0, age);\n}\n\nstatic struct __main_block_desc_0 {\n  size_t reserved;\n  size_t Block_size;\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};\n```\n\n### 3.2 捕获引用型变量 Block 结构\n\n```c\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  LMPerson *person;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, LMPerson *_person, int flags=0) : person(_person) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n```\n\n### 3.3 捕获Weak型变量 Block 结构\n\n```c\n// cannot create __weak reference because the current deployment target does not support weak references 报错时使用一下命令\n// xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc -fobjc-arc -fobjc-runtime=ios-8.0.0 main.m\n\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  LMPerson *__weak weakPerson;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, LMPerson *__weak _weakPerson, int flags=0) : weakPerson(_weakPerson) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n\nstatic struct __main_block_desc_0 {\n  size_t reserved;\n  size_t Block_size;\n  // copy函数\n  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);\n  // dispose函数\n  void (*dispose)(struct __main_block_impl_0*);\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0};\n\n//copy函数内部会调用_Block_object_assign函数\nstatic void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) {_Block_object_assign((void*)&dst->weakPerson, (void*)src->weakPerson, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\n// dispose函数内部会调用_Block_object_dispose函数\nstatic void __main_block_dispose_0(struct __main_block_impl_0*src) {_Block_object_dispose((void*)src->weakPerson, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n```\n\n### 3.4 捕获 __block 型变量 Block 结构\n\n```c\n// main.cpp\nstruct __Block_byref_age_0 {\n  void *__isa;\n  __Block_byref_age_0 *__forwarding; // 指向自身的指针\n  int __flags;\n  int __size;\n  int age; // 使用值\n};\n\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  __Block_byref_age_0 *age; // by ref\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_age_0 *_age, int flags=0) : age(_age->__forwarding) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n  __Block_byref_age_0 *age = __cself->age; // bound by ref\n      // __forwarding指向的结构体的age改为30，也就是__Block_byref_age_0结构体age本身的age的值修改为30\n      (age->__forwarding->age) = 30;\n      // 通过__forwarding找到指针，然后去取出age值。\n      NSLog((NSString *)&__NSConstantStringImpl__var_folders_sx_ygl_c8ln07jdwrz6w5rgbq8m0000gn_T_main_5da7ea_mi_0, (age->__forwarding->age));\n  }\n```\n\n## 4 循环引用处理\n\n1. weak\n2. __block\n3. __unsafe_unretained\n\n## 5. Block 的变量捕获原理\n\n### 5.1 [你真的理解__block修饰符的原理么？](https://blog.csdn.net/abc649395594/article/details/47086751)\n\n参考[^深入理解iOS的block]\n[^深入理解iOS的block]: [深入理解iOS的block](<https://juejin.cn/post/6844903893176958983#heading-37>)\n","source":"_posts/iOS/Languages/Objective-C/Block.md","raw":"---\ntitle: Block\nabbrlink: 42dab826\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n## 1. [iOS-Block底层实现原理](https://limeng99.club/learning/2020/05/25/iOS-Block底层实现原理.html)\n\n## 2. Block 类型\n\n### 2.1 全局 Block\n\n```c\nvoid (^global_block)(void) = ^{\n    NSLog(@\"global_block\");\n};\n```\n\n### 2.2 栈 Block\n\n```c\n __block int age = 1;\nvoid (^stack_block)(void) = ^{\n    NSLog(@\"stack_block %d\", age++);\n};\n```\n\n### 2.3 堆 Block\n\n```c\nvoid (^malloc_block)(void) = [stack_block copy];\n```\n\nblock 发生 copy 的时机：\n\n1. copy 操作；\n2. 函数返回值；\n3. 赋值给__strong 修饰符 id 类型的类 或者 Block 类型成员时；\n4. 方法名中有 useingBlock 的 cocoa 框架方法或者 GCD 中的 api 传递时；\n\n## 3. Block 内部结构\n\n1. 全局变量捕获，不影响 block 结构；\n2. auto 变量 捕获成 block 结构体内的普通变量；\n3. static 变量捕获成 block 结构体内的指针类型变量；\n4. 对象型变量捕获成 block 结构体内的对象型变量；\n5. `__block` 型捕获成引用型 block 结构体；\n6. `__weak` 型捕获成对象型 `__weak` block 结构体；\n\n### 3.1 普通 Block 结构\n\n```c\nstruct __block_impl {\n  void *isa;      //isa指针，所以说Block是对象\n  int Flags;\n  int Reserved;\n  void *FuncPtr;  //函数指针\n};\n\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  int age;\n  // 构造函数（类似于OC的init方法），返回结构体对象\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _age, int flags=0) : age(_age) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n  int age = __cself->age; // bound by copy\n  NSLog((NSString *)&__NSConstantStringImpl__var_folders_sx_ygl_c8ln07jdwrz6w5rgbq8m0000gn_T_blcok_8142ea_mi_0, age);\n}\n\nstatic struct __main_block_desc_0 {\n  size_t reserved;\n  size_t Block_size;\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};\n```\n\n### 3.2 捕获引用型变量 Block 结构\n\n```c\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  LMPerson *person;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, LMPerson *_person, int flags=0) : person(_person) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n```\n\n### 3.3 捕获Weak型变量 Block 结构\n\n```c\n// cannot create __weak reference because the current deployment target does not support weak references 报错时使用一下命令\n// xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc -fobjc-arc -fobjc-runtime=ios-8.0.0 main.m\n\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  LMPerson *__weak weakPerson;\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, LMPerson *__weak _weakPerson, int flags=0) : weakPerson(_weakPerson) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n\nstatic struct __main_block_desc_0 {\n  size_t reserved;\n  size_t Block_size;\n  // copy函数\n  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);\n  // dispose函数\n  void (*dispose)(struct __main_block_impl_0*);\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0};\n\n//copy函数内部会调用_Block_object_assign函数\nstatic void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) {_Block_object_assign((void*)&dst->weakPerson, (void*)src->weakPerson, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\n// dispose函数内部会调用_Block_object_dispose函数\nstatic void __main_block_dispose_0(struct __main_block_impl_0*src) {_Block_object_dispose((void*)src->weakPerson, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n```\n\n### 3.4 捕获 __block 型变量 Block 结构\n\n```c\n// main.cpp\nstruct __Block_byref_age_0 {\n  void *__isa;\n  __Block_byref_age_0 *__forwarding; // 指向自身的指针\n  int __flags;\n  int __size;\n  int age; // 使用值\n};\n\nstruct __main_block_impl_0 {\n  struct __block_impl impl;\n  struct __main_block_desc_0* Desc;\n  __Block_byref_age_0 *age; // by ref\n  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_age_0 *_age, int flags=0) : age(_age->__forwarding) {\n    impl.isa = &_NSConcreteStackBlock;\n    impl.Flags = flags;\n    impl.FuncPtr = fp;\n    Desc = desc;\n  }\n};\n\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n  __Block_byref_age_0 *age = __cself->age; // bound by ref\n      // __forwarding指向的结构体的age改为30，也就是__Block_byref_age_0结构体age本身的age的值修改为30\n      (age->__forwarding->age) = 30;\n      // 通过__forwarding找到指针，然后去取出age值。\n      NSLog((NSString *)&__NSConstantStringImpl__var_folders_sx_ygl_c8ln07jdwrz6w5rgbq8m0000gn_T_main_5da7ea_mi_0, (age->__forwarding->age));\n  }\n```\n\n## 4 循环引用处理\n\n1. weak\n2. __block\n3. __unsafe_unretained\n\n## 5. Block 的变量捕获原理\n\n### 5.1 [你真的理解__block修饰符的原理么？](https://blog.csdn.net/abc649395594/article/details/47086751)\n\n参考[^深入理解iOS的block]\n[^深入理解iOS的block]: [深入理解iOS的block](<https://juejin.cn/post/6844903893176958983#heading-37>)\n","slug":"iOS/Languages/Objective-C/Block","published":1,"updated":"2021-09-22T06:56:40.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3k003miu9kfnoifm6f","content":"<h2 id=\"1-iOS-Block底层实现原理\"><a href=\"#1-iOS-Block底层实现原理\" class=\"headerlink\" title=\"1. iOS-Block底层实现原理\"></a>1. <a href=\"https://limeng99.club/learning/2020/05/25/iOS-Block%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html\">iOS-Block底层实现原理</a></h2><h2 id=\"2-Block-类型\"><a href=\"#2-Block-类型\" class=\"headerlink\" title=\"2. Block 类型\"></a>2. Block 类型</h2><h3 id=\"2-1-全局-Block\"><a href=\"#2-1-全局-Block\" class=\"headerlink\" title=\"2.1 全局 Block\"></a>2.1 全局 Block</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> (^global_block)(<span class=\"keyword\">void</span>) = ^&#123;</span><br><span class=\"line\">    NSLog(@<span class=\"string\">&quot;global_block&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-栈-Block\"><a href=\"#2-2-栈-Block\" class=\"headerlink\" title=\"2.2 栈 Block\"></a>2.2 栈 Block</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> __block <span class=\"keyword\">int</span> age = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> (^stack_block)(<span class=\"keyword\">void</span>) = ^&#123;</span><br><span class=\"line\">    NSLog(@<span class=\"string\">&quot;stack_block %d&quot;</span>, age++);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-堆-Block\"><a href=\"#2-3-堆-Block\" class=\"headerlink\" title=\"2.3 堆 Block\"></a>2.3 堆 Block</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> (^malloc_block)(<span class=\"keyword\">void</span>) = [stack_block copy];</span><br></pre></td></tr></table></figure>\n\n<p>block 发生 copy 的时机：</p>\n<ol>\n<li>copy 操作；</li>\n<li>函数返回值；</li>\n<li>赋值给__strong 修饰符 id 类型的类 或者 Block 类型成员时；</li>\n<li>方法名中有 useingBlock 的 cocoa 框架方法或者 GCD 中的 api 传递时；</li>\n</ol>\n<h2 id=\"3-Block-内部结构\"><a href=\"#3-Block-内部结构\" class=\"headerlink\" title=\"3. Block 内部结构\"></a>3. Block 内部结构</h2><ol>\n<li>全局变量捕获，不影响 block 结构；</li>\n<li>auto 变量 捕获成 block 结构体内的普通变量；</li>\n<li>static 变量捕获成 block 结构体内的指针类型变量；</li>\n<li>对象型变量捕获成 block 结构体内的对象型变量；</li>\n<li><code>__block</code> 型捕获成引用型 block 结构体；</li>\n<li><code>__weak</code> 型捕获成对象型 <code>__weak</code> block 结构体；</li>\n</ol>\n<h3 id=\"3-1-普通-Block-结构\"><a href=\"#3-1-普通-Block-结构\" class=\"headerlink\" title=\"3.1 普通 Block 结构\"></a>3.1 普通 Block 结构</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *isa;      <span class=\"comment\">//isa指针，所以说Block是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> Flags;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Reserved;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *FuncPtr;  <span class=\"comment\">//函数指针</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"comment\">// 构造函数（类似于OC的init方法），返回结构体对象</span></span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, <span class=\"keyword\">int</span> _age, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : age(_age) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;</span><br><span class=\"line\">    Desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age = __cself-&gt;age; <span class=\"comment\">// bound by copy</span></span><br><span class=\"line\">  NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_sx_ygl_c8ln07jdwrz6w5rgbq8m0000gn_T_blcok_8142ea_mi_0, age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> reserved;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> Block_size;</span><br><span class=\"line\">&#125; __main_block_desc_0_DATA = &#123; <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-捕获引用型变量-Block-结构\"><a href=\"#3-2-捕获引用型变量-Block-结构\" class=\"headerlink\" title=\"3.2 捕获引用型变量 Block 结构\"></a>3.2 捕获引用型变量 Block 结构</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  LMPerson *person;</span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, LMPerson *_person, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : person(_person) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;</span><br><span class=\"line\">    Desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-捕获Weak型变量-Block-结构\"><a href=\"#3-3-捕获Weak型变量-Block-结构\" class=\"headerlink\" title=\"3.3 捕获Weak型变量 Block 结构\"></a>3.3 捕获Weak型变量 Block 结构</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cannot create __weak reference because the current deployment target does not support weak references 报错时使用一下命令</span></span><br><span class=\"line\"><span class=\"comment\">// xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc -fobjc-arc -fobjc-runtime=ios-8.0.0 main.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  LMPerson *__weak weakPerson;</span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, LMPerson *__weak _weakPerson, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : weakPerson(_weakPerson) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;</span><br><span class=\"line\">    Desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> reserved;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> Block_size;</span><br><span class=\"line\">  <span class=\"comment\">// copy函数</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</span><br><span class=\"line\">  <span class=\"comment\">// dispose函数</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> (*dispose)(struct __main_block_impl_0*);</span><br><span class=\"line\">&#125; __main_block_desc_0_DATA = &#123; <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//copy函数内部会调用_Block_object_assign函数</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;weakPerson, (<span class=\"keyword\">void</span>*)src-&gt;weakPerson, <span class=\"number\">3</span><span class=\"comment\">/*BLOCK_FIELD_IS_OBJECT*/</span>);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dispose函数内部会调用_Block_object_dispose函数</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;weakPerson, <span class=\"number\">3</span><span class=\"comment\">/*BLOCK_FIELD_IS_OBJECT*/</span>);&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-捕获-block-型变量-Block-结构\"><a href=\"#3-4-捕获-block-型变量-Block-结构\" class=\"headerlink\" title=\"3.4 捕获 __block 型变量 Block 结构\"></a>3.4 捕获 __block 型变量 Block 结构</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">Block_byref_age_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *__isa;</span><br><span class=\"line\">  __Block_byref_age_0 *__forwarding; <span class=\"comment\">// 指向自身的指针</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> __flags;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> __size;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age; <span class=\"comment\">// 使用值</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  __Block_byref_age_0 *age; <span class=\"comment\">// by ref</span></span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, __Block_byref_age_0 *_age, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : age(_age-&gt;__forwarding) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;</span><br><span class=\"line\">    Desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class=\"line\">  __Block_byref_age_0 *age = __cself-&gt;age; <span class=\"comment\">// bound by ref</span></span><br><span class=\"line\">      <span class=\"comment\">// __forwarding指向的结构体的age改为30，也就是__Block_byref_age_0结构体age本身的age的值修改为30</span></span><br><span class=\"line\">      (age-&gt;__forwarding-&gt;age) = <span class=\"number\">30</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 通过__forwarding找到指针，然后去取出age值。</span></span><br><span class=\"line\">      NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_sx_ygl_c8ln07jdwrz6w5rgbq8m0000gn_T_main_5da7ea_mi_0, (age-&gt;__forwarding-&gt;age));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-循环引用处理\"><a href=\"#4-循环引用处理\" class=\"headerlink\" title=\"4 循环引用处理\"></a>4 循环引用处理</h2><ol>\n<li>weak</li>\n<li>__block</li>\n<li>__unsafe_unretained</li>\n</ol>\n<h2 id=\"5-Block-的变量捕获原理\"><a href=\"#5-Block-的变量捕获原理\" class=\"headerlink\" title=\"5. Block 的变量捕获原理\"></a>5. Block 的变量捕获原理</h2><h3 id=\"5-1-你真的理解-block修饰符的原理么？\"><a href=\"#5-1-你真的理解-block修饰符的原理么？\" class=\"headerlink\" title=\"5.1 你真的理解__block修饰符的原理么？\"></a>5.1 <a href=\"https://blog.csdn.net/abc649395594/article/details/47086751\">你真的理解__block修饰符的原理么？</a></h3><p>参考[^深入理解iOS的block]<br>[^深入理解iOS的block]: <a href=\"https://juejin.cn/post/6844903893176958983#heading-37\">深入理解iOS的block</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-iOS-Block底层实现原理\"><a href=\"#1-iOS-Block底层实现原理\" class=\"headerlink\" title=\"1. iOS-Block底层实现原理\"></a>1. <a href=\"https://limeng99.club/learning/2020/05/25/iOS-Block%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html\">iOS-Block底层实现原理</a></h2><h2 id=\"2-Block-类型\"><a href=\"#2-Block-类型\" class=\"headerlink\" title=\"2. Block 类型\"></a>2. Block 类型</h2><h3 id=\"2-1-全局-Block\"><a href=\"#2-1-全局-Block\" class=\"headerlink\" title=\"2.1 全局 Block\"></a>2.1 全局 Block</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> (^global_block)(<span class=\"keyword\">void</span>) = ^&#123;</span><br><span class=\"line\">    NSLog(@<span class=\"string\">&quot;global_block&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-栈-Block\"><a href=\"#2-2-栈-Block\" class=\"headerlink\" title=\"2.2 栈 Block\"></a>2.2 栈 Block</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> __block <span class=\"keyword\">int</span> age = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> (^stack_block)(<span class=\"keyword\">void</span>) = ^&#123;</span><br><span class=\"line\">    NSLog(@<span class=\"string\">&quot;stack_block %d&quot;</span>, age++);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-堆-Block\"><a href=\"#2-3-堆-Block\" class=\"headerlink\" title=\"2.3 堆 Block\"></a>2.3 堆 Block</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> (^malloc_block)(<span class=\"keyword\">void</span>) = [stack_block copy];</span><br></pre></td></tr></table></figure>\n\n<p>block 发生 copy 的时机：</p>\n<ol>\n<li>copy 操作；</li>\n<li>函数返回值；</li>\n<li>赋值给__strong 修饰符 id 类型的类 或者 Block 类型成员时；</li>\n<li>方法名中有 useingBlock 的 cocoa 框架方法或者 GCD 中的 api 传递时；</li>\n</ol>\n<h2 id=\"3-Block-内部结构\"><a href=\"#3-Block-内部结构\" class=\"headerlink\" title=\"3. Block 内部结构\"></a>3. Block 内部结构</h2><ol>\n<li>全局变量捕获，不影响 block 结构；</li>\n<li>auto 变量 捕获成 block 结构体内的普通变量；</li>\n<li>static 变量捕获成 block 结构体内的指针类型变量；</li>\n<li>对象型变量捕获成 block 结构体内的对象型变量；</li>\n<li><code>__block</code> 型捕获成引用型 block 结构体；</li>\n<li><code>__weak</code> 型捕获成对象型 <code>__weak</code> block 结构体；</li>\n</ol>\n<h3 id=\"3-1-普通-Block-结构\"><a href=\"#3-1-普通-Block-结构\" class=\"headerlink\" title=\"3.1 普通 Block 结构\"></a>3.1 普通 Block 结构</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *isa;      <span class=\"comment\">//isa指针，所以说Block是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> Flags;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> Reserved;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *FuncPtr;  <span class=\"comment\">//函数指针</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">  <span class=\"comment\">// 构造函数（类似于OC的init方法），返回结构体对象</span></span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, <span class=\"keyword\">int</span> _age, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : age(_age) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;</span><br><span class=\"line\">    Desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age = __cself-&gt;age; <span class=\"comment\">// bound by copy</span></span><br><span class=\"line\">  NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_sx_ygl_c8ln07jdwrz6w5rgbq8m0000gn_T_blcok_8142ea_mi_0, age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> reserved;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> Block_size;</span><br><span class=\"line\">&#125; __main_block_desc_0_DATA = &#123; <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct __main_block_impl_0)&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-捕获引用型变量-Block-结构\"><a href=\"#3-2-捕获引用型变量-Block-结构\" class=\"headerlink\" title=\"3.2 捕获引用型变量 Block 结构\"></a>3.2 捕获引用型变量 Block 结构</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  LMPerson *person;</span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, LMPerson *_person, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : person(_person) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;</span><br><span class=\"line\">    Desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-捕获Weak型变量-Block-结构\"><a href=\"#3-3-捕获Weak型变量-Block-结构\" class=\"headerlink\" title=\"3.3 捕获Weak型变量 Block 结构\"></a>3.3 捕获Weak型变量 Block 结构</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cannot create __weak reference because the current deployment target does not support weak references 报错时使用一下命令</span></span><br><span class=\"line\"><span class=\"comment\">// xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc -fobjc-arc -fobjc-runtime=ios-8.0.0 main.m</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  LMPerson *__weak weakPerson;</span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, LMPerson *__weak _weakPerson, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : weakPerson(_weakPerson) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;</span><br><span class=\"line\">    Desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> reserved;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> Block_size;</span><br><span class=\"line\">  <span class=\"comment\">// copy函数</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</span><br><span class=\"line\">  <span class=\"comment\">// dispose函数</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> (*dispose)(struct __main_block_impl_0*);</span><br><span class=\"line\">&#125; __main_block_desc_0_DATA = &#123; <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//copy函数内部会调用_Block_object_assign函数</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((<span class=\"keyword\">void</span>*)&amp;dst-&gt;weakPerson, (<span class=\"keyword\">void</span>*)src-&gt;weakPerson, <span class=\"number\">3</span><span class=\"comment\">/*BLOCK_FIELD_IS_OBJECT*/</span>);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dispose函数内部会调用_Block_object_dispose函数</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((<span class=\"keyword\">void</span>*)src-&gt;weakPerson, <span class=\"number\">3</span><span class=\"comment\">/*BLOCK_FIELD_IS_OBJECT*/</span>);&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-捕获-block-型变量-Block-结构\"><a href=\"#3-4-捕获-block-型变量-Block-结构\" class=\"headerlink\" title=\"3.4 捕获 __block 型变量 Block 结构\"></a>3.4 捕获 __block 型变量 Block 结构</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.cpp</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">Block_byref_age_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *__isa;</span><br><span class=\"line\">  __Block_byref_age_0 *__forwarding; <span class=\"comment\">// 指向自身的指针</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> __flags;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> __size;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> age; <span class=\"comment\">// 使用值</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_impl_0</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">block_impl</span> <span class=\"title\">impl</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">main_block_desc_0</span>* <span class=\"title\">Desc</span>;</span></span><br><span class=\"line\">  __Block_byref_age_0 *age; <span class=\"comment\">// by ref</span></span><br><span class=\"line\">  __main_block_impl_0(<span class=\"keyword\">void</span> *fp, struct __main_block_desc_0 *desc, __Block_byref_age_0 *_age, <span class=\"keyword\">int</span> flags=<span class=\"number\">0</span>) : age(_age-&gt;__forwarding) &#123;</span><br><span class=\"line\">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">    impl.Flags = flags;</span><br><span class=\"line\">    impl.FuncPtr = fp;</span><br><span class=\"line\">    Desc = desc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class=\"line\">  __Block_byref_age_0 *age = __cself-&gt;age; <span class=\"comment\">// bound by ref</span></span><br><span class=\"line\">      <span class=\"comment\">// __forwarding指向的结构体的age改为30，也就是__Block_byref_age_0结构体age本身的age的值修改为30</span></span><br><span class=\"line\">      (age-&gt;__forwarding-&gt;age) = <span class=\"number\">30</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 通过__forwarding找到指针，然后去取出age值。</span></span><br><span class=\"line\">      NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_sx_ygl_c8ln07jdwrz6w5rgbq8m0000gn_T_main_5da7ea_mi_0, (age-&gt;__forwarding-&gt;age));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-循环引用处理\"><a href=\"#4-循环引用处理\" class=\"headerlink\" title=\"4 循环引用处理\"></a>4 循环引用处理</h2><ol>\n<li>weak</li>\n<li>__block</li>\n<li>__unsafe_unretained</li>\n</ol>\n<h2 id=\"5-Block-的变量捕获原理\"><a href=\"#5-Block-的变量捕获原理\" class=\"headerlink\" title=\"5. Block 的变量捕获原理\"></a>5. Block 的变量捕获原理</h2><h3 id=\"5-1-你真的理解-block修饰符的原理么？\"><a href=\"#5-1-你真的理解-block修饰符的原理么？\" class=\"headerlink\" title=\"5.1 你真的理解__block修饰符的原理么？\"></a>5.1 <a href=\"https://blog.csdn.net/abc649395594/article/details/47086751\">你真的理解__block修饰符的原理么？</a></h3><p>参考[^深入理解iOS的block]<br>[^深入理解iOS的block]: <a href=\"https://juejin.cn/post/6844903893176958983#heading-37\">深入理解iOS的block</a></p>\n"},{"title":"iOS之KVC","abbrlink":"21e88a28","date":"2021-05-21T16:00:00.000Z","_content":"\n## 1. [Key-Value Coding Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1)\n\n## 2. [iOS开发 - KVC原理分析](http://cloverkim.com/ios_kvc-principle.html#:~:text=KVC%EF%BC%88%E5%85%A8%E7%A7%B0key%2Dvalue%20coding,%E4%B8%8D%E6%98%AF%E5%9C%A8%E7%BC%96%E8%AF%91%E6%97%B6%E7%A1%AE%E5%AE%9A%E3%80%82)\n\n### 2.1 键值的取舍过程\n\n### 2.2 集合操作\n\n### 2.3 异常处理\n\n### 2.4 安全检查\n","source":"_posts/iOS/Languages/Objective-C/KVC.md","raw":"---\ntitle: iOS之KVC\nabbrlink: 21e88a28\ndate: 2021-05-22 00:00:00\ntags:\n---\n\n## 1. [Key-Value Coding Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1)\n\n## 2. [iOS开发 - KVC原理分析](http://cloverkim.com/ios_kvc-principle.html#:~:text=KVC%EF%BC%88%E5%85%A8%E7%A7%B0key%2Dvalue%20coding,%E4%B8%8D%E6%98%AF%E5%9C%A8%E7%BC%96%E8%AF%91%E6%97%B6%E7%A1%AE%E5%AE%9A%E3%80%82)\n\n### 2.1 键值的取舍过程\n\n### 2.2 集合操作\n\n### 2.3 异常处理\n\n### 2.4 安全检查\n","slug":"iOS/Languages/Objective-C/KVC","published":1,"updated":"2021-09-22T06:56:40.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3l003niu9khyatec5l","content":"<h2 id=\"1-Key-Value-Coding-Programming-Guide\"><a href=\"#1-Key-Value-Coding-Programming-Guide\" class=\"headerlink\" title=\"1. Key-Value Coding Programming Guide\"></a>1. <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1\">Key-Value Coding Programming Guide</a></h2><h2 id=\"2-iOS开发-KVC原理分析\"><a href=\"#2-iOS开发-KVC原理分析\" class=\"headerlink\" title=\"2. iOS开发 - KVC原理分析\"></a>2. <a href=\"http://cloverkim.com/ios_kvc-principle.html#:~:text=KVC%EF%BC%88%E5%85%A8%E7%A7%B0key%2Dvalue%20coding,%E4%B8%8D%E6%98%AF%E5%9C%A8%E7%BC%96%E8%AF%91%E6%97%B6%E7%A1%AE%E5%AE%9A%E3%80%82\">iOS开发 - KVC原理分析</a></h2><h3 id=\"2-1-键值的取舍过程\"><a href=\"#2-1-键值的取舍过程\" class=\"headerlink\" title=\"2.1 键值的取舍过程\"></a>2.1 键值的取舍过程</h3><h3 id=\"2-2-集合操作\"><a href=\"#2-2-集合操作\" class=\"headerlink\" title=\"2.2 集合操作\"></a>2.2 集合操作</h3><h3 id=\"2-3-异常处理\"><a href=\"#2-3-异常处理\" class=\"headerlink\" title=\"2.3 异常处理\"></a>2.3 异常处理</h3><h3 id=\"2-4-安全检查\"><a href=\"#2-4-安全检查\" class=\"headerlink\" title=\"2.4 安全检查\"></a>2.4 安全检查</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Key-Value-Coding-Programming-Guide\"><a href=\"#1-Key-Value-Coding-Programming-Guide\" class=\"headerlink\" title=\"1. Key-Value Coding Programming Guide\"></a>1. <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1\">Key-Value Coding Programming Guide</a></h2><h2 id=\"2-iOS开发-KVC原理分析\"><a href=\"#2-iOS开发-KVC原理分析\" class=\"headerlink\" title=\"2. iOS开发 - KVC原理分析\"></a>2. <a href=\"http://cloverkim.com/ios_kvc-principle.html#:~:text=KVC%EF%BC%88%E5%85%A8%E7%A7%B0key%2Dvalue%20coding,%E4%B8%8D%E6%98%AF%E5%9C%A8%E7%BC%96%E8%AF%91%E6%97%B6%E7%A1%AE%E5%AE%9A%E3%80%82\">iOS开发 - KVC原理分析</a></h2><h3 id=\"2-1-键值的取舍过程\"><a href=\"#2-1-键值的取舍过程\" class=\"headerlink\" title=\"2.1 键值的取舍过程\"></a>2.1 键值的取舍过程</h3><h3 id=\"2-2-集合操作\"><a href=\"#2-2-集合操作\" class=\"headerlink\" title=\"2.2 集合操作\"></a>2.2 集合操作</h3><h3 id=\"2-3-异常处理\"><a href=\"#2-3-异常处理\" class=\"headerlink\" title=\"2.3 异常处理\"></a>2.3 异常处理</h3><h3 id=\"2-4-安全检查\"><a href=\"#2-4-安全检查\" class=\"headerlink\" title=\"2.4 安全检查\"></a>2.4 安全检查</h3>"},{"title":"iOS之KVO","abbrlink":"285ec603","date":"2021-05-21T16:00:00.000Z","_content":"\n## 1. [KVO实现原理](https://juejin.cn/post/6844903856267231246)\n\n## 2. [iOS开发·KVO用法，原理与底层实现: runtime模拟实现KVO监听机制（Blcok及Delgate方式）](https://juejin.cn/post/6844903602784305159#heading-5)\n\n## 3. [iOS基础全面分析之三(KVO全面分析)](https://www.jianshu.com/p/1509ee53cda5)\n\n## 4. [Introduction to Key-Value Observing Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA)\n","source":"_posts/iOS/Languages/Objective-C/KVO.md","raw":"---\ntitle: iOS之KVO\nabbrlink: 285ec603\ndate: 2021-05-22 00:00:00\ntags:\n---\n\n## 1. [KVO实现原理](https://juejin.cn/post/6844903856267231246)\n\n## 2. [iOS开发·KVO用法，原理与底层实现: runtime模拟实现KVO监听机制（Blcok及Delgate方式）](https://juejin.cn/post/6844903602784305159#heading-5)\n\n## 3. [iOS基础全面分析之三(KVO全面分析)](https://www.jianshu.com/p/1509ee53cda5)\n\n## 4. [Introduction to Key-Value Observing Programming Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA)\n","slug":"iOS/Languages/Objective-C/KVO","published":1,"updated":"2021-07-29T06:45:57.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3l003oiu9k6a6u359r","content":"<h2 id=\"1-KVO实现原理\"><a href=\"#1-KVO实现原理\" class=\"headerlink\" title=\"1. KVO实现原理\"></a>1. <a href=\"https://juejin.cn/post/6844903856267231246\">KVO实现原理</a></h2><h2 id=\"2-iOS开发·KVO用法，原理与底层实现-runtime模拟实现KVO监听机制（Blcok及Delgate方式）\"><a href=\"#2-iOS开发·KVO用法，原理与底层实现-runtime模拟实现KVO监听机制（Blcok及Delgate方式）\" class=\"headerlink\" title=\"2. iOS开发·KVO用法，原理与底层实现: runtime模拟实现KVO监听机制（Blcok及Delgate方式）\"></a>2. <a href=\"https://juejin.cn/post/6844903602784305159#heading-5\">iOS开发·KVO用法，原理与底层实现: runtime模拟实现KVO监听机制（Blcok及Delgate方式）</a></h2><h2 id=\"3-iOS基础全面分析之三-KVO全面分析\"><a href=\"#3-iOS基础全面分析之三-KVO全面分析\" class=\"headerlink\" title=\"3. iOS基础全面分析之三(KVO全面分析)\"></a>3. <a href=\"https://www.jianshu.com/p/1509ee53cda5\">iOS基础全面分析之三(KVO全面分析)</a></h2><h2 id=\"4-Introduction-to-Key-Value-Observing-Programming-Guide\"><a href=\"#4-Introduction-to-Key-Value-Observing-Programming-Guide\" class=\"headerlink\" title=\"4. Introduction to Key-Value Observing Programming Guide\"></a>4. <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA\">Introduction to Key-Value Observing Programming Guide</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-KVO实现原理\"><a href=\"#1-KVO实现原理\" class=\"headerlink\" title=\"1. KVO实现原理\"></a>1. <a href=\"https://juejin.cn/post/6844903856267231246\">KVO实现原理</a></h2><h2 id=\"2-iOS开发·KVO用法，原理与底层实现-runtime模拟实现KVO监听机制（Blcok及Delgate方式）\"><a href=\"#2-iOS开发·KVO用法，原理与底层实现-runtime模拟实现KVO监听机制（Blcok及Delgate方式）\" class=\"headerlink\" title=\"2. iOS开发·KVO用法，原理与底层实现: runtime模拟实现KVO监听机制（Blcok及Delgate方式）\"></a>2. <a href=\"https://juejin.cn/post/6844903602784305159#heading-5\">iOS开发·KVO用法，原理与底层实现: runtime模拟实现KVO监听机制（Blcok及Delgate方式）</a></h2><h2 id=\"3-iOS基础全面分析之三-KVO全面分析\"><a href=\"#3-iOS基础全面分析之三-KVO全面分析\" class=\"headerlink\" title=\"3. iOS基础全面分析之三(KVO全面分析)\"></a>3. <a href=\"https://www.jianshu.com/p/1509ee53cda5\">iOS基础全面分析之三(KVO全面分析)</a></h2><h2 id=\"4-Introduction-to-Key-Value-Observing-Programming-Guide\"><a href=\"#4-Introduction-to-Key-Value-Observing-Programming-Guide\" class=\"headerlink\" title=\"4. Introduction to Key-Value Observing Programming Guide\"></a>4. <a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177-BCICJDHA\">Introduction to Key-Value Observing Programming Guide</a></h2>"},{"title":"iOS之内存管理","abbrlink":"7f25729a","date":"2021-04-19T16:00:00.000Z","_content":"\n## 内存管理原则\n\n1、自己生成的对象，自己持有\n\n    alloc\n    new\n    copy\n    mutablecopy\n\n2、非自己生成的对象，自己也能持有\n\n    [NSMutableArray array];\n    等等\n\n3、不再需要自己持有的对象要释放\n4、非自己持有的对象无法释放\n\n实现方式\n\n    alloc/retain/release/dealloc\n    autorelease\n\nARC\n\n原则\n\n    同MRC原则\n\n方式：\n\n    __strong\n    __weak\n    __unsafe-unretain\n    __autorelease\n\n规则\n\n    不能使用retain/release/retainCount/autorelease\n    不能使用NSAllocateObject/NSDeallocateObject\n    遵循内存管理命名规则\n    dealloc\n    使用@autoreleasePool代替NSAutoreleasePool\n    不能使用NSZone\n    对象形变量不能作为C语言结构体成员\n    显示转换id 和 （void *）\n\n属性\n\n    assign\n    strong\n    copy\n    retain\n    unsafe_unretained\n    weak \n\n数组\n\n    动态数组 id __strong *array = [NSMutableArray array]\n    释放\n\n实现方式：\n\n    __strong：自动注册到autoreleasePool中\n    __weak：自动注册到autoreleasePool中，是否可weak，weak变量释放流程\n    __autorelease：autorelease的方式\n","source":"_posts/iOS/Languages/Objective-C/Memory.md","raw":"---\ntitle: iOS之内存管理\nabbrlink: 7f25729a\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n## 内存管理原则\n\n1、自己生成的对象，自己持有\n\n    alloc\n    new\n    copy\n    mutablecopy\n\n2、非自己生成的对象，自己也能持有\n\n    [NSMutableArray array];\n    等等\n\n3、不再需要自己持有的对象要释放\n4、非自己持有的对象无法释放\n\n实现方式\n\n    alloc/retain/release/dealloc\n    autorelease\n\nARC\n\n原则\n\n    同MRC原则\n\n方式：\n\n    __strong\n    __weak\n    __unsafe-unretain\n    __autorelease\n\n规则\n\n    不能使用retain/release/retainCount/autorelease\n    不能使用NSAllocateObject/NSDeallocateObject\n    遵循内存管理命名规则\n    dealloc\n    使用@autoreleasePool代替NSAutoreleasePool\n    不能使用NSZone\n    对象形变量不能作为C语言结构体成员\n    显示转换id 和 （void *）\n\n属性\n\n    assign\n    strong\n    copy\n    retain\n    unsafe_unretained\n    weak \n\n数组\n\n    动态数组 id __strong *array = [NSMutableArray array]\n    释放\n\n实现方式：\n\n    __strong：自动注册到autoreleasePool中\n    __weak：自动注册到autoreleasePool中，是否可weak，weak变量释放流程\n    __autorelease：autorelease的方式\n","slug":"iOS/Languages/Objective-C/Memory","published":1,"updated":"2021-09-22T06:56:40.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3m003piu9kdi9i72g2","content":"<h2 id=\"内存管理原则\"><a href=\"#内存管理原则\" class=\"headerlink\" title=\"内存管理原则\"></a>内存管理原则</h2><p>1、自己生成的对象，自己持有</p>\n<pre><code>alloc\nnew\ncopy\nmutablecopy\n</code></pre>\n<p>2、非自己生成的对象，自己也能持有</p>\n<pre><code>[NSMutableArray array];\n等等\n</code></pre>\n<p>3、不再需要自己持有的对象要释放<br>4、非自己持有的对象无法释放</p>\n<p>实现方式</p>\n<pre><code>alloc/retain/release/dealloc\nautorelease\n</code></pre>\n<p>ARC</p>\n<p>原则</p>\n<pre><code>同MRC原则\n</code></pre>\n<p>方式：</p>\n<pre><code>__strong\n__weak\n__unsafe-unretain\n__autorelease\n</code></pre>\n<p>规则</p>\n<pre><code>不能使用retain/release/retainCount/autorelease\n不能使用NSAllocateObject/NSDeallocateObject\n遵循内存管理命名规则\ndealloc\n使用@autoreleasePool代替NSAutoreleasePool\n不能使用NSZone\n对象形变量不能作为C语言结构体成员\n显示转换id 和 （void *）\n</code></pre>\n<p>属性</p>\n<pre><code>assign\nstrong\ncopy\nretain\nunsafe_unretained\nweak \n</code></pre>\n<p>数组</p>\n<pre><code>动态数组 id __strong *array = [NSMutableArray array]\n释放\n</code></pre>\n<p>实现方式：</p>\n<pre><code>__strong：自动注册到autoreleasePool中\n__weak：自动注册到autoreleasePool中，是否可weak，weak变量释放流程\n__autorelease：autorelease的方式\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内存管理原则\"><a href=\"#内存管理原则\" class=\"headerlink\" title=\"内存管理原则\"></a>内存管理原则</h2><p>1、自己生成的对象，自己持有</p>\n<pre><code>alloc\nnew\ncopy\nmutablecopy\n</code></pre>\n<p>2、非自己生成的对象，自己也能持有</p>\n<pre><code>[NSMutableArray array];\n等等\n</code></pre>\n<p>3、不再需要自己持有的对象要释放<br>4、非自己持有的对象无法释放</p>\n<p>实现方式</p>\n<pre><code>alloc/retain/release/dealloc\nautorelease\n</code></pre>\n<p>ARC</p>\n<p>原则</p>\n<pre><code>同MRC原则\n</code></pre>\n<p>方式：</p>\n<pre><code>__strong\n__weak\n__unsafe-unretain\n__autorelease\n</code></pre>\n<p>规则</p>\n<pre><code>不能使用retain/release/retainCount/autorelease\n不能使用NSAllocateObject/NSDeallocateObject\n遵循内存管理命名规则\ndealloc\n使用@autoreleasePool代替NSAutoreleasePool\n不能使用NSZone\n对象形变量不能作为C语言结构体成员\n显示转换id 和 （void *）\n</code></pre>\n<p>属性</p>\n<pre><code>assign\nstrong\ncopy\nretain\nunsafe_unretained\nweak \n</code></pre>\n<p>数组</p>\n<pre><code>动态数组 id __strong *array = [NSMutableArray array]\n释放\n</code></pre>\n<p>实现方式：</p>\n<pre><code>__strong：自动注册到autoreleasePool中\n__weak：自动注册到autoreleasePool中，是否可weak，weak变量释放流程\n__autorelease：autorelease的方式\n</code></pre>\n"},{"title":"iOS之内存管理","abbrlink":34950,"date":"2021-09-16T14:16:00.000Z","_content":"\n## 1. 基础\n\nobjc4 源码 与 [基本类型](./Types.md)\n\n## 2 对象初始化\n\n```objective-c\nCar *car = [[Car alloc] init];\n// or\nCar *car = [Car new];\n```\n\n* `alloc`: 计算/分配内存、关联 `isa`\n* `init` 返回 `self`\n* `new` 相当于 先调用 `alloc` 在调用 `init`\n\n## 3 内存模型\n\n```Objective-C\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n/* Use `Class` instead of `struct objc_class *` */\n\n/// An opaque type that represents an Objective-C class.\ntypedef struct objc_class *Class;\n```\n\n```Objective-C\n@interface NSObject <NSObject> {\n    Class isa  OBJC_ISA_AVAILABILITY;\n}\n```\n\n对象获取类 isa\n\n```Objective-C\n- (Class)class {\n    return object_getClass(self);\n}\n\nClass object_getClass(id obj)\n{\n    if (obj) return obj->getIsa();\n    else return Nil;\n}\n\ninline Class \nobjc_object::getIsa() \n{\n    if (isTaggedPointer()) {\n        uintptr_t slot = ((uintptr_t)this >> TAG_SLOT_SHIFT) & TAG_SLOT_MASK;\n        return objc_tag_classes[slot];\n    }\n    return ISA();\n}\n\ninline Class \nobjc_object::ISA() \n{\n    assert(!isTaggedPointer()); \n    return (Class)(isa.bits & ISA_MASK);\n}\n```\n\nOC 有一个类似的方法，不过这个方法是通过名字获取相应的类\n\n```Objective-C\nstatic Class getClass(const char *name)\n{\n    runtimeLock.assertLocked();\n\n    // Try name as-is\n    Class result = getClass_impl(name);\n    if (result) return result;\n\n    // Try Swift-mangled equivalent of the given name.\n    if (char *swName = copySwiftV1MangledName(name)) {\n        result = getClass_impl(swName);\n        free(swName);\n        return result;\n    }\n\n    return nil;\n}\n```\n\n![oc 内存模型](../Resources/oc_memory_struct.webp)\n\n获取 isa\n\n* [iOS底层原理总结 - 探寻OC对象的本质](https://juejin.cn/post/6844903588150378509)\n\n## 4 内存管理\n\n### 4.1 内存管理原则\n\n* 自己生成的对象，自己持有\n* 非自己生成的对象，自己也能持有\n* 不再需要自己持有的对象，要释放\n* 非自己持有的对象，无法释放\n\n| 对象操作         | OC 方法                           |\n| :--------------- | :-------------------------------- |\n| 生成并持有的对象 | alloc/new/copy/mutableCopy 等方法 |\n| 持有对象         | retain                            |\n| 释放对象         | release                           |\n| 废弃对象         | dealloc                           |\n\n### 4.2 内存管理方式\n\n#### 4.2.1 autorelease pool\n\n#### 4.2.2 所有权修饰符\n\n__strong\n\n__weak\n\n__unsafe_unretain\n\n__autorelease\n\n#### 4.2.3 属性权限修饰符\n\ncopy\n\nassign\n\nstrong\n\n循环引用&内存泄漏&Weak 原理\n\n[weak 实现原理](https://www.jianshu.com/p/13c4fb1cedea)\n\nBlock 内存管理\n\n野指针、悬垂指针（腾讯方案）\n\n僵尸代码\n","source":"_posts/iOS/Languages/Objective-C/MemoryManagement.md","raw":"---\ntitle: iOS之内存管理\nabbrlink: 34950\ndate: 2021-09-16 22:16:00\ntags:\n---\n\n## 1. 基础\n\nobjc4 源码 与 [基本类型](./Types.md)\n\n## 2 对象初始化\n\n```objective-c\nCar *car = [[Car alloc] init];\n// or\nCar *car = [Car new];\n```\n\n* `alloc`: 计算/分配内存、关联 `isa`\n* `init` 返回 `self`\n* `new` 相当于 先调用 `alloc` 在调用 `init`\n\n## 3 内存模型\n\n```Objective-C\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n/* Use `Class` instead of `struct objc_class *` */\n\n/// An opaque type that represents an Objective-C class.\ntypedef struct objc_class *Class;\n```\n\n```Objective-C\n@interface NSObject <NSObject> {\n    Class isa  OBJC_ISA_AVAILABILITY;\n}\n```\n\n对象获取类 isa\n\n```Objective-C\n- (Class)class {\n    return object_getClass(self);\n}\n\nClass object_getClass(id obj)\n{\n    if (obj) return obj->getIsa();\n    else return Nil;\n}\n\ninline Class \nobjc_object::getIsa() \n{\n    if (isTaggedPointer()) {\n        uintptr_t slot = ((uintptr_t)this >> TAG_SLOT_SHIFT) & TAG_SLOT_MASK;\n        return objc_tag_classes[slot];\n    }\n    return ISA();\n}\n\ninline Class \nobjc_object::ISA() \n{\n    assert(!isTaggedPointer()); \n    return (Class)(isa.bits & ISA_MASK);\n}\n```\n\nOC 有一个类似的方法，不过这个方法是通过名字获取相应的类\n\n```Objective-C\nstatic Class getClass(const char *name)\n{\n    runtimeLock.assertLocked();\n\n    // Try name as-is\n    Class result = getClass_impl(name);\n    if (result) return result;\n\n    // Try Swift-mangled equivalent of the given name.\n    if (char *swName = copySwiftV1MangledName(name)) {\n        result = getClass_impl(swName);\n        free(swName);\n        return result;\n    }\n\n    return nil;\n}\n```\n\n![oc 内存模型](../Resources/oc_memory_struct.webp)\n\n获取 isa\n\n* [iOS底层原理总结 - 探寻OC对象的本质](https://juejin.cn/post/6844903588150378509)\n\n## 4 内存管理\n\n### 4.1 内存管理原则\n\n* 自己生成的对象，自己持有\n* 非自己生成的对象，自己也能持有\n* 不再需要自己持有的对象，要释放\n* 非自己持有的对象，无法释放\n\n| 对象操作         | OC 方法                           |\n| :--------------- | :-------------------------------- |\n| 生成并持有的对象 | alloc/new/copy/mutableCopy 等方法 |\n| 持有对象         | retain                            |\n| 释放对象         | release                           |\n| 废弃对象         | dealloc                           |\n\n### 4.2 内存管理方式\n\n#### 4.2.1 autorelease pool\n\n#### 4.2.2 所有权修饰符\n\n__strong\n\n__weak\n\n__unsafe_unretain\n\n__autorelease\n\n#### 4.2.3 属性权限修饰符\n\ncopy\n\nassign\n\nstrong\n\n循环引用&内存泄漏&Weak 原理\n\n[weak 实现原理](https://www.jianshu.com/p/13c4fb1cedea)\n\nBlock 内存管理\n\n野指针、悬垂指针（腾讯方案）\n\n僵尸代码\n","slug":"iOS/Languages/Objective-C/MemoryManagement","published":1,"updated":"2021-09-22T06:56:40.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3n003qiu9k0mp81ijf","content":"<h2 id=\"1-基础\"><a href=\"#1-基础\" class=\"headerlink\" title=\"1. 基础\"></a>1. 基础</h2><p>objc4 源码 与 <a href=\"./Types.md\">基本类型</a></p>\n<h2 id=\"2-对象初始化\"><a href=\"#2-对象初始化\" class=\"headerlink\" title=\"2 对象初始化\"></a>2 对象初始化</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Car *car = [[Car alloc] init];</span><br><span class=\"line\">// or</span><br><span class=\"line\">Car *car = [Car new];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>alloc</code>: 计算/分配内存、关联 <code>isa</code></li>\n<li><code>init</code> 返回 <code>self</code></li>\n<li><code>new</code> 相当于 先调用 <code>alloc</code> 在调用 <code>init</code></li>\n</ul>\n<h2 id=\"3-内存模型\"><a href=\"#3-内存模型\" class=\"headerlink\" title=\"3 内存模型\"></a>3 内存模型</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_class &#123;</span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\"></span><br><span class=\"line\">#if !__OBJC2__</span><br><span class=\"line\">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    const char * _Nonnull name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long version                                             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long info                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; OBJC2_UNAVAILABLE;</span><br><span class=\"line\">/* Use `Class` instead of `struct objc_class *` */</span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents an Objective-C class.</span><br><span class=\"line\">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface NSObject &lt;NSObject&gt; &#123;</span><br><span class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对象获取类 isa</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (Class)class &#123;</span><br><span class=\"line\">    return object_getClass(self);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class object_getClass(id obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (obj) return obj-&gt;getIsa();</span><br><span class=\"line\">    else return Nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inline Class </span><br><span class=\"line\">objc_object::getIsa() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (isTaggedPointer()) &#123;</span><br><span class=\"line\">        uintptr_t slot = ((uintptr_t)this &gt;&gt; TAG_SLOT_SHIFT) &amp; TAG_SLOT_MASK;</span><br><span class=\"line\">        return objc_tag_classes[slot];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ISA();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inline Class </span><br><span class=\"line\">objc_object::ISA() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    assert(!isTaggedPointer()); </span><br><span class=\"line\">    return (Class)(isa.bits &amp; ISA_MASK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OC 有一个类似的方法，不过这个方法是通过名字获取相应的类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static Class getClass(const char *name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    runtimeLock.assertLocked();</span><br><span class=\"line\"></span><br><span class=\"line\">    // Try name as-is</span><br><span class=\"line\">    Class result = getClass_impl(name);</span><br><span class=\"line\">    if (result) return result;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Try Swift-mangled equivalent of the given name.</span><br><span class=\"line\">    if (char *swName = copySwiftV1MangledName(name)) &#123;</span><br><span class=\"line\">        result = getClass_impl(swName);</span><br><span class=\"line\">        free(swName);</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return nil;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../Resources/oc_memory_struct.webp\" alt=\"oc 内存模型\"></p>\n<p>获取 isa</p>\n<ul>\n<li><a href=\"https://juejin.cn/post/6844903588150378509\">iOS底层原理总结 - 探寻OC对象的本质</a></li>\n</ul>\n<h2 id=\"4-内存管理\"><a href=\"#4-内存管理\" class=\"headerlink\" title=\"4 内存管理\"></a>4 内存管理</h2><h3 id=\"4-1-内存管理原则\"><a href=\"#4-1-内存管理原则\" class=\"headerlink\" title=\"4.1 内存管理原则\"></a>4.1 内存管理原则</h3><ul>\n<li>自己生成的对象，自己持有</li>\n<li>非自己生成的对象，自己也能持有</li>\n<li>不再需要自己持有的对象，要释放</li>\n<li>非自己持有的对象，无法释放</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">对象操作</th>\n<th align=\"left\">OC 方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">生成并持有的对象</td>\n<td align=\"left\">alloc/new/copy/mutableCopy 等方法</td>\n</tr>\n<tr>\n<td align=\"left\">持有对象</td>\n<td align=\"left\">retain</td>\n</tr>\n<tr>\n<td align=\"left\">释放对象</td>\n<td align=\"left\">release</td>\n</tr>\n<tr>\n<td align=\"left\">废弃对象</td>\n<td align=\"left\">dealloc</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-2-内存管理方式\"><a href=\"#4-2-内存管理方式\" class=\"headerlink\" title=\"4.2 内存管理方式\"></a>4.2 内存管理方式</h3><h4 id=\"4-2-1-autorelease-pool\"><a href=\"#4-2-1-autorelease-pool\" class=\"headerlink\" title=\"4.2.1 autorelease pool\"></a>4.2.1 autorelease pool</h4><h4 id=\"4-2-2-所有权修饰符\"><a href=\"#4-2-2-所有权修饰符\" class=\"headerlink\" title=\"4.2.2 所有权修饰符\"></a>4.2.2 所有权修饰符</h4><p>__strong</p>\n<p>__weak</p>\n<p>__unsafe_unretain</p>\n<p>__autorelease</p>\n<h4 id=\"4-2-3-属性权限修饰符\"><a href=\"#4-2-3-属性权限修饰符\" class=\"headerlink\" title=\"4.2.3 属性权限修饰符\"></a>4.2.3 属性权限修饰符</h4><p>copy</p>\n<p>assign</p>\n<p>strong</p>\n<p>循环引用&amp;内存泄漏&amp;Weak 原理</p>\n<p><a href=\"https://www.jianshu.com/p/13c4fb1cedea\">weak 实现原理</a></p>\n<p>Block 内存管理</p>\n<p>野指针、悬垂指针（腾讯方案）</p>\n<p>僵尸代码</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-基础\"><a href=\"#1-基础\" class=\"headerlink\" title=\"1. 基础\"></a>1. 基础</h2><p>objc4 源码 与 <a href=\"./Types.md\">基本类型</a></p>\n<h2 id=\"2-对象初始化\"><a href=\"#2-对象初始化\" class=\"headerlink\" title=\"2 对象初始化\"></a>2 对象初始化</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Car *car = [[Car alloc] init];</span><br><span class=\"line\">// or</span><br><span class=\"line\">Car *car = [Car new];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>alloc</code>: 计算/分配内存、关联 <code>isa</code></li>\n<li><code>init</code> 返回 <code>self</code></li>\n<li><code>new</code> 相当于 先调用 <code>alloc</code> 在调用 <code>init</code></li>\n</ul>\n<h2 id=\"3-内存模型\"><a href=\"#3-内存模型\" class=\"headerlink\" title=\"3 内存模型\"></a>3 内存模型</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_class &#123;</span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\"></span><br><span class=\"line\">#if !__OBJC2__</span><br><span class=\"line\">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    const char * _Nonnull name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long version                                             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long info                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; OBJC2_UNAVAILABLE;</span><br><span class=\"line\">/* Use `Class` instead of `struct objc_class *` */</span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents an Objective-C class.</span><br><span class=\"line\">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface NSObject &lt;NSObject&gt; &#123;</span><br><span class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对象获取类 isa</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (Class)class &#123;</span><br><span class=\"line\">    return object_getClass(self);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class object_getClass(id obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (obj) return obj-&gt;getIsa();</span><br><span class=\"line\">    else return Nil;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inline Class </span><br><span class=\"line\">objc_object::getIsa() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (isTaggedPointer()) &#123;</span><br><span class=\"line\">        uintptr_t slot = ((uintptr_t)this &gt;&gt; TAG_SLOT_SHIFT) &amp; TAG_SLOT_MASK;</span><br><span class=\"line\">        return objc_tag_classes[slot];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return ISA();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">inline Class </span><br><span class=\"line\">objc_object::ISA() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    assert(!isTaggedPointer()); </span><br><span class=\"line\">    return (Class)(isa.bits &amp; ISA_MASK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OC 有一个类似的方法，不过这个方法是通过名字获取相应的类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static Class getClass(const char *name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    runtimeLock.assertLocked();</span><br><span class=\"line\"></span><br><span class=\"line\">    // Try name as-is</span><br><span class=\"line\">    Class result = getClass_impl(name);</span><br><span class=\"line\">    if (result) return result;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Try Swift-mangled equivalent of the given name.</span><br><span class=\"line\">    if (char *swName = copySwiftV1MangledName(name)) &#123;</span><br><span class=\"line\">        result = getClass_impl(swName);</span><br><span class=\"line\">        free(swName);</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return nil;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../Resources/oc_memory_struct.webp\" alt=\"oc 内存模型\"></p>\n<p>获取 isa</p>\n<ul>\n<li><a href=\"https://juejin.cn/post/6844903588150378509\">iOS底层原理总结 - 探寻OC对象的本质</a></li>\n</ul>\n<h2 id=\"4-内存管理\"><a href=\"#4-内存管理\" class=\"headerlink\" title=\"4 内存管理\"></a>4 内存管理</h2><h3 id=\"4-1-内存管理原则\"><a href=\"#4-1-内存管理原则\" class=\"headerlink\" title=\"4.1 内存管理原则\"></a>4.1 内存管理原则</h3><ul>\n<li>自己生成的对象，自己持有</li>\n<li>非自己生成的对象，自己也能持有</li>\n<li>不再需要自己持有的对象，要释放</li>\n<li>非自己持有的对象，无法释放</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">对象操作</th>\n<th align=\"left\">OC 方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">生成并持有的对象</td>\n<td align=\"left\">alloc/new/copy/mutableCopy 等方法</td>\n</tr>\n<tr>\n<td align=\"left\">持有对象</td>\n<td align=\"left\">retain</td>\n</tr>\n<tr>\n<td align=\"left\">释放对象</td>\n<td align=\"left\">release</td>\n</tr>\n<tr>\n<td align=\"left\">废弃对象</td>\n<td align=\"left\">dealloc</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-2-内存管理方式\"><a href=\"#4-2-内存管理方式\" class=\"headerlink\" title=\"4.2 内存管理方式\"></a>4.2 内存管理方式</h3><h4 id=\"4-2-1-autorelease-pool\"><a href=\"#4-2-1-autorelease-pool\" class=\"headerlink\" title=\"4.2.1 autorelease pool\"></a>4.2.1 autorelease pool</h4><h4 id=\"4-2-2-所有权修饰符\"><a href=\"#4-2-2-所有权修饰符\" class=\"headerlink\" title=\"4.2.2 所有权修饰符\"></a>4.2.2 所有权修饰符</h4><p>__strong</p>\n<p>__weak</p>\n<p>__unsafe_unretain</p>\n<p>__autorelease</p>\n<h4 id=\"4-2-3-属性权限修饰符\"><a href=\"#4-2-3-属性权限修饰符\" class=\"headerlink\" title=\"4.2.3 属性权限修饰符\"></a>4.2.3 属性权限修饰符</h4><p>copy</p>\n<p>assign</p>\n<p>strong</p>\n<p>循环引用&amp;内存泄漏&amp;Weak 原理</p>\n<p><a href=\"https://www.jianshu.com/p/13c4fb1cedea\">weak 实现原理</a></p>\n<p>Block 内存管理</p>\n<p>野指针、悬垂指针（腾讯方案）</p>\n<p>僵尸代码</p>\n"},{"title":"iOS编程语言之 NSDictionary底层实现原理","abbrlink":"2030c7c4","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [NSDictionary底层实现原理](https://www.jianshu.com/p/2fd9680b46f6)\n","source":"_posts/iOS/Languages/Objective-C/NSDIctionary.md","raw":"---\ntitle: iOS编程语言之 NSDictionary底层实现原理\nabbrlink: 2030c7c4\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [NSDictionary底层实现原理](https://www.jianshu.com/p/2fd9680b46f6)\n","slug":"iOS/Languages/Objective-C/NSDIctionary","published":1,"updated":"2021-07-29T06:45:57.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3o003riu9k8kn68mdw","content":"<h2 id=\"1-NSDictionary底层实现原理\"><a href=\"#1-NSDictionary底层实现原理\" class=\"headerlink\" title=\"1. NSDictionary底层实现原理\"></a>1. <a href=\"https://www.jianshu.com/p/2fd9680b46f6\">NSDictionary底层实现原理</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-NSDictionary底层实现原理\"><a href=\"#1-NSDictionary底层实现原理\" class=\"headerlink\" title=\"1. NSDictionary底层实现原理\"></a>1. <a href=\"https://www.jianshu.com/p/2fd9680b46f6\">NSDictionary底层实现原理</a></h2>"},{"title":"博主与网站收藏","abbrlink":"ce9965a5","date":"2021-04-19T16:00:00.000Z","_content":"\n## 网站\n\n1、[objc 中国](https://objccn.io/issues/)\n\n## 博主\n\n1、[戴铭的博客 - 星光社](https://ming1016.github.io/)\n2、[楚权的世界](http://chuquan.me/)\n3、[聊宅](https://lision.me/archives/)\n4、[hotwill](https://blog.hotwill.cn/OpenCL简介.html)\n5、[杨萧玉](http://yulingtianxia.com/)\n6、[Valar Morghulis](https://zhangbuhuai.com/)\n7、[刘坤的技术博客](https://blog.cnbluebox.com/)\n8、[bang's blog](http://blog.cnbang.net/)\n9、[Seebug](https://paper.seebug.org/)\n10、[HaHack](https://www.hahack.com/)\n11、[唐巧的博客](https://blog.devtang.com/)\n12、[limboy](https://limboy.me/)\n\n## 机构\n\n1、[美团](https://www.zhihu.com/column/meituantech)\n\n## 期刊\n\n1、[iOS-Weekly](https://github.com/SwiftOldDriver/iOS-Weekly)\n\n## 优质 GitHub 账号\n\n1、[Facebook](https://github.com/facebook)\n\n2、[Tencent](https://github.com/Tencent)\n\n3、[Apple](https://github.com/apple)\n\n4、[airbnb](https://github.com/airbnb)\n\n5、[Google](https://github.com/google)\n\n## 第三方库\n\n## 杂项\n\n1、[iOS 资源](https://github.com/mrhyh/iOS-LibraryCollections/blob/master/README.md#mac)\n","source":"_posts/iOS/Blogs&Blogger.md","raw":"---\ntitle: 博主与网站收藏\nabbrlink: ce9965a5\ndate: 2021-04-20 00:00:00\ntags:\n---\n\n## 网站\n\n1、[objc 中国](https://objccn.io/issues/)\n\n## 博主\n\n1、[戴铭的博客 - 星光社](https://ming1016.github.io/)\n2、[楚权的世界](http://chuquan.me/)\n3、[聊宅](https://lision.me/archives/)\n4、[hotwill](https://blog.hotwill.cn/OpenCL简介.html)\n5、[杨萧玉](http://yulingtianxia.com/)\n6、[Valar Morghulis](https://zhangbuhuai.com/)\n7、[刘坤的技术博客](https://blog.cnbluebox.com/)\n8、[bang's blog](http://blog.cnbang.net/)\n9、[Seebug](https://paper.seebug.org/)\n10、[HaHack](https://www.hahack.com/)\n11、[唐巧的博客](https://blog.devtang.com/)\n12、[limboy](https://limboy.me/)\n\n## 机构\n\n1、[美团](https://www.zhihu.com/column/meituantech)\n\n## 期刊\n\n1、[iOS-Weekly](https://github.com/SwiftOldDriver/iOS-Weekly)\n\n## 优质 GitHub 账号\n\n1、[Facebook](https://github.com/facebook)\n\n2、[Tencent](https://github.com/Tencent)\n\n3、[Apple](https://github.com/apple)\n\n4、[airbnb](https://github.com/airbnb)\n\n5、[Google](https://github.com/google)\n\n## 第三方库\n\n## 杂项\n\n1、[iOS 资源](https://github.com/mrhyh/iOS-LibraryCollections/blob/master/README.md#mac)\n","slug":"iOS/Blogs&Blogger","published":1,"updated":"2021-09-22T06:56:40.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3p003siu9kf15ld6di","content":"<h2 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h2><p>1、<a href=\"https://objccn.io/issues/\">objc 中国</a></p>\n<h2 id=\"博主\"><a href=\"#博主\" class=\"headerlink\" title=\"博主\"></a>博主</h2><p>1、<a href=\"https://ming1016.github.io/\">戴铭的博客 - 星光社</a><br>2、<a href=\"http://chuquan.me/\">楚权的世界</a><br>3、<a href=\"https://lision.me/archives/\">聊宅</a><br>4、<a href=\"https://blog.hotwill.cn/OpenCL%E7%AE%80%E4%BB%8B.html\">hotwill</a><br>5、<a href=\"http://yulingtianxia.com/\">杨萧玉</a><br>6、<a href=\"https://zhangbuhuai.com/\">Valar Morghulis</a><br>7、<a href=\"https://blog.cnbluebox.com/\">刘坤的技术博客</a><br>8、<a href=\"http://blog.cnbang.net/\">bang’s blog</a><br>9、<a href=\"https://paper.seebug.org/\">Seebug</a><br>10、<a href=\"https://www.hahack.com/\">HaHack</a><br>11、<a href=\"https://blog.devtang.com/\">唐巧的博客</a><br>12、<a href=\"https://limboy.me/\">limboy</a></p>\n<h2 id=\"机构\"><a href=\"#机构\" class=\"headerlink\" title=\"机构\"></a>机构</h2><p>1、<a href=\"https://www.zhihu.com/column/meituantech\">美团</a></p>\n<h2 id=\"期刊\"><a href=\"#期刊\" class=\"headerlink\" title=\"期刊\"></a>期刊</h2><p>1、<a href=\"https://github.com/SwiftOldDriver/iOS-Weekly\">iOS-Weekly</a></p>\n<h2 id=\"优质-GitHub-账号\"><a href=\"#优质-GitHub-账号\" class=\"headerlink\" title=\"优质 GitHub 账号\"></a>优质 GitHub 账号</h2><p>1、<a href=\"https://github.com/facebook\">Facebook</a></p>\n<p>2、<a href=\"https://github.com/Tencent\">Tencent</a></p>\n<p>3、<a href=\"https://github.com/apple\">Apple</a></p>\n<p>4、<a href=\"https://github.com/airbnb\">airbnb</a></p>\n<p>5、<a href=\"https://github.com/google\">Google</a></p>\n<h2 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"第三方库\"></a>第三方库</h2><h2 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2><p>1、<a href=\"https://github.com/mrhyh/iOS-LibraryCollections/blob/master/README.md#mac\">iOS 资源</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h2><p>1、<a href=\"https://objccn.io/issues/\">objc 中国</a></p>\n<h2 id=\"博主\"><a href=\"#博主\" class=\"headerlink\" title=\"博主\"></a>博主</h2><p>1、<a href=\"https://ming1016.github.io/\">戴铭的博客 - 星光社</a><br>2、<a href=\"http://chuquan.me/\">楚权的世界</a><br>3、<a href=\"https://lision.me/archives/\">聊宅</a><br>4、<a href=\"https://blog.hotwill.cn/OpenCL%E7%AE%80%E4%BB%8B.html\">hotwill</a><br>5、<a href=\"http://yulingtianxia.com/\">杨萧玉</a><br>6、<a href=\"https://zhangbuhuai.com/\">Valar Morghulis</a><br>7、<a href=\"https://blog.cnbluebox.com/\">刘坤的技术博客</a><br>8、<a href=\"http://blog.cnbang.net/\">bang’s blog</a><br>9、<a href=\"https://paper.seebug.org/\">Seebug</a><br>10、<a href=\"https://www.hahack.com/\">HaHack</a><br>11、<a href=\"https://blog.devtang.com/\">唐巧的博客</a><br>12、<a href=\"https://limboy.me/\">limboy</a></p>\n<h2 id=\"机构\"><a href=\"#机构\" class=\"headerlink\" title=\"机构\"></a>机构</h2><p>1、<a href=\"https://www.zhihu.com/column/meituantech\">美团</a></p>\n<h2 id=\"期刊\"><a href=\"#期刊\" class=\"headerlink\" title=\"期刊\"></a>期刊</h2><p>1、<a href=\"https://github.com/SwiftOldDriver/iOS-Weekly\">iOS-Weekly</a></p>\n<h2 id=\"优质-GitHub-账号\"><a href=\"#优质-GitHub-账号\" class=\"headerlink\" title=\"优质 GitHub 账号\"></a>优质 GitHub 账号</h2><p>1、<a href=\"https://github.com/facebook\">Facebook</a></p>\n<p>2、<a href=\"https://github.com/Tencent\">Tencent</a></p>\n<p>3、<a href=\"https://github.com/apple\">Apple</a></p>\n<p>4、<a href=\"https://github.com/airbnb\">airbnb</a></p>\n<p>5、<a href=\"https://github.com/google\">Google</a></p>\n<h2 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"第三方库\"></a>第三方库</h2><h2 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h2><p>1、<a href=\"https://github.com/mrhyh/iOS-LibraryCollections/blob/master/README.md#mac\">iOS 资源</a></p>\n"},{"title":"Flutter 技术可行性调研","abbrlink":63814,"date":"2021-07-29T02:06:00.000Z","_content":"## Flutter 技术可行性调研\n\n界面：\n1、适配；\n2、项目视图组件；\n3、音视频播放；\n4、导航栏；\n5、动画；\n\n数据：\n1、数据库；\n2、数据序列化[json]；\n3、异步；\n4、埋点；\n\nAPP：\n1、webview：[用户协议，]事件，https证书认证，重定向；\n2、网络 http[s] 协议方法支持等；\n3、第三方app交互；\n4、后台任务；\n\n工程：\n1、图片等资源；\n2、国际化；\n3、性能监控：日志上报与及时处理；\n4、工程配置：开发/测试/正式环境及资源；\n5、[Flutter开发规范](https://github.com/alibaba/flutter-go/blob/develop/Flutter_Go%20%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md);\n\n原生交互：\n1、编解码器；\n2、原生通道；\n3、原生第三方服务：客服、推送等；\n4、渠道分发包；\n\n* 设计模式层面\n1、设计模式；\n2、工程分层设计\n\n     网络层\n     数据层\n     UI层\n     原生[通道层]\n\n* 组件化层面\n1、功能组件化；\n2、业务模块化；\n","source":"_posts/Flutters/TechnologyFeasibility/Resources/flutter.md","raw":"---\ntitle: Flutter 技术可行性调研\nabbrlink: 63814\ndate: 2021-07-29 10:06:00\ntags:\n---\n## Flutter 技术可行性调研\n\n界面：\n1、适配；\n2、项目视图组件；\n3、音视频播放；\n4、导航栏；\n5、动画；\n\n数据：\n1、数据库；\n2、数据序列化[json]；\n3、异步；\n4、埋点；\n\nAPP：\n1、webview：[用户协议，]事件，https证书认证，重定向；\n2、网络 http[s] 协议方法支持等；\n3、第三方app交互；\n4、后台任务；\n\n工程：\n1、图片等资源；\n2、国际化；\n3、性能监控：日志上报与及时处理；\n4、工程配置：开发/测试/正式环境及资源；\n5、[Flutter开发规范](https://github.com/alibaba/flutter-go/blob/develop/Flutter_Go%20%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md);\n\n原生交互：\n1、编解码器；\n2、原生通道；\n3、原生第三方服务：客服、推送等；\n4、渠道分发包；\n\n* 设计模式层面\n1、设计模式；\n2、工程分层设计\n\n     网络层\n     数据层\n     UI层\n     原生[通道层]\n\n* 组件化层面\n1、功能组件化；\n2、业务模块化；\n","slug":"Flutters/TechnologyFeasibility/Resources/flutter","published":1,"updated":"2021-07-29T06:46:00.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3p003tiu9k8kv940lf","content":"<h2 id=\"Flutter-技术可行性调研\"><a href=\"#Flutter-技术可行性调研\" class=\"headerlink\" title=\"Flutter 技术可行性调研\"></a>Flutter 技术可行性调研</h2><p>界面：<br>1、适配；<br>2、项目视图组件；<br>3、音视频播放；<br>4、导航栏；<br>5、动画；</p>\n<p>数据：<br>1、数据库；<br>2、数据序列化[json]；<br>3、异步；<br>4、埋点；</p>\n<p>APP：<br>1、webview：[用户协议，]事件，https证书认证，重定向；<br>2、网络 http[s] 协议方法支持等；<br>3、第三方app交互；<br>4、后台任务；</p>\n<p>工程：<br>1、图片等资源；<br>2、国际化；<br>3、性能监控：日志上报与及时处理；<br>4、工程配置：开发/测试/正式环境及资源；<br>5、<a href=\"https://github.com/alibaba/flutter-go/blob/develop/Flutter_Go%20%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md\">Flutter开发规范</a>;</p>\n<p>原生交互：<br>1、编解码器；<br>2、原生通道；<br>3、原生第三方服务：客服、推送等；<br>4、渠道分发包；</p>\n<ul>\n<li><p>设计模式层面<br>1、设计模式；<br>2、工程分层设计</p>\n<p>   网络层<br>   数据层<br>   UI层<br>   原生[通道层]</p>\n</li>\n<li><p>组件化层面<br>1、功能组件化；<br>2、业务模块化；</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Flutter-技术可行性调研\"><a href=\"#Flutter-技术可行性调研\" class=\"headerlink\" title=\"Flutter 技术可行性调研\"></a>Flutter 技术可行性调研</h2><p>界面：<br>1、适配；<br>2、项目视图组件；<br>3、音视频播放；<br>4、导航栏；<br>5、动画；</p>\n<p>数据：<br>1、数据库；<br>2、数据序列化[json]；<br>3、异步；<br>4、埋点；</p>\n<p>APP：<br>1、webview：[用户协议，]事件，https证书认证，重定向；<br>2、网络 http[s] 协议方法支持等；<br>3、第三方app交互；<br>4、后台任务；</p>\n<p>工程：<br>1、图片等资源；<br>2、国际化；<br>3、性能监控：日志上报与及时处理；<br>4、工程配置：开发/测试/正式环境及资源；<br>5、<a href=\"https://github.com/alibaba/flutter-go/blob/develop/Flutter_Go%20%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md\">Flutter开发规范</a>;</p>\n<p>原生交互：<br>1、编解码器；<br>2、原生通道；<br>3、原生第三方服务：客服、推送等；<br>4、渠道分发包；</p>\n<ul>\n<li><p>设计模式层面<br>1、设计模式；<br>2、工程分层设计</p>\n<p>   网络层<br>   数据层<br>   UI层<br>   原生[通道层]</p>\n</li>\n<li><p>组件化层面<br>1、功能组件化；<br>2、业务模块化；</p>\n</li>\n</ul>\n"},{"title":"iOS之NSTimer","abbrlink":"23b35af","date":"2021-05-21T16:00:00.000Z","_content":"\n## 1. [解决NSTimer循环引用导致内存泄漏的六种方法](https://juejin.cn/post/6844903622031966222#heading-5)\n","source":"_posts/iOS/Languages/Objective-C/NSTimer.md","raw":"---\ntitle: iOS之NSTimer\nabbrlink: 23b35af\ndate: 2021-05-22 00:00:00\ntags:\n---\n\n## 1. [解决NSTimer循环引用导致内存泄漏的六种方法](https://juejin.cn/post/6844903622031966222#heading-5)\n","slug":"iOS/Languages/Objective-C/NSTimer","published":1,"updated":"2021-07-29T06:45:57.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3q003uiu9k3bf480yn","content":"<h2 id=\"1-解决NSTimer循环引用导致内存泄漏的六种方法\"><a href=\"#1-解决NSTimer循环引用导致内存泄漏的六种方法\" class=\"headerlink\" title=\"1. 解决NSTimer循环引用导致内存泄漏的六种方法\"></a>1. <a href=\"https://juejin.cn/post/6844903622031966222#heading-5\">解决NSTimer循环引用导致内存泄漏的六种方法</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-解决NSTimer循环引用导致内存泄漏的六种方法\"><a href=\"#1-解决NSTimer循环引用导致内存泄漏的六种方法\" class=\"headerlink\" title=\"1. 解决NSTimer循环引用导致内存泄漏的六种方法\"></a>1. <a href=\"https://juejin.cn/post/6844903622031966222#heading-5\">解决NSTimer循环引用导致内存泄漏的六种方法</a></h2>"},{"title":"iOS编程语言之Objective-C","abbrlink":"1cabc405","date":"2021-04-20T13:36:02.000Z","_content":"## iOS 技术点\n\n并发编程\n\n内存管理\n\nBlock\n\n消息转发\n\n算法、安全、逆向、证书\n\n网络协议\n\n设计模式（工程、代码）\n\n工程化\n\n组件化\n\n性能优化、瘦身\n\n架构\n\n大前端：WebKit、Flutter、React-Native、Dcloud、Capacitor、小程序\n\n归档\n\n编译器、调试器\n\nOS 内核\n\n布局\n\nView 渲染及流程\n\n日志、埋点、异常捕获、符号化、Mac-O 文件\n\niOS SDKs\n\n第三方库源码阅读\n\nSwift\n\nSwfit 与 OC 混编相关研究\n\n蓝牙及协议\n","source":"_posts/iOS/Languages/Objective-C/Objective-C.md","raw":"---\ntitle: iOS编程语言之Objective-C\nabbrlink: 1cabc405\ndate: 2021-04-20 21:36:02\ntags:\n---\n## iOS 技术点\n\n并发编程\n\n内存管理\n\nBlock\n\n消息转发\n\n算法、安全、逆向、证书\n\n网络协议\n\n设计模式（工程、代码）\n\n工程化\n\n组件化\n\n性能优化、瘦身\n\n架构\n\n大前端：WebKit、Flutter、React-Native、Dcloud、Capacitor、小程序\n\n归档\n\n编译器、调试器\n\nOS 内核\n\n布局\n\nView 渲染及流程\n\n日志、埋点、异常捕获、符号化、Mac-O 文件\n\niOS SDKs\n\n第三方库源码阅读\n\nSwift\n\nSwfit 与 OC 混编相关研究\n\n蓝牙及协议\n","slug":"iOS/Languages/Objective-C/Objective-C","published":1,"updated":"2021-07-29T06:46:00.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3s003viu9k988vevjb","content":"<h2 id=\"iOS-技术点\"><a href=\"#iOS-技术点\" class=\"headerlink\" title=\"iOS 技术点\"></a>iOS 技术点</h2><p>并发编程</p>\n<p>内存管理</p>\n<p>Block</p>\n<p>消息转发</p>\n<p>算法、安全、逆向、证书</p>\n<p>网络协议</p>\n<p>设计模式（工程、代码）</p>\n<p>工程化</p>\n<p>组件化</p>\n<p>性能优化、瘦身</p>\n<p>架构</p>\n<p>大前端：WebKit、Flutter、React-Native、Dcloud、Capacitor、小程序</p>\n<p>归档</p>\n<p>编译器、调试器</p>\n<p>OS 内核</p>\n<p>布局</p>\n<p>View 渲染及流程</p>\n<p>日志、埋点、异常捕获、符号化、Mac-O 文件</p>\n<p>iOS SDKs</p>\n<p>第三方库源码阅读</p>\n<p>Swift</p>\n<p>Swfit 与 OC 混编相关研究</p>\n<p>蓝牙及协议</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"iOS-技术点\"><a href=\"#iOS-技术点\" class=\"headerlink\" title=\"iOS 技术点\"></a>iOS 技术点</h2><p>并发编程</p>\n<p>内存管理</p>\n<p>Block</p>\n<p>消息转发</p>\n<p>算法、安全、逆向、证书</p>\n<p>网络协议</p>\n<p>设计模式（工程、代码）</p>\n<p>工程化</p>\n<p>组件化</p>\n<p>性能优化、瘦身</p>\n<p>架构</p>\n<p>大前端：WebKit、Flutter、React-Native、Dcloud、Capacitor、小程序</p>\n<p>归档</p>\n<p>编译器、调试器</p>\n<p>OS 内核</p>\n<p>布局</p>\n<p>View 渲染及流程</p>\n<p>日志、埋点、异常捕获、符号化、Mac-O 文件</p>\n<p>iOS SDKs</p>\n<p>第三方库源码阅读</p>\n<p>Swift</p>\n<p>Swfit 与 OC 混编相关研究</p>\n<p>蓝牙及协议</p>\n"},{"title":"iOS之运行时","abbrlink":"f100d24c","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. class、objc_getClass、object_getClass 的区别\n\n### 1.1 class\n\n每次返回的结果都一样\n\n### 1.2 objc_getClass\n\n```objective-c\nOBJC_EXPORT Class _Nullable objc_getClass(const char * _Nonnull name)\n```\n\n通过一个字符串返回一个对象，这个对象就是一个类对象，不管重复去调用几次objc_getClass这个方法\n\n### 1.3 object_getClass\n\n```objective-c\nOBJC_EXPORT Class _Nullable object_getClass(id _Nullable obj) \n```\n\n获取对象的类类型\n","source":"_posts/iOS/Languages/Objective-C/Runtime.md","raw":"---\ntitle: iOS之运行时\nabbrlink: f100d24c\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. class、objc_getClass、object_getClass 的区别\n\n### 1.1 class\n\n每次返回的结果都一样\n\n### 1.2 objc_getClass\n\n```objective-c\nOBJC_EXPORT Class _Nullable objc_getClass(const char * _Nonnull name)\n```\n\n通过一个字符串返回一个对象，这个对象就是一个类对象，不管重复去调用几次objc_getClass这个方法\n\n### 1.3 object_getClass\n\n```objective-c\nOBJC_EXPORT Class _Nullable object_getClass(id _Nullable obj) \n```\n\n获取对象的类类型\n","slug":"iOS/Languages/Objective-C/Runtime","published":1,"updated":"2021-07-29T06:45:57.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3t003wiu9kgdlx20v7","content":"<h2 id=\"1-class、objc-getClass、object-getClass-的区别\"><a href=\"#1-class、objc-getClass、object-getClass-的区别\" class=\"headerlink\" title=\"1. class、objc_getClass、object_getClass 的区别\"></a>1. class、objc_getClass、object_getClass 的区别</h2><h3 id=\"1-1-class\"><a href=\"#1-1-class\" class=\"headerlink\" title=\"1.1 class\"></a>1.1 class</h3><p>每次返回的结果都一样</p>\n<h3 id=\"1-2-objc-getClass\"><a href=\"#1-2-objc-getClass\" class=\"headerlink\" title=\"1.2 objc_getClass\"></a>1.2 objc_getClass</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJC_EXPORT Class _Nullable objc_getClass(const char * _Nonnull name)</span><br></pre></td></tr></table></figure>\n\n<p>通过一个字符串返回一个对象，这个对象就是一个类对象，不管重复去调用几次objc_getClass这个方法</p>\n<h3 id=\"1-3-object-getClass\"><a href=\"#1-3-object-getClass\" class=\"headerlink\" title=\"1.3 object_getClass\"></a>1.3 object_getClass</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJC_EXPORT Class _Nullable object_getClass(id _Nullable obj) </span><br></pre></td></tr></table></figure>\n\n<p>获取对象的类类型</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-class、objc-getClass、object-getClass-的区别\"><a href=\"#1-class、objc-getClass、object-getClass-的区别\" class=\"headerlink\" title=\"1. class、objc_getClass、object_getClass 的区别\"></a>1. class、objc_getClass、object_getClass 的区别</h2><h3 id=\"1-1-class\"><a href=\"#1-1-class\" class=\"headerlink\" title=\"1.1 class\"></a>1.1 class</h3><p>每次返回的结果都一样</p>\n<h3 id=\"1-2-objc-getClass\"><a href=\"#1-2-objc-getClass\" class=\"headerlink\" title=\"1.2 objc_getClass\"></a>1.2 objc_getClass</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJC_EXPORT Class _Nullable objc_getClass(const char * _Nonnull name)</span><br></pre></td></tr></table></figure>\n\n<p>通过一个字符串返回一个对象，这个对象就是一个类对象，不管重复去调用几次objc_getClass这个方法</p>\n<h3 id=\"1-3-object-getClass\"><a href=\"#1-3-object-getClass\" class=\"headerlink\" title=\"1.3 object_getClass\"></a>1.3 object_getClass</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJC_EXPORT Class _Nullable object_getClass(id _Nullable obj) </span><br></pre></td></tr></table></figure>\n\n<p>获取对象的类类型</p>\n"},{"title":"iOS编程语言之Objective-C 运行时基本类型","abbrlink":"64005121","date":"2021-04-20T13:36:02.000Z","_content":"## 1. Class\n\n```Objective-C\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n/* Use `Class` instead of `struct objc_class *` */\n\n/// An opaque type that represents an Objective-C class.\ntypedef struct objc_class *Class;\n```\n\n## 2. id\n\n```Objective-C\n/// Represents an instance of a class.\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n\n/// A pointer to an instance of a class.\ntypedef struct objc_object *id;\n```\n\n## 3. Category\n\n```Objective-C\nstruct objc_category {\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n} \n\n/// An opaque type that represents a category.\ntypedef struct objc_category *Category;\n```\n\n## 4. 属性变量\n\n### 4.1 IVar\n\n```Objective-C\nstruct objc_ivar {\n    char * _Nullable ivar_name                               OBJC2_UNAVAILABLE;\n    char * _Nullable ivar_type                               OBJC2_UNAVAILABLE;\n    int ivar_offset                                          OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_ivar_list {\n    int ivar_count                                           OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;\n} \n\n/// An opaque type that represents an instance variable.\ntypedef struct objc_ivar *Ivar;\n```\n\n## 4.2 attribute_t\n\n```Objective-C\n/// Defines a property attribute\ntypedef struct {\n    const char * _Nonnull name;           /**< The name of the attribute */\n    const char * _Nonnull value;          /**< The value of the attribute (usually empty) */\n} objc_property_attribute_t;\n```\n\n## 5. Method\n\n```Objective-C\n/**\n* objc_selector 在 iOS 的开发文档中没有找到，这段 objc_selector 的定义是在 gnustep/libobjc2 中找的，链接地址：https://github.com/gnustep/libobjc2/blob/master/selector.h \n*/       \nstruct objc_selector\n{\n  union\n {\n  /**\n   * The name of this selector.  Used for unregistered selectors.\n   */\n  const char *name;\n  /**\n   * The index of this selector in the selector table.  When a selector\n   * is registered with the runtime, its name is replaced by an index\n   * uniquely identifying this selector.  The index is used for dispatch.\n   */\n  uintptr_t index;\n };\n /**\n  * The Objective-C type encoding of the message identified by this selector.\n  */\n const char * types;\n};\n\n/// An opaque type that represents a method selector.\ntypedef struct objc_selector *SEL;\n\n/// A pointer to the function of a method implementation. \n#if !OBJC_OLD_DISPATCH_PROTOTYPES\ntypedef void (*IMP)(void /* id, SEL, ... */ ); \n#else\ntypedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); \n#endif\n\nstruct objc_method {\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_method_list {\n    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n} \n\nstruct objc_method_description_list {\n    int count;\n    struct objc_method_description list[1];\n};\n\n/// An opaque type that represents a method in a class definition.\ntypedef struct objc_method *Method;\n```\n\n## 6、Cache\n\n```Objective-C\n#define CACHE_BUCKET_NAME(B)  ((B)->method_name)\n#define CACHE_BUCKET_IMP(B)   ((B)->method_imp)\n#define CACHE_BUCKET_VALID(B) (B)\n#ifndef __LP64__\n#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)>>2) & (mask))\n#else\n#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)>>3)) & (mask))\n#endif\nstruct objc_cache {\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;\n};\n\ntypedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;\n```\n\n## 7. Module\n\n```Objective-C\nstruct objc_module {\n    unsigned long version                                    OBJC2_UNAVAILABLE;\n    unsigned long size                                       OBJC2_UNAVAILABLE;\n    const char * _Nullable name                              OBJC2_UNAVAILABLE;\n    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;\n} \n\ntypedef struct objc_module *Module                           OBJC2_UNAVAILABLE;\n```\n\n## 8. Symtab\n\n```Objective-C\nstruct objc_symtab {\n    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;\n    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;\n    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;\n    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;\n    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;\n} \n\ntypedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;\n```\n\n## 9. 协议\n\n```Objective-C\n/// Represents an instance of a class.\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n\nstruct objc_protocol_list {\n    struct objc_protocol_list * _Nullable next;\n    long count;\n    __unsafe_unretained Protocol * _Nullable list[1];\n};\n\n#ifdef __OBJC__\n@class Protocol;\n#else\ntypedef struct objc_object Protocol;\n#endif\n```\n\n## 10. NSObject 定义\n\n### 10.1 NSObject Protocol\n\n```Objective-C\n@protocol NSObject\n\n- (BOOL)isEqual:(id)object;\n@property (readonly) NSUInteger hash;\n\n@property (readonly) Class superclass;\n- (Class)class OBJC_SWIFT_UNAVAILABLE(\"use 'type(of: anObject)' instead\");\n- (instancetype)self;\n\n- (id)performSelector:(SEL)aSelector;\n- (id)performSelector:(SEL)aSelector withObject:(id)object;\n- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;\n\n- (BOOL)isProxy;\n\n- (BOOL)isKindOfClass:(Class)aClass;\n- (BOOL)isMemberOfClass:(Class)aClass;\n- (BOOL)conformsToProtocol:(Protocol *)aProtocol;\n\n- (BOOL)respondsToSelector:(SEL)aSelector;\n\n- (instancetype)retain OBJC_ARC_UNAVAILABLE;\n- (oneway void)release OBJC_ARC_UNAVAILABLE;\n- (instancetype)autorelease OBJC_ARC_UNAVAILABLE;\n- (NSUInteger)retainCount OBJC_ARC_UNAVAILABLE;\n\n- (struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n\n@property (readonly, copy) NSString *description;\n@optional\n@property (readonly, copy) NSString *debugDescription;\n\n@end\n```\n\n### 10.2 NSObject\n\n```Objective-C\nOBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0)\nOBJC_ROOT_CLASS\nOBJC_EXPORT\n@interface NSObject <NSObject> {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wobjc-interface-ivars\"\n    Class isa  OBJC_ISA_AVAILABILITY;\n#pragma clang diagnostic pop\n}\n\n+ (void)load;\n\n+ (void)initialize;\n- (instancetype)init\n#if NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER\n    NS_DESIGNATED_INITIALIZER\n#endif\n    ;\n\n+ (instancetype)new OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n- (void)dealloc OBJC_SWIFT_UNAVAILABLE(\"use 'deinit' to define a de-initializer\");\n\n- (void)finalize OBJC_DEPRECATED(\"Objective-C garbage collection is no longer supported\");\n\n- (id)copy;\n- (id)mutableCopy;\n\n+ (id)copyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n+ (id)mutableCopyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n\n+ (BOOL)instancesRespondToSelector:(SEL)aSelector;\n+ (BOOL)conformsToProtocol:(Protocol *)protocol;\n- (IMP)methodForSelector:(SEL)aSelector;\n+ (IMP)instanceMethodForSelector:(SEL)aSelector;\n- (void)doesNotRecognizeSelector:(SEL)aSelector;\n\n- (id)forwardingTargetForSelector:(SEL)aSelector OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n- (void)forwardInvocation:(NSInvocation *)anInvocation OBJC_SWIFT_UNAVAILABLE(\"\");\n- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(\"\");\n\n+ (NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(\"\");\n\n- (BOOL)allowsWeakReference UNAVAILABLE_ATTRIBUTE;\n- (BOOL)retainWeakReference UNAVAILABLE_ATTRIBUTE;\n\n+ (BOOL)isSubclassOfClass:(Class)aClass;\n\n+ (BOOL)resolveClassMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n+ (BOOL)resolveInstanceMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n\n+ (NSUInteger)hash;\n+ (Class)superclass;\n+ (Class)class OBJC_SWIFT_UNAVAILABLE(\"use 'aClass.self' instead\");\n+ (NSString *)description;\n+ (NSString *)debugDescription;\n\n@end\n```\n\n### 10.2.1 Foundation 运行时支持\n\n```Objective-C\ntypedef NSString * NSExceptionName NS_EXTENSIBLE_STRING_ENUM;\ntypedef NSString * NSRunLoopMode NS_EXTENSIBLE_STRING_ENUM;\n\nFOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);\nFOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);\n\nFOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);\nFOUNDATION_EXPORT Class _Nullable NSClassFromString(NSString *aClassName);\n\nFOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));\nFOUNDATION_EXPORT Protocol * _Nullable NSProtocolFromString(NSString *namestr) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));\n\nFOUNDATION_EXPORT const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger * _Nullable sizep, NSUInteger * _Nullable alignp);\n\nFOUNDATION_EXPORT void NSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2) NS_NO_TAIL_CALL;\nFOUNDATION_EXPORT void NSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0) NS_NO_TAIL_CALL;\n```\n","source":"_posts/iOS/Languages/Objective-C/Types.md","raw":"---\ntitle: iOS编程语言之Objective-C 运行时基本类型\nabbrlink: '64005121'\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. Class\n\n```Objective-C\nstruct objc_class {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class _Nullable super_class                              OBJC2_UNAVAILABLE;\n    const char * _Nonnull name                               OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n/* Use `Class` instead of `struct objc_class *` */\n\n/// An opaque type that represents an Objective-C class.\ntypedef struct objc_class *Class;\n```\n\n## 2. id\n\n```Objective-C\n/// Represents an instance of a class.\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n\n/// A pointer to an instance of a class.\ntypedef struct objc_object *id;\n```\n\n## 3. Category\n\n```Objective-C\nstruct objc_category {\n    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;\n    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;\n    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;\n    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;\n} \n\n/// An opaque type that represents a category.\ntypedef struct objc_category *Category;\n```\n\n## 4. 属性变量\n\n### 4.1 IVar\n\n```Objective-C\nstruct objc_ivar {\n    char * _Nullable ivar_name                               OBJC2_UNAVAILABLE;\n    char * _Nullable ivar_type                               OBJC2_UNAVAILABLE;\n    int ivar_offset                                          OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_ivar_list {\n    int ivar_count                                           OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;\n} \n\n/// An opaque type that represents an instance variable.\ntypedef struct objc_ivar *Ivar;\n```\n\n## 4.2 attribute_t\n\n```Objective-C\n/// Defines a property attribute\ntypedef struct {\n    const char * _Nonnull name;           /**< The name of the attribute */\n    const char * _Nonnull value;          /**< The value of the attribute (usually empty) */\n} objc_property_attribute_t;\n```\n\n## 5. Method\n\n```Objective-C\n/**\n* objc_selector 在 iOS 的开发文档中没有找到，这段 objc_selector 的定义是在 gnustep/libobjc2 中找的，链接地址：https://github.com/gnustep/libobjc2/blob/master/selector.h \n*/       \nstruct objc_selector\n{\n  union\n {\n  /**\n   * The name of this selector.  Used for unregistered selectors.\n   */\n  const char *name;\n  /**\n   * The index of this selector in the selector table.  When a selector\n   * is registered with the runtime, its name is replaced by an index\n   * uniquely identifying this selector.  The index is used for dispatch.\n   */\n  uintptr_t index;\n };\n /**\n  * The Objective-C type encoding of the message identified by this selector.\n  */\n const char * types;\n};\n\n/// An opaque type that represents a method selector.\ntypedef struct objc_selector *SEL;\n\n/// A pointer to the function of a method implementation. \n#if !OBJC_OLD_DISPATCH_PROTOTYPES\ntypedef void (*IMP)(void /* id, SEL, ... */ ); \n#else\ntypedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); \n#endif\n\nstruct objc_method {\n    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;\n    char * _Nullable method_types                            OBJC2_UNAVAILABLE;\n    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n\nstruct objc_method_list {\n    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;\n\n    int method_count                                         OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n    /* variable length structure */\n    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;\n} \n\nstruct objc_method_description_list {\n    int count;\n    struct objc_method_description list[1];\n};\n\n/// An opaque type that represents a method in a class definition.\ntypedef struct objc_method *Method;\n```\n\n## 6、Cache\n\n```Objective-C\n#define CACHE_BUCKET_NAME(B)  ((B)->method_name)\n#define CACHE_BUCKET_IMP(B)   ((B)->method_imp)\n#define CACHE_BUCKET_VALID(B) (B)\n#ifndef __LP64__\n#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)>>2) & (mask))\n#else\n#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)>>3)) & (mask))\n#endif\nstruct objc_cache {\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;\n};\n\ntypedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;\n```\n\n## 7. Module\n\n```Objective-C\nstruct objc_module {\n    unsigned long version                                    OBJC2_UNAVAILABLE;\n    unsigned long size                                       OBJC2_UNAVAILABLE;\n    const char * _Nullable name                              OBJC2_UNAVAILABLE;\n    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;\n} \n\ntypedef struct objc_module *Module                           OBJC2_UNAVAILABLE;\n```\n\n## 8. Symtab\n\n```Objective-C\nstruct objc_symtab {\n    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;\n    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;\n    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;\n    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;\n    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;\n} \n\ntypedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;\n```\n\n## 9. 协议\n\n```Objective-C\n/// Represents an instance of a class.\nstruct objc_object {\n    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;\n};\n\nstruct objc_protocol_list {\n    struct objc_protocol_list * _Nullable next;\n    long count;\n    __unsafe_unretained Protocol * _Nullable list[1];\n};\n\n#ifdef __OBJC__\n@class Protocol;\n#else\ntypedef struct objc_object Protocol;\n#endif\n```\n\n## 10. NSObject 定义\n\n### 10.1 NSObject Protocol\n\n```Objective-C\n@protocol NSObject\n\n- (BOOL)isEqual:(id)object;\n@property (readonly) NSUInteger hash;\n\n@property (readonly) Class superclass;\n- (Class)class OBJC_SWIFT_UNAVAILABLE(\"use 'type(of: anObject)' instead\");\n- (instancetype)self;\n\n- (id)performSelector:(SEL)aSelector;\n- (id)performSelector:(SEL)aSelector withObject:(id)object;\n- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;\n\n- (BOOL)isProxy;\n\n- (BOOL)isKindOfClass:(Class)aClass;\n- (BOOL)isMemberOfClass:(Class)aClass;\n- (BOOL)conformsToProtocol:(Protocol *)aProtocol;\n\n- (BOOL)respondsToSelector:(SEL)aSelector;\n\n- (instancetype)retain OBJC_ARC_UNAVAILABLE;\n- (oneway void)release OBJC_ARC_UNAVAILABLE;\n- (instancetype)autorelease OBJC_ARC_UNAVAILABLE;\n- (NSUInteger)retainCount OBJC_ARC_UNAVAILABLE;\n\n- (struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n\n@property (readonly, copy) NSString *description;\n@optional\n@property (readonly, copy) NSString *debugDescription;\n\n@end\n```\n\n### 10.2 NSObject\n\n```Objective-C\nOBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0)\nOBJC_ROOT_CLASS\nOBJC_EXPORT\n@interface NSObject <NSObject> {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wobjc-interface-ivars\"\n    Class isa  OBJC_ISA_AVAILABILITY;\n#pragma clang diagnostic pop\n}\n\n+ (void)load;\n\n+ (void)initialize;\n- (instancetype)init\n#if NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER\n    NS_DESIGNATED_INITIALIZER\n#endif\n    ;\n\n+ (instancetype)new OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE(\"use object initializers instead\");\n- (void)dealloc OBJC_SWIFT_UNAVAILABLE(\"use 'deinit' to define a de-initializer\");\n\n- (void)finalize OBJC_DEPRECATED(\"Objective-C garbage collection is no longer supported\");\n\n- (id)copy;\n- (id)mutableCopy;\n\n+ (id)copyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n+ (id)mutableCopyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;\n\n+ (BOOL)instancesRespondToSelector:(SEL)aSelector;\n+ (BOOL)conformsToProtocol:(Protocol *)protocol;\n- (IMP)methodForSelector:(SEL)aSelector;\n+ (IMP)instanceMethodForSelector:(SEL)aSelector;\n- (void)doesNotRecognizeSelector:(SEL)aSelector;\n\n- (id)forwardingTargetForSelector:(SEL)aSelector OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n- (void)forwardInvocation:(NSInvocation *)anInvocation OBJC_SWIFT_UNAVAILABLE(\"\");\n- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(\"\");\n\n+ (NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(\"\");\n\n- (BOOL)allowsWeakReference UNAVAILABLE_ATTRIBUTE;\n- (BOOL)retainWeakReference UNAVAILABLE_ATTRIBUTE;\n\n+ (BOOL)isSubclassOfClass:(Class)aClass;\n\n+ (BOOL)resolveClassMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n+ (BOOL)resolveInstanceMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);\n\n+ (NSUInteger)hash;\n+ (Class)superclass;\n+ (Class)class OBJC_SWIFT_UNAVAILABLE(\"use 'aClass.self' instead\");\n+ (NSString *)description;\n+ (NSString *)debugDescription;\n\n@end\n```\n\n### 10.2.1 Foundation 运行时支持\n\n```Objective-C\ntypedef NSString * NSExceptionName NS_EXTENSIBLE_STRING_ENUM;\ntypedef NSString * NSRunLoopMode NS_EXTENSIBLE_STRING_ENUM;\n\nFOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);\nFOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);\n\nFOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);\nFOUNDATION_EXPORT Class _Nullable NSClassFromString(NSString *aClassName);\n\nFOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));\nFOUNDATION_EXPORT Protocol * _Nullable NSProtocolFromString(NSString *namestr) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));\n\nFOUNDATION_EXPORT const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger * _Nullable sizep, NSUInteger * _Nullable alignp);\n\nFOUNDATION_EXPORT void NSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2) NS_NO_TAIL_CALL;\nFOUNDATION_EXPORT void NSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0) NS_NO_TAIL_CALL;\n```\n","slug":"iOS/Languages/Objective-C/Types","published":1,"updated":"2021-07-29T06:46:00.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3t003xiu9khteldoz7","content":"<h2 id=\"1-Class\"><a href=\"#1-Class\" class=\"headerlink\" title=\"1. Class\"></a>1. Class</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_class &#123;</span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\"></span><br><span class=\"line\">#if !__OBJC2__</span><br><span class=\"line\">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    const char * _Nonnull name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long version                                             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long info                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; OBJC2_UNAVAILABLE;</span><br><span class=\"line\">/* Use `Class` instead of `struct objc_class *` */</span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents an Objective-C class.</span><br><span class=\"line\">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-id\"><a href=\"#2-id\" class=\"headerlink\" title=\"2. id\"></a>2. id</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// Represents an instance of a class.</span><br><span class=\"line\">struct objc_object &#123;</span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/// A pointer to an instance of a class.</span><br><span class=\"line\">typedef struct objc_object *id;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Category\"><a href=\"#3-Category\" class=\"headerlink\" title=\"3. Category\"></a>3. Category</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_category &#123;</span><br><span class=\"line\">    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents a category.</span><br><span class=\"line\">typedef struct objc_category *Category;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-属性变量\"><a href=\"#4-属性变量\" class=\"headerlink\" title=\"4. 属性变量\"></a>4. 属性变量</h2><h3 id=\"4-1-IVar\"><a href=\"#4-1-IVar\" class=\"headerlink\" title=\"4.1 IVar\"></a>4.1 IVar</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_ivar &#123;</span><br><span class=\"line\">    char * _Nullable ivar_name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    char * _Nullable ivar_type                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    int ivar_offset                                          OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#ifdef __LP64__</span><br><span class=\"line\">    int space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_ivar_list &#123;</span><br><span class=\"line\">    int ivar_count                                           OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#ifdef __LP64__</span><br><span class=\"line\">    int space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    /* variable length structure */</span><br><span class=\"line\">    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents an instance variable.</span><br><span class=\"line\">typedef struct objc_ivar *Ivar;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-attribute-t\"><a href=\"#4-2-attribute-t\" class=\"headerlink\" title=\"4.2 attribute_t\"></a>4.2 attribute_t</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// Defines a property attribute</span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">    const char * _Nonnull name;           /**&lt; The name of the attribute */</span><br><span class=\"line\">    const char * _Nonnull value;          /**&lt; The value of the attribute (usually empty) */</span><br><span class=\"line\">&#125; objc_property_attribute_t;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Method\"><a href=\"#5-Method\" class=\"headerlink\" title=\"5. Method\"></a>5. Method</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* objc_selector 在 iOS 的开发文档中没有找到，这段 objc_selector 的定义是在 gnustep/libobjc2 中找的，链接地址：https://github.com/gnustep/libobjc2/blob/master/selector.h </span><br><span class=\"line\">*/       </span><br><span class=\"line\">struct objc_selector</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  union</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * The name of this selector.  Used for unregistered selectors.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  const char *name;</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * The index of this selector in the selector table.  When a selector</span><br><span class=\"line\">   * is registered with the runtime, its name is replaced by an index</span><br><span class=\"line\">   * uniquely identifying this selector.  The index is used for dispatch.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  uintptr_t index;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> /**</span><br><span class=\"line\">  * The Objective-C type encoding of the message identified by this selector.</span><br><span class=\"line\">  */</span><br><span class=\"line\"> const char * types;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents a method selector.</span><br><span class=\"line\">typedef struct objc_selector *SEL;</span><br><span class=\"line\"></span><br><span class=\"line\">/// A pointer to the function of a method implementation. </span><br><span class=\"line\">#if !OBJC_OLD_DISPATCH_PROTOTYPES</span><br><span class=\"line\">typedef void (*IMP)(void /* id, SEL, ... */ ); </span><br><span class=\"line\">#else</span><br><span class=\"line\">typedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); </span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_method &#123;</span><br><span class=\"line\">    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    char * _Nullable method_types                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_method_list &#123;</span><br><span class=\"line\">    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">    int method_count                                         OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#ifdef __LP64__</span><br><span class=\"line\">    int space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    /* variable length structure */</span><br><span class=\"line\">    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_method_description_list &#123;</span><br><span class=\"line\">    int count;</span><br><span class=\"line\">    struct objc_method_description list[1];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents a method in a class definition.</span><br><span class=\"line\">typedef struct objc_method *Method;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、Cache\"><a href=\"#6、Cache\" class=\"headerlink\" title=\"6、Cache\"></a>6、Cache</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define CACHE_BUCKET_NAME(B)  ((B)-&gt;method_name)</span><br><span class=\"line\">#define CACHE_BUCKET_IMP(B)   ((B)-&gt;method_imp)</span><br><span class=\"line\">#define CACHE_BUCKET_VALID(B) (B)</span><br><span class=\"line\">#ifndef __LP64__</span><br><span class=\"line\">#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)&gt;&gt;2) &amp; (mask))</span><br><span class=\"line\">#else</span><br><span class=\"line\">#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)&gt;&gt;3)) &amp; (mask))</span><br><span class=\"line\">#endif</span><br><span class=\"line\">struct objc_cache &#123;</span><br><span class=\"line\">    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    unsigned int occupied                                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-Module\"><a href=\"#7-Module\" class=\"headerlink\" title=\"7. Module\"></a>7. Module</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_module &#123;</span><br><span class=\"line\">    unsigned long version                                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    unsigned long size                                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    const char * _Nullable name                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct objc_module *Module                           OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Symtab\"><a href=\"#8-Symtab\" class=\"headerlink\" title=\"8. Symtab\"></a>8. Symtab</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_symtab &#123;</span><br><span class=\"line\">    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-协议\"><a href=\"#9-协议\" class=\"headerlink\" title=\"9. 协议\"></a>9. 协议</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// Represents an instance of a class.</span><br><span class=\"line\">struct objc_object &#123;</span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_protocol_list &#123;</span><br><span class=\"line\">    struct objc_protocol_list * _Nullable next;</span><br><span class=\"line\">    long count;</span><br><span class=\"line\">    __unsafe_unretained Protocol * _Nullable list[1];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">#ifdef __OBJC__</span><br><span class=\"line\">@class Protocol;</span><br><span class=\"line\">#else</span><br><span class=\"line\">typedef struct objc_object Protocol;</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-NSObject-定义\"><a href=\"#10-NSObject-定义\" class=\"headerlink\" title=\"10. NSObject 定义\"></a>10. NSObject 定义</h2><h3 id=\"10-1-NSObject-Protocol\"><a href=\"#10-1-NSObject-Protocol\" class=\"headerlink\" title=\"10.1 NSObject Protocol\"></a>10.1 NSObject Protocol</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@protocol NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isEqual:(id)object;</span><br><span class=\"line\">@property (readonly) NSUInteger hash;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (readonly) Class superclass;</span><br><span class=\"line\">- (Class)class OBJC_SWIFT_UNAVAILABLE(&quot;use &#x27;type(of: anObject)&#x27; instead&quot;);</span><br><span class=\"line\">- (instancetype)self;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)performSelector:(SEL)aSelector;</span><br><span class=\"line\">- (id)performSelector:(SEL)aSelector withObject:(id)object;</span><br><span class=\"line\">- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isProxy;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isKindOfClass:(Class)aClass;</span><br><span class=\"line\">- (BOOL)isMemberOfClass:(Class)aClass;</span><br><span class=\"line\">- (BOOL)conformsToProtocol:(Protocol *)aProtocol;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)respondsToSelector:(SEL)aSelector;</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)retain OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\">- (oneway void)release OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\">- (instancetype)autorelease OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\">- (NSUInteger)retainCount OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">- (struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (readonly, copy) NSString *description;</span><br><span class=\"line\">@optional</span><br><span class=\"line\">@property (readonly, copy) NSString *debugDescription;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-NSObject\"><a href=\"#10-2-NSObject\" class=\"headerlink\" title=\"10.2 NSObject\"></a>10.2 NSObject</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0)</span><br><span class=\"line\">OBJC_ROOT_CLASS</span><br><span class=\"line\">OBJC_EXPORT</span><br><span class=\"line\">@interface NSObject &lt;NSObject&gt; &#123;</span><br><span class=\"line\">#pragma clang diagnostic push</span><br><span class=\"line\">#pragma clang diagnostic ignored &quot;-Wobjc-interface-ivars&quot;</span><br><span class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">#pragma clang diagnostic pop</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (void)load;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (void)initialize;</span><br><span class=\"line\">- (instancetype)init</span><br><span class=\"line\">#if NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER</span><br><span class=\"line\">    NS_DESIGNATED_INITIALIZER</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (instancetype)new OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);</span><br><span class=\"line\">+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);</span><br><span class=\"line\">+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);</span><br><span class=\"line\">- (void)dealloc OBJC_SWIFT_UNAVAILABLE(&quot;use &#x27;deinit&#x27; to define a de-initializer&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)finalize OBJC_DEPRECATED(&quot;Objective-C garbage collection is no longer supported&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)copy;</span><br><span class=\"line\">- (id)mutableCopy;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (id)copyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\">+ (id)mutableCopyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (BOOL)instancesRespondToSelector:(SEL)aSelector;</span><br><span class=\"line\">+ (BOOL)conformsToProtocol:(Protocol *)protocol;</span><br><span class=\"line\">- (IMP)methodForSelector:(SEL)aSelector;</span><br><span class=\"line\">+ (IMP)instanceMethodForSelector:(SEL)aSelector;</span><br><span class=\"line\">- (void)doesNotRecognizeSelector:(SEL)aSelector;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)forwardingTargetForSelector:(SEL)aSelector OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);</span><br><span class=\"line\">- (void)forwardInvocation:(NSInvocation *)anInvocation OBJC_SWIFT_UNAVAILABLE(&quot;&quot;);</span><br><span class=\"line\">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(&quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">+ (NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(&quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)allowsWeakReference UNAVAILABLE_ATTRIBUTE;</span><br><span class=\"line\">- (BOOL)retainWeakReference UNAVAILABLE_ATTRIBUTE;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (BOOL)isSubclassOfClass:(Class)aClass;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (BOOL)resolveClassMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);</span><br><span class=\"line\">+ (BOOL)resolveInstanceMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);</span><br><span class=\"line\"></span><br><span class=\"line\">+ (NSUInteger)hash;</span><br><span class=\"line\">+ (Class)superclass;</span><br><span class=\"line\">+ (Class)class OBJC_SWIFT_UNAVAILABLE(&quot;use &#x27;aClass.self&#x27; instead&quot;);</span><br><span class=\"line\">+ (NSString *)description;</span><br><span class=\"line\">+ (NSString *)debugDescription;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-1-Foundation-运行时支持\"><a href=\"#10-2-1-Foundation-运行时支持\" class=\"headerlink\" title=\"10.2.1 Foundation 运行时支持\"></a>10.2.1 Foundation 运行时支持</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NSString * NSExceptionName NS_EXTENSIBLE_STRING_ENUM;</span><br><span class=\"line\">typedef NSString * NSRunLoopMode NS_EXTENSIBLE_STRING_ENUM;</span><br><span class=\"line\"></span><br><span class=\"line\">FOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);</span><br><span class=\"line\">FOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);</span><br><span class=\"line\"></span><br><span class=\"line\">FOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);</span><br><span class=\"line\">FOUNDATION_EXPORT Class _Nullable NSClassFromString(NSString *aClassName);</span><br><span class=\"line\"></span><br><span class=\"line\">FOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));</span><br><span class=\"line\">FOUNDATION_EXPORT Protocol * _Nullable NSProtocolFromString(NSString *namestr) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));</span><br><span class=\"line\"></span><br><span class=\"line\">FOUNDATION_EXPORT const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger * _Nullable sizep, NSUInteger * _Nullable alignp);</span><br><span class=\"line\"></span><br><span class=\"line\">FOUNDATION_EXPORT void NSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2) NS_NO_TAIL_CALL;</span><br><span class=\"line\">FOUNDATION_EXPORT void NSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0) NS_NO_TAIL_CALL;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Class\"><a href=\"#1-Class\" class=\"headerlink\" title=\"1. Class\"></a>1. Class</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_class &#123;</span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\"></span><br><span class=\"line\">#if !__OBJC2__</span><br><span class=\"line\">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    const char * _Nonnull name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long version                                             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long info                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    long instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; OBJC2_UNAVAILABLE;</span><br><span class=\"line\">/* Use `Class` instead of `struct objc_class *` */</span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents an Objective-C class.</span><br><span class=\"line\">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-id\"><a href=\"#2-id\" class=\"headerlink\" title=\"2. id\"></a>2. id</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// Represents an instance of a class.</span><br><span class=\"line\">struct objc_object &#123;</span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/// A pointer to an instance of a class.</span><br><span class=\"line\">typedef struct objc_object *id;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Category\"><a href=\"#3-Category\" class=\"headerlink\" title=\"3. Category\"></a>3. Category</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_category &#123;</span><br><span class=\"line\">    char * _Nonnull category_name                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    char * _Nonnull class_name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list * _Nullable instance_methods     OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_method_list * _Nullable class_methods        OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents a category.</span><br><span class=\"line\">typedef struct objc_category *Category;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-属性变量\"><a href=\"#4-属性变量\" class=\"headerlink\" title=\"4. 属性变量\"></a>4. 属性变量</h2><h3 id=\"4-1-IVar\"><a href=\"#4-1-IVar\" class=\"headerlink\" title=\"4.1 IVar\"></a>4.1 IVar</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_ivar &#123;</span><br><span class=\"line\">    char * _Nullable ivar_name                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    char * _Nullable ivar_type                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    int ivar_offset                                          OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#ifdef __LP64__</span><br><span class=\"line\">    int space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_ivar_list &#123;</span><br><span class=\"line\">    int ivar_count                                           OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#ifdef __LP64__</span><br><span class=\"line\">    int space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    /* variable length structure */</span><br><span class=\"line\">    struct objc_ivar ivar_list[1]                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents an instance variable.</span><br><span class=\"line\">typedef struct objc_ivar *Ivar;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-attribute-t\"><a href=\"#4-2-attribute-t\" class=\"headerlink\" title=\"4.2 attribute_t\"></a>4.2 attribute_t</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// Defines a property attribute</span><br><span class=\"line\">typedef struct &#123;</span><br><span class=\"line\">    const char * _Nonnull name;           /**&lt; The name of the attribute */</span><br><span class=\"line\">    const char * _Nonnull value;          /**&lt; The value of the attribute (usually empty) */</span><br><span class=\"line\">&#125; objc_property_attribute_t;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-Method\"><a href=\"#5-Method\" class=\"headerlink\" title=\"5. Method\"></a>5. Method</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* objc_selector 在 iOS 的开发文档中没有找到，这段 objc_selector 的定义是在 gnustep/libobjc2 中找的，链接地址：https://github.com/gnustep/libobjc2/blob/master/selector.h </span><br><span class=\"line\">*/       </span><br><span class=\"line\">struct objc_selector</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  union</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * The name of this selector.  Used for unregistered selectors.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  const char *name;</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * The index of this selector in the selector table.  When a selector</span><br><span class=\"line\">   * is registered with the runtime, its name is replaced by an index</span><br><span class=\"line\">   * uniquely identifying this selector.  The index is used for dispatch.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  uintptr_t index;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> /**</span><br><span class=\"line\">  * The Objective-C type encoding of the message identified by this selector.</span><br><span class=\"line\">  */</span><br><span class=\"line\"> const char * types;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents a method selector.</span><br><span class=\"line\">typedef struct objc_selector *SEL;</span><br><span class=\"line\"></span><br><span class=\"line\">/// A pointer to the function of a method implementation. </span><br><span class=\"line\">#if !OBJC_OLD_DISPATCH_PROTOTYPES</span><br><span class=\"line\">typedef void (*IMP)(void /* id, SEL, ... */ ); </span><br><span class=\"line\">#else</span><br><span class=\"line\">typedef id _Nullable (*IMP)(id _Nonnull, SEL _Nonnull, ...); </span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_method &#123;</span><br><span class=\"line\">    SEL _Nonnull method_name                                 OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    char * _Nullable method_types                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    IMP _Nonnull method_imp                                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_method_list &#123;</span><br><span class=\"line\">    struct objc_method_list * _Nullable obsolete             OBJC2_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">    int method_count                                         OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#ifdef __LP64__</span><br><span class=\"line\">    int space                                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    /* variable length structure */</span><br><span class=\"line\">    struct objc_method method_list[1]                        OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_method_description_list &#123;</span><br><span class=\"line\">    int count;</span><br><span class=\"line\">    struct objc_method_description list[1];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">/// An opaque type that represents a method in a class definition.</span><br><span class=\"line\">typedef struct objc_method *Method;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、Cache\"><a href=\"#6、Cache\" class=\"headerlink\" title=\"6、Cache\"></a>6、Cache</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define CACHE_BUCKET_NAME(B)  ((B)-&gt;method_name)</span><br><span class=\"line\">#define CACHE_BUCKET_IMP(B)   ((B)-&gt;method_imp)</span><br><span class=\"line\">#define CACHE_BUCKET_VALID(B) (B)</span><br><span class=\"line\">#ifndef __LP64__</span><br><span class=\"line\">#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)&gt;&gt;2) &amp; (mask))</span><br><span class=\"line\">#else</span><br><span class=\"line\">#define CACHE_HASH(sel, mask) (((unsigned int)((uintptr_t)(sel)&gt;&gt;3)) &amp; (mask))</span><br><span class=\"line\">#endif</span><br><span class=\"line\">struct objc_cache &#123;</span><br><span class=\"line\">    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    unsigned int occupied                                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    Method _Nullable buckets[1]                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct objc_cache *Cache                             OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-Module\"><a href=\"#7-Module\" class=\"headerlink\" title=\"7. Module\"></a>7. Module</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_module &#123;</span><br><span class=\"line\">    unsigned long version                                    OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    unsigned long size                                       OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    const char * _Nullable name                              OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    Symtab _Nullable symtab                                  OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct objc_module *Module                           OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Symtab\"><a href=\"#8-Symtab\" class=\"headerlink\" title=\"8. Symtab\"></a>8. Symtab</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct objc_symtab &#123;</span><br><span class=\"line\">    unsigned long sel_ref_cnt                                OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    SEL _Nonnull * _Nullable refs                            OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    unsigned short cls_def_cnt                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    unsigned short cat_def_cnt                               OBJC2_UNAVAILABLE;</span><br><span class=\"line\">    void * _Nullable defs[1] /* variable size */             OBJC2_UNAVAILABLE;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct objc_symtab *Symtab                           OBJC2_UNAVAILABLE;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-协议\"><a href=\"#9-协议\" class=\"headerlink\" title=\"9. 协议\"></a>9. 协议</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// Represents an instance of a class.</span><br><span class=\"line\">struct objc_object &#123;</span><br><span class=\"line\">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct objc_protocol_list &#123;</span><br><span class=\"line\">    struct objc_protocol_list * _Nullable next;</span><br><span class=\"line\">    long count;</span><br><span class=\"line\">    __unsafe_unretained Protocol * _Nullable list[1];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">#ifdef __OBJC__</span><br><span class=\"line\">@class Protocol;</span><br><span class=\"line\">#else</span><br><span class=\"line\">typedef struct objc_object Protocol;</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-NSObject-定义\"><a href=\"#10-NSObject-定义\" class=\"headerlink\" title=\"10. NSObject 定义\"></a>10. NSObject 定义</h2><h3 id=\"10-1-NSObject-Protocol\"><a href=\"#10-1-NSObject-Protocol\" class=\"headerlink\" title=\"10.1 NSObject Protocol\"></a>10.1 NSObject Protocol</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@protocol NSObject</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isEqual:(id)object;</span><br><span class=\"line\">@property (readonly) NSUInteger hash;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (readonly) Class superclass;</span><br><span class=\"line\">- (Class)class OBJC_SWIFT_UNAVAILABLE(&quot;use &#x27;type(of: anObject)&#x27; instead&quot;);</span><br><span class=\"line\">- (instancetype)self;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)performSelector:(SEL)aSelector;</span><br><span class=\"line\">- (id)performSelector:(SEL)aSelector withObject:(id)object;</span><br><span class=\"line\">- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isProxy;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)isKindOfClass:(Class)aClass;</span><br><span class=\"line\">- (BOOL)isMemberOfClass:(Class)aClass;</span><br><span class=\"line\">- (BOOL)conformsToProtocol:(Protocol *)aProtocol;</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)respondsToSelector:(SEL)aSelector;</span><br><span class=\"line\"></span><br><span class=\"line\">- (instancetype)retain OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\">- (oneway void)release OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\">- (instancetype)autorelease OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\">- (NSUInteger)retainCount OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">- (struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">@property (readonly, copy) NSString *description;</span><br><span class=\"line\">@optional</span><br><span class=\"line\">@property (readonly, copy) NSString *debugDescription;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-NSObject\"><a href=\"#10-2-NSObject\" class=\"headerlink\" title=\"10.2 NSObject\"></a>10.2 NSObject</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0)</span><br><span class=\"line\">OBJC_ROOT_CLASS</span><br><span class=\"line\">OBJC_EXPORT</span><br><span class=\"line\">@interface NSObject &lt;NSObject&gt; &#123;</span><br><span class=\"line\">#pragma clang diagnostic push</span><br><span class=\"line\">#pragma clang diagnostic ignored &quot;-Wobjc-interface-ivars&quot;</span><br><span class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class=\"line\">#pragma clang diagnostic pop</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (void)load;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (void)initialize;</span><br><span class=\"line\">- (instancetype)init</span><br><span class=\"line\">#if NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER</span><br><span class=\"line\">    NS_DESIGNATED_INITIALIZER</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    ;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (instancetype)new OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);</span><br><span class=\"line\">+ (instancetype)allocWithZone:(struct _NSZone *)zone OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);</span><br><span class=\"line\">+ (instancetype)alloc OBJC_SWIFT_UNAVAILABLE(&quot;use object initializers instead&quot;);</span><br><span class=\"line\">- (void)dealloc OBJC_SWIFT_UNAVAILABLE(&quot;use &#x27;deinit&#x27; to define a de-initializer&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)finalize OBJC_DEPRECATED(&quot;Objective-C garbage collection is no longer supported&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)copy;</span><br><span class=\"line\">- (id)mutableCopy;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (id)copyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\">+ (id)mutableCopyWithZone:(struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (BOOL)instancesRespondToSelector:(SEL)aSelector;</span><br><span class=\"line\">+ (BOOL)conformsToProtocol:(Protocol *)protocol;</span><br><span class=\"line\">- (IMP)methodForSelector:(SEL)aSelector;</span><br><span class=\"line\">+ (IMP)instanceMethodForSelector:(SEL)aSelector;</span><br><span class=\"line\">- (void)doesNotRecognizeSelector:(SEL)aSelector;</span><br><span class=\"line\"></span><br><span class=\"line\">- (id)forwardingTargetForSelector:(SEL)aSelector OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);</span><br><span class=\"line\">- (void)forwardInvocation:(NSInvocation *)anInvocation OBJC_SWIFT_UNAVAILABLE(&quot;&quot;);</span><br><span class=\"line\">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(&quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">+ (NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector OBJC_SWIFT_UNAVAILABLE(&quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">- (BOOL)allowsWeakReference UNAVAILABLE_ATTRIBUTE;</span><br><span class=\"line\">- (BOOL)retainWeakReference UNAVAILABLE_ATTRIBUTE;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (BOOL)isSubclassOfClass:(Class)aClass;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (BOOL)resolveClassMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);</span><br><span class=\"line\">+ (BOOL)resolveInstanceMethod:(SEL)sel OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);</span><br><span class=\"line\"></span><br><span class=\"line\">+ (NSUInteger)hash;</span><br><span class=\"line\">+ (Class)superclass;</span><br><span class=\"line\">+ (Class)class OBJC_SWIFT_UNAVAILABLE(&quot;use &#x27;aClass.self&#x27; instead&quot;);</span><br><span class=\"line\">+ (NSString *)description;</span><br><span class=\"line\">+ (NSString *)debugDescription;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-1-Foundation-运行时支持\"><a href=\"#10-2-1-Foundation-运行时支持\" class=\"headerlink\" title=\"10.2.1 Foundation 运行时支持\"></a>10.2.1 Foundation 运行时支持</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef NSString * NSExceptionName NS_EXTENSIBLE_STRING_ENUM;</span><br><span class=\"line\">typedef NSString * NSRunLoopMode NS_EXTENSIBLE_STRING_ENUM;</span><br><span class=\"line\"></span><br><span class=\"line\">FOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);</span><br><span class=\"line\">FOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);</span><br><span class=\"line\"></span><br><span class=\"line\">FOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);</span><br><span class=\"line\">FOUNDATION_EXPORT Class _Nullable NSClassFromString(NSString *aClassName);</span><br><span class=\"line\"></span><br><span class=\"line\">FOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));</span><br><span class=\"line\">FOUNDATION_EXPORT Protocol * _Nullable NSProtocolFromString(NSString *namestr) API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));</span><br><span class=\"line\"></span><br><span class=\"line\">FOUNDATION_EXPORT const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger * _Nullable sizep, NSUInteger * _Nullable alignp);</span><br><span class=\"line\"></span><br><span class=\"line\">FOUNDATION_EXPORT void NSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2) NS_NO_TAIL_CALL;</span><br><span class=\"line\">FOUNDATION_EXPORT void NSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0) NS_NO_TAIL_CALL;</span><br></pre></td></tr></table></figure>\n"},{"title":"iOS之KVC","abbrlink":47946,"date":"2021-04-20T13:36:02.000Z","_content":"\n## 1.[笔记-KVC的底层实现原理](https://juejin.cn/post/6844903710917672968#heading-5)\n","source":"_posts/iOS/Languages/Objective-C/iOS之KVC.md","raw":"---\ntitle: iOS之KVC\nabbrlink: 47946\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1.[笔记-KVC的底层实现原理](https://juejin.cn/post/6844903710917672968#heading-5)\n","slug":"iOS/Languages/Objective-C/iOS之KVC","published":1,"updated":"2021-09-22T06:56:40.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3u003yiu9k30ep3u0n","content":"<h2 id=\"1-笔记-KVC的底层实现原理\"><a href=\"#1-笔记-KVC的底层实现原理\" class=\"headerlink\" title=\"1.笔记-KVC的底层实现原理\"></a>1.<a href=\"https://juejin.cn/post/6844903710917672968#heading-5\">笔记-KVC的底层实现原理</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-笔记-KVC的底层实现原理\"><a href=\"#1-笔记-KVC的底层实现原理\" class=\"headerlink\" title=\"1.笔记-KVC的底层实现原理\"></a>1.<a href=\"https://juejin.cn/post/6844903710917672968#heading-5\">笔记-KVC的底层实现原理</a></h2>"},{"title":"PHP","abbrlink":"c036635b","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Languages/PHP/PHP.md","raw":"---\ntitle: PHP\nabbrlink: c036635b\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Languages/PHP/PHP","published":1,"updated":"2021-07-29T06:46:00.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3v003ziu9k66d0a7d2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Pyhon","abbrlink":"e6ad766f","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Languages/Python/Pyhon.md","raw":"---\ntitle: Pyhon\nabbrlink: e6ad766f\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Languages/Python/Pyhon","published":1,"updated":"2021-07-29T06:46:00.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3v0040iu9k79fban1n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Shell笔记","abbrlink":"45ed956e","date":"2021-04-20T13:36:02.000Z","_content":"## 一、`[[]]`、`[ ]`、`(( ))`\n\n### 1. `[]`和`test`\n\n两者是一样的，在命令行里`test expr`和`[ expr ]`的效果相同。\n\n`test`的三个基本作用是判断文件、判断字符串、判断整数。支持使用 ”与或非“ 将表达式连接起来。\n\n`test`中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用`-eq`, `-gt`这种形式。\n\n无论是字符串比较还是整数比较都千万不要使用大于号小于号。当然，如果你实在想用也是可以的，对于字符串比较可以使用尖括号的转义形式， 如果比较\"ab\"和\"bc\"：`[ ab \\< bc ]`，结果为真，也就是返回状态为0。\n\n### 2. `[[ ]]`\n\n这是内置在shell中的一个命令，它就比刚才说的`test`强大的多了。支持字符串的模式匹配（使用`=~`操作符时甚至支持shell的正则表达 式）。逻辑组合可以不使用`test`的-a,-o而使用`&& ||`。\n字符串比较时可以把右边的作为一个模式，这是右边的字符串不加双引号的情况下。如果右边的字符串加了双引号，则认为是一个文本字符串。而不仅仅是一个字符串，比如`[[ hello == hell? ]]`，结果为真。\n\n**注意:**\n\n使用`[]`和`[[]]`的时候不要吝啬空格，每一项两边都要有空格，`[[ 1 == 2 ]]`的结果为“假”，但`[[ 1==2 ]]`的结果为“真”！\n\n### 3. `let`和`(())`\n\n两者也是一样的(或者说基本上是一样的，双括号比let稍弱一些)。主要进行算术运算(上面的两个都不行)，也比较适合进 行整数比较，可以直接使用熟悉的<,>等比较运算符。可以直接使用变量名如`var`而不需要`$var`这样的形式。支持分号隔开的多个表达式\n\n-----------\n\n1. 首先，尽管很相似，但是从概念上讲，二者是不同层次的东西。\n`[[`，是关键字，许多shell(如ash bsh)并不支持这种方式。ksh, bash(据说从2.02起引入对[[的支持)等支持。\n`[`是一条命令， 与`test`等价，大多数shell都支持。在现代的大多数sh实现中，`[`与`test`是内部(builtin)命令，换句话说执行`test /[`时不会调用/some/path/to/test这样的外部命令(如果有这样的命令的话)。\n\n2. `[[]]`结构比Bash版本的`[]`更通用。在`[[`和`]]`之间的所有的字符都不会被文件扩展或是标记分割，但是会有参数引用和命令替换。\n\n3. 用`[[ ... ]]`测试结构比用`[ ... ]`更能防止脚本里的许多逻辑错误。比如说，`&&`,`||`,`<`和`>`操作符能在一个`[[]]`测试里通过，但在`[]`结构会发生错误。\n\n4. `(( ))`结构扩展并计算一个算术表达式的值。如果表达式值为0，会返回1或假作为退出状态码。一个非零值的表达式返回一个0或真作为退出状态码。这个结构和先前`test`命令及`[]`结构的讨论刚好相反。\n\n5. `[ ... ]`为shell命令，所以在其中的表达式应是它的命令行参数，所以串比较操作符`>` 与`<`必须转义，否则就变成IO改向操作符了(请参看上面2中的例子)。在`[[`中`<`与`>`不需转义；\n由于`[[`是关键字，不会做命令行扩展，因而相对的语法就稍严格些。例如\n在`[ ... ]`中可以用引号括起操作符，因为在做命令行扩展时会去掉这些引号，而在`[[ ... ]]`则不允许这样做。\n\n6. `[[ ... ]]`进行算术扩展，而`[ ... ]`不做\n\n7. `[[ ... && ... && ...  ]]` 和 `[ ... -a ... -a ...]` 不一样，`[[ ]]` 是逻辑短路操作，而 `[ ]` 不会进行逻辑短路\n\n-----------\n\n1）在ksh中的test\n\n* 数字的运算可使用let、(( )) ，其中运算时不需要变量`$`符号，\n 运算符为 `+、-、*、/、%` ，不建议使用expr数字的比较使用 (( )) ，其运算符 `>、>=、<、<=、==、!=`\n* 可以使用算术扩展，如：(( 99+1 <= 101 ))\n* 字符表达式的比较使用 [[ ]] ，其运算符 `=、!=、-n、-z`\n* 文件表达式的测试使用 [[ ]] ，其运算符 `-r、-l、-w、-x、-f、-d、-s、-nt、-ot`\n* 逻辑表达式的测试使用 [[ ]] ，其运算符`!、&&、||`\n* 数字比较、字符比较、逻辑测试可以组合，如`$ [[ \"a\" != \"b\" && 4 -gt 3 ]]`\n* 支持bash中的通配符扩展，如：`[[ hest = h??t ]] 、[ hest = h*t ]]`\n* 使用 (( )) 时，不需要空格分隔各值和运算符，使用 [[ ]] 时需要用空格分隔各值和运算符。\n\n2）bash与ksh中的 `[[ ]]` 不同\n\n在redhat9的bash中也可以使用 `[[ ]]` 符号。但是建议严格按照上面的原则使用。\n在bash中，数字的比较最好使用 `(( ))`，虽说可以使用 `[[ ]]`，但若在其内使用运算符`>、>=、<、<=、==、!=` 时，其结果经常是错误的，不过若在 `[[ ]]` 中使用 `[ ]` 中的运算符`-eq、-ne、-le、-lt、-gt、-ge`等，还尚未发现有错。因此诸如`$ [[ \" a\" != “b” && 4 > 3 ]]` 这类组合（见上）也不可以在bash中使用，其出错率很高。\n例：`[[ \"a\" != \"b\" && 10 > 2 ]]` 判断结果就不正常。\n诸如 `[ 2 \\< 10 ]、[[ 2 < 10 ]]` 都是不要使用。使用算术扩展最好用 `(( 99+1 == 100 ))` ，而不要使用`[[ 99+1 -eq 100 ]]` 。\n\n![示例表格](../resources/charicteristics.gif)\n\n### 4. 运算符\n\n#### 4.1 文件比较运算符\n\n| 运算符                  | 描述                                   | 示例                                            |\n| ----------------------- | -------------------------------------- | ----------------------------------------------- |\n| -e                      | filename 如果 filename 存在，则为真    | [ -e /var/log/syslog ]                          |\n| -d                      | filename 如果 filename 为目录，则为真  | [ -d /tmp/mydir ]                               |\n| -f filename             | 如果 filename 为常规文件，则为真       | [ -f /usr/bin/grep ]                            |\n| -L filename             | 如果 filename 为符号链接，则为真       | [ -L /usr/bin/grep ]                            |\n| -r filename             | 如果 filename 可读，则为真             | [ -r /var/log/syslog ]                          |\n| -w filename             | 如果 filename 可写，则为真             | [ -w /var/mytmp.txt ]                           |\n| -x filename             | 如果 filename 可执行，则为真           | [ -L /usr/bin/grep ]                            |\n| filename1 -nt filename2 | 如果 filename1 比 filename2 新，则为真 | [ /tmp/install/etc/services -nt /etc/services ] |\n| filename1 -ot filename2 | 如果 filename1 比 filename2 旧，则为真 | [ /boot/bzImage -ot arch/i386/boot/bzImage ]    |\n\n#### 4.2 字符串比较运算符 （请注意引号的使用，这是防止空格扰乱代码的好方法）\n\n| 运算符             | 描述                                 | 示例                            |\n| ------------------ | ------------------------------------ | ------------------------------- |\n| -z string          | 如果 string 长度为零，则为真         | [ -z \"$myvar\" ]                 |\n| -n string          | 如果 string 长度非零，则为真         | [ -n \"$myvar\" ]                 |\n| string1 = string2  | 如果 string1 与 string2 相同，则为真 | [ \"$myvar\" = \"one two three\" ]  |\n| string1 != string2 | 如果 string1 与 string2 不同，则为真 | [ \"$myvar\" != \"one two three\" ] |\n\n#### 4.3 算术比较运算符\n\n| 运算符        | 描述       | 示例             |\n| ------------- | ---------- | ---------------- |\n| num1 -eq num2 | 等于       | [ 3 -eq $mynum ] |\n| num1 -ne num2 | 不等于     | [ 3 -ne $mynum ] |\n| num1 -lt num2 | 小于       | [ 3 -lt $mynum ] |\n| num1 -le num2 | 小于或等于 | [ 3 -le $mynum ] |\n| num1 -gt num2 | 大于       | [ 3 -gt $mynum ] |\n| num1 -ge num2 | 大于或等于 | [ 3 -ge $mynum ] |\n\n### 5. 测试命令\n\ntest命令用于检查某个条件是否成立，它可以进行数值、字符和文件3个方面的测试，其测试符和相应的功能分别如下。\n\n#### 5.1 数值测试\n\n```shell\n-eq 等于则为真。\n\n-ne 不等于则为真。\n\n-gt 大于则为真。\n\n-ge 大于等于则为真。\n\n-lt 小于则为真。\n\n-le 小于等于则为真。\n```\n\n#### 5.2 字串测试\n\n```shell\n= 等于则为真。\n\n!= 不相等则为真。\n\n-z字串 字串长度伪则为真。\n\n-n字串 字串长度不伪则为真。\n```\n\n#### 5.3 文件测试\n\n```shell\n-e文件名 如果文件存在则为真。\n\n-r文件名 如果文件存在且可读则为真。\n\n-w文件名 如果文件存在且可写则为真。\n\n-x文件名 如果文件存在且可执行则为真。\n\n-s文件名 如果文件存在且至少有一个字符则为真。\n\n-d文件名 如果文件存在且为目录则为真。\n\n-f文件名 如果文件存在且为普通文件则为真。\n\n-c文件名 如果文件存在且为字符型特殊文件则为真。\n\n-b文件名 如果文件存在且为块特殊文件则为真\n```\n\n### 6. 条件变量替换\n\nBash Shell可以进行变量的条件替换,既只有某种条件发生时才进行替换,替换条件放在{}中.\n\n(1) 当变量未定义或者值为空时,返回值为word的内容,否则返回变量的值.\n\n```shell\n${value:-word} \n```\n\n(2) 与前者类似,只是若变量未定义或者值为空时,在返回word的值的同时将word赋值给value\n\n```shell\n${value:=word} \n```\n\n(3) 若变量以赋值的话,正常替换.否则将消息message送到标准错误输出(若此替换出现在Shell程序中,那么该程序将终止运行)\n\n```shell\n${value:?message}  \n```\n\n(4) 若变量以赋值的话,其值才用word替换,否则不进行任何替换\n\n```shell\n${value:+word} \n```\n\n(5) 从变量中提取子串,这里offset和length可以是算术表达式.\n\n```shell\n${value:offset}\n${value:offset:length}\n```\n\n(6) 变量的字符个数\n\n```shell\n${#value}\n```\n\n(7) 去掉value中与pattern相匹配的部分,条件是value的开头与pattern相匹配\n\n```shell\n${value#pattern}\n${value##pattern}\n```\n\n* *#与##的区别在于一个是最短匹配模式,一个是最长匹配模式.*\n\n(8) 于(7)类似,只是是从value的尾部于pattern相匹配,%与%%的区别与#与##一样\n\n```shell\n${value%pattern}\n${value%%pattern}\n```\n\n(9) 进行变量内容的替换,把与pattern匹配的部分替换为string的内容,/与//的区别与上同\n\n```shell\n${value/pattern/string}\n${value//pattern/string}\n```\n\n注意: 上述条件变量替换中,除(2)外,其余均不影响变量本身的值\n\n```shell\nvar1=\"1\"\nvar2=\"2\"\n```\n\n下面是并且的运算符-a，另外注意，用一个test命令就可以了，还有if条件后面的分号\n\n```shell\nif test $var1 = \"1\"-a $var2 = \"2\" ; then\necho \"equal\"\nfi\n```\n\n下面是或运算符 -o，有一个为真就可以\n\n```shell\nif test $var1 != \"1\" -o $var2 != \"3\" ; then\necho \"not equal\"\nfi\n```\n\n下面是非运算符 ！\nif条件是为真的时候执行，如果使用！运算符，那么原表达式必须为false\n\n```shell\nif ! test $var1 != \"1\"; then\necho \"not 1\"\nfi\n```\n\n以上三个if都为真，所以三个echo都会打印\n\n在一个文档把这几个运算法说的一塌糊涂，于是自己动手实验了一下\n\n***shell字符串比较、判断是否为数字***\n\n二元比较操作符,比较变量或者比较数字.注意数字与字符串的区别.\n\n整数比较\n\n```shell\n-eq       等于,如:if [ \"$a\" -eq \"$b\" ]\n-ne       不等于,如:if [ \"$a\" -ne \"$b\" ]\n-gt       大于,如:if [ \"$a\" -gt \"$b\" ]\n-ge       大于等于,如:if [ \"$a\" -ge \"$b\" ]\n-lt       小于,如:if [ \"$a\" -lt \"$b\" ]\n-le       小于等于,如:if [ \"$a\" -le \"$b\" ]\n<         小于(需要双括号),如:((\"$a\" < \"$b\"))\n<=        小于等于(需要双括号),如:((\"$a\" <= \"$b\"))\n>         大于(需要双括号),如:((\"$a\" > \"$b\"))\n>=        大于等于(需要双括号),如:((\"$a\" >= \"$b\"))\n```\n\n字符串比较\\\n\n```shell\n=       等于,如:if [ \"$a\" = \"$b\" ]\n\n==      等于,如:if [ \"$a\" == \"$b\" ],与=等价\n        注意:==的功能在[[]]和[]中的行为是不同的,如下:\n        1 [[ $a == z* ]]    # 如果$a以\"z\"开头(模式匹配)那么将为true\n        2 [[ $a == \"z*\" ]] # 如果$a等于z*(字符匹配),那么结果为true\n        3\n        4 [ $a == z* ]      # File globbing 和word splitting将会发生\n        5 [ \"$a\" == \"z*\" ] # 如果$a等于z*(字符匹配),那么结果为true\n        一点解释,关于File globbing是一种关于文件的速记法,比如\"*.c\"就是,再如~也是.\n        但是file globbing并不是严格的正则表达式,虽然绝大多数情况下结构比较像.\n\n!=      不等于,如:if [ \"$a\" != \"$b\" ]\n        这个操作符将在[[]]结构中使用模式匹配.\n\n<       小于,在ASCII字母顺序下.如:\n        if [[ \"$a\" < \"$b\" ]]\n        if [ \"$a\" \\< \"$b\" ]\n        注意:在[]结构中\"<\"需要被转义.\n\n>       大于,在ASCII字母顺序下.如:\n        if [[ \"$a\" > \"$b\" ]]\n        if [ \"$a\" \\> \"$b\" ]\n        注意:在[]结构中\">\"需要被转义.\n        具体参考Example 26-11来查看这个操作符应用的例子.\n\n-z      字符串为\"null\".就是长度为0.\n\n-n      字符串不为\"null\"\n```\n\n**注意:**\n\n使用-n在`[]`结构中测试必须要用`\"\"`把变量引起来.使用一个未被`\"\"`的字符串来使用! -z\n或者就是未用`\"\"`引用的字符串本身,放到`[]`结构中。虽然一般情况下可\n以工作,但这是不安全的.习惯于使用`\"\"`来测试字符串是一种好习惯.\n\n文章出处：<http://www.cnblogs.com/aaron-agu/> 只有毅力和决心才能使人真正具有价值！\n\n### 7. `#*`,`##*`,`##*`,`%*`,`%%*`的含义及用法\n\n介绍下Shell中的`${}`、`##`和`%%`使用范例，本文给出了不同情况下得到的结果。\n假设定义了一个变量为：\n代码如下:\n\n```shell\nfile=/dir1/dir2/dir3/my.file.txt\n```\n\n可以用`${ }`分别替换得到不同的值：\n\n```shell\n${file#*/}：删掉第一个 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt\n${file##*/}：删掉最后一个 /  及其左边的字符串：my.file.txt\n${file#*.}：删掉第一个 .  及其左边的字符串：file.txt\n${file##*.}：删掉最后一个 .  及其左边的字符串：txt\n${file%/*}：删掉最后一个  /  及其右边的字符串：/dir1/dir2/dir3\n${file%%/*}：删掉第一个 /  及其右边的字符串：(空值)\n${file%.*}：删掉最后一个  .  及其右边的字符串：/dir1/dir2/dir3/my.file\n${file%%.*}：删掉第一个  .   及其右边的字符串：/dir1/dir2/dir3/my\n```\n\n记忆的方法为：\n\n**是去掉左边（键盘上`#`在 `$` 的左边）**\n\n`%`是去掉右边（键盘上`%` 在`$` 的右边）\n单一符号是最小匹配；两个符号是最大匹配\n\n```shell\n{file:0:5}：提取最左边的 5 个字节：/dir1\n{file:5:5}：提取第 5 个字节右边的连续5个字节：/dir2\n```\n\n也可以对变量值里的字符串作替换：\n\n```shell\n{file/dir/path}：将第一个dir 替换为path：/path1/dir2/dir3/my.file.txt\n{file//dir/path}：将全部dir 替换为 path：/path1/path2/path3/my.file.txt\n```\n","source":"_posts/iOS/Languages/Shell/Shell.md","raw":"---\ntitle: Shell笔记\nabbrlink: 45ed956e\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 一、`[[]]`、`[ ]`、`(( ))`\n\n### 1. `[]`和`test`\n\n两者是一样的，在命令行里`test expr`和`[ expr ]`的效果相同。\n\n`test`的三个基本作用是判断文件、判断字符串、判断整数。支持使用 ”与或非“ 将表达式连接起来。\n\n`test`中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用`-eq`, `-gt`这种形式。\n\n无论是字符串比较还是整数比较都千万不要使用大于号小于号。当然，如果你实在想用也是可以的，对于字符串比较可以使用尖括号的转义形式， 如果比较\"ab\"和\"bc\"：`[ ab \\< bc ]`，结果为真，也就是返回状态为0。\n\n### 2. `[[ ]]`\n\n这是内置在shell中的一个命令，它就比刚才说的`test`强大的多了。支持字符串的模式匹配（使用`=~`操作符时甚至支持shell的正则表达 式）。逻辑组合可以不使用`test`的-a,-o而使用`&& ||`。\n字符串比较时可以把右边的作为一个模式，这是右边的字符串不加双引号的情况下。如果右边的字符串加了双引号，则认为是一个文本字符串。而不仅仅是一个字符串，比如`[[ hello == hell? ]]`，结果为真。\n\n**注意:**\n\n使用`[]`和`[[]]`的时候不要吝啬空格，每一项两边都要有空格，`[[ 1 == 2 ]]`的结果为“假”，但`[[ 1==2 ]]`的结果为“真”！\n\n### 3. `let`和`(())`\n\n两者也是一样的(或者说基本上是一样的，双括号比let稍弱一些)。主要进行算术运算(上面的两个都不行)，也比较适合进 行整数比较，可以直接使用熟悉的<,>等比较运算符。可以直接使用变量名如`var`而不需要`$var`这样的形式。支持分号隔开的多个表达式\n\n-----------\n\n1. 首先，尽管很相似，但是从概念上讲，二者是不同层次的东西。\n`[[`，是关键字，许多shell(如ash bsh)并不支持这种方式。ksh, bash(据说从2.02起引入对[[的支持)等支持。\n`[`是一条命令， 与`test`等价，大多数shell都支持。在现代的大多数sh实现中，`[`与`test`是内部(builtin)命令，换句话说执行`test /[`时不会调用/some/path/to/test这样的外部命令(如果有这样的命令的话)。\n\n2. `[[]]`结构比Bash版本的`[]`更通用。在`[[`和`]]`之间的所有的字符都不会被文件扩展或是标记分割，但是会有参数引用和命令替换。\n\n3. 用`[[ ... ]]`测试结构比用`[ ... ]`更能防止脚本里的许多逻辑错误。比如说，`&&`,`||`,`<`和`>`操作符能在一个`[[]]`测试里通过，但在`[]`结构会发生错误。\n\n4. `(( ))`结构扩展并计算一个算术表达式的值。如果表达式值为0，会返回1或假作为退出状态码。一个非零值的表达式返回一个0或真作为退出状态码。这个结构和先前`test`命令及`[]`结构的讨论刚好相反。\n\n5. `[ ... ]`为shell命令，所以在其中的表达式应是它的命令行参数，所以串比较操作符`>` 与`<`必须转义，否则就变成IO改向操作符了(请参看上面2中的例子)。在`[[`中`<`与`>`不需转义；\n由于`[[`是关键字，不会做命令行扩展，因而相对的语法就稍严格些。例如\n在`[ ... ]`中可以用引号括起操作符，因为在做命令行扩展时会去掉这些引号，而在`[[ ... ]]`则不允许这样做。\n\n6. `[[ ... ]]`进行算术扩展，而`[ ... ]`不做\n\n7. `[[ ... && ... && ...  ]]` 和 `[ ... -a ... -a ...]` 不一样，`[[ ]]` 是逻辑短路操作，而 `[ ]` 不会进行逻辑短路\n\n-----------\n\n1）在ksh中的test\n\n* 数字的运算可使用let、(( )) ，其中运算时不需要变量`$`符号，\n 运算符为 `+、-、*、/、%` ，不建议使用expr数字的比较使用 (( )) ，其运算符 `>、>=、<、<=、==、!=`\n* 可以使用算术扩展，如：(( 99+1 <= 101 ))\n* 字符表达式的比较使用 [[ ]] ，其运算符 `=、!=、-n、-z`\n* 文件表达式的测试使用 [[ ]] ，其运算符 `-r、-l、-w、-x、-f、-d、-s、-nt、-ot`\n* 逻辑表达式的测试使用 [[ ]] ，其运算符`!、&&、||`\n* 数字比较、字符比较、逻辑测试可以组合，如`$ [[ \"a\" != \"b\" && 4 -gt 3 ]]`\n* 支持bash中的通配符扩展，如：`[[ hest = h??t ]] 、[ hest = h*t ]]`\n* 使用 (( )) 时，不需要空格分隔各值和运算符，使用 [[ ]] 时需要用空格分隔各值和运算符。\n\n2）bash与ksh中的 `[[ ]]` 不同\n\n在redhat9的bash中也可以使用 `[[ ]]` 符号。但是建议严格按照上面的原则使用。\n在bash中，数字的比较最好使用 `(( ))`，虽说可以使用 `[[ ]]`，但若在其内使用运算符`>、>=、<、<=、==、!=` 时，其结果经常是错误的，不过若在 `[[ ]]` 中使用 `[ ]` 中的运算符`-eq、-ne、-le、-lt、-gt、-ge`等，还尚未发现有错。因此诸如`$ [[ \" a\" != “b” && 4 > 3 ]]` 这类组合（见上）也不可以在bash中使用，其出错率很高。\n例：`[[ \"a\" != \"b\" && 10 > 2 ]]` 判断结果就不正常。\n诸如 `[ 2 \\< 10 ]、[[ 2 < 10 ]]` 都是不要使用。使用算术扩展最好用 `(( 99+1 == 100 ))` ，而不要使用`[[ 99+1 -eq 100 ]]` 。\n\n![示例表格](../resources/charicteristics.gif)\n\n### 4. 运算符\n\n#### 4.1 文件比较运算符\n\n| 运算符                  | 描述                                   | 示例                                            |\n| ----------------------- | -------------------------------------- | ----------------------------------------------- |\n| -e                      | filename 如果 filename 存在，则为真    | [ -e /var/log/syslog ]                          |\n| -d                      | filename 如果 filename 为目录，则为真  | [ -d /tmp/mydir ]                               |\n| -f filename             | 如果 filename 为常规文件，则为真       | [ -f /usr/bin/grep ]                            |\n| -L filename             | 如果 filename 为符号链接，则为真       | [ -L /usr/bin/grep ]                            |\n| -r filename             | 如果 filename 可读，则为真             | [ -r /var/log/syslog ]                          |\n| -w filename             | 如果 filename 可写，则为真             | [ -w /var/mytmp.txt ]                           |\n| -x filename             | 如果 filename 可执行，则为真           | [ -L /usr/bin/grep ]                            |\n| filename1 -nt filename2 | 如果 filename1 比 filename2 新，则为真 | [ /tmp/install/etc/services -nt /etc/services ] |\n| filename1 -ot filename2 | 如果 filename1 比 filename2 旧，则为真 | [ /boot/bzImage -ot arch/i386/boot/bzImage ]    |\n\n#### 4.2 字符串比较运算符 （请注意引号的使用，这是防止空格扰乱代码的好方法）\n\n| 运算符             | 描述                                 | 示例                            |\n| ------------------ | ------------------------------------ | ------------------------------- |\n| -z string          | 如果 string 长度为零，则为真         | [ -z \"$myvar\" ]                 |\n| -n string          | 如果 string 长度非零，则为真         | [ -n \"$myvar\" ]                 |\n| string1 = string2  | 如果 string1 与 string2 相同，则为真 | [ \"$myvar\" = \"one two three\" ]  |\n| string1 != string2 | 如果 string1 与 string2 不同，则为真 | [ \"$myvar\" != \"one two three\" ] |\n\n#### 4.3 算术比较运算符\n\n| 运算符        | 描述       | 示例             |\n| ------------- | ---------- | ---------------- |\n| num1 -eq num2 | 等于       | [ 3 -eq $mynum ] |\n| num1 -ne num2 | 不等于     | [ 3 -ne $mynum ] |\n| num1 -lt num2 | 小于       | [ 3 -lt $mynum ] |\n| num1 -le num2 | 小于或等于 | [ 3 -le $mynum ] |\n| num1 -gt num2 | 大于       | [ 3 -gt $mynum ] |\n| num1 -ge num2 | 大于或等于 | [ 3 -ge $mynum ] |\n\n### 5. 测试命令\n\ntest命令用于检查某个条件是否成立，它可以进行数值、字符和文件3个方面的测试，其测试符和相应的功能分别如下。\n\n#### 5.1 数值测试\n\n```shell\n-eq 等于则为真。\n\n-ne 不等于则为真。\n\n-gt 大于则为真。\n\n-ge 大于等于则为真。\n\n-lt 小于则为真。\n\n-le 小于等于则为真。\n```\n\n#### 5.2 字串测试\n\n```shell\n= 等于则为真。\n\n!= 不相等则为真。\n\n-z字串 字串长度伪则为真。\n\n-n字串 字串长度不伪则为真。\n```\n\n#### 5.3 文件测试\n\n```shell\n-e文件名 如果文件存在则为真。\n\n-r文件名 如果文件存在且可读则为真。\n\n-w文件名 如果文件存在且可写则为真。\n\n-x文件名 如果文件存在且可执行则为真。\n\n-s文件名 如果文件存在且至少有一个字符则为真。\n\n-d文件名 如果文件存在且为目录则为真。\n\n-f文件名 如果文件存在且为普通文件则为真。\n\n-c文件名 如果文件存在且为字符型特殊文件则为真。\n\n-b文件名 如果文件存在且为块特殊文件则为真\n```\n\n### 6. 条件变量替换\n\nBash Shell可以进行变量的条件替换,既只有某种条件发生时才进行替换,替换条件放在{}中.\n\n(1) 当变量未定义或者值为空时,返回值为word的内容,否则返回变量的值.\n\n```shell\n${value:-word} \n```\n\n(2) 与前者类似,只是若变量未定义或者值为空时,在返回word的值的同时将word赋值给value\n\n```shell\n${value:=word} \n```\n\n(3) 若变量以赋值的话,正常替换.否则将消息message送到标准错误输出(若此替换出现在Shell程序中,那么该程序将终止运行)\n\n```shell\n${value:?message}  \n```\n\n(4) 若变量以赋值的话,其值才用word替换,否则不进行任何替换\n\n```shell\n${value:+word} \n```\n\n(5) 从变量中提取子串,这里offset和length可以是算术表达式.\n\n```shell\n${value:offset}\n${value:offset:length}\n```\n\n(6) 变量的字符个数\n\n```shell\n${#value}\n```\n\n(7) 去掉value中与pattern相匹配的部分,条件是value的开头与pattern相匹配\n\n```shell\n${value#pattern}\n${value##pattern}\n```\n\n* *#与##的区别在于一个是最短匹配模式,一个是最长匹配模式.*\n\n(8) 于(7)类似,只是是从value的尾部于pattern相匹配,%与%%的区别与#与##一样\n\n```shell\n${value%pattern}\n${value%%pattern}\n```\n\n(9) 进行变量内容的替换,把与pattern匹配的部分替换为string的内容,/与//的区别与上同\n\n```shell\n${value/pattern/string}\n${value//pattern/string}\n```\n\n注意: 上述条件变量替换中,除(2)外,其余均不影响变量本身的值\n\n```shell\nvar1=\"1\"\nvar2=\"2\"\n```\n\n下面是并且的运算符-a，另外注意，用一个test命令就可以了，还有if条件后面的分号\n\n```shell\nif test $var1 = \"1\"-a $var2 = \"2\" ; then\necho \"equal\"\nfi\n```\n\n下面是或运算符 -o，有一个为真就可以\n\n```shell\nif test $var1 != \"1\" -o $var2 != \"3\" ; then\necho \"not equal\"\nfi\n```\n\n下面是非运算符 ！\nif条件是为真的时候执行，如果使用！运算符，那么原表达式必须为false\n\n```shell\nif ! test $var1 != \"1\"; then\necho \"not 1\"\nfi\n```\n\n以上三个if都为真，所以三个echo都会打印\n\n在一个文档把这几个运算法说的一塌糊涂，于是自己动手实验了一下\n\n***shell字符串比较、判断是否为数字***\n\n二元比较操作符,比较变量或者比较数字.注意数字与字符串的区别.\n\n整数比较\n\n```shell\n-eq       等于,如:if [ \"$a\" -eq \"$b\" ]\n-ne       不等于,如:if [ \"$a\" -ne \"$b\" ]\n-gt       大于,如:if [ \"$a\" -gt \"$b\" ]\n-ge       大于等于,如:if [ \"$a\" -ge \"$b\" ]\n-lt       小于,如:if [ \"$a\" -lt \"$b\" ]\n-le       小于等于,如:if [ \"$a\" -le \"$b\" ]\n<         小于(需要双括号),如:((\"$a\" < \"$b\"))\n<=        小于等于(需要双括号),如:((\"$a\" <= \"$b\"))\n>         大于(需要双括号),如:((\"$a\" > \"$b\"))\n>=        大于等于(需要双括号),如:((\"$a\" >= \"$b\"))\n```\n\n字符串比较\\\n\n```shell\n=       等于,如:if [ \"$a\" = \"$b\" ]\n\n==      等于,如:if [ \"$a\" == \"$b\" ],与=等价\n        注意:==的功能在[[]]和[]中的行为是不同的,如下:\n        1 [[ $a == z* ]]    # 如果$a以\"z\"开头(模式匹配)那么将为true\n        2 [[ $a == \"z*\" ]] # 如果$a等于z*(字符匹配),那么结果为true\n        3\n        4 [ $a == z* ]      # File globbing 和word splitting将会发生\n        5 [ \"$a\" == \"z*\" ] # 如果$a等于z*(字符匹配),那么结果为true\n        一点解释,关于File globbing是一种关于文件的速记法,比如\"*.c\"就是,再如~也是.\n        但是file globbing并不是严格的正则表达式,虽然绝大多数情况下结构比较像.\n\n!=      不等于,如:if [ \"$a\" != \"$b\" ]\n        这个操作符将在[[]]结构中使用模式匹配.\n\n<       小于,在ASCII字母顺序下.如:\n        if [[ \"$a\" < \"$b\" ]]\n        if [ \"$a\" \\< \"$b\" ]\n        注意:在[]结构中\"<\"需要被转义.\n\n>       大于,在ASCII字母顺序下.如:\n        if [[ \"$a\" > \"$b\" ]]\n        if [ \"$a\" \\> \"$b\" ]\n        注意:在[]结构中\">\"需要被转义.\n        具体参考Example 26-11来查看这个操作符应用的例子.\n\n-z      字符串为\"null\".就是长度为0.\n\n-n      字符串不为\"null\"\n```\n\n**注意:**\n\n使用-n在`[]`结构中测试必须要用`\"\"`把变量引起来.使用一个未被`\"\"`的字符串来使用! -z\n或者就是未用`\"\"`引用的字符串本身,放到`[]`结构中。虽然一般情况下可\n以工作,但这是不安全的.习惯于使用`\"\"`来测试字符串是一种好习惯.\n\n文章出处：<http://www.cnblogs.com/aaron-agu/> 只有毅力和决心才能使人真正具有价值！\n\n### 7. `#*`,`##*`,`##*`,`%*`,`%%*`的含义及用法\n\n介绍下Shell中的`${}`、`##`和`%%`使用范例，本文给出了不同情况下得到的结果。\n假设定义了一个变量为：\n代码如下:\n\n```shell\nfile=/dir1/dir2/dir3/my.file.txt\n```\n\n可以用`${ }`分别替换得到不同的值：\n\n```shell\n${file#*/}：删掉第一个 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt\n${file##*/}：删掉最后一个 /  及其左边的字符串：my.file.txt\n${file#*.}：删掉第一个 .  及其左边的字符串：file.txt\n${file##*.}：删掉最后一个 .  及其左边的字符串：txt\n${file%/*}：删掉最后一个  /  及其右边的字符串：/dir1/dir2/dir3\n${file%%/*}：删掉第一个 /  及其右边的字符串：(空值)\n${file%.*}：删掉最后一个  .  及其右边的字符串：/dir1/dir2/dir3/my.file\n${file%%.*}：删掉第一个  .   及其右边的字符串：/dir1/dir2/dir3/my\n```\n\n记忆的方法为：\n\n**是去掉左边（键盘上`#`在 `$` 的左边）**\n\n`%`是去掉右边（键盘上`%` 在`$` 的右边）\n单一符号是最小匹配；两个符号是最大匹配\n\n```shell\n{file:0:5}：提取最左边的 5 个字节：/dir1\n{file:5:5}：提取第 5 个字节右边的连续5个字节：/dir2\n```\n\n也可以对变量值里的字符串作替换：\n\n```shell\n{file/dir/path}：将第一个dir 替换为path：/path1/dir2/dir3/my.file.txt\n{file//dir/path}：将全部dir 替换为 path：/path1/path2/path3/my.file.txt\n```\n","slug":"iOS/Languages/Shell/Shell","published":1,"updated":"2021-07-29T06:46:00.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3w0041iu9k57ok6nkb","content":"<h2 id=\"一、-、-、\"><a href=\"#一、-、-、\" class=\"headerlink\" title=\"一、[[]]、[ ]、(( ))\"></a>一、<code>[[]]</code>、<code>[ ]</code>、<code>(( ))</code></h2><h3 id=\"1-和test\"><a href=\"#1-和test\" class=\"headerlink\" title=\"1. []和test\"></a>1. <code>[]</code>和<code>test</code></h3><p>两者是一样的，在命令行里<code>test expr</code>和<code>[ expr ]</code>的效果相同。</p>\n<p><code>test</code>的三个基本作用是判断文件、判断字符串、判断整数。支持使用 ”与或非“ 将表达式连接起来。</p>\n<p><code>test</code>中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用<code>-eq</code>, <code>-gt</code>这种形式。</p>\n<p>无论是字符串比较还是整数比较都千万不要使用大于号小于号。当然，如果你实在想用也是可以的，对于字符串比较可以使用尖括号的转义形式， 如果比较”ab”和”bc”：<code>[ ab \\&lt; bc ]</code>，结果为真，也就是返回状态为0。</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2. [[ ]]\"></a>2. <code>[[ ]]</code></h3><p>这是内置在shell中的一个命令，它就比刚才说的<code>test</code>强大的多了。支持字符串的模式匹配（使用<code>=~</code>操作符时甚至支持shell的正则表达 式）。逻辑组合可以不使用<code>test</code>的-a,-o而使用<code>&amp;&amp; ||</code>。<br>字符串比较时可以把右边的作为一个模式，这是右边的字符串不加双引号的情况下。如果右边的字符串加了双引号，则认为是一个文本字符串。而不仅仅是一个字符串，比如<code>[[ hello == hell? ]]</code>，结果为真。</p>\n<p><strong>注意:</strong></p>\n<p>使用<code>[]</code>和<code>[[]]</code>的时候不要吝啬空格，每一项两边都要有空格，<code>[[ 1 == 2 ]]</code>的结果为“假”，但<code>[[ 1==2 ]]</code>的结果为“真”！</p>\n<h3 id=\"3-let和\"><a href=\"#3-let和\" class=\"headerlink\" title=\"3. let和(())\"></a>3. <code>let</code>和<code>(())</code></h3><p>两者也是一样的(或者说基本上是一样的，双括号比let稍弱一些)。主要进行算术运算(上面的两个都不行)，也比较适合进 行整数比较，可以直接使用熟悉的&lt;,&gt;等比较运算符。可以直接使用变量名如<code>var</code>而不需要<code>$var</code>这样的形式。支持分号隔开的多个表达式</p>\n<hr>\n<ol>\n<li><p>首先，尽管很相似，但是从概念上讲，二者是不同层次的东西。<br><code>[[</code>，是关键字，许多shell(如ash bsh)并不支持这种方式。ksh, bash(据说从2.02起引入对[[的支持)等支持。<br><code>[</code>是一条命令， 与<code>test</code>等价，大多数shell都支持。在现代的大多数sh实现中，<code>[</code>与<code>test</code>是内部(builtin)命令，换句话说执行<code>test /[</code>时不会调用/some/path/to/test这样的外部命令(如果有这样的命令的话)。</p>\n</li>\n<li><p><code>[[]]</code>结构比Bash版本的<code>[]</code>更通用。在<code>[[</code>和<code>]]</code>之间的所有的字符都不会被文件扩展或是标记分割，但是会有参数引用和命令替换。</p>\n</li>\n<li><p>用<code>[[ ... ]]</code>测试结构比用<code>[ ... ]</code>更能防止脚本里的许多逻辑错误。比如说，<code>&amp;&amp;</code>,<code>||</code>,<code>&lt;</code>和<code>&gt;</code>操作符能在一个<code>[[]]</code>测试里通过，但在<code>[]</code>结构会发生错误。</p>\n</li>\n<li><p><code>(( ))</code>结构扩展并计算一个算术表达式的值。如果表达式值为0，会返回1或假作为退出状态码。一个非零值的表达式返回一个0或真作为退出状态码。这个结构和先前<code>test</code>命令及<code>[]</code>结构的讨论刚好相反。</p>\n</li>\n<li><p><code>[ ... ]</code>为shell命令，所以在其中的表达式应是它的命令行参数，所以串比较操作符<code>&gt;</code> 与<code>&lt;</code>必须转义，否则就变成IO改向操作符了(请参看上面2中的例子)。在<code>[[</code>中<code>&lt;</code>与<code>&gt;</code>不需转义；<br>由于<code>[[</code>是关键字，不会做命令行扩展，因而相对的语法就稍严格些。例如<br>在<code>[ ... ]</code>中可以用引号括起操作符，因为在做命令行扩展时会去掉这些引号，而在<code>[[ ... ]]</code>则不允许这样做。</p>\n</li>\n<li><p><code>[[ ... ]]</code>进行算术扩展，而<code>[ ... ]</code>不做</p>\n</li>\n<li><p><code>[[ ... &amp;&amp; ... &amp;&amp; ...  ]]</code> 和 <code>[ ... -a ... -a ...]</code> 不一样，<code>[[ ]]</code> 是逻辑短路操作，而 <code>[ ]</code> 不会进行逻辑短路</p>\n</li>\n</ol>\n<hr>\n<p>1）在ksh中的test</p>\n<ul>\n<li>数字的运算可使用let、(( )) ，其中运算时不需要变量<code>$</code>符号，<br>运算符为 <code>+、-、*、/、%</code> ，不建议使用expr数字的比较使用 (( )) ，其运算符 <code>&gt;、&gt;=、&lt;、&lt;=、==、!=</code></li>\n<li>可以使用算术扩展，如：(( 99+1 &lt;= 101 ))</li>\n<li>字符表达式的比较使用 [[ ]] ，其运算符 <code>=、!=、-n、-z</code></li>\n<li>文件表达式的测试使用 [[ ]] ，其运算符 <code>-r、-l、-w、-x、-f、-d、-s、-nt、-ot</code></li>\n<li>逻辑表达式的测试使用 [[ ]] ，其运算符<code>!、&amp;&amp;、||</code></li>\n<li>数字比较、字符比较、逻辑测试可以组合，如<code>$ [[ &quot;a&quot; != &quot;b&quot; &amp;&amp; 4 -gt 3 ]]</code></li>\n<li>支持bash中的通配符扩展，如：<code>[[ hest = h??t ]] 、[ hest = h*t ]]</code></li>\n<li>使用 (( )) 时，不需要空格分隔各值和运算符，使用 [[ ]] 时需要用空格分隔各值和运算符。</li>\n</ul>\n<p>2）bash与ksh中的 <code>[[ ]]</code> 不同</p>\n<p>在redhat9的bash中也可以使用 <code>[[ ]]</code> 符号。但是建议严格按照上面的原则使用。<br>在bash中，数字的比较最好使用 <code>(( ))</code>，虽说可以使用 <code>[[ ]]</code>，但若在其内使用运算符<code>&gt;、&gt;=、&lt;、&lt;=、==、!=</code> 时，其结果经常是错误的，不过若在 <code>[[ ]]</code> 中使用 <code>[ ]</code> 中的运算符<code>-eq、-ne、-le、-lt、-gt、-ge</code>等，还尚未发现有错。因此诸如<code>$ [[ &quot; a&quot; != “b” &amp;&amp; 4 &gt; 3 ]]</code> 这类组合（见上）也不可以在bash中使用，其出错率很高。<br>例：<code>[[ &quot;a&quot; != &quot;b&quot; &amp;&amp; 10 &gt; 2 ]]</code> 判断结果就不正常。<br>诸如 <code>[ 2 \\&lt; 10 ]、[[ 2 &lt; 10 ]]</code> 都是不要使用。使用算术扩展最好用 <code>(( 99+1 == 100 ))</code> ，而不要使用<code>[[ 99+1 -eq 100 ]]</code> 。</p>\n<p><img src=\"/../resources/charicteristics.gif\" alt=\"示例表格\"></p>\n<h3 id=\"4-运算符\"><a href=\"#4-运算符\" class=\"headerlink\" title=\"4. 运算符\"></a>4. 运算符</h3><h4 id=\"4-1-文件比较运算符\"><a href=\"#4-1-文件比较运算符\" class=\"headerlink\" title=\"4.1 文件比较运算符\"></a>4.1 文件比较运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-e</td>\n<td>filename 如果 filename 存在，则为真</td>\n<td>[ -e /var/log/syslog ]</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>filename 如果 filename 为目录，则为真</td>\n<td>[ -d /tmp/mydir ]</td>\n</tr>\n<tr>\n<td>-f filename</td>\n<td>如果 filename 为常规文件，则为真</td>\n<td>[ -f /usr/bin/grep ]</td>\n</tr>\n<tr>\n<td>-L filename</td>\n<td>如果 filename 为符号链接，则为真</td>\n<td>[ -L /usr/bin/grep ]</td>\n</tr>\n<tr>\n<td>-r filename</td>\n<td>如果 filename 可读，则为真</td>\n<td>[ -r /var/log/syslog ]</td>\n</tr>\n<tr>\n<td>-w filename</td>\n<td>如果 filename 可写，则为真</td>\n<td>[ -w /var/mytmp.txt ]</td>\n</tr>\n<tr>\n<td>-x filename</td>\n<td>如果 filename 可执行，则为真</td>\n<td>[ -L /usr/bin/grep ]</td>\n</tr>\n<tr>\n<td>filename1 -nt filename2</td>\n<td>如果 filename1 比 filename2 新，则为真</td>\n<td>[ /tmp/install/etc/services -nt /etc/services ]</td>\n</tr>\n<tr>\n<td>filename1 -ot filename2</td>\n<td>如果 filename1 比 filename2 旧，则为真</td>\n<td>[ /boot/bzImage -ot arch/i386/boot/bzImage ]</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-2-字符串比较运算符-（请注意引号的使用，这是防止空格扰乱代码的好方法）\"><a href=\"#4-2-字符串比较运算符-（请注意引号的使用，这是防止空格扰乱代码的好方法）\" class=\"headerlink\" title=\"4.2 字符串比较运算符 （请注意引号的使用，这是防止空格扰乱代码的好方法）\"></a>4.2 字符串比较运算符 （请注意引号的使用，这是防止空格扰乱代码的好方法）</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-z string</td>\n<td>如果 string 长度为零，则为真</td>\n<td>[ -z “$myvar” ]</td>\n</tr>\n<tr>\n<td>-n string</td>\n<td>如果 string 长度非零，则为真</td>\n<td>[ -n “$myvar” ]</td>\n</tr>\n<tr>\n<td>string1 = string2</td>\n<td>如果 string1 与 string2 相同，则为真</td>\n<td>[ “$myvar” = “one two three” ]</td>\n</tr>\n<tr>\n<td>string1 != string2</td>\n<td>如果 string1 与 string2 不同，则为真</td>\n<td>[ “$myvar” != “one two three” ]</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-3-算术比较运算符\"><a href=\"#4-3-算术比较运算符\" class=\"headerlink\" title=\"4.3 算术比较运算符\"></a>4.3 算术比较运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>num1 -eq num2</td>\n<td>等于</td>\n<td>[ 3 -eq $mynum ]</td>\n</tr>\n<tr>\n<td>num1 -ne num2</td>\n<td>不等于</td>\n<td>[ 3 -ne $mynum ]</td>\n</tr>\n<tr>\n<td>num1 -lt num2</td>\n<td>小于</td>\n<td>[ 3 -lt $mynum ]</td>\n</tr>\n<tr>\n<td>num1 -le num2</td>\n<td>小于或等于</td>\n<td>[ 3 -le $mynum ]</td>\n</tr>\n<tr>\n<td>num1 -gt num2</td>\n<td>大于</td>\n<td>[ 3 -gt $mynum ]</td>\n</tr>\n<tr>\n<td>num1 -ge num2</td>\n<td>大于或等于</td>\n<td>[ 3 -ge $mynum ]</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-测试命令\"><a href=\"#5-测试命令\" class=\"headerlink\" title=\"5. 测试命令\"></a>5. 测试命令</h3><p>test命令用于检查某个条件是否成立，它可以进行数值、字符和文件3个方面的测试，其测试符和相应的功能分别如下。</p>\n<h4 id=\"5-1-数值测试\"><a href=\"#5-1-数值测试\" class=\"headerlink\" title=\"5.1 数值测试\"></a>5.1 数值测试</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-eq 等于则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-ne 不等于则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-gt 大于则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-ge 大于等于则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-lt 小于则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-le 小于等于则为真。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-字串测试\"><a href=\"#5-2-字串测试\" class=\"headerlink\" title=\"5.2 字串测试\"></a>5.2 字串测试</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">= 等于则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">!= 不相等则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-z字串 字串长度伪则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-n字串 字串长度不伪则为真。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-3-文件测试\"><a href=\"#5-3-文件测试\" class=\"headerlink\" title=\"5.3 文件测试\"></a>5.3 文件测试</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-e文件名 如果文件存在则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-r文件名 如果文件存在且可读则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-w文件名 如果文件存在且可写则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-x文件名 如果文件存在且可执行则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-s文件名 如果文件存在且至少有一个字符则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-d文件名 如果文件存在且为目录则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-f文件名 如果文件存在且为普通文件则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-c文件名 如果文件存在且为字符型特殊文件则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-b文件名 如果文件存在且为块特殊文件则为真</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-条件变量替换\"><a href=\"#6-条件变量替换\" class=\"headerlink\" title=\"6. 条件变量替换\"></a>6. 条件变量替换</h3><p>Bash Shell可以进行变量的条件替换,既只有某种条件发生时才进行替换,替换条件放在{}中.</p>\n<p>(1) 当变量未定义或者值为空时,返回值为word的内容,否则返回变量的值.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value:-word&#125;</span> </span><br></pre></td></tr></table></figure>\n\n<p>(2) 与前者类似,只是若变量未定义或者值为空时,在返回word的值的同时将word赋值给value</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value:=word&#125;</span> </span><br></pre></td></tr></table></figure>\n\n<p>(3) 若变量以赋值的话,正常替换.否则将消息message送到标准错误输出(若此替换出现在Shell程序中,那么该程序将终止运行)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value:?message&#125;</span>  </span><br></pre></td></tr></table></figure>\n\n<p>(4) 若变量以赋值的话,其值才用word替换,否则不进行任何替换</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value:+word&#125;</span> </span><br></pre></td></tr></table></figure>\n\n<p>(5) 从变量中提取子串,这里offset和length可以是算术表达式.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value:offset&#125;</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value:offset:length&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>(6) 变量的字符个数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;<span class=\"comment\">#value&#125;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>(7) 去掉value中与pattern相匹配的部分,条件是value的开头与pattern相匹配</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value<span class=\"comment\">#pattern&#125;</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value<span class=\"comment\">##pattern&#125;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><em>#与##的区别在于一个是最短匹配模式,一个是最长匹配模式.</em></li>\n</ul>\n<p>(8) 于(7)类似,只是是从value的尾部于pattern相匹配,%与%%的区别与#与##一样</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value%pattern&#125;</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value%%pattern&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>(9) 进行变量内容的替换,把与pattern匹配的部分替换为string的内容,/与//的区别与上同</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value/pattern/string&#125;</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value//pattern/string&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意: 上述条件变量替换中,除(2)外,其余均不影响变量本身的值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var1=&quot;1&quot;</span><br><span class=\"line\">var2=&quot;2&quot;</span><br></pre></td></tr></table></figure>\n\n<p>下面是并且的运算符-a，另外注意，用一个test命令就可以了，还有if条件后面的分号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if test $var1 = &quot;1&quot;-a $var2 = &quot;2&quot; ; then</span><br><span class=\"line\">echo &quot;equal&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>下面是或运算符 -o，有一个为真就可以</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if test $var1 != &quot;1&quot; -o $var2 != &quot;3&quot; ; then</span><br><span class=\"line\">echo &quot;not equal&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>下面是非运算符 ！<br>if条件是为真的时候执行，如果使用！运算符，那么原表达式必须为false</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ! test $var1 != &quot;1&quot;; then</span><br><span class=\"line\">echo &quot;not 1&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>以上三个if都为真，所以三个echo都会打印</p>\n<p>在一个文档把这几个运算法说的一塌糊涂，于是自己动手实验了一下</p>\n<p><em><strong>shell字符串比较、判断是否为数字</strong></em></p>\n<p>二元比较操作符,比较变量或者比较数字.注意数字与字符串的区别.</p>\n<p>整数比较</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-eq       等于,如:if [ &quot;$a&quot; -eq &quot;$b&quot; ]</span><br><span class=\"line\">-ne       不等于,如:if [ &quot;$a&quot; -ne &quot;$b&quot; ]</span><br><span class=\"line\">-gt       大于,如:if [ &quot;$a&quot; -gt &quot;$b&quot; ]</span><br><span class=\"line\">-ge       大于等于,如:if [ &quot;$a&quot; -ge &quot;$b&quot; ]</span><br><span class=\"line\">-lt       小于,如:if [ &quot;$a&quot; -lt &quot;$b&quot; ]</span><br><span class=\"line\">-le       小于等于,如:if [ &quot;$a&quot; -le &quot;$b&quot; ]</span><br><span class=\"line\">&lt;         小于(需要双括号),如:((&quot;$a&quot; &lt; &quot;$b&quot;))</span><br><span class=\"line\">&lt;=        小于等于(需要双括号),如:((&quot;$a&quot; &lt;= &quot;$b&quot;))</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">         大于(需要双括号),如:((<span class=\"string\">&quot;<span class=\"variable\">$a</span>&quot;</span> &gt; <span class=\"string\">&quot;<span class=\"variable\">$b</span>&quot;</span>))</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">=        大于等于(需要双括号),如:((<span class=\"string\">&quot;<span class=\"variable\">$a</span>&quot;</span> &gt;= <span class=\"string\">&quot;<span class=\"variable\">$b</span>&quot;</span>))</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串比较\\</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=       等于,如:if [ &quot;$a&quot; = &quot;$b&quot; ]</span><br><span class=\"line\"></span><br><span class=\"line\">==      等于,如:if [ &quot;$a&quot; == &quot;$b&quot; ],与=等价</span><br><span class=\"line\">        注意:==的功能在[[]]和[]中的行为是不同的,如下:</span><br><span class=\"line\">        1 [[ $a == z* ]]    # 如果$a以&quot;z&quot;开头(模式匹配)那么将为true</span><br><span class=\"line\">        2 [[ $a == &quot;z*&quot; ]] # 如果$a等于z*(字符匹配),那么结果为true</span><br><span class=\"line\">        3</span><br><span class=\"line\">        4 [ $a == z* ]      # File globbing 和word splitting将会发生</span><br><span class=\"line\">        5 [ &quot;$a&quot; == &quot;z*&quot; ] # 如果$a等于z*(字符匹配),那么结果为true</span><br><span class=\"line\">        一点解释,关于File globbing是一种关于文件的速记法,比如&quot;*.c&quot;就是,再如~也是.</span><br><span class=\"line\">        但是file globbing并不是严格的正则表达式,虽然绝大多数情况下结构比较像.</span><br><span class=\"line\"></span><br><span class=\"line\">!=      不等于,如:if [ &quot;$a&quot; != &quot;$b&quot; ]</span><br><span class=\"line\">        这个操作符将在[[]]结构中使用模式匹配.</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;       小于,在ASCII字母顺序下.如:</span><br><span class=\"line\">        if [[ &quot;$a&quot; &lt; &quot;$b&quot; ]]</span><br><span class=\"line\">        if [ &quot;$a&quot; \\&lt; &quot;$b&quot; ]</span><br><span class=\"line\">        注意:在[]结构中&quot;&lt;&quot;需要被转义.</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">       大于,在ASCII字母顺序下.如:</span></span><br><span class=\"line\">        if [[ &quot;$a&quot; &gt; &quot;$b&quot; ]]</span><br><span class=\"line\">        if [ &quot;$a&quot; \\&gt; &quot;$b&quot; ]</span><br><span class=\"line\">        注意:在[]结构中&quot;&gt;&quot;需要被转义.</span><br><span class=\"line\">        具体参考Example 26-11来查看这个操作符应用的例子.</span><br><span class=\"line\"></span><br><span class=\"line\">-z      字符串为&quot;null&quot;.就是长度为0.</span><br><span class=\"line\"></span><br><span class=\"line\">-n      字符串不为&quot;null&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong></p>\n<p>使用-n在<code>[]</code>结构中测试必须要用<code>&quot;&quot;</code>把变量引起来.使用一个未被<code>&quot;&quot;</code>的字符串来使用! -z<br>或者就是未用<code>&quot;&quot;</code>引用的字符串本身,放到<code>[]</code>结构中。虽然一般情况下可<br>以工作,但这是不安全的.习惯于使用<code>&quot;&quot;</code>来测试字符串是一种好习惯.</p>\n<p>文章出处：<a href=\"http://www.cnblogs.com/aaron-agu/\">http://www.cnblogs.com/aaron-agu/</a> 只有毅力和决心才能使人真正具有价值！</p>\n<h3 id=\"7-的含义及用法\"><a href=\"#7-的含义及用法\" class=\"headerlink\" title=\"7. #*,##*,##*,%*,%%*的含义及用法\"></a>7. <code>#*</code>,<code>##*</code>,<code>##*</code>,<code>%*</code>,<code>%%*</code>的含义及用法</h3><p>介绍下Shell中的<code>$&#123;&#125;</code>、<code>##</code>和<code>%%</code>使用范例，本文给出了不同情况下得到的结果。<br>假设定义了一个变量为：<br>代码如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file=/dir1/dir2/dir3/my.file.txt</span><br></pre></td></tr></table></figure>\n\n<p>可以用<code>$&#123; &#125;</code>分别替换得到不同的值：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file<span class=\"comment\">#*/&#125;：删掉第一个 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file<span class=\"comment\">##*/&#125;：删掉最后一个 /  及其左边的字符串：my.file.txt</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file<span class=\"comment\">#*.&#125;：删掉第一个 .  及其左边的字符串：file.txt</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file<span class=\"comment\">##*.&#125;：删掉最后一个 .  及其左边的字符串：txt</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file%/*&#125;：删掉最后一个  /  及其右边的字符串：/dir1/dir2/dir3</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file%%/*&#125;：删掉第一个 /  及其右边的字符串：(空值)</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file%.*&#125;：删掉最后一个  .  及其右边的字符串：/dir1/dir2/dir3/my.file</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file%%.*&#125;：删掉第一个  .   及其右边的字符串：/dir1/dir2/dir3/my</span></span><br></pre></td></tr></table></figure>\n\n<p>记忆的方法为：</p>\n<p><strong>是去掉左边（键盘上<code>#</code>在 <code>$</code> 的左边）</strong></p>\n<p><code>%</code>是去掉右边（键盘上<code>%</code> 在<code>$</code> 的右边）<br>单一符号是最小匹配；两个符号是最大匹配</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;file:0:5&#125;：提取最左边的 5 个字节：/dir1</span><br><span class=\"line\">&#123;file:5:5&#125;：提取第 5 个字节右边的连续5个字节：/dir2</span><br></pre></td></tr></table></figure>\n\n<p>也可以对变量值里的字符串作替换：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;file/dir/path&#125;：将第一个dir 替换为path：/path1/dir2/dir3/my.file.txt</span><br><span class=\"line\">&#123;file//dir/path&#125;：将全部dir 替换为 path：/path1/path2/path3/my.file.txt</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-、-、\"><a href=\"#一、-、-、\" class=\"headerlink\" title=\"一、[[]]、[ ]、(( ))\"></a>一、<code>[[]]</code>、<code>[ ]</code>、<code>(( ))</code></h2><h3 id=\"1-和test\"><a href=\"#1-和test\" class=\"headerlink\" title=\"1. []和test\"></a>1. <code>[]</code>和<code>test</code></h3><p>两者是一样的，在命令行里<code>test expr</code>和<code>[ expr ]</code>的效果相同。</p>\n<p><code>test</code>的三个基本作用是判断文件、判断字符串、判断整数。支持使用 ”与或非“ 将表达式连接起来。</p>\n<p><code>test</code>中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用<code>-eq</code>, <code>-gt</code>这种形式。</p>\n<p>无论是字符串比较还是整数比较都千万不要使用大于号小于号。当然，如果你实在想用也是可以的，对于字符串比较可以使用尖括号的转义形式， 如果比较”ab”和”bc”：<code>[ ab \\&lt; bc ]</code>，结果为真，也就是返回状态为0。</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2. [[ ]]\"></a>2. <code>[[ ]]</code></h3><p>这是内置在shell中的一个命令，它就比刚才说的<code>test</code>强大的多了。支持字符串的模式匹配（使用<code>=~</code>操作符时甚至支持shell的正则表达 式）。逻辑组合可以不使用<code>test</code>的-a,-o而使用<code>&amp;&amp; ||</code>。<br>字符串比较时可以把右边的作为一个模式，这是右边的字符串不加双引号的情况下。如果右边的字符串加了双引号，则认为是一个文本字符串。而不仅仅是一个字符串，比如<code>[[ hello == hell? ]]</code>，结果为真。</p>\n<p><strong>注意:</strong></p>\n<p>使用<code>[]</code>和<code>[[]]</code>的时候不要吝啬空格，每一项两边都要有空格，<code>[[ 1 == 2 ]]</code>的结果为“假”，但<code>[[ 1==2 ]]</code>的结果为“真”！</p>\n<h3 id=\"3-let和\"><a href=\"#3-let和\" class=\"headerlink\" title=\"3. let和(())\"></a>3. <code>let</code>和<code>(())</code></h3><p>两者也是一样的(或者说基本上是一样的，双括号比let稍弱一些)。主要进行算术运算(上面的两个都不行)，也比较适合进 行整数比较，可以直接使用熟悉的&lt;,&gt;等比较运算符。可以直接使用变量名如<code>var</code>而不需要<code>$var</code>这样的形式。支持分号隔开的多个表达式</p>\n<hr>\n<ol>\n<li><p>首先，尽管很相似，但是从概念上讲，二者是不同层次的东西。<br><code>[[</code>，是关键字，许多shell(如ash bsh)并不支持这种方式。ksh, bash(据说从2.02起引入对[[的支持)等支持。<br><code>[</code>是一条命令， 与<code>test</code>等价，大多数shell都支持。在现代的大多数sh实现中，<code>[</code>与<code>test</code>是内部(builtin)命令，换句话说执行<code>test /[</code>时不会调用/some/path/to/test这样的外部命令(如果有这样的命令的话)。</p>\n</li>\n<li><p><code>[[]]</code>结构比Bash版本的<code>[]</code>更通用。在<code>[[</code>和<code>]]</code>之间的所有的字符都不会被文件扩展或是标记分割，但是会有参数引用和命令替换。</p>\n</li>\n<li><p>用<code>[[ ... ]]</code>测试结构比用<code>[ ... ]</code>更能防止脚本里的许多逻辑错误。比如说，<code>&amp;&amp;</code>,<code>||</code>,<code>&lt;</code>和<code>&gt;</code>操作符能在一个<code>[[]]</code>测试里通过，但在<code>[]</code>结构会发生错误。</p>\n</li>\n<li><p><code>(( ))</code>结构扩展并计算一个算术表达式的值。如果表达式值为0，会返回1或假作为退出状态码。一个非零值的表达式返回一个0或真作为退出状态码。这个结构和先前<code>test</code>命令及<code>[]</code>结构的讨论刚好相反。</p>\n</li>\n<li><p><code>[ ... ]</code>为shell命令，所以在其中的表达式应是它的命令行参数，所以串比较操作符<code>&gt;</code> 与<code>&lt;</code>必须转义，否则就变成IO改向操作符了(请参看上面2中的例子)。在<code>[[</code>中<code>&lt;</code>与<code>&gt;</code>不需转义；<br>由于<code>[[</code>是关键字，不会做命令行扩展，因而相对的语法就稍严格些。例如<br>在<code>[ ... ]</code>中可以用引号括起操作符，因为在做命令行扩展时会去掉这些引号，而在<code>[[ ... ]]</code>则不允许这样做。</p>\n</li>\n<li><p><code>[[ ... ]]</code>进行算术扩展，而<code>[ ... ]</code>不做</p>\n</li>\n<li><p><code>[[ ... &amp;&amp; ... &amp;&amp; ...  ]]</code> 和 <code>[ ... -a ... -a ...]</code> 不一样，<code>[[ ]]</code> 是逻辑短路操作，而 <code>[ ]</code> 不会进行逻辑短路</p>\n</li>\n</ol>\n<hr>\n<p>1）在ksh中的test</p>\n<ul>\n<li>数字的运算可使用let、(( )) ，其中运算时不需要变量<code>$</code>符号，<br>运算符为 <code>+、-、*、/、%</code> ，不建议使用expr数字的比较使用 (( )) ，其运算符 <code>&gt;、&gt;=、&lt;、&lt;=、==、!=</code></li>\n<li>可以使用算术扩展，如：(( 99+1 &lt;= 101 ))</li>\n<li>字符表达式的比较使用 [[ ]] ，其运算符 <code>=、!=、-n、-z</code></li>\n<li>文件表达式的测试使用 [[ ]] ，其运算符 <code>-r、-l、-w、-x、-f、-d、-s、-nt、-ot</code></li>\n<li>逻辑表达式的测试使用 [[ ]] ，其运算符<code>!、&amp;&amp;、||</code></li>\n<li>数字比较、字符比较、逻辑测试可以组合，如<code>$ [[ &quot;a&quot; != &quot;b&quot; &amp;&amp; 4 -gt 3 ]]</code></li>\n<li>支持bash中的通配符扩展，如：<code>[[ hest = h??t ]] 、[ hest = h*t ]]</code></li>\n<li>使用 (( )) 时，不需要空格分隔各值和运算符，使用 [[ ]] 时需要用空格分隔各值和运算符。</li>\n</ul>\n<p>2）bash与ksh中的 <code>[[ ]]</code> 不同</p>\n<p>在redhat9的bash中也可以使用 <code>[[ ]]</code> 符号。但是建议严格按照上面的原则使用。<br>在bash中，数字的比较最好使用 <code>(( ))</code>，虽说可以使用 <code>[[ ]]</code>，但若在其内使用运算符<code>&gt;、&gt;=、&lt;、&lt;=、==、!=</code> 时，其结果经常是错误的，不过若在 <code>[[ ]]</code> 中使用 <code>[ ]</code> 中的运算符<code>-eq、-ne、-le、-lt、-gt、-ge</code>等，还尚未发现有错。因此诸如<code>$ [[ &quot; a&quot; != “b” &amp;&amp; 4 &gt; 3 ]]</code> 这类组合（见上）也不可以在bash中使用，其出错率很高。<br>例：<code>[[ &quot;a&quot; != &quot;b&quot; &amp;&amp; 10 &gt; 2 ]]</code> 判断结果就不正常。<br>诸如 <code>[ 2 \\&lt; 10 ]、[[ 2 &lt; 10 ]]</code> 都是不要使用。使用算术扩展最好用 <code>(( 99+1 == 100 ))</code> ，而不要使用<code>[[ 99+1 -eq 100 ]]</code> 。</p>\n<p><img src=\"/../resources/charicteristics.gif\" alt=\"示例表格\"></p>\n<h3 id=\"4-运算符\"><a href=\"#4-运算符\" class=\"headerlink\" title=\"4. 运算符\"></a>4. 运算符</h3><h4 id=\"4-1-文件比较运算符\"><a href=\"#4-1-文件比较运算符\" class=\"headerlink\" title=\"4.1 文件比较运算符\"></a>4.1 文件比较运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-e</td>\n<td>filename 如果 filename 存在，则为真</td>\n<td>[ -e /var/log/syslog ]</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>filename 如果 filename 为目录，则为真</td>\n<td>[ -d /tmp/mydir ]</td>\n</tr>\n<tr>\n<td>-f filename</td>\n<td>如果 filename 为常规文件，则为真</td>\n<td>[ -f /usr/bin/grep ]</td>\n</tr>\n<tr>\n<td>-L filename</td>\n<td>如果 filename 为符号链接，则为真</td>\n<td>[ -L /usr/bin/grep ]</td>\n</tr>\n<tr>\n<td>-r filename</td>\n<td>如果 filename 可读，则为真</td>\n<td>[ -r /var/log/syslog ]</td>\n</tr>\n<tr>\n<td>-w filename</td>\n<td>如果 filename 可写，则为真</td>\n<td>[ -w /var/mytmp.txt ]</td>\n</tr>\n<tr>\n<td>-x filename</td>\n<td>如果 filename 可执行，则为真</td>\n<td>[ -L /usr/bin/grep ]</td>\n</tr>\n<tr>\n<td>filename1 -nt filename2</td>\n<td>如果 filename1 比 filename2 新，则为真</td>\n<td>[ /tmp/install/etc/services -nt /etc/services ]</td>\n</tr>\n<tr>\n<td>filename1 -ot filename2</td>\n<td>如果 filename1 比 filename2 旧，则为真</td>\n<td>[ /boot/bzImage -ot arch/i386/boot/bzImage ]</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-2-字符串比较运算符-（请注意引号的使用，这是防止空格扰乱代码的好方法）\"><a href=\"#4-2-字符串比较运算符-（请注意引号的使用，这是防止空格扰乱代码的好方法）\" class=\"headerlink\" title=\"4.2 字符串比较运算符 （请注意引号的使用，这是防止空格扰乱代码的好方法）\"></a>4.2 字符串比较运算符 （请注意引号的使用，这是防止空格扰乱代码的好方法）</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-z string</td>\n<td>如果 string 长度为零，则为真</td>\n<td>[ -z “$myvar” ]</td>\n</tr>\n<tr>\n<td>-n string</td>\n<td>如果 string 长度非零，则为真</td>\n<td>[ -n “$myvar” ]</td>\n</tr>\n<tr>\n<td>string1 = string2</td>\n<td>如果 string1 与 string2 相同，则为真</td>\n<td>[ “$myvar” = “one two three” ]</td>\n</tr>\n<tr>\n<td>string1 != string2</td>\n<td>如果 string1 与 string2 不同，则为真</td>\n<td>[ “$myvar” != “one two three” ]</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-3-算术比较运算符\"><a href=\"#4-3-算术比较运算符\" class=\"headerlink\" title=\"4.3 算术比较运算符\"></a>4.3 算术比较运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>num1 -eq num2</td>\n<td>等于</td>\n<td>[ 3 -eq $mynum ]</td>\n</tr>\n<tr>\n<td>num1 -ne num2</td>\n<td>不等于</td>\n<td>[ 3 -ne $mynum ]</td>\n</tr>\n<tr>\n<td>num1 -lt num2</td>\n<td>小于</td>\n<td>[ 3 -lt $mynum ]</td>\n</tr>\n<tr>\n<td>num1 -le num2</td>\n<td>小于或等于</td>\n<td>[ 3 -le $mynum ]</td>\n</tr>\n<tr>\n<td>num1 -gt num2</td>\n<td>大于</td>\n<td>[ 3 -gt $mynum ]</td>\n</tr>\n<tr>\n<td>num1 -ge num2</td>\n<td>大于或等于</td>\n<td>[ 3 -ge $mynum ]</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-测试命令\"><a href=\"#5-测试命令\" class=\"headerlink\" title=\"5. 测试命令\"></a>5. 测试命令</h3><p>test命令用于检查某个条件是否成立，它可以进行数值、字符和文件3个方面的测试，其测试符和相应的功能分别如下。</p>\n<h4 id=\"5-1-数值测试\"><a href=\"#5-1-数值测试\" class=\"headerlink\" title=\"5.1 数值测试\"></a>5.1 数值测试</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-eq 等于则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-ne 不等于则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-gt 大于则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-ge 大于等于则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-lt 小于则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-le 小于等于则为真。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-2-字串测试\"><a href=\"#5-2-字串测试\" class=\"headerlink\" title=\"5.2 字串测试\"></a>5.2 字串测试</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">= 等于则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">!= 不相等则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-z字串 字串长度伪则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-n字串 字串长度不伪则为真。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-3-文件测试\"><a href=\"#5-3-文件测试\" class=\"headerlink\" title=\"5.3 文件测试\"></a>5.3 文件测试</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-e文件名 如果文件存在则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-r文件名 如果文件存在且可读则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-w文件名 如果文件存在且可写则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-x文件名 如果文件存在且可执行则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-s文件名 如果文件存在且至少有一个字符则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-d文件名 如果文件存在且为目录则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-f文件名 如果文件存在且为普通文件则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-c文件名 如果文件存在且为字符型特殊文件则为真。</span><br><span class=\"line\"></span><br><span class=\"line\">-b文件名 如果文件存在且为块特殊文件则为真</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-条件变量替换\"><a href=\"#6-条件变量替换\" class=\"headerlink\" title=\"6. 条件变量替换\"></a>6. 条件变量替换</h3><p>Bash Shell可以进行变量的条件替换,既只有某种条件发生时才进行替换,替换条件放在{}中.</p>\n<p>(1) 当变量未定义或者值为空时,返回值为word的内容,否则返回变量的值.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value:-word&#125;</span> </span><br></pre></td></tr></table></figure>\n\n<p>(2) 与前者类似,只是若变量未定义或者值为空时,在返回word的值的同时将word赋值给value</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value:=word&#125;</span> </span><br></pre></td></tr></table></figure>\n\n<p>(3) 若变量以赋值的话,正常替换.否则将消息message送到标准错误输出(若此替换出现在Shell程序中,那么该程序将终止运行)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value:?message&#125;</span>  </span><br></pre></td></tr></table></figure>\n\n<p>(4) 若变量以赋值的话,其值才用word替换,否则不进行任何替换</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value:+word&#125;</span> </span><br></pre></td></tr></table></figure>\n\n<p>(5) 从变量中提取子串,这里offset和length可以是算术表达式.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value:offset&#125;</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value:offset:length&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>(6) 变量的字符个数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;<span class=\"comment\">#value&#125;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>(7) 去掉value中与pattern相匹配的部分,条件是value的开头与pattern相匹配</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value<span class=\"comment\">#pattern&#125;</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value<span class=\"comment\">##pattern&#125;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><em>#与##的区别在于一个是最短匹配模式,一个是最长匹配模式.</em></li>\n</ul>\n<p>(8) 于(7)类似,只是是从value的尾部于pattern相匹配,%与%%的区别与#与##一样</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value%pattern&#125;</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value%%pattern&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>(9) 进行变量内容的替换,把与pattern匹配的部分替换为string的内容,/与//的区别与上同</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value/pattern/string&#125;</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;value//pattern/string&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意: 上述条件变量替换中,除(2)外,其余均不影响变量本身的值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var1=&quot;1&quot;</span><br><span class=\"line\">var2=&quot;2&quot;</span><br></pre></td></tr></table></figure>\n\n<p>下面是并且的运算符-a，另外注意，用一个test命令就可以了，还有if条件后面的分号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if test $var1 = &quot;1&quot;-a $var2 = &quot;2&quot; ; then</span><br><span class=\"line\">echo &quot;equal&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>下面是或运算符 -o，有一个为真就可以</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if test $var1 != &quot;1&quot; -o $var2 != &quot;3&quot; ; then</span><br><span class=\"line\">echo &quot;not equal&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>下面是非运算符 ！<br>if条件是为真的时候执行，如果使用！运算符，那么原表达式必须为false</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ! test $var1 != &quot;1&quot;; then</span><br><span class=\"line\">echo &quot;not 1&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<p>以上三个if都为真，所以三个echo都会打印</p>\n<p>在一个文档把这几个运算法说的一塌糊涂，于是自己动手实验了一下</p>\n<p><em><strong>shell字符串比较、判断是否为数字</strong></em></p>\n<p>二元比较操作符,比较变量或者比较数字.注意数字与字符串的区别.</p>\n<p>整数比较</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-eq       等于,如:if [ &quot;$a&quot; -eq &quot;$b&quot; ]</span><br><span class=\"line\">-ne       不等于,如:if [ &quot;$a&quot; -ne &quot;$b&quot; ]</span><br><span class=\"line\">-gt       大于,如:if [ &quot;$a&quot; -gt &quot;$b&quot; ]</span><br><span class=\"line\">-ge       大于等于,如:if [ &quot;$a&quot; -ge &quot;$b&quot; ]</span><br><span class=\"line\">-lt       小于,如:if [ &quot;$a&quot; -lt &quot;$b&quot; ]</span><br><span class=\"line\">-le       小于等于,如:if [ &quot;$a&quot; -le &quot;$b&quot; ]</span><br><span class=\"line\">&lt;         小于(需要双括号),如:((&quot;$a&quot; &lt; &quot;$b&quot;))</span><br><span class=\"line\">&lt;=        小于等于(需要双括号),如:((&quot;$a&quot; &lt;= &quot;$b&quot;))</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">         大于(需要双括号),如:((<span class=\"string\">&quot;<span class=\"variable\">$a</span>&quot;</span> &gt; <span class=\"string\">&quot;<span class=\"variable\">$b</span>&quot;</span>))</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">=        大于等于(需要双括号),如:((<span class=\"string\">&quot;<span class=\"variable\">$a</span>&quot;</span> &gt;= <span class=\"string\">&quot;<span class=\"variable\">$b</span>&quot;</span>))</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串比较\\</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=       等于,如:if [ &quot;$a&quot; = &quot;$b&quot; ]</span><br><span class=\"line\"></span><br><span class=\"line\">==      等于,如:if [ &quot;$a&quot; == &quot;$b&quot; ],与=等价</span><br><span class=\"line\">        注意:==的功能在[[]]和[]中的行为是不同的,如下:</span><br><span class=\"line\">        1 [[ $a == z* ]]    # 如果$a以&quot;z&quot;开头(模式匹配)那么将为true</span><br><span class=\"line\">        2 [[ $a == &quot;z*&quot; ]] # 如果$a等于z*(字符匹配),那么结果为true</span><br><span class=\"line\">        3</span><br><span class=\"line\">        4 [ $a == z* ]      # File globbing 和word splitting将会发生</span><br><span class=\"line\">        5 [ &quot;$a&quot; == &quot;z*&quot; ] # 如果$a等于z*(字符匹配),那么结果为true</span><br><span class=\"line\">        一点解释,关于File globbing是一种关于文件的速记法,比如&quot;*.c&quot;就是,再如~也是.</span><br><span class=\"line\">        但是file globbing并不是严格的正则表达式,虽然绝大多数情况下结构比较像.</span><br><span class=\"line\"></span><br><span class=\"line\">!=      不等于,如:if [ &quot;$a&quot; != &quot;$b&quot; ]</span><br><span class=\"line\">        这个操作符将在[[]]结构中使用模式匹配.</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;       小于,在ASCII字母顺序下.如:</span><br><span class=\"line\">        if [[ &quot;$a&quot; &lt; &quot;$b&quot; ]]</span><br><span class=\"line\">        if [ &quot;$a&quot; \\&lt; &quot;$b&quot; ]</span><br><span class=\"line\">        注意:在[]结构中&quot;&lt;&quot;需要被转义.</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">       大于,在ASCII字母顺序下.如:</span></span><br><span class=\"line\">        if [[ &quot;$a&quot; &gt; &quot;$b&quot; ]]</span><br><span class=\"line\">        if [ &quot;$a&quot; \\&gt; &quot;$b&quot; ]</span><br><span class=\"line\">        注意:在[]结构中&quot;&gt;&quot;需要被转义.</span><br><span class=\"line\">        具体参考Example 26-11来查看这个操作符应用的例子.</span><br><span class=\"line\"></span><br><span class=\"line\">-z      字符串为&quot;null&quot;.就是长度为0.</span><br><span class=\"line\"></span><br><span class=\"line\">-n      字符串不为&quot;null&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong></p>\n<p>使用-n在<code>[]</code>结构中测试必须要用<code>&quot;&quot;</code>把变量引起来.使用一个未被<code>&quot;&quot;</code>的字符串来使用! -z<br>或者就是未用<code>&quot;&quot;</code>引用的字符串本身,放到<code>[]</code>结构中。虽然一般情况下可<br>以工作,但这是不安全的.习惯于使用<code>&quot;&quot;</code>来测试字符串是一种好习惯.</p>\n<p>文章出处：<a href=\"http://www.cnblogs.com/aaron-agu/\">http://www.cnblogs.com/aaron-agu/</a> 只有毅力和决心才能使人真正具有价值！</p>\n<h3 id=\"7-的含义及用法\"><a href=\"#7-的含义及用法\" class=\"headerlink\" title=\"7. #*,##*,##*,%*,%%*的含义及用法\"></a>7. <code>#*</code>,<code>##*</code>,<code>##*</code>,<code>%*</code>,<code>%%*</code>的含义及用法</h3><p>介绍下Shell中的<code>$&#123;&#125;</code>、<code>##</code>和<code>%%</code>使用范例，本文给出了不同情况下得到的结果。<br>假设定义了一个变量为：<br>代码如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file=/dir1/dir2/dir3/my.file.txt</span><br></pre></td></tr></table></figure>\n\n<p>可以用<code>$&#123; &#125;</code>分别替换得到不同的值：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file<span class=\"comment\">#*/&#125;：删掉第一个 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file<span class=\"comment\">##*/&#125;：删掉最后一个 /  及其左边的字符串：my.file.txt</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file<span class=\"comment\">#*.&#125;：删掉第一个 .  及其左边的字符串：file.txt</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file<span class=\"comment\">##*.&#125;：删掉最后一个 .  及其左边的字符串：txt</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file%/*&#125;：删掉最后一个  /  及其右边的字符串：/dir1/dir2/dir3</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file%%/*&#125;：删掉第一个 /  及其右边的字符串：(空值)</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file%.*&#125;：删掉最后一个  .  及其右边的字符串：/dir1/dir2/dir3/my.file</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">&#123;file%%.*&#125;：删掉第一个  .   及其右边的字符串：/dir1/dir2/dir3/my</span></span><br></pre></td></tr></table></figure>\n\n<p>记忆的方法为：</p>\n<p><strong>是去掉左边（键盘上<code>#</code>在 <code>$</code> 的左边）</strong></p>\n<p><code>%</code>是去掉右边（键盘上<code>%</code> 在<code>$</code> 的右边）<br>单一符号是最小匹配；两个符号是最大匹配</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;file:0:5&#125;：提取最左边的 5 个字节：/dir1</span><br><span class=\"line\">&#123;file:5:5&#125;：提取第 5 个字节右边的连续5个字节：/dir2</span><br></pre></td></tr></table></figure>\n\n<p>也可以对变量值里的字符串作替换：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;file/dir/path&#125;：将第一个dir 替换为path：/path1/dir2/dir3/my.file.txt</span><br><span class=\"line\">&#123;file//dir/path&#125;：将全部dir 替换为 path：/path1/path2/path3/my.file.txt</span><br></pre></td></tr></table></figure>\n"},{"title":"iOS编程语言之 swift Class","abbrlink":1841,"date":"2021-07-23T08:46:02.000Z","_content":"\n## 1. [What's .self, .Type and .Protocol? Understanding Swift Metatypes](https://swiftrocks.com/whats-type-and-self-swift-metatypes)\n\nSwift 的元类[^swift-meta-type]、类、协议、运行时类型\n\n* 类型提取\n\n```swift\nlet object = Object()\ntype(of: object) = Object.Type\n```\n\n* Class 的元类与类\n\n```swift\nvar instance: Class.Type = Class.self\n```\n\n* Protocol 的元类与协议\n\n```swift\nvar instance: Protocol.protocol = Protocol.self\n```\n\n[^swift-meta-type]: [Swift 元类](https://swiftrocks.com/whats-type-and-self-swift-metatypes)\n","source":"_posts/iOS/Languages/Swift/Class.md","raw":"---\ntitle: iOS编程语言之 swift Class\nabbrlink: 1841\ndate: 2021-07-23 16:46:02\ntags:\n---\n\n## 1. [What's .self, .Type and .Protocol? Understanding Swift Metatypes](https://swiftrocks.com/whats-type-and-self-swift-metatypes)\n\nSwift 的元类[^swift-meta-type]、类、协议、运行时类型\n\n* 类型提取\n\n```swift\nlet object = Object()\ntype(of: object) = Object.Type\n```\n\n* Class 的元类与类\n\n```swift\nvar instance: Class.Type = Class.self\n```\n\n* Protocol 的元类与协议\n\n```swift\nvar instance: Protocol.protocol = Protocol.self\n```\n\n[^swift-meta-type]: [Swift 元类](https://swiftrocks.com/whats-type-and-self-swift-metatypes)\n","slug":"iOS/Languages/Swift/Class","published":1,"updated":"2021-09-22T06:56:40.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3x0042iu9kdqwh27i0","content":"<h2 id=\"1-What’s-self-Type-and-Protocol-Understanding-Swift-Metatypes\"><a href=\"#1-What’s-self-Type-and-Protocol-Understanding-Swift-Metatypes\" class=\"headerlink\" title=\"1. What’s .self, .Type and .Protocol? Understanding Swift Metatypes\"></a>1. <a href=\"https://swiftrocks.com/whats-type-and-self-swift-metatypes\">What’s .self, .Type and .Protocol? Understanding Swift Metatypes</a></h2><p>Swift 的元类[^swift-meta-type]、类、协议、运行时类型</p>\n<ul>\n<li>类型提取</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> object <span class=\"operator\">=</span> <span class=\"type\">Object</span>()</span><br><span class=\"line\"><span class=\"built_in\">type</span>(of: object) <span class=\"operator\">=</span> <span class=\"type\">Object</span>.<span class=\"keyword\">Type</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Class 的元类与类</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instance: <span class=\"type\">Class</span>.<span class=\"keyword\">Type</span> <span class=\"operator\">=</span> <span class=\"type\">Class</span>.<span class=\"keyword\">self</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Protocol 的元类与协议</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instance: <span class=\"type\">Protocol</span>.protocol <span class=\"operator\">=</span> <span class=\"type\">Protocol</span>.<span class=\"keyword\">self</span></span><br></pre></td></tr></table></figure>\n\n<p>[^swift-meta-type]: <a href=\"https://swiftrocks.com/whats-type-and-self-swift-metatypes\">Swift 元类</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-What’s-self-Type-and-Protocol-Understanding-Swift-Metatypes\"><a href=\"#1-What’s-self-Type-and-Protocol-Understanding-Swift-Metatypes\" class=\"headerlink\" title=\"1. What’s .self, .Type and .Protocol? Understanding Swift Metatypes\"></a>1. <a href=\"https://swiftrocks.com/whats-type-and-self-swift-metatypes\">What’s .self, .Type and .Protocol? Understanding Swift Metatypes</a></h2><p>Swift 的元类[^swift-meta-type]、类、协议、运行时类型</p>\n<ul>\n<li>类型提取</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> object <span class=\"operator\">=</span> <span class=\"type\">Object</span>()</span><br><span class=\"line\"><span class=\"built_in\">type</span>(of: object) <span class=\"operator\">=</span> <span class=\"type\">Object</span>.<span class=\"keyword\">Type</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Class 的元类与类</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instance: <span class=\"type\">Class</span>.<span class=\"keyword\">Type</span> <span class=\"operator\">=</span> <span class=\"type\">Class</span>.<span class=\"keyword\">self</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Protocol 的元类与协议</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> instance: <span class=\"type\">Protocol</span>.protocol <span class=\"operator\">=</span> <span class=\"type\">Protocol</span>.<span class=\"keyword\">self</span></span><br></pre></td></tr></table></figure>\n\n<p>[^swift-meta-type]: <a href=\"https://swiftrocks.com/whats-type-and-self-swift-metatypes\">Swift 元类</a></p>\n"},{"title":"iOS编程语言之swift 构造器","abbrlink":"bde5b828","date":"2021-04-20T13:36:02.000Z","_content":"## swift 构造器\n\n1、默认初始化器\nSwift 为所有没有提供初始化器的结构体或类提供了一个默认的初始化器来给所有的属性提供了默认值。\n这个默认的初始化器只是简单地创建了一个所有属性都有默认值的新实例\n\n2、结构体类型的成员初始化器\n如果结构体类型中没有定义任何自定义初始化器，它会自动获得一个成员初始化器。\n不同于默认初始化器，结构体会接收成员初始化器即使它的存储属性没有默认值。\n\n3、值类型的初始化器委托\n初始化器可以调用其他初始化器来执行部分实例的初始化。这个过程，就是所谓的初始化器委托，避免了多个初始化器里冗余代码。\n\n初始化器委托的运作，以及允许那些形式的委托，这些规则对于值类型和类类型是不同的。值类型(结构体和枚举)不支持继承，\n所以他它们的初始化器委托的过程相当简单，因为它们只能提供它们自己为另一个初始化器委托。如同继承里描述的那样，\n总之，类可以从其他类继承。这就意味着类有额外的责任来确保它们继承的所有存储属性在初始化期间都分配了一个合适的值。\n这些责任在下边的类的继承和初始化里做详述。\n\n4、类的继承和初始化\n所有类的存储属性——包括从它的父类继承的所有属性——都必须在初始化期间分配初始值。\n\nSwift 为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值。这些就是所谓的指定初始化器和便捷初始化器。\n*指定初始化器\n\n*便利构造器\n   convenience:便利，使用convenience修饰的构造函数叫做便利构造函数\n   便利构造函数通常用在对系统的类进行构造函数的扩充时使用。\n   便利构造函数的特点：\n   1、便利构造函数通常都是写在extension里面\n   2、便利函数init前面需要加载convenience\n   3、在便利构造函数中需要明确的调用self.init()\n\n4.1、类类型的初始化器委托\n为了简化指定和便捷初始化器之间的调用关系，Swift 在初始化器之间的委托调用有下面的三个规则:\n\n规则 1\n指定初始化器必须从它的直系父类调用指定初始化器。\n\n规则 2\n便捷初始化器必须从相同的类里调用另一个初始化器。\n\n规则 3\n便捷初始化器最终必须调用一个指定初始化器。\n\n4.2、两段式初始化\nSwift 的类初始化是一个两段式过程。在第一个阶段，每一个存储属性被引入类为分配了一个初始值。\n一旦每个存储属性的初始状态被确定，第二个阶段就开始了，每个类都有机会在新的实例准备使用之前来定制它的存储属性。\n\nSwift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成：\n\n安全检查 1\n指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。\n\n如上所述，一个对象的内存只有在其所有储存型属性确定之后才能完全初始化。为了满足这一规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。\n\n安全检查 2\n指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值。如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖。\n\n安全检查 3\n便捷初始化器必须先委托同类中的其它初始化器，然后再为任意属性赋新值（包括同类里定义的属性）。如果没这么做，\n便捷构初始化器赋予的新值将被自己类中其它指定初始化器所覆盖。\n\n安全检查 4\n初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用 self 作为值。\n\n直到第一阶段结束类实例才完全合法。属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。\n\n以下是两段初始化过程，基于上述四种检查的流程：\n\n4.3、两端初始化总结：\n阶段 1\n指定或便捷初始化器在类中被调用；\n为这个类的新实例分配内存。内存还没有被初始化；\n这个类的指定初始化器确保所有由此类引入的存储属性都有一个值。现在这些存储属性的内存被初始化了；\n指定初始化器上交父类的初始化器为其存储属性执行相同的任务；\n这个调用父类初始化器的过程将沿着初始化器链一直向上进行，直到到达初始化器链的最顶部；\n一旦达了初始化器链的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成。\n\n阶段 2\n从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问 self 并且可以修改它的属性，调用它的实例方法等等；\n最终，链中任何便捷初始化器都有机会定制实例以及使用 slef 。\n\n5、初始化器的继承和重写\n\n不像在 Objective-C 中的子类，Swift 的子类不会默认继承父类的初始化器。\nSwift 的这种机制防止父类的简单初始化器被一个更专用的子类继承并被用来创建一个没有完全或错误初始化的新实例的情况发生。\n\n初始化器的自动继承\n如上所述，子类默认不会继承父类初始化器。总之，在特定的情况下父类初始化器是可以被自动继承的。实际上，这意味着在许多场景中你不必重写父类初始化器，只要可以安全操作，你就可以毫不费力地继承父类的初始化器。\n\n假设你为你子类引入的任何新的属性都提供了默认值，请遵守以下2个规则：\n\n规则1\n如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器。\n\n规则2\n如果你的子类提供了所有父类指定初始化器的实现——要么是通过规则1继承来的，要么通过在定义中提供自定义实现的——那么它自动继承所有的父类便捷初始化器。\n\n就算你的子类添加了更多的便捷初始化器，这些规则仍然适用。\n\n*注意\n子类能够以便捷初始化器的形式实现父类指定初始化器来作为满足规则2的一部分。\n\n6、可失败初始化器\n定义类、结构体或枚举初始化时可以失败在某些情况下会管大用。这个失败可能由以下几种方式触发，包括给初始化传入无效的形式参数值，\n或缺少某种外部所需的资源，又或是其他阻止初始化的情况。\n\n6.1、枚举的可失败初始化器\n你可以使用一个可失败初始化器来在带一个或多个形式参数的枚举中选择合适的情况。如果提供的形式参数没有匹配合适的情况初始化器就可能失败。\n\n6.2、带有原始值枚举的可失败初始化器\n带有原始值的枚举会自动获得一个可失败初始化器 init?(rawValue:) ，\n该可失败初始化器接收一个名为 rawValue 的合适的原始值类型形式参数如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就触发初始化失败。\n\n为了妥善处理这种可能失败的情况，在类、结构体或枚举中定义一个或多个可失败的初始化器。通过在 init 关键字后面添加问号( init? )来写。\n\n6.3、初始化失败的传递\n类，结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器。\n类似地，子类的可失败初始化器可以向上委托到父类的可失败初始化器。\n\n无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。\n\n6.4、重写可失败初始化器\n你可以在子类里重写父类的可失败初始化器。就好比其他的初始化器。或者，你可以用子类的非可失败初始化器来重写父类可失败初始化器。\n这样允许你定义一个初始化不会失败的子类，尽管父类的初始化允许失败。\n\n注意如果你用非可失败的子类初始化器重写了一个可失败初始化器，向上委托到父类初始化器的唯一办法是强制展开父类可失败初始化器的结果。\n\n6.5、可失败初始化器 init!\n通常来讲我们通过在 init 关键字后添加问号 ( init? )的方式来定义一个可失败初始化器以创建一个合适类型的可选项实例。\n另外，你也可以使用可失败初始化器创建一个隐式展开具有合适类型的可选项实例。通过在 init 后面添加惊叹号( init! )是不是问号。\n\n你可以在 init? 初始化器中委托调用 init! 初始化器，反之亦然。 你也可以用 init! 重写 init? ，反之亦然。\n你还可以用 init 委托调用 init! ，尽管当 init! 初始化器导致初始化失败时会触发断言。\n\n7、必要初始化器\n在类的初始化器前添加 required  修饰符来表明所有该类的子类都必须实现该初始化器：\n","source":"_posts/iOS/Languages/Swift/Constructor.md","raw":"---\ntitle: iOS编程语言之swift 构造器\nabbrlink: bde5b828\ndate: 2021-04-20 21:36:02\ntags:\n---\n## swift 构造器\n\n1、默认初始化器\nSwift 为所有没有提供初始化器的结构体或类提供了一个默认的初始化器来给所有的属性提供了默认值。\n这个默认的初始化器只是简单地创建了一个所有属性都有默认值的新实例\n\n2、结构体类型的成员初始化器\n如果结构体类型中没有定义任何自定义初始化器，它会自动获得一个成员初始化器。\n不同于默认初始化器，结构体会接收成员初始化器即使它的存储属性没有默认值。\n\n3、值类型的初始化器委托\n初始化器可以调用其他初始化器来执行部分实例的初始化。这个过程，就是所谓的初始化器委托，避免了多个初始化器里冗余代码。\n\n初始化器委托的运作，以及允许那些形式的委托，这些规则对于值类型和类类型是不同的。值类型(结构体和枚举)不支持继承，\n所以他它们的初始化器委托的过程相当简单，因为它们只能提供它们自己为另一个初始化器委托。如同继承里描述的那样，\n总之，类可以从其他类继承。这就意味着类有额外的责任来确保它们继承的所有存储属性在初始化期间都分配了一个合适的值。\n这些责任在下边的类的继承和初始化里做详述。\n\n4、类的继承和初始化\n所有类的存储属性——包括从它的父类继承的所有属性——都必须在初始化期间分配初始值。\n\nSwift 为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值。这些就是所谓的指定初始化器和便捷初始化器。\n*指定初始化器\n\n*便利构造器\n   convenience:便利，使用convenience修饰的构造函数叫做便利构造函数\n   便利构造函数通常用在对系统的类进行构造函数的扩充时使用。\n   便利构造函数的特点：\n   1、便利构造函数通常都是写在extension里面\n   2、便利函数init前面需要加载convenience\n   3、在便利构造函数中需要明确的调用self.init()\n\n4.1、类类型的初始化器委托\n为了简化指定和便捷初始化器之间的调用关系，Swift 在初始化器之间的委托调用有下面的三个规则:\n\n规则 1\n指定初始化器必须从它的直系父类调用指定初始化器。\n\n规则 2\n便捷初始化器必须从相同的类里调用另一个初始化器。\n\n规则 3\n便捷初始化器最终必须调用一个指定初始化器。\n\n4.2、两段式初始化\nSwift 的类初始化是一个两段式过程。在第一个阶段，每一个存储属性被引入类为分配了一个初始值。\n一旦每个存储属性的初始状态被确定，第二个阶段就开始了，每个类都有机会在新的实例准备使用之前来定制它的存储属性。\n\nSwift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成：\n\n安全检查 1\n指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。\n\n如上所述，一个对象的内存只有在其所有储存型属性确定之后才能完全初始化。为了满足这一规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。\n\n安全检查 2\n指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值。如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖。\n\n安全检查 3\n便捷初始化器必须先委托同类中的其它初始化器，然后再为任意属性赋新值（包括同类里定义的属性）。如果没这么做，\n便捷构初始化器赋予的新值将被自己类中其它指定初始化器所覆盖。\n\n安全检查 4\n初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用 self 作为值。\n\n直到第一阶段结束类实例才完全合法。属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。\n\n以下是两段初始化过程，基于上述四种检查的流程：\n\n4.3、两端初始化总结：\n阶段 1\n指定或便捷初始化器在类中被调用；\n为这个类的新实例分配内存。内存还没有被初始化；\n这个类的指定初始化器确保所有由此类引入的存储属性都有一个值。现在这些存储属性的内存被初始化了；\n指定初始化器上交父类的初始化器为其存储属性执行相同的任务；\n这个调用父类初始化器的过程将沿着初始化器链一直向上进行，直到到达初始化器链的最顶部；\n一旦达了初始化器链的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成。\n\n阶段 2\n从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问 self 并且可以修改它的属性，调用它的实例方法等等；\n最终，链中任何便捷初始化器都有机会定制实例以及使用 slef 。\n\n5、初始化器的继承和重写\n\n不像在 Objective-C 中的子类，Swift 的子类不会默认继承父类的初始化器。\nSwift 的这种机制防止父类的简单初始化器被一个更专用的子类继承并被用来创建一个没有完全或错误初始化的新实例的情况发生。\n\n初始化器的自动继承\n如上所述，子类默认不会继承父类初始化器。总之，在特定的情况下父类初始化器是可以被自动继承的。实际上，这意味着在许多场景中你不必重写父类初始化器，只要可以安全操作，你就可以毫不费力地继承父类的初始化器。\n\n假设你为你子类引入的任何新的属性都提供了默认值，请遵守以下2个规则：\n\n规则1\n如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器。\n\n规则2\n如果你的子类提供了所有父类指定初始化器的实现——要么是通过规则1继承来的，要么通过在定义中提供自定义实现的——那么它自动继承所有的父类便捷初始化器。\n\n就算你的子类添加了更多的便捷初始化器，这些规则仍然适用。\n\n*注意\n子类能够以便捷初始化器的形式实现父类指定初始化器来作为满足规则2的一部分。\n\n6、可失败初始化器\n定义类、结构体或枚举初始化时可以失败在某些情况下会管大用。这个失败可能由以下几种方式触发，包括给初始化传入无效的形式参数值，\n或缺少某种外部所需的资源，又或是其他阻止初始化的情况。\n\n6.1、枚举的可失败初始化器\n你可以使用一个可失败初始化器来在带一个或多个形式参数的枚举中选择合适的情况。如果提供的形式参数没有匹配合适的情况初始化器就可能失败。\n\n6.2、带有原始值枚举的可失败初始化器\n带有原始值的枚举会自动获得一个可失败初始化器 init?(rawValue:) ，\n该可失败初始化器接收一个名为 rawValue 的合适的原始值类型形式参数如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就触发初始化失败。\n\n为了妥善处理这种可能失败的情况，在类、结构体或枚举中定义一个或多个可失败的初始化器。通过在 init 关键字后面添加问号( init? )来写。\n\n6.3、初始化失败的传递\n类，结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器。\n类似地，子类的可失败初始化器可以向上委托到父类的可失败初始化器。\n\n无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。\n\n6.4、重写可失败初始化器\n你可以在子类里重写父类的可失败初始化器。就好比其他的初始化器。或者，你可以用子类的非可失败初始化器来重写父类可失败初始化器。\n这样允许你定义一个初始化不会失败的子类，尽管父类的初始化允许失败。\n\n注意如果你用非可失败的子类初始化器重写了一个可失败初始化器，向上委托到父类初始化器的唯一办法是强制展开父类可失败初始化器的结果。\n\n6.5、可失败初始化器 init!\n通常来讲我们通过在 init 关键字后添加问号 ( init? )的方式来定义一个可失败初始化器以创建一个合适类型的可选项实例。\n另外，你也可以使用可失败初始化器创建一个隐式展开具有合适类型的可选项实例。通过在 init 后面添加惊叹号( init! )是不是问号。\n\n你可以在 init? 初始化器中委托调用 init! 初始化器，反之亦然。 你也可以用 init! 重写 init? ，反之亦然。\n你还可以用 init 委托调用 init! ，尽管当 init! 初始化器导致初始化失败时会触发断言。\n\n7、必要初始化器\n在类的初始化器前添加 required  修饰符来表明所有该类的子类都必须实现该初始化器：\n","slug":"iOS/Languages/Swift/Constructor","published":1,"updated":"2021-07-29T06:46:00.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3x0043iu9k5npn904d","content":"<h2 id=\"swift-构造器\"><a href=\"#swift-构造器\" class=\"headerlink\" title=\"swift 构造器\"></a>swift 构造器</h2><p>1、默认初始化器<br>Swift 为所有没有提供初始化器的结构体或类提供了一个默认的初始化器来给所有的属性提供了默认值。<br>这个默认的初始化器只是简单地创建了一个所有属性都有默认值的新实例</p>\n<p>2、结构体类型的成员初始化器<br>如果结构体类型中没有定义任何自定义初始化器，它会自动获得一个成员初始化器。<br>不同于默认初始化器，结构体会接收成员初始化器即使它的存储属性没有默认值。</p>\n<p>3、值类型的初始化器委托<br>初始化器可以调用其他初始化器来执行部分实例的初始化。这个过程，就是所谓的初始化器委托，避免了多个初始化器里冗余代码。</p>\n<p>初始化器委托的运作，以及允许那些形式的委托，这些规则对于值类型和类类型是不同的。值类型(结构体和枚举)不支持继承，<br>所以他它们的初始化器委托的过程相当简单，因为它们只能提供它们自己为另一个初始化器委托。如同继承里描述的那样，<br>总之，类可以从其他类继承。这就意味着类有额外的责任来确保它们继承的所有存储属性在初始化期间都分配了一个合适的值。<br>这些责任在下边的类的继承和初始化里做详述。</p>\n<p>4、类的继承和初始化<br>所有类的存储属性——包括从它的父类继承的所有属性——都必须在初始化期间分配初始值。</p>\n<p>Swift 为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值。这些就是所谓的指定初始化器和便捷初始化器。<br>*指定初始化器</p>\n<p>*便利构造器<br>   convenience:便利，使用convenience修饰的构造函数叫做便利构造函数<br>   便利构造函数通常用在对系统的类进行构造函数的扩充时使用。<br>   便利构造函数的特点：<br>   1、便利构造函数通常都是写在extension里面<br>   2、便利函数init前面需要加载convenience<br>   3、在便利构造函数中需要明确的调用self.init()</p>\n<p>4.1、类类型的初始化器委托<br>为了简化指定和便捷初始化器之间的调用关系，Swift 在初始化器之间的委托调用有下面的三个规则:</p>\n<p>规则 1<br>指定初始化器必须从它的直系父类调用指定初始化器。</p>\n<p>规则 2<br>便捷初始化器必须从相同的类里调用另一个初始化器。</p>\n<p>规则 3<br>便捷初始化器最终必须调用一个指定初始化器。</p>\n<p>4.2、两段式初始化<br>Swift 的类初始化是一个两段式过程。在第一个阶段，每一个存储属性被引入类为分配了一个初始值。<br>一旦每个存储属性的初始状态被确定，第二个阶段就开始了，每个类都有机会在新的实例准备使用之前来定制它的存储属性。</p>\n<p>Swift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成：</p>\n<p>安全检查 1<br>指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。</p>\n<p>如上所述，一个对象的内存只有在其所有储存型属性确定之后才能完全初始化。为了满足这一规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。</p>\n<p>安全检查 2<br>指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值。如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖。</p>\n<p>安全检查 3<br>便捷初始化器必须先委托同类中的其它初始化器，然后再为任意属性赋新值（包括同类里定义的属性）。如果没这么做，<br>便捷构初始化器赋予的新值将被自己类中其它指定初始化器所覆盖。</p>\n<p>安全检查 4<br>初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用 self 作为值。</p>\n<p>直到第一阶段结束类实例才完全合法。属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。</p>\n<p>以下是两段初始化过程，基于上述四种检查的流程：</p>\n<p>4.3、两端初始化总结：<br>阶段 1<br>指定或便捷初始化器在类中被调用；<br>为这个类的新实例分配内存。内存还没有被初始化；<br>这个类的指定初始化器确保所有由此类引入的存储属性都有一个值。现在这些存储属性的内存被初始化了；<br>指定初始化器上交父类的初始化器为其存储属性执行相同的任务；<br>这个调用父类初始化器的过程将沿着初始化器链一直向上进行，直到到达初始化器链的最顶部；<br>一旦达了初始化器链的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成。</p>\n<p>阶段 2<br>从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问 self 并且可以修改它的属性，调用它的实例方法等等；<br>最终，链中任何便捷初始化器都有机会定制实例以及使用 slef 。</p>\n<p>5、初始化器的继承和重写</p>\n<p>不像在 Objective-C 中的子类，Swift 的子类不会默认继承父类的初始化器。<br>Swift 的这种机制防止父类的简单初始化器被一个更专用的子类继承并被用来创建一个没有完全或错误初始化的新实例的情况发生。</p>\n<p>初始化器的自动继承<br>如上所述，子类默认不会继承父类初始化器。总之，在特定的情况下父类初始化器是可以被自动继承的。实际上，这意味着在许多场景中你不必重写父类初始化器，只要可以安全操作，你就可以毫不费力地继承父类的初始化器。</p>\n<p>假设你为你子类引入的任何新的属性都提供了默认值，请遵守以下2个规则：</p>\n<p>规则1<br>如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器。</p>\n<p>规则2<br>如果你的子类提供了所有父类指定初始化器的实现——要么是通过规则1继承来的，要么通过在定义中提供自定义实现的——那么它自动继承所有的父类便捷初始化器。</p>\n<p>就算你的子类添加了更多的便捷初始化器，这些规则仍然适用。</p>\n<p>*注意<br>子类能够以便捷初始化器的形式实现父类指定初始化器来作为满足规则2的一部分。</p>\n<p>6、可失败初始化器<br>定义类、结构体或枚举初始化时可以失败在某些情况下会管大用。这个失败可能由以下几种方式触发，包括给初始化传入无效的形式参数值，<br>或缺少某种外部所需的资源，又或是其他阻止初始化的情况。</p>\n<p>6.1、枚举的可失败初始化器<br>你可以使用一个可失败初始化器来在带一个或多个形式参数的枚举中选择合适的情况。如果提供的形式参数没有匹配合适的情况初始化器就可能失败。</p>\n<p>6.2、带有原始值枚举的可失败初始化器<br>带有原始值的枚举会自动获得一个可失败初始化器 init?(rawValue:) ，<br>该可失败初始化器接收一个名为 rawValue 的合适的原始值类型形式参数如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就触发初始化失败。</p>\n<p>为了妥善处理这种可能失败的情况，在类、结构体或枚举中定义一个或多个可失败的初始化器。通过在 init 关键字后面添加问号( init? )来写。</p>\n<p>6.3、初始化失败的传递<br>类，结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器。<br>类似地，子类的可失败初始化器可以向上委托到父类的可失败初始化器。</p>\n<p>无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。</p>\n<p>6.4、重写可失败初始化器<br>你可以在子类里重写父类的可失败初始化器。就好比其他的初始化器。或者，你可以用子类的非可失败初始化器来重写父类可失败初始化器。<br>这样允许你定义一个初始化不会失败的子类，尽管父类的初始化允许失败。</p>\n<p>注意如果你用非可失败的子类初始化器重写了一个可失败初始化器，向上委托到父类初始化器的唯一办法是强制展开父类可失败初始化器的结果。</p>\n<p>6.5、可失败初始化器 init!<br>通常来讲我们通过在 init 关键字后添加问号 ( init? )的方式来定义一个可失败初始化器以创建一个合适类型的可选项实例。<br>另外，你也可以使用可失败初始化器创建一个隐式展开具有合适类型的可选项实例。通过在 init 后面添加惊叹号( init! )是不是问号。</p>\n<p>你可以在 init? 初始化器中委托调用 init! 初始化器，反之亦然。 你也可以用 init! 重写 init? ，反之亦然。<br>你还可以用 init 委托调用 init! ，尽管当 init! 初始化器导致初始化失败时会触发断言。</p>\n<p>7、必要初始化器<br>在类的初始化器前添加 required  修饰符来表明所有该类的子类都必须实现该初始化器：</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"swift-构造器\"><a href=\"#swift-构造器\" class=\"headerlink\" title=\"swift 构造器\"></a>swift 构造器</h2><p>1、默认初始化器<br>Swift 为所有没有提供初始化器的结构体或类提供了一个默认的初始化器来给所有的属性提供了默认值。<br>这个默认的初始化器只是简单地创建了一个所有属性都有默认值的新实例</p>\n<p>2、结构体类型的成员初始化器<br>如果结构体类型中没有定义任何自定义初始化器，它会自动获得一个成员初始化器。<br>不同于默认初始化器，结构体会接收成员初始化器即使它的存储属性没有默认值。</p>\n<p>3、值类型的初始化器委托<br>初始化器可以调用其他初始化器来执行部分实例的初始化。这个过程，就是所谓的初始化器委托，避免了多个初始化器里冗余代码。</p>\n<p>初始化器委托的运作，以及允许那些形式的委托，这些规则对于值类型和类类型是不同的。值类型(结构体和枚举)不支持继承，<br>所以他它们的初始化器委托的过程相当简单，因为它们只能提供它们自己为另一个初始化器委托。如同继承里描述的那样，<br>总之，类可以从其他类继承。这就意味着类有额外的责任来确保它们继承的所有存储属性在初始化期间都分配了一个合适的值。<br>这些责任在下边的类的继承和初始化里做详述。</p>\n<p>4、类的继承和初始化<br>所有类的存储属性——包括从它的父类继承的所有属性——都必须在初始化期间分配初始值。</p>\n<p>Swift 为类类型定义了两种初始化器以确保所有的存储属性接收一个初始值。这些就是所谓的指定初始化器和便捷初始化器。<br>*指定初始化器</p>\n<p>*便利构造器<br>   convenience:便利，使用convenience修饰的构造函数叫做便利构造函数<br>   便利构造函数通常用在对系统的类进行构造函数的扩充时使用。<br>   便利构造函数的特点：<br>   1、便利构造函数通常都是写在extension里面<br>   2、便利函数init前面需要加载convenience<br>   3、在便利构造函数中需要明确的调用self.init()</p>\n<p>4.1、类类型的初始化器委托<br>为了简化指定和便捷初始化器之间的调用关系，Swift 在初始化器之间的委托调用有下面的三个规则:</p>\n<p>规则 1<br>指定初始化器必须从它的直系父类调用指定初始化器。</p>\n<p>规则 2<br>便捷初始化器必须从相同的类里调用另一个初始化器。</p>\n<p>规则 3<br>便捷初始化器最终必须调用一个指定初始化器。</p>\n<p>4.2、两段式初始化<br>Swift 的类初始化是一个两段式过程。在第一个阶段，每一个存储属性被引入类为分配了一个初始值。<br>一旦每个存储属性的初始状态被确定，第二个阶段就开始了，每个类都有机会在新的实例准备使用之前来定制它的存储属性。</p>\n<p>Swift编译器执行四种有效的安全检查来确保两段式初始化过程能够顺利完成：</p>\n<p>安全检查 1<br>指定初始化器必须保证在向上委托给父类初始化器之前，其所在类引入的所有属性都要初始化完成。</p>\n<p>如上所述，一个对象的内存只有在其所有储存型属性确定之后才能完全初始化。为了满足这一规则，指定初始化器必须保证它自己的属性在它上交委托之前先完成初始化。</p>\n<p>安全检查 2<br>指定初始化器必须先向上委托父类初始化器，然后才能为继承的属性设置新值。如果不这样做，指定初始化器赋予的新值将被父类中的初始化器所覆盖。</p>\n<p>安全检查 3<br>便捷初始化器必须先委托同类中的其它初始化器，然后再为任意属性赋新值（包括同类里定义的属性）。如果没这么做，<br>便捷构初始化器赋予的新值将被自己类中其它指定初始化器所覆盖。</p>\n<p>安全检查 4<br>初始化器在第一阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用 self 作为值。</p>\n<p>直到第一阶段结束类实例才完全合法。属性只能被读取，方法也只能被调用，直到第一阶段结束的时候，这个类实例才被看做是合法的。</p>\n<p>以下是两段初始化过程，基于上述四种检查的流程：</p>\n<p>4.3、两端初始化总结：<br>阶段 1<br>指定或便捷初始化器在类中被调用；<br>为这个类的新实例分配内存。内存还没有被初始化；<br>这个类的指定初始化器确保所有由此类引入的存储属性都有一个值。现在这些存储属性的内存被初始化了；<br>指定初始化器上交父类的初始化器为其存储属性执行相同的任务；<br>这个调用父类初始化器的过程将沿着初始化器链一直向上进行，直到到达初始化器链的最顶部；<br>一旦达了初始化器链的最顶部，在链顶部的类确保所有的存储属性都有一个值，此实例的内存被认为完全初始化了，此时第一阶段完成。</p>\n<p>阶段 2<br>从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例。初始化器现在能够访问 self 并且可以修改它的属性，调用它的实例方法等等；<br>最终，链中任何便捷初始化器都有机会定制实例以及使用 slef 。</p>\n<p>5、初始化器的继承和重写</p>\n<p>不像在 Objective-C 中的子类，Swift 的子类不会默认继承父类的初始化器。<br>Swift 的这种机制防止父类的简单初始化器被一个更专用的子类继承并被用来创建一个没有完全或错误初始化的新实例的情况发生。</p>\n<p>初始化器的自动继承<br>如上所述，子类默认不会继承父类初始化器。总之，在特定的情况下父类初始化器是可以被自动继承的。实际上，这意味着在许多场景中你不必重写父类初始化器，只要可以安全操作，你就可以毫不费力地继承父类的初始化器。</p>\n<p>假设你为你子类引入的任何新的属性都提供了默认值，请遵守以下2个规则：</p>\n<p>规则1<br>如果你的子类没有定义任何指定初始化器，它会自动继承父类所有的指定初始化器。</p>\n<p>规则2<br>如果你的子类提供了所有父类指定初始化器的实现——要么是通过规则1继承来的，要么通过在定义中提供自定义实现的——那么它自动继承所有的父类便捷初始化器。</p>\n<p>就算你的子类添加了更多的便捷初始化器，这些规则仍然适用。</p>\n<p>*注意<br>子类能够以便捷初始化器的形式实现父类指定初始化器来作为满足规则2的一部分。</p>\n<p>6、可失败初始化器<br>定义类、结构体或枚举初始化时可以失败在某些情况下会管大用。这个失败可能由以下几种方式触发，包括给初始化传入无效的形式参数值，<br>或缺少某种外部所需的资源，又或是其他阻止初始化的情况。</p>\n<p>6.1、枚举的可失败初始化器<br>你可以使用一个可失败初始化器来在带一个或多个形式参数的枚举中选择合适的情况。如果提供的形式参数没有匹配合适的情况初始化器就可能失败。</p>\n<p>6.2、带有原始值枚举的可失败初始化器<br>带有原始值的枚举会自动获得一个可失败初始化器 init?(rawValue:) ，<br>该可失败初始化器接收一个名为 rawValue 的合适的原始值类型形式参数如果找到了匹配的枚举情况就选择其一，或者没有找到匹配的值就触发初始化失败。</p>\n<p>为了妥善处理这种可能失败的情况，在类、结构体或枚举中定义一个或多个可失败的初始化器。通过在 init 关键字后面添加问号( init? )来写。</p>\n<p>6.3、初始化失败的传递<br>类，结构体或枚举的可失败初始化器可以横向委托到同一个类，结构体或枚举里的另一个可失败初始化器。<br>类似地，子类的可失败初始化器可以向上委托到父类的可失败初始化器。</p>\n<p>无论哪种情况，如果你委托到另一个初始化器导致了初始化失败，那么整个初始化过程也会立即失败，并且之后任何初始化代码都不会执行。</p>\n<p>6.4、重写可失败初始化器<br>你可以在子类里重写父类的可失败初始化器。就好比其他的初始化器。或者，你可以用子类的非可失败初始化器来重写父类可失败初始化器。<br>这样允许你定义一个初始化不会失败的子类，尽管父类的初始化允许失败。</p>\n<p>注意如果你用非可失败的子类初始化器重写了一个可失败初始化器，向上委托到父类初始化器的唯一办法是强制展开父类可失败初始化器的结果。</p>\n<p>6.5、可失败初始化器 init!<br>通常来讲我们通过在 init 关键字后添加问号 ( init? )的方式来定义一个可失败初始化器以创建一个合适类型的可选项实例。<br>另外，你也可以使用可失败初始化器创建一个隐式展开具有合适类型的可选项实例。通过在 init 后面添加惊叹号( init! )是不是问号。</p>\n<p>你可以在 init? 初始化器中委托调用 init! 初始化器，反之亦然。 你也可以用 init! 重写 init? ，反之亦然。<br>你还可以用 init 委托调用 init! ，尽管当 init! 初始化器导致初始化失败时会触发断言。</p>\n<p>7、必要初始化器<br>在类的初始化器前添加 required  修饰符来表明所有该类的子类都必须实现该初始化器：</p>\n"},{"title":"iOS编程语言之 swift 泛型","abbrlink":"91541ff5","date":"2021-07-23T09:10:02.000Z","_content":"\n## 1. [泛型](https://swiftgg.gitbook.io/swift/swift-jiao-cheng/22_generics#extending-a-generic-type)\n\n类型参数  -->  类型参数遵循约束\n\n关联类型  -->  关联类型遵循约束\n\n协议  -->  关联类型协议（泛型协议）\n\n泛型类型：泛型函数、泛型类（遵循泛型协议）、泛型协议、泛型下表\n\n拓展（extension）里的泛型，拓展中包含类型参数，并且可以给类型参数加（调用山下文）约束（通过 where）。\n\n```Swift\nprotocol Container {\n  associatedtype Item: Equatable\n  mutating func append(_ item: Item)\n  var count: Int { get }\n  subscript(i: Int) -> Item { get }\n}\n\nprotocol SuffixableContainer: Container {\n  associatedtype Suffix: SuffixableContainer where Suffix.Item == Item\n  func suffix(_ size: Int) -> Suffix\n}\n\nextension Stack: SuffixableContainer {\n  // 推断 suffix 结果是Stack。\n  func suffix(_ size: Int) -> Stack {\n      var result = Stack()\n      for index in (count-size)..<count {\n          result.append(self[index])\n      }\n      return result\n  }\n}\nvar stackOfInts = Stack<Int>()\nstackOfInts.append(10)\nstackOfInts.append(20)\nstackOfInts.append(30)\nlet suffix = stackOfInts.suffix(2)\n```\n","source":"_posts/iOS/Languages/Swift/Generic.md","raw":"---\ntitle: iOS编程语言之 swift 泛型\nabbrlink: 91541ff5\ndate: 2021-07-23 17:10:02\ntags:\n---\n\n## 1. [泛型](https://swiftgg.gitbook.io/swift/swift-jiao-cheng/22_generics#extending-a-generic-type)\n\n类型参数  -->  类型参数遵循约束\n\n关联类型  -->  关联类型遵循约束\n\n协议  -->  关联类型协议（泛型协议）\n\n泛型类型：泛型函数、泛型类（遵循泛型协议）、泛型协议、泛型下表\n\n拓展（extension）里的泛型，拓展中包含类型参数，并且可以给类型参数加（调用山下文）约束（通过 where）。\n\n```Swift\nprotocol Container {\n  associatedtype Item: Equatable\n  mutating func append(_ item: Item)\n  var count: Int { get }\n  subscript(i: Int) -> Item { get }\n}\n\nprotocol SuffixableContainer: Container {\n  associatedtype Suffix: SuffixableContainer where Suffix.Item == Item\n  func suffix(_ size: Int) -> Suffix\n}\n\nextension Stack: SuffixableContainer {\n  // 推断 suffix 结果是Stack。\n  func suffix(_ size: Int) -> Stack {\n      var result = Stack()\n      for index in (count-size)..<count {\n          result.append(self[index])\n      }\n      return result\n  }\n}\nvar stackOfInts = Stack<Int>()\nstackOfInts.append(10)\nstackOfInts.append(20)\nstackOfInts.append(30)\nlet suffix = stackOfInts.suffix(2)\n```\n","slug":"iOS/Languages/Swift/Generic","published":1,"updated":"2021-07-29T06:45:57.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3y0044iu9k467138ba","content":"<h2 id=\"1-泛型\"><a href=\"#1-泛型\" class=\"headerlink\" title=\"1. 泛型\"></a>1. <a href=\"https://swiftgg.gitbook.io/swift/swift-jiao-cheng/22_generics#extending-a-generic-type\">泛型</a></h2><p>类型参数  –&gt;  类型参数遵循约束</p>\n<p>关联类型  –&gt;  关联类型遵循约束</p>\n<p>协议  –&gt;  关联类型协议（泛型协议）</p>\n<p>泛型类型：泛型函数、泛型类（遵循泛型协议）、泛型协议、泛型下表</p>\n<p>拓展（extension）里的泛型，拓展中包含类型参数，并且可以给类型参数加（调用山下文）约束（通过 where）。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Container</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">associatedtype</span> <span class=\"type\">Item</span>: <span class=\"type\">Equatable</span></span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span>(<span class=\"keyword\">_</span> <span class=\"params\">item</span>: <span class=\"type\">Item</span>)</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> count: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">subscript</span>(<span class=\"params\">i</span>: <span class=\"type\">Int</span>)</span> -&gt; <span class=\"type\">Item</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SuffixableContainer</span>: <span class=\"title\">Container</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">associatedtype</span> <span class=\"type\">Suffix</span>: <span class=\"type\">SuffixableContainer</span> <span class=\"keyword\">where</span> <span class=\"type\">Suffix</span>.<span class=\"type\">Item</span> <span class=\"operator\">==</span> <span class=\"type\">Item</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">suffix</span>(<span class=\"keyword\">_</span> <span class=\"params\">size</span>: <span class=\"type\">Int</span>)</span> -&gt; <span class=\"type\">Suffix</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Stack</span>: <span class=\"title\">SuffixableContainer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 推断 suffix 结果是Stack。</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">suffix</span>(<span class=\"keyword\">_</span> <span class=\"params\">size</span>: <span class=\"type\">Int</span>)</span> -&gt; <span class=\"type\">Stack</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> result <span class=\"operator\">=</span> <span class=\"type\">Stack</span>()</span><br><span class=\"line\">      <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> (count<span class=\"operator\">-</span>size)<span class=\"operator\">..&lt;</span>count &#123;</span><br><span class=\"line\">          result.append(<span class=\"keyword\">self</span>[index])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> stackOfInts <span class=\"operator\">=</span> <span class=\"type\">Stack</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">stackOfInts.append(<span class=\"number\">10</span>)</span><br><span class=\"line\">stackOfInts.append(<span class=\"number\">20</span>)</span><br><span class=\"line\">stackOfInts.append(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> suffix <span class=\"operator\">=</span> stackOfInts.suffix(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-泛型\"><a href=\"#1-泛型\" class=\"headerlink\" title=\"1. 泛型\"></a>1. <a href=\"https://swiftgg.gitbook.io/swift/swift-jiao-cheng/22_generics#extending-a-generic-type\">泛型</a></h2><p>类型参数  –&gt;  类型参数遵循约束</p>\n<p>关联类型  –&gt;  关联类型遵循约束</p>\n<p>协议  –&gt;  关联类型协议（泛型协议）</p>\n<p>泛型类型：泛型函数、泛型类（遵循泛型协议）、泛型协议、泛型下表</p>\n<p>拓展（extension）里的泛型，拓展中包含类型参数，并且可以给类型参数加（调用山下文）约束（通过 where）。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Container</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">associatedtype</span> <span class=\"type\">Item</span>: <span class=\"type\">Equatable</span></span><br><span class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span>(<span class=\"keyword\">_</span> <span class=\"params\">item</span>: <span class=\"type\">Item</span>)</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> count: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">subscript</span>(<span class=\"params\">i</span>: <span class=\"type\">Int</span>)</span> -&gt; <span class=\"type\">Item</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SuffixableContainer</span>: <span class=\"title\">Container</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">associatedtype</span> <span class=\"type\">Suffix</span>: <span class=\"type\">SuffixableContainer</span> <span class=\"keyword\">where</span> <span class=\"type\">Suffix</span>.<span class=\"type\">Item</span> <span class=\"operator\">==</span> <span class=\"type\">Item</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">suffix</span>(<span class=\"keyword\">_</span> <span class=\"params\">size</span>: <span class=\"type\">Int</span>)</span> -&gt; <span class=\"type\">Suffix</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Stack</span>: <span class=\"title\">SuffixableContainer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 推断 suffix 结果是Stack。</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">suffix</span>(<span class=\"keyword\">_</span> <span class=\"params\">size</span>: <span class=\"type\">Int</span>)</span> -&gt; <span class=\"type\">Stack</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> result <span class=\"operator\">=</span> <span class=\"type\">Stack</span>()</span><br><span class=\"line\">      <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> (count<span class=\"operator\">-</span>size)<span class=\"operator\">..&lt;</span>count &#123;</span><br><span class=\"line\">          result.append(<span class=\"keyword\">self</span>[index])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> stackOfInts <span class=\"operator\">=</span> <span class=\"type\">Stack</span>&lt;<span class=\"type\">Int</span>&gt;()</span><br><span class=\"line\">stackOfInts.append(<span class=\"number\">10</span>)</span><br><span class=\"line\">stackOfInts.append(<span class=\"number\">20</span>)</span><br><span class=\"line\">stackOfInts.append(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> suffix <span class=\"operator\">=</span> stackOfInts.suffix(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"iOS编程语言之Swift","abbrlink":"dabc4dec","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1 [SwiftGG](https://swiftgg.gitbook.io/swift/)\n\n## 2 Swift SIL\n\n### 2.1 [Swift Intermediate Language 初探](https://zhuanlan.zhihu.com/p/101898915)\n\n### 2.2 [Swift编译器中间码SIL](https://woshiccm.github.io/posts/Swift%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%AD%E9%97%B4%E7%A0%81SIL/)\n\n### 2.3 [Swift的高级中间语言：SIL](https://www.jianshu.com/p/c2880460c6cd)\n\n## 3 Swift 性能优化\n\n### 3.1 [深入剖析Swift性能优化](https://mp.weixin.qq.com/s/U95QmOOjeXkk-yC23cuZCQ)\n","source":"_posts/iOS/Languages/Swift/Swift.md","raw":"---\ntitle: iOS编程语言之Swift\nabbrlink: dabc4dec\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1 [SwiftGG](https://swiftgg.gitbook.io/swift/)\n\n## 2 Swift SIL\n\n### 2.1 [Swift Intermediate Language 初探](https://zhuanlan.zhihu.com/p/101898915)\n\n### 2.2 [Swift编译器中间码SIL](https://woshiccm.github.io/posts/Swift%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%AD%E9%97%B4%E7%A0%81SIL/)\n\n### 2.3 [Swift的高级中间语言：SIL](https://www.jianshu.com/p/c2880460c6cd)\n\n## 3 Swift 性能优化\n\n### 3.1 [深入剖析Swift性能优化](https://mp.weixin.qq.com/s/U95QmOOjeXkk-yC23cuZCQ)\n","slug":"iOS/Languages/Swift/Swift","published":1,"updated":"2021-07-29T06:45:57.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn3z0045iu9k0s3757n7","content":"<h2 id=\"1-SwiftGG\"><a href=\"#1-SwiftGG\" class=\"headerlink\" title=\"1 SwiftGG\"></a>1 <a href=\"https://swiftgg.gitbook.io/swift/\">SwiftGG</a></h2><h2 id=\"2-Swift-SIL\"><a href=\"#2-Swift-SIL\" class=\"headerlink\" title=\"2 Swift SIL\"></a>2 Swift SIL</h2><h3 id=\"2-1-Swift-Intermediate-Language-初探\"><a href=\"#2-1-Swift-Intermediate-Language-初探\" class=\"headerlink\" title=\"2.1 Swift Intermediate Language 初探\"></a>2.1 <a href=\"https://zhuanlan.zhihu.com/p/101898915\">Swift Intermediate Language 初探</a></h3><h3 id=\"2-2-Swift编译器中间码SIL\"><a href=\"#2-2-Swift编译器中间码SIL\" class=\"headerlink\" title=\"2.2 Swift编译器中间码SIL\"></a>2.2 <a href=\"https://woshiccm.github.io/posts/Swift%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%AD%E9%97%B4%E7%A0%81SIL/\">Swift编译器中间码SIL</a></h3><h3 id=\"2-3-Swift的高级中间语言：SIL\"><a href=\"#2-3-Swift的高级中间语言：SIL\" class=\"headerlink\" title=\"2.3 Swift的高级中间语言：SIL\"></a>2.3 <a href=\"https://www.jianshu.com/p/c2880460c6cd\">Swift的高级中间语言：SIL</a></h3><h2 id=\"3-Swift-性能优化\"><a href=\"#3-Swift-性能优化\" class=\"headerlink\" title=\"3 Swift 性能优化\"></a>3 Swift 性能优化</h2><h3 id=\"3-1-深入剖析Swift性能优化\"><a href=\"#3-1-深入剖析Swift性能优化\" class=\"headerlink\" title=\"3.1 深入剖析Swift性能优化\"></a>3.1 <a href=\"https://mp.weixin.qq.com/s/U95QmOOjeXkk-yC23cuZCQ\">深入剖析Swift性能优化</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-SwiftGG\"><a href=\"#1-SwiftGG\" class=\"headerlink\" title=\"1 SwiftGG\"></a>1 <a href=\"https://swiftgg.gitbook.io/swift/\">SwiftGG</a></h2><h2 id=\"2-Swift-SIL\"><a href=\"#2-Swift-SIL\" class=\"headerlink\" title=\"2 Swift SIL\"></a>2 Swift SIL</h2><h3 id=\"2-1-Swift-Intermediate-Language-初探\"><a href=\"#2-1-Swift-Intermediate-Language-初探\" class=\"headerlink\" title=\"2.1 Swift Intermediate Language 初探\"></a>2.1 <a href=\"https://zhuanlan.zhihu.com/p/101898915\">Swift Intermediate Language 初探</a></h3><h3 id=\"2-2-Swift编译器中间码SIL\"><a href=\"#2-2-Swift编译器中间码SIL\" class=\"headerlink\" title=\"2.2 Swift编译器中间码SIL\"></a>2.2 <a href=\"https://woshiccm.github.io/posts/Swift%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%AD%E9%97%B4%E7%A0%81SIL/\">Swift编译器中间码SIL</a></h3><h3 id=\"2-3-Swift的高级中间语言：SIL\"><a href=\"#2-3-Swift的高级中间语言：SIL\" class=\"headerlink\" title=\"2.3 Swift的高级中间语言：SIL\"></a>2.3 <a href=\"https://www.jianshu.com/p/c2880460c6cd\">Swift的高级中间语言：SIL</a></h3><h2 id=\"3-Swift-性能优化\"><a href=\"#3-Swift-性能优化\" class=\"headerlink\" title=\"3 Swift 性能优化\"></a>3 Swift 性能优化</h2><h3 id=\"3-1-深入剖析Swift性能优化\"><a href=\"#3-1-深入剖析Swift性能优化\" class=\"headerlink\" title=\"3.1 深入剖析Swift性能优化\"></a>3.1 <a href=\"https://mp.weixin.qq.com/s/U95QmOOjeXkk-yC23cuZCQ\">深入剖析Swift性能优化</a></h3>"},{"title":"iOS编程语言之swift 构造器","abbrlink":"bde5b828","date":"2021-04-20T13:36:02.000Z","_content":"## 值类型与引用类型\n\n1、[Swift 中的值类型与引用类型使用指北](https://juejin.cn/post/6844903550653480968#heading-17)\n","source":"_posts/iOS/Languages/Swift/Value&Reference.md","raw":"---\ntitle: iOS编程语言之swift 构造器\nabbrlink: bde5b828\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 值类型与引用类型\n\n1、[Swift 中的值类型与引用类型使用指北](https://juejin.cn/post/6844903550653480968#heading-17)\n","slug":"iOS/Languages/Swift/Value&Reference","published":1,"updated":"2021-07-29T06:46:00.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn400046iu9k6rw2h5bx","content":"<h2 id=\"值类型与引用类型\"><a href=\"#值类型与引用类型\" class=\"headerlink\" title=\"值类型与引用类型\"></a>值类型与引用类型</h2><p>1、<a href=\"https://juejin.cn/post/6844903550653480968#heading-17\">Swift 中的值类型与引用类型使用指北</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"值类型与引用类型\"><a href=\"#值类型与引用类型\" class=\"headerlink\" title=\"值类型与引用类型\"></a>值类型与引用类型</h2><p>1、<a href=\"https://juejin.cn/post/6844903550653480968#heading-17\">Swift 中的值类型与引用类型使用指北</a></p>\n"},{"title":"iOS编程语言之 swift Codable","abbrlink":"574d0134","date":"2021-07-23T08:46:02.000Z","_content":"\n## 1. [Codable = Decodable + Encodable](https://medium.com/doyeona/codable-decodable-encodable-feat-json-5643dc3d7766)\n\n### 1.1 NSCoding\n\n```Swift\nfunc encode(with aCoder: NSCoder) {\n  \n}\n\nrequired convenience init?(coder aDecoder: NSCoder) {\n  self.init(title: \"\", rating: 0)\n}\n```\n\n* Still best way of using in inherited classes\n\n* Be aware of using it with NSObject\n\n* Code redundancy\n\n* Doesn’t support structs and enums\n\n* Depends on Foundation\n\n### 1.2 Codable\n\n```Swift\nimport UIKit\n\nstruct Response: Codable {\n    let resultCount: Int\n    let tracks: [Track]\n    \n    enum CodingKeys: String, CodingKey {\n        case resultCount\n        case tracks = \"results\"\n    }\n}\n\nstruct Track: Codable {\n    let title: String\n    let artistName: String\n    let thumbnailPath: String\n    \n    enum CodingKeys: String, CodingKey {\n        case title = \"trackName\"\n        case artistName\n        case thumbnailPath = \"artworkUrl100\"\n    }\n}\nfunc encodeData(){\n    let trackObject = Response(resultCount: 3, tracks: [\n        Track(title: \"hello\",\n              artistName: \"heeloo\",\n              thumbnailPath: \"eed\"),\n        Track(title: \"hello\",\n              artistName: \"heeloo\",\n              thumbnailPath: \"eed\"),\n        Track(title: \"hello\",\n              artistName: \"heeloo\",\n              thumbnailPath: \"eed\")\n    ])\n    let encodeData = try? JSONEncoder().encode(trackObject)\n    print(\"EncodeData: \\(encodeData)\")\n    decodeData(decodeData: encodeData!)\n}\nencodeData()\n\nfunc decodeData(decodeData: Data) {\n    //let resultString = String(data: decodeData, encoding: .utf8)\n    //print(\"Data in String: \\(resultString)\")\n    \n    do {\n        let decoder = JSONDecoder()\n        let response = try decoder.decode(Response.self, from: decodeData)\n        print(\"\\(response)\")\n    } catch let error {\n        print(error.localizedDescription)\n    }\n}\n```\n\n## 2. [Complete Guide to Codable — Encodable](https://medium.com/flawless-app-stories/complete-guide-to-codable-encodable-f15b408b8eaa)\n\n### 2.1 设置 codingKey 策略\n\n```Swift\nstruct PhotoFeed: Encodable {\n    let feedKey: String\n    let feedUrl: String\n    let feedDate: Date?\n    let location: Location\n    \n    struct Location: Encodable {\n        var latitude: Double\n        var longitude: Double\n        \n        enum CodingKeys: String, CodingKey {\n            case latitude = \"lat\"\n            case longitude = \"long\"\n        }\n    }\n}\n\nlet photoFeed = PhotoFeed(feedKey: \"12345\", feedUrl: \"https://dummy.url.com/thumbnails/16869828-e75babd8.jpg\", feedDate: Date(), location: PhotoFeed.Location(latitude: 73.7432861, longitude: 18.6119477))\nlet encoder = JSONEncoder()\nencoder.keyEncodingStrategy = .convertToSnakeCase\nencoder.outputFormatting = .prettyPrinted\n\nlet data = try! encoder.encode(photoFeed)\nprint(String(data: data, encoding: .utf8)!)\n\nOutput:\n{\n  \"feed_date\" : 610808974.47951901,\n  \"feed_url\" : \"https:\\/\\/dummy.url.com\\/thumbnails\\/16869828-e75babd8.jpg\",\n  \"feed_key\" : \"12345\",\n  \"location\" : {\n    \"lat\" : 73.743286100000006,\n    \"long\" : 18.611947700000002\n  }\n}\n```\n\n### 2.2 自定义 codingKey 策略\n\n```Swift\nstruct PhotoFeed: Encodable {\n    let feedKey: String\n    let feedUrl: String\n    let feedDate: Date?\n}\n\n// MARK:- PhotoCodingKeys\nstruct PhotoCodingKeys: CodingKey {\n    \n    var stringValue: String\n    init?(stringValue: String) {\n        self.stringValue = stringValue\n    }\n    \n    var intValue: Int? { return nil }\n    init?(intValue: Int) { return nil }\n}\n\nlet photoFeed = PhotoFeed(feedKey: \"12345\", feedUrl: \"https://dummy.url.com/thumbnails/16869828-e75babd8.jpg\", feedDate: Date())\nlet encoder = JSONEncoder()\nencoder.keyEncodingStrategy = .custom({ (keys) -> CodingKey in\n    let keyString = keys.last!.stringValue\n    let stringValue =  \"photo_\" + keyString\n    return PhotoCodingKeys(stringValue: stringValue)!\n})\nencoder.outputFormatting = .prettyPrinted\n\nlet data = try! encoder.encode(photoFeed)\nprint(String(data: data, encoding: .utf8)!)\n\n//OUTPUT\n{\n  \"photo_feedUrl\" : \"https:\\/\\/dummy.url.com\\/thumbnails\\/16869828-e75babd8.jpg\",\n  \"photo_feedDate\" : 610810993.52611899,\n  \"photo_feedKey\" : \"12345\"\n}\n```\n\n## 3. [Encoding Custom Types With Encodable In Swift 4](https://medium.com/@pxpgraphics/encoding-custom-types-with-encodable-in-swift-4-947721e4d5dc)\n\n### 3.1 Encodable\n\n```Swift\nstruct FavoritedMedia {\n    let id: Int\n    let type: MediaType\n    let isFavorited: Bool\n}\nextension FavoritedMedia {\n    enum MediaType: String {\n        case movie\n        case tv\n    }\n}\nextension FavoritedMedia: Encodable {\n    func encode(to encoder: Encoder) throws {\n        var container = encoder.container(keyedBy: CodingKeys.self)\n        try container.encode(id, forKey: .id)\n        try container.encode(type.rawValue, forKey: .type)\n        try container.encode(isFavorited, forKey: .isFavorited)\n    }\n}\n```\n\n### 3.2 Decodable\n\n```Swift\nstruct Movie: Decodable {\n    // Int, String, Date, Double all conform to Codable.\n    let id: Int\n    let title: String\n    let tagline: String\n    let releaseDate: Date\n    let voteAverage: Double\n    let voteCount: Int\n// Some JSON keys should be renamed to follow the API Design Guidelines.\n    enum CodingKeys: String, CodingKey {\n        case id\n        case title       = \"original_title\"\n        case tagline\n        case releaseDate = \"release_date\"\n        case voteAverage = \"vote_average\"\n        case voteCount   = \"vote_count\"\n    }\n}\n\nextension Movie: Decodable {\n    init(from decoder: Decoder) throws {\n       let values = try decoder.container(keyedBy: CodingKeys.self)\n       id = try values.decode(Int.self, forKey: .id)\n       title = try values.decode(String.self, forKey: .title)\n       tagline = try values.decode(String.self, forKey: .tagline)\n// We decode the value to String, then transform into the desired Date type.\n       let releaseDateString = try values.decode(String.self, forKey: .releaseDate)\n       releaseDate = DateFormatter.date(from: releaseDateString)\n        voteAverage = try values.decode(Double.self, forKey: .voteAverage)\n        voteCount = try values.decode(Int.self, forKey: .voteCount)\n    }\n}\n```\n\n## 4. [ios - 使用Codable解析嵌套的无键JSON](https://www.coder.work/article/4413354)\n\n```Swift\n\nlet json = \"\"\"\n        {\n          \"contents\": {\n            \"data\": [\n              {\n                \"type\": \"type1\",\n                \"id\": \"6a406cdd7a9cace5\"\n              },\n              {\n                \"type\": \"type2\",\n                \"dbl\": 1.01\n              },\n              {\n                \"type\": \"type3\",\n                \"int\": 5\n              }\n            ]\n          }\n        }\n        \"\"\"\n\nstruct Item1: Codable {\n   let type: String\n   let id: String\n}\n\nstruct Item2: Codable {\n   let type: String\n   let dbl: Double\n}\n\nstruct Item3: Codable {\n   let type: String\n   let int: Int\n}\n\nenum Interim {\n  case type1 (Item1)\n  case type2 (Item2)\n  case type3 (Item3)\n  case unknown  //to handle unexpected json structures\n}\n\nextension Interim: Decodable {\n   private enum InterimKeys: String, CodingKey {\n      case type\n      case id\n      case dbl\n      case int\n   }\n   init(from decoder: Decoder) throws {\n      let container = try decoder.container(keyedBy: InterimKeys.self)\n      let type = try container.decode(String.self, forKey: .type)\n      switch type {\n      case \"type1\":\n         let id = try container.decode(String.self, forKey: .id)\n         let item = Item1(type: type, id: id)\n         self = .type1(item)\n      case \"type2\":\n         let dbl = try container.decode(Double.self, forKey: .dbl)\n         let item = Item2(type: type, dbl: dbl)\n         self = .type2(item)\n      case \"type3\":\n         let int = try container.decode(Int.self, forKey: .int)\n         let item = Item3(type: type, int: int)\n         self = .type3(item)\n      default: self = .unknown\n      }\n   }\n}\n```\n","source":"_posts/iOS/Languages/Swift/Codable.md","raw":"---\ntitle: iOS编程语言之 swift Codable\nabbrlink: 574d0134\ndate: 2021-07-23 16:46:02\ntags:\n---\n\n## 1. [Codable = Decodable + Encodable](https://medium.com/doyeona/codable-decodable-encodable-feat-json-5643dc3d7766)\n\n### 1.1 NSCoding\n\n```Swift\nfunc encode(with aCoder: NSCoder) {\n  \n}\n\nrequired convenience init?(coder aDecoder: NSCoder) {\n  self.init(title: \"\", rating: 0)\n}\n```\n\n* Still best way of using in inherited classes\n\n* Be aware of using it with NSObject\n\n* Code redundancy\n\n* Doesn’t support structs and enums\n\n* Depends on Foundation\n\n### 1.2 Codable\n\n```Swift\nimport UIKit\n\nstruct Response: Codable {\n    let resultCount: Int\n    let tracks: [Track]\n    \n    enum CodingKeys: String, CodingKey {\n        case resultCount\n        case tracks = \"results\"\n    }\n}\n\nstruct Track: Codable {\n    let title: String\n    let artistName: String\n    let thumbnailPath: String\n    \n    enum CodingKeys: String, CodingKey {\n        case title = \"trackName\"\n        case artistName\n        case thumbnailPath = \"artworkUrl100\"\n    }\n}\nfunc encodeData(){\n    let trackObject = Response(resultCount: 3, tracks: [\n        Track(title: \"hello\",\n              artistName: \"heeloo\",\n              thumbnailPath: \"eed\"),\n        Track(title: \"hello\",\n              artistName: \"heeloo\",\n              thumbnailPath: \"eed\"),\n        Track(title: \"hello\",\n              artistName: \"heeloo\",\n              thumbnailPath: \"eed\")\n    ])\n    let encodeData = try? JSONEncoder().encode(trackObject)\n    print(\"EncodeData: \\(encodeData)\")\n    decodeData(decodeData: encodeData!)\n}\nencodeData()\n\nfunc decodeData(decodeData: Data) {\n    //let resultString = String(data: decodeData, encoding: .utf8)\n    //print(\"Data in String: \\(resultString)\")\n    \n    do {\n        let decoder = JSONDecoder()\n        let response = try decoder.decode(Response.self, from: decodeData)\n        print(\"\\(response)\")\n    } catch let error {\n        print(error.localizedDescription)\n    }\n}\n```\n\n## 2. [Complete Guide to Codable — Encodable](https://medium.com/flawless-app-stories/complete-guide-to-codable-encodable-f15b408b8eaa)\n\n### 2.1 设置 codingKey 策略\n\n```Swift\nstruct PhotoFeed: Encodable {\n    let feedKey: String\n    let feedUrl: String\n    let feedDate: Date?\n    let location: Location\n    \n    struct Location: Encodable {\n        var latitude: Double\n        var longitude: Double\n        \n        enum CodingKeys: String, CodingKey {\n            case latitude = \"lat\"\n            case longitude = \"long\"\n        }\n    }\n}\n\nlet photoFeed = PhotoFeed(feedKey: \"12345\", feedUrl: \"https://dummy.url.com/thumbnails/16869828-e75babd8.jpg\", feedDate: Date(), location: PhotoFeed.Location(latitude: 73.7432861, longitude: 18.6119477))\nlet encoder = JSONEncoder()\nencoder.keyEncodingStrategy = .convertToSnakeCase\nencoder.outputFormatting = .prettyPrinted\n\nlet data = try! encoder.encode(photoFeed)\nprint(String(data: data, encoding: .utf8)!)\n\nOutput:\n{\n  \"feed_date\" : 610808974.47951901,\n  \"feed_url\" : \"https:\\/\\/dummy.url.com\\/thumbnails\\/16869828-e75babd8.jpg\",\n  \"feed_key\" : \"12345\",\n  \"location\" : {\n    \"lat\" : 73.743286100000006,\n    \"long\" : 18.611947700000002\n  }\n}\n```\n\n### 2.2 自定义 codingKey 策略\n\n```Swift\nstruct PhotoFeed: Encodable {\n    let feedKey: String\n    let feedUrl: String\n    let feedDate: Date?\n}\n\n// MARK:- PhotoCodingKeys\nstruct PhotoCodingKeys: CodingKey {\n    \n    var stringValue: String\n    init?(stringValue: String) {\n        self.stringValue = stringValue\n    }\n    \n    var intValue: Int? { return nil }\n    init?(intValue: Int) { return nil }\n}\n\nlet photoFeed = PhotoFeed(feedKey: \"12345\", feedUrl: \"https://dummy.url.com/thumbnails/16869828-e75babd8.jpg\", feedDate: Date())\nlet encoder = JSONEncoder()\nencoder.keyEncodingStrategy = .custom({ (keys) -> CodingKey in\n    let keyString = keys.last!.stringValue\n    let stringValue =  \"photo_\" + keyString\n    return PhotoCodingKeys(stringValue: stringValue)!\n})\nencoder.outputFormatting = .prettyPrinted\n\nlet data = try! encoder.encode(photoFeed)\nprint(String(data: data, encoding: .utf8)!)\n\n//OUTPUT\n{\n  \"photo_feedUrl\" : \"https:\\/\\/dummy.url.com\\/thumbnails\\/16869828-e75babd8.jpg\",\n  \"photo_feedDate\" : 610810993.52611899,\n  \"photo_feedKey\" : \"12345\"\n}\n```\n\n## 3. [Encoding Custom Types With Encodable In Swift 4](https://medium.com/@pxpgraphics/encoding-custom-types-with-encodable-in-swift-4-947721e4d5dc)\n\n### 3.1 Encodable\n\n```Swift\nstruct FavoritedMedia {\n    let id: Int\n    let type: MediaType\n    let isFavorited: Bool\n}\nextension FavoritedMedia {\n    enum MediaType: String {\n        case movie\n        case tv\n    }\n}\nextension FavoritedMedia: Encodable {\n    func encode(to encoder: Encoder) throws {\n        var container = encoder.container(keyedBy: CodingKeys.self)\n        try container.encode(id, forKey: .id)\n        try container.encode(type.rawValue, forKey: .type)\n        try container.encode(isFavorited, forKey: .isFavorited)\n    }\n}\n```\n\n### 3.2 Decodable\n\n```Swift\nstruct Movie: Decodable {\n    // Int, String, Date, Double all conform to Codable.\n    let id: Int\n    let title: String\n    let tagline: String\n    let releaseDate: Date\n    let voteAverage: Double\n    let voteCount: Int\n// Some JSON keys should be renamed to follow the API Design Guidelines.\n    enum CodingKeys: String, CodingKey {\n        case id\n        case title       = \"original_title\"\n        case tagline\n        case releaseDate = \"release_date\"\n        case voteAverage = \"vote_average\"\n        case voteCount   = \"vote_count\"\n    }\n}\n\nextension Movie: Decodable {\n    init(from decoder: Decoder) throws {\n       let values = try decoder.container(keyedBy: CodingKeys.self)\n       id = try values.decode(Int.self, forKey: .id)\n       title = try values.decode(String.self, forKey: .title)\n       tagline = try values.decode(String.self, forKey: .tagline)\n// We decode the value to String, then transform into the desired Date type.\n       let releaseDateString = try values.decode(String.self, forKey: .releaseDate)\n       releaseDate = DateFormatter.date(from: releaseDateString)\n        voteAverage = try values.decode(Double.self, forKey: .voteAverage)\n        voteCount = try values.decode(Int.self, forKey: .voteCount)\n    }\n}\n```\n\n## 4. [ios - 使用Codable解析嵌套的无键JSON](https://www.coder.work/article/4413354)\n\n```Swift\n\nlet json = \"\"\"\n        {\n          \"contents\": {\n            \"data\": [\n              {\n                \"type\": \"type1\",\n                \"id\": \"6a406cdd7a9cace5\"\n              },\n              {\n                \"type\": \"type2\",\n                \"dbl\": 1.01\n              },\n              {\n                \"type\": \"type3\",\n                \"int\": 5\n              }\n            ]\n          }\n        }\n        \"\"\"\n\nstruct Item1: Codable {\n   let type: String\n   let id: String\n}\n\nstruct Item2: Codable {\n   let type: String\n   let dbl: Double\n}\n\nstruct Item3: Codable {\n   let type: String\n   let int: Int\n}\n\nenum Interim {\n  case type1 (Item1)\n  case type2 (Item2)\n  case type3 (Item3)\n  case unknown  //to handle unexpected json structures\n}\n\nextension Interim: Decodable {\n   private enum InterimKeys: String, CodingKey {\n      case type\n      case id\n      case dbl\n      case int\n   }\n   init(from decoder: Decoder) throws {\n      let container = try decoder.container(keyedBy: InterimKeys.self)\n      let type = try container.decode(String.self, forKey: .type)\n      switch type {\n      case \"type1\":\n         let id = try container.decode(String.self, forKey: .id)\n         let item = Item1(type: type, id: id)\n         self = .type1(item)\n      case \"type2\":\n         let dbl = try container.decode(Double.self, forKey: .dbl)\n         let item = Item2(type: type, dbl: dbl)\n         self = .type2(item)\n      case \"type3\":\n         let int = try container.decode(Int.self, forKey: .int)\n         let item = Item3(type: type, int: int)\n         self = .type3(item)\n      default: self = .unknown\n      }\n   }\n}\n```\n","slug":"iOS/Languages/Swift/Codable","published":1,"updated":"2021-07-29T06:45:57.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn410047iu9khelcbyqq","content":"<h2 id=\"1-Codable-Decodable-Encodable\"><a href=\"#1-Codable-Decodable-Encodable\" class=\"headerlink\" title=\"1. Codable = Decodable + Encodable\"></a>1. <a href=\"https://medium.com/doyeona/codable-decodable-encodable-feat-json-5643dc3d7766\">Codable = Decodable + Encodable</a></h2><h3 id=\"1-1-NSCoding\"><a href=\"#1-1-NSCoding\" class=\"headerlink\" title=\"1.1 NSCoding\"></a>1.1 NSCoding</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">encode</span>(<span class=\"params\">with</span> <span class=\"params\">aCoder</span>: <span class=\"type\">NSCoder</span>)</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">required</span> <span class=\"keyword\">convenience</span> <span class=\"function\"><span class=\"keyword\">init?</span>(<span class=\"params\">coder</span> <span class=\"params\">aDecoder</span>: <span class=\"type\">NSCoder</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(title: <span class=\"string\">&quot;&quot;</span>, rating: <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Still best way of using in inherited classes</p>\n</li>\n<li><p>Be aware of using it with NSObject</p>\n</li>\n<li><p>Code redundancy</p>\n</li>\n<li><p>Doesn’t support structs and enums</p>\n</li>\n<li><p>Depends on Foundation</p>\n</li>\n</ul>\n<h3 id=\"1-2-Codable\"><a href=\"#1-2-Codable\" class=\"headerlink\" title=\"1.2 Codable\"></a>1.2 Codable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Response</span>: <span class=\"title\">Codable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultCount: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tracks: [<span class=\"type\">Track</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CodingKeys</span>: <span class=\"title\">String</span>, <span class=\"title\">CodingKey</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> resultCount</span><br><span class=\"line\">        <span class=\"keyword\">case</span> tracks <span class=\"operator\">=</span> <span class=\"string\">&quot;results&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Track</span>: <span class=\"title\">Codable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> title: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> artistName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> thumbnailPath: <span class=\"type\">String</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CodingKeys</span>: <span class=\"title\">String</span>, <span class=\"title\">CodingKey</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> title <span class=\"operator\">=</span> <span class=\"string\">&quot;trackName&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> artistName</span><br><span class=\"line\">        <span class=\"keyword\">case</span> thumbnailPath <span class=\"operator\">=</span> <span class=\"string\">&quot;artworkUrl100&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">encodeData</span>()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> trackObject <span class=\"operator\">=</span> <span class=\"type\">Response</span>(resultCount: <span class=\"number\">3</span>, tracks: [</span><br><span class=\"line\">        <span class=\"type\">Track</span>(title: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">              artistName: <span class=\"string\">&quot;heeloo&quot;</span>,</span><br><span class=\"line\">              thumbnailPath: <span class=\"string\">&quot;eed&quot;</span>),</span><br><span class=\"line\">        <span class=\"type\">Track</span>(title: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">              artistName: <span class=\"string\">&quot;heeloo&quot;</span>,</span><br><span class=\"line\">              thumbnailPath: <span class=\"string\">&quot;eed&quot;</span>),</span><br><span class=\"line\">        <span class=\"type\">Track</span>(title: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">              artistName: <span class=\"string\">&quot;heeloo&quot;</span>,</span><br><span class=\"line\">              thumbnailPath: <span class=\"string\">&quot;eed&quot;</span>)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    <span class=\"keyword\">let</span> encodeData <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">JSONEncoder</span>().encode(trackObject)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;EncodeData: <span class=\"subst\">\\(encodeData)</span>&quot;</span>)</span><br><span class=\"line\">    decodeData(decodeData: encodeData<span class=\"operator\">!</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">encodeData()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">decodeData</span>(<span class=\"params\">decodeData</span>: <span class=\"type\">Data</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//let resultString = String(data: decodeData, encoding: .utf8)</span></span><br><span class=\"line\">    <span class=\"comment\">//print(&quot;Data in String: \\(resultString)&quot;)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> decoder <span class=\"operator\">=</span> <span class=\"type\">JSONDecoder</span>()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response <span class=\"operator\">=</span> <span class=\"keyword\">try</span> decoder.decode(<span class=\"type\">Response</span>.<span class=\"keyword\">self</span>, from: decodeData)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(response)</span>&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(error.localizedDescription)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Complete-Guide-to-Codable-—-Encodable\"><a href=\"#2-Complete-Guide-to-Codable-—-Encodable\" class=\"headerlink\" title=\"2. Complete Guide to Codable — Encodable\"></a>2. <a href=\"https://medium.com/flawless-app-stories/complete-guide-to-codable-encodable-f15b408b8eaa\">Complete Guide to Codable — Encodable</a></h2><h3 id=\"2-1-设置-codingKey-策略\"><a href=\"#2-1-设置-codingKey-策略\" class=\"headerlink\" title=\"2.1 设置 codingKey 策略\"></a>2.1 设置 codingKey 策略</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PhotoFeed</span>: <span class=\"title\">Encodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> feedKey: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> feedUrl: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> feedDate: <span class=\"type\">Date</span>?</span><br><span class=\"line\">    <span class=\"keyword\">let</span> location: <span class=\"type\">Location</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Location</span>: <span class=\"title\">Encodable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> latitude: <span class=\"type\">Double</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> longitude: <span class=\"type\">Double</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CodingKeys</span>: <span class=\"title\">String</span>, <span class=\"title\">CodingKey</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> latitude <span class=\"operator\">=</span> <span class=\"string\">&quot;lat&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> longitude <span class=\"operator\">=</span> <span class=\"string\">&quot;long&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> photoFeed <span class=\"operator\">=</span> <span class=\"type\">PhotoFeed</span>(feedKey: <span class=\"string\">&quot;12345&quot;</span>, feedUrl: <span class=\"string\">&quot;https://dummy.url.com/thumbnails/16869828-e75babd8.jpg&quot;</span>, feedDate: <span class=\"type\">Date</span>(), location: <span class=\"type\">PhotoFeed</span>.<span class=\"type\">Location</span>(latitude: <span class=\"number\">73.7432861</span>, longitude: <span class=\"number\">18.6119477</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> encoder <span class=\"operator\">=</span> <span class=\"type\">JSONEncoder</span>()</span><br><span class=\"line\">encoder.keyEncodingStrategy <span class=\"operator\">=</span> .convertToSnakeCase</span><br><span class=\"line\">encoder.outputFormatting <span class=\"operator\">=</span> .prettyPrinted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> encoder.encode(photoFeed)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">String</span>(data: data, encoding: .utf8)<span class=\"operator\">!</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Output</span>:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;feed_date&quot;</span> : <span class=\"number\">610808974.47951901</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;feed_url&quot;</span> : <span class=\"string\">&quot;https:\\/\\/dummy.url.com\\/thumbnails\\/16869828-e75babd8.jpg&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;feed_key&quot;</span> : <span class=\"string\">&quot;12345&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;location&quot;</span> : &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;lat&quot;</span> : <span class=\"number\">73.743286100000006</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;long&quot;</span> : <span class=\"number\">18.611947700000002</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-自定义-codingKey-策略\"><a href=\"#2-2-自定义-codingKey-策略\" class=\"headerlink\" title=\"2.2 自定义 codingKey 策略\"></a>2.2 自定义 codingKey 策略</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PhotoFeed</span>: <span class=\"title\">Encodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> feedKey: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> feedUrl: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> feedDate: <span class=\"type\">Date</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MARK:- PhotoCodingKeys</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PhotoCodingKeys</span>: <span class=\"title\">CodingKey</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> stringValue: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">init?</span>(<span class=\"params\">stringValue</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.stringValue <span class=\"operator\">=</span> stringValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> intValue: <span class=\"type\">Int</span>? &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">init?</span>(<span class=\"params\">intValue</span>: <span class=\"type\">Int</span>)</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> photoFeed <span class=\"operator\">=</span> <span class=\"type\">PhotoFeed</span>(feedKey: <span class=\"string\">&quot;12345&quot;</span>, feedUrl: <span class=\"string\">&quot;https://dummy.url.com/thumbnails/16869828-e75babd8.jpg&quot;</span>, feedDate: <span class=\"type\">Date</span>())</span><br><span class=\"line\"><span class=\"keyword\">let</span> encoder <span class=\"operator\">=</span> <span class=\"type\">JSONEncoder</span>()</span><br><span class=\"line\">encoder.keyEncodingStrategy <span class=\"operator\">=</span> .custom(&#123; (keys) -&gt; <span class=\"type\">CodingKey</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> keyString <span class=\"operator\">=</span> keys.last<span class=\"operator\">!</span>.stringValue</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stringValue <span class=\"operator\">=</span>  <span class=\"string\">&quot;photo_&quot;</span> <span class=\"operator\">+</span> keyString</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">PhotoCodingKeys</span>(stringValue: stringValue)<span class=\"operator\">!</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">encoder.outputFormatting <span class=\"operator\">=</span> .prettyPrinted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> encoder.encode(photoFeed)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">String</span>(data: data, encoding: .utf8)<span class=\"operator\">!</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//OUTPUT</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;photo_feedUrl&quot;</span> : <span class=\"string\">&quot;https:\\/\\/dummy.url.com\\/thumbnails\\/16869828-e75babd8.jpg&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;photo_feedDate&quot;</span> : <span class=\"number\">610810993.52611899</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;photo_feedKey&quot;</span> : <span class=\"string\">&quot;12345&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Encoding-Custom-Types-With-Encodable-In-Swift-4\"><a href=\"#3-Encoding-Custom-Types-With-Encodable-In-Swift-4\" class=\"headerlink\" title=\"3. Encoding Custom Types With Encodable In Swift 4\"></a>3. <a href=\"https://medium.com/@pxpgraphics/encoding-custom-types-with-encodable-in-swift-4-947721e4d5dc\">Encoding Custom Types With Encodable In Swift 4</a></h2><h3 id=\"3-1-Encodable\"><a href=\"#3-1-Encodable\" class=\"headerlink\" title=\"3.1 Encodable\"></a>3.1 Encodable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">FavoritedMedia</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> type: <span class=\"type\">MediaType</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isFavorited: <span class=\"type\">Bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">FavoritedMedia</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">MediaType</span>: <span class=\"title\">String</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> movie</span><br><span class=\"line\">        <span class=\"keyword\">case</span> tv</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">FavoritedMedia</span>: <span class=\"title\">Encodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">encode</span>(<span class=\"params\">to</span> <span class=\"params\">encoder</span>: <span class=\"type\">Encoder</span>)</span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> container <span class=\"operator\">=</span> encoder.container(keyedBy: <span class=\"type\">CodingKeys</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> container.encode(id, forKey: .id)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> container.encode(type.rawValue, forKey: .type)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> container.encode(isFavorited, forKey: .isFavorited)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-Decodable\"><a href=\"#3-2-Decodable\" class=\"headerlink\" title=\"3.2 Decodable\"></a>3.2 Decodable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Movie</span>: <span class=\"title\">Decodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Int, String, Date, Double all conform to Codable.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> id: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> title: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tagline: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> releaseDate: <span class=\"type\">Date</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> voteAverage: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> voteCount: <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"comment\">// Some JSON keys should be renamed to follow the API Design Guidelines.</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CodingKeys</span>: <span class=\"title\">String</span>, <span class=\"title\">CodingKey</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> id</span><br><span class=\"line\">        <span class=\"keyword\">case</span> title       <span class=\"operator\">=</span> <span class=\"string\">&quot;original_title&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> tagline</span><br><span class=\"line\">        <span class=\"keyword\">case</span> releaseDate <span class=\"operator\">=</span> <span class=\"string\">&quot;release_date&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> voteAverage <span class=\"operator\">=</span> <span class=\"string\">&quot;vote_average&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> voteCount   <span class=\"operator\">=</span> <span class=\"string\">&quot;vote_count&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Movie</span>: <span class=\"title\">Decodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">from</span> <span class=\"params\">decoder</span>: <span class=\"type\">Decoder</span>)</span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> values <span class=\"operator\">=</span> <span class=\"keyword\">try</span> decoder.container(keyedBy: <span class=\"type\">CodingKeys</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">       id <span class=\"operator\">=</span> <span class=\"keyword\">try</span> values.decode(<span class=\"type\">Int</span>.<span class=\"keyword\">self</span>, forKey: .id)</span><br><span class=\"line\">       title <span class=\"operator\">=</span> <span class=\"keyword\">try</span> values.decode(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>, forKey: .title)</span><br><span class=\"line\">       tagline <span class=\"operator\">=</span> <span class=\"keyword\">try</span> values.decode(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>, forKey: .tagline)</span><br><span class=\"line\"><span class=\"comment\">// We decode the value to String, then transform into the desired Date type.</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> releaseDateString <span class=\"operator\">=</span> <span class=\"keyword\">try</span> values.decode(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>, forKey: .releaseDate)</span><br><span class=\"line\">       releaseDate <span class=\"operator\">=</span> <span class=\"type\">DateFormatter</span>.date(from: releaseDateString)</span><br><span class=\"line\">        voteAverage <span class=\"operator\">=</span> <span class=\"keyword\">try</span> values.decode(<span class=\"type\">Double</span>.<span class=\"keyword\">self</span>, forKey: .voteAverage)</span><br><span class=\"line\">        voteCount <span class=\"operator\">=</span> <span class=\"keyword\">try</span> values.decode(<span class=\"type\">Int</span>.<span class=\"keyword\">self</span>, forKey: .voteCount)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-ios-使用Codable解析嵌套的无键JSON\"><a href=\"#4-ios-使用Codable解析嵌套的无键JSON\" class=\"headerlink\" title=\"4. ios - 使用Codable解析嵌套的无键JSON\"></a>4. <a href=\"https://www.coder.work/article/4413354\">ios - 使用Codable解析嵌套的无键JSON</a></h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> json <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">          &quot;contents&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;data&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">              &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;type&quot;: &quot;type1&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;id&quot;: &quot;6a406cdd7a9cace5&quot;</span></span><br><span class=\"line\"><span class=\"string\">              &#125;,</span></span><br><span class=\"line\"><span class=\"string\">              &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;type&quot;: &quot;type2&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;dbl&quot;: 1.01</span></span><br><span class=\"line\"><span class=\"string\">              &#125;,</span></span><br><span class=\"line\"><span class=\"string\">              &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;type&quot;: &quot;type3&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;int&quot;: 5</span></span><br><span class=\"line\"><span class=\"string\">              &#125;</span></span><br><span class=\"line\"><span class=\"string\">            ]</span></span><br><span class=\"line\"><span class=\"string\">          &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Item1</span>: <span class=\"title\">Codable</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> type: <span class=\"type\">String</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> id: <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Item2</span>: <span class=\"title\">Codable</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> type: <span class=\"type\">String</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> dbl: <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Item3</span>: <span class=\"title\">Codable</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> type: <span class=\"type\">String</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> int: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Interim</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> type1 (<span class=\"type\">Item1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> type2 (<span class=\"type\">Item2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> type3 (<span class=\"type\">Item3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> unknown  <span class=\"comment\">//to handle unexpected json structures</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Interim</span>: <span class=\"title\">Decodable</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">InterimKeys</span>: <span class=\"title\">String</span>, <span class=\"title\">CodingKey</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> type</span><br><span class=\"line\">      <span class=\"keyword\">case</span> id</span><br><span class=\"line\">      <span class=\"keyword\">case</span> dbl</span><br><span class=\"line\">      <span class=\"keyword\">case</span> int</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">from</span> <span class=\"params\">decoder</span>: <span class=\"type\">Decoder</span>)</span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> container <span class=\"operator\">=</span> <span class=\"keyword\">try</span> decoder.container(keyedBy: <span class=\"type\">InterimKeys</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> type <span class=\"operator\">=</span> <span class=\"keyword\">try</span> container.decode(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>, forKey: .type)</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> type &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&quot;type1&quot;</span>:</span><br><span class=\"line\">         <span class=\"keyword\">let</span> id <span class=\"operator\">=</span> <span class=\"keyword\">try</span> container.decode(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>, forKey: .id)</span><br><span class=\"line\">         <span class=\"keyword\">let</span> item <span class=\"operator\">=</span> <span class=\"type\">Item1</span>(type: type, id: id)</span><br><span class=\"line\">         <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .type1(item)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&quot;type2&quot;</span>:</span><br><span class=\"line\">         <span class=\"keyword\">let</span> dbl <span class=\"operator\">=</span> <span class=\"keyword\">try</span> container.decode(<span class=\"type\">Double</span>.<span class=\"keyword\">self</span>, forKey: .dbl)</span><br><span class=\"line\">         <span class=\"keyword\">let</span> item <span class=\"operator\">=</span> <span class=\"type\">Item2</span>(type: type, dbl: dbl)</span><br><span class=\"line\">         <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .type2(item)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&quot;type3&quot;</span>:</span><br><span class=\"line\">         <span class=\"keyword\">let</span> int <span class=\"operator\">=</span> <span class=\"keyword\">try</span> container.decode(<span class=\"type\">Int</span>.<span class=\"keyword\">self</span>, forKey: .int)</span><br><span class=\"line\">         <span class=\"keyword\">let</span> item <span class=\"operator\">=</span> <span class=\"type\">Item3</span>(type: type, int: int)</span><br><span class=\"line\">         <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .type3(item)</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .unknown</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Codable-Decodable-Encodable\"><a href=\"#1-Codable-Decodable-Encodable\" class=\"headerlink\" title=\"1. Codable = Decodable + Encodable\"></a>1. <a href=\"https://medium.com/doyeona/codable-decodable-encodable-feat-json-5643dc3d7766\">Codable = Decodable + Encodable</a></h2><h3 id=\"1-1-NSCoding\"><a href=\"#1-1-NSCoding\" class=\"headerlink\" title=\"1.1 NSCoding\"></a>1.1 NSCoding</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">encode</span>(<span class=\"params\">with</span> <span class=\"params\">aCoder</span>: <span class=\"type\">NSCoder</span>)</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">required</span> <span class=\"keyword\">convenience</span> <span class=\"function\"><span class=\"keyword\">init?</span>(<span class=\"params\">coder</span> <span class=\"params\">aDecoder</span>: <span class=\"type\">NSCoder</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(title: <span class=\"string\">&quot;&quot;</span>, rating: <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Still best way of using in inherited classes</p>\n</li>\n<li><p>Be aware of using it with NSObject</p>\n</li>\n<li><p>Code redundancy</p>\n</li>\n<li><p>Doesn’t support structs and enums</p>\n</li>\n<li><p>Depends on Foundation</p>\n</li>\n</ul>\n<h3 id=\"1-2-Codable\"><a href=\"#1-2-Codable\" class=\"headerlink\" title=\"1.2 Codable\"></a>1.2 Codable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UIKit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Response</span>: <span class=\"title\">Codable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultCount: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tracks: [<span class=\"type\">Track</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CodingKeys</span>: <span class=\"title\">String</span>, <span class=\"title\">CodingKey</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> resultCount</span><br><span class=\"line\">        <span class=\"keyword\">case</span> tracks <span class=\"operator\">=</span> <span class=\"string\">&quot;results&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Track</span>: <span class=\"title\">Codable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> title: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> artistName: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> thumbnailPath: <span class=\"type\">String</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CodingKeys</span>: <span class=\"title\">String</span>, <span class=\"title\">CodingKey</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> title <span class=\"operator\">=</span> <span class=\"string\">&quot;trackName&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> artistName</span><br><span class=\"line\">        <span class=\"keyword\">case</span> thumbnailPath <span class=\"operator\">=</span> <span class=\"string\">&quot;artworkUrl100&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">encodeData</span>()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> trackObject <span class=\"operator\">=</span> <span class=\"type\">Response</span>(resultCount: <span class=\"number\">3</span>, tracks: [</span><br><span class=\"line\">        <span class=\"type\">Track</span>(title: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">              artistName: <span class=\"string\">&quot;heeloo&quot;</span>,</span><br><span class=\"line\">              thumbnailPath: <span class=\"string\">&quot;eed&quot;</span>),</span><br><span class=\"line\">        <span class=\"type\">Track</span>(title: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">              artistName: <span class=\"string\">&quot;heeloo&quot;</span>,</span><br><span class=\"line\">              thumbnailPath: <span class=\"string\">&quot;eed&quot;</span>),</span><br><span class=\"line\">        <span class=\"type\">Track</span>(title: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">              artistName: <span class=\"string\">&quot;heeloo&quot;</span>,</span><br><span class=\"line\">              thumbnailPath: <span class=\"string\">&quot;eed&quot;</span>)</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    <span class=\"keyword\">let</span> encodeData <span class=\"operator\">=</span> <span class=\"keyword\">try?</span> <span class=\"type\">JSONEncoder</span>().encode(trackObject)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;EncodeData: <span class=\"subst\">\\(encodeData)</span>&quot;</span>)</span><br><span class=\"line\">    decodeData(decodeData: encodeData<span class=\"operator\">!</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">encodeData()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">decodeData</span>(<span class=\"params\">decodeData</span>: <span class=\"type\">Data</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//let resultString = String(data: decodeData, encoding: .utf8)</span></span><br><span class=\"line\">    <span class=\"comment\">//print(&quot;Data in String: \\(resultString)&quot;)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> decoder <span class=\"operator\">=</span> <span class=\"type\">JSONDecoder</span>()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response <span class=\"operator\">=</span> <span class=\"keyword\">try</span> decoder.decode(<span class=\"type\">Response</span>.<span class=\"keyword\">self</span>, from: decodeData)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;<span class=\"subst\">\\(response)</span>&quot;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> <span class=\"keyword\">let</span> error &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(error.localizedDescription)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Complete-Guide-to-Codable-—-Encodable\"><a href=\"#2-Complete-Guide-to-Codable-—-Encodable\" class=\"headerlink\" title=\"2. Complete Guide to Codable — Encodable\"></a>2. <a href=\"https://medium.com/flawless-app-stories/complete-guide-to-codable-encodable-f15b408b8eaa\">Complete Guide to Codable — Encodable</a></h2><h3 id=\"2-1-设置-codingKey-策略\"><a href=\"#2-1-设置-codingKey-策略\" class=\"headerlink\" title=\"2.1 设置 codingKey 策略\"></a>2.1 设置 codingKey 策略</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PhotoFeed</span>: <span class=\"title\">Encodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> feedKey: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> feedUrl: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> feedDate: <span class=\"type\">Date</span>?</span><br><span class=\"line\">    <span class=\"keyword\">let</span> location: <span class=\"type\">Location</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Location</span>: <span class=\"title\">Encodable</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> latitude: <span class=\"type\">Double</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> longitude: <span class=\"type\">Double</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CodingKeys</span>: <span class=\"title\">String</span>, <span class=\"title\">CodingKey</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> latitude <span class=\"operator\">=</span> <span class=\"string\">&quot;lat&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> longitude <span class=\"operator\">=</span> <span class=\"string\">&quot;long&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> photoFeed <span class=\"operator\">=</span> <span class=\"type\">PhotoFeed</span>(feedKey: <span class=\"string\">&quot;12345&quot;</span>, feedUrl: <span class=\"string\">&quot;https://dummy.url.com/thumbnails/16869828-e75babd8.jpg&quot;</span>, feedDate: <span class=\"type\">Date</span>(), location: <span class=\"type\">PhotoFeed</span>.<span class=\"type\">Location</span>(latitude: <span class=\"number\">73.7432861</span>, longitude: <span class=\"number\">18.6119477</span>))</span><br><span class=\"line\"><span class=\"keyword\">let</span> encoder <span class=\"operator\">=</span> <span class=\"type\">JSONEncoder</span>()</span><br><span class=\"line\">encoder.keyEncodingStrategy <span class=\"operator\">=</span> .convertToSnakeCase</span><br><span class=\"line\">encoder.outputFormatting <span class=\"operator\">=</span> .prettyPrinted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> encoder.encode(photoFeed)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">String</span>(data: data, encoding: .utf8)<span class=\"operator\">!</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Output</span>:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;feed_date&quot;</span> : <span class=\"number\">610808974.47951901</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;feed_url&quot;</span> : <span class=\"string\">&quot;https:\\/\\/dummy.url.com\\/thumbnails\\/16869828-e75babd8.jpg&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;feed_key&quot;</span> : <span class=\"string\">&quot;12345&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;location&quot;</span> : &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;lat&quot;</span> : <span class=\"number\">73.743286100000006</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;long&quot;</span> : <span class=\"number\">18.611947700000002</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-自定义-codingKey-策略\"><a href=\"#2-2-自定义-codingKey-策略\" class=\"headerlink\" title=\"2.2 自定义 codingKey 策略\"></a>2.2 自定义 codingKey 策略</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PhotoFeed</span>: <span class=\"title\">Encodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> feedKey: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> feedUrl: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> feedDate: <span class=\"type\">Date</span>?</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MARK:- PhotoCodingKeys</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PhotoCodingKeys</span>: <span class=\"title\">CodingKey</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> stringValue: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">init?</span>(<span class=\"params\">stringValue</span>: <span class=\"type\">String</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.stringValue <span class=\"operator\">=</span> stringValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> intValue: <span class=\"type\">Int</span>? &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">init?</span>(<span class=\"params\">intValue</span>: <span class=\"type\">Int</span>)</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> photoFeed <span class=\"operator\">=</span> <span class=\"type\">PhotoFeed</span>(feedKey: <span class=\"string\">&quot;12345&quot;</span>, feedUrl: <span class=\"string\">&quot;https://dummy.url.com/thumbnails/16869828-e75babd8.jpg&quot;</span>, feedDate: <span class=\"type\">Date</span>())</span><br><span class=\"line\"><span class=\"keyword\">let</span> encoder <span class=\"operator\">=</span> <span class=\"type\">JSONEncoder</span>()</span><br><span class=\"line\">encoder.keyEncodingStrategy <span class=\"operator\">=</span> .custom(&#123; (keys) -&gt; <span class=\"type\">CodingKey</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> keyString <span class=\"operator\">=</span> keys.last<span class=\"operator\">!</span>.stringValue</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stringValue <span class=\"operator\">=</span>  <span class=\"string\">&quot;photo_&quot;</span> <span class=\"operator\">+</span> keyString</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">PhotoCodingKeys</span>(stringValue: stringValue)<span class=\"operator\">!</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">encoder.outputFormatting <span class=\"operator\">=</span> .prettyPrinted</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> data <span class=\"operator\">=</span> <span class=\"keyword\">try!</span> encoder.encode(photoFeed)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">String</span>(data: data, encoding: .utf8)<span class=\"operator\">!</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//OUTPUT</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;photo_feedUrl&quot;</span> : <span class=\"string\">&quot;https:\\/\\/dummy.url.com\\/thumbnails\\/16869828-e75babd8.jpg&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;photo_feedDate&quot;</span> : <span class=\"number\">610810993.52611899</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;photo_feedKey&quot;</span> : <span class=\"string\">&quot;12345&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Encoding-Custom-Types-With-Encodable-In-Swift-4\"><a href=\"#3-Encoding-Custom-Types-With-Encodable-In-Swift-4\" class=\"headerlink\" title=\"3. Encoding Custom Types With Encodable In Swift 4\"></a>3. <a href=\"https://medium.com/@pxpgraphics/encoding-custom-types-with-encodable-in-swift-4-947721e4d5dc\">Encoding Custom Types With Encodable In Swift 4</a></h2><h3 id=\"3-1-Encodable\"><a href=\"#3-1-Encodable\" class=\"headerlink\" title=\"3.1 Encodable\"></a>3.1 Encodable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">FavoritedMedia</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> type: <span class=\"type\">MediaType</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isFavorited: <span class=\"type\">Bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">FavoritedMedia</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">MediaType</span>: <span class=\"title\">String</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> movie</span><br><span class=\"line\">        <span class=\"keyword\">case</span> tv</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">FavoritedMedia</span>: <span class=\"title\">Encodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">encode</span>(<span class=\"params\">to</span> <span class=\"params\">encoder</span>: <span class=\"type\">Encoder</span>)</span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> container <span class=\"operator\">=</span> encoder.container(keyedBy: <span class=\"type\">CodingKeys</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> container.encode(id, forKey: .id)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> container.encode(type.rawValue, forKey: .type)</span><br><span class=\"line\">        <span class=\"keyword\">try</span> container.encode(isFavorited, forKey: .isFavorited)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-Decodable\"><a href=\"#3-2-Decodable\" class=\"headerlink\" title=\"3.2 Decodable\"></a>3.2 Decodable</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Movie</span>: <span class=\"title\">Decodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Int, String, Date, Double all conform to Codable.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> id: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> title: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tagline: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> releaseDate: <span class=\"type\">Date</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> voteAverage: <span class=\"type\">Double</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> voteCount: <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"comment\">// Some JSON keys should be renamed to follow the API Design Guidelines.</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CodingKeys</span>: <span class=\"title\">String</span>, <span class=\"title\">CodingKey</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> id</span><br><span class=\"line\">        <span class=\"keyword\">case</span> title       <span class=\"operator\">=</span> <span class=\"string\">&quot;original_title&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> tagline</span><br><span class=\"line\">        <span class=\"keyword\">case</span> releaseDate <span class=\"operator\">=</span> <span class=\"string\">&quot;release_date&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> voteAverage <span class=\"operator\">=</span> <span class=\"string\">&quot;vote_average&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> voteCount   <span class=\"operator\">=</span> <span class=\"string\">&quot;vote_count&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Movie</span>: <span class=\"title\">Decodable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">from</span> <span class=\"params\">decoder</span>: <span class=\"type\">Decoder</span>)</span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> values <span class=\"operator\">=</span> <span class=\"keyword\">try</span> decoder.container(keyedBy: <span class=\"type\">CodingKeys</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">       id <span class=\"operator\">=</span> <span class=\"keyword\">try</span> values.decode(<span class=\"type\">Int</span>.<span class=\"keyword\">self</span>, forKey: .id)</span><br><span class=\"line\">       title <span class=\"operator\">=</span> <span class=\"keyword\">try</span> values.decode(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>, forKey: .title)</span><br><span class=\"line\">       tagline <span class=\"operator\">=</span> <span class=\"keyword\">try</span> values.decode(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>, forKey: .tagline)</span><br><span class=\"line\"><span class=\"comment\">// We decode the value to String, then transform into the desired Date type.</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> releaseDateString <span class=\"operator\">=</span> <span class=\"keyword\">try</span> values.decode(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>, forKey: .releaseDate)</span><br><span class=\"line\">       releaseDate <span class=\"operator\">=</span> <span class=\"type\">DateFormatter</span>.date(from: releaseDateString)</span><br><span class=\"line\">        voteAverage <span class=\"operator\">=</span> <span class=\"keyword\">try</span> values.decode(<span class=\"type\">Double</span>.<span class=\"keyword\">self</span>, forKey: .voteAverage)</span><br><span class=\"line\">        voteCount <span class=\"operator\">=</span> <span class=\"keyword\">try</span> values.decode(<span class=\"type\">Int</span>.<span class=\"keyword\">self</span>, forKey: .voteCount)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-ios-使用Codable解析嵌套的无键JSON\"><a href=\"#4-ios-使用Codable解析嵌套的无键JSON\" class=\"headerlink\" title=\"4. ios - 使用Codable解析嵌套的无键JSON\"></a>4. <a href=\"https://www.coder.work/article/4413354\">ios - 使用Codable解析嵌套的无键JSON</a></h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> json <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#123;</span></span><br><span class=\"line\"><span class=\"string\">          &quot;contents&quot;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">            &quot;data&quot;: [</span></span><br><span class=\"line\"><span class=\"string\">              &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;type&quot;: &quot;type1&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;id&quot;: &quot;6a406cdd7a9cace5&quot;</span></span><br><span class=\"line\"><span class=\"string\">              &#125;,</span></span><br><span class=\"line\"><span class=\"string\">              &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;type&quot;: &quot;type2&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;dbl&quot;: 1.01</span></span><br><span class=\"line\"><span class=\"string\">              &#125;,</span></span><br><span class=\"line\"><span class=\"string\">              &#123;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;type&quot;: &quot;type3&quot;,</span></span><br><span class=\"line\"><span class=\"string\">                &quot;int&quot;: 5</span></span><br><span class=\"line\"><span class=\"string\">              &#125;</span></span><br><span class=\"line\"><span class=\"string\">            ]</span></span><br><span class=\"line\"><span class=\"string\">          &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Item1</span>: <span class=\"title\">Codable</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> type: <span class=\"type\">String</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> id: <span class=\"type\">String</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Item2</span>: <span class=\"title\">Codable</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> type: <span class=\"type\">String</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> dbl: <span class=\"type\">Double</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Item3</span>: <span class=\"title\">Codable</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> type: <span class=\"type\">String</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> int: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Interim</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> type1 (<span class=\"type\">Item1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> type2 (<span class=\"type\">Item2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> type3 (<span class=\"type\">Item3</span>)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> unknown  <span class=\"comment\">//to handle unexpected json structures</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Interim</span>: <span class=\"title\">Decodable</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">InterimKeys</span>: <span class=\"title\">String</span>, <span class=\"title\">CodingKey</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> type</span><br><span class=\"line\">      <span class=\"keyword\">case</span> id</span><br><span class=\"line\">      <span class=\"keyword\">case</span> dbl</span><br><span class=\"line\">      <span class=\"keyword\">case</span> int</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">init</span>(<span class=\"params\">from</span> <span class=\"params\">decoder</span>: <span class=\"type\">Decoder</span>)</span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> container <span class=\"operator\">=</span> <span class=\"keyword\">try</span> decoder.container(keyedBy: <span class=\"type\">InterimKeys</span>.<span class=\"keyword\">self</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> type <span class=\"operator\">=</span> <span class=\"keyword\">try</span> container.decode(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>, forKey: .type)</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> type &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&quot;type1&quot;</span>:</span><br><span class=\"line\">         <span class=\"keyword\">let</span> id <span class=\"operator\">=</span> <span class=\"keyword\">try</span> container.decode(<span class=\"type\">String</span>.<span class=\"keyword\">self</span>, forKey: .id)</span><br><span class=\"line\">         <span class=\"keyword\">let</span> item <span class=\"operator\">=</span> <span class=\"type\">Item1</span>(type: type, id: id)</span><br><span class=\"line\">         <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .type1(item)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&quot;type2&quot;</span>:</span><br><span class=\"line\">         <span class=\"keyword\">let</span> dbl <span class=\"operator\">=</span> <span class=\"keyword\">try</span> container.decode(<span class=\"type\">Double</span>.<span class=\"keyword\">self</span>, forKey: .dbl)</span><br><span class=\"line\">         <span class=\"keyword\">let</span> item <span class=\"operator\">=</span> <span class=\"type\">Item2</span>(type: type, dbl: dbl)</span><br><span class=\"line\">         <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .type2(item)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&quot;type3&quot;</span>:</span><br><span class=\"line\">         <span class=\"keyword\">let</span> int <span class=\"operator\">=</span> <span class=\"keyword\">try</span> container.decode(<span class=\"type\">Int</span>.<span class=\"keyword\">self</span>, forKey: .int)</span><br><span class=\"line\">         <span class=\"keyword\">let</span> item <span class=\"operator\">=</span> <span class=\"type\">Item3</span>(type: type, int: int)</span><br><span class=\"line\">         <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .type3(item)</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"keyword\">self</span> <span class=\"operator\">=</span> .unknown</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"iOS之异常处理","abbrlink":"3c4e9a0e","date":"2021-04-20T13:36:02.000Z","_content":"\n1、异常日志收集\n\n* Xcode、App Store\n* 第三方\n* 自己收集\n        跟踪异常产生的时机并捕捉、处理：上报之类\n        [iOS Swift Crash的捕获](http://www.cocoachina.com/ios/20170816/20270.html)\n        [漫谈iOS Crash收集框架](https://nianxi.net/ios/ios-crash-reporter.html)\n        [dSYMTools](https://blog.csdn.net/wiseuc_jianghai/article/details/78031638)\n        [DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)[DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)\n\n2、异常日志分析\n\n一、.dSYM\n\n.dSYM(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的DWARF（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：\n\n```shell\n.xcarchive\n    --dSYMs\n      |--Your.app.dSYM\n        |--Contents\n          |--Resources\n            |--DWARF\n```\n\n二、确定符号表和崩溃日志的一致性\n\n有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。\n\n1、从崩溃日志中获取UUID\n\n崩溃日志比较靠下的位置有个Binary Images模块，其第一行内容如下：\n\n```log\nBinary Images:\n0x1f000 - 0x906fff sd_doctor_ios armv7  <eef4e325f9d6393f93e87b7ee327a5ea> /var/containers/Bundle/Application/8BEEC659-8263-4092-A2DC-EF48060BB142/sd_doctor_ios.app/sd_doctor_ios\n```\n\n从中可以看到关于你应用的若干信息：\n\n代码段的起终地址为：0x1f000 - 0x906fff\n\n运行你应用的CPU指令集为：armv7\n\n应用的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（不区分大小写）\n\n2、从符号表中获取UUID\n\n执行以下命令从符号表中提取UUID：\n\n```shell\ndwarfdump --uuid Your.app.dSYM\ndwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your\n```\n\n由此得到armv7指令集的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。\n\n三、计算崩溃符号表地址\n以下面的崩溃堆栈为例：\n\n```shell\n Thread 0:\n    0   libobjc.A.dylib                   0x33f10f60 0x33efe000 + 77664\n    1   Foundation                        0x273526ac 0x2734a000 + 34476\n    2   Foundation                        0x27355c3e 0x2734a000 + 48190\n    3   UIKit                             0x29ef9d1c 0x29bbc000 + 3398940\n    4   UIKit                             0x29ef9c9a 0x29bbc000 + 3398810\n    5   UIKit                             0x29ef954c 0x29bbc000 + 3396940\n    6   UIKit                             0x29c3a16a 0x29bbc000 + 516458\n    7   UIKit                             0x29e4b8e6 0x29bbc000 + 2685158\n    8   UIKit                             0x29c3a128 0x29bbc000 + 516392\n    9   Your                              0x000f0846 0xa2000 + 321606\n    10  UIKit                             0x29e90fb2 0x29bbc000 + 2969522\n    11  UIKit                             0x29e91076 0x29bbc000 + 2969718\n    12  UIKit                             0x29e867cc 0x29bbc000 + 2926540\n    13  UIKit                             0x29c9e8ea 0x29bbc000 + 927978\n    14  UIKit                             0x29bc8a6a 0x29bbc000 + 51818\n    15  QuartzCore                        0x295f0a08 0x295e4000 + 51720\n    16  QuartzCore                        0x295ec3e0 0x295e4000 + 33760\n    17  QuartzCore                        0x295ec268 0x295e4000 + 33384\n    18  QuartzCore                        0x295ebc4c 0x295e4000 + 31820\n    19  QuartzCore                        0x295eba50 0x295e4000 + 31312\n    20  QuartzCore                        0x295e5928 0x295e4000 + 6440\n    21  CoreFoundation                    0x266d0d92 0x26604000 + 839058\n    22  CoreFoundation                    0x266ce44e 0x26604000 + 828494\n    23  CoreFoundation                    0x266ce856 0x26604000 + 829526\n    24  CoreFoundation                    0x2661c3bc 0x26604000 + 99260\n    25  CoreFoundation                    0x2661c1ce 0x26604000 + 98766\n    26  GraphicsServices                  0x2da1a0a4 0x2da11000 + 37028\n    27  UIKit                             0x29c2a7ac 0x29bbc000 + 452524\n    28  Your                              0x0024643a 0xa2000 + 1721402\n    29  libdyld.dylib                     0x34484aac 0x34483000 + 6828\n```\n\n1、 符号表堆栈地址计算方式\n\n要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址0x000f0846，该进程的运行时起始地址是0xa2000，崩溃处距离进程起始地址的偏移量为十进制的321606(对应十六进制为0x4E846)。三者对应关系：\n\n```shell\n0x000f0846 = 0xa2000 + 0x4E846\n```\n\n对应的公式为：\n\n```shell\n运行时堆栈地址 = 运行时起始地址 + 偏移量\n```\n\n崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：\n\n```shell\n符号表堆栈地址 = 符号表起始地址 + 偏移量\n```\n\n2、获取符号表中的TEXT段起始地址\n\n符号表中TEXT段的起始地址可以通过以下命令获得：\n\n```shell\n$otool -l Your.app.dSYM/Contents/Resources/DWARF/Your\n```\n\n运行结果中的片段如下：\n\n```shell\nLoad command 3\n      cmd LC_SEGMENT\n  cmdsize 736\n  segname __TEXT\n    vmaddr 0x00004000\n    vmsize 0x00700000\n  fileoff 0\n  filesize 0\n  maxprot 0x00000005\n  initprot 0x00000005\n    nsects 10\n    flags 0x0\n```\n\n其中的vmaddr 0x00004000字段即为TEXT段的起始地址。\n\n3、计算符号表地址\n\n由公式：\n\n```shell\n符号表堆栈地址 = 符号表起始地址 + 偏移量\n```\n\n可得：\n\n```shell\n0x52846 = 0x4E846 + 0x4000\n```\n\n即符号表中的崩溃地址为0x52846，接下来就可以根据这个地址解析出崩溃位置了。\n\n四、崩溃信息还原\n\n有了符号表的崩溃地址，有以下几种方式解析崩溃信息：\n\n1、dwarfdump\n\n命令如下：\n\n```shell\n$dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep 'Line table'\n```\n\n需要注意的是：\n\n```shell\n这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集\n```\n\n比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。\n\n—lookup后面跟的一定是经过准确计算的符号表中的崩溃地址\n\n使用dwarfdump解析的结果较杂乱，因此使用grep命令抓取其中关键点展示出来\n\n运行结果如下：\n\n```shell\nLine table dir : '/data/.../Src/OBDConnectSetting/Controller'\nLine table file: 'OBDFirstConnectViewController.m' line 882, column 5 with start address 0x000000000052768\n```\n\n其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。\n\n2、atos\n\natos是另一种更加简洁的崩溃日志解析方法，使用方式如下：\n\n```shell\n$atos -o LuBao -arch armv7 0x52846\n```\n\n其执行结果如下：\n\n```objective-c\n-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n```\n\n相对dwarfdump命令的解析结果，更加简洁直观的指出了崩溃发生的位置。\n\n3、无需符号表崩溃地址的解析方式\n\n实际上，atos还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：\n\n```shell\n$atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846\n```\n\n其中-l选项指定了二进制文件在运行时的起始地址0xa2000（获取方式见Binary Images相关内容）,后面跟的是崩溃发生的运行时地址0x000f0846，解析结果和使用计算得到的符号表中崩溃地址一致：\n\n```objectvie-c\n-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n```\n\n五、参考文档\n\n* [How to Match a Crash Report to a Build](https://developer.apple.com/library/mac/qa/qa1765/_index.html)\n\n* [CrashReporter](https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html)\n\n* [Understanding and Analyzing iOS Application Crash Reports](https://developer.apple.com/library/ios/technotes/tn2151/_index.html)\n\n* [atos and dwarfdump won’t symbolicate my address](http://stackoverflow.com/a/12464678/2293677)\n\n**原文参考：**[手动解析CrashLog](http://www.cocoachina.com/ios/20150803/12806.html)\n\n3、异常处理\n4、异常规避\n\n* 内存地址分配\n* 日志源文件\n* 异常产生\n\nLinux系统中，支持两类信号\n\n1.POSIX标准的规则信号(regular signal，编号1－31)\n\n2.实时信号(real-time signal，编号32－63)\n\n对于regular signal来说，无论发送多少次，在接收进程处理之前，重复的信号会被合并为一个（每一种regular signal对应于系统进程表项中软中断字段的一个比特，因此不同的信号可以同时存在，同一信号仅能表示有或无而不能表示重复的次数)；\n\n而real-time signal发送多少次，就会在接收进程的信号队列中出现多少次。\nLinux在i386上的31个规则信号(regular signal)\n\n```shell\nkill -l\n```\n\n| 编号 | 信号名称          | 缺省动作 | 说明                           |\n| ---- | ----------------- | -------- | ------------------------------ |\n| 1    | SIGHUP            | 终止     | 终止控制终端或进程             |\n| 2    | SIGINT            | 终止     | 键盘产生的中断(Ctrl-C)         |\n| 3    | SIGQUIT           | dump     | 键盘产生的退出                 |\n| 4    | SIGILL            | dump     | 非法指令                       |\n| 5    | SIGTRAP           | dump     | debug中断                      |\n| 6    | SIGABRT／SIGIOT   | dump     | 异常中止                       |\n| 7    | SIGBUS／SIGEMT    | dump     | 总线异常/EMT指令               |\n| 8    | SIGFPE            | dump     | 浮点运算溢出                   |\n| 9    | SIGKILL           | 终止     | 强制进程终止                   |\n| 10   | SIGUSR1           | 终止     | 用户信号,进程可自定义用途      |\n| 11   | SIGSEGV           | dump     | 非法内存地址引用               |\n| 12   | SIGUSR2           | 终止     | 用户信号，进程可自定义用途     |\n| 13   | SIGPIPE           | 终止     | 向某个没有读取的管道中写入数据 |\n| 14   | SIGALRM           | 终止     | 时钟中断(闹钟)                 |\n| 15   | SIGTERM           | 终止     | 进程终止                       |\n| 16   | SIGSTKFLT         | 终止     | 协处理器栈错误                 |\n| 17   | SIGCHLD           | 忽略     | 子进程退出或中断               |\n| 18   | SIGCONT           | 继续     | 如进程停止状态则开始运行       |\n| 19   | SIGSTOP           | 停止     | 停止进程运行                   |\n| 20   | SIGSTP            | 停止     | 键盘产生的停止                 |\n| 21   | SIGTTIN           | 停止     | 后台进程请求输入               |\n| 22   | SIGTTOU           | 停止     | 后台进程请求输出               |\n| 23   | SIGURG            | 忽略     | socket发生紧急情况             |\n| 24   | SIGXCPU           | dump     | CPU时间限制被打破              |\n| 25   | SIGXFSZ           | dump     | 文件大小限制被打破             |\n| 26   | SIGVTALRM         | 终止     | 虚拟定时时钟                   |\n| 27   | SIGPROF           | 终止     | profile timer clock            |\n| 28   | SIGWINCH          | 忽略     | 窗口尺寸调整                   |\n| 29   | SIGIO/SIGPOLL     | 终止     | I/O可用                        |\n| 30   | SIGPWR            | 终止     | 电源异常                       |\n| 31   | SIGSYS／SYSUNUSED | dump     | 系统调用异常                   |\n\n在不同系统中同一数值可能会代表不同的信号，因此，最好使用信号名而不是信号值。\n\n信号的数值越小，则优先级越高。当进程收到多个待处理信号时，总是先处理优先级别高的信号。\n\n* [iOS 崩溃 crash 大解析·参考 1](https://toutiao.io/posts/443hus/preview)\n* [iOS中的Crash探究·参考 2](https://www.bitnpc.com/2018/11/28/iOS%E7%9A%84Crash%E6%8E%A2%E7%A9%B6/)\n","source":"_posts/iOS/Performance/Exceptions/Excetions.md","raw":"---\ntitle: iOS之异常处理\nabbrlink: 3c4e9a0e\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n1、异常日志收集\n\n* Xcode、App Store\n* 第三方\n* 自己收集\n        跟踪异常产生的时机并捕捉、处理：上报之类\n        [iOS Swift Crash的捕获](http://www.cocoachina.com/ios/20170816/20270.html)\n        [漫谈iOS Crash收集框架](https://nianxi.net/ios/ios-crash-reporter.html)\n        [dSYMTools](https://blog.csdn.net/wiseuc_jianghai/article/details/78031638)\n        [DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)[DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)\n\n2、异常日志分析\n\n一、.dSYM\n\n.dSYM(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的DWARF（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：\n\n```shell\n.xcarchive\n    --dSYMs\n      |--Your.app.dSYM\n        |--Contents\n          |--Resources\n            |--DWARF\n```\n\n二、确定符号表和崩溃日志的一致性\n\n有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。\n\n1、从崩溃日志中获取UUID\n\n崩溃日志比较靠下的位置有个Binary Images模块，其第一行内容如下：\n\n```log\nBinary Images:\n0x1f000 - 0x906fff sd_doctor_ios armv7  <eef4e325f9d6393f93e87b7ee327a5ea> /var/containers/Bundle/Application/8BEEC659-8263-4092-A2DC-EF48060BB142/sd_doctor_ios.app/sd_doctor_ios\n```\n\n从中可以看到关于你应用的若干信息：\n\n代码段的起终地址为：0x1f000 - 0x906fff\n\n运行你应用的CPU指令集为：armv7\n\n应用的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（不区分大小写）\n\n2、从符号表中获取UUID\n\n执行以下命令从符号表中提取UUID：\n\n```shell\ndwarfdump --uuid Your.app.dSYM\ndwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your\n```\n\n由此得到armv7指令集的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。\n\n三、计算崩溃符号表地址\n以下面的崩溃堆栈为例：\n\n```shell\n Thread 0:\n    0   libobjc.A.dylib                   0x33f10f60 0x33efe000 + 77664\n    1   Foundation                        0x273526ac 0x2734a000 + 34476\n    2   Foundation                        0x27355c3e 0x2734a000 + 48190\n    3   UIKit                             0x29ef9d1c 0x29bbc000 + 3398940\n    4   UIKit                             0x29ef9c9a 0x29bbc000 + 3398810\n    5   UIKit                             0x29ef954c 0x29bbc000 + 3396940\n    6   UIKit                             0x29c3a16a 0x29bbc000 + 516458\n    7   UIKit                             0x29e4b8e6 0x29bbc000 + 2685158\n    8   UIKit                             0x29c3a128 0x29bbc000 + 516392\n    9   Your                              0x000f0846 0xa2000 + 321606\n    10  UIKit                             0x29e90fb2 0x29bbc000 + 2969522\n    11  UIKit                             0x29e91076 0x29bbc000 + 2969718\n    12  UIKit                             0x29e867cc 0x29bbc000 + 2926540\n    13  UIKit                             0x29c9e8ea 0x29bbc000 + 927978\n    14  UIKit                             0x29bc8a6a 0x29bbc000 + 51818\n    15  QuartzCore                        0x295f0a08 0x295e4000 + 51720\n    16  QuartzCore                        0x295ec3e0 0x295e4000 + 33760\n    17  QuartzCore                        0x295ec268 0x295e4000 + 33384\n    18  QuartzCore                        0x295ebc4c 0x295e4000 + 31820\n    19  QuartzCore                        0x295eba50 0x295e4000 + 31312\n    20  QuartzCore                        0x295e5928 0x295e4000 + 6440\n    21  CoreFoundation                    0x266d0d92 0x26604000 + 839058\n    22  CoreFoundation                    0x266ce44e 0x26604000 + 828494\n    23  CoreFoundation                    0x266ce856 0x26604000 + 829526\n    24  CoreFoundation                    0x2661c3bc 0x26604000 + 99260\n    25  CoreFoundation                    0x2661c1ce 0x26604000 + 98766\n    26  GraphicsServices                  0x2da1a0a4 0x2da11000 + 37028\n    27  UIKit                             0x29c2a7ac 0x29bbc000 + 452524\n    28  Your                              0x0024643a 0xa2000 + 1721402\n    29  libdyld.dylib                     0x34484aac 0x34483000 + 6828\n```\n\n1、 符号表堆栈地址计算方式\n\n要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址0x000f0846，该进程的运行时起始地址是0xa2000，崩溃处距离进程起始地址的偏移量为十进制的321606(对应十六进制为0x4E846)。三者对应关系：\n\n```shell\n0x000f0846 = 0xa2000 + 0x4E846\n```\n\n对应的公式为：\n\n```shell\n运行时堆栈地址 = 运行时起始地址 + 偏移量\n```\n\n崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：\n\n```shell\n符号表堆栈地址 = 符号表起始地址 + 偏移量\n```\n\n2、获取符号表中的TEXT段起始地址\n\n符号表中TEXT段的起始地址可以通过以下命令获得：\n\n```shell\n$otool -l Your.app.dSYM/Contents/Resources/DWARF/Your\n```\n\n运行结果中的片段如下：\n\n```shell\nLoad command 3\n      cmd LC_SEGMENT\n  cmdsize 736\n  segname __TEXT\n    vmaddr 0x00004000\n    vmsize 0x00700000\n  fileoff 0\n  filesize 0\n  maxprot 0x00000005\n  initprot 0x00000005\n    nsects 10\n    flags 0x0\n```\n\n其中的vmaddr 0x00004000字段即为TEXT段的起始地址。\n\n3、计算符号表地址\n\n由公式：\n\n```shell\n符号表堆栈地址 = 符号表起始地址 + 偏移量\n```\n\n可得：\n\n```shell\n0x52846 = 0x4E846 + 0x4000\n```\n\n即符号表中的崩溃地址为0x52846，接下来就可以根据这个地址解析出崩溃位置了。\n\n四、崩溃信息还原\n\n有了符号表的崩溃地址，有以下几种方式解析崩溃信息：\n\n1、dwarfdump\n\n命令如下：\n\n```shell\n$dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep 'Line table'\n```\n\n需要注意的是：\n\n```shell\n这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集\n```\n\n比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。\n\n—lookup后面跟的一定是经过准确计算的符号表中的崩溃地址\n\n使用dwarfdump解析的结果较杂乱，因此使用grep命令抓取其中关键点展示出来\n\n运行结果如下：\n\n```shell\nLine table dir : '/data/.../Src/OBDConnectSetting/Controller'\nLine table file: 'OBDFirstConnectViewController.m' line 882, column 5 with start address 0x000000000052768\n```\n\n其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。\n\n2、atos\n\natos是另一种更加简洁的崩溃日志解析方法，使用方式如下：\n\n```shell\n$atos -o LuBao -arch armv7 0x52846\n```\n\n其执行结果如下：\n\n```objective-c\n-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n```\n\n相对dwarfdump命令的解析结果，更加简洁直观的指出了崩溃发生的位置。\n\n3、无需符号表崩溃地址的解析方式\n\n实际上，atos还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：\n\n```shell\n$atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846\n```\n\n其中-l选项指定了二进制文件在运行时的起始地址0xa2000（获取方式见Binary Images相关内容）,后面跟的是崩溃发生的运行时地址0x000f0846，解析结果和使用计算得到的符号表中崩溃地址一致：\n\n```objectvie-c\n-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)\n```\n\n五、参考文档\n\n* [How to Match a Crash Report to a Build](https://developer.apple.com/library/mac/qa/qa1765/_index.html)\n\n* [CrashReporter](https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html)\n\n* [Understanding and Analyzing iOS Application Crash Reports](https://developer.apple.com/library/ios/technotes/tn2151/_index.html)\n\n* [atos and dwarfdump won’t symbolicate my address](http://stackoverflow.com/a/12464678/2293677)\n\n**原文参考：**[手动解析CrashLog](http://www.cocoachina.com/ios/20150803/12806.html)\n\n3、异常处理\n4、异常规避\n\n* 内存地址分配\n* 日志源文件\n* 异常产生\n\nLinux系统中，支持两类信号\n\n1.POSIX标准的规则信号(regular signal，编号1－31)\n\n2.实时信号(real-time signal，编号32－63)\n\n对于regular signal来说，无论发送多少次，在接收进程处理之前，重复的信号会被合并为一个（每一种regular signal对应于系统进程表项中软中断字段的一个比特，因此不同的信号可以同时存在，同一信号仅能表示有或无而不能表示重复的次数)；\n\n而real-time signal发送多少次，就会在接收进程的信号队列中出现多少次。\nLinux在i386上的31个规则信号(regular signal)\n\n```shell\nkill -l\n```\n\n| 编号 | 信号名称          | 缺省动作 | 说明                           |\n| ---- | ----------------- | -------- | ------------------------------ |\n| 1    | SIGHUP            | 终止     | 终止控制终端或进程             |\n| 2    | SIGINT            | 终止     | 键盘产生的中断(Ctrl-C)         |\n| 3    | SIGQUIT           | dump     | 键盘产生的退出                 |\n| 4    | SIGILL            | dump     | 非法指令                       |\n| 5    | SIGTRAP           | dump     | debug中断                      |\n| 6    | SIGABRT／SIGIOT   | dump     | 异常中止                       |\n| 7    | SIGBUS／SIGEMT    | dump     | 总线异常/EMT指令               |\n| 8    | SIGFPE            | dump     | 浮点运算溢出                   |\n| 9    | SIGKILL           | 终止     | 强制进程终止                   |\n| 10   | SIGUSR1           | 终止     | 用户信号,进程可自定义用途      |\n| 11   | SIGSEGV           | dump     | 非法内存地址引用               |\n| 12   | SIGUSR2           | 终止     | 用户信号，进程可自定义用途     |\n| 13   | SIGPIPE           | 终止     | 向某个没有读取的管道中写入数据 |\n| 14   | SIGALRM           | 终止     | 时钟中断(闹钟)                 |\n| 15   | SIGTERM           | 终止     | 进程终止                       |\n| 16   | SIGSTKFLT         | 终止     | 协处理器栈错误                 |\n| 17   | SIGCHLD           | 忽略     | 子进程退出或中断               |\n| 18   | SIGCONT           | 继续     | 如进程停止状态则开始运行       |\n| 19   | SIGSTOP           | 停止     | 停止进程运行                   |\n| 20   | SIGSTP            | 停止     | 键盘产生的停止                 |\n| 21   | SIGTTIN           | 停止     | 后台进程请求输入               |\n| 22   | SIGTTOU           | 停止     | 后台进程请求输出               |\n| 23   | SIGURG            | 忽略     | socket发生紧急情况             |\n| 24   | SIGXCPU           | dump     | CPU时间限制被打破              |\n| 25   | SIGXFSZ           | dump     | 文件大小限制被打破             |\n| 26   | SIGVTALRM         | 终止     | 虚拟定时时钟                   |\n| 27   | SIGPROF           | 终止     | profile timer clock            |\n| 28   | SIGWINCH          | 忽略     | 窗口尺寸调整                   |\n| 29   | SIGIO/SIGPOLL     | 终止     | I/O可用                        |\n| 30   | SIGPWR            | 终止     | 电源异常                       |\n| 31   | SIGSYS／SYSUNUSED | dump     | 系统调用异常                   |\n\n在不同系统中同一数值可能会代表不同的信号，因此，最好使用信号名而不是信号值。\n\n信号的数值越小，则优先级越高。当进程收到多个待处理信号时，总是先处理优先级别高的信号。\n\n* [iOS 崩溃 crash 大解析·参考 1](https://toutiao.io/posts/443hus/preview)\n* [iOS中的Crash探究·参考 2](https://www.bitnpc.com/2018/11/28/iOS%E7%9A%84Crash%E6%8E%A2%E7%A9%B6/)\n","slug":"iOS/Performance/Exceptions/Excetions","published":1,"updated":"2021-07-29T06:46:00.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn410048iu9kcl7i3c26","content":"<p>1、异常日志收集</p>\n<ul>\n<li>Xcode、App Store</li>\n<li>第三方</li>\n<li>自己收集<pre><code>  跟踪异常产生的时机并捕捉、处理：上报之类\n  [iOS Swift Crash的捕获](http://www.cocoachina.com/ios/20170816/20270.html)\n  [漫谈iOS Crash收集框架](https://nianxi.net/ios/ios-crash-reporter.html)\n  [dSYMTools](https://blog.csdn.net/wiseuc_jianghai/article/details/78031638)\n  [DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)[DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)\n</code></pre>\n</li>\n</ul>\n<p>2、异常日志分析</p>\n<p>一、.dSYM</p>\n<p>.dSYM(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的DWARF（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.xcarchive</span><br><span class=\"line\">    --dSYMs</span><br><span class=\"line\">      |--Your.app.dSYM</span><br><span class=\"line\">        |--Contents</span><br><span class=\"line\">          |--Resources</span><br><span class=\"line\">            |--DWARF</span><br></pre></td></tr></table></figure>\n\n<p>二、确定符号表和崩溃日志的一致性</p>\n<p>有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。</p>\n<p>1、从崩溃日志中获取UUID</p>\n<p>崩溃日志比较靠下的位置有个Binary Images模块，其第一行内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Binary Images:</span><br><span class=\"line\">0x1f000 - 0x906fff sd_doctor_ios armv7  &lt;eef4e325f9d6393f93e87b7ee327a5ea&gt; /var/containers/Bundle/Application/8BEEC659-8263-4092-A2DC-EF48060BB142/sd_doctor_ios.app/sd_doctor_ios</span><br></pre></td></tr></table></figure>\n\n<p>从中可以看到关于你应用的若干信息：</p>\n<p>代码段的起终地址为：0x1f000 - 0x906fff</p>\n<p>运行你应用的CPU指令集为：armv7</p>\n<p>应用的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（不区分大小写）</p>\n<p>2、从符号表中获取UUID</p>\n<p>执行以下命令从符号表中提取UUID：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dwarfdump --uuid Your.app.dSYM</span><br><span class=\"line\">dwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your</span><br></pre></td></tr></table></figure>\n\n<p>由此得到armv7指令集的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。</p>\n<p>三、计算崩溃符号表地址<br>以下面的崩溃堆栈为例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 0:</span><br><span class=\"line\">   0   libobjc.A.dylib                   0x33f10f60 0x33efe000 + 77664</span><br><span class=\"line\">   1   Foundation                        0x273526ac 0x2734a000 + 34476</span><br><span class=\"line\">   2   Foundation                        0x27355c3e 0x2734a000 + 48190</span><br><span class=\"line\">   3   UIKit                             0x29ef9d1c 0x29bbc000 + 3398940</span><br><span class=\"line\">   4   UIKit                             0x29ef9c9a 0x29bbc000 + 3398810</span><br><span class=\"line\">   5   UIKit                             0x29ef954c 0x29bbc000 + 3396940</span><br><span class=\"line\">   6   UIKit                             0x29c3a16a 0x29bbc000 + 516458</span><br><span class=\"line\">   7   UIKit                             0x29e4b8e6 0x29bbc000 + 2685158</span><br><span class=\"line\">   8   UIKit                             0x29c3a128 0x29bbc000 + 516392</span><br><span class=\"line\">   9   Your                              0x000f0846 0xa2000 + 321606</span><br><span class=\"line\">   10  UIKit                             0x29e90fb2 0x29bbc000 + 2969522</span><br><span class=\"line\">   11  UIKit                             0x29e91076 0x29bbc000 + 2969718</span><br><span class=\"line\">   12  UIKit                             0x29e867cc 0x29bbc000 + 2926540</span><br><span class=\"line\">   13  UIKit                             0x29c9e8ea 0x29bbc000 + 927978</span><br><span class=\"line\">   14  UIKit                             0x29bc8a6a 0x29bbc000 + 51818</span><br><span class=\"line\">   15  QuartzCore                        0x295f0a08 0x295e4000 + 51720</span><br><span class=\"line\">   16  QuartzCore                        0x295ec3e0 0x295e4000 + 33760</span><br><span class=\"line\">   17  QuartzCore                        0x295ec268 0x295e4000 + 33384</span><br><span class=\"line\">   18  QuartzCore                        0x295ebc4c 0x295e4000 + 31820</span><br><span class=\"line\">   19  QuartzCore                        0x295eba50 0x295e4000 + 31312</span><br><span class=\"line\">   20  QuartzCore                        0x295e5928 0x295e4000 + 6440</span><br><span class=\"line\">   21  CoreFoundation                    0x266d0d92 0x26604000 + 839058</span><br><span class=\"line\">   22  CoreFoundation                    0x266ce44e 0x26604000 + 828494</span><br><span class=\"line\">   23  CoreFoundation                    0x266ce856 0x26604000 + 829526</span><br><span class=\"line\">   24  CoreFoundation                    0x2661c3bc 0x26604000 + 99260</span><br><span class=\"line\">   25  CoreFoundation                    0x2661c1ce 0x26604000 + 98766</span><br><span class=\"line\">   26  GraphicsServices                  0x2da1a0a4 0x2da11000 + 37028</span><br><span class=\"line\">   27  UIKit                             0x29c2a7ac 0x29bbc000 + 452524</span><br><span class=\"line\">   28  Your                              0x0024643a 0xa2000 + 1721402</span><br><span class=\"line\">   29  libdyld.dylib                     0x34484aac 0x34483000 + 6828</span><br></pre></td></tr></table></figure>\n\n<p>1、 符号表堆栈地址计算方式</p>\n<p>要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址0x000f0846，该进程的运行时起始地址是0xa2000，崩溃处距离进程起始地址的偏移量为十进制的321606(对应十六进制为0x4E846)。三者对应关系：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x000f0846 = 0xa2000 + 0x4E846</span><br></pre></td></tr></table></figure>\n\n<p>对应的公式为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行时堆栈地址 = 运行时起始地址 + 偏移量</span><br></pre></td></tr></table></figure>\n\n<p>崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">符号表堆栈地址 = 符号表起始地址 + 偏移量</span><br></pre></td></tr></table></figure>\n\n<p>2、获取符号表中的TEXT段起始地址</p>\n<p>符号表中TEXT段的起始地址可以通过以下命令获得：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">otool -l Your.app.dSYM/Contents/Resources/DWARF/Your</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果中的片段如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Load command 3</span><br><span class=\"line\">      cmd LC_SEGMENT</span><br><span class=\"line\">  cmdsize 736</span><br><span class=\"line\">  segname __TEXT</span><br><span class=\"line\">    vmaddr 0x00004000</span><br><span class=\"line\">    vmsize 0x00700000</span><br><span class=\"line\">  fileoff 0</span><br><span class=\"line\">  filesize 0</span><br><span class=\"line\">  maxprot 0x00000005</span><br><span class=\"line\">  initprot 0x00000005</span><br><span class=\"line\">    nsects 10</span><br><span class=\"line\">    flags 0x0</span><br></pre></td></tr></table></figure>\n\n<p>其中的vmaddr 0x00004000字段即为TEXT段的起始地址。</p>\n<p>3、计算符号表地址</p>\n<p>由公式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">符号表堆栈地址 = 符号表起始地址 + 偏移量</span><br></pre></td></tr></table></figure>\n\n<p>可得：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x52846 = 0x4E846 + 0x4000</span><br></pre></td></tr></table></figure>\n\n<p>即符号表中的崩溃地址为0x52846，接下来就可以根据这个地址解析出崩溃位置了。</p>\n<p>四、崩溃信息还原</p>\n<p>有了符号表的崩溃地址，有以下几种方式解析崩溃信息：</p>\n<p>1、dwarfdump</p>\n<p>命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep <span class=\"string\">&#x27;Line table&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集</span><br></pre></td></tr></table></figure>\n\n<p>比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。</p>\n<p>—lookup后面跟的一定是经过准确计算的符号表中的崩溃地址</p>\n<p>使用dwarfdump解析的结果较杂乱，因此使用grep命令抓取其中关键点展示出来</p>\n<p>运行结果如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Line table dir : &#x27;/data/.../Src/OBDConnectSetting/Controller&#x27;</span><br><span class=\"line\">Line table file: &#x27;OBDFirstConnectViewController.m&#x27; line 882, column 5 with start address 0x000000000052768</span><br></pre></td></tr></table></figure>\n\n<p>其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。</p>\n<p>2、atos</p>\n<p>atos是另一种更加简洁的崩溃日志解析方法，使用方式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">atos -o LuBao -arch armv7 0x52846</span></span><br></pre></td></tr></table></figure>\n\n<p>其执行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)</span><br></pre></td></tr></table></figure>\n\n<p>相对dwarfdump命令的解析结果，更加简洁直观的指出了崩溃发生的位置。</p>\n<p>3、无需符号表崩溃地址的解析方式</p>\n<p>实际上，atos还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846</span></span><br></pre></td></tr></table></figure>\n\n<p>其中-l选项指定了二进制文件在运行时的起始地址0xa2000（获取方式见Binary Images相关内容）,后面跟的是崩溃发生的运行时地址0x000f0846，解析结果和使用计算得到的符号表中崩溃地址一致：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)</span><br></pre></td></tr></table></figure>\n\n<p>五、参考文档</p>\n<ul>\n<li><p><a href=\"https://developer.apple.com/library/mac/qa/qa1765/_index.html\">How to Match a Crash Report to a Build</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html\">CrashReporter</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/ios/technotes/tn2151/_index.html\">Understanding and Analyzing iOS Application Crash Reports</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/a/12464678/2293677\">atos and dwarfdump won’t symbolicate my address</a></p>\n</li>\n</ul>\n<p><strong>原文参考：</strong><a href=\"http://www.cocoachina.com/ios/20150803/12806.html\">手动解析CrashLog</a></p>\n<p>3、异常处理<br>4、异常规避</p>\n<ul>\n<li>内存地址分配</li>\n<li>日志源文件</li>\n<li>异常产生</li>\n</ul>\n<p>Linux系统中，支持两类信号</p>\n<p>1.POSIX标准的规则信号(regular signal，编号1－31)</p>\n<p>2.实时信号(real-time signal，编号32－63)</p>\n<p>对于regular signal来说，无论发送多少次，在接收进程处理之前，重复的信号会被合并为一个（每一种regular signal对应于系统进程表项中软中断字段的一个比特，因此不同的信号可以同时存在，同一信号仅能表示有或无而不能表示重复的次数)；</p>\n<p>而real-time signal发送多少次，就会在接收进程的信号队列中出现多少次。<br>Linux在i386上的31个规则信号(regular signal)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -l</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>编号</th>\n<th>信号名称</th>\n<th>缺省动作</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>SIGHUP</td>\n<td>终止</td>\n<td>终止控制终端或进程</td>\n</tr>\n<tr>\n<td>2</td>\n<td>SIGINT</td>\n<td>终止</td>\n<td>键盘产生的中断(Ctrl-C)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>SIGQUIT</td>\n<td>dump</td>\n<td>键盘产生的退出</td>\n</tr>\n<tr>\n<td>4</td>\n<td>SIGILL</td>\n<td>dump</td>\n<td>非法指令</td>\n</tr>\n<tr>\n<td>5</td>\n<td>SIGTRAP</td>\n<td>dump</td>\n<td>debug中断</td>\n</tr>\n<tr>\n<td>6</td>\n<td>SIGABRT／SIGIOT</td>\n<td>dump</td>\n<td>异常中止</td>\n</tr>\n<tr>\n<td>7</td>\n<td>SIGBUS／SIGEMT</td>\n<td>dump</td>\n<td>总线异常/EMT指令</td>\n</tr>\n<tr>\n<td>8</td>\n<td>SIGFPE</td>\n<td>dump</td>\n<td>浮点运算溢出</td>\n</tr>\n<tr>\n<td>9</td>\n<td>SIGKILL</td>\n<td>终止</td>\n<td>强制进程终止</td>\n</tr>\n<tr>\n<td>10</td>\n<td>SIGUSR1</td>\n<td>终止</td>\n<td>用户信号,进程可自定义用途</td>\n</tr>\n<tr>\n<td>11</td>\n<td>SIGSEGV</td>\n<td>dump</td>\n<td>非法内存地址引用</td>\n</tr>\n<tr>\n<td>12</td>\n<td>SIGUSR2</td>\n<td>终止</td>\n<td>用户信号，进程可自定义用途</td>\n</tr>\n<tr>\n<td>13</td>\n<td>SIGPIPE</td>\n<td>终止</td>\n<td>向某个没有读取的管道中写入数据</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SIGALRM</td>\n<td>终止</td>\n<td>时钟中断(闹钟)</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SIGTERM</td>\n<td>终止</td>\n<td>进程终止</td>\n</tr>\n<tr>\n<td>16</td>\n<td>SIGSTKFLT</td>\n<td>终止</td>\n<td>协处理器栈错误</td>\n</tr>\n<tr>\n<td>17</td>\n<td>SIGCHLD</td>\n<td>忽略</td>\n<td>子进程退出或中断</td>\n</tr>\n<tr>\n<td>18</td>\n<td>SIGCONT</td>\n<td>继续</td>\n<td>如进程停止状态则开始运行</td>\n</tr>\n<tr>\n<td>19</td>\n<td>SIGSTOP</td>\n<td>停止</td>\n<td>停止进程运行</td>\n</tr>\n<tr>\n<td>20</td>\n<td>SIGSTP</td>\n<td>停止</td>\n<td>键盘产生的停止</td>\n</tr>\n<tr>\n<td>21</td>\n<td>SIGTTIN</td>\n<td>停止</td>\n<td>后台进程请求输入</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SIGTTOU</td>\n<td>停止</td>\n<td>后台进程请求输出</td>\n</tr>\n<tr>\n<td>23</td>\n<td>SIGURG</td>\n<td>忽略</td>\n<td>socket发生紧急情况</td>\n</tr>\n<tr>\n<td>24</td>\n<td>SIGXCPU</td>\n<td>dump</td>\n<td>CPU时间限制被打破</td>\n</tr>\n<tr>\n<td>25</td>\n<td>SIGXFSZ</td>\n<td>dump</td>\n<td>文件大小限制被打破</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SIGVTALRM</td>\n<td>终止</td>\n<td>虚拟定时时钟</td>\n</tr>\n<tr>\n<td>27</td>\n<td>SIGPROF</td>\n<td>终止</td>\n<td>profile timer clock</td>\n</tr>\n<tr>\n<td>28</td>\n<td>SIGWINCH</td>\n<td>忽略</td>\n<td>窗口尺寸调整</td>\n</tr>\n<tr>\n<td>29</td>\n<td>SIGIO/SIGPOLL</td>\n<td>终止</td>\n<td>I/O可用</td>\n</tr>\n<tr>\n<td>30</td>\n<td>SIGPWR</td>\n<td>终止</td>\n<td>电源异常</td>\n</tr>\n<tr>\n<td>31</td>\n<td>SIGSYS／SYSUNUSED</td>\n<td>dump</td>\n<td>系统调用异常</td>\n</tr>\n</tbody></table>\n<p>在不同系统中同一数值可能会代表不同的信号，因此，最好使用信号名而不是信号值。</p>\n<p>信号的数值越小，则优先级越高。当进程收到多个待处理信号时，总是先处理优先级别高的信号。</p>\n<ul>\n<li><a href=\"https://toutiao.io/posts/443hus/preview\">iOS 崩溃 crash 大解析·参考 1</a></li>\n<li><a href=\"https://www.bitnpc.com/2018/11/28/iOS%E7%9A%84Crash%E6%8E%A2%E7%A9%B6/\">iOS中的Crash探究·参考 2</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>1、异常日志收集</p>\n<ul>\n<li>Xcode、App Store</li>\n<li>第三方</li>\n<li>自己收集<pre><code>  跟踪异常产生的时机并捕捉、处理：上报之类\n  [iOS Swift Crash的捕获](http://www.cocoachina.com/ios/20170816/20270.html)\n  [漫谈iOS Crash收集框架](https://nianxi.net/ios/ios-crash-reporter.html)\n  [dSYMTools](https://blog.csdn.net/wiseuc_jianghai/article/details/78031638)\n  [DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)[DWARF 介绍](https://www.jianshu.com/p/20dfe4fe1b3f)\n</code></pre>\n</li>\n</ul>\n<p>2、异常日志分析</p>\n<p>一、.dSYM</p>\n<p>.dSYM(debugging SYMbols)又称为调试符号表，是苹果为了方便调试和定位问题而使用的一种调试方案，本质上使用的是起源于贝尔实验室的DWARF（Debugging With Attributed Record Formats），其在.xcarchive目录中的层次结构为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.xcarchive</span><br><span class=\"line\">    --dSYMs</span><br><span class=\"line\">      |--Your.app.dSYM</span><br><span class=\"line\">        |--Contents</span><br><span class=\"line\">          |--Resources</span><br><span class=\"line\">            |--DWARF</span><br></pre></td></tr></table></figure>\n\n<p>二、确定符号表和崩溃日志的一致性</p>\n<p>有了符号表文件，有了崩溃日志文件，在解析之前一定要确保二者的对应关系，否则就算按照下述步骤解析出内容也肯定是不准确的。二者的对应关系可以通过UUID来确定。</p>\n<p>1、从崩溃日志中获取UUID</p>\n<p>崩溃日志比较靠下的位置有个Binary Images模块，其第一行内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Binary Images:</span><br><span class=\"line\">0x1f000 - 0x906fff sd_doctor_ios armv7  &lt;eef4e325f9d6393f93e87b7ee327a5ea&gt; /var/containers/Bundle/Application/8BEEC659-8263-4092-A2DC-EF48060BB142/sd_doctor_ios.app/sd_doctor_ios</span><br></pre></td></tr></table></figure>\n\n<p>从中可以看到关于你应用的若干信息：</p>\n<p>代码段的起终地址为：0x1f000 - 0x906fff</p>\n<p>运行你应用的CPU指令集为：armv7</p>\n<p>应用的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（不区分大小写）</p>\n<p>2、从符号表中获取UUID</p>\n<p>执行以下命令从符号表中提取UUID：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dwarfdump --uuid Your.app.dSYM</span><br><span class=\"line\">dwarfdump --uuid Your.app.dSYM/Contents/Resources/DWARF/Your</span><br></pre></td></tr></table></figure>\n\n<p>由此得到armv7指令集的UUID为：687D78E2-36CC-35C3-BD39-7D5B21E281B5（如果你的二进制文件支持多个指令集，这里会列出每个指令集对应符号表的UUID），通过和崩溃日志中的对比发现二者一致，才可进行进一步的解析操作。</p>\n<p>三、计算崩溃符号表地址<br>以下面的崩溃堆栈为例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 0:</span><br><span class=\"line\">   0   libobjc.A.dylib                   0x33f10f60 0x33efe000 + 77664</span><br><span class=\"line\">   1   Foundation                        0x273526ac 0x2734a000 + 34476</span><br><span class=\"line\">   2   Foundation                        0x27355c3e 0x2734a000 + 48190</span><br><span class=\"line\">   3   UIKit                             0x29ef9d1c 0x29bbc000 + 3398940</span><br><span class=\"line\">   4   UIKit                             0x29ef9c9a 0x29bbc000 + 3398810</span><br><span class=\"line\">   5   UIKit                             0x29ef954c 0x29bbc000 + 3396940</span><br><span class=\"line\">   6   UIKit                             0x29c3a16a 0x29bbc000 + 516458</span><br><span class=\"line\">   7   UIKit                             0x29e4b8e6 0x29bbc000 + 2685158</span><br><span class=\"line\">   8   UIKit                             0x29c3a128 0x29bbc000 + 516392</span><br><span class=\"line\">   9   Your                              0x000f0846 0xa2000 + 321606</span><br><span class=\"line\">   10  UIKit                             0x29e90fb2 0x29bbc000 + 2969522</span><br><span class=\"line\">   11  UIKit                             0x29e91076 0x29bbc000 + 2969718</span><br><span class=\"line\">   12  UIKit                             0x29e867cc 0x29bbc000 + 2926540</span><br><span class=\"line\">   13  UIKit                             0x29c9e8ea 0x29bbc000 + 927978</span><br><span class=\"line\">   14  UIKit                             0x29bc8a6a 0x29bbc000 + 51818</span><br><span class=\"line\">   15  QuartzCore                        0x295f0a08 0x295e4000 + 51720</span><br><span class=\"line\">   16  QuartzCore                        0x295ec3e0 0x295e4000 + 33760</span><br><span class=\"line\">   17  QuartzCore                        0x295ec268 0x295e4000 + 33384</span><br><span class=\"line\">   18  QuartzCore                        0x295ebc4c 0x295e4000 + 31820</span><br><span class=\"line\">   19  QuartzCore                        0x295eba50 0x295e4000 + 31312</span><br><span class=\"line\">   20  QuartzCore                        0x295e5928 0x295e4000 + 6440</span><br><span class=\"line\">   21  CoreFoundation                    0x266d0d92 0x26604000 + 839058</span><br><span class=\"line\">   22  CoreFoundation                    0x266ce44e 0x26604000 + 828494</span><br><span class=\"line\">   23  CoreFoundation                    0x266ce856 0x26604000 + 829526</span><br><span class=\"line\">   24  CoreFoundation                    0x2661c3bc 0x26604000 + 99260</span><br><span class=\"line\">   25  CoreFoundation                    0x2661c1ce 0x26604000 + 98766</span><br><span class=\"line\">   26  GraphicsServices                  0x2da1a0a4 0x2da11000 + 37028</span><br><span class=\"line\">   27  UIKit                             0x29c2a7ac 0x29bbc000 + 452524</span><br><span class=\"line\">   28  Your                              0x0024643a 0xa2000 + 1721402</span><br><span class=\"line\">   29  libdyld.dylib                     0x34484aac 0x34483000 + 6828</span><br></pre></td></tr></table></figure>\n\n<p>1、 符号表堆栈地址计算方式</p>\n<p>要想利用符号表解析出崩溃对应位置，需要计算出符号表中对应的崩溃堆栈地址。而从上述堆栈中第9行可以看到，应用崩溃发生在运行时地址0x000f0846，该进程的运行时起始地址是0xa2000，崩溃处距离进程起始地址的偏移量为十进制的321606(对应十六进制为0x4E846)。三者对应关系：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x000f0846 = 0xa2000 + 0x4E846</span><br></pre></td></tr></table></figure>\n\n<p>对应的公式为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行时堆栈地址 = 运行时起始地址 + 偏移量</span><br></pre></td></tr></table></figure>\n\n<p>崩溃堆栈中的起始地址和崩溃地址均为运行时地址，根据虚拟内存偏移量不变原理，只要提供了符号表TEXT段的起始地址，再加上偏移量（这里为0x4E846）就能得到符号表中的堆栈地址，即：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">符号表堆栈地址 = 符号表起始地址 + 偏移量</span><br></pre></td></tr></table></figure>\n\n<p>2、获取符号表中的TEXT段起始地址</p>\n<p>符号表中TEXT段的起始地址可以通过以下命令获得：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">otool -l Your.app.dSYM/Contents/Resources/DWARF/Your</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果中的片段如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Load command 3</span><br><span class=\"line\">      cmd LC_SEGMENT</span><br><span class=\"line\">  cmdsize 736</span><br><span class=\"line\">  segname __TEXT</span><br><span class=\"line\">    vmaddr 0x00004000</span><br><span class=\"line\">    vmsize 0x00700000</span><br><span class=\"line\">  fileoff 0</span><br><span class=\"line\">  filesize 0</span><br><span class=\"line\">  maxprot 0x00000005</span><br><span class=\"line\">  initprot 0x00000005</span><br><span class=\"line\">    nsects 10</span><br><span class=\"line\">    flags 0x0</span><br></pre></td></tr></table></figure>\n\n<p>其中的vmaddr 0x00004000字段即为TEXT段的起始地址。</p>\n<p>3、计算符号表地址</p>\n<p>由公式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">符号表堆栈地址 = 符号表起始地址 + 偏移量</span><br></pre></td></tr></table></figure>\n\n<p>可得：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x52846 = 0x4E846 + 0x4000</span><br></pre></td></tr></table></figure>\n\n<p>即符号表中的崩溃地址为0x52846，接下来就可以根据这个地址解析出崩溃位置了。</p>\n<p>四、崩溃信息还原</p>\n<p>有了符号表的崩溃地址，有以下几种方式解析崩溃信息：</p>\n<p>1、dwarfdump</p>\n<p>命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">dwarfdump --arch armv7 Your.app.dSYM --lookup 0x52846 | grep <span class=\"string\">&#x27;Line table&#x27;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里的armv7是运行设备的CPU指令集，而不是二进制文件的指令集</span><br></pre></td></tr></table></figure>\n\n<p>比如armv7指令集的二进制文件运行在arm64指令集的设备上，这个地方应该写arm64。</p>\n<p>—lookup后面跟的一定是经过准确计算的符号表中的崩溃地址</p>\n<p>使用dwarfdump解析的结果较杂乱，因此使用grep命令抓取其中关键点展示出来</p>\n<p>运行结果如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Line table dir : &#x27;/data/.../Src/OBDConnectSetting/Controller&#x27;</span><br><span class=\"line\">Line table file: &#x27;OBDFirstConnectViewController.m&#x27; line 882, column 5 with start address 0x000000000052768</span><br></pre></td></tr></table></figure>\n\n<p>其中第一行是编译时文件目录，第二行包含了崩溃发生的文件名称以及文件中具体行号等信息，有了这些信息就能准确定位崩溃原因啦。</p>\n<p>2、atos</p>\n<p>atos是另一种更加简洁的崩溃日志解析方法，使用方式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">atos -o LuBao -arch armv7 0x52846</span></span><br></pre></td></tr></table></figure>\n\n<p>其执行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)</span><br></pre></td></tr></table></figure>\n\n<p>相对dwarfdump命令的解析结果，更加简洁直观的指出了崩溃发生的位置。</p>\n<p>3、无需符号表崩溃地址的解析方式</p>\n<p>实际上，atos还提供了另外一种无需计算崩溃地址对应的符号表地址的方式，命令格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">atos -o Your.app.dSYM/Contents/Resources/DWARF/Your -arch armv7 -l 0xa2000 0x000f0846</span></span><br></pre></td></tr></table></figure>\n\n<p>其中-l选项指定了二进制文件在运行时的起始地址0xa2000（获取方式见Binary Images相关内容）,后面跟的是崩溃发生的运行时地址0x000f0846，解析结果和使用计算得到的符号表中崩溃地址一致：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[OBDFirstConnectViewController showOilPricePickerView] (in Your) (OBDFirstConnectViewController.m:882)</span><br></pre></td></tr></table></figure>\n\n<p>五、参考文档</p>\n<ul>\n<li><p><a href=\"https://developer.apple.com/library/mac/qa/qa1765/_index.html\">How to Match a Crash Report to a Build</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/mac/technotes/tn2004/tn2123.html\">CrashReporter</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/library/ios/technotes/tn2151/_index.html\">Understanding and Analyzing iOS Application Crash Reports</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/a/12464678/2293677\">atos and dwarfdump won’t symbolicate my address</a></p>\n</li>\n</ul>\n<p><strong>原文参考：</strong><a href=\"http://www.cocoachina.com/ios/20150803/12806.html\">手动解析CrashLog</a></p>\n<p>3、异常处理<br>4、异常规避</p>\n<ul>\n<li>内存地址分配</li>\n<li>日志源文件</li>\n<li>异常产生</li>\n</ul>\n<p>Linux系统中，支持两类信号</p>\n<p>1.POSIX标准的规则信号(regular signal，编号1－31)</p>\n<p>2.实时信号(real-time signal，编号32－63)</p>\n<p>对于regular signal来说，无论发送多少次，在接收进程处理之前，重复的信号会被合并为一个（每一种regular signal对应于系统进程表项中软中断字段的一个比特，因此不同的信号可以同时存在，同一信号仅能表示有或无而不能表示重复的次数)；</p>\n<p>而real-time signal发送多少次，就会在接收进程的信号队列中出现多少次。<br>Linux在i386上的31个规则信号(regular signal)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kill -l</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>编号</th>\n<th>信号名称</th>\n<th>缺省动作</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>SIGHUP</td>\n<td>终止</td>\n<td>终止控制终端或进程</td>\n</tr>\n<tr>\n<td>2</td>\n<td>SIGINT</td>\n<td>终止</td>\n<td>键盘产生的中断(Ctrl-C)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>SIGQUIT</td>\n<td>dump</td>\n<td>键盘产生的退出</td>\n</tr>\n<tr>\n<td>4</td>\n<td>SIGILL</td>\n<td>dump</td>\n<td>非法指令</td>\n</tr>\n<tr>\n<td>5</td>\n<td>SIGTRAP</td>\n<td>dump</td>\n<td>debug中断</td>\n</tr>\n<tr>\n<td>6</td>\n<td>SIGABRT／SIGIOT</td>\n<td>dump</td>\n<td>异常中止</td>\n</tr>\n<tr>\n<td>7</td>\n<td>SIGBUS／SIGEMT</td>\n<td>dump</td>\n<td>总线异常/EMT指令</td>\n</tr>\n<tr>\n<td>8</td>\n<td>SIGFPE</td>\n<td>dump</td>\n<td>浮点运算溢出</td>\n</tr>\n<tr>\n<td>9</td>\n<td>SIGKILL</td>\n<td>终止</td>\n<td>强制进程终止</td>\n</tr>\n<tr>\n<td>10</td>\n<td>SIGUSR1</td>\n<td>终止</td>\n<td>用户信号,进程可自定义用途</td>\n</tr>\n<tr>\n<td>11</td>\n<td>SIGSEGV</td>\n<td>dump</td>\n<td>非法内存地址引用</td>\n</tr>\n<tr>\n<td>12</td>\n<td>SIGUSR2</td>\n<td>终止</td>\n<td>用户信号，进程可自定义用途</td>\n</tr>\n<tr>\n<td>13</td>\n<td>SIGPIPE</td>\n<td>终止</td>\n<td>向某个没有读取的管道中写入数据</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SIGALRM</td>\n<td>终止</td>\n<td>时钟中断(闹钟)</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SIGTERM</td>\n<td>终止</td>\n<td>进程终止</td>\n</tr>\n<tr>\n<td>16</td>\n<td>SIGSTKFLT</td>\n<td>终止</td>\n<td>协处理器栈错误</td>\n</tr>\n<tr>\n<td>17</td>\n<td>SIGCHLD</td>\n<td>忽略</td>\n<td>子进程退出或中断</td>\n</tr>\n<tr>\n<td>18</td>\n<td>SIGCONT</td>\n<td>继续</td>\n<td>如进程停止状态则开始运行</td>\n</tr>\n<tr>\n<td>19</td>\n<td>SIGSTOP</td>\n<td>停止</td>\n<td>停止进程运行</td>\n</tr>\n<tr>\n<td>20</td>\n<td>SIGSTP</td>\n<td>停止</td>\n<td>键盘产生的停止</td>\n</tr>\n<tr>\n<td>21</td>\n<td>SIGTTIN</td>\n<td>停止</td>\n<td>后台进程请求输入</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SIGTTOU</td>\n<td>停止</td>\n<td>后台进程请求输出</td>\n</tr>\n<tr>\n<td>23</td>\n<td>SIGURG</td>\n<td>忽略</td>\n<td>socket发生紧急情况</td>\n</tr>\n<tr>\n<td>24</td>\n<td>SIGXCPU</td>\n<td>dump</td>\n<td>CPU时间限制被打破</td>\n</tr>\n<tr>\n<td>25</td>\n<td>SIGXFSZ</td>\n<td>dump</td>\n<td>文件大小限制被打破</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SIGVTALRM</td>\n<td>终止</td>\n<td>虚拟定时时钟</td>\n</tr>\n<tr>\n<td>27</td>\n<td>SIGPROF</td>\n<td>终止</td>\n<td>profile timer clock</td>\n</tr>\n<tr>\n<td>28</td>\n<td>SIGWINCH</td>\n<td>忽略</td>\n<td>窗口尺寸调整</td>\n</tr>\n<tr>\n<td>29</td>\n<td>SIGIO/SIGPOLL</td>\n<td>终止</td>\n<td>I/O可用</td>\n</tr>\n<tr>\n<td>30</td>\n<td>SIGPWR</td>\n<td>终止</td>\n<td>电源异常</td>\n</tr>\n<tr>\n<td>31</td>\n<td>SIGSYS／SYSUNUSED</td>\n<td>dump</td>\n<td>系统调用异常</td>\n</tr>\n</tbody></table>\n<p>在不同系统中同一数值可能会代表不同的信号，因此，最好使用信号名而不是信号值。</p>\n<p>信号的数值越小，则优先级越高。当进程收到多个待处理信号时，总是先处理优先级别高的信号。</p>\n<ul>\n<li><a href=\"https://toutiao.io/posts/443hus/preview\">iOS 崩溃 crash 大解析·参考 1</a></li>\n<li><a href=\"https://www.bitnpc.com/2018/11/28/iOS%E7%9A%84Crash%E6%8E%A2%E7%A9%B6/\">iOS中的Crash探究·参考 2</a></li>\n</ul>\n"},{"title":"iOS之僵尸对象","abbrlink":"894e51f8","date":"2021-06-05T13:36:02.000Z","_content":"\n## 1. [iOS Zombie Objects(僵尸对象)原理探索](https://www.jianshu.com/p/493f581d336b)\n","source":"_posts/iOS/Performance/Exceptions/ ZombieObject.md","raw":"---\ntitle: iOS之僵尸对象\nabbrlink: 894e51f8\ndate: 2021-06-05 21:36:02\ntags:\n---\n\n## 1. [iOS Zombie Objects(僵尸对象)原理探索](https://www.jianshu.com/p/493f581d336b)\n","slug":"iOS/Performance/Exceptions/ ZombieObject","published":1,"updated":"2021-07-29T06:45:57.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn420049iu9k46xy8tn0","content":"<h2 id=\"1-iOS-Zombie-Objects-僵尸对象-原理探索\"><a href=\"#1-iOS-Zombie-Objects-僵尸对象-原理探索\" class=\"headerlink\" title=\"1. iOS Zombie Objects(僵尸对象)原理探索\"></a>1. <a href=\"https://www.jianshu.com/p/493f581d336b\">iOS Zombie Objects(僵尸对象)原理探索</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-iOS-Zombie-Objects-僵尸对象-原理探索\"><a href=\"#1-iOS-Zombie-Objects-僵尸对象-原理探索\" class=\"headerlink\" title=\"1. iOS Zombie Objects(僵尸对象)原理探索\"></a>1. <a href=\"https://www.jianshu.com/p/493f581d336b\">iOS Zombie Objects(僵尸对象)原理探索</a></h2>"},{"title":"iOS之手动解析 crash 日志","abbrlink":"9e3e35b0","date":"2021-04-20T13:36:02.000Z","_content":"## 1. 符号化方式\n\n* Xcode\n* symbolicatecrash\n* atos\n* otool\n\n## 2. [如何手动解析CrashLog](http://www.cocoachina.com/articles/12806)\n","source":"_posts/iOS/Performance/Exceptions/CrashLogManuelResolve.md","raw":"---\ntitle: iOS之手动解析 crash 日志\nabbrlink: 9e3e35b0\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. 符号化方式\n\n* Xcode\n* symbolicatecrash\n* atos\n* otool\n\n## 2. [如何手动解析CrashLog](http://www.cocoachina.com/articles/12806)\n","slug":"iOS/Performance/Exceptions/CrashLogManuelResolve","published":1,"updated":"2021-07-29T06:46:00.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn43004aiu9k16avbubu","content":"<h2 id=\"1-符号化方式\"><a href=\"#1-符号化方式\" class=\"headerlink\" title=\"1. 符号化方式\"></a>1. 符号化方式</h2><ul>\n<li>Xcode</li>\n<li>symbolicatecrash</li>\n<li>atos</li>\n<li>otool</li>\n</ul>\n<h2 id=\"2-如何手动解析CrashLog\"><a href=\"#2-如何手动解析CrashLog\" class=\"headerlink\" title=\"2. 如何手动解析CrashLog\"></a>2. <a href=\"http://www.cocoachina.com/articles/12806\">如何手动解析CrashLog</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-符号化方式\"><a href=\"#1-符号化方式\" class=\"headerlink\" title=\"1. 符号化方式\"></a>1. 符号化方式</h2><ul>\n<li>Xcode</li>\n<li>symbolicatecrash</li>\n<li>atos</li>\n<li>otool</li>\n</ul>\n<h2 id=\"2-如何手动解析CrashLog\"><a href=\"#2-如何手动解析CrashLog\" class=\"headerlink\" title=\"2. 如何手动解析CrashLog\"></a>2. <a href=\"http://www.cocoachina.com/articles/12806\">如何手动解析CrashLog</a></h2>"},{"title":"iOS之KSCrash 简明教程","abbrlink":"85707e48","date":"2021-04-20T13:36:02.000Z","_content":"\n1、KSCrash 简明教程\nA Brief Tour of the KSCrash Code and Architecture\n\nKSCrash used to be simple enough that a quick perusal of the source code would be enough to understand how it worked, but it's gotten big enough now that there should be some guideposts to help readers along. This document introduces you to the main code areas of KSCrash.\n\nThe Heart of KSCrash\nThe heart of KSCrash lives in KSCrashC.c\n\nThis file contains all of the most important access points to the KSCrash system.\n\nKSCrashC.c functions are also Objective-C/Swift wrapped in KSCrash.m\n\nThese are the main parts of KSCrashC.c:\n\nInstallation\nkscrash_install() installs and prepares the KSCrash system to handle crashes. You can configure KSCrash using the various configuration functions in this file (kscrash_setMonitoring() and such) before or after install.\n\nConfiguration\nAll of the main configuration settings are set via kscrash_setXYZ().\n\nApp State\nApple operating environments offer a number of notifications that tell you the current app state. These are hooked into various kscrash_notifyXYZ() functions.\n\nCrash Entry Point\nThe function onCrash is the main function called after a crash is reported. It handles examining the application state, writing the JSON crash report, and then allowing the crash to take its natural course.\n\nReport Management\nThis file also contains the low level primitive functions for managing crash reports: kscrash_getReportCount(), kscrash_getReportIDs(), kscrash_readReport(), kscrash_deleteReportWithID()\n\nEnabling / Disabling KSCrash\nYou can use kscrash_setMonitoring() to effectively enable or disable crash reporting at runtime.\n\nDetecting Crashes\nCrashes are detected via one of the monitors, which set up the data in a consistent way before passing control to the function onCrash(). These files are a bit tricky because some of them have to jump through a few hoops to get around OS differences, system idiosyncrasies, and just plain bugs.\n\nRecording Crashes\nCrashes are recorded to a JSON file via kscrashreport_writeStandardReport() in KSCrashReport.c. It makes use of a number of tools to accomplish this.\n\nReport Management\nReport management is primarily done in KSCrashReportStore.c\n\nReporting\nReporting is done using a probably-overcomplicated system of filters and sinks. Generally, to adapt KSCrash to your needs, you'd create your own sink.\n\nInstallations\nThe installation system was an attempt to make the user API a little easier by hiding most of the filter/sink stuff behind a simpler interface. Its success is debatable...\n\nNo code depends on the installation code, and KSCrash can actually work just fine without it.\n","source":"_posts/iOS/Performance/KSCrash/KSCrashGuidline.md","raw":"---\ntitle: iOS之KSCrash 简明教程\nabbrlink: '85707e48'\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n1、KSCrash 简明教程\nA Brief Tour of the KSCrash Code and Architecture\n\nKSCrash used to be simple enough that a quick perusal of the source code would be enough to understand how it worked, but it's gotten big enough now that there should be some guideposts to help readers along. This document introduces you to the main code areas of KSCrash.\n\nThe Heart of KSCrash\nThe heart of KSCrash lives in KSCrashC.c\n\nThis file contains all of the most important access points to the KSCrash system.\n\nKSCrashC.c functions are also Objective-C/Swift wrapped in KSCrash.m\n\nThese are the main parts of KSCrashC.c:\n\nInstallation\nkscrash_install() installs and prepares the KSCrash system to handle crashes. You can configure KSCrash using the various configuration functions in this file (kscrash_setMonitoring() and such) before or after install.\n\nConfiguration\nAll of the main configuration settings are set via kscrash_setXYZ().\n\nApp State\nApple operating environments offer a number of notifications that tell you the current app state. These are hooked into various kscrash_notifyXYZ() functions.\n\nCrash Entry Point\nThe function onCrash is the main function called after a crash is reported. It handles examining the application state, writing the JSON crash report, and then allowing the crash to take its natural course.\n\nReport Management\nThis file also contains the low level primitive functions for managing crash reports: kscrash_getReportCount(), kscrash_getReportIDs(), kscrash_readReport(), kscrash_deleteReportWithID()\n\nEnabling / Disabling KSCrash\nYou can use kscrash_setMonitoring() to effectively enable or disable crash reporting at runtime.\n\nDetecting Crashes\nCrashes are detected via one of the monitors, which set up the data in a consistent way before passing control to the function onCrash(). These files are a bit tricky because some of them have to jump through a few hoops to get around OS differences, system idiosyncrasies, and just plain bugs.\n\nRecording Crashes\nCrashes are recorded to a JSON file via kscrashreport_writeStandardReport() in KSCrashReport.c. It makes use of a number of tools to accomplish this.\n\nReport Management\nReport management is primarily done in KSCrashReportStore.c\n\nReporting\nReporting is done using a probably-overcomplicated system of filters and sinks. Generally, to adapt KSCrash to your needs, you'd create your own sink.\n\nInstallations\nThe installation system was an attempt to make the user API a little easier by hiding most of the filter/sink stuff behind a simpler interface. Its success is debatable...\n\nNo code depends on the installation code, and KSCrash can actually work just fine without it.\n","slug":"iOS/Performance/KSCrash/KSCrashGuidline","published":1,"updated":"2021-07-29T06:46:00.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn44004biu9kba0v372e","content":"<p>1、KSCrash 简明教程<br>A Brief Tour of the KSCrash Code and Architecture</p>\n<p>KSCrash used to be simple enough that a quick perusal of the source code would be enough to understand how it worked, but it’s gotten big enough now that there should be some guideposts to help readers along. This document introduces you to the main code areas of KSCrash.</p>\n<p>The Heart of KSCrash<br>The heart of KSCrash lives in KSCrashC.c</p>\n<p>This file contains all of the most important access points to the KSCrash system.</p>\n<p>KSCrashC.c functions are also Objective-C/Swift wrapped in KSCrash.m</p>\n<p>These are the main parts of KSCrashC.c:</p>\n<p>Installation<br>kscrash_install() installs and prepares the KSCrash system to handle crashes. You can configure KSCrash using the various configuration functions in this file (kscrash_setMonitoring() and such) before or after install.</p>\n<p>Configuration<br>All of the main configuration settings are set via kscrash_setXYZ().</p>\n<p>App State<br>Apple operating environments offer a number of notifications that tell you the current app state. These are hooked into various kscrash_notifyXYZ() functions.</p>\n<p>Crash Entry Point<br>The function onCrash is the main function called after a crash is reported. It handles examining the application state, writing the JSON crash report, and then allowing the crash to take its natural course.</p>\n<p>Report Management<br>This file also contains the low level primitive functions for managing crash reports: kscrash_getReportCount(), kscrash_getReportIDs(), kscrash_readReport(), kscrash_deleteReportWithID()</p>\n<p>Enabling / Disabling KSCrash<br>You can use kscrash_setMonitoring() to effectively enable or disable crash reporting at runtime.</p>\n<p>Detecting Crashes<br>Crashes are detected via one of the monitors, which set up the data in a consistent way before passing control to the function onCrash(). These files are a bit tricky because some of them have to jump through a few hoops to get around OS differences, system idiosyncrasies, and just plain bugs.</p>\n<p>Recording Crashes<br>Crashes are recorded to a JSON file via kscrashreport_writeStandardReport() in KSCrashReport.c. It makes use of a number of tools to accomplish this.</p>\n<p>Report Management<br>Report management is primarily done in KSCrashReportStore.c</p>\n<p>Reporting<br>Reporting is done using a probably-overcomplicated system of filters and sinks. Generally, to adapt KSCrash to your needs, you’d create your own sink.</p>\n<p>Installations<br>The installation system was an attempt to make the user API a little easier by hiding most of the filter/sink stuff behind a simpler interface. Its success is debatable…</p>\n<p>No code depends on the installation code, and KSCrash can actually work just fine without it.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、KSCrash 简明教程<br>A Brief Tour of the KSCrash Code and Architecture</p>\n<p>KSCrash used to be simple enough that a quick perusal of the source code would be enough to understand how it worked, but it’s gotten big enough now that there should be some guideposts to help readers along. This document introduces you to the main code areas of KSCrash.</p>\n<p>The Heart of KSCrash<br>The heart of KSCrash lives in KSCrashC.c</p>\n<p>This file contains all of the most important access points to the KSCrash system.</p>\n<p>KSCrashC.c functions are also Objective-C/Swift wrapped in KSCrash.m</p>\n<p>These are the main parts of KSCrashC.c:</p>\n<p>Installation<br>kscrash_install() installs and prepares the KSCrash system to handle crashes. You can configure KSCrash using the various configuration functions in this file (kscrash_setMonitoring() and such) before or after install.</p>\n<p>Configuration<br>All of the main configuration settings are set via kscrash_setXYZ().</p>\n<p>App State<br>Apple operating environments offer a number of notifications that tell you the current app state. These are hooked into various kscrash_notifyXYZ() functions.</p>\n<p>Crash Entry Point<br>The function onCrash is the main function called after a crash is reported. It handles examining the application state, writing the JSON crash report, and then allowing the crash to take its natural course.</p>\n<p>Report Management<br>This file also contains the low level primitive functions for managing crash reports: kscrash_getReportCount(), kscrash_getReportIDs(), kscrash_readReport(), kscrash_deleteReportWithID()</p>\n<p>Enabling / Disabling KSCrash<br>You can use kscrash_setMonitoring() to effectively enable or disable crash reporting at runtime.</p>\n<p>Detecting Crashes<br>Crashes are detected via one of the monitors, which set up the data in a consistent way before passing control to the function onCrash(). These files are a bit tricky because some of them have to jump through a few hoops to get around OS differences, system idiosyncrasies, and just plain bugs.</p>\n<p>Recording Crashes<br>Crashes are recorded to a JSON file via kscrashreport_writeStandardReport() in KSCrashReport.c. It makes use of a number of tools to accomplish this.</p>\n<p>Report Management<br>Report management is primarily done in KSCrashReportStore.c</p>\n<p>Reporting<br>Reporting is done using a probably-overcomplicated system of filters and sinks. Generally, to adapt KSCrash to your needs, you’d create your own sink.</p>\n<p>Installations<br>The installation system was an attempt to make the user API a little easier by hiding most of the filter/sink stuff behind a simpler interface. Its success is debatable…</p>\n<p>No code depends on the installation code, and KSCrash can actually work just fine without it.</p>\n"},{"title":"iOS之野指针","abbrlink":"e4a2ca43","date":"2021-06-07T13:36:02.000Z","_content":"\n## 1. [iOS野指针定位总结](https://www.jianshu.com/p/8aba0ee41cd7)\n\n## 2. 如何定位Obj-C野指针\n\n### 2.1 [随机Crash(一)：先提高野指针Crash率](https://blog.csdn.net/tencent_bugly/article/details/46277055)\n\n### 2.2 [随机Crash(二)：让非必现Crash变成必现](https://blog.csdn.net/Tencent_Bugly/article/details/46374401?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control)\n\n### 2.3 [随机Crash(三)：加点黑科技让Crash自报家门](https://blog.csdn.net/Tencent_Bugly/article/details/46545155?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control)\n","source":"_posts/iOS/Performance/Exceptions/WiredPointer.md","raw":"---\ntitle: iOS之野指针\nabbrlink: e4a2ca43\ndate: 2021-06-07 21:36:02\ntags:\n---\n\n## 1. [iOS野指针定位总结](https://www.jianshu.com/p/8aba0ee41cd7)\n\n## 2. 如何定位Obj-C野指针\n\n### 2.1 [随机Crash(一)：先提高野指针Crash率](https://blog.csdn.net/tencent_bugly/article/details/46277055)\n\n### 2.2 [随机Crash(二)：让非必现Crash变成必现](https://blog.csdn.net/Tencent_Bugly/article/details/46374401?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control)\n\n### 2.3 [随机Crash(三)：加点黑科技让Crash自报家门](https://blog.csdn.net/Tencent_Bugly/article/details/46545155?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control)\n","slug":"iOS/Performance/Exceptions/WiredPointer","published":1,"updated":"2021-07-29T06:45:57.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn44004ciu9kdwov9iqq","content":"<h2 id=\"1-iOS野指针定位总结\"><a href=\"#1-iOS野指针定位总结\" class=\"headerlink\" title=\"1. iOS野指针定位总结\"></a>1. <a href=\"https://www.jianshu.com/p/8aba0ee41cd7\">iOS野指针定位总结</a></h2><h2 id=\"2-如何定位Obj-C野指针\"><a href=\"#2-如何定位Obj-C野指针\" class=\"headerlink\" title=\"2. 如何定位Obj-C野指针\"></a>2. 如何定位Obj-C野指针</h2><h3 id=\"2-1-随机Crash-一-：先提高野指针Crash率\"><a href=\"#2-1-随机Crash-一-：先提高野指针Crash率\" class=\"headerlink\" title=\"2.1 随机Crash(一)：先提高野指针Crash率\"></a>2.1 <a href=\"https://blog.csdn.net/tencent_bugly/article/details/46277055\">随机Crash(一)：先提高野指针Crash率</a></h3><h3 id=\"2-2-随机Crash-二-：让非必现Crash变成必现\"><a href=\"#2-2-随机Crash-二-：让非必现Crash变成必现\" class=\"headerlink\" title=\"2.2 随机Crash(二)：让非必现Crash变成必现\"></a>2.2 <a href=\"https://blog.csdn.net/Tencent_Bugly/article/details/46374401?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control\">随机Crash(二)：让非必现Crash变成必现</a></h3><h3 id=\"2-3-随机Crash-三-：加点黑科技让Crash自报家门\"><a href=\"#2-3-随机Crash-三-：加点黑科技让Crash自报家门\" class=\"headerlink\" title=\"2.3 随机Crash(三)：加点黑科技让Crash自报家门\"></a>2.3 <a href=\"https://blog.csdn.net/Tencent_Bugly/article/details/46545155?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control\">随机Crash(三)：加点黑科技让Crash自报家门</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-iOS野指针定位总结\"><a href=\"#1-iOS野指针定位总结\" class=\"headerlink\" title=\"1. iOS野指针定位总结\"></a>1. <a href=\"https://www.jianshu.com/p/8aba0ee41cd7\">iOS野指针定位总结</a></h2><h2 id=\"2-如何定位Obj-C野指针\"><a href=\"#2-如何定位Obj-C野指针\" class=\"headerlink\" title=\"2. 如何定位Obj-C野指针\"></a>2. 如何定位Obj-C野指针</h2><h3 id=\"2-1-随机Crash-一-：先提高野指针Crash率\"><a href=\"#2-1-随机Crash-一-：先提高野指针Crash率\" class=\"headerlink\" title=\"2.1 随机Crash(一)：先提高野指针Crash率\"></a>2.1 <a href=\"https://blog.csdn.net/tencent_bugly/article/details/46277055\">随机Crash(一)：先提高野指针Crash率</a></h3><h3 id=\"2-2-随机Crash-二-：让非必现Crash变成必现\"><a href=\"#2-2-随机Crash-二-：让非必现Crash变成必现\" class=\"headerlink\" title=\"2.2 随机Crash(二)：让非必现Crash变成必现\"></a>2.2 <a href=\"https://blog.csdn.net/Tencent_Bugly/article/details/46374401?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control\">随机Crash(二)：让非必现Crash变成必现</a></h3><h3 id=\"2-3-随机Crash-三-：加点黑科技让Crash自报家门\"><a href=\"#2-3-随机Crash-三-：加点黑科技让Crash自报家门\" class=\"headerlink\" title=\"2.3 随机Crash(三)：加点黑科技让Crash自报家门\"></a>2.3 <a href=\"https://blog.csdn.net/Tencent_Bugly/article/details/46545155?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control\">随机Crash(三)：加点黑科技让Crash自报家门</a></h3>"},{"title":"面试题","abbrlink":"5205ee75","date":"2021-07-26T16:00:00.000Z","_content":"\n## 1. [百度移动云可穿戴部门的面试经历](https://www.jianshu.com/p/d2709aeba459)\n","source":"_posts/iOS/Interview/InterviewCollections/Baidu.md","raw":"---\ntitle: 面试题\nabbrlink: 5205ee75\ndate: 2021-07-27 00:00:00\ntags:\n---\n\n## 1. [百度移动云可穿戴部门的面试经历](https://www.jianshu.com/p/d2709aeba459)\n","slug":"iOS/Interview/InterviewCollections/Baidu","published":1,"updated":"2021-09-16T06:42:30.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn45004diu9kbemx7z60","content":"<h2 id=\"1-百度移动云可穿戴部门的面试经历\"><a href=\"#1-百度移动云可穿戴部门的面试经历\" class=\"headerlink\" title=\"1. 百度移动云可穿戴部门的面试经历\"></a>1. <a href=\"https://www.jianshu.com/p/d2709aeba459\">百度移动云可穿戴部门的面试经历</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-百度移动云可穿戴部门的面试经历\"><a href=\"#1-百度移动云可穿戴部门的面试经历\" class=\"headerlink\" title=\"1. 百度移动云可穿戴部门的面试经历\"></a>1. <a href=\"https://www.jianshu.com/p/d2709aeba459\">百度移动云可穿戴部门的面试经历</a></h2>"},{"title":"面试题集","abbrlink":5925,"date":"2021-07-31T06:50:50.000Z","_content":"\n## 1. [我的 2020 iOS BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等](https://www.cnblogs.com/Julday/p/13230427.html)\n\n## 2. [阿里、字节：一套高效的iOS面试题](https://my.oschina.net/u/4229509/blog/3194840)\n\n## 3. [内卷吧! iOS开发君](https://juejin.cn/post/7003689115413643295?utm_source=gold_browser_extension)\n","source":"_posts/iOS/Interview/InterviewCollections/InterviewCollections.md","raw":"---\ntitle: 面试题集\nabbrlink: 5925\ndate: 2021-07-31 14:50:50\ntags:\n---\n\n## 1. [我的 2020 iOS BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等](https://www.cnblogs.com/Julday/p/13230427.html)\n\n## 2. [阿里、字节：一套高效的iOS面试题](https://my.oschina.net/u/4229509/blog/3194840)\n\n## 3. [内卷吧! iOS开发君](https://juejin.cn/post/7003689115413643295?utm_source=gold_browser_extension)\n","slug":"iOS/Interview/InterviewCollections/InterviewCollections","published":1,"updated":"2021-09-22T06:56:40.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn46004eiu9k5famfij4","content":"<h2 id=\"1-我的-2020-iOS-BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等\"><a href=\"#1-我的-2020-iOS-BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等\" class=\"headerlink\" title=\"1. 我的 2020 iOS BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等\"></a>1. <a href=\"https://www.cnblogs.com/Julday/p/13230427.html\">我的 2020 iOS BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等</a></h2><h2 id=\"2-阿里、字节：一套高效的iOS面试题\"><a href=\"#2-阿里、字节：一套高效的iOS面试题\" class=\"headerlink\" title=\"2. 阿里、字节：一套高效的iOS面试题\"></a>2. <a href=\"https://my.oschina.net/u/4229509/blog/3194840\">阿里、字节：一套高效的iOS面试题</a></h2><h2 id=\"3-内卷吧-iOS开发君\"><a href=\"#3-内卷吧-iOS开发君\" class=\"headerlink\" title=\"3. 内卷吧! iOS开发君\"></a>3. <a href=\"https://juejin.cn/post/7003689115413643295?utm_source=gold_browser_extension\">内卷吧! iOS开发君</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-我的-2020-iOS-BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等\"><a href=\"#1-我的-2020-iOS-BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等\" class=\"headerlink\" title=\"1. 我的 2020 iOS BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等\"></a>1. <a href=\"https://www.cnblogs.com/Julday/p/13230427.html\">我的 2020 iOS BAT面试心得：腾讯、Bigo、字节、快手、伴鱼、百度、微博等</a></h2><h2 id=\"2-阿里、字节：一套高效的iOS面试题\"><a href=\"#2-阿里、字节：一套高效的iOS面试题\" class=\"headerlink\" title=\"2. 阿里、字节：一套高效的iOS面试题\"></a>2. <a href=\"https://my.oschina.net/u/4229509/blog/3194840\">阿里、字节：一套高效的iOS面试题</a></h2><h2 id=\"3-内卷吧-iOS开发君\"><a href=\"#3-内卷吧-iOS开发君\" class=\"headerlink\" title=\"3. 内卷吧! iOS开发君\"></a>3. <a href=\"https://juejin.cn/post/7003689115413643295?utm_source=gold_browser_extension\">内卷吧! iOS开发君</a></h2>"},{"title":"iOS 试题","abbrlink":35713,"date":"2021-07-29T02:01:00.000Z","_content":"<!--\n * @Author: hepeng.l\n * @Date: 2021-05-20 10:33:40\n * @LastEditors: hepeng.l\n * @LastEditTime: 2021-05-20 10:40:39\n * @Description: \n-->\n\n## iOS 试题\n\n### 第一部分\n\n1、IM模块设计\n2、Block实现原理\n3、包大小优化\n4、卡顿优化，卡顿检测\n5、埋点\n6、APP优化，\n7、大量数据存储、同步，\n8、线上故障、\n9、多线程\n\n### 第二部分\n\n1、苹果沙盒原理\n\n沙盒是一种用于防止不同应用之间互相访问内容的安全机制。\n\n2、常用存储方式\n\n归档，plist，文件，数据库，keychain\n\nkeychain： Keychain Services 是 macOS 和 iOS 都提供一种安全地存储敏感信息的工具，keychian 依赖用于签名的provisioning profile描述文件。\n\n3、uiview与layer\n\n4、app共享\n\n5、弱网优化\n\n6、方法交换\n\n7、请求接口拦截\n\n8、[tableview优化](https://juejin.cn/post/6850418118850789390)\n\n1. 避免离屏渲染；\n2. 异步绘制；\n3. 子线程计算；\n4. 高度缓存；\n5. cell 复用；\n6. 图片异步加载；\n\n9、分类调用时机\n\n### 第三部分\n\n1、iOS 内存管理机制 ，alloc/init 方法背后做了哪些工作？\n2、什么是离屏渲染，为什么会有离屏渲染，哪些操作会造成离屏渲染，光栅化为什么形成离屏渲染？\n\n3.2.1 什么是离屏渲染\n\n有时因为一些限制，无法把渲染结果直接写入frame buffer，而是先暂存在另外的内存区域，之后再写入frame buffer，那么这个过程被称之为离屏渲染。也就是GPU需要在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。\n\nalpha，opaque，hide，translucent；[透明度](https://developer.apple.com/documentation/uikit/uiview/1622417-alpha)\n\nlayer 用 opacity，UIview 用 alpha，alpha 的值范围从 0.0（translucent）~ 1.0（opaque）\n\nshouldRasterize 处理圆角；\nshadowPath 处理阴影；\n\n3.2.3 哪些操作会造成离屏渲染\n\nmask（遮罩）、\nshadow（阴影）、\nshouldRasterize（光栅化）、\nedge antialiasing（抗锯齿）、\ngroup opacity（不透明）、\n复杂形状设置圆角等、\n渐变\n\n3、UI布局方式，autolayout 如何获取真实 frame，何时能拿到真实的frame，storyboard 合并冲突如何解决？\n4、TCP和UDP协议的区别，TCP协议的四次挥手，半连接状态超时会怎样？\n5、Instrument 的使用\n6、runtime 在项目中的应用\n7、冷启动优化\n","source":"_posts/iOS/Interview/InterviewCollections/Tencent.md","raw":"---\ntitle: iOS 试题\nabbrlink: 35713\ndate: 2021-07-29 10:01:00\ntags:\n---\n<!--\n * @Author: hepeng.l\n * @Date: 2021-05-20 10:33:40\n * @LastEditors: hepeng.l\n * @LastEditTime: 2021-05-20 10:40:39\n * @Description: \n-->\n\n## iOS 试题\n\n### 第一部分\n\n1、IM模块设计\n2、Block实现原理\n3、包大小优化\n4、卡顿优化，卡顿检测\n5、埋点\n6、APP优化，\n7、大量数据存储、同步，\n8、线上故障、\n9、多线程\n\n### 第二部分\n\n1、苹果沙盒原理\n\n沙盒是一种用于防止不同应用之间互相访问内容的安全机制。\n\n2、常用存储方式\n\n归档，plist，文件，数据库，keychain\n\nkeychain： Keychain Services 是 macOS 和 iOS 都提供一种安全地存储敏感信息的工具，keychian 依赖用于签名的provisioning profile描述文件。\n\n3、uiview与layer\n\n4、app共享\n\n5、弱网优化\n\n6、方法交换\n\n7、请求接口拦截\n\n8、[tableview优化](https://juejin.cn/post/6850418118850789390)\n\n1. 避免离屏渲染；\n2. 异步绘制；\n3. 子线程计算；\n4. 高度缓存；\n5. cell 复用；\n6. 图片异步加载；\n\n9、分类调用时机\n\n### 第三部分\n\n1、iOS 内存管理机制 ，alloc/init 方法背后做了哪些工作？\n2、什么是离屏渲染，为什么会有离屏渲染，哪些操作会造成离屏渲染，光栅化为什么形成离屏渲染？\n\n3.2.1 什么是离屏渲染\n\n有时因为一些限制，无法把渲染结果直接写入frame buffer，而是先暂存在另外的内存区域，之后再写入frame buffer，那么这个过程被称之为离屏渲染。也就是GPU需要在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。\n\nalpha，opaque，hide，translucent；[透明度](https://developer.apple.com/documentation/uikit/uiview/1622417-alpha)\n\nlayer 用 opacity，UIview 用 alpha，alpha 的值范围从 0.0（translucent）~ 1.0（opaque）\n\nshouldRasterize 处理圆角；\nshadowPath 处理阴影；\n\n3.2.3 哪些操作会造成离屏渲染\n\nmask（遮罩）、\nshadow（阴影）、\nshouldRasterize（光栅化）、\nedge antialiasing（抗锯齿）、\ngroup opacity（不透明）、\n复杂形状设置圆角等、\n渐变\n\n3、UI布局方式，autolayout 如何获取真实 frame，何时能拿到真实的frame，storyboard 合并冲突如何解决？\n4、TCP和UDP协议的区别，TCP协议的四次挥手，半连接状态超时会怎样？\n5、Instrument 的使用\n6、runtime 在项目中的应用\n7、冷启动优化\n","slug":"iOS/Interview/InterviewCollections/Tencent","published":1,"updated":"2021-09-16T06:42:30.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn46004fiu9kd7vv3vpw","content":"<!--\n * @Author: hepeng.l\n * @Date: 2021-05-20 10:33:40\n * @LastEditors: hepeng.l\n * @LastEditTime: 2021-05-20 10:40:39\n * @Description: \n-->\n\n<h2 id=\"iOS-试题\"><a href=\"#iOS-试题\" class=\"headerlink\" title=\"iOS 试题\"></a>iOS 试题</h2><h3 id=\"第一部分\"><a href=\"#第一部分\" class=\"headerlink\" title=\"第一部分\"></a>第一部分</h3><p>1、IM模块设计<br>2、Block实现原理<br>3、包大小优化<br>4、卡顿优化，卡顿检测<br>5、埋点<br>6、APP优化，<br>7、大量数据存储、同步，<br>8、线上故障、<br>9、多线程</p>\n<h3 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h3><p>1、苹果沙盒原理</p>\n<p>沙盒是一种用于防止不同应用之间互相访问内容的安全机制。</p>\n<p>2、常用存储方式</p>\n<p>归档，plist，文件，数据库，keychain</p>\n<p>keychain： Keychain Services 是 macOS 和 iOS 都提供一种安全地存储敏感信息的工具，keychian 依赖用于签名的provisioning profile描述文件。</p>\n<p>3、uiview与layer</p>\n<p>4、app共享</p>\n<p>5、弱网优化</p>\n<p>6、方法交换</p>\n<p>7、请求接口拦截</p>\n<p>8、<a href=\"https://juejin.cn/post/6850418118850789390\">tableview优化</a></p>\n<ol>\n<li>避免离屏渲染；</li>\n<li>异步绘制；</li>\n<li>子线程计算；</li>\n<li>高度缓存；</li>\n<li>cell 复用；</li>\n<li>图片异步加载；</li>\n</ol>\n<p>9、分类调用时机</p>\n<h3 id=\"第三部分\"><a href=\"#第三部分\" class=\"headerlink\" title=\"第三部分\"></a>第三部分</h3><p>1、iOS 内存管理机制 ，alloc/init 方法背后做了哪些工作？<br>2、什么是离屏渲染，为什么会有离屏渲染，哪些操作会造成离屏渲染，光栅化为什么形成离屏渲染？</p>\n<p>3.2.1 什么是离屏渲染</p>\n<p>有时因为一些限制，无法把渲染结果直接写入frame buffer，而是先暂存在另外的内存区域，之后再写入frame buffer，那么这个过程被称之为离屏渲染。也就是GPU需要在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。</p>\n<p>alpha，opaque，hide，translucent；<a href=\"https://developer.apple.com/documentation/uikit/uiview/1622417-alpha\">透明度</a></p>\n<p>layer 用 opacity，UIview 用 alpha，alpha 的值范围从 0.0（translucent）~ 1.0（opaque）</p>\n<p>shouldRasterize 处理圆角；<br>shadowPath 处理阴影；</p>\n<p>3.2.3 哪些操作会造成离屏渲染</p>\n<p>mask（遮罩）、<br>shadow（阴影）、<br>shouldRasterize（光栅化）、<br>edge antialiasing（抗锯齿）、<br>group opacity（不透明）、<br>复杂形状设置圆角等、<br>渐变</p>\n<p>3、UI布局方式，autolayout 如何获取真实 frame，何时能拿到真实的frame，storyboard 合并冲突如何解决？<br>4、TCP和UDP协议的区别，TCP协议的四次挥手，半连接状态超时会怎样？<br>5、Instrument 的使用<br>6、runtime 在项目中的应用<br>7、冷启动优化</p>\n","site":{"data":{}},"excerpt":"","more":"<!--\n * @Author: hepeng.l\n * @Date: 2021-05-20 10:33:40\n * @LastEditors: hepeng.l\n * @LastEditTime: 2021-05-20 10:40:39\n * @Description: \n-->\n\n<h2 id=\"iOS-试题\"><a href=\"#iOS-试题\" class=\"headerlink\" title=\"iOS 试题\"></a>iOS 试题</h2><h3 id=\"第一部分\"><a href=\"#第一部分\" class=\"headerlink\" title=\"第一部分\"></a>第一部分</h3><p>1、IM模块设计<br>2、Block实现原理<br>3、包大小优化<br>4、卡顿优化，卡顿检测<br>5、埋点<br>6、APP优化，<br>7、大量数据存储、同步，<br>8、线上故障、<br>9、多线程</p>\n<h3 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h3><p>1、苹果沙盒原理</p>\n<p>沙盒是一种用于防止不同应用之间互相访问内容的安全机制。</p>\n<p>2、常用存储方式</p>\n<p>归档，plist，文件，数据库，keychain</p>\n<p>keychain： Keychain Services 是 macOS 和 iOS 都提供一种安全地存储敏感信息的工具，keychian 依赖用于签名的provisioning profile描述文件。</p>\n<p>3、uiview与layer</p>\n<p>4、app共享</p>\n<p>5、弱网优化</p>\n<p>6、方法交换</p>\n<p>7、请求接口拦截</p>\n<p>8、<a href=\"https://juejin.cn/post/6850418118850789390\">tableview优化</a></p>\n<ol>\n<li>避免离屏渲染；</li>\n<li>异步绘制；</li>\n<li>子线程计算；</li>\n<li>高度缓存；</li>\n<li>cell 复用；</li>\n<li>图片异步加载；</li>\n</ol>\n<p>9、分类调用时机</p>\n<h3 id=\"第三部分\"><a href=\"#第三部分\" class=\"headerlink\" title=\"第三部分\"></a>第三部分</h3><p>1、iOS 内存管理机制 ，alloc/init 方法背后做了哪些工作？<br>2、什么是离屏渲染，为什么会有离屏渲染，哪些操作会造成离屏渲染，光栅化为什么形成离屏渲染？</p>\n<p>3.2.1 什么是离屏渲染</p>\n<p>有时因为一些限制，无法把渲染结果直接写入frame buffer，而是先暂存在另外的内存区域，之后再写入frame buffer，那么这个过程被称之为离屏渲染。也就是GPU需要在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。</p>\n<p>alpha，opaque，hide，translucent；<a href=\"https://developer.apple.com/documentation/uikit/uiview/1622417-alpha\">透明度</a></p>\n<p>layer 用 opacity，UIview 用 alpha，alpha 的值范围从 0.0（translucent）~ 1.0（opaque）</p>\n<p>shouldRasterize 处理圆角；<br>shadowPath 处理阴影；</p>\n<p>3.2.3 哪些操作会造成离屏渲染</p>\n<p>mask（遮罩）、<br>shadow（阴影）、<br>shouldRasterize（光栅化）、<br>edge antialiasing（抗锯齿）、<br>group opacity（不透明）、<br>复杂形状设置圆角等、<br>渐变</p>\n<p>3、UI布局方式，autolayout 如何获取真实 frame，何时能拿到真实的frame，storyboard 合并冲突如何解决？<br>4、TCP和UDP协议的区别，TCP协议的四次挥手，半连接状态超时会怎样？<br>5、Instrument 的使用<br>6、runtime 在项目中的应用<br>7、冷启动优化</p>\n"},{"title":"iOS 项目管理之 Cocoapods","abbrlink":46298,"date":"2021-09-09T13:36:02.000Z","_content":"\n## 1. [Cocoapods](https://cocoapods.org/)\n","source":"_posts/iOS/ProjectManager/Cocoapod/Cocoapod.md","raw":"---\ntitle: iOS 项目管理之 Cocoapods\nabbrlink: 46298\ndate: 2021-09-09 21:36:02\ntags:\n---\n\n## 1. [Cocoapods](https://cocoapods.org/)\n","slug":"iOS/ProjectManager/Cocoapod/Cocoapod","published":1,"updated":"2021-09-22T06:56:40.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn47004giu9kg0v00ul5","content":"<h2 id=\"1-Cocoapods\"><a href=\"#1-Cocoapods\" class=\"headerlink\" title=\"1. Cocoapods\"></a>1. <a href=\"https://cocoapods.org/\">Cocoapods</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Cocoapods\"><a href=\"#1-Cocoapods\" class=\"headerlink\" title=\"1. Cocoapods\"></a>1. <a href=\"https://cocoapods.org/\">Cocoapods</a></h2>"},{"title":"iOS 项目管理之 Umbrella Framework","abbrlink":17050,"date":"2021-09-13T13:36:02.000Z","_content":"\n## 1. [Umbrella Header在framework中的应用](http://blog.startry.com/2015/08/25/Renaming-umbrella-header-for-iOS-framework/)\n\nUmbrella Framework 与 Standard Framework 的区别是，umbrella framework 可以包含子 framework，并且必须使用 `Master Header File`。\n","source":"_posts/iOS/ProjectManager/Cocoapod/UmbrellaFramework.md","raw":"---\ntitle: iOS 项目管理之 Umbrella Framework\nabbrlink: 17050\ndate: 2021-09-13 21:36:02\ntags:\n---\n\n## 1. [Umbrella Header在framework中的应用](http://blog.startry.com/2015/08/25/Renaming-umbrella-header-for-iOS-framework/)\n\nUmbrella Framework 与 Standard Framework 的区别是，umbrella framework 可以包含子 framework，并且必须使用 `Master Header File`。\n","slug":"iOS/ProjectManager/Cocoapod/UmbrellaFramework","published":1,"updated":"2021-09-22T06:56:40.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn47004hiu9kds6j61hd","content":"<h2 id=\"1-Umbrella-Header在framework中的应用\"><a href=\"#1-Umbrella-Header在framework中的应用\" class=\"headerlink\" title=\"1. Umbrella Header在framework中的应用\"></a>1. <a href=\"http://blog.startry.com/2015/08/25/Renaming-umbrella-header-for-iOS-framework/\">Umbrella Header在framework中的应用</a></h2><p>Umbrella Framework 与 Standard Framework 的区别是，umbrella framework 可以包含子 framework，并且必须使用 <code>Master Header File</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Umbrella-Header在framework中的应用\"><a href=\"#1-Umbrella-Header在framework中的应用\" class=\"headerlink\" title=\"1. Umbrella Header在framework中的应用\"></a>1. <a href=\"http://blog.startry.com/2015/08/25/Renaming-umbrella-header-for-iOS-framework/\">Umbrella Header在framework中的应用</a></h2><p>Umbrella Framework 与 Standard Framework 的区别是，umbrella framework 可以包含子 framework，并且必须使用 <code>Master Header File</code>。</p>\n"},{"title":"iOS 之自动化","abbrlink":18561,"date":"2021-07-28T16:00:00.000Z","_content":"## iOS 自动化\n\n## 1. 模拟器\n\n### 1.1 模拟器列表\n\n```shell\ninstruments -s\n\n// or \n\nxcrun xctrace --list devices\n```\n\n### 1.2 启动模拟器\n\n```shell\nxcrun instruments -w 'iPhone X'\n\n// or\n\nopen -a Simulator\n```\n\n## 2. 模拟器应用\n\n### 2.1 安装 App\n\n```xcrun simctl install booted /Users/builder/builder/document/other/551/Payload/DYZB.app```\n\n### 2.2 启动 App\n\n```xcrun simctl launch booted 'com.tencent.live4iphone'```\n\n### 2.3 卸载 App\n\n```xcrun simctl uninstall booted 'com.tencent.live4iphone'```\n\n## 3. 附注\n\n另外一套工具 idevice[^idevice].\n\n[^idevice]: [idevice](https://github.com/libimobiledevice/libimobiledevice)\n","source":"_posts/iOS/ProjectManager/ShellScripts/Simulator.md","raw":"---\ntitle: iOS 之自动化\nabbrlink: 18561\ndate: 2021-07-29 00:00:00\ntags:\n---\n## iOS 自动化\n\n## 1. 模拟器\n\n### 1.1 模拟器列表\n\n```shell\ninstruments -s\n\n// or \n\nxcrun xctrace --list devices\n```\n\n### 1.2 启动模拟器\n\n```shell\nxcrun instruments -w 'iPhone X'\n\n// or\n\nopen -a Simulator\n```\n\n## 2. 模拟器应用\n\n### 2.1 安装 App\n\n```xcrun simctl install booted /Users/builder/builder/document/other/551/Payload/DYZB.app```\n\n### 2.2 启动 App\n\n```xcrun simctl launch booted 'com.tencent.live4iphone'```\n\n### 2.3 卸载 App\n\n```xcrun simctl uninstall booted 'com.tencent.live4iphone'```\n\n## 3. 附注\n\n另外一套工具 idevice[^idevice].\n\n[^idevice]: [idevice](https://github.com/libimobiledevice/libimobiledevice)\n","slug":"iOS/ProjectManager/ShellScripts/Simulator","published":1,"updated":"2021-07-29T06:46:00.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn48004iiu9k47wbhn4m","content":"<h2 id=\"iOS-自动化\"><a href=\"#iOS-自动化\" class=\"headerlink\" title=\"iOS 自动化\"></a>iOS 自动化</h2><h2 id=\"1-模拟器\"><a href=\"#1-模拟器\" class=\"headerlink\" title=\"1. 模拟器\"></a>1. 模拟器</h2><h3 id=\"1-1-模拟器列表\"><a href=\"#1-1-模拟器列表\" class=\"headerlink\" title=\"1.1 模拟器列表\"></a>1.1 模拟器列表</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instruments -s</span><br><span class=\"line\"></span><br><span class=\"line\">// or </span><br><span class=\"line\"></span><br><span class=\"line\">xcrun xctrace --list devices</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-启动模拟器\"><a href=\"#1-2-启动模拟器\" class=\"headerlink\" title=\"1.2 启动模拟器\"></a>1.2 启动模拟器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcrun instruments -w &#x27;iPhone X&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// or</span><br><span class=\"line\"></span><br><span class=\"line\">open -a Simulator</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-模拟器应用\"><a href=\"#2-模拟器应用\" class=\"headerlink\" title=\"2. 模拟器应用\"></a>2. 模拟器应用</h2><h3 id=\"2-1-安装-App\"><a href=\"#2-1-安装-App\" class=\"headerlink\" title=\"2.1 安装 App\"></a>2.1 安装 App</h3><p><code>xcrun simctl install booted /Users/builder/builder/document/other/551/Payload/DYZB.app</code></p>\n<h3 id=\"2-2-启动-App\"><a href=\"#2-2-启动-App\" class=\"headerlink\" title=\"2.2 启动 App\"></a>2.2 启动 App</h3><p><code>xcrun simctl launch booted &#39;com.tencent.live4iphone&#39;</code></p>\n<h3 id=\"2-3-卸载-App\"><a href=\"#2-3-卸载-App\" class=\"headerlink\" title=\"2.3 卸载 App\"></a>2.3 卸载 App</h3><p><code>xcrun simctl uninstall booted &#39;com.tencent.live4iphone&#39;</code></p>\n<h2 id=\"3-附注\"><a href=\"#3-附注\" class=\"headerlink\" title=\"3. 附注\"></a>3. 附注</h2><p>另外一套工具 idevice<a href=\"%5Bidevice%5D(https://github.com/libimobiledevice/libimobiledevice)\">^idevice</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"iOS-自动化\"><a href=\"#iOS-自动化\" class=\"headerlink\" title=\"iOS 自动化\"></a>iOS 自动化</h2><h2 id=\"1-模拟器\"><a href=\"#1-模拟器\" class=\"headerlink\" title=\"1. 模拟器\"></a>1. 模拟器</h2><h3 id=\"1-1-模拟器列表\"><a href=\"#1-1-模拟器列表\" class=\"headerlink\" title=\"1.1 模拟器列表\"></a>1.1 模拟器列表</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instruments -s</span><br><span class=\"line\"></span><br><span class=\"line\">// or </span><br><span class=\"line\"></span><br><span class=\"line\">xcrun xctrace --list devices</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-启动模拟器\"><a href=\"#1-2-启动模拟器\" class=\"headerlink\" title=\"1.2 启动模拟器\"></a>1.2 启动模拟器</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcrun instruments -w &#x27;iPhone X&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// or</span><br><span class=\"line\"></span><br><span class=\"line\">open -a Simulator</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-模拟器应用\"><a href=\"#2-模拟器应用\" class=\"headerlink\" title=\"2. 模拟器应用\"></a>2. 模拟器应用</h2><h3 id=\"2-1-安装-App\"><a href=\"#2-1-安装-App\" class=\"headerlink\" title=\"2.1 安装 App\"></a>2.1 安装 App</h3><p><code>xcrun simctl install booted /Users/builder/builder/document/other/551/Payload/DYZB.app</code></p>\n<h3 id=\"2-2-启动-App\"><a href=\"#2-2-启动-App\" class=\"headerlink\" title=\"2.2 启动 App\"></a>2.2 启动 App</h3><p><code>xcrun simctl launch booted &#39;com.tencent.live4iphone&#39;</code></p>\n<h3 id=\"2-3-卸载-App\"><a href=\"#2-3-卸载-App\" class=\"headerlink\" title=\"2.3 卸载 App\"></a>2.3 卸载 App</h3><p><code>xcrun simctl uninstall booted &#39;com.tencent.live4iphone&#39;</code></p>\n<h2 id=\"3-附注\"><a href=\"#3-附注\" class=\"headerlink\" title=\"3. 附注\"></a>3. 附注</h2><p>另外一套工具 idevice<a href=\"%5Bidevice%5D(https://github.com/libimobiledevice/libimobiledevice)\">^idevice</a>.</p>\n"},{"title":"Appium 快速上手","abbrlink":"37978e5f","date":"2021-04-20T13:36:02.000Z","_content":"## 1. 参考\n\n### 1.1 [Appium教程](https://blog.csdn.net/qq_32502511/article/details/106082084)\n","source":"_posts/iOS/Tools/Appium/AppiumGuidance.md","raw":"---\ntitle: Appium 快速上手\nabbrlink: 37978e5f\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. 参考\n\n### 1.1 [Appium教程](https://blog.csdn.net/qq_32502511/article/details/106082084)\n","slug":"iOS/Tools/Appium/AppiumGuidance","published":1,"updated":"2021-07-29T06:45:59.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn49004jiu9k17mifkvp","content":"<h2 id=\"1-参考\"><a href=\"#1-参考\" class=\"headerlink\" title=\"1. 参考\"></a>1. 参考</h2><h3 id=\"1-1-Appium教程\"><a href=\"#1-1-Appium教程\" class=\"headerlink\" title=\"1.1 Appium教程\"></a>1.1 <a href=\"https://blog.csdn.net/qq_32502511/article/details/106082084\">Appium教程</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-参考\"><a href=\"#1-参考\" class=\"headerlink\" title=\"1. 参考\"></a>1. 参考</h2><h3 id=\"1-1-Appium教程\"><a href=\"#1-1-Appium教程\" class=\"headerlink\" title=\"1.1 Appium教程\"></a>1.1 <a href=\"https://blog.csdn.net/qq_32502511/article/details/106082084\">Appium教程</a></h3>"},{"title":"Vim 常用操作","abbrlink":"ad515b52","date":"2021-04-20T13:36:02.000Z","_content":"## 1. vim 常用操作\n\n![vim 常用操作](../Resources/vim.png)\n","source":"_posts/iOS/Tools/Vim/VimOperation.md","raw":"---\ntitle: Vim 常用操作\nabbrlink: ad515b52\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. vim 常用操作\n\n![vim 常用操作](../Resources/vim.png)\n","slug":"iOS/Tools/Vim/VimOperation","published":1,"updated":"2021-07-29T06:45:59.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4d004kiu9k4dxt9coa","content":"<h2 id=\"1-vim-常用操作\"><a href=\"#1-vim-常用操作\" class=\"headerlink\" title=\"1. vim 常用操作\"></a>1. vim 常用操作</h2><p><img src=\"/../Resources/vim.png\" alt=\"vim 常用操作\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-vim-常用操作\"><a href=\"#1-vim-常用操作\" class=\"headerlink\" title=\"1. vim 常用操作\"></a>1. vim 常用操作</h2><p><img src=\"/../Resources/vim.png\" alt=\"vim 常用操作\"></p>\n"},{"title":"iOS之React-Native与原生端通信","abbrlink":"67a88861","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. 属性\n\n### 1.1 从原生组件传递属性到 React Native\n\n#### 1.1.1 初始化参数: initialProperties\n\niOS 端：\n\n```objective-c\nNSArray *imageList = @[@\"http://foo.com/bar1.png\",\n                       @\"http://foo.com/bar2.png\"];\n\nNSDictionary *props = @{@\"images\" : imageList};\n\nRCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge\n                                                 moduleName:@\"ImageBrowserApp\"\n                                          initialProperties:props];\n```\n\nWeb 端：\n\n```javascript\nimport React from 'react';\nimport {\n  View,\n  Image\n} from 'react-native';\n\nexport default class ImageBrowserApp extends React.Component {\n  renderImage(imgURI) {\n    return (\n      <Image source={{uri: imgURI}} />\n    );\n  }\n  render() {\n    return (\n      <View>\n        {this.props.images.map(this.renderImage)}\n      </View>\n    );\n  }\n}\n\n```\n\n#### 1.1.2 可读写参数: appProperties\n\n```objective-c\nNSArray *imageList = @[@\"http://foo.com/bar3.png\",\n                       @\"http://foo.com/bar4.png\"];\n\nrootView.appProperties = @{@\"images\" : imageList};\n```\n\n**可以随时更新属性，但是更新必须在主线程中进行，读取则可以在任何线程中进行。**\n\n### 1.2 从 React Native 传递属性到原生组件\n\n## 2. 跨端交互\n\nReact Native 允许使用跨语言的函数调用。你可以在 JS 中调用原生代码，也可以在原生代码中调用 JS。在不同端需要用不同的方法来实现相同的目的。在原生代码中我们使用事件机制来调度 JS 中的处理函数，而在 React Native 中我们直接使用原生模块导出的方法。\n\n### 2.1 事件\n\n从原生代码调用 React Natvie 函数。\n\n事件很强大，它可以不需要引用直接修改 React Native 组件。但是，当你使用时要注意下面这些陷阱：\n\n* 由于事件可以从各种地方产生，它们可能导致混乱的依赖。\n* 事件共享相同的命名空间，因此你可能遇到名字冲突。冲突不会在编写代码时被探测到，因此很难排错。\n* 如果你使用了同一个 React Native 组件的多个引用，然后想在事件中区分它们，name 你很可能需要在事件中同时传递一些标识（你可以使用原生视图中的reactTag作为标识）。\n  \n在 React Native 中嵌入原生组件时，通常的做法是用原生组件的 RCTViewManager 作为视图的代理，通过 bridge 向 JS 发送事件。这样可以集中在一处调用相关的事件。\n\n### 2.2 原生模块\n\n从 React Native 中调用原生方法。\n\n原生模块是 JS 中也可以使用的 Objective-C 类。一般来说这样的每一个模块的实例都是在每一次通过 JS bridge 通信时创建的。他们可以导出任意的函数和常量给 React Native。相关细节可以参阅这篇文章。\n\n事实上原生模块的单实例模式限制了嵌入。假设我们有一个 React Native 组件被嵌入了一个原生视图，并且我们希望更新原生的父视图。使用原生模块机制，我们可以导出一个函数，不仅要接收预设参数，还要接收父视图的标识。这个标识将会用来获得父视图的引用以更新父视图。那样的话，我们需要维持模块中标识到原生模块的映射。虽然这个解决办法很复杂，它仍被用在了管理所有 React Native 视图的RCTUIManager类中，\n\n## 3. 布局计算流\n\n### 3.1 在 React Native 中嵌入一个原生组件：[iOS 原生UI组件](https://www.react-native.cn/docs/native-components-ios)\n\n### 3.2 在原生中嵌入一个 React Native 组件\n\n#### 3.2.1 固定大小的 React Native 内容\n\nflexbox 是最简单的办法。\n\n#### 3.2.2 弹性大小的 React Native\n\n有时候我们需要渲染一些不知道大小的内容。假设尺寸将会在 JS 中动态指定。我们有两个解决办法。\n\n* 你可以将 React Native 视图包裹在ScrollView中。这样可以保证你的内容总是可以访问，并且不会和原生视图重叠。\n* React Native 允许你在 JS 中决定 RN 应用的尺寸，并且将它传递给宿主视图RCTRootView。然后宿主视图将重新布局子视图，保证 UI 统一。我们通过RCTRootView的弹性模式来达到目的。\n\nRCTRootView支持 4 种不同的弹性模式：\n\n```objective-c\n// RCTRootView.h\n\ntypedef NS_ENUM(NSInteger, RCTRootViewSizeFlexibility) {\n  RCTRootViewSizeFlexibilityNone = 0,\n  RCTRootViewSizeFlexibilityWidth,\n  RCTRootViewSizeFlexibilityHeight,\n  RCTRootViewSizeFlexibilityWidthAndHeight,\n};\n```\n\n> 注意： 在 JS 和原生中都设置弹性尺寸可能导致不确定的行为。比如--不要在设置RCTRootView为RCTRootViewSizeFlexibilityWidth时同时指定最顶层的 RN 组件宽度可变（使用 Flexbox）。\n\n> 注意： React Native 布局是通过一个单独的线程进行计算，而原生 UI 视图是通过主线程更新。这可能导致短暂的原生端和 React Native 端的不一致。\n","source":"_posts/iOS/Webs/React-Native/NativeCommunication.md","raw":"---\ntitle: iOS之React-Native与原生端通信\nabbrlink: 67a88861\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. 属性\n\n### 1.1 从原生组件传递属性到 React Native\n\n#### 1.1.1 初始化参数: initialProperties\n\niOS 端：\n\n```objective-c\nNSArray *imageList = @[@\"http://foo.com/bar1.png\",\n                       @\"http://foo.com/bar2.png\"];\n\nNSDictionary *props = @{@\"images\" : imageList};\n\nRCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge\n                                                 moduleName:@\"ImageBrowserApp\"\n                                          initialProperties:props];\n```\n\nWeb 端：\n\n```javascript\nimport React from 'react';\nimport {\n  View,\n  Image\n} from 'react-native';\n\nexport default class ImageBrowserApp extends React.Component {\n  renderImage(imgURI) {\n    return (\n      <Image source={{uri: imgURI}} />\n    );\n  }\n  render() {\n    return (\n      <View>\n        {this.props.images.map(this.renderImage)}\n      </View>\n    );\n  }\n}\n\n```\n\n#### 1.1.2 可读写参数: appProperties\n\n```objective-c\nNSArray *imageList = @[@\"http://foo.com/bar3.png\",\n                       @\"http://foo.com/bar4.png\"];\n\nrootView.appProperties = @{@\"images\" : imageList};\n```\n\n**可以随时更新属性，但是更新必须在主线程中进行，读取则可以在任何线程中进行。**\n\n### 1.2 从 React Native 传递属性到原生组件\n\n## 2. 跨端交互\n\nReact Native 允许使用跨语言的函数调用。你可以在 JS 中调用原生代码，也可以在原生代码中调用 JS。在不同端需要用不同的方法来实现相同的目的。在原生代码中我们使用事件机制来调度 JS 中的处理函数，而在 React Native 中我们直接使用原生模块导出的方法。\n\n### 2.1 事件\n\n从原生代码调用 React Natvie 函数。\n\n事件很强大，它可以不需要引用直接修改 React Native 组件。但是，当你使用时要注意下面这些陷阱：\n\n* 由于事件可以从各种地方产生，它们可能导致混乱的依赖。\n* 事件共享相同的命名空间，因此你可能遇到名字冲突。冲突不会在编写代码时被探测到，因此很难排错。\n* 如果你使用了同一个 React Native 组件的多个引用，然后想在事件中区分它们，name 你很可能需要在事件中同时传递一些标识（你可以使用原生视图中的reactTag作为标识）。\n  \n在 React Native 中嵌入原生组件时，通常的做法是用原生组件的 RCTViewManager 作为视图的代理，通过 bridge 向 JS 发送事件。这样可以集中在一处调用相关的事件。\n\n### 2.2 原生模块\n\n从 React Native 中调用原生方法。\n\n原生模块是 JS 中也可以使用的 Objective-C 类。一般来说这样的每一个模块的实例都是在每一次通过 JS bridge 通信时创建的。他们可以导出任意的函数和常量给 React Native。相关细节可以参阅这篇文章。\n\n事实上原生模块的单实例模式限制了嵌入。假设我们有一个 React Native 组件被嵌入了一个原生视图，并且我们希望更新原生的父视图。使用原生模块机制，我们可以导出一个函数，不仅要接收预设参数，还要接收父视图的标识。这个标识将会用来获得父视图的引用以更新父视图。那样的话，我们需要维持模块中标识到原生模块的映射。虽然这个解决办法很复杂，它仍被用在了管理所有 React Native 视图的RCTUIManager类中，\n\n## 3. 布局计算流\n\n### 3.1 在 React Native 中嵌入一个原生组件：[iOS 原生UI组件](https://www.react-native.cn/docs/native-components-ios)\n\n### 3.2 在原生中嵌入一个 React Native 组件\n\n#### 3.2.1 固定大小的 React Native 内容\n\nflexbox 是最简单的办法。\n\n#### 3.2.2 弹性大小的 React Native\n\n有时候我们需要渲染一些不知道大小的内容。假设尺寸将会在 JS 中动态指定。我们有两个解决办法。\n\n* 你可以将 React Native 视图包裹在ScrollView中。这样可以保证你的内容总是可以访问，并且不会和原生视图重叠。\n* React Native 允许你在 JS 中决定 RN 应用的尺寸，并且将它传递给宿主视图RCTRootView。然后宿主视图将重新布局子视图，保证 UI 统一。我们通过RCTRootView的弹性模式来达到目的。\n\nRCTRootView支持 4 种不同的弹性模式：\n\n```objective-c\n// RCTRootView.h\n\ntypedef NS_ENUM(NSInteger, RCTRootViewSizeFlexibility) {\n  RCTRootViewSizeFlexibilityNone = 0,\n  RCTRootViewSizeFlexibilityWidth,\n  RCTRootViewSizeFlexibilityHeight,\n  RCTRootViewSizeFlexibilityWidthAndHeight,\n};\n```\n\n> 注意： 在 JS 和原生中都设置弹性尺寸可能导致不确定的行为。比如--不要在设置RCTRootView为RCTRootViewSizeFlexibilityWidth时同时指定最顶层的 RN 组件宽度可变（使用 Flexbox）。\n\n> 注意： React Native 布局是通过一个单独的线程进行计算，而原生 UI 视图是通过主线程更新。这可能导致短暂的原生端和 React Native 端的不一致。\n","slug":"iOS/Webs/React-Native/NativeCommunication","published":1,"updated":"2021-07-29T06:45:59.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4d004liu9khlx13txt","content":"<h2 id=\"1-属性\"><a href=\"#1-属性\" class=\"headerlink\" title=\"1. 属性\"></a>1. 属性</h2><h3 id=\"1-1-从原生组件传递属性到-React-Native\"><a href=\"#1-1-从原生组件传递属性到-React-Native\" class=\"headerlink\" title=\"1.1 从原生组件传递属性到 React Native\"></a>1.1 从原生组件传递属性到 React Native</h3><h4 id=\"1-1-1-初始化参数-initialProperties\"><a href=\"#1-1-1-初始化参数-initialProperties\" class=\"headerlink\" title=\"1.1.1 初始化参数: initialProperties\"></a>1.1.1 初始化参数: initialProperties</h4><p>iOS 端：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *imageList = @[@&quot;http://foo.com/bar1.png&quot;,</span><br><span class=\"line\">                       @&quot;http://foo.com/bar2.png&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">NSDictionary *props = @&#123;@&quot;images&quot; : imageList&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge</span><br><span class=\"line\">                                                 moduleName:@&quot;ImageBrowserApp&quot;</span><br><span class=\"line\">                                          initialProperties:props];</span><br></pre></td></tr></table></figure>\n\n<p>Web 端：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  View,</span><br><span class=\"line\">  Image</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageBrowserApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">renderImage</span>(<span class=\"params\">imgURI</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">source</span>=<span class=\"string\">&#123;&#123;uri:</span> <span class=\"attr\">imgURI</span>&#125;&#125; /&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        &#123;this.props.images.map(this.renderImage)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-1-2-可读写参数-appProperties\"><a href=\"#1-1-2-可读写参数-appProperties\" class=\"headerlink\" title=\"1.1.2 可读写参数: appProperties\"></a>1.1.2 可读写参数: appProperties</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *imageList = @[@&quot;http://foo.com/bar3.png&quot;,</span><br><span class=\"line\">                       @&quot;http://foo.com/bar4.png&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">rootView.appProperties = @&#123;@&quot;images&quot; : imageList&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>可以随时更新属性，但是更新必须在主线程中进行，读取则可以在任何线程中进行。</strong></p>\n<h3 id=\"1-2-从-React-Native-传递属性到原生组件\"><a href=\"#1-2-从-React-Native-传递属性到原生组件\" class=\"headerlink\" title=\"1.2 从 React Native 传递属性到原生组件\"></a>1.2 从 React Native 传递属性到原生组件</h3><h2 id=\"2-跨端交互\"><a href=\"#2-跨端交互\" class=\"headerlink\" title=\"2. 跨端交互\"></a>2. 跨端交互</h2><p>React Native 允许使用跨语言的函数调用。你可以在 JS 中调用原生代码，也可以在原生代码中调用 JS。在不同端需要用不同的方法来实现相同的目的。在原生代码中我们使用事件机制来调度 JS 中的处理函数，而在 React Native 中我们直接使用原生模块导出的方法。</p>\n<h3 id=\"2-1-事件\"><a href=\"#2-1-事件\" class=\"headerlink\" title=\"2.1 事件\"></a>2.1 事件</h3><p>从原生代码调用 React Natvie 函数。</p>\n<p>事件很强大，它可以不需要引用直接修改 React Native 组件。但是，当你使用时要注意下面这些陷阱：</p>\n<ul>\n<li>由于事件可以从各种地方产生，它们可能导致混乱的依赖。</li>\n<li>事件共享相同的命名空间，因此你可能遇到名字冲突。冲突不会在编写代码时被探测到，因此很难排错。</li>\n<li>如果你使用了同一个 React Native 组件的多个引用，然后想在事件中区分它们，name 你很可能需要在事件中同时传递一些标识（你可以使用原生视图中的reactTag作为标识）。</li>\n</ul>\n<p>在 React Native 中嵌入原生组件时，通常的做法是用原生组件的 RCTViewManager 作为视图的代理，通过 bridge 向 JS 发送事件。这样可以集中在一处调用相关的事件。</p>\n<h3 id=\"2-2-原生模块\"><a href=\"#2-2-原生模块\" class=\"headerlink\" title=\"2.2 原生模块\"></a>2.2 原生模块</h3><p>从 React Native 中调用原生方法。</p>\n<p>原生模块是 JS 中也可以使用的 Objective-C 类。一般来说这样的每一个模块的实例都是在每一次通过 JS bridge 通信时创建的。他们可以导出任意的函数和常量给 React Native。相关细节可以参阅这篇文章。</p>\n<p>事实上原生模块的单实例模式限制了嵌入。假设我们有一个 React Native 组件被嵌入了一个原生视图，并且我们希望更新原生的父视图。使用原生模块机制，我们可以导出一个函数，不仅要接收预设参数，还要接收父视图的标识。这个标识将会用来获得父视图的引用以更新父视图。那样的话，我们需要维持模块中标识到原生模块的映射。虽然这个解决办法很复杂，它仍被用在了管理所有 React Native 视图的RCTUIManager类中，</p>\n<h2 id=\"3-布局计算流\"><a href=\"#3-布局计算流\" class=\"headerlink\" title=\"3. 布局计算流\"></a>3. 布局计算流</h2><h3 id=\"3-1-在-React-Native-中嵌入一个原生组件：iOS-原生UI组件\"><a href=\"#3-1-在-React-Native-中嵌入一个原生组件：iOS-原生UI组件\" class=\"headerlink\" title=\"3.1 在 React Native 中嵌入一个原生组件：iOS 原生UI组件\"></a>3.1 在 React Native 中嵌入一个原生组件：<a href=\"https://www.react-native.cn/docs/native-components-ios\">iOS 原生UI组件</a></h3><h3 id=\"3-2-在原生中嵌入一个-React-Native-组件\"><a href=\"#3-2-在原生中嵌入一个-React-Native-组件\" class=\"headerlink\" title=\"3.2 在原生中嵌入一个 React Native 组件\"></a>3.2 在原生中嵌入一个 React Native 组件</h3><h4 id=\"3-2-1-固定大小的-React-Native-内容\"><a href=\"#3-2-1-固定大小的-React-Native-内容\" class=\"headerlink\" title=\"3.2.1 固定大小的 React Native 内容\"></a>3.2.1 固定大小的 React Native 内容</h4><p>flexbox 是最简单的办法。</p>\n<h4 id=\"3-2-2-弹性大小的-React-Native\"><a href=\"#3-2-2-弹性大小的-React-Native\" class=\"headerlink\" title=\"3.2.2 弹性大小的 React Native\"></a>3.2.2 弹性大小的 React Native</h4><p>有时候我们需要渲染一些不知道大小的内容。假设尺寸将会在 JS 中动态指定。我们有两个解决办法。</p>\n<ul>\n<li>你可以将 React Native 视图包裹在ScrollView中。这样可以保证你的内容总是可以访问，并且不会和原生视图重叠。</li>\n<li>React Native 允许你在 JS 中决定 RN 应用的尺寸，并且将它传递给宿主视图RCTRootView。然后宿主视图将重新布局子视图，保证 UI 统一。我们通过RCTRootView的弹性模式来达到目的。</li>\n</ul>\n<p>RCTRootView支持 4 种不同的弹性模式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RCTRootView.h</span><br><span class=\"line\"></span><br><span class=\"line\">typedef NS_ENUM(NSInteger, RCTRootViewSizeFlexibility) &#123;</span><br><span class=\"line\">  RCTRootViewSizeFlexibilityNone = 0,</span><br><span class=\"line\">  RCTRootViewSizeFlexibilityWidth,</span><br><span class=\"line\">  RCTRootViewSizeFlexibilityHeight,</span><br><span class=\"line\">  RCTRootViewSizeFlexibilityWidthAndHeight,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意： 在 JS 和原生中都设置弹性尺寸可能导致不确定的行为。比如–不要在设置RCTRootView为RCTRootViewSizeFlexibilityWidth时同时指定最顶层的 RN 组件宽度可变（使用 Flexbox）。</p>\n</blockquote>\n<blockquote>\n<p>注意： React Native 布局是通过一个单独的线程进行计算，而原生 UI 视图是通过主线程更新。这可能导致短暂的原生端和 React Native 端的不一致。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-属性\"><a href=\"#1-属性\" class=\"headerlink\" title=\"1. 属性\"></a>1. 属性</h2><h3 id=\"1-1-从原生组件传递属性到-React-Native\"><a href=\"#1-1-从原生组件传递属性到-React-Native\" class=\"headerlink\" title=\"1.1 从原生组件传递属性到 React Native\"></a>1.1 从原生组件传递属性到 React Native</h3><h4 id=\"1-1-1-初始化参数-initialProperties\"><a href=\"#1-1-1-初始化参数-initialProperties\" class=\"headerlink\" title=\"1.1.1 初始化参数: initialProperties\"></a>1.1.1 初始化参数: initialProperties</h4><p>iOS 端：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *imageList = @[@&quot;http://foo.com/bar1.png&quot;,</span><br><span class=\"line\">                       @&quot;http://foo.com/bar2.png&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">NSDictionary *props = @&#123;@&quot;images&quot; : imageList&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge</span><br><span class=\"line\">                                                 moduleName:@&quot;ImageBrowserApp&quot;</span><br><span class=\"line\">                                          initialProperties:props];</span><br></pre></td></tr></table></figure>\n\n<p>Web 端：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  View,</span><br><span class=\"line\">  Image</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageBrowserApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">renderImage</span>(<span class=\"params\">imgURI</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">source</span>=<span class=\"string\">&#123;&#123;uri:</span> <span class=\"attr\">imgURI</span>&#125;&#125; /&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        &#123;this.props.images.map(this.renderImage)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-1-2-可读写参数-appProperties\"><a href=\"#1-1-2-可读写参数-appProperties\" class=\"headerlink\" title=\"1.1.2 可读写参数: appProperties\"></a>1.1.2 可读写参数: appProperties</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray *imageList = @[@&quot;http://foo.com/bar3.png&quot;,</span><br><span class=\"line\">                       @&quot;http://foo.com/bar4.png&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">rootView.appProperties = @&#123;@&quot;images&quot; : imageList&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>可以随时更新属性，但是更新必须在主线程中进行，读取则可以在任何线程中进行。</strong></p>\n<h3 id=\"1-2-从-React-Native-传递属性到原生组件\"><a href=\"#1-2-从-React-Native-传递属性到原生组件\" class=\"headerlink\" title=\"1.2 从 React Native 传递属性到原生组件\"></a>1.2 从 React Native 传递属性到原生组件</h3><h2 id=\"2-跨端交互\"><a href=\"#2-跨端交互\" class=\"headerlink\" title=\"2. 跨端交互\"></a>2. 跨端交互</h2><p>React Native 允许使用跨语言的函数调用。你可以在 JS 中调用原生代码，也可以在原生代码中调用 JS。在不同端需要用不同的方法来实现相同的目的。在原生代码中我们使用事件机制来调度 JS 中的处理函数，而在 React Native 中我们直接使用原生模块导出的方法。</p>\n<h3 id=\"2-1-事件\"><a href=\"#2-1-事件\" class=\"headerlink\" title=\"2.1 事件\"></a>2.1 事件</h3><p>从原生代码调用 React Natvie 函数。</p>\n<p>事件很强大，它可以不需要引用直接修改 React Native 组件。但是，当你使用时要注意下面这些陷阱：</p>\n<ul>\n<li>由于事件可以从各种地方产生，它们可能导致混乱的依赖。</li>\n<li>事件共享相同的命名空间，因此你可能遇到名字冲突。冲突不会在编写代码时被探测到，因此很难排错。</li>\n<li>如果你使用了同一个 React Native 组件的多个引用，然后想在事件中区分它们，name 你很可能需要在事件中同时传递一些标识（你可以使用原生视图中的reactTag作为标识）。</li>\n</ul>\n<p>在 React Native 中嵌入原生组件时，通常的做法是用原生组件的 RCTViewManager 作为视图的代理，通过 bridge 向 JS 发送事件。这样可以集中在一处调用相关的事件。</p>\n<h3 id=\"2-2-原生模块\"><a href=\"#2-2-原生模块\" class=\"headerlink\" title=\"2.2 原生模块\"></a>2.2 原生模块</h3><p>从 React Native 中调用原生方法。</p>\n<p>原生模块是 JS 中也可以使用的 Objective-C 类。一般来说这样的每一个模块的实例都是在每一次通过 JS bridge 通信时创建的。他们可以导出任意的函数和常量给 React Native。相关细节可以参阅这篇文章。</p>\n<p>事实上原生模块的单实例模式限制了嵌入。假设我们有一个 React Native 组件被嵌入了一个原生视图，并且我们希望更新原生的父视图。使用原生模块机制，我们可以导出一个函数，不仅要接收预设参数，还要接收父视图的标识。这个标识将会用来获得父视图的引用以更新父视图。那样的话，我们需要维持模块中标识到原生模块的映射。虽然这个解决办法很复杂，它仍被用在了管理所有 React Native 视图的RCTUIManager类中，</p>\n<h2 id=\"3-布局计算流\"><a href=\"#3-布局计算流\" class=\"headerlink\" title=\"3. 布局计算流\"></a>3. 布局计算流</h2><h3 id=\"3-1-在-React-Native-中嵌入一个原生组件：iOS-原生UI组件\"><a href=\"#3-1-在-React-Native-中嵌入一个原生组件：iOS-原生UI组件\" class=\"headerlink\" title=\"3.1 在 React Native 中嵌入一个原生组件：iOS 原生UI组件\"></a>3.1 在 React Native 中嵌入一个原生组件：<a href=\"https://www.react-native.cn/docs/native-components-ios\">iOS 原生UI组件</a></h3><h3 id=\"3-2-在原生中嵌入一个-React-Native-组件\"><a href=\"#3-2-在原生中嵌入一个-React-Native-组件\" class=\"headerlink\" title=\"3.2 在原生中嵌入一个 React Native 组件\"></a>3.2 在原生中嵌入一个 React Native 组件</h3><h4 id=\"3-2-1-固定大小的-React-Native-内容\"><a href=\"#3-2-1-固定大小的-React-Native-内容\" class=\"headerlink\" title=\"3.2.1 固定大小的 React Native 内容\"></a>3.2.1 固定大小的 React Native 内容</h4><p>flexbox 是最简单的办法。</p>\n<h4 id=\"3-2-2-弹性大小的-React-Native\"><a href=\"#3-2-2-弹性大小的-React-Native\" class=\"headerlink\" title=\"3.2.2 弹性大小的 React Native\"></a>3.2.2 弹性大小的 React Native</h4><p>有时候我们需要渲染一些不知道大小的内容。假设尺寸将会在 JS 中动态指定。我们有两个解决办法。</p>\n<ul>\n<li>你可以将 React Native 视图包裹在ScrollView中。这样可以保证你的内容总是可以访问，并且不会和原生视图重叠。</li>\n<li>React Native 允许你在 JS 中决定 RN 应用的尺寸，并且将它传递给宿主视图RCTRootView。然后宿主视图将重新布局子视图，保证 UI 统一。我们通过RCTRootView的弹性模式来达到目的。</li>\n</ul>\n<p>RCTRootView支持 4 种不同的弹性模式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RCTRootView.h</span><br><span class=\"line\"></span><br><span class=\"line\">typedef NS_ENUM(NSInteger, RCTRootViewSizeFlexibility) &#123;</span><br><span class=\"line\">  RCTRootViewSizeFlexibilityNone = 0,</span><br><span class=\"line\">  RCTRootViewSizeFlexibilityWidth,</span><br><span class=\"line\">  RCTRootViewSizeFlexibilityHeight,</span><br><span class=\"line\">  RCTRootViewSizeFlexibilityWidthAndHeight,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意： 在 JS 和原生中都设置弹性尺寸可能导致不确定的行为。比如–不要在设置RCTRootView为RCTRootViewSizeFlexibilityWidth时同时指定最顶层的 RN 组件宽度可变（使用 Flexbox）。</p>\n</blockquote>\n<blockquote>\n<p>注意： React Native 布局是通过一个单独的线程进行计算，而原生 UI 视图是通过主线程更新。这可能导致短暂的原生端和 React Native 端的不一致。</p>\n</blockquote>\n"},{"title":"React-Native与原生端通信","abbrlink":13544,"date":"2021-08-24T02:17:02.000Z","_content":"\n## 1. RN 调用原生方法（iOS）[^参考]\n\n```objective-c\n//\n//  RNBridge.h\n//  demo\n//\n//  Created by chj on 2019/3/20.\n//  Copyright © 2019 Facebook. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n#import <React/RCTBridgeModule.h>\n\n\n@interface RNBridge : NSObject<RCTBridgeModule>\n\n@end\n```\n\n```objective-c\n//\n//  RNBridge.m\n//  demo\n//\n//  Created by chj on 2019/3/20.\n//  Copyright © 2019 Facebook. All rights reserved.\n//\n\n#import \"RNBridge.h\"\n#import <React/RCTBridge.h>\n\n#import \"PageAViewController.h\"\n#import \"AppDelegate.h\"\n\n@implementation RNBridge\n@synthesize bridge = _bridge;\n\nRCT_EXPORT_MODULE();\n\n// RN 跳转原生\nRCT_EXPORT_METHOD(jumpNativePage){\n  \n  dispatch_async(dispatch_get_main_queue(), ^{\n    AppDelegate *appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n    \n    [appDelegate.navigationVCtrl pushViewController:[PageAViewController new] animated:YES];\n    \n  });\n  \n}\n\n//\nRCT_EXPORT_METHOD(back){\n  dispatch_async(dispatch_get_main_queue(), ^{\n    AppDelegate *appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n    \n    [appDelegate.navigationVCtrl popViewControllerAnimated:YES];\n    \n  });\n}\n\n\n@end\n```\n\n```javascript\n/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * @format\n * @flow\n */\n\nimport React, {Component} from 'react';\nimport {\n    NativeModules,\n} from 'react-native';\n\nconst RNBridge = NativeModules.RNBridge;\n\n<TouchableOpacity style={styles.container}\n                onPress={()=>{\n                      RNBridge.jumpNativePage()\n                    }}>\n            </TouchableOpacity>\n```\n\n## 2. 原生（iOS）调用RN方法\n\n```objective-c\n//\n//  SendEventManager.h\n//  demo\n//\n//  Created by chj on 2019/3/20.\n//  Copyright © 2019 Facebook. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n#import <React/RCTBridgeModule.h>\n#import <React/RCTEventEmitter.h>\n\nNS_ASSUME_NONNULL_BEGIN\n\n@interface SendEventManager :  RCTEventEmitter <RCTBridgeModule>\n+ (void)emitEventWithName:(NSString *)name andInfo:(NSDictionary *)info;\n\n@end\n\nNS_ASSUME_NONNULL_END\n```\n\n```objective-c\n//\n//  SendEventManager.m\n//  demo\n//\n//  Created by chj on 2019/3/20.\n//  Copyright © 2019 Facebook. All rights reserved.\n//\n\n#import \"SendEventManager.h\"\n\n@implementation SendEventManager\n\nRCT_EXPORT_MODULE();\n\n- (NSArray<NSString *> *)supportedEvents\n{\n  return @[@\"ABC\"];\n}\n\n\n- (void)startObserving {\n  [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(emitEvent:) name:@\"sendEmmit\" object:nil];\n  \n}\n- (void)stopObserving {\n  [[NSNotificationCenter defaultCenter] removeObserver:self];\n  \n}\n- (void)emitEvent:(NSNotification *)notification{\n  [self sendEventWithName:@\"ABC\" body:notification.userInfo];\n  \n}\n+ (void)emitEventWithName:(NSString *)name andInfo:(NSDictionary *)info{\n  [[NSNotificationCenter defaultCenter] postNotificationName:@\"sendEmmit\"                                                      object:self userInfo:info];\n  \n}\n\n\n\n@end\n```\n\n原生使用\n\n```objective-c\n[SendEventManager emitEventWithName:@\"ABC\" andInfo:@{}];\n```\n\nRN使用\n\n```javascript\n/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * @format\n * @flow\n */\n\nimport React, {Component} from 'react';\nimport {\n    NativeModules,\n    NativeEventEmitter\n} from 'react-native';\n\nconst sendEventManagerEmitter = new NativeEventEmitter(NativeModules.SendEventManager);\n\n // 原生给RN发送消息\nthis.listener = sendEventManagerEmitter.addListener('ABC', (obj)=>{\n...\n})\ncomponentWillUnmount() {\n    this.listener.remove()\n}\n```\n\n[^参考]: [RN 调用原生方法（iOS）、原生（iOS）调用RN方法](https://www.jianshu.com/p/62da57116689)\n","source":"_posts/iOS/Webs/React-Native/DualComunication.md","raw":"---\ntitle: React-Native与原生端通信\nabbrlink: 13544\ndate: 2021-08-24 10:17:02\ntags:\n---\n\n## 1. RN 调用原生方法（iOS）[^参考]\n\n```objective-c\n//\n//  RNBridge.h\n//  demo\n//\n//  Created by chj on 2019/3/20.\n//  Copyright © 2019 Facebook. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n#import <React/RCTBridgeModule.h>\n\n\n@interface RNBridge : NSObject<RCTBridgeModule>\n\n@end\n```\n\n```objective-c\n//\n//  RNBridge.m\n//  demo\n//\n//  Created by chj on 2019/3/20.\n//  Copyright © 2019 Facebook. All rights reserved.\n//\n\n#import \"RNBridge.h\"\n#import <React/RCTBridge.h>\n\n#import \"PageAViewController.h\"\n#import \"AppDelegate.h\"\n\n@implementation RNBridge\n@synthesize bridge = _bridge;\n\nRCT_EXPORT_MODULE();\n\n// RN 跳转原生\nRCT_EXPORT_METHOD(jumpNativePage){\n  \n  dispatch_async(dispatch_get_main_queue(), ^{\n    AppDelegate *appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n    \n    [appDelegate.navigationVCtrl pushViewController:[PageAViewController new] animated:YES];\n    \n  });\n  \n}\n\n//\nRCT_EXPORT_METHOD(back){\n  dispatch_async(dispatch_get_main_queue(), ^{\n    AppDelegate *appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];\n    \n    [appDelegate.navigationVCtrl popViewControllerAnimated:YES];\n    \n  });\n}\n\n\n@end\n```\n\n```javascript\n/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * @format\n * @flow\n */\n\nimport React, {Component} from 'react';\nimport {\n    NativeModules,\n} from 'react-native';\n\nconst RNBridge = NativeModules.RNBridge;\n\n<TouchableOpacity style={styles.container}\n                onPress={()=>{\n                      RNBridge.jumpNativePage()\n                    }}>\n            </TouchableOpacity>\n```\n\n## 2. 原生（iOS）调用RN方法\n\n```objective-c\n//\n//  SendEventManager.h\n//  demo\n//\n//  Created by chj on 2019/3/20.\n//  Copyright © 2019 Facebook. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n#import <React/RCTBridgeModule.h>\n#import <React/RCTEventEmitter.h>\n\nNS_ASSUME_NONNULL_BEGIN\n\n@interface SendEventManager :  RCTEventEmitter <RCTBridgeModule>\n+ (void)emitEventWithName:(NSString *)name andInfo:(NSDictionary *)info;\n\n@end\n\nNS_ASSUME_NONNULL_END\n```\n\n```objective-c\n//\n//  SendEventManager.m\n//  demo\n//\n//  Created by chj on 2019/3/20.\n//  Copyright © 2019 Facebook. All rights reserved.\n//\n\n#import \"SendEventManager.h\"\n\n@implementation SendEventManager\n\nRCT_EXPORT_MODULE();\n\n- (NSArray<NSString *> *)supportedEvents\n{\n  return @[@\"ABC\"];\n}\n\n\n- (void)startObserving {\n  [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(emitEvent:) name:@\"sendEmmit\" object:nil];\n  \n}\n- (void)stopObserving {\n  [[NSNotificationCenter defaultCenter] removeObserver:self];\n  \n}\n- (void)emitEvent:(NSNotification *)notification{\n  [self sendEventWithName:@\"ABC\" body:notification.userInfo];\n  \n}\n+ (void)emitEventWithName:(NSString *)name andInfo:(NSDictionary *)info{\n  [[NSNotificationCenter defaultCenter] postNotificationName:@\"sendEmmit\"                                                      object:self userInfo:info];\n  \n}\n\n\n\n@end\n```\n\n原生使用\n\n```objective-c\n[SendEventManager emitEventWithName:@\"ABC\" andInfo:@{}];\n```\n\nRN使用\n\n```javascript\n/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * @format\n * @flow\n */\n\nimport React, {Component} from 'react';\nimport {\n    NativeModules,\n    NativeEventEmitter\n} from 'react-native';\n\nconst sendEventManagerEmitter = new NativeEventEmitter(NativeModules.SendEventManager);\n\n // 原生给RN发送消息\nthis.listener = sendEventManagerEmitter.addListener('ABC', (obj)=>{\n...\n})\ncomponentWillUnmount() {\n    this.listener.remove()\n}\n```\n\n[^参考]: [RN 调用原生方法（iOS）、原生（iOS）调用RN方法](https://www.jianshu.com/p/62da57116689)\n","slug":"iOS/Webs/React-Native/DualComunication","published":1,"updated":"2021-09-22T06:56:40.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4e004miu9k7t9c9lay","content":"<h2 id=\"1-RN-调用原生方法（iOS）-参考\"><a href=\"#1-RN-调用原生方法（iOS）-参考\" class=\"headerlink\" title=\"1. RN 调用原生方法（iOS）[^参考]\"></a>1. RN 调用原生方法（iOS）[^参考]</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  RNBridge.h</span><br><span class=\"line\">//  demo</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by chj on 2019/3/20.</span><br><span class=\"line\">//  Copyright © 2019 Facebook. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\">#import &lt;React/RCTBridgeModule.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface RNBridge : NSObject&lt;RCTBridgeModule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  RNBridge.m</span><br><span class=\"line\">//  demo</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by chj on 2019/3/20.</span><br><span class=\"line\">//  Copyright © 2019 Facebook. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;RNBridge.h&quot;</span><br><span class=\"line\">#import &lt;React/RCTBridge.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;PageAViewController.h&quot;</span><br><span class=\"line\">#import &quot;AppDelegate.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation RNBridge</span><br><span class=\"line\">@synthesize bridge = _bridge;</span><br><span class=\"line\"></span><br><span class=\"line\">RCT_EXPORT_MODULE();</span><br><span class=\"line\"></span><br><span class=\"line\">// RN 跳转原生</span><br><span class=\"line\">RCT_EXPORT_METHOD(jumpNativePage)&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">    AppDelegate *appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [appDelegate.navigationVCtrl pushViewController:[PageAViewController new] animated:YES];</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//</span><br><span class=\"line\">RCT_EXPORT_METHOD(back)&#123;</span><br><span class=\"line\">  dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">    AppDelegate *appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [appDelegate.navigationVCtrl popViewControllerAnimated:YES];</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Sample React Native App</span></span><br><span class=\"line\"><span class=\"comment\"> * https://github.com/facebook/react-native</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@format</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@flow</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    NativeModules,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> RNBridge = NativeModules.RNBridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.container&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"xml\">                      RNBridge.jumpNativePage()</span></span><br><span class=\"line\"><span class=\"xml\">                    &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-原生（iOS）调用RN方法\"><a href=\"#2-原生（iOS）调用RN方法\" class=\"headerlink\" title=\"2. 原生（iOS）调用RN方法\"></a>2. 原生（iOS）调用RN方法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  SendEventManager.h</span><br><span class=\"line\">//  demo</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by chj on 2019/3/20.</span><br><span class=\"line\">//  Copyright © 2019 Facebook. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\">#import &lt;React/RCTBridgeModule.h&gt;</span><br><span class=\"line\">#import &lt;React/RCTEventEmitter.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">NS_ASSUME_NONNULL_BEGIN</span><br><span class=\"line\"></span><br><span class=\"line\">@interface SendEventManager :  RCTEventEmitter &lt;RCTBridgeModule&gt;</span><br><span class=\"line\">+ (void)emitEventWithName:(NSString *)name andInfo:(NSDictionary *)info;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  SendEventManager.m</span><br><span class=\"line\">//  demo</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by chj on 2019/3/20.</span><br><span class=\"line\">//  Copyright © 2019 Facebook. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;SendEventManager.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation SendEventManager</span><br><span class=\"line\"></span><br><span class=\"line\">RCT_EXPORT_MODULE();</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSArray&lt;NSString *&gt; *)supportedEvents</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return @[@&quot;ABC&quot;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)startObserving &#123;</span><br><span class=\"line\">  [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(emitEvent:) name:@&quot;sendEmmit&quot; object:nil];</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (void)stopObserving &#123;</span><br><span class=\"line\">  [[NSNotificationCenter defaultCenter] removeObserver:self];</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (void)emitEvent:(NSNotification *)notification&#123;</span><br><span class=\"line\">  [self sendEventWithName:@&quot;ABC&quot; body:notification.userInfo];</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+ (void)emitEventWithName:(NSString *)name andInfo:(NSDictionary *)info&#123;</span><br><span class=\"line\">  [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;sendEmmit&quot;                                                      object:self userInfo:info];</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>原生使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SendEventManager emitEventWithName:@&quot;ABC&quot; andInfo:@&#123;&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>RN使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Sample React Native App</span></span><br><span class=\"line\"><span class=\"comment\"> * https://github.com/facebook/react-native</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@format</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@flow</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    NativeModules,</span><br><span class=\"line\">    NativeEventEmitter</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sendEventManagerEmitter = <span class=\"keyword\">new</span> NativeEventEmitter(NativeModules.SendEventManager);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 原生给RN发送消息</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.listener = sendEventManagerEmitter.addListener(<span class=\"string\">&#x27;ABC&#x27;</span>, <span class=\"function\">(<span class=\"params\">obj</span>)=&gt;</span>&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">componentWillUnmount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.listener.remove()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[^参考]: <a href=\"https://www.jianshu.com/p/62da57116689\">RN 调用原生方法（iOS）、原生（iOS）调用RN方法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-RN-调用原生方法（iOS）-参考\"><a href=\"#1-RN-调用原生方法（iOS）-参考\" class=\"headerlink\" title=\"1. RN 调用原生方法（iOS）[^参考]\"></a>1. RN 调用原生方法（iOS）[^参考]</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  RNBridge.h</span><br><span class=\"line\">//  demo</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by chj on 2019/3/20.</span><br><span class=\"line\">//  Copyright © 2019 Facebook. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\">#import &lt;React/RCTBridgeModule.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@interface RNBridge : NSObject&lt;RCTBridgeModule&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  RNBridge.m</span><br><span class=\"line\">//  demo</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by chj on 2019/3/20.</span><br><span class=\"line\">//  Copyright © 2019 Facebook. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;RNBridge.h&quot;</span><br><span class=\"line\">#import &lt;React/RCTBridge.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;PageAViewController.h&quot;</span><br><span class=\"line\">#import &quot;AppDelegate.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation RNBridge</span><br><span class=\"line\">@synthesize bridge = _bridge;</span><br><span class=\"line\"></span><br><span class=\"line\">RCT_EXPORT_MODULE();</span><br><span class=\"line\"></span><br><span class=\"line\">// RN 跳转原生</span><br><span class=\"line\">RCT_EXPORT_METHOD(jumpNativePage)&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">    AppDelegate *appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [appDelegate.navigationVCtrl pushViewController:[PageAViewController new] animated:YES];</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//</span><br><span class=\"line\">RCT_EXPORT_METHOD(back)&#123;</span><br><span class=\"line\">  dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">    AppDelegate *appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];</span><br><span class=\"line\">    </span><br><span class=\"line\">    [appDelegate.navigationVCtrl popViewControllerAnimated:YES];</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Sample React Native App</span></span><br><span class=\"line\"><span class=\"comment\"> * https://github.com/facebook/react-native</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@format</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@flow</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    NativeModules,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> RNBridge = NativeModules.RNBridge;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TouchableOpacity</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.container&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">                <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"xml\">                      RNBridge.jumpNativePage()</span></span><br><span class=\"line\"><span class=\"xml\">                    &#125;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">TouchableOpacity</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-原生（iOS）调用RN方法\"><a href=\"#2-原生（iOS）调用RN方法\" class=\"headerlink\" title=\"2. 原生（iOS）调用RN方法\"></a>2. 原生（iOS）调用RN方法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  SendEventManager.h</span><br><span class=\"line\">//  demo</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by chj on 2019/3/20.</span><br><span class=\"line\">//  Copyright © 2019 Facebook. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\">#import &lt;React/RCTBridgeModule.h&gt;</span><br><span class=\"line\">#import &lt;React/RCTEventEmitter.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">NS_ASSUME_NONNULL_BEGIN</span><br><span class=\"line\"></span><br><span class=\"line\">@interface SendEventManager :  RCTEventEmitter &lt;RCTBridgeModule&gt;</span><br><span class=\"line\">+ (void)emitEventWithName:(NSString *)name andInfo:(NSDictionary *)info;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">//  SendEventManager.m</span><br><span class=\"line\">//  demo</span><br><span class=\"line\">//</span><br><span class=\"line\">//  Created by chj on 2019/3/20.</span><br><span class=\"line\">//  Copyright © 2019 Facebook. All rights reserved.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;SendEventManager.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation SendEventManager</span><br><span class=\"line\"></span><br><span class=\"line\">RCT_EXPORT_MODULE();</span><br><span class=\"line\"></span><br><span class=\"line\">- (NSArray&lt;NSString *&gt; *)supportedEvents</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return @[@&quot;ABC&quot;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)startObserving &#123;</span><br><span class=\"line\">  [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(emitEvent:) name:@&quot;sendEmmit&quot; object:nil];</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (void)stopObserving &#123;</span><br><span class=\"line\">  [[NSNotificationCenter defaultCenter] removeObserver:self];</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (void)emitEvent:(NSNotification *)notification&#123;</span><br><span class=\"line\">  [self sendEventWithName:@&quot;ABC&quot; body:notification.userInfo];</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">+ (void)emitEventWithName:(NSString *)name andInfo:(NSDictionary *)info&#123;</span><br><span class=\"line\">  [[NSNotificationCenter defaultCenter] postNotificationName:@&quot;sendEmmit&quot;                                                      object:self userInfo:info];</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>原生使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[SendEventManager emitEventWithName:@&quot;ABC&quot; andInfo:@&#123;&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>RN使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Sample React Native App</span></span><br><span class=\"line\"><span class=\"comment\"> * https://github.com/facebook/react-native</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@format</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@flow</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">    NativeModules,</span><br><span class=\"line\">    NativeEventEmitter</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sendEventManagerEmitter = <span class=\"keyword\">new</span> NativeEventEmitter(NativeModules.SendEventManager);</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 原生给RN发送消息</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.listener = sendEventManagerEmitter.addListener(<span class=\"string\">&#x27;ABC&#x27;</span>, <span class=\"function\">(<span class=\"params\">obj</span>)=&gt;</span>&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">componentWillUnmount</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.listener.remove()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>[^参考]: <a href=\"https://www.jianshu.com/p/62da57116689\">RN 调用原生方法（iOS）、原生（iOS）调用RN方法</a></p>\n"},{"title":"iOS之React-Native原生UI组件","abbrlink":"50010e5c","date":"2021-04-20T13:36:02.000Z","_content":"","source":"_posts/iOS/Webs/React-Native/NativeComponents.md","raw":"---\ntitle: iOS之React-Native原生UI组件\nabbrlink: 50010e5c\ndate: 2021-04-20 21:36:02\ntags:\n---\n","slug":"iOS/Webs/React-Native/NativeComponents","published":1,"updated":"2021-07-29T06:45:59.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4f004niu9k8w0e4g13","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"DCloud iOS 原生插件开发指南","abbrlink":56399,"date":"2021-09-22T01:55:00.000Z","_content":"\n\n[TOC]\n\n要开发原生插件的话，首先得去 DCloud 官网下载 DCloud SDK[^DCloud-SDK]。DCloud SDK 下载下来解压后，内容如下：\n\n```shell\n|--iOSSDK    \n    |-- HBuilder-Hello                  // uni-app 离线打包工程\n    |-- HBuilder-ExampleDemo            // Demo 工程\n    |-- HBuilder-uniPluginDemo          // uni-app 插件开发主工程 （本文档需要使用的工程）\n    |-- SDK                             // 依赖库及依赖资源文件\n    |-- Feature-iOS.xls                 // 功能模块与依赖库对应关系说明表格\n    |-- readme.txt                      // 目录说明\n```\n\n在聊插件开发之前，先讲一点预备知识，前面三节都是预备知识。后面插件的开发过程中，会涉及到这些知识内容。\n\n## 1. 自定义基座[^自定义基座]\n\n自定义基座，有两种方式获取，一种是用打包工程生成，另一种是通过云打包获取。\n\n### 1.1 [用打包工程生成自定义基座](https://ask.dcloud.net.cn/article/35485)\n\n1. 在打包原生工程[^打包工程]里找到 control.xml 文件，在 HBuilder 节点里查看是否有这2个：` debug=\"true\" syncDebug=\"true\" `配置，没有的话增加上。\n\n2. 修改打包工程的 Bundle identifier 为你 App 的 Bundle identifier\n\n3. 在原生打包工程里找到 info.plist 文件并增加一项：`Application supports iTunes file sharing`， 值设为 `yes`。\n\n4. 确保原生工程里`Pandora`文件夹下的apps文件夹里只有一个文件夹，并且文件夹的名称和里面的 `manifest` 的 `id` 值相同。\n\n5. 确保 control.xml 文件里的 appid 的值和 apps 目录下的第一个文件夹的名称一致。\n\n6. 确保 HBuilderX 里要调试的代码的 appid 和 control.xml 的appid值一致。\n\n7. 使用 Xcode 的 Product 下的 archive 打包，然后生成ipa，并把 ipa 名称命名为：`iOS_debug.ipa`。\n\n8. 在 uni-app 工程里主目录下新建一个名称为 unpackage 的文件夹，再在unpackage文件夹下新建一个名称为 debug 文件夹，并把生成的`iOS_debug.ipa`包放入 `debug` 文件夹下。\n\n到这里，自定义基座就制作完成了。\n\n要调试的话，在 HBuildX 里，找到之前 app id 相同的 uni-app 工程，点击`运行 --> 运行到手机或模拟器 --> 使用自定义基座运行（iOS）`，等待连接成功之后，然后`运行 --> 运行到手机或模拟器 --> 选择真机或者模拟器`，HBuilderX 就会用自定义基座，把 App 运行到 iOS 设备上了。\n\n### 1.2 云打包生成自定义基座\n\nHBuilderX 的菜单： `运行 --> 运行到手机或模拟器 --> 制作自定义基座`， 并配置好，然后点击页面右下角的`打包`，打包后有下载链接地址，下载下来的文件命名成`iOS_debug.ipa`，就是自定义基座。\n\n要调试的话，基座下载下来后，放到项目的 `unpackage --> debug` 下目录下。\n\n**提示1：** 配置云打包的自定义基座需要 iOS 证书与 Profile 文件。\n\n## 2. 运行到设备上\n\n### 2.1 Xcode\n\n运行 uni-app 到设备上也有两种方式，一种是通过 HbuilderX 运行到设备上，另一种是通过 Xcode。\n\n首先用 HBuilderX 打包 `uni-app`，操作路径：`发行 --> 原生 App 本地打包 --> 生成本地 App 资源`，HBuilderX 处理好之后，会在控制台输出 App 包资源的路径，得到 App 包资源后，把 App 包资源放到原生 iOS 打包工程的指定目录`Pandora/apps/`下，并修改 `control.xml` 文件的 `appid` 与 打包资源的文件夹名称相同。\n\n然后，运行打包工程到设备上即可，运行打包工程之前，最好配置好 App 相应的信息，例如名称，icon，版本等。\n\n### 2.2 HBuilderX\n\n在 HBuilderX 上运行比较简单，操作路径： `运行 --> 运行到手机或模拟器 --> 选择真机或者模拟器`。\n\n这里的运行环境，会有两个：`标准基座` 与 `自定义基座`，看开发需要，选择相应环境。\n\n## 3. [离线打包](https://nativesupport.dcloud.net.cn/AppDocs/usesdk/ios?id=开发环境)\n\n去到原生 iOS 打包工程，按照下面的步骤操作：\n\n1. 这里主要是配置工程，诸如 App 名字，版本，icon，国际化等的一些信息。照着教程配置就好。\n\n2. 配置好之后，把从 HBuilderX 打包出来的 App 包资源放到 Pandora 的 apps 文件夹下去。\n\n3. 最后一步是打包，上面都配置好的话，就跟 iOS 原生打包一样，操作路径，在 Xcode 里：`Product --> Archive`。\n\n**提示2：** 记得修改 contol.xml 文件里的内容，比如环境是 Debug 还是 Release。打 Release 包的话，syncDebug 配置记得去掉。\n\n## 4. [插件开发](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios)\n\n为了开发过程中条理清晰，开始开发之前，先区分几个概念。\n\n插件从类型上区分，有两种类型，这根 uni-app 的发展有关，一种是 H5+插件，不过这种插件已经成为过去式了，另一种是 uni-app 插件，这种是目前 Dcloud 的推荐的。\n\n具体的某一个插件又有两种形式，比如Dcloud SDK 里的插件工程[^插件工程]里有个`DCTestUniPlugin`插件，这个插件，提供了 `module` 和 `component` 两种形式。\n\n1. module： 是纯功能性的插件，没有具体界面的，比如获取手机电量，地理位置等功能。\n2. component：是提供iOS 或者 Android 原生界面的插件类型。\n\n[创建工程](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=创建插件工程)，[导入插件工程](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=导入插件工程)，[配置工程](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=工程配置)都比较简单，建议大家直接看官网，照葫芦画瓢就是。\n\n这里直接从[代码开发](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=代码实现)部分开始聊。\n\n### 4.1 原生方法导出\n\niOS 中有两种方法处理方式，一种是同步的，一种是异步的。原生的方法要通过某种途径导出后，uni-app 才能使用。\n\n#### 4.1.1 同步方法导出\n\n```objc\n// 通过宏 UNI_EXPORT_METHOD_SYNC 将同步方法暴露给 js 端\nUNI_EXPORT_METHOD_SYNC(@selector(testSyncFunc:))\n/// 同步方法（注：同步方法会在 js 线程执行）\n/// @param options js 端调用方法时传递的参数   支持：String、Number、Boolean、JsonObject 类型\n- (NSString *)testSyncFunc:(NSDictionary *)options {\n    // options 为 js 端调用此方法时传递的参数\n    NSLog(@\"%@\",options);\n\n    /*\n     可以在该方法中实现原生功能，然后直接通过 return 返回参数给 js\n     */\n\n    // 同步返回参数给 js 端  支持：NSString、NSDictionary（只能包含基本数据类型）、NSNumber 类型\n    return @\"success\";\n}\n```\n\n#### 4.1.2 异步方法导出\n\n```objc\n// 通过宏 UNI_EXPORT_METHOD 将异步方法暴露给 js 端\nUNI_EXPORT_METHOD(@selector(testAsyncFunc:callback:))\n/// 异步方法（注：异步方法会在主线程（UI线程）执行）\n/// @param options js 端调用方法时传递的参数   支持：String、Number、Boolean、JsonObject 类型\n/// @param callback 回调方法，回传参数给 js 端   支持： NSString、NSDictionary（只能包含基本数据类型）、NSNumber 类型\n- (void)testAsyncFunc:(NSDictionary *)options callback:(UniModuleKeepAliveCallback)callback { \n\n    // options 为 js 端调用此方法时传递的参数 NSLog(@\"%@\",options); // 可以在该方法中实现原生能力，然后通过 callback 回调到 js \n\n   if (callback) {\n       // 第一个参数为回传给js端的数据，第二个参数为标识，表示该回调方法是否支持多次调用，如果原生端需要多次回调js端则第二个参数传 YES;\n        callback(@\"success\",NO);\n\n    }\n}\n```\n\n### 4.2 Hook APP事件\n\n如果需要在 App 启动时初始化或者需要获取系统的一些事件， 需要新建一个XXXXProxy类（注意命名加前缀防止冲突），继承 NSObject 遵守UniPluginProtocol协议\n\n```objc\n-(void)onCreateUniPlugin;\n\n- (BOOL)application:(UIApplication *_Nullable)application didFinishLaunchingWithOptions:(NSDictionary *_Nullable)launchOptions;\n- (void)application:(UIApplication *_Nullable)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *_Nullable)deviceToken;\n- (void)application:(UIApplication *_Nullable)application didFailToRegisterForRemoteNotificationsWithError:(NSError *_Nullable)err;\n- (void)application:(UIApplication *_Nullable)application didReceiveRemoteNotification:(NSDictionary *_Nullable)userInfo;\n- (void)application:(UIApplication *_Nullable)application didReceiveLocalNotification:(UILocalNotification *_Nullable)notification;\n- (BOOL)application:(UIApplication *_Nullable)application handleOpenURL:(NSURL *_Nullable)url;\n- (BOOL)application:(UIApplication *_Nullable)app openURL:(NSURL *_Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> *_Nullable)options NS_AVAILABLE_IOS(9_0);\n\n- (void)applicationWillResignActive:(UIApplication *)application;\n- (void)applicationDidBecomeActive:(UIApplication *)application;\n- (void)applicationDidEnterBackground:(UIApplication *)application;\n- (void)applicationWillEnterForeground:(UIApplication *)application;\n\n- (BOOL)application:(UIApplication *_Nullable)application continueUserActivity:(NSUserActivity *_Nullable)userActivity restorationHandler:(void(^_Nullable)(NSArray * __nullable restorableObjects))restorationHandler API_AVAILABLE(ios(8.0));\n```\n\n### 4.3 性能\n\n这种跨端的 App 本身性能问题有一定的瓶颈，所以 Dcloud 也提供了原生代码的运行线程和队列的控制。\n\n#### 4.3.1 线程\n\n想要在指定线程里运行原生代码，由于原生代码不一定能够一直运行在前台，所以线程也需要保活，可以这么实现`uniExecuteThread`\n\n```objc\n-(NSThread*)uniExecuteThread\n{\n    if ( nil == _uniExecuteThread) {\n        _uniExecuteThread = [[NSThread alloc] initWithTarget:self selector:@selector(uniNewThread) object:nil];\n        [_uniExecuteThread setName:@\"TestUniModule\"];\n        [_uniExecuteThread start];\n    }\n    return _uniExecuteThread;\n}\n\n-(void)uniNewThread\n{\n    @autoreleasepool {\n        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];\n        [runLoop addPort:[NSMachPort port] forMode:NSRunLoopCommonModes];\n        [runLoop run];\n    }\n}\n```\n\n#### 4.3.2 队列\n\n想要在指定线程里运行原生代码，可以实现 `uniExecuteQueue`属性，可以在这个属性里返回一个具体的队列。\n\nDCloud SDK 提供了插件相关的[API信息](https://nativesupport.dcloud.net.cn/NativePlugin/API/ios?id=dcunimodule)。\n\n### 4.4 配置插件信息\n\n选中工程中的 `HBuilder-uniPlugin-Info.plist`文件`右键->Open As->Source Code`找到`dcloud_uniplugins`节点，copy下面的内容添加到`dcloud_uniplugins`节点下，按您插件的实际信息填写对应的项\n\n```xml\n<dict>\n    <key>hooksClass</key>\n    <string>填写 hooksClass 类名 </string>\n    <key>plugins</key>\n    <array>\n        <dict>\n            <key>class</key>\n            <string>填写 module 或 component 的类名</string>\n            <key>name</key>\n            <string>填写暴露给js端对应的 module 或 component 名称</string>\n            <key>type</key>\n            <string>填写 module 或 component</string>\n        </dict>\n    </array>\n</dict>\n```\n\n* hooksClass：App系统方法钩子类，值是类名，是给有些插件需要在 app 启动时做初始化或者获取系统事件用的，如果没有可以不填为空\n* class：module 或 component 对应的原生类名（示例中为 TestModule）\n* name：module 或 component 对应的名称（注意：module 的 name 必须以插件id为前缀或和插件id相同，示例为DCTestUniPlugin-TestModule，其中 DCTestUniPlugin 为插件的id，需要保证唯一性，避免与其他插件冲突，component 的name 没有强制要求，但是也要保证唯一比如 dc-map）\n* type：module 或 component （示例为module）\n\n### 4.5 生成插件包\n\n此步骤应该在您插件所有功能都开发完毕，并在开发工程中测试完成后进行，插件目录结构类似：\n\n```shell\n|-- 插件id                               // 插件包是一个以插件id命名的文件夹\n    |-- android                         // 存放 android 插件所需要的依赖库及资源文件\n    |-- ios                             // 存放 ios 插件所需要的依赖库及资源文件\n    |-- package.json                    // 插件配置文件\n```\n\n`package.json` 文件是插件包的信息，[具体配置参考](https://nativesupport.dcloud.net.cn/NativePlugin/course/package?id=packagejson)，内容类似：\n\n```json\n{\n    \"name\": \"TestUniPlugin\",\n    \"id\": \"DCTestUniPlugin\",\n    \"version\": \"1.0.0\",\n    \"description\": \"uni示例插件\",\n    \"_dp_type\": \"nativeplugin\",\n    \"_dp_nativeplugin\": {\n        \"ios\": {\n            \"plugins\": [{\n                \"type\": \"module\",\n                \"name\": \"DCTestUniPlugin-TestModule\",\n                \"class\": \"TestModule\"\n            }, {\n                \"type\": \"component\",\n                \"name\": \"dc-testmap\",\n                \"class\": \"TestComponent\"\n            }],\n            \"frameworks\": [\"MapKit.framework\"],\n            \"integrateType\": \"framework\",\n            \"deploymentTarget\": \"9.0\"\n        }\n    }\n}\n```\n\n然后以`插件id`为名新建一个文件夹，将编辑好的 `package.json` 放进去，然后在文件夹中在新建一个 ios 文件夹，将生成的依赖库`DCTestUniPlugin.framework`copy 到 ios 目录下，这样我们的插件包就构建完成了。\n\n接下来介绍一下如何使用本地原生的 iOS 插件。\n\n## 5. uni-app 使用 iOS 原生插件\n\n将原生插件导出来，按照要求放到 uni-app 里面去，然后在代码里，可以这么使用\n\n```javascript\n<template>\n    <div>\n        <button type=\"primary\" @click=\"testAsyncFunc\">testAsyncFunc</button>\n        <button type=\"primary\" @click=\"testSyncFunc\">testSyncFunc</button>\n    </div>\n</template>\n\n<script>\n    // 首先需要通过 uni.requireNativePlugin(\"ModuleName\") 获取 module \n    var testModule = uni.requireNativePlugin(\"DCTestUniPlugin-TestModule\")\n    export default {\n        methods: {\n            testAsyncFunc() {\n                // 调用异步方法\n                testModule.testAsyncFunc({\n                        'name': 'uni-app',\n                        'age': 1\n                    },\n                    (ret) => {\n                        uni.showToast({\n                            title:'调用异步方法 ' + ret,\n                            icon: \"none\"\n                        })\n                    })\n            },\n            testSyncFunc() {\n                // 调用同步方法\n                var ret = testModule.testSyncFunc({\n                    'name': 'uni-app',\n                    'age': 1\n                })\n\n                uni.showToast({\n                    title:'调用同步方法 ' + ret,\n                    icon: \"none\"\n                })\n            }\n        }\n    }\n</script>\n```\n\n写好代码后，[生成本地 App 包资源](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=导入-uni-app-资源)，[导入到插件开发工程](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=导入-uni-app-资源-1)，选择 `HBuilder Target` 运行，然后测试一下功能是否正常。\n\n**提示 3**: 前端代码修改后重新导入资源时，需要在插件开发工程中删除之前导入的资源，同时将设备上的 App 删除，避免因为缓存问题导致加载的还是旧的资源。\n\n## 6. 插件市场\n\n原生插件发布到插件市场，本篇文章不涉及这部分内容，具体见[提交原生插件到Dcloud插件市场](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=提交插件市场)。\n\n[^DCloud-SDK]: [Dcloud SDK](https://nativesupport.dcloud.net.cn/AppDocs/download/ios)\n[^打包工程]: 打包工程是指 Dcloud SDK 目录下的 `HBuilder-Hello` iOS 原生项目。\n[^插件工程]: 插件工程是指 Dcloud SDK 目录下的 `HBuilder-uniPluginDemo` iOS 原生项目\n[^自定义基座]: [自定义基座](https://ask.dcloud.net.cn/article/35115)\n","source":"_posts/iOS/Webs/DCloud/DCloudGuideline.md","raw":"---\ntitle: DCloud iOS 原生插件开发指南\nabbrlink: 56399\ndate: 2021-09-22 09:55:00\ntags:\n---\n\n\n[TOC]\n\n要开发原生插件的话，首先得去 DCloud 官网下载 DCloud SDK[^DCloud-SDK]。DCloud SDK 下载下来解压后，内容如下：\n\n```shell\n|--iOSSDK    \n    |-- HBuilder-Hello                  // uni-app 离线打包工程\n    |-- HBuilder-ExampleDemo            // Demo 工程\n    |-- HBuilder-uniPluginDemo          // uni-app 插件开发主工程 （本文档需要使用的工程）\n    |-- SDK                             // 依赖库及依赖资源文件\n    |-- Feature-iOS.xls                 // 功能模块与依赖库对应关系说明表格\n    |-- readme.txt                      // 目录说明\n```\n\n在聊插件开发之前，先讲一点预备知识，前面三节都是预备知识。后面插件的开发过程中，会涉及到这些知识内容。\n\n## 1. 自定义基座[^自定义基座]\n\n自定义基座，有两种方式获取，一种是用打包工程生成，另一种是通过云打包获取。\n\n### 1.1 [用打包工程生成自定义基座](https://ask.dcloud.net.cn/article/35485)\n\n1. 在打包原生工程[^打包工程]里找到 control.xml 文件，在 HBuilder 节点里查看是否有这2个：` debug=\"true\" syncDebug=\"true\" `配置，没有的话增加上。\n\n2. 修改打包工程的 Bundle identifier 为你 App 的 Bundle identifier\n\n3. 在原生打包工程里找到 info.plist 文件并增加一项：`Application supports iTunes file sharing`， 值设为 `yes`。\n\n4. 确保原生工程里`Pandora`文件夹下的apps文件夹里只有一个文件夹，并且文件夹的名称和里面的 `manifest` 的 `id` 值相同。\n\n5. 确保 control.xml 文件里的 appid 的值和 apps 目录下的第一个文件夹的名称一致。\n\n6. 确保 HBuilderX 里要调试的代码的 appid 和 control.xml 的appid值一致。\n\n7. 使用 Xcode 的 Product 下的 archive 打包，然后生成ipa，并把 ipa 名称命名为：`iOS_debug.ipa`。\n\n8. 在 uni-app 工程里主目录下新建一个名称为 unpackage 的文件夹，再在unpackage文件夹下新建一个名称为 debug 文件夹，并把生成的`iOS_debug.ipa`包放入 `debug` 文件夹下。\n\n到这里，自定义基座就制作完成了。\n\n要调试的话，在 HBuildX 里，找到之前 app id 相同的 uni-app 工程，点击`运行 --> 运行到手机或模拟器 --> 使用自定义基座运行（iOS）`，等待连接成功之后，然后`运行 --> 运行到手机或模拟器 --> 选择真机或者模拟器`，HBuilderX 就会用自定义基座，把 App 运行到 iOS 设备上了。\n\n### 1.2 云打包生成自定义基座\n\nHBuilderX 的菜单： `运行 --> 运行到手机或模拟器 --> 制作自定义基座`， 并配置好，然后点击页面右下角的`打包`，打包后有下载链接地址，下载下来的文件命名成`iOS_debug.ipa`，就是自定义基座。\n\n要调试的话，基座下载下来后，放到项目的 `unpackage --> debug` 下目录下。\n\n**提示1：** 配置云打包的自定义基座需要 iOS 证书与 Profile 文件。\n\n## 2. 运行到设备上\n\n### 2.1 Xcode\n\n运行 uni-app 到设备上也有两种方式，一种是通过 HbuilderX 运行到设备上，另一种是通过 Xcode。\n\n首先用 HBuilderX 打包 `uni-app`，操作路径：`发行 --> 原生 App 本地打包 --> 生成本地 App 资源`，HBuilderX 处理好之后，会在控制台输出 App 包资源的路径，得到 App 包资源后，把 App 包资源放到原生 iOS 打包工程的指定目录`Pandora/apps/`下，并修改 `control.xml` 文件的 `appid` 与 打包资源的文件夹名称相同。\n\n然后，运行打包工程到设备上即可，运行打包工程之前，最好配置好 App 相应的信息，例如名称，icon，版本等。\n\n### 2.2 HBuilderX\n\n在 HBuilderX 上运行比较简单，操作路径： `运行 --> 运行到手机或模拟器 --> 选择真机或者模拟器`。\n\n这里的运行环境，会有两个：`标准基座` 与 `自定义基座`，看开发需要，选择相应环境。\n\n## 3. [离线打包](https://nativesupport.dcloud.net.cn/AppDocs/usesdk/ios?id=开发环境)\n\n去到原生 iOS 打包工程，按照下面的步骤操作：\n\n1. 这里主要是配置工程，诸如 App 名字，版本，icon，国际化等的一些信息。照着教程配置就好。\n\n2. 配置好之后，把从 HBuilderX 打包出来的 App 包资源放到 Pandora 的 apps 文件夹下去。\n\n3. 最后一步是打包，上面都配置好的话，就跟 iOS 原生打包一样，操作路径，在 Xcode 里：`Product --> Archive`。\n\n**提示2：** 记得修改 contol.xml 文件里的内容，比如环境是 Debug 还是 Release。打 Release 包的话，syncDebug 配置记得去掉。\n\n## 4. [插件开发](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios)\n\n为了开发过程中条理清晰，开始开发之前，先区分几个概念。\n\n插件从类型上区分，有两种类型，这根 uni-app 的发展有关，一种是 H5+插件，不过这种插件已经成为过去式了，另一种是 uni-app 插件，这种是目前 Dcloud 的推荐的。\n\n具体的某一个插件又有两种形式，比如Dcloud SDK 里的插件工程[^插件工程]里有个`DCTestUniPlugin`插件，这个插件，提供了 `module` 和 `component` 两种形式。\n\n1. module： 是纯功能性的插件，没有具体界面的，比如获取手机电量，地理位置等功能。\n2. component：是提供iOS 或者 Android 原生界面的插件类型。\n\n[创建工程](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=创建插件工程)，[导入插件工程](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=导入插件工程)，[配置工程](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=工程配置)都比较简单，建议大家直接看官网，照葫芦画瓢就是。\n\n这里直接从[代码开发](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=代码实现)部分开始聊。\n\n### 4.1 原生方法导出\n\niOS 中有两种方法处理方式，一种是同步的，一种是异步的。原生的方法要通过某种途径导出后，uni-app 才能使用。\n\n#### 4.1.1 同步方法导出\n\n```objc\n// 通过宏 UNI_EXPORT_METHOD_SYNC 将同步方法暴露给 js 端\nUNI_EXPORT_METHOD_SYNC(@selector(testSyncFunc:))\n/// 同步方法（注：同步方法会在 js 线程执行）\n/// @param options js 端调用方法时传递的参数   支持：String、Number、Boolean、JsonObject 类型\n- (NSString *)testSyncFunc:(NSDictionary *)options {\n    // options 为 js 端调用此方法时传递的参数\n    NSLog(@\"%@\",options);\n\n    /*\n     可以在该方法中实现原生功能，然后直接通过 return 返回参数给 js\n     */\n\n    // 同步返回参数给 js 端  支持：NSString、NSDictionary（只能包含基本数据类型）、NSNumber 类型\n    return @\"success\";\n}\n```\n\n#### 4.1.2 异步方法导出\n\n```objc\n// 通过宏 UNI_EXPORT_METHOD 将异步方法暴露给 js 端\nUNI_EXPORT_METHOD(@selector(testAsyncFunc:callback:))\n/// 异步方法（注：异步方法会在主线程（UI线程）执行）\n/// @param options js 端调用方法时传递的参数   支持：String、Number、Boolean、JsonObject 类型\n/// @param callback 回调方法，回传参数给 js 端   支持： NSString、NSDictionary（只能包含基本数据类型）、NSNumber 类型\n- (void)testAsyncFunc:(NSDictionary *)options callback:(UniModuleKeepAliveCallback)callback { \n\n    // options 为 js 端调用此方法时传递的参数 NSLog(@\"%@\",options); // 可以在该方法中实现原生能力，然后通过 callback 回调到 js \n\n   if (callback) {\n       // 第一个参数为回传给js端的数据，第二个参数为标识，表示该回调方法是否支持多次调用，如果原生端需要多次回调js端则第二个参数传 YES;\n        callback(@\"success\",NO);\n\n    }\n}\n```\n\n### 4.2 Hook APP事件\n\n如果需要在 App 启动时初始化或者需要获取系统的一些事件， 需要新建一个XXXXProxy类（注意命名加前缀防止冲突），继承 NSObject 遵守UniPluginProtocol协议\n\n```objc\n-(void)onCreateUniPlugin;\n\n- (BOOL)application:(UIApplication *_Nullable)application didFinishLaunchingWithOptions:(NSDictionary *_Nullable)launchOptions;\n- (void)application:(UIApplication *_Nullable)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *_Nullable)deviceToken;\n- (void)application:(UIApplication *_Nullable)application didFailToRegisterForRemoteNotificationsWithError:(NSError *_Nullable)err;\n- (void)application:(UIApplication *_Nullable)application didReceiveRemoteNotification:(NSDictionary *_Nullable)userInfo;\n- (void)application:(UIApplication *_Nullable)application didReceiveLocalNotification:(UILocalNotification *_Nullable)notification;\n- (BOOL)application:(UIApplication *_Nullable)application handleOpenURL:(NSURL *_Nullable)url;\n- (BOOL)application:(UIApplication *_Nullable)app openURL:(NSURL *_Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> *_Nullable)options NS_AVAILABLE_IOS(9_0);\n\n- (void)applicationWillResignActive:(UIApplication *)application;\n- (void)applicationDidBecomeActive:(UIApplication *)application;\n- (void)applicationDidEnterBackground:(UIApplication *)application;\n- (void)applicationWillEnterForeground:(UIApplication *)application;\n\n- (BOOL)application:(UIApplication *_Nullable)application continueUserActivity:(NSUserActivity *_Nullable)userActivity restorationHandler:(void(^_Nullable)(NSArray * __nullable restorableObjects))restorationHandler API_AVAILABLE(ios(8.0));\n```\n\n### 4.3 性能\n\n这种跨端的 App 本身性能问题有一定的瓶颈，所以 Dcloud 也提供了原生代码的运行线程和队列的控制。\n\n#### 4.3.1 线程\n\n想要在指定线程里运行原生代码，由于原生代码不一定能够一直运行在前台，所以线程也需要保活，可以这么实现`uniExecuteThread`\n\n```objc\n-(NSThread*)uniExecuteThread\n{\n    if ( nil == _uniExecuteThread) {\n        _uniExecuteThread = [[NSThread alloc] initWithTarget:self selector:@selector(uniNewThread) object:nil];\n        [_uniExecuteThread setName:@\"TestUniModule\"];\n        [_uniExecuteThread start];\n    }\n    return _uniExecuteThread;\n}\n\n-(void)uniNewThread\n{\n    @autoreleasepool {\n        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];\n        [runLoop addPort:[NSMachPort port] forMode:NSRunLoopCommonModes];\n        [runLoop run];\n    }\n}\n```\n\n#### 4.3.2 队列\n\n想要在指定线程里运行原生代码，可以实现 `uniExecuteQueue`属性，可以在这个属性里返回一个具体的队列。\n\nDCloud SDK 提供了插件相关的[API信息](https://nativesupport.dcloud.net.cn/NativePlugin/API/ios?id=dcunimodule)。\n\n### 4.4 配置插件信息\n\n选中工程中的 `HBuilder-uniPlugin-Info.plist`文件`右键->Open As->Source Code`找到`dcloud_uniplugins`节点，copy下面的内容添加到`dcloud_uniplugins`节点下，按您插件的实际信息填写对应的项\n\n```xml\n<dict>\n    <key>hooksClass</key>\n    <string>填写 hooksClass 类名 </string>\n    <key>plugins</key>\n    <array>\n        <dict>\n            <key>class</key>\n            <string>填写 module 或 component 的类名</string>\n            <key>name</key>\n            <string>填写暴露给js端对应的 module 或 component 名称</string>\n            <key>type</key>\n            <string>填写 module 或 component</string>\n        </dict>\n    </array>\n</dict>\n```\n\n* hooksClass：App系统方法钩子类，值是类名，是给有些插件需要在 app 启动时做初始化或者获取系统事件用的，如果没有可以不填为空\n* class：module 或 component 对应的原生类名（示例中为 TestModule）\n* name：module 或 component 对应的名称（注意：module 的 name 必须以插件id为前缀或和插件id相同，示例为DCTestUniPlugin-TestModule，其中 DCTestUniPlugin 为插件的id，需要保证唯一性，避免与其他插件冲突，component 的name 没有强制要求，但是也要保证唯一比如 dc-map）\n* type：module 或 component （示例为module）\n\n### 4.5 生成插件包\n\n此步骤应该在您插件所有功能都开发完毕，并在开发工程中测试完成后进行，插件目录结构类似：\n\n```shell\n|-- 插件id                               // 插件包是一个以插件id命名的文件夹\n    |-- android                         // 存放 android 插件所需要的依赖库及资源文件\n    |-- ios                             // 存放 ios 插件所需要的依赖库及资源文件\n    |-- package.json                    // 插件配置文件\n```\n\n`package.json` 文件是插件包的信息，[具体配置参考](https://nativesupport.dcloud.net.cn/NativePlugin/course/package?id=packagejson)，内容类似：\n\n```json\n{\n    \"name\": \"TestUniPlugin\",\n    \"id\": \"DCTestUniPlugin\",\n    \"version\": \"1.0.0\",\n    \"description\": \"uni示例插件\",\n    \"_dp_type\": \"nativeplugin\",\n    \"_dp_nativeplugin\": {\n        \"ios\": {\n            \"plugins\": [{\n                \"type\": \"module\",\n                \"name\": \"DCTestUniPlugin-TestModule\",\n                \"class\": \"TestModule\"\n            }, {\n                \"type\": \"component\",\n                \"name\": \"dc-testmap\",\n                \"class\": \"TestComponent\"\n            }],\n            \"frameworks\": [\"MapKit.framework\"],\n            \"integrateType\": \"framework\",\n            \"deploymentTarget\": \"9.0\"\n        }\n    }\n}\n```\n\n然后以`插件id`为名新建一个文件夹，将编辑好的 `package.json` 放进去，然后在文件夹中在新建一个 ios 文件夹，将生成的依赖库`DCTestUniPlugin.framework`copy 到 ios 目录下，这样我们的插件包就构建完成了。\n\n接下来介绍一下如何使用本地原生的 iOS 插件。\n\n## 5. uni-app 使用 iOS 原生插件\n\n将原生插件导出来，按照要求放到 uni-app 里面去，然后在代码里，可以这么使用\n\n```javascript\n<template>\n    <div>\n        <button type=\"primary\" @click=\"testAsyncFunc\">testAsyncFunc</button>\n        <button type=\"primary\" @click=\"testSyncFunc\">testSyncFunc</button>\n    </div>\n</template>\n\n<script>\n    // 首先需要通过 uni.requireNativePlugin(\"ModuleName\") 获取 module \n    var testModule = uni.requireNativePlugin(\"DCTestUniPlugin-TestModule\")\n    export default {\n        methods: {\n            testAsyncFunc() {\n                // 调用异步方法\n                testModule.testAsyncFunc({\n                        'name': 'uni-app',\n                        'age': 1\n                    },\n                    (ret) => {\n                        uni.showToast({\n                            title:'调用异步方法 ' + ret,\n                            icon: \"none\"\n                        })\n                    })\n            },\n            testSyncFunc() {\n                // 调用同步方法\n                var ret = testModule.testSyncFunc({\n                    'name': 'uni-app',\n                    'age': 1\n                })\n\n                uni.showToast({\n                    title:'调用同步方法 ' + ret,\n                    icon: \"none\"\n                })\n            }\n        }\n    }\n</script>\n```\n\n写好代码后，[生成本地 App 包资源](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=导入-uni-app-资源)，[导入到插件开发工程](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=导入-uni-app-资源-1)，选择 `HBuilder Target` 运行，然后测试一下功能是否正常。\n\n**提示 3**: 前端代码修改后重新导入资源时，需要在插件开发工程中删除之前导入的资源，同时将设备上的 App 删除，避免因为缓存问题导致加载的还是旧的资源。\n\n## 6. 插件市场\n\n原生插件发布到插件市场，本篇文章不涉及这部分内容，具体见[提交原生插件到Dcloud插件市场](https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=提交插件市场)。\n\n[^DCloud-SDK]: [Dcloud SDK](https://nativesupport.dcloud.net.cn/AppDocs/download/ios)\n[^打包工程]: 打包工程是指 Dcloud SDK 目录下的 `HBuilder-Hello` iOS 原生项目。\n[^插件工程]: 插件工程是指 Dcloud SDK 目录下的 `HBuilder-uniPluginDemo` iOS 原生项目\n[^自定义基座]: [自定义基座](https://ask.dcloud.net.cn/article/35115)\n","slug":"iOS/Webs/DCloud/DCloudGuideline","published":1,"updated":"2021-09-22T07:00:30.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4f004oiu9k3pd7cz7s","content":"<p>[TOC]</p>\n<p>要开发原生插件的话，首先得去 DCloud 官网下载 DCloud SDK[^DCloud-SDK]。DCloud SDK 下载下来解压后，内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--iOSSDK    </span><br><span class=\"line\">    |-- HBuilder-Hello                  // uni-app 离线打包工程</span><br><span class=\"line\">    |-- HBuilder-ExampleDemo            // Demo 工程</span><br><span class=\"line\">    |-- HBuilder-uniPluginDemo          // uni-app 插件开发主工程 （本文档需要使用的工程）</span><br><span class=\"line\">    |-- SDK                             // 依赖库及依赖资源文件</span><br><span class=\"line\">    |-- Feature-iOS.xls                 // 功能模块与依赖库对应关系说明表格</span><br><span class=\"line\">    |-- readme.txt                      // 目录说明</span><br></pre></td></tr></table></figure>\n\n<p>在聊插件开发之前，先讲一点预备知识，前面三节都是预备知识。后面插件的开发过程中，会涉及到这些知识内容。</p>\n<h2 id=\"1-自定义基座-自定义基座\"><a href=\"#1-自定义基座-自定义基座\" class=\"headerlink\" title=\"1. 自定义基座[^自定义基座]\"></a>1. 自定义基座[^自定义基座]</h2><p>自定义基座，有两种方式获取，一种是用打包工程生成，另一种是通过云打包获取。</p>\n<h3 id=\"1-1-用打包工程生成自定义基座\"><a href=\"#1-1-用打包工程生成自定义基座\" class=\"headerlink\" title=\"1.1 用打包工程生成自定义基座\"></a>1.1 <a href=\"https://ask.dcloud.net.cn/article/35485\">用打包工程生成自定义基座</a></h3><ol>\n<li><p>在打包原生工程[^打包工程]里找到 control.xml 文件，在 HBuilder 节点里查看是否有这2个：<code>debug=&quot;true&quot; syncDebug=&quot;true&quot;</code>配置，没有的话增加上。</p>\n</li>\n<li><p>修改打包工程的 Bundle identifier 为你 App 的 Bundle identifier</p>\n</li>\n<li><p>在原生打包工程里找到 info.plist 文件并增加一项：<code>Application supports iTunes file sharing</code>， 值设为 <code>yes</code>。</p>\n</li>\n<li><p>确保原生工程里<code>Pandora</code>文件夹下的apps文件夹里只有一个文件夹，并且文件夹的名称和里面的 <code>manifest</code> 的 <code>id</code> 值相同。</p>\n</li>\n<li><p>确保 control.xml 文件里的 appid 的值和 apps 目录下的第一个文件夹的名称一致。</p>\n</li>\n<li><p>确保 HBuilderX 里要调试的代码的 appid 和 control.xml 的appid值一致。</p>\n</li>\n<li><p>使用 Xcode 的 Product 下的 archive 打包，然后生成ipa，并把 ipa 名称命名为：<code>iOS_debug.ipa</code>。</p>\n</li>\n<li><p>在 uni-app 工程里主目录下新建一个名称为 unpackage 的文件夹，再在unpackage文件夹下新建一个名称为 debug 文件夹，并把生成的<code>iOS_debug.ipa</code>包放入 <code>debug</code> 文件夹下。</p>\n</li>\n</ol>\n<p>到这里，自定义基座就制作完成了。</p>\n<p>要调试的话，在 HBuildX 里，找到之前 app id 相同的 uni-app 工程，点击<code>运行 --&gt; 运行到手机或模拟器 --&gt; 使用自定义基座运行（iOS）</code>，等待连接成功之后，然后<code>运行 --&gt; 运行到手机或模拟器 --&gt; 选择真机或者模拟器</code>，HBuilderX 就会用自定义基座，把 App 运行到 iOS 设备上了。</p>\n<h3 id=\"1-2-云打包生成自定义基座\"><a href=\"#1-2-云打包生成自定义基座\" class=\"headerlink\" title=\"1.2 云打包生成自定义基座\"></a>1.2 云打包生成自定义基座</h3><p>HBuilderX 的菜单： <code>运行 --&gt; 运行到手机或模拟器 --&gt; 制作自定义基座</code>， 并配置好，然后点击页面右下角的<code>打包</code>，打包后有下载链接地址，下载下来的文件命名成<code>iOS_debug.ipa</code>，就是自定义基座。</p>\n<p>要调试的话，基座下载下来后，放到项目的 <code>unpackage --&gt; debug</code> 下目录下。</p>\n<p><strong>提示1：</strong> 配置云打包的自定义基座需要 iOS 证书与 Profile 文件。</p>\n<h2 id=\"2-运行到设备上\"><a href=\"#2-运行到设备上\" class=\"headerlink\" title=\"2. 运行到设备上\"></a>2. 运行到设备上</h2><h3 id=\"2-1-Xcode\"><a href=\"#2-1-Xcode\" class=\"headerlink\" title=\"2.1 Xcode\"></a>2.1 Xcode</h3><p>运行 uni-app 到设备上也有两种方式，一种是通过 HbuilderX 运行到设备上，另一种是通过 Xcode。</p>\n<p>首先用 HBuilderX 打包 <code>uni-app</code>，操作路径：<code>发行 --&gt; 原生 App 本地打包 --&gt; 生成本地 App 资源</code>，HBuilderX 处理好之后，会在控制台输出 App 包资源的路径，得到 App 包资源后，把 App 包资源放到原生 iOS 打包工程的指定目录<code>Pandora/apps/</code>下，并修改 <code>control.xml</code> 文件的 <code>appid</code> 与 打包资源的文件夹名称相同。</p>\n<p>然后，运行打包工程到设备上即可，运行打包工程之前，最好配置好 App 相应的信息，例如名称，icon，版本等。</p>\n<h3 id=\"2-2-HBuilderX\"><a href=\"#2-2-HBuilderX\" class=\"headerlink\" title=\"2.2 HBuilderX\"></a>2.2 HBuilderX</h3><p>在 HBuilderX 上运行比较简单，操作路径： <code>运行 --&gt; 运行到手机或模拟器 --&gt; 选择真机或者模拟器</code>。</p>\n<p>这里的运行环境，会有两个：<code>标准基座</code> 与 <code>自定义基座</code>，看开发需要，选择相应环境。</p>\n<h2 id=\"3-离线打包\"><a href=\"#3-离线打包\" class=\"headerlink\" title=\"3. 离线打包\"></a>3. <a href=\"https://nativesupport.dcloud.net.cn/AppDocs/usesdk/ios?id=%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\">离线打包</a></h2><p>去到原生 iOS 打包工程，按照下面的步骤操作：</p>\n<ol>\n<li><p>这里主要是配置工程，诸如 App 名字，版本，icon，国际化等的一些信息。照着教程配置就好。</p>\n</li>\n<li><p>配置好之后，把从 HBuilderX 打包出来的 App 包资源放到 Pandora 的 apps 文件夹下去。</p>\n</li>\n<li><p>最后一步是打包，上面都配置好的话，就跟 iOS 原生打包一样，操作路径，在 Xcode 里：<code>Product --&gt; Archive</code>。</p>\n</li>\n</ol>\n<p><strong>提示2：</strong> 记得修改 contol.xml 文件里的内容，比如环境是 Debug 还是 Release。打 Release 包的话，syncDebug 配置记得去掉。</p>\n<h2 id=\"4-插件开发\"><a href=\"#4-插件开发\" class=\"headerlink\" title=\"4. 插件开发\"></a>4. <a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios\">插件开发</a></h2><p>为了开发过程中条理清晰，开始开发之前，先区分几个概念。</p>\n<p>插件从类型上区分，有两种类型，这根 uni-app 的发展有关，一种是 H5+插件，不过这种插件已经成为过去式了，另一种是 uni-app 插件，这种是目前 Dcloud 的推荐的。</p>\n<p>具体的某一个插件又有两种形式，比如Dcloud SDK 里的插件工程[^插件工程]里有个<code>DCTestUniPlugin</code>插件，这个插件，提供了 <code>module</code> 和 <code>component</code> 两种形式。</p>\n<ol>\n<li>module： 是纯功能性的插件，没有具体界面的，比如获取手机电量，地理位置等功能。</li>\n<li>component：是提供iOS 或者 Android 原生界面的插件类型。</li>\n</ol>\n<p><a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E5%88%9B%E5%BB%BA%E6%8F%92%E4%BB%B6%E5%B7%A5%E7%A8%8B\">创建工程</a>，<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E5%AF%BC%E5%85%A5%E6%8F%92%E4%BB%B6%E5%B7%A5%E7%A8%8B\">导入插件工程</a>，<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE\">配置工程</a>都比较简单，建议大家直接看官网，照葫芦画瓢就是。</p>\n<p>这里直接从<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">代码开发</a>部分开始聊。</p>\n<h3 id=\"4-1-原生方法导出\"><a href=\"#4-1-原生方法导出\" class=\"headerlink\" title=\"4.1 原生方法导出\"></a>4.1 原生方法导出</h3><p>iOS 中有两种方法处理方式，一种是同步的，一种是异步的。原生的方法要通过某种途径导出后，uni-app 才能使用。</p>\n<h4 id=\"4-1-1-同步方法导出\"><a href=\"#4-1-1-同步方法导出\" class=\"headerlink\" title=\"4.1.1 同步方法导出\"></a>4.1.1 同步方法导出</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过宏 UNI_EXPORT_METHOD_SYNC 将同步方法暴露给 js 端</span></span><br><span class=\"line\">UNI_EXPORT_METHOD_SYNC(<span class=\"keyword\">@selector</span>(testSyncFunc:))</span><br><span class=\"line\"><span class=\"comment\">/// 同步方法（注：同步方法会在 js 线程执行）</span></span><br><span class=\"line\"><span class=\"comment\">/// @param options js 端调用方法时传递的参数   支持：String、Number、Boolean、JsonObject 类型</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)testSyncFunc:(<span class=\"built_in\">NSDictionary</span> *)options &#123;</span><br><span class=\"line\">    <span class=\"comment\">// options 为 js 端调用此方法时传递的参数</span></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>,options);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     可以在该方法中实现原生功能，然后直接通过 return 返回参数给 js</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 同步返回参数给 js 端  支持：NSString、NSDictionary（只能包含基本数据类型）、NSNumber 类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">@&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-1-2-异步方法导出\"><a href=\"#4-1-2-异步方法导出\" class=\"headerlink\" title=\"4.1.2 异步方法导出\"></a>4.1.2 异步方法导出</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过宏 UNI_EXPORT_METHOD 将异步方法暴露给 js 端</span></span><br><span class=\"line\">UNI_EXPORT_METHOD(<span class=\"keyword\">@selector</span>(testAsyncFunc:callback:))</span><br><span class=\"line\"><span class=\"comment\">/// 异步方法（注：异步方法会在主线程（UI线程）执行）</span></span><br><span class=\"line\"><span class=\"comment\">/// @param options js 端调用方法时传递的参数   支持：String、Number、Boolean、JsonObject 类型</span></span><br><span class=\"line\"><span class=\"comment\">/// @param callback 回调方法，回传参数给 js 端   支持： NSString、NSDictionary（只能包含基本数据类型）、NSNumber 类型</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)testAsyncFunc:(<span class=\"built_in\">NSDictionary</span> *)options callback:(UniModuleKeepAliveCallback)callback &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// options 为 js 端调用此方法时传递的参数 NSLog(@&quot;%@&quot;,options); // 可以在该方法中实现原生能力，然后通过 callback 回调到 js </span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 第一个参数为回传给js端的数据，第二个参数为标识，表示该回调方法是否支持多次调用，如果原生端需要多次回调js端则第二个参数传 YES;</span></span><br><span class=\"line\">        callback(<span class=\"string\">@&quot;success&quot;</span>,<span class=\"literal\">NO</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-Hook-APP事件\"><a href=\"#4-2-Hook-APP事件\" class=\"headerlink\" title=\"4.2 Hook APP事件\"></a>4.2 Hook APP事件</h3><p>如果需要在 App 启动时初始化或者需要获取系统的一些事件， 需要新建一个XXXXProxy类（注意命名加前缀防止冲突），继承 NSObject 遵守UniPluginProtocol协议</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>)onCreateUniPlugin;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *_Nullable)launchOptions;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class=\"built_in\">NSData</span> *_Nullable)deviceToken;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application didFailToRegisterForRemoteNotificationsWithError:(<span class=\"built_in\">NSError</span> *_Nullable)err;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application didReceiveRemoteNotification:(<span class=\"built_in\">NSDictionary</span> *_Nullable)userInfo;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application didReceiveLocalNotification:(<span class=\"built_in\">UILocalNotification</span> *_Nullable)notification;</span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application handleOpenURL:(<span class=\"built_in\">NSURL</span> *_Nullable)url;</span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)app openURL:(<span class=\"built_in\">NSURL</span> *_Nonnull)url options:(<span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">UIApplicationOpenURLOptionsKey</span>, <span class=\"keyword\">id</span>&gt; *_Nullable)options <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">9</span>_0);</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationWillResignActive:(<span class=\"built_in\">UIApplication</span> *)application;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationDidBecomeActive:(<span class=\"built_in\">UIApplication</span> *)application;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationDidEnterBackground:(<span class=\"built_in\">UIApplication</span> *)application;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationWillEnterForeground:(<span class=\"built_in\">UIApplication</span> *)application;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application continueUserActivity:(<span class=\"built_in\">NSUserActivity</span> *_Nullable)userActivity restorationHandler:(<span class=\"keyword\">void</span>(^_Nullable)(<span class=\"built_in\">NSArray</span> * __<span class=\"keyword\">nullable</span> restorableObjects))restorationHandler API_AVAILABLE(ios(<span class=\"number\">8.0</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-性能\"><a href=\"#4-3-性能\" class=\"headerlink\" title=\"4.3 性能\"></a>4.3 性能</h3><p>这种跨端的 App 本身性能问题有一定的瓶颈，所以 Dcloud 也提供了原生代码的运行线程和队列的控制。</p>\n<h4 id=\"4-3-1-线程\"><a href=\"#4-3-1-线程\" class=\"headerlink\" title=\"4.3.1 线程\"></a>4.3.1 线程</h4><p>想要在指定线程里运行原生代码，由于原生代码不一定能够一直运行在前台，所以线程也需要保活，可以这么实现<code>uniExecuteThread</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"built_in\">NSThread</span>*)uniExecuteThread</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"literal\">nil</span> == _uniExecuteThread) &#123;</span><br><span class=\"line\">        _uniExecuteThread = [[<span class=\"built_in\">NSThread</span> alloc] initWithTarget:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(uniNewThread) object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">        [_uniExecuteThread setName:<span class=\"string\">@&quot;TestUniModule&quot;</span>];</span><br><span class=\"line\">        [_uniExecuteThread start];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _uniExecuteThread;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)uniNewThread</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSRunLoop</span> *runLoop = [<span class=\"built_in\">NSRunLoop</span> currentRunLoop];</span><br><span class=\"line\">        [runLoop addPort:[<span class=\"built_in\">NSMachPort</span> port] forMode:<span class=\"built_in\">NSRunLoopCommonModes</span>];</span><br><span class=\"line\">        [runLoop run];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-2-队列\"><a href=\"#4-3-2-队列\" class=\"headerlink\" title=\"4.3.2 队列\"></a>4.3.2 队列</h4><p>想要在指定线程里运行原生代码，可以实现 <code>uniExecuteQueue</code>属性，可以在这个属性里返回一个具体的队列。</p>\n<p>DCloud SDK 提供了插件相关的<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/API/ios?id=dcunimodule\">API信息</a>。</p>\n<h3 id=\"4-4-配置插件信息\"><a href=\"#4-4-配置插件信息\" class=\"headerlink\" title=\"4.4 配置插件信息\"></a>4.4 配置插件信息</h3><p>选中工程中的 <code>HBuilder-uniPlugin-Info.plist</code>文件<code>右键-&gt;Open As-&gt;Source Code</code>找到<code>dcloud_uniplugins</code>节点，copy下面的内容添加到<code>dcloud_uniplugins</code>节点下，按您插件的实际信息填写对应的项</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>hooksClass<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>填写 hooksClass 类名 <span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>plugins<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>class<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>填写 module 或 component 的类名<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>填写暴露给js端对应的 module 或 component 名称<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>type<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>填写 module 或 component<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>hooksClass：App系统方法钩子类，值是类名，是给有些插件需要在 app 启动时做初始化或者获取系统事件用的，如果没有可以不填为空</li>\n<li>class：module 或 component 对应的原生类名（示例中为 TestModule）</li>\n<li>name：module 或 component 对应的名称（注意：module 的 name 必须以插件id为前缀或和插件id相同，示例为DCTestUniPlugin-TestModule，其中 DCTestUniPlugin 为插件的id，需要保证唯一性，避免与其他插件冲突，component 的name 没有强制要求，但是也要保证唯一比如 dc-map）</li>\n<li>type：module 或 component （示例为module）</li>\n</ul>\n<h3 id=\"4-5-生成插件包\"><a href=\"#4-5-生成插件包\" class=\"headerlink\" title=\"4.5 生成插件包\"></a>4.5 生成插件包</h3><p>此步骤应该在您插件所有功能都开发完毕，并在开发工程中测试完成后进行，插件目录结构类似：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- 插件id                               // 插件包是一个以插件id命名的文件夹</span><br><span class=\"line\">    |-- android                         // 存放 android 插件所需要的依赖库及资源文件</span><br><span class=\"line\">    |-- ios                             // 存放 ios 插件所需要的依赖库及资源文件</span><br><span class=\"line\">    |-- package.json                    // 插件配置文件</span><br></pre></td></tr></table></figure>\n\n<p><code>package.json</code> 文件是插件包的信息，<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/package?id=packagejson\">具体配置参考</a>，内容类似：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;TestUniPlugin&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;DCTestUniPlugin&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;uni示例插件&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;_dp_type&quot;</span>: <span class=\"string\">&quot;nativeplugin&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;_dp_nativeplugin&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;ios&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;plugins&quot;</span>: [&#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;module&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;DCTestUniPlugin-TestModule&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;class&quot;</span>: <span class=\"string\">&quot;TestModule&quot;</span></span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;component&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;dc-testmap&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;class&quot;</span>: <span class=\"string\">&quot;TestComponent&quot;</span></span><br><span class=\"line\">            &#125;],</span><br><span class=\"line\">            <span class=\"attr\">&quot;frameworks&quot;</span>: [<span class=\"string\">&quot;MapKit.framework&quot;</span>],</span><br><span class=\"line\">            <span class=\"attr\">&quot;integrateType&quot;</span>: <span class=\"string\">&quot;framework&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;deploymentTarget&quot;</span>: <span class=\"string\">&quot;9.0&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后以<code>插件id</code>为名新建一个文件夹，将编辑好的 <code>package.json</code> 放进去，然后在文件夹中在新建一个 ios 文件夹，将生成的依赖库<code>DCTestUniPlugin.framework</code>copy 到 ios 目录下，这样我们的插件包就构建完成了。</p>\n<p>接下来介绍一下如何使用本地原生的 iOS 插件。</p>\n<h2 id=\"5-uni-app-使用-iOS-原生插件\"><a href=\"#5-uni-app-使用-iOS-原生插件\" class=\"headerlink\" title=\"5. uni-app 使用 iOS 原生插件\"></a>5. uni-app 使用 iOS 原生插件</h2><p>将原生插件导出来，按照要求放到 uni-app 里面去，然后在代码里，可以这么使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;testAsyncFunc&quot;</span>&gt;</span>testAsyncFunc<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;testSyncFunc&quot;</span>&gt;</span>testSyncFunc<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 首先需要通过 uni.requireNativePlugin(&quot;ModuleName&quot;) 获取 module </span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> testModule = uni.requireNativePlugin(<span class=\"string\">&quot;DCTestUniPlugin-TestModule&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"function\"><span class=\"title\">testAsyncFunc</span>(<span class=\"params\"></span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"comment\">// 调用异步方法</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                testModule.testAsyncFunc(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;uni-app&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        <span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">1</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"function\">(<span class=\"params\">ret</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        uni.showToast(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                            <span class=\"attr\">title</span>:<span class=\"string\">&#x27;调用异步方法 &#x27;</span> + ret,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                            <span class=\"attr\">icon</span>: <span class=\"string\">&quot;none&quot;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"function\"><span class=\"title\">testSyncFunc</span>(<span class=\"params\"></span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"comment\">// 调用同步方法</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"keyword\">var</span> ret = testModule.testSyncFunc(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;uni-app&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">1</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                uni.showToast(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"attr\">title</span>:<span class=\"string\">&#x27;调用同步方法 &#x27;</span> + ret,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"attr\">icon</span>: <span class=\"string\">&quot;none&quot;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>写好代码后，<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E5%AF%BC%E5%85%A5-uni-app-%E8%B5%84%E6%BA%90\">生成本地 App 包资源</a>，<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E5%AF%BC%E5%85%A5-uni-app-%E8%B5%84%E6%BA%90-1\">导入到插件开发工程</a>，选择 <code>HBuilder Target</code> 运行，然后测试一下功能是否正常。</p>\n<p><strong>提示 3</strong>: 前端代码修改后重新导入资源时，需要在插件开发工程中删除之前导入的资源，同时将设备上的 App 删除，避免因为缓存问题导致加载的还是旧的资源。</p>\n<h2 id=\"6-插件市场\"><a href=\"#6-插件市场\" class=\"headerlink\" title=\"6. 插件市场\"></a>6. 插件市场</h2><p>原生插件发布到插件市场，本篇文章不涉及这部分内容，具体见<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E6%8F%90%E4%BA%A4%E6%8F%92%E4%BB%B6%E5%B8%82%E5%9C%BA\">提交原生插件到Dcloud插件市场</a>。</p>\n<p>[^DCloud-SDK]: <a href=\"https://nativesupport.dcloud.net.cn/AppDocs/download/ios\">Dcloud SDK</a><br>[^打包工程]: 打包工程是指 Dcloud SDK 目录下的 <code>HBuilder-Hello</code> iOS 原生项目。<br>[^插件工程]: 插件工程是指 Dcloud SDK 目录下的 <code>HBuilder-uniPluginDemo</code> iOS 原生项目<br>[^自定义基座]: <a href=\"https://ask.dcloud.net.cn/article/35115\">自定义基座</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<p>要开发原生插件的话，首先得去 DCloud 官网下载 DCloud SDK[^DCloud-SDK]。DCloud SDK 下载下来解压后，内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--iOSSDK    </span><br><span class=\"line\">    |-- HBuilder-Hello                  // uni-app 离线打包工程</span><br><span class=\"line\">    |-- HBuilder-ExampleDemo            // Demo 工程</span><br><span class=\"line\">    |-- HBuilder-uniPluginDemo          // uni-app 插件开发主工程 （本文档需要使用的工程）</span><br><span class=\"line\">    |-- SDK                             // 依赖库及依赖资源文件</span><br><span class=\"line\">    |-- Feature-iOS.xls                 // 功能模块与依赖库对应关系说明表格</span><br><span class=\"line\">    |-- readme.txt                      // 目录说明</span><br></pre></td></tr></table></figure>\n\n<p>在聊插件开发之前，先讲一点预备知识，前面三节都是预备知识。后面插件的开发过程中，会涉及到这些知识内容。</p>\n<h2 id=\"1-自定义基座-自定义基座\"><a href=\"#1-自定义基座-自定义基座\" class=\"headerlink\" title=\"1. 自定义基座[^自定义基座]\"></a>1. 自定义基座[^自定义基座]</h2><p>自定义基座，有两种方式获取，一种是用打包工程生成，另一种是通过云打包获取。</p>\n<h3 id=\"1-1-用打包工程生成自定义基座\"><a href=\"#1-1-用打包工程生成自定义基座\" class=\"headerlink\" title=\"1.1 用打包工程生成自定义基座\"></a>1.1 <a href=\"https://ask.dcloud.net.cn/article/35485\">用打包工程生成自定义基座</a></h3><ol>\n<li><p>在打包原生工程[^打包工程]里找到 control.xml 文件，在 HBuilder 节点里查看是否有这2个：<code>debug=&quot;true&quot; syncDebug=&quot;true&quot;</code>配置，没有的话增加上。</p>\n</li>\n<li><p>修改打包工程的 Bundle identifier 为你 App 的 Bundle identifier</p>\n</li>\n<li><p>在原生打包工程里找到 info.plist 文件并增加一项：<code>Application supports iTunes file sharing</code>， 值设为 <code>yes</code>。</p>\n</li>\n<li><p>确保原生工程里<code>Pandora</code>文件夹下的apps文件夹里只有一个文件夹，并且文件夹的名称和里面的 <code>manifest</code> 的 <code>id</code> 值相同。</p>\n</li>\n<li><p>确保 control.xml 文件里的 appid 的值和 apps 目录下的第一个文件夹的名称一致。</p>\n</li>\n<li><p>确保 HBuilderX 里要调试的代码的 appid 和 control.xml 的appid值一致。</p>\n</li>\n<li><p>使用 Xcode 的 Product 下的 archive 打包，然后生成ipa，并把 ipa 名称命名为：<code>iOS_debug.ipa</code>。</p>\n</li>\n<li><p>在 uni-app 工程里主目录下新建一个名称为 unpackage 的文件夹，再在unpackage文件夹下新建一个名称为 debug 文件夹，并把生成的<code>iOS_debug.ipa</code>包放入 <code>debug</code> 文件夹下。</p>\n</li>\n</ol>\n<p>到这里，自定义基座就制作完成了。</p>\n<p>要调试的话，在 HBuildX 里，找到之前 app id 相同的 uni-app 工程，点击<code>运行 --&gt; 运行到手机或模拟器 --&gt; 使用自定义基座运行（iOS）</code>，等待连接成功之后，然后<code>运行 --&gt; 运行到手机或模拟器 --&gt; 选择真机或者模拟器</code>，HBuilderX 就会用自定义基座，把 App 运行到 iOS 设备上了。</p>\n<h3 id=\"1-2-云打包生成自定义基座\"><a href=\"#1-2-云打包生成自定义基座\" class=\"headerlink\" title=\"1.2 云打包生成自定义基座\"></a>1.2 云打包生成自定义基座</h3><p>HBuilderX 的菜单： <code>运行 --&gt; 运行到手机或模拟器 --&gt; 制作自定义基座</code>， 并配置好，然后点击页面右下角的<code>打包</code>，打包后有下载链接地址，下载下来的文件命名成<code>iOS_debug.ipa</code>，就是自定义基座。</p>\n<p>要调试的话，基座下载下来后，放到项目的 <code>unpackage --&gt; debug</code> 下目录下。</p>\n<p><strong>提示1：</strong> 配置云打包的自定义基座需要 iOS 证书与 Profile 文件。</p>\n<h2 id=\"2-运行到设备上\"><a href=\"#2-运行到设备上\" class=\"headerlink\" title=\"2. 运行到设备上\"></a>2. 运行到设备上</h2><h3 id=\"2-1-Xcode\"><a href=\"#2-1-Xcode\" class=\"headerlink\" title=\"2.1 Xcode\"></a>2.1 Xcode</h3><p>运行 uni-app 到设备上也有两种方式，一种是通过 HbuilderX 运行到设备上，另一种是通过 Xcode。</p>\n<p>首先用 HBuilderX 打包 <code>uni-app</code>，操作路径：<code>发行 --&gt; 原生 App 本地打包 --&gt; 生成本地 App 资源</code>，HBuilderX 处理好之后，会在控制台输出 App 包资源的路径，得到 App 包资源后，把 App 包资源放到原生 iOS 打包工程的指定目录<code>Pandora/apps/</code>下，并修改 <code>control.xml</code> 文件的 <code>appid</code> 与 打包资源的文件夹名称相同。</p>\n<p>然后，运行打包工程到设备上即可，运行打包工程之前，最好配置好 App 相应的信息，例如名称，icon，版本等。</p>\n<h3 id=\"2-2-HBuilderX\"><a href=\"#2-2-HBuilderX\" class=\"headerlink\" title=\"2.2 HBuilderX\"></a>2.2 HBuilderX</h3><p>在 HBuilderX 上运行比较简单，操作路径： <code>运行 --&gt; 运行到手机或模拟器 --&gt; 选择真机或者模拟器</code>。</p>\n<p>这里的运行环境，会有两个：<code>标准基座</code> 与 <code>自定义基座</code>，看开发需要，选择相应环境。</p>\n<h2 id=\"3-离线打包\"><a href=\"#3-离线打包\" class=\"headerlink\" title=\"3. 离线打包\"></a>3. <a href=\"https://nativesupport.dcloud.net.cn/AppDocs/usesdk/ios?id=%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\">离线打包</a></h2><p>去到原生 iOS 打包工程，按照下面的步骤操作：</p>\n<ol>\n<li><p>这里主要是配置工程，诸如 App 名字，版本，icon，国际化等的一些信息。照着教程配置就好。</p>\n</li>\n<li><p>配置好之后，把从 HBuilderX 打包出来的 App 包资源放到 Pandora 的 apps 文件夹下去。</p>\n</li>\n<li><p>最后一步是打包，上面都配置好的话，就跟 iOS 原生打包一样，操作路径，在 Xcode 里：<code>Product --&gt; Archive</code>。</p>\n</li>\n</ol>\n<p><strong>提示2：</strong> 记得修改 contol.xml 文件里的内容，比如环境是 Debug 还是 Release。打 Release 包的话，syncDebug 配置记得去掉。</p>\n<h2 id=\"4-插件开发\"><a href=\"#4-插件开发\" class=\"headerlink\" title=\"4. 插件开发\"></a>4. <a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios\">插件开发</a></h2><p>为了开发过程中条理清晰，开始开发之前，先区分几个概念。</p>\n<p>插件从类型上区分，有两种类型，这根 uni-app 的发展有关，一种是 H5+插件，不过这种插件已经成为过去式了，另一种是 uni-app 插件，这种是目前 Dcloud 的推荐的。</p>\n<p>具体的某一个插件又有两种形式，比如Dcloud SDK 里的插件工程[^插件工程]里有个<code>DCTestUniPlugin</code>插件，这个插件，提供了 <code>module</code> 和 <code>component</code> 两种形式。</p>\n<ol>\n<li>module： 是纯功能性的插件，没有具体界面的，比如获取手机电量，地理位置等功能。</li>\n<li>component：是提供iOS 或者 Android 原生界面的插件类型。</li>\n</ol>\n<p><a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E5%88%9B%E5%BB%BA%E6%8F%92%E4%BB%B6%E5%B7%A5%E7%A8%8B\">创建工程</a>，<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E5%AF%BC%E5%85%A5%E6%8F%92%E4%BB%B6%E5%B7%A5%E7%A8%8B\">导入插件工程</a>，<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE\">配置工程</a>都比较简单，建议大家直接看官网，照葫芦画瓢就是。</p>\n<p>这里直接从<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\">代码开发</a>部分开始聊。</p>\n<h3 id=\"4-1-原生方法导出\"><a href=\"#4-1-原生方法导出\" class=\"headerlink\" title=\"4.1 原生方法导出\"></a>4.1 原生方法导出</h3><p>iOS 中有两种方法处理方式，一种是同步的，一种是异步的。原生的方法要通过某种途径导出后，uni-app 才能使用。</p>\n<h4 id=\"4-1-1-同步方法导出\"><a href=\"#4-1-1-同步方法导出\" class=\"headerlink\" title=\"4.1.1 同步方法导出\"></a>4.1.1 同步方法导出</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过宏 UNI_EXPORT_METHOD_SYNC 将同步方法暴露给 js 端</span></span><br><span class=\"line\">UNI_EXPORT_METHOD_SYNC(<span class=\"keyword\">@selector</span>(testSyncFunc:))</span><br><span class=\"line\"><span class=\"comment\">/// 同步方法（注：同步方法会在 js 线程执行）</span></span><br><span class=\"line\"><span class=\"comment\">/// @param options js 端调用方法时传递的参数   支持：String、Number、Boolean、JsonObject 类型</span></span><br><span class=\"line\">- (<span class=\"built_in\">NSString</span> *)testSyncFunc:(<span class=\"built_in\">NSDictionary</span> *)options &#123;</span><br><span class=\"line\">    <span class=\"comment\">// options 为 js 端调用此方法时传递的参数</span></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@&quot;%@&quot;</span>,options);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     可以在该方法中实现原生功能，然后直接通过 return 返回参数给 js</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 同步返回参数给 js 端  支持：NSString、NSDictionary（只能包含基本数据类型）、NSNumber 类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">@&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-1-2-异步方法导出\"><a href=\"#4-1-2-异步方法导出\" class=\"headerlink\" title=\"4.1.2 异步方法导出\"></a>4.1.2 异步方法导出</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过宏 UNI_EXPORT_METHOD 将异步方法暴露给 js 端</span></span><br><span class=\"line\">UNI_EXPORT_METHOD(<span class=\"keyword\">@selector</span>(testAsyncFunc:callback:))</span><br><span class=\"line\"><span class=\"comment\">/// 异步方法（注：异步方法会在主线程（UI线程）执行）</span></span><br><span class=\"line\"><span class=\"comment\">/// @param options js 端调用方法时传递的参数   支持：String、Number、Boolean、JsonObject 类型</span></span><br><span class=\"line\"><span class=\"comment\">/// @param callback 回调方法，回传参数给 js 端   支持： NSString、NSDictionary（只能包含基本数据类型）、NSNumber 类型</span></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)testAsyncFunc:(<span class=\"built_in\">NSDictionary</span> *)options callback:(UniModuleKeepAliveCallback)callback &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// options 为 js 端调用此方法时传递的参数 NSLog(@&quot;%@&quot;,options); // 可以在该方法中实现原生能力，然后通过 callback 回调到 js </span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 第一个参数为回传给js端的数据，第二个参数为标识，表示该回调方法是否支持多次调用，如果原生端需要多次回调js端则第二个参数传 YES;</span></span><br><span class=\"line\">        callback(<span class=\"string\">@&quot;success&quot;</span>,<span class=\"literal\">NO</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-Hook-APP事件\"><a href=\"#4-2-Hook-APP事件\" class=\"headerlink\" title=\"4.2 Hook APP事件\"></a>4.2 Hook APP事件</h3><p>如果需要在 App 启动时初始化或者需要获取系统的一些事件， 需要新建一个XXXXProxy类（注意命名加前缀防止冲突），继承 NSObject 遵守UniPluginProtocol协议</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"keyword\">void</span>)onCreateUniPlugin;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *_Nullable)launchOptions;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class=\"built_in\">NSData</span> *_Nullable)deviceToken;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application didFailToRegisterForRemoteNotificationsWithError:(<span class=\"built_in\">NSError</span> *_Nullable)err;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application didReceiveRemoteNotification:(<span class=\"built_in\">NSDictionary</span> *_Nullable)userInfo;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application didReceiveLocalNotification:(<span class=\"built_in\">UILocalNotification</span> *_Nullable)notification;</span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application handleOpenURL:(<span class=\"built_in\">NSURL</span> *_Nullable)url;</span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)app openURL:(<span class=\"built_in\">NSURL</span> *_Nonnull)url options:(<span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">UIApplicationOpenURLOptionsKey</span>, <span class=\"keyword\">id</span>&gt; *_Nullable)options <span class=\"built_in\">NS_AVAILABLE_IOS</span>(<span class=\"number\">9</span>_0);</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationWillResignActive:(<span class=\"built_in\">UIApplication</span> *)application;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationDidBecomeActive:(<span class=\"built_in\">UIApplication</span> *)application;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationDidEnterBackground:(<span class=\"built_in\">UIApplication</span> *)application;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)applicationWillEnterForeground:(<span class=\"built_in\">UIApplication</span> *)application;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *_Nullable)application continueUserActivity:(<span class=\"built_in\">NSUserActivity</span> *_Nullable)userActivity restorationHandler:(<span class=\"keyword\">void</span>(^_Nullable)(<span class=\"built_in\">NSArray</span> * __<span class=\"keyword\">nullable</span> restorableObjects))restorationHandler API_AVAILABLE(ios(<span class=\"number\">8.0</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-性能\"><a href=\"#4-3-性能\" class=\"headerlink\" title=\"4.3 性能\"></a>4.3 性能</h3><p>这种跨端的 App 本身性能问题有一定的瓶颈，所以 Dcloud 也提供了原生代码的运行线程和队列的控制。</p>\n<h4 id=\"4-3-1-线程\"><a href=\"#4-3-1-线程\" class=\"headerlink\" title=\"4.3.1 线程\"></a>4.3.1 线程</h4><p>想要在指定线程里运行原生代码，由于原生代码不一定能够一直运行在前台，所以线程也需要保活，可以这么实现<code>uniExecuteThread</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(<span class=\"built_in\">NSThread</span>*)uniExecuteThread</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"literal\">nil</span> == _uniExecuteThread) &#123;</span><br><span class=\"line\">        _uniExecuteThread = [[<span class=\"built_in\">NSThread</span> alloc] initWithTarget:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(uniNewThread) object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">        [_uniExecuteThread setName:<span class=\"string\">@&quot;TestUniModule&quot;</span>];</span><br><span class=\"line\">        [_uniExecuteThread start];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _uniExecuteThread;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>)uniNewThread</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSRunLoop</span> *runLoop = [<span class=\"built_in\">NSRunLoop</span> currentRunLoop];</span><br><span class=\"line\">        [runLoop addPort:[<span class=\"built_in\">NSMachPort</span> port] forMode:<span class=\"built_in\">NSRunLoopCommonModes</span>];</span><br><span class=\"line\">        [runLoop run];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-2-队列\"><a href=\"#4-3-2-队列\" class=\"headerlink\" title=\"4.3.2 队列\"></a>4.3.2 队列</h4><p>想要在指定线程里运行原生代码，可以实现 <code>uniExecuteQueue</code>属性，可以在这个属性里返回一个具体的队列。</p>\n<p>DCloud SDK 提供了插件相关的<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/API/ios?id=dcunimodule\">API信息</a>。</p>\n<h3 id=\"4-4-配置插件信息\"><a href=\"#4-4-配置插件信息\" class=\"headerlink\" title=\"4.4 配置插件信息\"></a>4.4 配置插件信息</h3><p>选中工程中的 <code>HBuilder-uniPlugin-Info.plist</code>文件<code>右键-&gt;Open As-&gt;Source Code</code>找到<code>dcloud_uniplugins</code>节点，copy下面的内容添加到<code>dcloud_uniplugins</code>节点下，按您插件的实际信息填写对应的项</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>hooksClass<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>填写 hooksClass 类名 <span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>plugins<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>class<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>填写 module 或 component 的类名<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>填写暴露给js端对应的 module 或 component 名称<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>type<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>填写 module 或 component<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>hooksClass：App系统方法钩子类，值是类名，是给有些插件需要在 app 启动时做初始化或者获取系统事件用的，如果没有可以不填为空</li>\n<li>class：module 或 component 对应的原生类名（示例中为 TestModule）</li>\n<li>name：module 或 component 对应的名称（注意：module 的 name 必须以插件id为前缀或和插件id相同，示例为DCTestUniPlugin-TestModule，其中 DCTestUniPlugin 为插件的id，需要保证唯一性，避免与其他插件冲突，component 的name 没有强制要求，但是也要保证唯一比如 dc-map）</li>\n<li>type：module 或 component （示例为module）</li>\n</ul>\n<h3 id=\"4-5-生成插件包\"><a href=\"#4-5-生成插件包\" class=\"headerlink\" title=\"4.5 生成插件包\"></a>4.5 生成插件包</h3><p>此步骤应该在您插件所有功能都开发完毕，并在开发工程中测试完成后进行，插件目录结构类似：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-- 插件id                               // 插件包是一个以插件id命名的文件夹</span><br><span class=\"line\">    |-- android                         // 存放 android 插件所需要的依赖库及资源文件</span><br><span class=\"line\">    |-- ios                             // 存放 ios 插件所需要的依赖库及资源文件</span><br><span class=\"line\">    |-- package.json                    // 插件配置文件</span><br></pre></td></tr></table></figure>\n\n<p><code>package.json</code> 文件是插件包的信息，<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/package?id=packagejson\">具体配置参考</a>，内容类似：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;TestUniPlugin&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span>: <span class=\"string\">&quot;DCTestUniPlugin&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span>: <span class=\"string\">&quot;uni示例插件&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;_dp_type&quot;</span>: <span class=\"string\">&quot;nativeplugin&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;_dp_nativeplugin&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;ios&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;plugins&quot;</span>: [&#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;module&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;DCTestUniPlugin-TestModule&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;class&quot;</span>: <span class=\"string\">&quot;TestModule&quot;</span></span><br><span class=\"line\">            &#125;, &#123;</span><br><span class=\"line\">                <span class=\"attr\">&quot;type&quot;</span>: <span class=\"string\">&quot;component&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;name&quot;</span>: <span class=\"string\">&quot;dc-testmap&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">&quot;class&quot;</span>: <span class=\"string\">&quot;TestComponent&quot;</span></span><br><span class=\"line\">            &#125;],</span><br><span class=\"line\">            <span class=\"attr\">&quot;frameworks&quot;</span>: [<span class=\"string\">&quot;MapKit.framework&quot;</span>],</span><br><span class=\"line\">            <span class=\"attr\">&quot;integrateType&quot;</span>: <span class=\"string\">&quot;framework&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;deploymentTarget&quot;</span>: <span class=\"string\">&quot;9.0&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后以<code>插件id</code>为名新建一个文件夹，将编辑好的 <code>package.json</code> 放进去，然后在文件夹中在新建一个 ios 文件夹，将生成的依赖库<code>DCTestUniPlugin.framework</code>copy 到 ios 目录下，这样我们的插件包就构建完成了。</p>\n<p>接下来介绍一下如何使用本地原生的 iOS 插件。</p>\n<h2 id=\"5-uni-app-使用-iOS-原生插件\"><a href=\"#5-uni-app-使用-iOS-原生插件\" class=\"headerlink\" title=\"5. uni-app 使用 iOS 原生插件\"></a>5. uni-app 使用 iOS 原生插件</h2><p>将原生插件导出来，按照要求放到 uni-app 里面去，然后在代码里，可以这么使用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;testAsyncFunc&quot;</span>&gt;</span>testAsyncFunc<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;testSyncFunc&quot;</span>&gt;</span>testSyncFunc<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"comment\">// 首先需要通过 uni.requireNativePlugin(&quot;ModuleName&quot;) 获取 module </span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">var</span> testModule = uni.requireNativePlugin(<span class=\"string\">&quot;DCTestUniPlugin-TestModule&quot;</span>)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"function\"><span class=\"title\">testAsyncFunc</span>(<span class=\"params\"></span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"comment\">// 调用异步方法</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                testModule.testAsyncFunc(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;uni-app&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        <span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">1</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"function\">(<span class=\"params\">ret</span>) =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        uni.showToast(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                            <span class=\"attr\">title</span>:<span class=\"string\">&#x27;调用异步方法 &#x27;</span> + ret,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                            <span class=\"attr\">icon</span>: <span class=\"string\">&quot;none&quot;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                        &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            <span class=\"function\"><span class=\"title\">testSyncFunc</span>(<span class=\"params\"></span>)</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"comment\">// 调用同步方法</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                <span class=\"keyword\">var</span> ret = testModule.testSyncFunc(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;uni-app&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">1</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                uni.showToast(&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"attr\">title</span>:<span class=\"string\">&#x27;调用同步方法 &#x27;</span> + ret,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                    <span class=\"attr\">icon</span>: <span class=\"string\">&quot;none&quot;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">                &#125;)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>写好代码后，<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E5%AF%BC%E5%85%A5-uni-app-%E8%B5%84%E6%BA%90\">生成本地 App 包资源</a>，<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E5%AF%BC%E5%85%A5-uni-app-%E8%B5%84%E6%BA%90-1\">导入到插件开发工程</a>，选择 <code>HBuilder Target</code> 运行，然后测试一下功能是否正常。</p>\n<p><strong>提示 3</strong>: 前端代码修改后重新导入资源时，需要在插件开发工程中删除之前导入的资源，同时将设备上的 App 删除，避免因为缓存问题导致加载的还是旧的资源。</p>\n<h2 id=\"6-插件市场\"><a href=\"#6-插件市场\" class=\"headerlink\" title=\"6. 插件市场\"></a>6. 插件市场</h2><p>原生插件发布到插件市场，本篇文章不涉及这部分内容，具体见<a href=\"https://nativesupport.dcloud.net.cn/NativePlugin/course/ios?id=%E6%8F%90%E4%BA%A4%E6%8F%92%E4%BB%B6%E5%B8%82%E5%9C%BA\">提交原生插件到Dcloud插件市场</a>。</p>\n<p>[^DCloud-SDK]: <a href=\"https://nativesupport.dcloud.net.cn/AppDocs/download/ios\">Dcloud SDK</a><br>[^打包工程]: 打包工程是指 Dcloud SDK 目录下的 <code>HBuilder-Hello</code> iOS 原生项目。<br>[^插件工程]: 插件工程是指 Dcloud SDK 目录下的 <code>HBuilder-uniPluginDemo</code> iOS 原生项目<br>[^自定义基座]: <a href=\"https://ask.dcloud.net.cn/article/35115\">自定义基座</a></p>\n"},{"title":"iOS之React-Native原生Module","abbrlink":"86483cd","date":"2021-04-20T13:36:02.000Z","_content":"## 1. [原生模块配置](https://www.react-native.cn/docs/native-modules-setup)\n\n```shell\nnpx @react-native-community/bob create react-native-awesome-module\n\nyarn bootstrap\n\n# Android app\nyarn example android\n# iOS app\nyarn example ios\n```\n\n## 2. [create-react-native-module](https://github.com/brodybits/create-react-native-module)\n\n这个工具，配置内容少一些。\n\n## 3. [原生模块](https://www.react-native.cn/docs/native-modules-ios/)\n\n* 实现了`RCTBridgeModule`协议;\n\n* 类需要包含`RCT_EXPORT_MODULE()`宏，导出模块；\n\n* 通过`RCT_EXPORT_METHOD()`宏导出方法；\n\n    `RCT_REMAP_METHOD()`宏, 处理方法重载的情况\n\n* Javascript 里使用；\n\n```javascript\nimport { NativeModules } from 'react-native';\nconst CalendarManager = NativeModules.CalendarManager;\nCalendarManager.addEvent(\n  'Birthday Party',\n  '4 Privet Drive, Surrey'\n);\n```\n\n* 桥接到 JavaScript 的方法返回值类型必须是void。React Native 的桥接操作是异步的，所以要返回结果给 JavaScript，你必须通过回调或者触发事件来进行。\n\n[1]: [iOS 原生模块](https://www.react-native.cn/docs/native-modules-ios)\n","source":"_posts/iOS/Webs/React-Native/NativeModule.md","raw":"---\ntitle: iOS之React-Native原生Module\nabbrlink: 86483cd\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. [原生模块配置](https://www.react-native.cn/docs/native-modules-setup)\n\n```shell\nnpx @react-native-community/bob create react-native-awesome-module\n\nyarn bootstrap\n\n# Android app\nyarn example android\n# iOS app\nyarn example ios\n```\n\n## 2. [create-react-native-module](https://github.com/brodybits/create-react-native-module)\n\n这个工具，配置内容少一些。\n\n## 3. [原生模块](https://www.react-native.cn/docs/native-modules-ios/)\n\n* 实现了`RCTBridgeModule`协议;\n\n* 类需要包含`RCT_EXPORT_MODULE()`宏，导出模块；\n\n* 通过`RCT_EXPORT_METHOD()`宏导出方法；\n\n    `RCT_REMAP_METHOD()`宏, 处理方法重载的情况\n\n* Javascript 里使用；\n\n```javascript\nimport { NativeModules } from 'react-native';\nconst CalendarManager = NativeModules.CalendarManager;\nCalendarManager.addEvent(\n  'Birthday Party',\n  '4 Privet Drive, Surrey'\n);\n```\n\n* 桥接到 JavaScript 的方法返回值类型必须是void。React Native 的桥接操作是异步的，所以要返回结果给 JavaScript，你必须通过回调或者触发事件来进行。\n\n[1]: [iOS 原生模块](https://www.react-native.cn/docs/native-modules-ios)\n","slug":"iOS/Webs/React-Native/NativeModule","published":1,"updated":"2021-07-29T06:45:59.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4g004piu9kbawy4oa4","content":"<h2 id=\"1-原生模块配置\"><a href=\"#1-原生模块配置\" class=\"headerlink\" title=\"1. 原生模块配置\"></a>1. <a href=\"https://www.react-native.cn/docs/native-modules-setup\">原生模块配置</a></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx @react-native-community/bob create react-native-awesome-module</span><br><span class=\"line\"></span><br><span class=\"line\">yarn bootstrap</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Android app</span></span><br><span class=\"line\">yarn example android</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> iOS app</span></span><br><span class=\"line\">yarn example ios</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-create-react-native-module\"><a href=\"#2-create-react-native-module\" class=\"headerlink\" title=\"2. create-react-native-module\"></a>2. <a href=\"https://github.com/brodybits/create-react-native-module\">create-react-native-module</a></h2><p>这个工具，配置内容少一些。</p>\n<h2 id=\"3-原生模块\"><a href=\"#3-原生模块\" class=\"headerlink\" title=\"3. 原生模块\"></a>3. <a href=\"https://www.react-native.cn/docs/native-modules-ios/\">原生模块</a></h2><ul>\n<li><p>实现了<code>RCTBridgeModule</code>协议;</p>\n</li>\n<li><p>类需要包含<code>RCT_EXPORT_MODULE()</code>宏，导出模块；</p>\n</li>\n<li><p>通过<code>RCT_EXPORT_METHOD()</code>宏导出方法；</p>\n<p>  <code>RCT_REMAP_METHOD()</code>宏, 处理方法重载的情况</p>\n</li>\n<li><p>Javascript 里使用；</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NativeModules &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> CalendarManager = NativeModules.CalendarManager;</span><br><span class=\"line\">CalendarManager.addEvent(</span><br><span class=\"line\">  <span class=\"string\">&#x27;Birthday Party&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;4 Privet Drive, Surrey&#x27;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>桥接到 JavaScript 的方法返回值类型必须是void。React Native 的桥接操作是异步的，所以要返回结果给 JavaScript，你必须通过回调或者触发事件来进行。</li>\n</ul>\n<p>[1]: <a href=\"https://www.react-native.cn/docs/native-modules-ios\">iOS 原生模块</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-原生模块配置\"><a href=\"#1-原生模块配置\" class=\"headerlink\" title=\"1. 原生模块配置\"></a>1. <a href=\"https://www.react-native.cn/docs/native-modules-setup\">原生模块配置</a></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx @react-native-community/bob create react-native-awesome-module</span><br><span class=\"line\"></span><br><span class=\"line\">yarn bootstrap</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Android app</span></span><br><span class=\"line\">yarn example android</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> iOS app</span></span><br><span class=\"line\">yarn example ios</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-create-react-native-module\"><a href=\"#2-create-react-native-module\" class=\"headerlink\" title=\"2. create-react-native-module\"></a>2. <a href=\"https://github.com/brodybits/create-react-native-module\">create-react-native-module</a></h2><p>这个工具，配置内容少一些。</p>\n<h2 id=\"3-原生模块\"><a href=\"#3-原生模块\" class=\"headerlink\" title=\"3. 原生模块\"></a>3. <a href=\"https://www.react-native.cn/docs/native-modules-ios/\">原生模块</a></h2><ul>\n<li><p>实现了<code>RCTBridgeModule</code>协议;</p>\n</li>\n<li><p>类需要包含<code>RCT_EXPORT_MODULE()</code>宏，导出模块；</p>\n</li>\n<li><p>通过<code>RCT_EXPORT_METHOD()</code>宏导出方法；</p>\n<p>  <code>RCT_REMAP_METHOD()</code>宏, 处理方法重载的情况</p>\n</li>\n<li><p>Javascript 里使用；</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NativeModules &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> CalendarManager = NativeModules.CalendarManager;</span><br><span class=\"line\">CalendarManager.addEvent(</span><br><span class=\"line\">  <span class=\"string\">&#x27;Birthday Party&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;4 Privet Drive, Surrey&#x27;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>桥接到 JavaScript 的方法返回值类型必须是void。React Native 的桥接操作是异步的，所以要返回结果给 JavaScript，你必须通过回调或者触发事件来进行。</li>\n</ul>\n<p>[1]: <a href=\"https://www.react-native.cn/docs/native-modules-ios\">iOS 原生模块</a></p>\n"},{"title":"React-Native 导航","abbrlink":5695,"date":"2021-08-09T03:06:02.000Z","_content":"\n## 1. React Navigation\n\n## 2. [React Native Navigation](https://wix.github.io/react-native-navigation/docs/before-you-start)\n\n### 2.1 开始\n\n```shell\nyarn add react-native-navigation\n```\n\n在 react-native 代码里注册\n\n```git\n+import { Navigation } from \"react-native-navigation\";\n-import {AppRegistry} from 'react-native';\nimport App from \"./App\";\n-import {name as appName} from './app.json';\n\n-AppRegistry.registerComponent(appName, () => App);\n+Navigation.registerComponent('com.myApp.WelcomeScreen', () => App);\n\n+Navigation.events().registerAppLaunchedListener(() => {\n+   Navigation.setRoot({\n+     root: {\n+       stack: {\n+         children: [\n+           {\n+             component: {\n+               name: 'com.myApp.WelcomeScreen'\n+             }\n+           }\n+         ]\n+       }\n+     }\n+  });\n+});\n```\n\n在 iOS 代码注册\n\n```objc\n#import \"AppDelegate.h\"\n\n#import <React/RCTBundleURLProvider.h>\n#import <React/RCTRootView.h>\n#import <ReactNativeNavigation/ReactNativeNavigation.h>\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  [ReactNativeNavigation bootstrapWithDelegate:self launchOptions:launchOptions];\n\n  return YES;\n}\n\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge\n{\n  #if DEBUG\n    return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n  #else\n    return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n  #endif\n}\n\n- (NSArray<id<RCTBridgeModule>> *)extraModulesForBridge:(RCTBridge *)bridge {\n  return [ReactNativeNavigation extraModulesForBridge:bridge];\n}\n\n@end\n```\n\n### 2.2 基本用法\n\n#### 2.2.1 设置根页面\n\n```javascript\nimport React from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport { Navigation } from 'react-native-navigation';\n\nconst HomeScreen = (props) => {\n  return (\n    <View style={styles.root}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n};\n\nNavigation.registerComponent('Home', () => HomeScreen); // 注册页面，每一个页面都需要注册\n\nNavigation.events().registerAppLaunchedListener(async () => {\n  Navigation.setRoot({\n    root: {\n      stack: {\n        children: [\n          {\n            component: {\n              name: 'Home'\n            }\n          }\n        ]\n      }\n    }\n  });\n});\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'whitesmoke'\n  }\n});\n```\n\n#### 2.2.2 页面配置\n\n```javascript\nconst HomeScreen = (props) => {\n  return (\n    <View style={styles.root}>\n      <Text>Hello React Native Navigation 👋</Text>\n    </View>\n  );\n};\nHomeScreen.options = {\n  topBar: {\n    title: {\n      text: 'Home',\n      color: 'white'\n    },\n    background: {\n      color: '#4d089a'\n    }\n  }\n}\n```\n\n#### 2.2.3 导航配置\n\n```javascript\nNavigation.setDefaultOptions({\n  statusBar: {\n    backgroundColor: '#4d089a'\n  },\n  topBar: {\n    title: {\n      color: 'white'\n    },\n    backButton: {\n      color: 'white'\n    },\n    background: {\n      color: '#4d089a'\n    }\n  }\n});\n```\n\n#### 2.2.4 导航 push\n\n```javascript\nNavigation.push(props.componentId, {\n  component: {\n    name: 'Settings', // Push the screen registered with the 'Settings' key\n    options: { // Optional options object to configure the screen\n      topBar: {\n        title: {\n          text: 'Settings' // Set the TopBar title of the new Screen\n        }\n      }\n    }\n  }\n});\n```\n\n### 2.3 Layout\n\n#### 2.3.1 Stack\n\n##### 2.3.1.1 stack 设置\n\n```javascript\nconst stack = {\n  children: [\n    {\n      component: {\n        name: 'RootComponent',\n      },\n    },\n    {\n      component: {\n        name: 'SecondComponent',\n      },\n    },\n  ],\n};\n```\n\n##### 2.3.1.2 设置[更新]导航栏按钮\n\n```javascript\ntopBar: {\n  rightButtons: [\n    {\n      id: 'SomeUniqueId',\n      component: {\n        name: 'ButtonComponent',\n        passProps: {\n          count: 0\n        },\n      },,\n    },\n  ];\n}\n\n// Update props\nNavigation.updateProps('SomeUniqueId', {\n  count: 1,\n});\n```\n\n#### 2.3.2 Bottom Tabs\n\n```javascript\nbottomTabs: {\n  id: 'BOTTOM_TABS_LAYOUT',\n  children: [\n    {\n      stack: {\n        id: 'HOME_TAB',\n        children: [\n          {\n            component: {\n              id: 'HOME_SCREEN',\n              name: 'HomeScreen'\n            }\n          }\n        ],\n        options: {\n          bottomTab: {\n            icon: require('./home.png')\n          }\n        }\n      }\n    },\n    {\n      stack: {\n        id: 'PROFILE_TAB',\n        children: [\n          {\n            component: {\n              id: 'PROFILE_SCREEN',\n              name: 'ProfileScreen'\n            }\n          }\n        ],\n        options: {\n          bottomTab: {\n            icon: require('./profile.png')\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n#### 2.3.2.1 Tabs 选择\n\n```javascript\nNavigation.mergeOptions('BOTTOM_TABS_LAYOUT', {\n  bottomTabs: {\n    currentTabIndex: 1\n  }\n});\n```\n\n或者\n\n```javascript\nNavigation.mergeOptions(this.props.componentId, {\n  bottomTabs: {\n    currentTabId: this.props.componentId\n  }\n});\n```\n\n#### 2.3.3 Side Menu\n\n```javascript\nconst React = require('react');\nconst Navigation = require('react-native-navigation');\nconst { View, Text } = require('react-native');\n\nclass SideMenuCenterScreen extends React.Component {\n  static options() {\n    return {\n      topBar: {\n        leftButtons: {\n          id: 'sideMenu',\n          icon: require('./menuIcon.png')\n        }\n      }\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    Navigation.events().bindComponent(this);\n  }\n\n  render() {\n    return (\n      <View>\n        <Text>Click the hamburger icon to open the side menu</Text>\n      </View>\n    );\n  }\n\n  navigationButtonPressed({ buttonId }) {\n    if (buttonId === 'sideMenu') {\n      Navigation.mergeOptions(this, {\n        sideMenu: {\n          left: {\n            visible: true\n          }\n        }\n      });\n    }\n  }\n}\n```\n\n导航\n\n```javascript\nNavigation.push('CenterStack', {\n  component: {\n    name: Screens.Pushed,\n    options: {\n      sideMenu: {\n        center: {\n          stack: {\n            id: 'CenterStack',\n            children: []\n          }\n        },\n        left: {\n          visible: false\n        }\n      }\n    }\n  }\n});\n```\n\n#### 2.3.4 原生 ViewController\n\n在 react-native 里可以使用 iOS 的原生 viewcontroller，不过需要在 iOS 端注册\n\n```objc\n[ReactNativeNavigation registerExternalComponent:@\"MyExternalComponent\" callback:^UIViewController *(NSDictionary *props, RCTBridge *bridge) {\n    return [[ExternalViewController alloc] initWithProps:props];\n}];\n```\n\n### 2.4 生命周期\n\n#### 2.4.1 页面生命周期\n\n* `componentDidAppear` - 当页面显示的时候调用\n* `componentDidDisappear` - 当页面隐藏或者消失的时候调用\n\n* `componentDidMount` - 组件第一次关联到渲染树的时候调用一次\n* `componentWillUnmount` - 当组件销毁的时候调用一次\n\n#### 2.4.2 页面创建\n\n当组件第一次创建并挂载的时候，按顺序调用一下生命周期函数\n\n* constructor()\n* render()\n* componentDidMount()\n* componentDidAppear()\n\n#### 2.4.3 页面消失\n\n* componentDidDisappear()\n* componentWillUnmount()\n\n#### 2.4.4 Modal & Overlay\n\n##### 2.4.4.1 Modal\n\n当页面显示时， Modals 样式为 `pageSheet` 或者 `overCurrentContext` , 先前的内容依然可见. 所以 `componentDidDisappear` 事件不会触发. 当页面消失时，反之依然，`componentDidAppear` 也不会触发。\n\n##### 2.4.4.2 Overlay\n\n* constructor()\n* render()\n* componentDidMount()\n* componentDidAppear()\n\n### 2.5 导航传参\n\n```javascript\nNavigation.push(this.props.componentId, {\n  component: {\n    name: 'UserProfile',\n    id: 'PROFILE_SCREEN_ID'\n    passProps: {\n      name: 'John Doe',\n      status: 'online'\n    }\n  }\n});\n```\n\n其中 passProps 不会被序列化。\n","source":"_posts/iOS/Webs/React-Native/Navigation.md","raw":"---\ntitle: React-Native 导航\ntags: React-Native Navigation\nabbrlink: 5695\ndate: 2021-08-09 11:06:02\n---\n\n## 1. React Navigation\n\n## 2. [React Native Navigation](https://wix.github.io/react-native-navigation/docs/before-you-start)\n\n### 2.1 开始\n\n```shell\nyarn add react-native-navigation\n```\n\n在 react-native 代码里注册\n\n```git\n+import { Navigation } from \"react-native-navigation\";\n-import {AppRegistry} from 'react-native';\nimport App from \"./App\";\n-import {name as appName} from './app.json';\n\n-AppRegistry.registerComponent(appName, () => App);\n+Navigation.registerComponent('com.myApp.WelcomeScreen', () => App);\n\n+Navigation.events().registerAppLaunchedListener(() => {\n+   Navigation.setRoot({\n+     root: {\n+       stack: {\n+         children: [\n+           {\n+             component: {\n+               name: 'com.myApp.WelcomeScreen'\n+             }\n+           }\n+         ]\n+       }\n+     }\n+  });\n+});\n```\n\n在 iOS 代码注册\n\n```objc\n#import \"AppDelegate.h\"\n\n#import <React/RCTBundleURLProvider.h>\n#import <React/RCTRootView.h>\n#import <ReactNativeNavigation/ReactNativeNavigation.h>\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  [ReactNativeNavigation bootstrapWithDelegate:self launchOptions:launchOptions];\n\n  return YES;\n}\n\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge\n{\n  #if DEBUG\n    return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n  #else\n    return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n  #endif\n}\n\n- (NSArray<id<RCTBridgeModule>> *)extraModulesForBridge:(RCTBridge *)bridge {\n  return [ReactNativeNavigation extraModulesForBridge:bridge];\n}\n\n@end\n```\n\n### 2.2 基本用法\n\n#### 2.2.1 设置根页面\n\n```javascript\nimport React from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport { Navigation } from 'react-native-navigation';\n\nconst HomeScreen = (props) => {\n  return (\n    <View style={styles.root}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n};\n\nNavigation.registerComponent('Home', () => HomeScreen); // 注册页面，每一个页面都需要注册\n\nNavigation.events().registerAppLaunchedListener(async () => {\n  Navigation.setRoot({\n    root: {\n      stack: {\n        children: [\n          {\n            component: {\n              name: 'Home'\n            }\n          }\n        ]\n      }\n    }\n  });\n});\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'whitesmoke'\n  }\n});\n```\n\n#### 2.2.2 页面配置\n\n```javascript\nconst HomeScreen = (props) => {\n  return (\n    <View style={styles.root}>\n      <Text>Hello React Native Navigation 👋</Text>\n    </View>\n  );\n};\nHomeScreen.options = {\n  topBar: {\n    title: {\n      text: 'Home',\n      color: 'white'\n    },\n    background: {\n      color: '#4d089a'\n    }\n  }\n}\n```\n\n#### 2.2.3 导航配置\n\n```javascript\nNavigation.setDefaultOptions({\n  statusBar: {\n    backgroundColor: '#4d089a'\n  },\n  topBar: {\n    title: {\n      color: 'white'\n    },\n    backButton: {\n      color: 'white'\n    },\n    background: {\n      color: '#4d089a'\n    }\n  }\n});\n```\n\n#### 2.2.4 导航 push\n\n```javascript\nNavigation.push(props.componentId, {\n  component: {\n    name: 'Settings', // Push the screen registered with the 'Settings' key\n    options: { // Optional options object to configure the screen\n      topBar: {\n        title: {\n          text: 'Settings' // Set the TopBar title of the new Screen\n        }\n      }\n    }\n  }\n});\n```\n\n### 2.3 Layout\n\n#### 2.3.1 Stack\n\n##### 2.3.1.1 stack 设置\n\n```javascript\nconst stack = {\n  children: [\n    {\n      component: {\n        name: 'RootComponent',\n      },\n    },\n    {\n      component: {\n        name: 'SecondComponent',\n      },\n    },\n  ],\n};\n```\n\n##### 2.3.1.2 设置[更新]导航栏按钮\n\n```javascript\ntopBar: {\n  rightButtons: [\n    {\n      id: 'SomeUniqueId',\n      component: {\n        name: 'ButtonComponent',\n        passProps: {\n          count: 0\n        },\n      },,\n    },\n  ];\n}\n\n// Update props\nNavigation.updateProps('SomeUniqueId', {\n  count: 1,\n});\n```\n\n#### 2.3.2 Bottom Tabs\n\n```javascript\nbottomTabs: {\n  id: 'BOTTOM_TABS_LAYOUT',\n  children: [\n    {\n      stack: {\n        id: 'HOME_TAB',\n        children: [\n          {\n            component: {\n              id: 'HOME_SCREEN',\n              name: 'HomeScreen'\n            }\n          }\n        ],\n        options: {\n          bottomTab: {\n            icon: require('./home.png')\n          }\n        }\n      }\n    },\n    {\n      stack: {\n        id: 'PROFILE_TAB',\n        children: [\n          {\n            component: {\n              id: 'PROFILE_SCREEN',\n              name: 'ProfileScreen'\n            }\n          }\n        ],\n        options: {\n          bottomTab: {\n            icon: require('./profile.png')\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n#### 2.3.2.1 Tabs 选择\n\n```javascript\nNavigation.mergeOptions('BOTTOM_TABS_LAYOUT', {\n  bottomTabs: {\n    currentTabIndex: 1\n  }\n});\n```\n\n或者\n\n```javascript\nNavigation.mergeOptions(this.props.componentId, {\n  bottomTabs: {\n    currentTabId: this.props.componentId\n  }\n});\n```\n\n#### 2.3.3 Side Menu\n\n```javascript\nconst React = require('react');\nconst Navigation = require('react-native-navigation');\nconst { View, Text } = require('react-native');\n\nclass SideMenuCenterScreen extends React.Component {\n  static options() {\n    return {\n      topBar: {\n        leftButtons: {\n          id: 'sideMenu',\n          icon: require('./menuIcon.png')\n        }\n      }\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    Navigation.events().bindComponent(this);\n  }\n\n  render() {\n    return (\n      <View>\n        <Text>Click the hamburger icon to open the side menu</Text>\n      </View>\n    );\n  }\n\n  navigationButtonPressed({ buttonId }) {\n    if (buttonId === 'sideMenu') {\n      Navigation.mergeOptions(this, {\n        sideMenu: {\n          left: {\n            visible: true\n          }\n        }\n      });\n    }\n  }\n}\n```\n\n导航\n\n```javascript\nNavigation.push('CenterStack', {\n  component: {\n    name: Screens.Pushed,\n    options: {\n      sideMenu: {\n        center: {\n          stack: {\n            id: 'CenterStack',\n            children: []\n          }\n        },\n        left: {\n          visible: false\n        }\n      }\n    }\n  }\n});\n```\n\n#### 2.3.4 原生 ViewController\n\n在 react-native 里可以使用 iOS 的原生 viewcontroller，不过需要在 iOS 端注册\n\n```objc\n[ReactNativeNavigation registerExternalComponent:@\"MyExternalComponent\" callback:^UIViewController *(NSDictionary *props, RCTBridge *bridge) {\n    return [[ExternalViewController alloc] initWithProps:props];\n}];\n```\n\n### 2.4 生命周期\n\n#### 2.4.1 页面生命周期\n\n* `componentDidAppear` - 当页面显示的时候调用\n* `componentDidDisappear` - 当页面隐藏或者消失的时候调用\n\n* `componentDidMount` - 组件第一次关联到渲染树的时候调用一次\n* `componentWillUnmount` - 当组件销毁的时候调用一次\n\n#### 2.4.2 页面创建\n\n当组件第一次创建并挂载的时候，按顺序调用一下生命周期函数\n\n* constructor()\n* render()\n* componentDidMount()\n* componentDidAppear()\n\n#### 2.4.3 页面消失\n\n* componentDidDisappear()\n* componentWillUnmount()\n\n#### 2.4.4 Modal & Overlay\n\n##### 2.4.4.1 Modal\n\n当页面显示时， Modals 样式为 `pageSheet` 或者 `overCurrentContext` , 先前的内容依然可见. 所以 `componentDidDisappear` 事件不会触发. 当页面消失时，反之依然，`componentDidAppear` 也不会触发。\n\n##### 2.4.4.2 Overlay\n\n* constructor()\n* render()\n* componentDidMount()\n* componentDidAppear()\n\n### 2.5 导航传参\n\n```javascript\nNavigation.push(this.props.componentId, {\n  component: {\n    name: 'UserProfile',\n    id: 'PROFILE_SCREEN_ID'\n    passProps: {\n      name: 'John Doe',\n      status: 'online'\n    }\n  }\n});\n```\n\n其中 passProps 不会被序列化。\n","slug":"iOS/Webs/React-Native/Navigation","published":1,"updated":"2021-09-22T06:56:40.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4g004qiu9kah9vedyn","content":"<h2 id=\"1-React-Navigation\"><a href=\"#1-React-Navigation\" class=\"headerlink\" title=\"1. React Navigation\"></a>1. React Navigation</h2><h2 id=\"2-React-Native-Navigation\"><a href=\"#2-React-Native-Navigation\" class=\"headerlink\" title=\"2. React Native Navigation\"></a>2. <a href=\"https://wix.github.io/react-native-navigation/docs/before-you-start\">React Native Navigation</a></h2><h3 id=\"2-1-开始\"><a href=\"#2-1-开始\" class=\"headerlink\" title=\"2.1 开始\"></a>2.1 开始</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-native-navigation</span><br></pre></td></tr></table></figure>\n\n<p>在 react-native 代码里注册</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+import &#123; Navigation &#125; from &quot;react-native-navigation&quot;;</span><br><span class=\"line\">-import &#123;AppRegistry&#125; from &#x27;react-native&#x27;;</span><br><span class=\"line\">import App from &quot;./App&quot;;</span><br><span class=\"line\">-import &#123;name as appName&#125; from &#x27;./app.json&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">-AppRegistry.registerComponent(appName, () =&gt; App);</span><br><span class=\"line\">+Navigation.registerComponent(&#x27;com.myApp.WelcomeScreen&#x27;, () =&gt; App);</span><br><span class=\"line\"></span><br><span class=\"line\">+Navigation.events().registerAppLaunchedListener(() =&gt; &#123;</span><br><span class=\"line\">+   Navigation.setRoot(&#123;</span><br><span class=\"line\">+     root: &#123;</span><br><span class=\"line\">+       stack: &#123;</span><br><span class=\"line\">+         children: [</span><br><span class=\"line\">+           &#123;</span><br><span class=\"line\">+             component: &#123;</span><br><span class=\"line\">+               name: &#x27;com.myApp.WelcomeScreen&#x27;</span><br><span class=\"line\">+             &#125;</span><br><span class=\"line\">+           &#125;</span><br><span class=\"line\">+         ]</span><br><span class=\"line\">+       &#125;</span><br><span class=\"line\">+     &#125;</span><br><span class=\"line\">+  &#125;);</span><br><span class=\"line\">+&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在 iOS 代码注册</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&quot;AppDelegate.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;React/RCTBundleURLProvider.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;React/RCTRootView.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;ReactNativeNavigation/ReactNativeNavigation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AppDelegate</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  [ReactNativeNavigation bootstrapWithDelegate:<span class=\"keyword\">self</span> launchOptions:launchOptions];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSURL</span> *)sourceURLForBridge:(RCTBridge *)bridge</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:<span class=\"string\">@&quot;index&quot;</span> fallbackResource:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"built_in\">NSBundle</span> mainBundle] URLForResource:<span class=\"string\">@&quot;main&quot;</span> withExtension:<span class=\"string\">@&quot;jsbundle&quot;</span>];</span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span>&lt;<span class=\"keyword\">id</span>&lt;RCTBridgeModule&gt;&gt; *)extraModulesForBridge:(RCTBridge *)bridge &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [ReactNativeNavigation extraModulesForBridge:bridge];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-基本用法\"><a href=\"#2-2-基本用法\" class=\"headerlink\" title=\"2.2 基本用法\"></a>2.2 基本用法</h3><h4 id=\"2-2-1-设置根页面\"><a href=\"#2-2-1-设置根页面\" class=\"headerlink\" title=\"2.2.1 设置根页面\"></a>2.2.1 设置根页面</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; View, Text, Button, StyleSheet &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Navigation &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native-navigation&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> HomeScreen = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.root&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>Home Screen<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Navigation.registerComponent(<span class=\"string\">&#x27;Home&#x27;</span>, <span class=\"function\">() =&gt;</span> HomeScreen); <span class=\"comment\">// 注册页面，每一个页面都需要注册</span></span><br><span class=\"line\"></span><br><span class=\"line\">Navigation.events().registerAppLaunchedListener(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  Navigation.setRoot(&#123;</span><br><span class=\"line\">    <span class=\"attr\">root</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">stack</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">children</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Home&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  <span class=\"attr\">root</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">alignItems</span>: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">justifyContent</span>: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;whitesmoke&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-页面配置\"><a href=\"#2-2-2-页面配置\" class=\"headerlink\" title=\"2.2.2 页面配置\"></a>2.2.2 页面配置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HomeScreen = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.root&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>Hello React Native Navigation 👋<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">HomeScreen.options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">topBar</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Home&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">background</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#4d089a&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-导航配置\"><a href=\"#2-2-3-导航配置\" class=\"headerlink\" title=\"2.2.3 导航配置\"></a>2.2.3 导航配置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.setDefaultOptions(&#123;</span><br><span class=\"line\">  <span class=\"attr\">statusBar</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;#4d089a&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">topBar</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">backButton</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">background</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#4d089a&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-4-导航-push\"><a href=\"#2-2-4-导航-push\" class=\"headerlink\" title=\"2.2.4 导航 push\"></a>2.2.4 导航 push</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.push(props.componentId, &#123;</span><br><span class=\"line\">  <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Settings&#x27;</span>, <span class=\"comment\">// Push the screen registered with the &#x27;Settings&#x27; key</span></span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123; <span class=\"comment\">// Optional options object to configure the screen</span></span><br><span class=\"line\">      <span class=\"attr\">topBar</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Settings&#x27;</span> <span class=\"comment\">// Set the TopBar title of the new Screen</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-Layout\"><a href=\"#2-3-Layout\" class=\"headerlink\" title=\"2.3 Layout\"></a>2.3 Layout</h3><h4 id=\"2-3-1-Stack\"><a href=\"#2-3-1-Stack\" class=\"headerlink\" title=\"2.3.1 Stack\"></a>2.3.1 Stack</h4><h5 id=\"2-3-1-1-stack-设置\"><a href=\"#2-3-1-1-stack-设置\" class=\"headerlink\" title=\"2.3.1.1 stack 设置\"></a>2.3.1.1 stack 设置</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stack = &#123;</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;RootComponent&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;SecondComponent&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-1-2-设置-更新-导航栏按钮\"><a href=\"#2-3-1-2-设置-更新-导航栏按钮\" class=\"headerlink\" title=\"2.3.1.2 设置[更新]导航栏按钮\"></a>2.3.1.2 设置[更新]导航栏按钮</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">topBar: &#123;</span><br><span class=\"line\">  <span class=\"attr\">rightButtons</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"string\">&#x27;SomeUniqueId&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ButtonComponent&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">passProps</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Update props</span></span><br><span class=\"line\">Navigation.updateProps(<span class=\"string\">&#x27;SomeUniqueId&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">count</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-Bottom-Tabs\"><a href=\"#2-3-2-Bottom-Tabs\" class=\"headerlink\" title=\"2.3.2 Bottom Tabs\"></a>2.3.2 Bottom Tabs</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bottomTabs: &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&#x27;BOTTOM_TABS_LAYOUT&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">stack</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">&#x27;HOME_TAB&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">children</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">id</span>: <span class=\"string\">&#x27;HOME_SCREEN&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;HomeScreen&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">bottomTab</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">icon</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./home.png&#x27;</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">stack</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">&#x27;PROFILE_TAB&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">children</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">id</span>: <span class=\"string\">&#x27;PROFILE_SCREEN&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ProfileScreen&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">bottomTab</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">icon</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./profile.png&#x27;</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-1-Tabs-选择\"><a href=\"#2-3-2-1-Tabs-选择\" class=\"headerlink\" title=\"2.3.2.1 Tabs 选择\"></a>2.3.2.1 Tabs 选择</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.mergeOptions(<span class=\"string\">&#x27;BOTTOM_TABS_LAYOUT&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">bottomTabs</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentTabIndex</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.mergeOptions(<span class=\"built_in\">this</span>.props.componentId, &#123;</span><br><span class=\"line\">  <span class=\"attr\">bottomTabs</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentTabId</span>: <span class=\"built_in\">this</span>.props.componentId</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-3-Side-Menu\"><a href=\"#2-3-3-Side-Menu\" class=\"headerlink\" title=\"2.3.3 Side Menu\"></a>2.3.3 Side Menu</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> React = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Navigation = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react-native-navigation&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; View, Text &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react-native&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SideMenuCenterScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">options</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">topBar</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">leftButtons</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">id</span>: <span class=\"string\">&#x27;sideMenu&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">icon</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./menuIcon.png&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">    Navigation.events().bindComponent(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>Click the hamburger icon to open the side menu<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">navigationButtonPressed</span>(<span class=\"params\">&#123; buttonId &#125;</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buttonId === <span class=\"string\">&#x27;sideMenu&#x27;</span>) &#123;</span><br><span class=\"line\">      Navigation.mergeOptions(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">sideMenu</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">left</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">visible</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>导航</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.push(<span class=\"string\">&#x27;CenterStack&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: Screens.Pushed,</span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">sideMenu</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">center</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">stack</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"string\">&#x27;CenterStack&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: []</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">left</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">visible</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-4-原生-ViewController\"><a href=\"#2-3-4-原生-ViewController\" class=\"headerlink\" title=\"2.3.4 原生 ViewController\"></a>2.3.4 原生 ViewController</h4><p>在 react-native 里可以使用 iOS 的原生 viewcontroller，不过需要在 iOS 端注册</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ReactNativeNavigation registerExternalComponent:<span class=\"string\">@&quot;MyExternalComponent&quot;</span> callback:^<span class=\"built_in\">UIViewController</span> *(<span class=\"built_in\">NSDictionary</span> *props, RCTBridge *bridge) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[ExternalViewController alloc] initWithProps:props];</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-生命周期\"><a href=\"#2-4-生命周期\" class=\"headerlink\" title=\"2.4 生命周期\"></a>2.4 生命周期</h3><h4 id=\"2-4-1-页面生命周期\"><a href=\"#2-4-1-页面生命周期\" class=\"headerlink\" title=\"2.4.1 页面生命周期\"></a>2.4.1 页面生命周期</h4><ul>\n<li><p><code>componentDidAppear</code> - 当页面显示的时候调用</p>\n</li>\n<li><p><code>componentDidDisappear</code> - 当页面隐藏或者消失的时候调用</p>\n</li>\n<li><p><code>componentDidMount</code> - 组件第一次关联到渲染树的时候调用一次</p>\n</li>\n<li><p><code>componentWillUnmount</code> - 当组件销毁的时候调用一次</p>\n</li>\n</ul>\n<h4 id=\"2-4-2-页面创建\"><a href=\"#2-4-2-页面创建\" class=\"headerlink\" title=\"2.4.2 页面创建\"></a>2.4.2 页面创建</h4><p>当组件第一次创建并挂载的时候，按顺序调用一下生命周期函数</p>\n<ul>\n<li>constructor()</li>\n<li>render()</li>\n<li>componentDidMount()</li>\n<li>componentDidAppear()</li>\n</ul>\n<h4 id=\"2-4-3-页面消失\"><a href=\"#2-4-3-页面消失\" class=\"headerlink\" title=\"2.4.3 页面消失\"></a>2.4.3 页面消失</h4><ul>\n<li>componentDidDisappear()</li>\n<li>componentWillUnmount()</li>\n</ul>\n<h4 id=\"2-4-4-Modal-amp-Overlay\"><a href=\"#2-4-4-Modal-amp-Overlay\" class=\"headerlink\" title=\"2.4.4 Modal &amp; Overlay\"></a>2.4.4 Modal &amp; Overlay</h4><h5 id=\"2-4-4-1-Modal\"><a href=\"#2-4-4-1-Modal\" class=\"headerlink\" title=\"2.4.4.1 Modal\"></a>2.4.4.1 Modal</h5><p>当页面显示时， Modals 样式为 <code>pageSheet</code> 或者 <code>overCurrentContext</code> , 先前的内容依然可见. 所以 <code>componentDidDisappear</code> 事件不会触发. 当页面消失时，反之依然，<code>componentDidAppear</code> 也不会触发。</p>\n<h5 id=\"2-4-4-2-Overlay\"><a href=\"#2-4-4-2-Overlay\" class=\"headerlink\" title=\"2.4.4.2 Overlay\"></a>2.4.4.2 Overlay</h5><ul>\n<li>constructor()</li>\n<li>render()</li>\n<li>componentDidMount()</li>\n<li>componentDidAppear()</li>\n</ul>\n<h3 id=\"2-5-导航传参\"><a href=\"#2-5-导航传参\" class=\"headerlink\" title=\"2.5 导航传参\"></a>2.5 导航传参</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.push(<span class=\"built_in\">this</span>.props.componentId, &#123;</span><br><span class=\"line\">  <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;UserProfile&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&#x27;PROFILE_SCREEN_ID&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">passProps</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">status</span>: <span class=\"string\">&#x27;online&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>其中 passProps 不会被序列化。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-React-Navigation\"><a href=\"#1-React-Navigation\" class=\"headerlink\" title=\"1. React Navigation\"></a>1. React Navigation</h2><h2 id=\"2-React-Native-Navigation\"><a href=\"#2-React-Native-Navigation\" class=\"headerlink\" title=\"2. React Native Navigation\"></a>2. <a href=\"https://wix.github.io/react-native-navigation/docs/before-you-start\">React Native Navigation</a></h2><h3 id=\"2-1-开始\"><a href=\"#2-1-开始\" class=\"headerlink\" title=\"2.1 开始\"></a>2.1 开始</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-native-navigation</span><br></pre></td></tr></table></figure>\n\n<p>在 react-native 代码里注册</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+import &#123; Navigation &#125; from &quot;react-native-navigation&quot;;</span><br><span class=\"line\">-import &#123;AppRegistry&#125; from &#x27;react-native&#x27;;</span><br><span class=\"line\">import App from &quot;./App&quot;;</span><br><span class=\"line\">-import &#123;name as appName&#125; from &#x27;./app.json&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">-AppRegistry.registerComponent(appName, () =&gt; App);</span><br><span class=\"line\">+Navigation.registerComponent(&#x27;com.myApp.WelcomeScreen&#x27;, () =&gt; App);</span><br><span class=\"line\"></span><br><span class=\"line\">+Navigation.events().registerAppLaunchedListener(() =&gt; &#123;</span><br><span class=\"line\">+   Navigation.setRoot(&#123;</span><br><span class=\"line\">+     root: &#123;</span><br><span class=\"line\">+       stack: &#123;</span><br><span class=\"line\">+         children: [</span><br><span class=\"line\">+           &#123;</span><br><span class=\"line\">+             component: &#123;</span><br><span class=\"line\">+               name: &#x27;com.myApp.WelcomeScreen&#x27;</span><br><span class=\"line\">+             &#125;</span><br><span class=\"line\">+           &#125;</span><br><span class=\"line\">+         ]</span><br><span class=\"line\">+       &#125;</span><br><span class=\"line\">+     &#125;</span><br><span class=\"line\">+  &#125;);</span><br><span class=\"line\">+&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在 iOS 代码注册</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&quot;AppDelegate.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;React/RCTBundleURLProvider.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;React/RCTRootView.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;ReactNativeNavigation/ReactNativeNavigation.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">AppDelegate</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  [ReactNativeNavigation bootstrapWithDelegate:<span class=\"keyword\">self</span> launchOptions:launchOptions];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSURL</span> *)sourceURLForBridge:(RCTBridge *)bridge</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">if</span> DEBUG</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:<span class=\"string\">@&quot;index&quot;</span> fallbackResource:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"built_in\">NSBundle</span> mainBundle] URLForResource:<span class=\"string\">@&quot;main&quot;</span> withExtension:<span class=\"string\">@&quot;jsbundle&quot;</span>];</span><br><span class=\"line\">  <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSArray</span>&lt;<span class=\"keyword\">id</span>&lt;RCTBridgeModule&gt;&gt; *)extraModulesForBridge:(RCTBridge *)bridge &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [ReactNativeNavigation extraModulesForBridge:bridge];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-基本用法\"><a href=\"#2-2-基本用法\" class=\"headerlink\" title=\"2.2 基本用法\"></a>2.2 基本用法</h3><h4 id=\"2-2-1-设置根页面\"><a href=\"#2-2-1-设置根页面\" class=\"headerlink\" title=\"2.2.1 设置根页面\"></a>2.2.1 设置根页面</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; View, Text, Button, StyleSheet &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Navigation &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-native-navigation&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> HomeScreen = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.root&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>Home Screen<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Navigation.registerComponent(<span class=\"string\">&#x27;Home&#x27;</span>, <span class=\"function\">() =&gt;</span> HomeScreen); <span class=\"comment\">// 注册页面，每一个页面都需要注册</span></span><br><span class=\"line\"></span><br><span class=\"line\">Navigation.events().registerAppLaunchedListener(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  Navigation.setRoot(&#123;</span><br><span class=\"line\">    <span class=\"attr\">root</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">stack</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">children</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Home&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  <span class=\"attr\">root</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">alignItems</span>: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">justifyContent</span>: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;whitesmoke&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-2-页面配置\"><a href=\"#2-2-2-页面配置\" class=\"headerlink\" title=\"2.2.2 页面配置\"></a>2.2.2 页面配置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HomeScreen = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;styles.root&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>Hello React Native Navigation 👋<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">HomeScreen.options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">topBar</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Home&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">background</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#4d089a&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-3-导航配置\"><a href=\"#2-2-3-导航配置\" class=\"headerlink\" title=\"2.2.3 导航配置\"></a>2.2.3 导航配置</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.setDefaultOptions(&#123;</span><br><span class=\"line\">  <span class=\"attr\">statusBar</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;#4d089a&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">topBar</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">backButton</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;white&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">background</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#4d089a&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-4-导航-push\"><a href=\"#2-2-4-导航-push\" class=\"headerlink\" title=\"2.2.4 导航 push\"></a>2.2.4 导航 push</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.push(props.componentId, &#123;</span><br><span class=\"line\">  <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Settings&#x27;</span>, <span class=\"comment\">// Push the screen registered with the &#x27;Settings&#x27; key</span></span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123; <span class=\"comment\">// Optional options object to configure the screen</span></span><br><span class=\"line\">      <span class=\"attr\">topBar</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Settings&#x27;</span> <span class=\"comment\">// Set the TopBar title of the new Screen</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-Layout\"><a href=\"#2-3-Layout\" class=\"headerlink\" title=\"2.3 Layout\"></a>2.3 Layout</h3><h4 id=\"2-3-1-Stack\"><a href=\"#2-3-1-Stack\" class=\"headerlink\" title=\"2.3.1 Stack\"></a>2.3.1 Stack</h4><h5 id=\"2-3-1-1-stack-设置\"><a href=\"#2-3-1-1-stack-设置\" class=\"headerlink\" title=\"2.3.1.1 stack 设置\"></a>2.3.1.1 stack 设置</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stack = &#123;</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;RootComponent&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;SecondComponent&#x27;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-3-1-2-设置-更新-导航栏按钮\"><a href=\"#2-3-1-2-设置-更新-导航栏按钮\" class=\"headerlink\" title=\"2.3.1.2 设置[更新]导航栏按钮\"></a>2.3.1.2 设置[更新]导航栏按钮</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">topBar: &#123;</span><br><span class=\"line\">  <span class=\"attr\">rightButtons</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"string\">&#x27;SomeUniqueId&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ButtonComponent&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">passProps</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Update props</span></span><br><span class=\"line\">Navigation.updateProps(<span class=\"string\">&#x27;SomeUniqueId&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">count</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-Bottom-Tabs\"><a href=\"#2-3-2-Bottom-Tabs\" class=\"headerlink\" title=\"2.3.2 Bottom Tabs\"></a>2.3.2 Bottom Tabs</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bottomTabs: &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&#x27;BOTTOM_TABS_LAYOUT&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">stack</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">&#x27;HOME_TAB&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">children</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">id</span>: <span class=\"string\">&#x27;HOME_SCREEN&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;HomeScreen&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">bottomTab</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">icon</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./home.png&#x27;</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">stack</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">&#x27;PROFILE_TAB&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">children</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">              <span class=\"attr\">id</span>: <span class=\"string\">&#x27;PROFILE_SCREEN&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ProfileScreen&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">bottomTab</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">icon</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./profile.png&#x27;</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-2-1-Tabs-选择\"><a href=\"#2-3-2-1-Tabs-选择\" class=\"headerlink\" title=\"2.3.2.1 Tabs 选择\"></a>2.3.2.1 Tabs 选择</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.mergeOptions(<span class=\"string\">&#x27;BOTTOM_TABS_LAYOUT&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">bottomTabs</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentTabIndex</span>: <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.mergeOptions(<span class=\"built_in\">this</span>.props.componentId, &#123;</span><br><span class=\"line\">  <span class=\"attr\">bottomTabs</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">currentTabId</span>: <span class=\"built_in\">this</span>.props.componentId</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-3-Side-Menu\"><a href=\"#2-3-3-Side-Menu\" class=\"headerlink\" title=\"2.3.3 Side Menu\"></a>2.3.3 Side Menu</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> React = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Navigation = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react-native-navigation&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; View, Text &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;react-native&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SideMenuCenterScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">options</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">topBar</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">leftButtons</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">id</span>: <span class=\"string\">&#x27;sideMenu&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">icon</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./menuIcon.png&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">    Navigation.events().bindComponent(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span>&gt;</span>Click the hamburger icon to open the side menu<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">navigationButtonPressed</span>(<span class=\"params\">&#123; buttonId &#125;</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (buttonId === <span class=\"string\">&#x27;sideMenu&#x27;</span>) &#123;</span><br><span class=\"line\">      Navigation.mergeOptions(<span class=\"built_in\">this</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">sideMenu</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">left</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">visible</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>导航</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.push(<span class=\"string\">&#x27;CenterStack&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: Screens.Pushed,</span><br><span class=\"line\">    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">sideMenu</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">center</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">stack</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"string\">&#x27;CenterStack&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: []</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">left</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">visible</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-4-原生-ViewController\"><a href=\"#2-3-4-原生-ViewController\" class=\"headerlink\" title=\"2.3.4 原生 ViewController\"></a>2.3.4 原生 ViewController</h4><p>在 react-native 里可以使用 iOS 的原生 viewcontroller，不过需要在 iOS 端注册</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ReactNativeNavigation registerExternalComponent:<span class=\"string\">@&quot;MyExternalComponent&quot;</span> callback:^<span class=\"built_in\">UIViewController</span> *(<span class=\"built_in\">NSDictionary</span> *props, RCTBridge *bridge) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[ExternalViewController alloc] initWithProps:props];</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-生命周期\"><a href=\"#2-4-生命周期\" class=\"headerlink\" title=\"2.4 生命周期\"></a>2.4 生命周期</h3><h4 id=\"2-4-1-页面生命周期\"><a href=\"#2-4-1-页面生命周期\" class=\"headerlink\" title=\"2.4.1 页面生命周期\"></a>2.4.1 页面生命周期</h4><ul>\n<li><p><code>componentDidAppear</code> - 当页面显示的时候调用</p>\n</li>\n<li><p><code>componentDidDisappear</code> - 当页面隐藏或者消失的时候调用</p>\n</li>\n<li><p><code>componentDidMount</code> - 组件第一次关联到渲染树的时候调用一次</p>\n</li>\n<li><p><code>componentWillUnmount</code> - 当组件销毁的时候调用一次</p>\n</li>\n</ul>\n<h4 id=\"2-4-2-页面创建\"><a href=\"#2-4-2-页面创建\" class=\"headerlink\" title=\"2.4.2 页面创建\"></a>2.4.2 页面创建</h4><p>当组件第一次创建并挂载的时候，按顺序调用一下生命周期函数</p>\n<ul>\n<li>constructor()</li>\n<li>render()</li>\n<li>componentDidMount()</li>\n<li>componentDidAppear()</li>\n</ul>\n<h4 id=\"2-4-3-页面消失\"><a href=\"#2-4-3-页面消失\" class=\"headerlink\" title=\"2.4.3 页面消失\"></a>2.4.3 页面消失</h4><ul>\n<li>componentDidDisappear()</li>\n<li>componentWillUnmount()</li>\n</ul>\n<h4 id=\"2-4-4-Modal-amp-Overlay\"><a href=\"#2-4-4-Modal-amp-Overlay\" class=\"headerlink\" title=\"2.4.4 Modal &amp; Overlay\"></a>2.4.4 Modal &amp; Overlay</h4><h5 id=\"2-4-4-1-Modal\"><a href=\"#2-4-4-1-Modal\" class=\"headerlink\" title=\"2.4.4.1 Modal\"></a>2.4.4.1 Modal</h5><p>当页面显示时， Modals 样式为 <code>pageSheet</code> 或者 <code>overCurrentContext</code> , 先前的内容依然可见. 所以 <code>componentDidDisappear</code> 事件不会触发. 当页面消失时，反之依然，<code>componentDidAppear</code> 也不会触发。</p>\n<h5 id=\"2-4-4-2-Overlay\"><a href=\"#2-4-4-2-Overlay\" class=\"headerlink\" title=\"2.4.4.2 Overlay\"></a>2.4.4.2 Overlay</h5><ul>\n<li>constructor()</li>\n<li>render()</li>\n<li>componentDidMount()</li>\n<li>componentDidAppear()</li>\n</ul>\n<h3 id=\"2-5-导航传参\"><a href=\"#2-5-导航传参\" class=\"headerlink\" title=\"2.5 导航传参\"></a>2.5 导航传参</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigation.push(<span class=\"built_in\">this</span>.props.componentId, &#123;</span><br><span class=\"line\">  <span class=\"attr\">component</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;UserProfile&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&#x27;PROFILE_SCREEN_ID&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">passProps</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Doe&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">status</span>: <span class=\"string\">&#x27;online&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>其中 passProps 不会被序列化。</p>\n"},{"title":"iOS之React-Native","abbrlink":"1f8d790c","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. React\n\n## 2. React\n\n## 3. React Native[^ARN]\n\n## 3. Bridge\n\n[^ARN]: [Awesome React Native](https://www.awesome-react-native.com/#Components-UI)\n","source":"_posts/iOS/Webs/React-Native/React-Native.md","raw":"---\ntitle: iOS之React-Native\nabbrlink: 1f8d790c\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. React\n\n## 2. React\n\n## 3. React Native[^ARN]\n\n## 3. Bridge\n\n[^ARN]: [Awesome React Native](https://www.awesome-react-native.com/#Components-UI)\n","slug":"iOS/Webs/React-Native/React-Native","published":1,"updated":"2021-09-16T06:42:30.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4h004riu9k0hka0xck","content":"<h2 id=\"1-React\"><a href=\"#1-React\" class=\"headerlink\" title=\"1. React\"></a>1. React</h2><h2 id=\"2-React\"><a href=\"#2-React\" class=\"headerlink\" title=\"2. React\"></a>2. React</h2><h2 id=\"3-React-Native-ARN\"><a href=\"#3-React-Native-ARN\" class=\"headerlink\" title=\"3. React Native[^ARN]\"></a>3. React Native[^ARN]</h2><h2 id=\"3-Bridge\"><a href=\"#3-Bridge\" class=\"headerlink\" title=\"3. Bridge\"></a>3. Bridge</h2><p>[^ARN]: <a href=\"https://www.awesome-react-native.com/#Components-UI\">Awesome React Native</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-React\"><a href=\"#1-React\" class=\"headerlink\" title=\"1. React\"></a>1. React</h2><h2 id=\"2-React\"><a href=\"#2-React\" class=\"headerlink\" title=\"2. React\"></a>2. React</h2><h2 id=\"3-React-Native-ARN\"><a href=\"#3-React-Native-ARN\" class=\"headerlink\" title=\"3. React Native[^ARN]\"></a>3. React Native[^ARN]</h2><h2 id=\"3-Bridge\"><a href=\"#3-Bridge\" class=\"headerlink\" title=\"3. Bridge\"></a>3. Bridge</h2><p>[^ARN]: <a href=\"https://www.awesome-react-native.com/#Components-UI\">Awesome React Native</a></p>\n"},{"title":"iOS之RunLoop","abbrlink":12367,"date":"2021-04-20T13:36:02.000Z","_content":"\n\n## 1. [深入理解RunLoop](https://blog.ibireme.com/2015/05/18/runloop/)\n","source":"_posts/学习笔记/iOS/iOS之并发编程/RunLoop.md","raw":"---\ntitle: iOS之RunLoop\nabbrlink: 12367\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n\n## 1. [深入理解RunLoop](https://blog.ibireme.com/2015/05/18/runloop/)\n","slug":"学习笔记/iOS/iOS之并发编程/RunLoop","published":1,"updated":"2021-09-22T06:56:40.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4i004tiu9k9o2d846s","content":"<h2 id=\"1-深入理解RunLoop\"><a href=\"#1-深入理解RunLoop\" class=\"headerlink\" title=\"1. 深入理解RunLoop\"></a>1. <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">深入理解RunLoop</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-深入理解RunLoop\"><a href=\"#1-深入理解RunLoop\" class=\"headerlink\" title=\"1. 深入理解RunLoop\"></a>1. <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">深入理解RunLoop</a></h2>"},{"title":"iOS之Flutter","abbrlink":"89dddfb9","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [Flutter](../../../Flutters/Flutters指南/Flutter指南.md)\n\n## 2. [Flutter Web在美团外卖的实践](https://zhuanlan.zhihu.com/p/358160453)\n","source":"_posts/iOS/Webs/Flutter/Flutter.md","raw":"---\ntitle: iOS之Flutter\nabbrlink: 89dddfb9\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [Flutter](../../../Flutters/Flutters指南/Flutter指南.md)\n\n## 2. [Flutter Web在美团外卖的实践](https://zhuanlan.zhihu.com/p/358160453)\n","slug":"iOS/Webs/Flutter/Flutter","published":1,"updated":"2021-07-29T06:45:59.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4j004uiu9k20eb0nog","content":"<h2 id=\"1-Flutter\"><a href=\"#1-Flutter\" class=\"headerlink\" title=\"1. Flutter\"></a>1. <a href=\"../../../Flutters/Flutters%E6%8C%87%E5%8D%97/Flutter%E6%8C%87%E5%8D%97.md\">Flutter</a></h2><h2 id=\"2-Flutter-Web在美团外卖的实践\"><a href=\"#2-Flutter-Web在美团外卖的实践\" class=\"headerlink\" title=\"2. Flutter Web在美团外卖的实践\"></a>2. <a href=\"https://zhuanlan.zhihu.com/p/358160453\">Flutter Web在美团外卖的实践</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Flutter\"><a href=\"#1-Flutter\" class=\"headerlink\" title=\"1. Flutter\"></a>1. <a href=\"../../../Flutters/Flutters%E6%8C%87%E5%8D%97/Flutter%E6%8C%87%E5%8D%97.md\">Flutter</a></h2><h2 id=\"2-Flutter-Web在美团外卖的实践\"><a href=\"#2-Flutter-Web在美团外卖的实践\" class=\"headerlink\" title=\"2. Flutter Web在美团外卖的实践\"></a>2. <a href=\"https://zhuanlan.zhihu.com/p/358160453\">Flutter Web在美团外卖的实践</a></h2>"},{"title":"iOS之 布局","abbrlink":"1806a0ee","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [自动布局 Auto Layout (原理篇)](https://www.jianshu.com/p/3a872a0bfe11)\n\n## 2. [对齐矩形](https://juejin.cn/post/6844903438690549768)\n\n## 3. [iOS 的渲染机制以及 UIView 的自动布局流程](https://www.dazhuanlan.com/2020/01/31/5e33cdfb28a2a/)\n\n## 4. [UIView Auto Layout life cycle](https://www.vadimbulavin.com/view-auto-layout-life-cycle/)\n","source":"_posts/iOS/UI/Layouts/Layouts.md","raw":"---\ntitle: iOS之 布局\nabbrlink: 1806a0ee\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [自动布局 Auto Layout (原理篇)](https://www.jianshu.com/p/3a872a0bfe11)\n\n## 2. [对齐矩形](https://juejin.cn/post/6844903438690549768)\n\n## 3. [iOS 的渲染机制以及 UIView 的自动布局流程](https://www.dazhuanlan.com/2020/01/31/5e33cdfb28a2a/)\n\n## 4. [UIView Auto Layout life cycle](https://www.vadimbulavin.com/view-auto-layout-life-cycle/)\n","slug":"iOS/UI/Layouts/Layouts","published":1,"updated":"2021-09-16T06:42:30.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4j004viu9k3qpmfrky","content":"<h2 id=\"1-自动布局-Auto-Layout-原理篇\"><a href=\"#1-自动布局-Auto-Layout-原理篇\" class=\"headerlink\" title=\"1. 自动布局 Auto Layout (原理篇)\"></a>1. <a href=\"https://www.jianshu.com/p/3a872a0bfe11\">自动布局 Auto Layout (原理篇)</a></h2><h2 id=\"2-对齐矩形\"><a href=\"#2-对齐矩形\" class=\"headerlink\" title=\"2. 对齐矩形\"></a>2. <a href=\"https://juejin.cn/post/6844903438690549768\">对齐矩形</a></h2><h2 id=\"3-iOS-的渲染机制以及-UIView-的自动布局流程\"><a href=\"#3-iOS-的渲染机制以及-UIView-的自动布局流程\" class=\"headerlink\" title=\"3. iOS 的渲染机制以及 UIView 的自动布局流程\"></a>3. <a href=\"https://www.dazhuanlan.com/2020/01/31/5e33cdfb28a2a/\">iOS 的渲染机制以及 UIView 的自动布局流程</a></h2><h2 id=\"4-UIView-Auto-Layout-life-cycle\"><a href=\"#4-UIView-Auto-Layout-life-cycle\" class=\"headerlink\" title=\"4. UIView Auto Layout life cycle\"></a>4. <a href=\"https://www.vadimbulavin.com/view-auto-layout-life-cycle/\">UIView Auto Layout life cycle</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-自动布局-Auto-Layout-原理篇\"><a href=\"#1-自动布局-Auto-Layout-原理篇\" class=\"headerlink\" title=\"1. 自动布局 Auto Layout (原理篇)\"></a>1. <a href=\"https://www.jianshu.com/p/3a872a0bfe11\">自动布局 Auto Layout (原理篇)</a></h2><h2 id=\"2-对齐矩形\"><a href=\"#2-对齐矩形\" class=\"headerlink\" title=\"2. 对齐矩形\"></a>2. <a href=\"https://juejin.cn/post/6844903438690549768\">对齐矩形</a></h2><h2 id=\"3-iOS-的渲染机制以及-UIView-的自动布局流程\"><a href=\"#3-iOS-的渲染机制以及-UIView-的自动布局流程\" class=\"headerlink\" title=\"3. iOS 的渲染机制以及 UIView 的自动布局流程\"></a>3. <a href=\"https://www.dazhuanlan.com/2020/01/31/5e33cdfb28a2a/\">iOS 的渲染机制以及 UIView 的自动布局流程</a></h2><h2 id=\"4-UIView-Auto-Layout-life-cycle\"><a href=\"#4-UIView-Auto-Layout-life-cycle\" class=\"headerlink\" title=\"4. UIView Auto Layout life cycle\"></a>4. <a href=\"https://www.vadimbulavin.com/view-auto-layout-life-cycle/\">UIView Auto Layout life cycle</a></h2>"},{"title":"iOS 之 自动布局","abbrlink":"f2a11b67","date":"2021-04-20T13:36:02.000Z","_content":"\n\n[TOC]\n\n## 1. 基础\n\n| 型号                | 屏幕尺寸（inch） | 逻辑分辨率（point） | 缩放因子（scale factor） | 物理分辨率（pixel） | 像素密度（PPI） |\n| ------------------- | ---------------- | ------------------- | ------------------------ | ------------------- | --------------- |\n| iPhone3GS           | 3.5              | 320 * 480           | @1x                      | 320 * 480           | 163             |\n| iPhone4/4s          | 3.5              | 320 * 480           | @2x                      | 640 * 960           | 326             |\n| iPhone5/5s          | 4                | 320 * 568           | @2x                      | 640 * 1136          | 326             |\n| iPhone6/6s          | 4.7              | 375 * 667           | @2x                      | 750 * 1334          | 326             |\n| iPhone6Plus/6s Plus | 5.5              | 414 * 736           | @3x                      | 1242 * 2208         | 401             |\n\n物理分辨率、逻辑分辨率、像素密度：\n\n```latex\nPPI = 根号(X*X + Y*Y) / Inch = 163 pixcel/inch\n    \nscale= 单位长度内的数量比(pixel/point)\n```\n\n## 2. Frame\n\n* bounds\n* frame\n* anchor\n* position\n\nframe：与view中的frame概念相同，（x,y）subLayer左上角相对于supLayer坐标系的位置关系；width, height表示subLayer的宽度和高度。\n\nbounds：与view中的bounds概念相同，（x,y）subLayer左上角相对于自身坐标系的关系；width, height表示subLayer的宽度和高度。\n\nposition：锚点在supLayer坐标系中的位置；\n\nanchorPoint：锚点在自身坐标系中的相对位置，默认值为（0.5，0.5），左上角为（0，0），右下角为（1，1），其他位置以此类推；锚点都是对于自身来讲的. 确定自身的锚点,通常用于做相对的tranform变换.当然也可以用来确定位置；\n\n规律如下\n\n```objective-c\nposition.x = frame.origin.x + anchorPoint.x * frame.size.width；      \n\nposition.y = frame.origin.y + anchorPoint.y * frame.size.height；\n\nframe.size.width = bounds.size.width\n\nframe.size.height = bounds.size.height\n\nframe.origin.x = anchorPoint.x * frame.size.width - position.x；\n\nframe.origin.y = anchorPoint.y * frame.size.height - position.y；\n```\n\n## 3. 约束布局\n\n3.1 Autolayout\n\n引入了几个变量，一个是Top/Bottom Layout Guide（顶部/底部导航），一个是Superview.leading/Trailing Margin（左/右边缘间距）。Top Layout Guide其实是指的根视图的顶部，模拟器在竖屏下有状态栏，状态栏默认高度为20(注:导航栏与状态栏高度不同，导航栏的竖屏默认高度为44，横屏默认高度为32)，则Green View的Y坐标就是20 + 20 = 40。模拟器在横屏下没有状态栏，则Top Layout Guide.Bottom为0，则Green View的Y坐标就是20。Superview.leading Margin在竖屏时为16，横屏是为20。**这些在最新版的iOS有变化！**\n\n**ICS：** 自身内容尺寸(Intrinsic Content Size，以下简称ICS)。\n\nlabel， button， text fields等都是有ICS的，而UIView和NSView是没有ICS的。\n\n | View                                       | Intrinsic content size                 |\n | ------------------------------------------ | -------------------------------------- |\n | UIView and NSView                          | No intrinsic content size.             |\n | Sliders                                    | Defines only the width (iOS).          |\n | Labels, buttons, switches, and text fields | Defines both the height and the width. |\n | Text views and image views                 | Intrinsic content size can vary.       |\n\n**CRCH：** 抗压缩抗拉伸(Compression-Resistance and Content-Hugging，以下简称CRCH)\n\n![autolayout_hugging](../Resources/autolayout_hugging.png)\n\n**原文：**[Auto Layout基本原理](https://www.jianshu.com/p/c6541ff0bdaf)\n\n**3.2 实现方式：**\n\n* NSLayoutConstraint\n\n```objective-c\nNSLayoutConstraint.init(item: btn,\n                        attribute: NSLayoutAttribute.top,\n                        relatedBy: NSLayoutRelation.equal,\n                        toItem: view,\n                        attribute: NSLayoutAttribute.top,\n                        multiplier: 1,\n                        constant: 180)\n添加： NSLayoutConstraint.activate(hConstraints)\n```\n\n* NSLayoutConstraintAnchor\n* VFL\n\n| 功能         | 表达式   |\n| ------------ | -------- |\n| 水平方向     | H:       |\n| 垂直方向     | V:       |\n| Views        | [view]   |\n| 关系         | >=,==,<= |\n| SuperView    | \\|       |\n| 空间，间隙 - | -        |\n| 优先级       | @value   |\n\n```objective-c\nlet hMetrics = [\"middleSpace\": 10, \"rightSpace\": 20]\nlet hViews = [\"label\": label, \"btn\": btn]\nlet hVFL = \"H:[label]-middleSpace-[btn]-rightSpace-|\"\nlet hConstraints:[NSLayoutConstraint] = NSLayoutConstraint.constraints(withVisualFormat: hVFL,\n                                        options: NSLayoutFormatOptions.directionLeadingToTrailing,\n                                        metrics: hMetrics,\n                                        views: hViews)\n添加：NSLayoutConstraint.activate(hConstraints)\n```\n\n* Masonry、SnapKit\n* Stack Views\n* AutoLayout Xib\n* [Self-Size-Cell](https://www.appcoda.com/self-sizing-cells/)\n\n**3.3 布局过程：**\n\n```txt\nupdateConstraints -> layoutSubViews -> drawRect\n\n    |\n    |\n    V\n\n约束变化 -> Deferred Layout Pass -> Run Loop\n\n    |\n    |\n    V\n\nActivating或Deactivating\n设置constant或priority\n添加和删除视图\n```\n\n## 4. 注意点\n\n1、优先级：默认优先级\n2、scrollView 等滚动视图添加优先级特例\n3、视图先添加到俯视图上去\n4、translatesAutoresizingMaskIntoConstraints 属性\n\n参考：\n1、[深入剖析Auto Layout](https://www.jianshu.com/p/d060bef3d620)\n2、[WWDC 2018：高性能 Auto Layout](https://juejin.cn/post/6844903619360194568)\n","source":"_posts/iOS/UI/Layouts/AutoLayout.md","raw":"---\ntitle: iOS 之 自动布局\nabbrlink: f2a11b67\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n\n[TOC]\n\n## 1. 基础\n\n| 型号                | 屏幕尺寸（inch） | 逻辑分辨率（point） | 缩放因子（scale factor） | 物理分辨率（pixel） | 像素密度（PPI） |\n| ------------------- | ---------------- | ------------------- | ------------------------ | ------------------- | --------------- |\n| iPhone3GS           | 3.5              | 320 * 480           | @1x                      | 320 * 480           | 163             |\n| iPhone4/4s          | 3.5              | 320 * 480           | @2x                      | 640 * 960           | 326             |\n| iPhone5/5s          | 4                | 320 * 568           | @2x                      | 640 * 1136          | 326             |\n| iPhone6/6s          | 4.7              | 375 * 667           | @2x                      | 750 * 1334          | 326             |\n| iPhone6Plus/6s Plus | 5.5              | 414 * 736           | @3x                      | 1242 * 2208         | 401             |\n\n物理分辨率、逻辑分辨率、像素密度：\n\n```latex\nPPI = 根号(X*X + Y*Y) / Inch = 163 pixcel/inch\n    \nscale= 单位长度内的数量比(pixel/point)\n```\n\n## 2. Frame\n\n* bounds\n* frame\n* anchor\n* position\n\nframe：与view中的frame概念相同，（x,y）subLayer左上角相对于supLayer坐标系的位置关系；width, height表示subLayer的宽度和高度。\n\nbounds：与view中的bounds概念相同，（x,y）subLayer左上角相对于自身坐标系的关系；width, height表示subLayer的宽度和高度。\n\nposition：锚点在supLayer坐标系中的位置；\n\nanchorPoint：锚点在自身坐标系中的相对位置，默认值为（0.5，0.5），左上角为（0，0），右下角为（1，1），其他位置以此类推；锚点都是对于自身来讲的. 确定自身的锚点,通常用于做相对的tranform变换.当然也可以用来确定位置；\n\n规律如下\n\n```objective-c\nposition.x = frame.origin.x + anchorPoint.x * frame.size.width；      \n\nposition.y = frame.origin.y + anchorPoint.y * frame.size.height；\n\nframe.size.width = bounds.size.width\n\nframe.size.height = bounds.size.height\n\nframe.origin.x = anchorPoint.x * frame.size.width - position.x；\n\nframe.origin.y = anchorPoint.y * frame.size.height - position.y；\n```\n\n## 3. 约束布局\n\n3.1 Autolayout\n\n引入了几个变量，一个是Top/Bottom Layout Guide（顶部/底部导航），一个是Superview.leading/Trailing Margin（左/右边缘间距）。Top Layout Guide其实是指的根视图的顶部，模拟器在竖屏下有状态栏，状态栏默认高度为20(注:导航栏与状态栏高度不同，导航栏的竖屏默认高度为44，横屏默认高度为32)，则Green View的Y坐标就是20 + 20 = 40。模拟器在横屏下没有状态栏，则Top Layout Guide.Bottom为0，则Green View的Y坐标就是20。Superview.leading Margin在竖屏时为16，横屏是为20。**这些在最新版的iOS有变化！**\n\n**ICS：** 自身内容尺寸(Intrinsic Content Size，以下简称ICS)。\n\nlabel， button， text fields等都是有ICS的，而UIView和NSView是没有ICS的。\n\n | View                                       | Intrinsic content size                 |\n | ------------------------------------------ | -------------------------------------- |\n | UIView and NSView                          | No intrinsic content size.             |\n | Sliders                                    | Defines only the width (iOS).          |\n | Labels, buttons, switches, and text fields | Defines both the height and the width. |\n | Text views and image views                 | Intrinsic content size can vary.       |\n\n**CRCH：** 抗压缩抗拉伸(Compression-Resistance and Content-Hugging，以下简称CRCH)\n\n![autolayout_hugging](../Resources/autolayout_hugging.png)\n\n**原文：**[Auto Layout基本原理](https://www.jianshu.com/p/c6541ff0bdaf)\n\n**3.2 实现方式：**\n\n* NSLayoutConstraint\n\n```objective-c\nNSLayoutConstraint.init(item: btn,\n                        attribute: NSLayoutAttribute.top,\n                        relatedBy: NSLayoutRelation.equal,\n                        toItem: view,\n                        attribute: NSLayoutAttribute.top,\n                        multiplier: 1,\n                        constant: 180)\n添加： NSLayoutConstraint.activate(hConstraints)\n```\n\n* NSLayoutConstraintAnchor\n* VFL\n\n| 功能         | 表达式   |\n| ------------ | -------- |\n| 水平方向     | H:       |\n| 垂直方向     | V:       |\n| Views        | [view]   |\n| 关系         | >=,==,<= |\n| SuperView    | \\|       |\n| 空间，间隙 - | -        |\n| 优先级       | @value   |\n\n```objective-c\nlet hMetrics = [\"middleSpace\": 10, \"rightSpace\": 20]\nlet hViews = [\"label\": label, \"btn\": btn]\nlet hVFL = \"H:[label]-middleSpace-[btn]-rightSpace-|\"\nlet hConstraints:[NSLayoutConstraint] = NSLayoutConstraint.constraints(withVisualFormat: hVFL,\n                                        options: NSLayoutFormatOptions.directionLeadingToTrailing,\n                                        metrics: hMetrics,\n                                        views: hViews)\n添加：NSLayoutConstraint.activate(hConstraints)\n```\n\n* Masonry、SnapKit\n* Stack Views\n* AutoLayout Xib\n* [Self-Size-Cell](https://www.appcoda.com/self-sizing-cells/)\n\n**3.3 布局过程：**\n\n```txt\nupdateConstraints -> layoutSubViews -> drawRect\n\n    |\n    |\n    V\n\n约束变化 -> Deferred Layout Pass -> Run Loop\n\n    |\n    |\n    V\n\nActivating或Deactivating\n设置constant或priority\n添加和删除视图\n```\n\n## 4. 注意点\n\n1、优先级：默认优先级\n2、scrollView 等滚动视图添加优先级特例\n3、视图先添加到俯视图上去\n4、translatesAutoresizingMaskIntoConstraints 属性\n\n参考：\n1、[深入剖析Auto Layout](https://www.jianshu.com/p/d060bef3d620)\n2、[WWDC 2018：高性能 Auto Layout](https://juejin.cn/post/6844903619360194568)\n","slug":"iOS/UI/Layouts/AutoLayout","published":1,"updated":"2021-09-22T06:56:40.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4k004xiu9kb2loawl2","content":"<p>[TOC]</p>\n<h2 id=\"1-基础\"><a href=\"#1-基础\" class=\"headerlink\" title=\"1. 基础\"></a>1. 基础</h2><table>\n<thead>\n<tr>\n<th>型号</th>\n<th>屏幕尺寸（inch）</th>\n<th>逻辑分辨率（point）</th>\n<th>缩放因子（scale factor）</th>\n<th>物理分辨率（pixel）</th>\n<th>像素密度（PPI）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iPhone3GS</td>\n<td>3.5</td>\n<td>320 * 480</td>\n<td>@1x</td>\n<td>320 * 480</td>\n<td>163</td>\n</tr>\n<tr>\n<td>iPhone4/4s</td>\n<td>3.5</td>\n<td>320 * 480</td>\n<td>@2x</td>\n<td>640 * 960</td>\n<td>326</td>\n</tr>\n<tr>\n<td>iPhone5/5s</td>\n<td>4</td>\n<td>320 * 568</td>\n<td>@2x</td>\n<td>640 * 1136</td>\n<td>326</td>\n</tr>\n<tr>\n<td>iPhone6/6s</td>\n<td>4.7</td>\n<td>375 * 667</td>\n<td>@2x</td>\n<td>750 * 1334</td>\n<td>326</td>\n</tr>\n<tr>\n<td>iPhone6Plus/6s Plus</td>\n<td>5.5</td>\n<td>414 * 736</td>\n<td>@3x</td>\n<td>1242 * 2208</td>\n<td>401</td>\n</tr>\n</tbody></table>\n<p>物理分辨率、逻辑分辨率、像素密度：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PPI = 根号(X*X + Y*Y) / Inch = 163 pixcel/inch</span><br><span class=\"line\">    </span><br><span class=\"line\">scale= 单位长度内的数量比(pixel/point)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Frame\"><a href=\"#2-Frame\" class=\"headerlink\" title=\"2. Frame\"></a>2. Frame</h2><ul>\n<li>bounds</li>\n<li>frame</li>\n<li>anchor</li>\n<li>position</li>\n</ul>\n<p>frame：与view中的frame概念相同，（x,y）subLayer左上角相对于supLayer坐标系的位置关系；width, height表示subLayer的宽度和高度。</p>\n<p>bounds：与view中的bounds概念相同，（x,y）subLayer左上角相对于自身坐标系的关系；width, height表示subLayer的宽度和高度。</p>\n<p>position：锚点在supLayer坐标系中的位置；</p>\n<p>anchorPoint：锚点在自身坐标系中的相对位置，默认值为（0.5，0.5），左上角为（0，0），右下角为（1，1），其他位置以此类推；锚点都是对于自身来讲的. 确定自身的锚点,通常用于做相对的tranform变换.当然也可以用来确定位置；</p>\n<p>规律如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position.x = frame.origin.x + anchorPoint.x * frame.size.width；      </span><br><span class=\"line\"></span><br><span class=\"line\">position.y = frame.origin.y + anchorPoint.y * frame.size.height；</span><br><span class=\"line\"></span><br><span class=\"line\">frame.size.width = bounds.size.width</span><br><span class=\"line\"></span><br><span class=\"line\">frame.size.height = bounds.size.height</span><br><span class=\"line\"></span><br><span class=\"line\">frame.origin.x = anchorPoint.x * frame.size.width - position.x；</span><br><span class=\"line\"></span><br><span class=\"line\">frame.origin.y = anchorPoint.y * frame.size.height - position.y；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-约束布局\"><a href=\"#3-约束布局\" class=\"headerlink\" title=\"3. 约束布局\"></a>3. 约束布局</h2><p>3.1 Autolayout</p>\n<p>引入了几个变量，一个是Top/Bottom Layout Guide（顶部/底部导航），一个是Superview.leading/Trailing Margin（左/右边缘间距）。Top Layout Guide其实是指的根视图的顶部，模拟器在竖屏下有状态栏，状态栏默认高度为20(注:导航栏与状态栏高度不同，导航栏的竖屏默认高度为44，横屏默认高度为32)，则Green View的Y坐标就是20 + 20 = 40。模拟器在横屏下没有状态栏，则Top Layout Guide.Bottom为0，则Green View的Y坐标就是20。Superview.leading Margin在竖屏时为16，横屏是为20。<strong>这些在最新版的iOS有变化！</strong></p>\n<p><strong>ICS：</strong> 自身内容尺寸(Intrinsic Content Size，以下简称ICS)。</p>\n<p>label， button， text fields等都是有ICS的，而UIView和NSView是没有ICS的。</p>\n<table>\n<thead>\n<tr>\n<th>View</th>\n<th>Intrinsic content size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>UIView and NSView</td>\n<td>No intrinsic content size.</td>\n</tr>\n<tr>\n<td>Sliders</td>\n<td>Defines only the width (iOS).</td>\n</tr>\n<tr>\n<td>Labels, buttons, switches, and text fields</td>\n<td>Defines both the height and the width.</td>\n</tr>\n<tr>\n<td>Text views and image views</td>\n<td>Intrinsic content size can vary.</td>\n</tr>\n</tbody></table>\n<p><strong>CRCH：</strong> 抗压缩抗拉伸(Compression-Resistance and Content-Hugging，以下简称CRCH)</p>\n<p><img src=\"/../Resources/autolayout_hugging.png\" alt=\"autolayout_hugging\"></p>\n<p><strong>原文：</strong><a href=\"https://www.jianshu.com/p/c6541ff0bdaf\">Auto Layout基本原理</a></p>\n<p><strong>3.2 实现方式：</strong></p>\n<ul>\n<li>NSLayoutConstraint</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSLayoutConstraint.init(item: btn,</span><br><span class=\"line\">                        attribute: NSLayoutAttribute.top,</span><br><span class=\"line\">                        relatedBy: NSLayoutRelation.equal,</span><br><span class=\"line\">                        toItem: view,</span><br><span class=\"line\">                        attribute: NSLayoutAttribute.top,</span><br><span class=\"line\">                        multiplier: 1,</span><br><span class=\"line\">                        constant: 180)</span><br><span class=\"line\">添加： NSLayoutConstraint.activate(hConstraints)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NSLayoutConstraintAnchor</li>\n<li>VFL</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>表达式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>水平方向</td>\n<td>H:</td>\n</tr>\n<tr>\n<td>垂直方向</td>\n<td>V:</td>\n</tr>\n<tr>\n<td>Views</td>\n<td>[view]</td>\n</tr>\n<tr>\n<td>关系</td>\n<td>&gt;=,==,&lt;=</td>\n</tr>\n<tr>\n<td>SuperView</td>\n<td>|</td>\n</tr>\n<tr>\n<td>空间，间隙 -</td>\n<td>-</td>\n</tr>\n<tr>\n<td>优先级</td>\n<td>@value</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let hMetrics = [&quot;middleSpace&quot;: 10, &quot;rightSpace&quot;: 20]</span><br><span class=\"line\">let hViews = [&quot;label&quot;: label, &quot;btn&quot;: btn]</span><br><span class=\"line\">let hVFL = &quot;H:[label]-middleSpace-[btn]-rightSpace-|&quot;</span><br><span class=\"line\">let hConstraints:[NSLayoutConstraint] = NSLayoutConstraint.constraints(withVisualFormat: hVFL,</span><br><span class=\"line\">                                        options: NSLayoutFormatOptions.directionLeadingToTrailing,</span><br><span class=\"line\">                                        metrics: hMetrics,</span><br><span class=\"line\">                                        views: hViews)</span><br><span class=\"line\">添加：NSLayoutConstraint.activate(hConstraints)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Masonry、SnapKit</li>\n<li>Stack Views</li>\n<li>AutoLayout Xib</li>\n<li><a href=\"https://www.appcoda.com/self-sizing-cells/\">Self-Size-Cell</a></li>\n</ul>\n<p><strong>3.3 布局过程：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updateConstraints -&gt; layoutSubViews -&gt; drawRect</span><br><span class=\"line\"></span><br><span class=\"line\">    |</span><br><span class=\"line\">    |</span><br><span class=\"line\">    V</span><br><span class=\"line\"></span><br><span class=\"line\">约束变化 -&gt; Deferred Layout Pass -&gt; Run Loop</span><br><span class=\"line\"></span><br><span class=\"line\">    |</span><br><span class=\"line\">    |</span><br><span class=\"line\">    V</span><br><span class=\"line\"></span><br><span class=\"line\">Activating或Deactivating</span><br><span class=\"line\">设置constant或priority</span><br><span class=\"line\">添加和删除视图</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-注意点\"><a href=\"#4-注意点\" class=\"headerlink\" title=\"4. 注意点\"></a>4. 注意点</h2><p>1、优先级：默认优先级<br>2、scrollView 等滚动视图添加优先级特例<br>3、视图先添加到俯视图上去<br>4、translatesAutoresizingMaskIntoConstraints 属性</p>\n<p>参考：<br>1、<a href=\"https://www.jianshu.com/p/d060bef3d620\">深入剖析Auto Layout</a><br>2、<a href=\"https://juejin.cn/post/6844903619360194568\">WWDC 2018：高性能 Auto Layout</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"1-基础\"><a href=\"#1-基础\" class=\"headerlink\" title=\"1. 基础\"></a>1. 基础</h2><table>\n<thead>\n<tr>\n<th>型号</th>\n<th>屏幕尺寸（inch）</th>\n<th>逻辑分辨率（point）</th>\n<th>缩放因子（scale factor）</th>\n<th>物理分辨率（pixel）</th>\n<th>像素密度（PPI）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>iPhone3GS</td>\n<td>3.5</td>\n<td>320 * 480</td>\n<td>@1x</td>\n<td>320 * 480</td>\n<td>163</td>\n</tr>\n<tr>\n<td>iPhone4/4s</td>\n<td>3.5</td>\n<td>320 * 480</td>\n<td>@2x</td>\n<td>640 * 960</td>\n<td>326</td>\n</tr>\n<tr>\n<td>iPhone5/5s</td>\n<td>4</td>\n<td>320 * 568</td>\n<td>@2x</td>\n<td>640 * 1136</td>\n<td>326</td>\n</tr>\n<tr>\n<td>iPhone6/6s</td>\n<td>4.7</td>\n<td>375 * 667</td>\n<td>@2x</td>\n<td>750 * 1334</td>\n<td>326</td>\n</tr>\n<tr>\n<td>iPhone6Plus/6s Plus</td>\n<td>5.5</td>\n<td>414 * 736</td>\n<td>@3x</td>\n<td>1242 * 2208</td>\n<td>401</td>\n</tr>\n</tbody></table>\n<p>物理分辨率、逻辑分辨率、像素密度：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PPI = 根号(X*X + Y*Y) / Inch = 163 pixcel/inch</span><br><span class=\"line\">    </span><br><span class=\"line\">scale= 单位长度内的数量比(pixel/point)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Frame\"><a href=\"#2-Frame\" class=\"headerlink\" title=\"2. Frame\"></a>2. Frame</h2><ul>\n<li>bounds</li>\n<li>frame</li>\n<li>anchor</li>\n<li>position</li>\n</ul>\n<p>frame：与view中的frame概念相同，（x,y）subLayer左上角相对于supLayer坐标系的位置关系；width, height表示subLayer的宽度和高度。</p>\n<p>bounds：与view中的bounds概念相同，（x,y）subLayer左上角相对于自身坐标系的关系；width, height表示subLayer的宽度和高度。</p>\n<p>position：锚点在supLayer坐标系中的位置；</p>\n<p>anchorPoint：锚点在自身坐标系中的相对位置，默认值为（0.5，0.5），左上角为（0，0），右下角为（1，1），其他位置以此类推；锚点都是对于自身来讲的. 确定自身的锚点,通常用于做相对的tranform变换.当然也可以用来确定位置；</p>\n<p>规律如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">position.x = frame.origin.x + anchorPoint.x * frame.size.width；      </span><br><span class=\"line\"></span><br><span class=\"line\">position.y = frame.origin.y + anchorPoint.y * frame.size.height；</span><br><span class=\"line\"></span><br><span class=\"line\">frame.size.width = bounds.size.width</span><br><span class=\"line\"></span><br><span class=\"line\">frame.size.height = bounds.size.height</span><br><span class=\"line\"></span><br><span class=\"line\">frame.origin.x = anchorPoint.x * frame.size.width - position.x；</span><br><span class=\"line\"></span><br><span class=\"line\">frame.origin.y = anchorPoint.y * frame.size.height - position.y；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-约束布局\"><a href=\"#3-约束布局\" class=\"headerlink\" title=\"3. 约束布局\"></a>3. 约束布局</h2><p>3.1 Autolayout</p>\n<p>引入了几个变量，一个是Top/Bottom Layout Guide（顶部/底部导航），一个是Superview.leading/Trailing Margin（左/右边缘间距）。Top Layout Guide其实是指的根视图的顶部，模拟器在竖屏下有状态栏，状态栏默认高度为20(注:导航栏与状态栏高度不同，导航栏的竖屏默认高度为44，横屏默认高度为32)，则Green View的Y坐标就是20 + 20 = 40。模拟器在横屏下没有状态栏，则Top Layout Guide.Bottom为0，则Green View的Y坐标就是20。Superview.leading Margin在竖屏时为16，横屏是为20。<strong>这些在最新版的iOS有变化！</strong></p>\n<p><strong>ICS：</strong> 自身内容尺寸(Intrinsic Content Size，以下简称ICS)。</p>\n<p>label， button， text fields等都是有ICS的，而UIView和NSView是没有ICS的。</p>\n<table>\n<thead>\n<tr>\n<th>View</th>\n<th>Intrinsic content size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>UIView and NSView</td>\n<td>No intrinsic content size.</td>\n</tr>\n<tr>\n<td>Sliders</td>\n<td>Defines only the width (iOS).</td>\n</tr>\n<tr>\n<td>Labels, buttons, switches, and text fields</td>\n<td>Defines both the height and the width.</td>\n</tr>\n<tr>\n<td>Text views and image views</td>\n<td>Intrinsic content size can vary.</td>\n</tr>\n</tbody></table>\n<p><strong>CRCH：</strong> 抗压缩抗拉伸(Compression-Resistance and Content-Hugging，以下简称CRCH)</p>\n<p><img src=\"/../Resources/autolayout_hugging.png\" alt=\"autolayout_hugging\"></p>\n<p><strong>原文：</strong><a href=\"https://www.jianshu.com/p/c6541ff0bdaf\">Auto Layout基本原理</a></p>\n<p><strong>3.2 实现方式：</strong></p>\n<ul>\n<li>NSLayoutConstraint</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSLayoutConstraint.init(item: btn,</span><br><span class=\"line\">                        attribute: NSLayoutAttribute.top,</span><br><span class=\"line\">                        relatedBy: NSLayoutRelation.equal,</span><br><span class=\"line\">                        toItem: view,</span><br><span class=\"line\">                        attribute: NSLayoutAttribute.top,</span><br><span class=\"line\">                        multiplier: 1,</span><br><span class=\"line\">                        constant: 180)</span><br><span class=\"line\">添加： NSLayoutConstraint.activate(hConstraints)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NSLayoutConstraintAnchor</li>\n<li>VFL</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>表达式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>水平方向</td>\n<td>H:</td>\n</tr>\n<tr>\n<td>垂直方向</td>\n<td>V:</td>\n</tr>\n<tr>\n<td>Views</td>\n<td>[view]</td>\n</tr>\n<tr>\n<td>关系</td>\n<td>&gt;=,==,&lt;=</td>\n</tr>\n<tr>\n<td>SuperView</td>\n<td>|</td>\n</tr>\n<tr>\n<td>空间，间隙 -</td>\n<td>-</td>\n</tr>\n<tr>\n<td>优先级</td>\n<td>@value</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let hMetrics = [&quot;middleSpace&quot;: 10, &quot;rightSpace&quot;: 20]</span><br><span class=\"line\">let hViews = [&quot;label&quot;: label, &quot;btn&quot;: btn]</span><br><span class=\"line\">let hVFL = &quot;H:[label]-middleSpace-[btn]-rightSpace-|&quot;</span><br><span class=\"line\">let hConstraints:[NSLayoutConstraint] = NSLayoutConstraint.constraints(withVisualFormat: hVFL,</span><br><span class=\"line\">                                        options: NSLayoutFormatOptions.directionLeadingToTrailing,</span><br><span class=\"line\">                                        metrics: hMetrics,</span><br><span class=\"line\">                                        views: hViews)</span><br><span class=\"line\">添加：NSLayoutConstraint.activate(hConstraints)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Masonry、SnapKit</li>\n<li>Stack Views</li>\n<li>AutoLayout Xib</li>\n<li><a href=\"https://www.appcoda.com/self-sizing-cells/\">Self-Size-Cell</a></li>\n</ul>\n<p><strong>3.3 布局过程：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updateConstraints -&gt; layoutSubViews -&gt; drawRect</span><br><span class=\"line\"></span><br><span class=\"line\">    |</span><br><span class=\"line\">    |</span><br><span class=\"line\">    V</span><br><span class=\"line\"></span><br><span class=\"line\">约束变化 -&gt; Deferred Layout Pass -&gt; Run Loop</span><br><span class=\"line\"></span><br><span class=\"line\">    |</span><br><span class=\"line\">    |</span><br><span class=\"line\">    V</span><br><span class=\"line\"></span><br><span class=\"line\">Activating或Deactivating</span><br><span class=\"line\">设置constant或priority</span><br><span class=\"line\">添加和删除视图</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-注意点\"><a href=\"#4-注意点\" class=\"headerlink\" title=\"4. 注意点\"></a>4. 注意点</h2><p>1、优先级：默认优先级<br>2、scrollView 等滚动视图添加优先级特例<br>3、视图先添加到俯视图上去<br>4、translatesAutoresizingMaskIntoConstraints 属性</p>\n<p>参考：<br>1、<a href=\"https://www.jianshu.com/p/d060bef3d620\">深入剖析Auto Layout</a><br>2、<a href=\"https://juejin.cn/post/6844903619360194568\">WWDC 2018：高性能 Auto Layout</a></p>\n"},{"title":"iOS之 离屏渲染","abbrlink":"2243efc6","date":"2021-06-10T16:00:00.000Z","_content":"\n## 1. [关于iOS离屏渲染的深入研究](https://zhuanlan.zhihu.com/p/72653360)\n","source":"_posts/iOS/UI/Render/OffScreenRender.md","raw":"---\ntitle: iOS之 离屏渲染\nabbrlink: 2243efc6\ndate: 2021-06-11 00:00:00\ntags:\n---\n\n## 1. [关于iOS离屏渲染的深入研究](https://zhuanlan.zhihu.com/p/72653360)\n","slug":"iOS/UI/Render/OffScreenRender","published":1,"updated":"2021-09-16T06:42:30.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4k004yiu9k3ebsbhua","content":"<h2 id=\"1-关于iOS离屏渲染的深入研究\"><a href=\"#1-关于iOS离屏渲染的深入研究\" class=\"headerlink\" title=\"1. 关于iOS离屏渲染的深入研究\"></a>1. <a href=\"https://zhuanlan.zhihu.com/p/72653360\">关于iOS离屏渲染的深入研究</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-关于iOS离屏渲染的深入研究\"><a href=\"#1-关于iOS离屏渲染的深入研究\" class=\"headerlink\" title=\"1. 关于iOS离屏渲染的深入研究\"></a>1. <a href=\"https://zhuanlan.zhihu.com/p/72653360\">关于iOS离屏渲染的深入研究</a></h2>"},{"title":"iOS之 UI 渲染","abbrlink":"f5a9f80a","date":"2021-04-20T13:36:02.000Z","_content":"\n\n[TOC]\n\n## 1. [iOS绘制与渲染--渲染流程](https://www.jianshu.com/p/a7bf80f44dc6)\n\n## 2. [深入理解 iOS Rendering Process](https://lision.me/ios-rendering-process/)\n\n## 3. [iOS 图像渲染原理](http://chuquan.me/2018/09/25/ios-graphics-render-principle/)\n\n## 4. [计算机那些事(8)——图形图像渲染原理](http://chuquan.me/2018/08/26/graphics-rending-principle-gpu/)\n\n## 5. [iOS 保持界面流畅的技巧](https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/)\n\n## 6. [图形学 光栅化详解（Rasterization）](https://www.jianshu.com/p/54fe91a946e2)\n","source":"_posts/iOS/UI/Render/Render.md","raw":"---\ntitle: iOS之 UI 渲染\nabbrlink: f5a9f80a\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n\n[TOC]\n\n## 1. [iOS绘制与渲染--渲染流程](https://www.jianshu.com/p/a7bf80f44dc6)\n\n## 2. [深入理解 iOS Rendering Process](https://lision.me/ios-rendering-process/)\n\n## 3. [iOS 图像渲染原理](http://chuquan.me/2018/09/25/ios-graphics-render-principle/)\n\n## 4. [计算机那些事(8)——图形图像渲染原理](http://chuquan.me/2018/08/26/graphics-rending-principle-gpu/)\n\n## 5. [iOS 保持界面流畅的技巧](https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/)\n\n## 6. [图形学 光栅化详解（Rasterization）](https://www.jianshu.com/p/54fe91a946e2)\n","slug":"iOS/UI/Render/Render","published":1,"updated":"2021-09-16T06:42:30.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4l004ziu9k7l2f685h","content":"<p>[TOC]</p>\n<h2 id=\"1-iOS绘制与渲染–渲染流程\"><a href=\"#1-iOS绘制与渲染–渲染流程\" class=\"headerlink\" title=\"1. iOS绘制与渲染–渲染流程\"></a>1. <a href=\"https://www.jianshu.com/p/a7bf80f44dc6\">iOS绘制与渲染–渲染流程</a></h2><h2 id=\"2-深入理解-iOS-Rendering-Process\"><a href=\"#2-深入理解-iOS-Rendering-Process\" class=\"headerlink\" title=\"2. 深入理解 iOS Rendering Process\"></a>2. <a href=\"https://lision.me/ios-rendering-process/\">深入理解 iOS Rendering Process</a></h2><h2 id=\"3-iOS-图像渲染原理\"><a href=\"#3-iOS-图像渲染原理\" class=\"headerlink\" title=\"3. iOS 图像渲染原理\"></a>3. <a href=\"http://chuquan.me/2018/09/25/ios-graphics-render-principle/\">iOS 图像渲染原理</a></h2><h2 id=\"4-计算机那些事-8-——图形图像渲染原理\"><a href=\"#4-计算机那些事-8-——图形图像渲染原理\" class=\"headerlink\" title=\"4. 计算机那些事(8)——图形图像渲染原理\"></a>4. <a href=\"http://chuquan.me/2018/08/26/graphics-rending-principle-gpu/\">计算机那些事(8)——图形图像渲染原理</a></h2><h2 id=\"5-iOS-保持界面流畅的技巧\"><a href=\"#5-iOS-保持界面流畅的技巧\" class=\"headerlink\" title=\"5. iOS 保持界面流畅的技巧\"></a>5. <a href=\"https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/\">iOS 保持界面流畅的技巧</a></h2><h2 id=\"6-图形学-光栅化详解（Rasterization）\"><a href=\"#6-图形学-光栅化详解（Rasterization）\" class=\"headerlink\" title=\"6. 图形学 光栅化详解（Rasterization）\"></a>6. <a href=\"https://www.jianshu.com/p/54fe91a946e2\">图形学 光栅化详解（Rasterization）</a></h2>","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"1-iOS绘制与渲染–渲染流程\"><a href=\"#1-iOS绘制与渲染–渲染流程\" class=\"headerlink\" title=\"1. iOS绘制与渲染–渲染流程\"></a>1. <a href=\"https://www.jianshu.com/p/a7bf80f44dc6\">iOS绘制与渲染–渲染流程</a></h2><h2 id=\"2-深入理解-iOS-Rendering-Process\"><a href=\"#2-深入理解-iOS-Rendering-Process\" class=\"headerlink\" title=\"2. 深入理解 iOS Rendering Process\"></a>2. <a href=\"https://lision.me/ios-rendering-process/\">深入理解 iOS Rendering Process</a></h2><h2 id=\"3-iOS-图像渲染原理\"><a href=\"#3-iOS-图像渲染原理\" class=\"headerlink\" title=\"3. iOS 图像渲染原理\"></a>3. <a href=\"http://chuquan.me/2018/09/25/ios-graphics-render-principle/\">iOS 图像渲染原理</a></h2><h2 id=\"4-计算机那些事-8-——图形图像渲染原理\"><a href=\"#4-计算机那些事-8-——图形图像渲染原理\" class=\"headerlink\" title=\"4. 计算机那些事(8)——图形图像渲染原理\"></a>4. <a href=\"http://chuquan.me/2018/08/26/graphics-rending-principle-gpu/\">计算机那些事(8)——图形图像渲染原理</a></h2><h2 id=\"5-iOS-保持界面流畅的技巧\"><a href=\"#5-iOS-保持界面流畅的技巧\" class=\"headerlink\" title=\"5. iOS 保持界面流畅的技巧\"></a>5. <a href=\"https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/\">iOS 保持界面流畅的技巧</a></h2><h2 id=\"6-图形学-光栅化详解（Rasterization）\"><a href=\"#6-图形学-光栅化详解（Rasterization）\" class=\"headerlink\" title=\"6. 图形学 光栅化详解（Rasterization）\"></a>6. <a href=\"https://www.jianshu.com/p/54fe91a946e2\">图形学 光栅化详解（Rasterization）</a></h2>"},{"title":"WKWebView","abbrlink":43747,"date":"2021-07-31T02:41:07.000Z","_content":"\n## 1. [前端 WebView 指南之 iOS 交互篇](https://75.team/post/ios-webview-and-js)\n\n## 2. [WKWebView 使用详解](https://www.jianshu.com/p/29e0d8ab91f1)\n\n## 3. [WKWebview使用攻略](https://zhuanlan.zhihu.com/p/164502340)\n\n## 4. [iOS 的 WKWebView （Object-C）使用全面解析](https://juejin.cn/post/6844903984944119822)\n","source":"_posts/iOS/UI/WebKit/WKWebView.md","raw":"---\ntitle: WKWebView\nabbrlink: 43747\ndate: 2021-07-31 10:41:07\n---\n\n## 1. [前端 WebView 指南之 iOS 交互篇](https://75.team/post/ios-webview-and-js)\n\n## 2. [WKWebView 使用详解](https://www.jianshu.com/p/29e0d8ab91f1)\n\n## 3. [WKWebview使用攻略](https://zhuanlan.zhihu.com/p/164502340)\n\n## 4. [iOS 的 WKWebView （Object-C）使用全面解析](https://juejin.cn/post/6844903984944119822)\n","slug":"iOS/UI/WebKit/WKWebView","published":1,"updated":"2021-09-22T06:56:40.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4l0050iu9k9g0ve7m2","content":"<h2 id=\"1-前端-WebView-指南之-iOS-交互篇\"><a href=\"#1-前端-WebView-指南之-iOS-交互篇\" class=\"headerlink\" title=\"1. 前端 WebView 指南之 iOS 交互篇\"></a>1. <a href=\"https://75.team/post/ios-webview-and-js\">前端 WebView 指南之 iOS 交互篇</a></h2><h2 id=\"2-WKWebView-使用详解\"><a href=\"#2-WKWebView-使用详解\" class=\"headerlink\" title=\"2. WKWebView 使用详解\"></a>2. <a href=\"https://www.jianshu.com/p/29e0d8ab91f1\">WKWebView 使用详解</a></h2><h2 id=\"3-WKWebview使用攻略\"><a href=\"#3-WKWebview使用攻略\" class=\"headerlink\" title=\"3. WKWebview使用攻略\"></a>3. <a href=\"https://zhuanlan.zhihu.com/p/164502340\">WKWebview使用攻略</a></h2><h2 id=\"4-iOS-的-WKWebView-（Object-C）使用全面解析\"><a href=\"#4-iOS-的-WKWebView-（Object-C）使用全面解析\" class=\"headerlink\" title=\"4. iOS 的 WKWebView （Object-C）使用全面解析\"></a>4. <a href=\"https://juejin.cn/post/6844903984944119822\">iOS 的 WKWebView （Object-C）使用全面解析</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-前端-WebView-指南之-iOS-交互篇\"><a href=\"#1-前端-WebView-指南之-iOS-交互篇\" class=\"headerlink\" title=\"1. 前端 WebView 指南之 iOS 交互篇\"></a>1. <a href=\"https://75.team/post/ios-webview-and-js\">前端 WebView 指南之 iOS 交互篇</a></h2><h2 id=\"2-WKWebView-使用详解\"><a href=\"#2-WKWebView-使用详解\" class=\"headerlink\" title=\"2. WKWebView 使用详解\"></a>2. <a href=\"https://www.jianshu.com/p/29e0d8ab91f1\">WKWebView 使用详解</a></h2><h2 id=\"3-WKWebview使用攻略\"><a href=\"#3-WKWebview使用攻略\" class=\"headerlink\" title=\"3. WKWebview使用攻略\"></a>3. <a href=\"https://zhuanlan.zhihu.com/p/164502340\">WKWebview使用攻略</a></h2><h2 id=\"4-iOS-的-WKWebView-（Object-C）使用全面解析\"><a href=\"#4-iOS-的-WKWebView-（Object-C）使用全面解析\" class=\"headerlink\" title=\"4. iOS 的 WKWebView （Object-C）使用全面解析\"></a>4. <a href=\"https://juejin.cn/post/6844903984944119822\">iOS 的 WKWebView （Object-C）使用全面解析</a></h2>"},{"title":"iOS之 Webkit","abbrlink":"4838c0bd","date":"2021-04-20T13:36:02.000Z","_content":"\n[TOC]\n\n## 1. iOS与JS交互的四种方法\n\n1. 拦截url（适用于UIWebView和WKWebView）\n2. JavaScriptCore（只适用于UIWebView，iOS7+）\n3. WKScriptMessageHandler（只适用于WKWebView，iOS8+）\n4. WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）\n\n### 1.1 方法一\n\n（1）web调用原生：\n\n```objective-c\n - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType{\n    if ([request.URL.absoluteString hasPrefix:@\"jxaction://scan\"]) {\n        //调用原生扫描二维码\n       return NO;\n    }\n        return YES;\n    }\n```\n\nH5 代码\n\n```html\n<a href=\"jxaction://scan\">扫一扫(拦截url)</a>\n```\n\n（2）原生调用js\n\n```objective-c\n[self.webView stringByEvaluatingJavaScriptFromString:@\"scanResult('我是扫描结果~')\"];\n```\n\n### 1.2 方法二 JavaScriptCore\n\n（1）js调用原生\n1、新建类继承自NSObject（如AppJSObject）。\n2、.h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。\n3、.m文件中实现2中的代理中对应的方法，可以在方法内处理事件或通知代理。\n\nAppJSObject.h\n\n```objective-c\n#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>\n\n@protocol AppJSObjectDelegate <JSExport>\n\n-(void)scan:(NSString *)message;\n\n@end\n\n@interface AppJSObject : NSObject<AppJSObjectDelegate>\n\n@property(nonatomic,weak) id<AppJSObjectDelegate> delegate;\n\n@end\n\n```\n\nAppJSObject.m\n\n```objective-c\n#import \"AppJSObject.h\"\n\n@implementation AppJSObject\n\n-(void)scan:(NSString *)message{\n    [self.delegate scan:message];\n}\n\n@end\n```\n\nH5代码：\n\n```html\n<input type=\"button\" name=\"\" value=\"扫一扫\" onclick=\"scan()\">\n<br/>\n<p id=\"result\">扫描结果：</p>\n\n<script type=\"text/javascript\">\n    //调用APP的扫描方法   h5->app\n    function scan(){\n        app.scan('scanResult');\n    }\n\n    //扫描结果回调方法    app->h5\n    function scanResult(result){\n        document.getElementById(\"result\").innerHTML = '扫描结果：' + result;  \n    }\n</script>\n```\n\n在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了\n\n```objective-c\n-(void)webViewDidFinishLoad:(UIWebView *)webView\n{\n    JSContext *context=[webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\n\n    AppJSObject *jsObject = [AppJSObject new];\n    jsObject.delegate = self;\n    context[@\"app\"] = jsObject;\n\n}\n```\n\n也可以通过block实现而不创建新类AppJSObject:\n\n```objective-c\ncontext[@\"openAlbum\"] = ^(){\n    NSLog(@\"js调用oc打开相册\");\n};\n```\n\n（2）原生调用js，可以通过一中的方法，也可以通过JSContext：\n\n```objective-c\nJSContext *context=[_mainWebView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\nNSString *alertJS= [NSString stringWithFormat:@\"%@('%@')\",_photoMethod,fileUrl];\n[context evaluateScript:alertJS];\n\n```\n\n### 1.3 方法三  WKScriptMessageHandler\n\n现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler\n\n1、初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan：\n\n```objective-c\n- (void)setupWKWebView{\n    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\n    configuration.userContentController = [[WKUserContentController alloc] init];\n    [configuration.userContentController addScriptMessageHandler:self name:@\"scan\"];\n\n    WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];\n    webView.UIDelegate = self;\n}\n```\n\nH5:\n\n```html\nwindow.webkit.messageHandlers.scan.postMessage() \n```\n\n2、实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：\n\n```objective-c\n- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message{\n    if ([message.name isEqualToString:@\"scan\"]) {\n        //调用原生扫码\n     }\n}\n```\n\n3、原生调用js\n\n```objective-c\n[self.wkWebView evaluateJavaScript:jsString  completionHandler:^(id _Nullable result, NSError * _Nullable error) {\n\n}];\n```\n\n注意一点，内存泄漏的情况，解决办法如下：\n\n```objective-c\nclass WeakScriptMessageDelegate: NSObject, WKScriptMessageHandler {\n    weak var scriptDelegate: WKScriptMessageHandler?\n    \n    init(_ scriptDelegate: WKScriptMessageHandler) {\n        self.scriptDelegate = scriptDelegate\n        super.init()\n    }\n    \n    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {\n        scriptDelegate?.userContentController(userContentController, didReceive: message)\n    }\n    \n    deinit {\n        print(\"WeakScriptMessageDelegate is deinit\")\n    }\n}\n```\n\n定义一个代理类：\n\n```objective-c\nwkWebView.configuration.userContentController.add(WeakScriptMessageDelegate.init(self), name: <方法名>)\n```\n\n### 1.4 方法四 WebViewJavascriptBridge\n\n是一个第三方框架，官方文档和demo都很完整，不再累赘\n\n*GitHub地址：*[marcuswestin/WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)\n\n*原理及源码：* [WebViewJavascriptBridge](https://github.com/ShannonChenCHN/iOSDevLevelingUp/tree/master/ReadingSourceCode/WebViewJavascriptBridgeNotes)\n\n*微信JS：*[JS-SDK](https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3&oldid=1667)\n\n## 2. 大前端\n\n1、React-Native：\n\n* [React-Native 官网](https://facebook.github.io/react-native/)\n* [React-Native 中文网](https://reactnative.cn/)\n\n2、Flutter:\n\n* [Flutter 官网](https://flutter.dev/)\n* [Flutter 中文网](https://flutterchina.club/)\n\n3、WeeX:\n\n* [WeeX 官网](https://weex.incubator.apache.org/)\n* [WeeX 中文网](https://weex.apache.org/zh/guide/introduction.html)\n","source":"_posts/iOS/UI/WebKit/WebKit.md","raw":"---\ntitle: iOS之 Webkit\nabbrlink: 4838c0bd\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n[TOC]\n\n## 1. iOS与JS交互的四种方法\n\n1. 拦截url（适用于UIWebView和WKWebView）\n2. JavaScriptCore（只适用于UIWebView，iOS7+）\n3. WKScriptMessageHandler（只适用于WKWebView，iOS8+）\n4. WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）\n\n### 1.1 方法一\n\n（1）web调用原生：\n\n```objective-c\n - (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType{\n    if ([request.URL.absoluteString hasPrefix:@\"jxaction://scan\"]) {\n        //调用原生扫描二维码\n       return NO;\n    }\n        return YES;\n    }\n```\n\nH5 代码\n\n```html\n<a href=\"jxaction://scan\">扫一扫(拦截url)</a>\n```\n\n（2）原生调用js\n\n```objective-c\n[self.webView stringByEvaluatingJavaScriptFromString:@\"scanResult('我是扫描结果~')\"];\n```\n\n### 1.2 方法二 JavaScriptCore\n\n（1）js调用原生\n1、新建类继承自NSObject（如AppJSObject）。\n2、.h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。\n3、.m文件中实现2中的代理中对应的方法，可以在方法内处理事件或通知代理。\n\nAppJSObject.h\n\n```objective-c\n#import <Foundation/Foundation.h>\n#import <JavaScriptCore/JavaScriptCore.h>\n\n@protocol AppJSObjectDelegate <JSExport>\n\n-(void)scan:(NSString *)message;\n\n@end\n\n@interface AppJSObject : NSObject<AppJSObjectDelegate>\n\n@property(nonatomic,weak) id<AppJSObjectDelegate> delegate;\n\n@end\n\n```\n\nAppJSObject.m\n\n```objective-c\n#import \"AppJSObject.h\"\n\n@implementation AppJSObject\n\n-(void)scan:(NSString *)message{\n    [self.delegate scan:message];\n}\n\n@end\n```\n\nH5代码：\n\n```html\n<input type=\"button\" name=\"\" value=\"扫一扫\" onclick=\"scan()\">\n<br/>\n<p id=\"result\">扫描结果：</p>\n\n<script type=\"text/javascript\">\n    //调用APP的扫描方法   h5->app\n    function scan(){\n        app.scan('scanResult');\n    }\n\n    //扫描结果回调方法    app->h5\n    function scanResult(result){\n        document.getElementById(\"result\").innerHTML = '扫描结果：' + result;  \n    }\n</script>\n```\n\n在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了\n\n```objective-c\n-(void)webViewDidFinishLoad:(UIWebView *)webView\n{\n    JSContext *context=[webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\n\n    AppJSObject *jsObject = [AppJSObject new];\n    jsObject.delegate = self;\n    context[@\"app\"] = jsObject;\n\n}\n```\n\n也可以通过block实现而不创建新类AppJSObject:\n\n```objective-c\ncontext[@\"openAlbum\"] = ^(){\n    NSLog(@\"js调用oc打开相册\");\n};\n```\n\n（2）原生调用js，可以通过一中的方法，也可以通过JSContext：\n\n```objective-c\nJSContext *context=[_mainWebView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\nNSString *alertJS= [NSString stringWithFormat:@\"%@('%@')\",_photoMethod,fileUrl];\n[context evaluateScript:alertJS];\n\n```\n\n### 1.3 方法三  WKScriptMessageHandler\n\n现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler\n\n1、初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan：\n\n```objective-c\n- (void)setupWKWebView{\n    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\n    configuration.userContentController = [[WKUserContentController alloc] init];\n    [configuration.userContentController addScriptMessageHandler:self name:@\"scan\"];\n\n    WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];\n    webView.UIDelegate = self;\n}\n```\n\nH5:\n\n```html\nwindow.webkit.messageHandlers.scan.postMessage() \n```\n\n2、实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：\n\n```objective-c\n- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message{\n    if ([message.name isEqualToString:@\"scan\"]) {\n        //调用原生扫码\n     }\n}\n```\n\n3、原生调用js\n\n```objective-c\n[self.wkWebView evaluateJavaScript:jsString  completionHandler:^(id _Nullable result, NSError * _Nullable error) {\n\n}];\n```\n\n注意一点，内存泄漏的情况，解决办法如下：\n\n```objective-c\nclass WeakScriptMessageDelegate: NSObject, WKScriptMessageHandler {\n    weak var scriptDelegate: WKScriptMessageHandler?\n    \n    init(_ scriptDelegate: WKScriptMessageHandler) {\n        self.scriptDelegate = scriptDelegate\n        super.init()\n    }\n    \n    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {\n        scriptDelegate?.userContentController(userContentController, didReceive: message)\n    }\n    \n    deinit {\n        print(\"WeakScriptMessageDelegate is deinit\")\n    }\n}\n```\n\n定义一个代理类：\n\n```objective-c\nwkWebView.configuration.userContentController.add(WeakScriptMessageDelegate.init(self), name: <方法名>)\n```\n\n### 1.4 方法四 WebViewJavascriptBridge\n\n是一个第三方框架，官方文档和demo都很完整，不再累赘\n\n*GitHub地址：*[marcuswestin/WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)\n\n*原理及源码：* [WebViewJavascriptBridge](https://github.com/ShannonChenCHN/iOSDevLevelingUp/tree/master/ReadingSourceCode/WebViewJavascriptBridgeNotes)\n\n*微信JS：*[JS-SDK](https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3&oldid=1667)\n\n## 2. 大前端\n\n1、React-Native：\n\n* [React-Native 官网](https://facebook.github.io/react-native/)\n* [React-Native 中文网](https://reactnative.cn/)\n\n2、Flutter:\n\n* [Flutter 官网](https://flutter.dev/)\n* [Flutter 中文网](https://flutterchina.club/)\n\n3、WeeX:\n\n* [WeeX 官网](https://weex.incubator.apache.org/)\n* [WeeX 中文网](https://weex.apache.org/zh/guide/introduction.html)\n","slug":"iOS/UI/WebKit/WebKit","published":1,"updated":"2021-09-16T06:42:30.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4n0051iu9khmi42l78","content":"<p>[TOC]</p>\n<h2 id=\"1-iOS与JS交互的四种方法\"><a href=\"#1-iOS与JS交互的四种方法\" class=\"headerlink\" title=\"1. iOS与JS交互的四种方法\"></a>1. iOS与JS交互的四种方法</h2><ol>\n<li>拦截url（适用于UIWebView和WKWebView）</li>\n<li>JavaScriptCore（只适用于UIWebView，iOS7+）</li>\n<li>WKScriptMessageHandler（只适用于WKWebView，iOS8+）</li>\n<li>WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）</li>\n</ol>\n<h3 id=\"1-1-方法一\"><a href=\"#1-1-方法一\" class=\"headerlink\" title=\"1.1 方法一\"></a>1.1 方法一</h3><p>（1）web调用原生：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType&#123;</span><br><span class=\"line\">   if ([request.URL.absoluteString hasPrefix:@&quot;jxaction://scan&quot;]) &#123;</span><br><span class=\"line\">       //调用原生扫描二维码</span><br><span class=\"line\">      return NO;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">       return YES;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>H5 代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;jxaction://scan&quot;</span>&gt;</span>扫一扫(拦截url)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）原生调用js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.webView stringByEvaluatingJavaScriptFromString:@&quot;scanResult(&#x27;我是扫描结果~&#x27;)&quot;];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-方法二-JavaScriptCore\"><a href=\"#1-2-方法二-JavaScriptCore\" class=\"headerlink\" title=\"1.2 方法二 JavaScriptCore\"></a>1.2 方法二 JavaScriptCore</h3><p>（1）js调用原生<br>1、新建类继承自NSObject（如AppJSObject）。<br>2、.h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。<br>3、.m文件中实现2中的代理中对应的方法，可以在方法内处理事件或通知代理。</p>\n<p>AppJSObject.h</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\">#import &lt;JavaScriptCore/JavaScriptCore.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol AppJSObjectDelegate &lt;JSExport&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)scan:(NSString *)message;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface AppJSObject : NSObject&lt;AppJSObjectDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,weak) id&lt;AppJSObjectDelegate&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>AppJSObject.m</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;AppJSObject.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation AppJSObject</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)scan:(NSString *)message&#123;</span><br><span class=\"line\">    [self.delegate scan:message];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>H5代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;扫一扫&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;scan()&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;result&quot;</span>&gt;</span>扫描结果：<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//调用APP的扫描方法   h5-&gt;app</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scan</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        app.scan(<span class=\"string\">&#x27;scanResult&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//扫描结果回调方法    app-&gt;h5</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scanResult</span>(<span class=\"params\">result</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;result&quot;</span>).innerHTML = <span class=\"string\">&#x27;扫描结果：&#x27;</span> + result;  </span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)webViewDidFinishLoad:(UIWebView *)webView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    JSContext *context=[webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    AppJSObject *jsObject = [AppJSObject new];</span><br><span class=\"line\">    jsObject.delegate = self;</span><br><span class=\"line\">    context[@&quot;app&quot;] = jsObject;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过block实现而不创建新类AppJSObject:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context[@&quot;openAlbum&quot;] = ^()&#123;</span><br><span class=\"line\">    NSLog(@&quot;js调用oc打开相册&quot;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>（2）原生调用js，可以通过一中的方法，也可以通过JSContext：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSContext *context=[_mainWebView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class=\"line\">NSString *alertJS= [NSString stringWithFormat:@&quot;%@(&#x27;%@&#x27;)&quot;,_photoMethod,fileUrl];</span><br><span class=\"line\">[context evaluateScript:alertJS];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-方法三-WKScriptMessageHandler\"><a href=\"#1-3-方法三-WKScriptMessageHandler\" class=\"headerlink\" title=\"1.3 方法三  WKScriptMessageHandler\"></a>1.3 方法三  WKScriptMessageHandler</h3><p>现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler</p>\n<p>1、初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setupWKWebView&#123;</span><br><span class=\"line\">    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</span><br><span class=\"line\">    configuration.userContentController = [[WKUserContentController alloc] init];</span><br><span class=\"line\">    [configuration.userContentController addScriptMessageHandler:self name:@&quot;scan&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];</span><br><span class=\"line\">    webView.UIDelegate = self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>H5:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.webkit.messageHandlers.scan.postMessage() </span><br></pre></td></tr></table></figure>\n\n<p>2、实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message&#123;</span><br><span class=\"line\">    if ([message.name isEqualToString:@&quot;scan&quot;]) &#123;</span><br><span class=\"line\">        //调用原生扫码</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、原生调用js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.wkWebView evaluateJavaScript:jsString  completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>注意一点，内存泄漏的情况，解决办法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class WeakScriptMessageDelegate: NSObject, WKScriptMessageHandler &#123;</span><br><span class=\"line\">    weak var scriptDelegate: WKScriptMessageHandler?</span><br><span class=\"line\">    </span><br><span class=\"line\">    init(_ scriptDelegate: WKScriptMessageHandler) &#123;</span><br><span class=\"line\">        self.scriptDelegate = scriptDelegate</span><br><span class=\"line\">        super.init()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) &#123;</span><br><span class=\"line\">        scriptDelegate?.userContentController(userContentController, didReceive: message)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    deinit &#123;</span><br><span class=\"line\">        print(&quot;WeakScriptMessageDelegate is deinit&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个代理类：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wkWebView.configuration.userContentController.add(WeakScriptMessageDelegate.init(self), name: &lt;方法名&gt;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-方法四-WebViewJavascriptBridge\"><a href=\"#1-4-方法四-WebViewJavascriptBridge\" class=\"headerlink\" title=\"1.4 方法四 WebViewJavascriptBridge\"></a>1.4 方法四 WebViewJavascriptBridge</h3><p>是一个第三方框架，官方文档和demo都很完整，不再累赘</p>\n<p><em>GitHub地址：</em><a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">marcuswestin/WebViewJavascriptBridge</a></p>\n<p><em>原理及源码：</em> <a href=\"https://github.com/ShannonChenCHN/iOSDevLevelingUp/tree/master/ReadingSourceCode/WebViewJavascriptBridgeNotes\">WebViewJavascriptBridge</a></p>\n<p><em>微信JS：</em><a href=\"https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3&oldid=1667\">JS-SDK</a></p>\n<h2 id=\"2-大前端\"><a href=\"#2-大前端\" class=\"headerlink\" title=\"2. 大前端\"></a>2. 大前端</h2><p>1、React-Native：</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react-native/\">React-Native 官网</a></li>\n<li><a href=\"https://reactnative.cn/\">React-Native 中文网</a></li>\n</ul>\n<p>2、Flutter:</p>\n<ul>\n<li><a href=\"https://flutter.dev/\">Flutter 官网</a></li>\n<li><a href=\"https://flutterchina.club/\">Flutter 中文网</a></li>\n</ul>\n<p>3、WeeX:</p>\n<ul>\n<li><a href=\"https://weex.incubator.apache.org/\">WeeX 官网</a></li>\n<li><a href=\"https://weex.apache.org/zh/guide/introduction.html\">WeeX 中文网</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"1-iOS与JS交互的四种方法\"><a href=\"#1-iOS与JS交互的四种方法\" class=\"headerlink\" title=\"1. iOS与JS交互的四种方法\"></a>1. iOS与JS交互的四种方法</h2><ol>\n<li>拦截url（适用于UIWebView和WKWebView）</li>\n<li>JavaScriptCore（只适用于UIWebView，iOS7+）</li>\n<li>WKScriptMessageHandler（只适用于WKWebView，iOS8+）</li>\n<li>WebViewJavascriptBridge（适用于UIWebView和WKWebView，属于第三方框架）</li>\n</ol>\n<h3 id=\"1-1-方法一\"><a href=\"#1-1-方法一\" class=\"headerlink\" title=\"1.1 方法一\"></a>1.1 方法一</h3><p>（1）web调用原生：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType&#123;</span><br><span class=\"line\">   if ([request.URL.absoluteString hasPrefix:@&quot;jxaction://scan&quot;]) &#123;</span><br><span class=\"line\">       //调用原生扫描二维码</span><br><span class=\"line\">      return NO;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">       return YES;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>H5 代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;jxaction://scan&quot;</span>&gt;</span>扫一扫(拦截url)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）原生调用js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.webView stringByEvaluatingJavaScriptFromString:@&quot;scanResult(&#x27;我是扫描结果~&#x27;)&quot;];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-方法二-JavaScriptCore\"><a href=\"#1-2-方法二-JavaScriptCore\" class=\"headerlink\" title=\"1.2 方法二 JavaScriptCore\"></a>1.2 方法二 JavaScriptCore</h3><p>（1）js调用原生<br>1、新建类继承自NSObject（如AppJSObject）。<br>2、.h文件中声明一个代理并遵循JSExport，代理内的方法和js定义的方法名一致。<br>3、.m文件中实现2中的代理中对应的方法，可以在方法内处理事件或通知代理。</p>\n<p>AppJSObject.h</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &lt;Foundation/Foundation.h&gt;</span><br><span class=\"line\">#import &lt;JavaScriptCore/JavaScriptCore.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@protocol AppJSObjectDelegate &lt;JSExport&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)scan:(NSString *)message;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@interface AppJSObject : NSObject&lt;AppJSObjectDelegate&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@property(nonatomic,weak) id&lt;AppJSObjectDelegate&gt; delegate;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>AppJSObject.m</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import &quot;AppJSObject.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation AppJSObject</span><br><span class=\"line\"></span><br><span class=\"line\">-(void)scan:(NSString *)message&#123;</span><br><span class=\"line\">    [self.delegate scan:message];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n\n<p>H5代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;扫一扫&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;scan()&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;result&quot;</span>&gt;</span>扫描结果：<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//调用APP的扫描方法   h5-&gt;app</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scan</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        app.scan(<span class=\"string\">&#x27;scanResult&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//扫描结果回调方法    app-&gt;h5</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scanResult</span>(<span class=\"params\">result</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;result&quot;</span>).innerHTML = <span class=\"string\">&#x27;扫描结果：&#x27;</span> + result;  </span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在UIWebView加载完成的代理中把AppJSObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生AppJSObject实例对象中对应的方法了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-(void)webViewDidFinishLoad:(UIWebView *)webView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    JSContext *context=[webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    AppJSObject *jsObject = [AppJSObject new];</span><br><span class=\"line\">    jsObject.delegate = self;</span><br><span class=\"line\">    context[@&quot;app&quot;] = jsObject;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以通过block实现而不创建新类AppJSObject:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context[@&quot;openAlbum&quot;] = ^()&#123;</span><br><span class=\"line\">    NSLog(@&quot;js调用oc打开相册&quot;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>（2）原生调用js，可以通过一中的方法，也可以通过JSContext：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSContext *context=[_mainWebView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class=\"line\">NSString *alertJS= [NSString stringWithFormat:@&quot;%@(&#x27;%@&#x27;)&quot;,_photoMethod,fileUrl];</span><br><span class=\"line\">[context evaluateScript:alertJS];</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-方法三-WKScriptMessageHandler\"><a href=\"#1-3-方法三-WKScriptMessageHandler\" class=\"headerlink\" title=\"1.3 方法三  WKScriptMessageHandler\"></a>1.3 方法三  WKScriptMessageHandler</h3><p>现在很多app都是支持iOS8+，很多人使用WKWebView代替了UIWebView，但是WKWebView并不支持方法二。此时我们可以使用WKWebView的WKScriptMessageHandler</p>\n<p>1、初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如scan：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)setupWKWebView&#123;</span><br><span class=\"line\">    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</span><br><span class=\"line\">    configuration.userContentController = [[WKUserContentController alloc] init];</span><br><span class=\"line\">    [configuration.userContentController addScriptMessageHandler:self name:@&quot;scan&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];</span><br><span class=\"line\">    webView.UIDelegate = self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>H5:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.webkit.messageHandlers.scan.postMessage() </span><br></pre></td></tr></table></figure>\n\n<p>2、实现WKScriptMessageHandler代理方法，当js调用scan方法时，会回调此代理方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message&#123;</span><br><span class=\"line\">    if ([message.name isEqualToString:@&quot;scan&quot;]) &#123;</span><br><span class=\"line\">        //调用原生扫码</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3、原生调用js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.wkWebView evaluateJavaScript:jsString  completionHandler:^(id _Nullable result, NSError * _Nullable error) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n\n<p>注意一点，内存泄漏的情况，解决办法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class WeakScriptMessageDelegate: NSObject, WKScriptMessageHandler &#123;</span><br><span class=\"line\">    weak var scriptDelegate: WKScriptMessageHandler?</span><br><span class=\"line\">    </span><br><span class=\"line\">    init(_ scriptDelegate: WKScriptMessageHandler) &#123;</span><br><span class=\"line\">        self.scriptDelegate = scriptDelegate</span><br><span class=\"line\">        super.init()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) &#123;</span><br><span class=\"line\">        scriptDelegate?.userContentController(userContentController, didReceive: message)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    deinit &#123;</span><br><span class=\"line\">        print(&quot;WeakScriptMessageDelegate is deinit&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个代理类：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wkWebView.configuration.userContentController.add(WeakScriptMessageDelegate.init(self), name: &lt;方法名&gt;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-方法四-WebViewJavascriptBridge\"><a href=\"#1-4-方法四-WebViewJavascriptBridge\" class=\"headerlink\" title=\"1.4 方法四 WebViewJavascriptBridge\"></a>1.4 方法四 WebViewJavascriptBridge</h3><p>是一个第三方框架，官方文档和demo都很完整，不再累赘</p>\n<p><em>GitHub地址：</em><a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\">marcuswestin/WebViewJavascriptBridge</a></p>\n<p><em>原理及源码：</em> <a href=\"https://github.com/ShannonChenCHN/iOSDevLevelingUp/tree/master/ReadingSourceCode/WebViewJavascriptBridgeNotes\">WebViewJavascriptBridge</a></p>\n<p><em>微信JS：</em><a href=\"https://qydev.weixin.qq.com/wiki/index.php?title=%E5%BE%AE%E4%BF%A1JS-SDK%E6%8E%A5%E5%8F%A3&oldid=1667\">JS-SDK</a></p>\n<h2 id=\"2-大前端\"><a href=\"#2-大前端\" class=\"headerlink\" title=\"2. 大前端\"></a>2. 大前端</h2><p>1、React-Native：</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react-native/\">React-Native 官网</a></li>\n<li><a href=\"https://reactnative.cn/\">React-Native 中文网</a></li>\n</ul>\n<p>2、Flutter:</p>\n<ul>\n<li><a href=\"https://flutter.dev/\">Flutter 官网</a></li>\n<li><a href=\"https://flutterchina.club/\">Flutter 中文网</a></li>\n</ul>\n<p>3、WeeX:</p>\n<ul>\n<li><a href=\"https://weex.incubator.apache.org/\">WeeX 官网</a></li>\n<li><a href=\"https://weex.apache.org/zh/guide/introduction.html\">WeeX 中文网</a></li>\n</ul>\n"},{"title":"DNS","date":"2021-04-20T13:36:02.000Z","_content":"## DNS 搭建\n\n### 1. [dnscrypt-proxy+dnsmasq搭建无污染DNS服务器](https://blog.hotwill.cn/dnscrypt-proxy+dnsmasq搭建无污染DNS服务器.html#comment-4687528442)\n\n### 2. [DNS服务器搭建与配置（详细|干货！）](https://www.cnblogs.com/heiye123/articles/7687922.html)\n\n### 3. [搭建DNS服务器实现域名解析](https://www.cnblogs.com/xiaogan/p/5954678.html)\n\n### 4. [DNS(bind)服务器的安装与配置](https://blog.csdn.net/bbwangj/article/details/82079405)\n","source":"_drafts/Computers/NetWork/DNS/DNS.md","raw":"---\ntitle: DNS\ndate: 2021-04-20 21:36:02\ntags:\n---\n## DNS 搭建\n\n### 1. [dnscrypt-proxy+dnsmasq搭建无污染DNS服务器](https://blog.hotwill.cn/dnscrypt-proxy+dnsmasq搭建无污染DNS服务器.html#comment-4687528442)\n\n### 2. [DNS服务器搭建与配置（详细|干货！）](https://www.cnblogs.com/heiye123/articles/7687922.html)\n\n### 3. [搭建DNS服务器实现域名解析](https://www.cnblogs.com/xiaogan/p/5954678.html)\n\n### 4. [DNS(bind)服务器的安装与配置](https://blog.csdn.net/bbwangj/article/details/82079405)\n","slug":"Computers/NetWork/DNS/DNS","published":0,"updated":"2021-07-29T06:46:00.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4o0052iu9k86xcbl8u","content":"<h2 id=\"DNS-搭建\"><a href=\"#DNS-搭建\" class=\"headerlink\" title=\"DNS 搭建\"></a>DNS 搭建</h2><h3 id=\"1-dnscrypt-proxy-dnsmasq搭建无污染DNS服务器\"><a href=\"#1-dnscrypt-proxy-dnsmasq搭建无污染DNS服务器\" class=\"headerlink\" title=\"1. dnscrypt-proxy+dnsmasq搭建无污染DNS服务器\"></a>1. <a href=\"https://blog.hotwill.cn/dnscrypt-proxy+dnsmasq%E6%90%AD%E5%BB%BA%E6%97%A0%E6%B1%A1%E6%9F%93DNS%E6%9C%8D%E5%8A%A1%E5%99%A8.html#comment-4687528442\">dnscrypt-proxy+dnsmasq搭建无污染DNS服务器</a></h3><h3 id=\"2-DNS服务器搭建与配置（详细-干货！）\"><a href=\"#2-DNS服务器搭建与配置（详细-干货！）\" class=\"headerlink\" title=\"2. DNS服务器搭建与配置（详细|干货！）\"></a>2. <a href=\"https://www.cnblogs.com/heiye123/articles/7687922.html\">DNS服务器搭建与配置（详细|干货！）</a></h3><h3 id=\"3-搭建DNS服务器实现域名解析\"><a href=\"#3-搭建DNS服务器实现域名解析\" class=\"headerlink\" title=\"3. 搭建DNS服务器实现域名解析\"></a>3. <a href=\"https://www.cnblogs.com/xiaogan/p/5954678.html\">搭建DNS服务器实现域名解析</a></h3><h3 id=\"4-DNS-bind-服务器的安装与配置\"><a href=\"#4-DNS-bind-服务器的安装与配置\" class=\"headerlink\" title=\"4. DNS(bind)服务器的安装与配置\"></a>4. <a href=\"https://blog.csdn.net/bbwangj/article/details/82079405\">DNS(bind)服务器的安装与配置</a></h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"DNS-搭建\"><a href=\"#DNS-搭建\" class=\"headerlink\" title=\"DNS 搭建\"></a>DNS 搭建</h2><h3 id=\"1-dnscrypt-proxy-dnsmasq搭建无污染DNS服务器\"><a href=\"#1-dnscrypt-proxy-dnsmasq搭建无污染DNS服务器\" class=\"headerlink\" title=\"1. dnscrypt-proxy+dnsmasq搭建无污染DNS服务器\"></a>1. <a href=\"https://blog.hotwill.cn/dnscrypt-proxy+dnsmasq%E6%90%AD%E5%BB%BA%E6%97%A0%E6%B1%A1%E6%9F%93DNS%E6%9C%8D%E5%8A%A1%E5%99%A8.html#comment-4687528442\">dnscrypt-proxy+dnsmasq搭建无污染DNS服务器</a></h3><h3 id=\"2-DNS服务器搭建与配置（详细-干货！）\"><a href=\"#2-DNS服务器搭建与配置（详细-干货！）\" class=\"headerlink\" title=\"2. DNS服务器搭建与配置（详细|干货！）\"></a>2. <a href=\"https://www.cnblogs.com/heiye123/articles/7687922.html\">DNS服务器搭建与配置（详细|干货！）</a></h3><h3 id=\"3-搭建DNS服务器实现域名解析\"><a href=\"#3-搭建DNS服务器实现域名解析\" class=\"headerlink\" title=\"3. 搭建DNS服务器实现域名解析\"></a>3. <a href=\"https://www.cnblogs.com/xiaogan/p/5954678.html\">搭建DNS服务器实现域名解析</a></h3><h3 id=\"4-DNS-bind-服务器的安装与配置\"><a href=\"#4-DNS-bind-服务器的安装与配置\" class=\"headerlink\" title=\"4. DNS(bind)服务器的安装与配置\"></a>4. <a href=\"https://blog.csdn.net/bbwangj/article/details/82079405\">DNS(bind)服务器的安装与配置</a></h3>"},{"title":"MySQL","abbrlink":"c24675b4","date":"2021-04-19T16:00:00.000Z","_content":"","source":"_posts/iOS/Languages/MySQL/MySQL.md","raw":"---\ntitle: MySQL\nabbrlink: c24675b4\ndate: 2021-04-20 00:00:00\ntags:\n---\n","slug":"iOS/Languages/MySQL/MySQL","published":1,"updated":"2021-07-29T06:45:57.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4o0053iu9k8sutbpzb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"命令行工具--rsync","date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [rsync 用法教程](https://www.ruanyifeng.com/blog/2020/08/rsync.html)\n","source":"_drafts/Computers/OS/Linux/rsync.md","raw":"---\ntitle: 命令行工具--rsync\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [rsync 用法教程](https://www.ruanyifeng.com/blog/2020/08/rsync.html)\n","slug":"Computers/OS/Linux/rsync","published":0,"updated":"2021-07-29T06:46:00.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4p0054iu9kbiop74oi","content":"<h2 id=\"1-rsync-用法教程\"><a href=\"#1-rsync-用法教程\" class=\"headerlink\" title=\"1. rsync 用法教程\"></a>1. <a href=\"https://www.ruanyifeng.com/blog/2020/08/rsync.html\">rsync 用法教程</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-rsync-用法教程\"><a href=\"#1-rsync-用法教程\" class=\"headerlink\" title=\"1. rsync 用法教程\"></a>1. <a href=\"https://www.ruanyifeng.com/blog/2020/08/rsync.html\">rsync 用法教程</a></h2>"},{"title":"C++","abbrlink":15279,"date":"2021-07-29T02:03:00.000Z","_content":"## 1. [C++那些事](https://light-city.club/sc/basic_content/const/)\n\n## 2. [awesome-cpp](https://github.com/fffaraz/awesome-cpp)\n\n## 3. [computer-science](https://github.com/ossu/computer-science)\n","source":"_posts/iOS/Languages/CAlians/C++/C++.md","raw":"---\ntitle: C++\nabbrlink: 15279\ndate: 2021-07-29 10:03:00\ntags:\n---\n## 1. [C++那些事](https://light-city.club/sc/basic_content/const/)\n\n## 2. [awesome-cpp](https://github.com/fffaraz/awesome-cpp)\n\n## 3. [computer-science](https://github.com/ossu/computer-science)\n","slug":"iOS/Languages/CAlians/C++/C++","published":1,"updated":"2021-09-16T06:42:30.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4p0055iu9k47450gde","content":"<h2 id=\"1-C-那些事\"><a href=\"#1-C-那些事\" class=\"headerlink\" title=\"1. C++那些事\"></a>1. <a href=\"https://light-city.club/sc/basic_content/const/\">C++那些事</a></h2><h2 id=\"2-awesome-cpp\"><a href=\"#2-awesome-cpp\" class=\"headerlink\" title=\"2. awesome-cpp\"></a>2. <a href=\"https://github.com/fffaraz/awesome-cpp\">awesome-cpp</a></h2><h2 id=\"3-computer-science\"><a href=\"#3-computer-science\" class=\"headerlink\" title=\"3. computer-science\"></a>3. <a href=\"https://github.com/ossu/computer-science\">computer-science</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-C-那些事\"><a href=\"#1-C-那些事\" class=\"headerlink\" title=\"1. C++那些事\"></a>1. <a href=\"https://light-city.club/sc/basic_content/const/\">C++那些事</a></h2><h2 id=\"2-awesome-cpp\"><a href=\"#2-awesome-cpp\" class=\"headerlink\" title=\"2. awesome-cpp\"></a>2. <a href=\"https://github.com/fffaraz/awesome-cpp\">awesome-cpp</a></h2><h2 id=\"3-computer-science\"><a href=\"#3-computer-science\" class=\"headerlink\" title=\"3. computer-science\"></a>3. <a href=\"https://github.com/ossu/computer-science\">computer-science</a></h2>"},{"title":"iOS 之App Store Connect API","abbrlink":1773,"date":"2021-07-29T02:08:02.000Z","_content":"## App Store Connect API\n\n1、[App Store Connect API 使用指南](https://www.dazhuanlan.com/2019/10/08/5d9c54747a775/)\n\n2、[App Store Connect的新特性](https://blog.csdn.net/TuGeLe/article/details/81037228)\n\n3、[如何自动化获取AppStore的销售和趋势报告](https://juejin.im/post/5df75e38f265da33e0568f29)\n","source":"_posts/iOS/ProjectManager/CI/Applestore Connect/App Store Connect API.md","raw":"---\ntitle: iOS 之App Store Connect API\nabbrlink: 1773\ndate: 2021-07-29 10:08:02\ntags:\n---\n## App Store Connect API\n\n1、[App Store Connect API 使用指南](https://www.dazhuanlan.com/2019/10/08/5d9c54747a775/)\n\n2、[App Store Connect的新特性](https://blog.csdn.net/TuGeLe/article/details/81037228)\n\n3、[如何自动化获取AppStore的销售和趋势报告](https://juejin.im/post/5df75e38f265da33e0568f29)\n","slug":"iOS/ProjectManager/CI/Applestore Connect/App Store Connect API","published":1,"updated":"2021-07-29T06:46:00.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4q0056iu9k8mn8djnj","content":"<h2 id=\"App-Store-Connect-API\"><a href=\"#App-Store-Connect-API\" class=\"headerlink\" title=\"App Store Connect API\"></a>App Store Connect API</h2><p>1、<a href=\"https://www.dazhuanlan.com/2019/10/08/5d9c54747a775/\">App Store Connect API 使用指南</a></p>\n<p>2、<a href=\"https://blog.csdn.net/TuGeLe/article/details/81037228\">App Store Connect的新特性</a></p>\n<p>3、<a href=\"https://juejin.im/post/5df75e38f265da33e0568f29\">如何自动化获取AppStore的销售和趋势报告</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"App-Store-Connect-API\"><a href=\"#App-Store-Connect-API\" class=\"headerlink\" title=\"App Store Connect API\"></a>App Store Connect API</h2><p>1、<a href=\"https://www.dazhuanlan.com/2019/10/08/5d9c54747a775/\">App Store Connect API 使用指南</a></p>\n<p>2、<a href=\"https://blog.csdn.net/TuGeLe/article/details/81037228\">App Store Connect的新特性</a></p>\n<p>3、<a href=\"https://juejin.im/post/5df75e38f265da33e0568f29\">如何自动化获取AppStore的销售和趋势报告</a></p>\n"},{"title":"jira","abbrlink":35880,"date":"2021-07-29T02:24:00.000Z","_content":"","source":"_posts/iOS/ProjectManager/CI/Jira/Jira.md","raw":"---\ntitle: jira\nabbrlink: 35880\ndate: 2021-07-29 10:24:00\ntags:\n---\n","slug":"iOS/ProjectManager/CI/Jira/Jira","published":1,"updated":"2021-07-29T06:45:57.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4q0057iu9k4jwfbgce","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Jenkins","abbrlink":"9a7f448e","date":"2021-04-20T13:36:02.000Z","_content":"\n## [Jenkins](https://jenkins.io/doc/)\n\n## [Jenkins中文文档](https://www.w3cschool.cn/jenkins/)\n\n## [使用 Generic Webhook Trigger 触发 Jenkins 多分支流水线自动化构建](https://xie.infoq.cn/article/600f642fcb26f0c280a7acf59)\n\n## [使用Generic Webhook Trigger插件实现Jenkins+WebHooks（码云）持续集成--指定具体项目和分支进行集成](https://blog.csdn.net/xlgen157387/article/details/76216351)\n","source":"_posts/iOS/ProjectManager/CI/Jenkins/Jenkins.md","raw":"---\ntitle: Jenkins\nabbrlink: 9a7f448e\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## [Jenkins](https://jenkins.io/doc/)\n\n## [Jenkins中文文档](https://www.w3cschool.cn/jenkins/)\n\n## [使用 Generic Webhook Trigger 触发 Jenkins 多分支流水线自动化构建](https://xie.infoq.cn/article/600f642fcb26f0c280a7acf59)\n\n## [使用Generic Webhook Trigger插件实现Jenkins+WebHooks（码云）持续集成--指定具体项目和分支进行集成](https://blog.csdn.net/xlgen157387/article/details/76216351)\n","slug":"iOS/ProjectManager/CI/Jenkins/Jenkins","published":1,"updated":"2021-07-29T06:46:00.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4r0058iu9k41vtgsgf","content":"<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a><a href=\"https://jenkins.io/doc/\">Jenkins</a></h2><h2 id=\"Jenkins中文文档\"><a href=\"#Jenkins中文文档\" class=\"headerlink\" title=\"Jenkins中文文档\"></a><a href=\"https://www.w3cschool.cn/jenkins/\">Jenkins中文文档</a></h2><h2 id=\"使用-Generic-Webhook-Trigger-触发-Jenkins-多分支流水线自动化构建\"><a href=\"#使用-Generic-Webhook-Trigger-触发-Jenkins-多分支流水线自动化构建\" class=\"headerlink\" title=\"使用 Generic Webhook Trigger 触发 Jenkins 多分支流水线自动化构建\"></a><a href=\"https://xie.infoq.cn/article/600f642fcb26f0c280a7acf59\">使用 Generic Webhook Trigger 触发 Jenkins 多分支流水线自动化构建</a></h2><h2 id=\"使用Generic-Webhook-Trigger插件实现Jenkins-WebHooks（码云）持续集成–指定具体项目和分支进行集成\"><a href=\"#使用Generic-Webhook-Trigger插件实现Jenkins-WebHooks（码云）持续集成–指定具体项目和分支进行集成\" class=\"headerlink\" title=\"使用Generic Webhook Trigger插件实现Jenkins+WebHooks（码云）持续集成–指定具体项目和分支进行集成\"></a><a href=\"https://blog.csdn.net/xlgen157387/article/details/76216351\">使用Generic Webhook Trigger插件实现Jenkins+WebHooks（码云）持续集成–指定具体项目和分支进行集成</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a><a href=\"https://jenkins.io/doc/\">Jenkins</a></h2><h2 id=\"Jenkins中文文档\"><a href=\"#Jenkins中文文档\" class=\"headerlink\" title=\"Jenkins中文文档\"></a><a href=\"https://www.w3cschool.cn/jenkins/\">Jenkins中文文档</a></h2><h2 id=\"使用-Generic-Webhook-Trigger-触发-Jenkins-多分支流水线自动化构建\"><a href=\"#使用-Generic-Webhook-Trigger-触发-Jenkins-多分支流水线自动化构建\" class=\"headerlink\" title=\"使用 Generic Webhook Trigger 触发 Jenkins 多分支流水线自动化构建\"></a><a href=\"https://xie.infoq.cn/article/600f642fcb26f0c280a7acf59\">使用 Generic Webhook Trigger 触发 Jenkins 多分支流水线自动化构建</a></h2><h2 id=\"使用Generic-Webhook-Trigger插件实现Jenkins-WebHooks（码云）持续集成–指定具体项目和分支进行集成\"><a href=\"#使用Generic-Webhook-Trigger插件实现Jenkins-WebHooks（码云）持续集成–指定具体项目和分支进行集成\" class=\"headerlink\" title=\"使用Generic Webhook Trigger插件实现Jenkins+WebHooks（码云）持续集成–指定具体项目和分支进行集成\"></a><a href=\"https://blog.csdn.net/xlgen157387/article/details/76216351\">使用Generic Webhook Trigger插件实现Jenkins+WebHooks（码云）持续集成–指定具体项目和分支进行集成</a></h2>"},{"title":"Dart","abbrlink":"36461f30","date":"2021-04-20T13:36:02.000Z","_content":"\n## [Json 解析](https://juejin.cn/post/6844903648254754823#heading-6)\n","source":"_posts/iOS/Webs/Flutter/Dart/Dart.md","raw":"---\ntitle: Dart\nabbrlink: 36461f30\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## [Json 解析](https://juejin.cn/post/6844903648254754823#heading-6)\n","slug":"iOS/Webs/Flutter/Dart/Dart","published":1,"updated":"2021-07-29T06:45:59.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4s0059iu9kg50h9avt","content":"<h2 id=\"Json-解析\"><a href=\"#Json-解析\" class=\"headerlink\" title=\"Json 解析\"></a><a href=\"https://juejin.cn/post/6844903648254754823#heading-6\">Json 解析</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Json-解析\"><a href=\"#Json-解析\" class=\"headerlink\" title=\"Json 解析\"></a><a href=\"https://juejin.cn/post/6844903648254754823#heading-6\">Json 解析</a></h2>"},{"title":"iOS之 布局","abbrlink":44814,"date":"2021-04-20T13:36:02.000Z","_content":"\n## 1. [自动布局 Auto Layout (原理篇)](https://www.jianshu.com/p/3a872a0bfe11)\n\n## 2. [对齐矩形](https://juejin.cn/post/6844903438690549768)\n\n## 3. [iOS 的渲染机制以及 UIView 的自动布局流程](https://www.dazhuanlan.com/2020/01/31/5e33cdfb28a2a/)\n\n## 4. [WWDC 2018：高性能 Auto Layout](https://juejin.cn/post/6844903619360194568)\n","source":"_posts/学习笔记/iOS/iOS之UI界面/UI布局/布局.md","raw":"---\ntitle: iOS之 布局\nabbrlink: 44814\ndate: 2021-04-20 21:36:02\ntags:\n---\n\n## 1. [自动布局 Auto Layout (原理篇)](https://www.jianshu.com/p/3a872a0bfe11)\n\n## 2. [对齐矩形](https://juejin.cn/post/6844903438690549768)\n\n## 3. [iOS 的渲染机制以及 UIView 的自动布局流程](https://www.dazhuanlan.com/2020/01/31/5e33cdfb28a2a/)\n\n## 4. [WWDC 2018：高性能 Auto Layout](https://juejin.cn/post/6844903619360194568)\n","slug":"学习笔记/iOS/iOS之UI界面/UI布局/布局","published":1,"updated":"2021-09-22T06:56:40.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4s005aiu9k2ytlfiym","content":"<h2 id=\"1-自动布局-Auto-Layout-原理篇\"><a href=\"#1-自动布局-Auto-Layout-原理篇\" class=\"headerlink\" title=\"1. 自动布局 Auto Layout (原理篇)\"></a>1. <a href=\"https://www.jianshu.com/p/3a872a0bfe11\">自动布局 Auto Layout (原理篇)</a></h2><h2 id=\"2-对齐矩形\"><a href=\"#2-对齐矩形\" class=\"headerlink\" title=\"2. 对齐矩形\"></a>2. <a href=\"https://juejin.cn/post/6844903438690549768\">对齐矩形</a></h2><h2 id=\"3-iOS-的渲染机制以及-UIView-的自动布局流程\"><a href=\"#3-iOS-的渲染机制以及-UIView-的自动布局流程\" class=\"headerlink\" title=\"3. iOS 的渲染机制以及 UIView 的自动布局流程\"></a>3. <a href=\"https://www.dazhuanlan.com/2020/01/31/5e33cdfb28a2a/\">iOS 的渲染机制以及 UIView 的自动布局流程</a></h2><h2 id=\"4-WWDC-2018：高性能-Auto-Layout\"><a href=\"#4-WWDC-2018：高性能-Auto-Layout\" class=\"headerlink\" title=\"4. WWDC 2018：高性能 Auto Layout\"></a>4. <a href=\"https://juejin.cn/post/6844903619360194568\">WWDC 2018：高性能 Auto Layout</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-自动布局-Auto-Layout-原理篇\"><a href=\"#1-自动布局-Auto-Layout-原理篇\" class=\"headerlink\" title=\"1. 自动布局 Auto Layout (原理篇)\"></a>1. <a href=\"https://www.jianshu.com/p/3a872a0bfe11\">自动布局 Auto Layout (原理篇)</a></h2><h2 id=\"2-对齐矩形\"><a href=\"#2-对齐矩形\" class=\"headerlink\" title=\"2. 对齐矩形\"></a>2. <a href=\"https://juejin.cn/post/6844903438690549768\">对齐矩形</a></h2><h2 id=\"3-iOS-的渲染机制以及-UIView-的自动布局流程\"><a href=\"#3-iOS-的渲染机制以及-UIView-的自动布局流程\" class=\"headerlink\" title=\"3. iOS 的渲染机制以及 UIView 的自动布局流程\"></a>3. <a href=\"https://www.dazhuanlan.com/2020/01/31/5e33cdfb28a2a/\">iOS 的渲染机制以及 UIView 的自动布局流程</a></h2><h2 id=\"4-WWDC-2018：高性能-Auto-Layout\"><a href=\"#4-WWDC-2018：高性能-Auto-Layout\" class=\"headerlink\" title=\"4. WWDC 2018：高性能 Auto Layout\"></a>4. <a href=\"https://juejin.cn/post/6844903619360194568\">WWDC 2018：高性能 Auto Layout</a></h2>"},{"title":"C++","abbrlink":15280,"date":"2021-08-24T02:37:00.000Z","_content":"\n## 1. 概念\n\n表达式\n\n引用、指针\n\n函数\n\n类\n\n标准库：\n\nIO\n\n顺序容器\n\n泛型算法\n\n关联容器\n\n动态内存\n\n拷贝控制\n\n重载运算符 && 类型转换\n\n面向对象程序设计\n\n模板与泛型编程\n\n标准库特殊设施：\n\ntuple、 bitset、regex、随机数、IO\n\n大型程序：异常、命名空间、多重继承、虚继承\n\n特殊工具与技术：\n\n控制内存分配、运行时类型、枚举类型、类成员指针、嵌套类、union、局部类\n\n固有的不可移植特性\n\n资源和智能指针\n\n标准库容器\n\n标准库算法\n\n类型推断\n\n循环\n\nRAII: 资源获取即初始化\n\nconstexpr\n\n移动语义\n\nlambda\n\n异常\n\n## 2. 编译原理\n\n编译原理、\n\n运行\n\ncmake\n\n工程化管理\n\n组件化\n\n依赖管理\n","source":"_posts/iOS/Languages/CAlians/C++/Guidelines/Guidelines.md","raw":"---\ntitle: C++\nabbrlink: 15280\ndate: 2021-08-24 10:37:00\ntags:\n---\n\n## 1. 概念\n\n表达式\n\n引用、指针\n\n函数\n\n类\n\n标准库：\n\nIO\n\n顺序容器\n\n泛型算法\n\n关联容器\n\n动态内存\n\n拷贝控制\n\n重载运算符 && 类型转换\n\n面向对象程序设计\n\n模板与泛型编程\n\n标准库特殊设施：\n\ntuple、 bitset、regex、随机数、IO\n\n大型程序：异常、命名空间、多重继承、虚继承\n\n特殊工具与技术：\n\n控制内存分配、运行时类型、枚举类型、类成员指针、嵌套类、union、局部类\n\n固有的不可移植特性\n\n资源和智能指针\n\n标准库容器\n\n标准库算法\n\n类型推断\n\n循环\n\nRAII: 资源获取即初始化\n\nconstexpr\n\n移动语义\n\nlambda\n\n异常\n\n## 2. 编译原理\n\n编译原理、\n\n运行\n\ncmake\n\n工程化管理\n\n组件化\n\n依赖管理\n","slug":"iOS/Languages/CAlians/C++/Guidelines/Guidelines","published":1,"updated":"2021-09-22T06:56:40.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4s005biu9kdrwg703s","content":"<h2 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1. 概念\"></a>1. 概念</h2><p>表达式</p>\n<p>引用、指针</p>\n<p>函数</p>\n<p>类</p>\n<p>标准库：</p>\n<p>IO</p>\n<p>顺序容器</p>\n<p>泛型算法</p>\n<p>关联容器</p>\n<p>动态内存</p>\n<p>拷贝控制</p>\n<p>重载运算符 &amp;&amp; 类型转换</p>\n<p>面向对象程序设计</p>\n<p>模板与泛型编程</p>\n<p>标准库特殊设施：</p>\n<p>tuple、 bitset、regex、随机数、IO</p>\n<p>大型程序：异常、命名空间、多重继承、虚继承</p>\n<p>特殊工具与技术：</p>\n<p>控制内存分配、运行时类型、枚举类型、类成员指针、嵌套类、union、局部类</p>\n<p>固有的不可移植特性</p>\n<p>资源和智能指针</p>\n<p>标准库容器</p>\n<p>标准库算法</p>\n<p>类型推断</p>\n<p>循环</p>\n<p>RAII: 资源获取即初始化</p>\n<p>constexpr</p>\n<p>移动语义</p>\n<p>lambda</p>\n<p>异常</p>\n<h2 id=\"2-编译原理\"><a href=\"#2-编译原理\" class=\"headerlink\" title=\"2. 编译原理\"></a>2. 编译原理</h2><p>编译原理、</p>\n<p>运行</p>\n<p>cmake</p>\n<p>工程化管理</p>\n<p>组件化</p>\n<p>依赖管理</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1. 概念\"></a>1. 概念</h2><p>表达式</p>\n<p>引用、指针</p>\n<p>函数</p>\n<p>类</p>\n<p>标准库：</p>\n<p>IO</p>\n<p>顺序容器</p>\n<p>泛型算法</p>\n<p>关联容器</p>\n<p>动态内存</p>\n<p>拷贝控制</p>\n<p>重载运算符 &amp;&amp; 类型转换</p>\n<p>面向对象程序设计</p>\n<p>模板与泛型编程</p>\n<p>标准库特殊设施：</p>\n<p>tuple、 bitset、regex、随机数、IO</p>\n<p>大型程序：异常、命名空间、多重继承、虚继承</p>\n<p>特殊工具与技术：</p>\n<p>控制内存分配、运行时类型、枚举类型、类成员指针、嵌套类、union、局部类</p>\n<p>固有的不可移植特性</p>\n<p>资源和智能指针</p>\n<p>标准库容器</p>\n<p>标准库算法</p>\n<p>类型推断</p>\n<p>循环</p>\n<p>RAII: 资源获取即初始化</p>\n<p>constexpr</p>\n<p>移动语义</p>\n<p>lambda</p>\n<p>异常</p>\n<h2 id=\"2-编译原理\"><a href=\"#2-编译原理\" class=\"headerlink\" title=\"2. 编译原理\"></a>2. 编译原理</h2><p>编译原理、</p>\n<p>运行</p>\n<p>cmake</p>\n<p>工程化管理</p>\n<p>组件化</p>\n<p>依赖管理</p>\n"},{"title":"FuncPtr","abbrlink":6268,"date":"2021-08-28T07:38:00.000Z","_content":"\n```cpp\n#include <iostream>\ntemplate <typename T>\nbool ascending(T x, T y) {\n    return x > y; \n}\ntemplate <typename T>\nbool descending(T x, T y) {\n    return x < y;\n}\ntemplate<typename T>\nvoid bubblesort(T *a, int n, bool(*cmpfunc)(T, T)){\n    bool sorted = false;\n    while(!sorted){\n        sorted = true;\n        for (int i=0; i<n-1; i++)\n            if (cmpfunc(a[i], a[i+1])) {\n                std::swap(a[i], a[i+1]);\n                sorted = false;\n            }\n        n--;\n    }\n}\n\nint main()\n{\n    int a[8] = {5,2,5,7,1,-3,99,56};\n    int b[8] = {5,2,5,7,1,-3,99,56};\n\n    bubblesort<int>(a, 8, ascending);\n\n    for (auto e:a) std::cout << e << \" \";\n    std::cout << std::endl;\n\n    bubblesort<int>(b, 8, descending);\n\n    for (auto e:b) std::cout << e << \" \";\n\n    return 0;\n}\n// -3 1 2 5 5 7 56 99 \n// 99 56 7 5 5 2 1 -3 [Finished in 0.4s]\n```\n\n设置默认函数\n\n```cpp\nvoid bubblesort(T *a, int n, bool(*cmpfunc)(T, T) = ascending)\n```\n","source":"_posts/iOS/Languages/CAlians/C++/Guidelines/FuncPtr.md","raw":"---\ntitle: FuncPtr\nabbrlink: 6268\ndate: 2021-08-28 15:38:00\ntags:\n---\n\n```cpp\n#include <iostream>\ntemplate <typename T>\nbool ascending(T x, T y) {\n    return x > y; \n}\ntemplate <typename T>\nbool descending(T x, T y) {\n    return x < y;\n}\ntemplate<typename T>\nvoid bubblesort(T *a, int n, bool(*cmpfunc)(T, T)){\n    bool sorted = false;\n    while(!sorted){\n        sorted = true;\n        for (int i=0; i<n-1; i++)\n            if (cmpfunc(a[i], a[i+1])) {\n                std::swap(a[i], a[i+1]);\n                sorted = false;\n            }\n        n--;\n    }\n}\n\nint main()\n{\n    int a[8] = {5,2,5,7,1,-3,99,56};\n    int b[8] = {5,2,5,7,1,-3,99,56};\n\n    bubblesort<int>(a, 8, ascending);\n\n    for (auto e:a) std::cout << e << \" \";\n    std::cout << std::endl;\n\n    bubblesort<int>(b, 8, descending);\n\n    for (auto e:b) std::cout << e << \" \";\n\n    return 0;\n}\n// -3 1 2 5 5 7 56 99 \n// 99 56 7 5 5 2 1 -3 [Finished in 0.4s]\n```\n\n设置默认函数\n\n```cpp\nvoid bubblesort(T *a, int n, bool(*cmpfunc)(T, T) = ascending)\n```\n","slug":"iOS/Languages/CAlians/C++/Guidelines/FuncPtr","published":1,"updated":"2021-09-22T06:56:40.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4t005ciu9k514ua4g8","content":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ascending</span><span class=\"params\">(T x, T y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &gt; y; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">descending</span><span class=\"params\">(T x, T y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &lt; y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubblesort</span><span class=\"params\">(T *a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">bool</span>(*cmpfunc)(T, T))</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> sorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!sorted)&#123;</span><br><span class=\"line\">        sorted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n<span class=\"number\">-1</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">cmpfunc</span>(a[i], a[i+<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                std::<span class=\"built_in\">swap</span>(a[i], a[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">                sorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">8</span>] = &#123;<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">-3</span>,<span class=\"number\">99</span>,<span class=\"number\">56</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b[<span class=\"number\">8</span>] = &#123;<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">-3</span>,<span class=\"number\">99</span>,<span class=\"number\">56</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    bubblesort&lt;<span class=\"keyword\">int</span>&gt;(a, <span class=\"number\">8</span>, ascending);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> e:a) std::cout &lt;&lt; e &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    bubblesort&lt;<span class=\"keyword\">int</span>&gt;(b, <span class=\"number\">8</span>, descending);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> e:b) std::cout &lt;&lt; e &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// -3 1 2 5 5 7 56 99 </span></span><br><span class=\"line\"><span class=\"comment\">// 99 56 7 5 5 2 1 -3 [Finished in 0.4s]</span></span><br></pre></td></tr></table></figure>\n\n<p>设置默认函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubblesort</span><span class=\"params\">(T *a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">bool</span>(*cmpfunc)(T, T) = ascending)</span></span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ascending</span><span class=\"params\">(T x, T y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &gt; y; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">descending</span><span class=\"params\">(T x, T y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x &lt; y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubblesort</span><span class=\"params\">(T *a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">bool</span>(*cmpfunc)(T, T))</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> sorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!sorted)&#123;</span><br><span class=\"line\">        sorted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;n<span class=\"number\">-1</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">cmpfunc</span>(a[i], a[i+<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                std::<span class=\"built_in\">swap</span>(a[i], a[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">                sorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">8</span>] = &#123;<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">-3</span>,<span class=\"number\">99</span>,<span class=\"number\">56</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b[<span class=\"number\">8</span>] = &#123;<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">-3</span>,<span class=\"number\">99</span>,<span class=\"number\">56</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    bubblesort&lt;<span class=\"keyword\">int</span>&gt;(a, <span class=\"number\">8</span>, ascending);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> e:a) std::cout &lt;&lt; e &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    std::cout &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    bubblesort&lt;<span class=\"keyword\">int</span>&gt;(b, <span class=\"number\">8</span>, descending);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> e:b) std::cout &lt;&lt; e &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// -3 1 2 5 5 7 56 99 </span></span><br><span class=\"line\"><span class=\"comment\">// 99 56 7 5 5 2 1 -3 [Finished in 0.4s]</span></span><br></pre></td></tr></table></figure>\n\n<p>设置默认函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubblesort</span><span class=\"params\">(T *a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">bool</span>(*cmpfunc)(T, T) = ascending)</span></span></span><br></pre></td></tr></table></figure>\n"},{"title":"C++ using","abbrlink":9168,"date":"2021-08-28T06:18:00.000Z","_content":"\n## using 用法\n\n```c++\n#include <iostream>\n\nusing namespace std;    // 用法1\n\nclass ClassOne \n{\npublic:\n int w;\nprotected:\n int a;\n};\n\nclass ClassTwo\n{\npublic:\n using ModuleType = ClassOne;   // 用法2\n};\n\ntemplate <typename ClassType>class ClassThree : private ClassType\n{\npublic:\n using typename ClassType::ModuleType;    // 用法3\n ModuleType m;\n ClassThree() = default;\n virtual ~ClassThree() = default;\n};\n\nvoid main()\n{\n ClassThree<ClassTwo>::ModuleType a;\n}\n```\n\n在上面代码中，一共有三处使用了 using，它们的作用为：\n\n* 用法1: 引入命名空间\n* 用法2: 指定别名\n* 用法3: 在子类中引用基类的成员\n","source":"_posts/iOS/Languages/CAlians/C++/Guidelines/using.md","raw":"---\ntitle: C++ using\nabbrlink: 9168\ndate: 2021-08-28 14:18:00\ntags:\n---\n\n## using 用法\n\n```c++\n#include <iostream>\n\nusing namespace std;    // 用法1\n\nclass ClassOne \n{\npublic:\n int w;\nprotected:\n int a;\n};\n\nclass ClassTwo\n{\npublic:\n using ModuleType = ClassOne;   // 用法2\n};\n\ntemplate <typename ClassType>class ClassThree : private ClassType\n{\npublic:\n using typename ClassType::ModuleType;    // 用法3\n ModuleType m;\n ClassThree() = default;\n virtual ~ClassThree() = default;\n};\n\nvoid main()\n{\n ClassThree<ClassTwo>::ModuleType a;\n}\n```\n\n在上面代码中，一共有三处使用了 using，它们的作用为：\n\n* 用法1: 引入命名空间\n* 用法2: 指定别名\n* 用法3: 在子类中引用基类的成员\n","slug":"iOS/Languages/CAlians/C++/Guidelines/using","published":1,"updated":"2021-09-22T06:56:40.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4t005diu9k6r7d0qgk","content":"<h2 id=\"using-用法\"><a href=\"#using-用法\" class=\"headerlink\" title=\"using 用法\"></a>using 用法</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;    <span class=\"comment\">// 用法1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassOne</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"> <span class=\"keyword\">int</span> w;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassTwo</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"> <span class=\"keyword\">using</span> ModuleType = ClassOne;   <span class=\"comment\">// 用法2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> ClassType&gt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassThree</span> :</span> <span class=\"keyword\">private</span> ClassType</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"> <span class=\"keyword\">using</span> <span class=\"keyword\">typename</span> ClassType::ModuleType;    <span class=\"comment\">// 用法3</span></span><br><span class=\"line\"> ModuleType m;</span><br><span class=\"line\"> <span class=\"built_in\">ClassThree</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"> <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">ClassThree</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> ClassThree&lt;ClassTwo&gt;::ModuleType a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面代码中，一共有三处使用了 using，它们的作用为：</p>\n<ul>\n<li>用法1: 引入命名空间</li>\n<li>用法2: 指定别名</li>\n<li>用法3: 在子类中引用基类的成员</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"using-用法\"><a href=\"#using-用法\" class=\"headerlink\" title=\"using 用法\"></a>using 用法</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;    <span class=\"comment\">// 用法1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassOne</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"> <span class=\"keyword\">int</span> w;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\"> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassTwo</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"> <span class=\"keyword\">using</span> ModuleType = ClassOne;   <span class=\"comment\">// 用法2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> ClassType&gt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassThree</span> :</span> <span class=\"keyword\">private</span> ClassType</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"> <span class=\"keyword\">using</span> <span class=\"keyword\">typename</span> ClassType::ModuleType;    <span class=\"comment\">// 用法3</span></span><br><span class=\"line\"> ModuleType m;</span><br><span class=\"line\"> <span class=\"built_in\">ClassThree</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"> <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">ClassThree</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> ClassThree&lt;ClassTwo&gt;::ModuleType a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面代码中，一共有三处使用了 using，它们的作用为：</p>\n<ul>\n<li>用法1: 引入命名空间</li>\n<li>用法2: 指定别名</li>\n<li>用法3: 在子类中引用基类的成员</li>\n</ul>\n"},{"title":"iOS之KSCrahs 原理","abbrlink":"e91ba3ab","date":"2021-04-20T13:36:02.000Z","_content":"## 1. [KSCrash崩溃收集原理浅析](https://www.it610.com/article/1191455498289913856.htm)\n","source":"_posts/iOS/Performance/KSCrash/Princeples.md","raw":"---\ntitle: iOS之KSCrahs 原理\nabbrlink: e91ba3ab\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. [KSCrash崩溃收集原理浅析](https://www.it610.com/article/1191455498289913856.htm)\n","slug":"iOS/Performance/KSCrash/Princeples","published":1,"updated":"2021-07-29T06:46:00.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4u005eiu9kcdqv0eta","content":"<h2 id=\"1-KSCrash崩溃收集原理浅析\"><a href=\"#1-KSCrash崩溃收集原理浅析\" class=\"headerlink\" title=\"1. KSCrash崩溃收集原理浅析\"></a>1. <a href=\"https://www.it610.com/article/1191455498289913856.htm\">KSCrash崩溃收集原理浅析</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-KSCrash崩溃收集原理浅析\"><a href=\"#1-KSCrash崩溃收集原理浅析\" class=\"headerlink\" title=\"1. KSCrash崩溃收集原理浅析\"></a>1. <a href=\"https://www.it610.com/article/1191455498289913856.htm\">KSCrash崩溃收集原理浅析</a></h2>"},{"title":"iOS编程语言之OC 进阶","abbrlink":"9cae0e7a","date":"2021-04-20T13:36:02.000Z","_content":"## 1. [iOS底层原理总结 - 探寻OC对象的本质](https://juejin.cn/post/6844903588150378509)\n\n## 2.[iOS底层原理总结 - 探寻KVO本质](https://juejin.cn/post/6844903593925935117)\n\n## 3. [深入理解Objective-C：Category](https://tech.meituan.com/2015/03/03/diveintocategory.html)\n\n## 4. [iOS开发之三大计时器:NSTimer、DispatchSourceTimer、CADisplayLink](https://blog.csdn.net/guoyongming925/article/details/110224064)\n\n### 4.1 NSTimer\n\n#### 4.1.1 循环引用处理\n\n1. 合适时机释放；\n2. 弱引用 target\n   代理+弱引用\n   中间对象，弱引用 target\n\n* [iOS中解决NSTimer循环引用的三种方式](https://segmentfault.com/a/1190000019615349)\n* [NSTimer循环引用的几种解决方案](https://www.cnblogs.com/jukaiit/p/10599021.html)\n* [ios定时器NSTimer中的循环引用](https://www.jianshu.com/p/a51c6dd12587)\n\n## 5. [深入理解RunLoop](https://blog.ibireme.com/2015/05/18/runloop/)\n\n## 6. [轻松过面：一文全解iOS通知机制(经典收藏)](https://juejin.cn/post/6844904082516213768#heading-27)\n\n## 7. [深入理解Objective-C：Category](https://tech.meituan.com/2015/03/03/diveintocategory.html)\n\n## 8. [iOS底层原理：weak的实现原理](https://juejin.cn/post/6844904101839372295)\n\n## 9 [iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)](https://juejin.cn/post/6844903600968171533#heading-5)\n","source":"_posts/iOS/Languages/Objective-C/OCAdvance.md","raw":"---\ntitle: iOS编程语言之OC 进阶\nabbrlink: 9cae0e7a\ndate: 2021-04-20 21:36:02\ntags:\n---\n## 1. [iOS底层原理总结 - 探寻OC对象的本质](https://juejin.cn/post/6844903588150378509)\n\n## 2.[iOS底层原理总结 - 探寻KVO本质](https://juejin.cn/post/6844903593925935117)\n\n## 3. [深入理解Objective-C：Category](https://tech.meituan.com/2015/03/03/diveintocategory.html)\n\n## 4. [iOS开发之三大计时器:NSTimer、DispatchSourceTimer、CADisplayLink](https://blog.csdn.net/guoyongming925/article/details/110224064)\n\n### 4.1 NSTimer\n\n#### 4.1.1 循环引用处理\n\n1. 合适时机释放；\n2. 弱引用 target\n   代理+弱引用\n   中间对象，弱引用 target\n\n* [iOS中解决NSTimer循环引用的三种方式](https://segmentfault.com/a/1190000019615349)\n* [NSTimer循环引用的几种解决方案](https://www.cnblogs.com/jukaiit/p/10599021.html)\n* [ios定时器NSTimer中的循环引用](https://www.jianshu.com/p/a51c6dd12587)\n\n## 5. [深入理解RunLoop](https://blog.ibireme.com/2015/05/18/runloop/)\n\n## 6. [轻松过面：一文全解iOS通知机制(经典收藏)](https://juejin.cn/post/6844904082516213768#heading-27)\n\n## 7. [深入理解Objective-C：Category](https://tech.meituan.com/2015/03/03/diveintocategory.html)\n\n## 8. [iOS底层原理：weak的实现原理](https://juejin.cn/post/6844904101839372295)\n\n## 9 [iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)](https://juejin.cn/post/6844903600968171533#heading-5)\n","slug":"iOS/Languages/Objective-C/OCAdvance","published":1,"updated":"2021-07-29T06:45:57.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn4y005fiu9k8p6pc591","content":"<h2 id=\"1-iOS底层原理总结-探寻OC对象的本质\"><a href=\"#1-iOS底层原理总结-探寻OC对象的本质\" class=\"headerlink\" title=\"1. iOS底层原理总结 - 探寻OC对象的本质\"></a>1. <a href=\"https://juejin.cn/post/6844903588150378509\">iOS底层原理总结 - 探寻OC对象的本质</a></h2><h2 id=\"2-iOS底层原理总结-探寻KVO本质\"><a href=\"#2-iOS底层原理总结-探寻KVO本质\" class=\"headerlink\" title=\"2.iOS底层原理总结 - 探寻KVO本质\"></a>2.<a href=\"https://juejin.cn/post/6844903593925935117\">iOS底层原理总结 - 探寻KVO本质</a></h2><h2 id=\"3-深入理解Objective-C：Category\"><a href=\"#3-深入理解Objective-C：Category\" class=\"headerlink\" title=\"3. 深入理解Objective-C：Category\"></a>3. <a href=\"https://tech.meituan.com/2015/03/03/diveintocategory.html\">深入理解Objective-C：Category</a></h2><h2 id=\"4-iOS开发之三大计时器-NSTimer、DispatchSourceTimer、CADisplayLink\"><a href=\"#4-iOS开发之三大计时器-NSTimer、DispatchSourceTimer、CADisplayLink\" class=\"headerlink\" title=\"4. iOS开发之三大计时器:NSTimer、DispatchSourceTimer、CADisplayLink\"></a>4. <a href=\"https://blog.csdn.net/guoyongming925/article/details/110224064\">iOS开发之三大计时器:NSTimer、DispatchSourceTimer、CADisplayLink</a></h2><h3 id=\"4-1-NSTimer\"><a href=\"#4-1-NSTimer\" class=\"headerlink\" title=\"4.1 NSTimer\"></a>4.1 NSTimer</h3><h4 id=\"4-1-1-循环引用处理\"><a href=\"#4-1-1-循环引用处理\" class=\"headerlink\" title=\"4.1.1 循环引用处理\"></a>4.1.1 循环引用处理</h4><ol>\n<li>合适时机释放；</li>\n<li>弱引用 target<br>代理+弱引用<br>中间对象，弱引用 target</li>\n</ol>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000019615349\">iOS中解决NSTimer循环引用的三种方式</a></li>\n<li><a href=\"https://www.cnblogs.com/jukaiit/p/10599021.html\">NSTimer循环引用的几种解决方案</a></li>\n<li><a href=\"https://www.jianshu.com/p/a51c6dd12587\">ios定时器NSTimer中的循环引用</a></li>\n</ul>\n<h2 id=\"5-深入理解RunLoop\"><a href=\"#5-深入理解RunLoop\" class=\"headerlink\" title=\"5. 深入理解RunLoop\"></a>5. <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">深入理解RunLoop</a></h2><h2 id=\"6-轻松过面：一文全解iOS通知机制-经典收藏\"><a href=\"#6-轻松过面：一文全解iOS通知机制-经典收藏\" class=\"headerlink\" title=\"6. 轻松过面：一文全解iOS通知机制(经典收藏)\"></a>6. <a href=\"https://juejin.cn/post/6844904082516213768#heading-27\">轻松过面：一文全解iOS通知机制(经典收藏)</a></h2><h2 id=\"7-深入理解Objective-C：Category\"><a href=\"#7-深入理解Objective-C：Category\" class=\"headerlink\" title=\"7. 深入理解Objective-C：Category\"></a>7. <a href=\"https://tech.meituan.com/2015/03/03/diveintocategory.html\">深入理解Objective-C：Category</a></h2><h2 id=\"8-iOS底层原理：weak的实现原理\"><a href=\"#8-iOS底层原理：weak的实现原理\" class=\"headerlink\" title=\"8. iOS底层原理：weak的实现原理\"></a>8. <a href=\"https://juejin.cn/post/6844904101839372295\">iOS底层原理：weak的实现原理</a></h2><h2 id=\"9-iOS开发·runtime原理与实践-消息转发篇-Message-Forwarding-消息机制，方法未实现-API不兼容奔溃，模拟多继承\"><a href=\"#9-iOS开发·runtime原理与实践-消息转发篇-Message-Forwarding-消息机制，方法未实现-API不兼容奔溃，模拟多继承\" class=\"headerlink\" title=\"9 iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)\"></a>9 <a href=\"https://juejin.cn/post/6844903600968171533#heading-5\">iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-iOS底层原理总结-探寻OC对象的本质\"><a href=\"#1-iOS底层原理总结-探寻OC对象的本质\" class=\"headerlink\" title=\"1. iOS底层原理总结 - 探寻OC对象的本质\"></a>1. <a href=\"https://juejin.cn/post/6844903588150378509\">iOS底层原理总结 - 探寻OC对象的本质</a></h2><h2 id=\"2-iOS底层原理总结-探寻KVO本质\"><a href=\"#2-iOS底层原理总结-探寻KVO本质\" class=\"headerlink\" title=\"2.iOS底层原理总结 - 探寻KVO本质\"></a>2.<a href=\"https://juejin.cn/post/6844903593925935117\">iOS底层原理总结 - 探寻KVO本质</a></h2><h2 id=\"3-深入理解Objective-C：Category\"><a href=\"#3-深入理解Objective-C：Category\" class=\"headerlink\" title=\"3. 深入理解Objective-C：Category\"></a>3. <a href=\"https://tech.meituan.com/2015/03/03/diveintocategory.html\">深入理解Objective-C：Category</a></h2><h2 id=\"4-iOS开发之三大计时器-NSTimer、DispatchSourceTimer、CADisplayLink\"><a href=\"#4-iOS开发之三大计时器-NSTimer、DispatchSourceTimer、CADisplayLink\" class=\"headerlink\" title=\"4. iOS开发之三大计时器:NSTimer、DispatchSourceTimer、CADisplayLink\"></a>4. <a href=\"https://blog.csdn.net/guoyongming925/article/details/110224064\">iOS开发之三大计时器:NSTimer、DispatchSourceTimer、CADisplayLink</a></h2><h3 id=\"4-1-NSTimer\"><a href=\"#4-1-NSTimer\" class=\"headerlink\" title=\"4.1 NSTimer\"></a>4.1 NSTimer</h3><h4 id=\"4-1-1-循环引用处理\"><a href=\"#4-1-1-循环引用处理\" class=\"headerlink\" title=\"4.1.1 循环引用处理\"></a>4.1.1 循环引用处理</h4><ol>\n<li>合适时机释放；</li>\n<li>弱引用 target<br>代理+弱引用<br>中间对象，弱引用 target</li>\n</ol>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000019615349\">iOS中解决NSTimer循环引用的三种方式</a></li>\n<li><a href=\"https://www.cnblogs.com/jukaiit/p/10599021.html\">NSTimer循环引用的几种解决方案</a></li>\n<li><a href=\"https://www.jianshu.com/p/a51c6dd12587\">ios定时器NSTimer中的循环引用</a></li>\n</ul>\n<h2 id=\"5-深入理解RunLoop\"><a href=\"#5-深入理解RunLoop\" class=\"headerlink\" title=\"5. 深入理解RunLoop\"></a>5. <a href=\"https://blog.ibireme.com/2015/05/18/runloop/\">深入理解RunLoop</a></h2><h2 id=\"6-轻松过面：一文全解iOS通知机制-经典收藏\"><a href=\"#6-轻松过面：一文全解iOS通知机制-经典收藏\" class=\"headerlink\" title=\"6. 轻松过面：一文全解iOS通知机制(经典收藏)\"></a>6. <a href=\"https://juejin.cn/post/6844904082516213768#heading-27\">轻松过面：一文全解iOS通知机制(经典收藏)</a></h2><h2 id=\"7-深入理解Objective-C：Category\"><a href=\"#7-深入理解Objective-C：Category\" class=\"headerlink\" title=\"7. 深入理解Objective-C：Category\"></a>7. <a href=\"https://tech.meituan.com/2015/03/03/diveintocategory.html\">深入理解Objective-C：Category</a></h2><h2 id=\"8-iOS底层原理：weak的实现原理\"><a href=\"#8-iOS底层原理：weak的实现原理\" class=\"headerlink\" title=\"8. iOS底层原理：weak的实现原理\"></a>8. <a href=\"https://juejin.cn/post/6844904101839372295\">iOS底层原理：weak的实现原理</a></h2><h2 id=\"9-iOS开发·runtime原理与实践-消息转发篇-Message-Forwarding-消息机制，方法未实现-API不兼容奔溃，模拟多继承\"><a href=\"#9-iOS开发·runtime原理与实践-消息转发篇-Message-Forwarding-消息机制，方法未实现-API不兼容奔溃，模拟多继承\" class=\"headerlink\" title=\"9 iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)\"></a>9 <a href=\"https://juejin.cn/post/6844903600968171533#heading-5\">iOS开发·runtime原理与实践: 消息转发篇(Message Forwarding) (消息机制，方法未实现+API不兼容奔溃，模拟多继承)</a></h2>"},{"title":"G++","abbrlink":"5058467e","date":"2021-04-19T16:00:00.000Z","_content":"\nMacBook-P:~ sumian$ g++ --help\n\n```shell\nOVERVIEW: clang LLVM compiler\n\nUSAGE: clang [options] <inputs>\n\nOPTIONS:\n  -###                    Print (but do not run) the commands to run for this compilation\n  --analyzer-output <value>\n                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).\n  --analyze               Run the static analyzer\n  -arcmt-migrate-emit-errors\n                          Emit ARC errors even if the migrator can fix them\n  -arcmt-migrate-report-output <value>\n                          Output path for the plist report\n  -B <dir>                Add <dir> to search path for binaries and object files used implicitly\n  -CC                     Include comments from within macros in preprocessed output\n  -cfguard                Emit tables required for Windows Control Flow Guard.\n  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.\n  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.\n  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.\n  -cl-fp32-correctly-rounded-divide-sqrt\n                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.\n  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.\n  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.\n  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.\n  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.\n  -cl-single-precision-constant\n                          OpenCL only. Treat double precision floating-point constant as single precision constant.\n  -cl-std=<value>         OpenCL language standard to compile for.\n  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.\n  -cl-uniform-work-group-size\n                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel\n  -cl-unsafe-math-optimizations\n                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.\n  --config <value>        Specifies configuration file\n  --cuda-compile-host-device\n                          Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.\n  --cuda-device-only      Compile CUDA code for device only\n  --cuda-gpu-arch=<value> CUDA GPU architecture (e.g. sm_35).  May be specified more than once.\n  --cuda-host-only        Compile CUDA code for host only.  Has no effect on non-CUDA compilations.\n  --cuda-include-ptx=<value>\n                          Include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --cuda-noopt-device-debug\n                          Enable device-side debug info generation. Disables ptxas optimizations.\n  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation\n  --cuda-path=<value>     CUDA installation path\n  -cxx-isystem <directory>\n                          Add directory to the C++ SYSTEM include search path\n  -C                      Include comments in preprocessed output\n  -c                      Only run preprocess, compile, and assemble steps\n  -dD                     Print macro definitions in -E mode in addition to normal output\n  -dependency-dot <value> Filename to write DOT-formatted header dependencies to\n  -dependency-file <value>\n                          Filename (or -) to write dependency output to\n  -dI                     Print include directives in -E mode in addition to normal output\n  -dM                     Print macro definitions in -E mode instead of normal output\n  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)\n  -emit-ast               Emit Clang AST files for source inputs\n  -emit-llvm              Use the LLVM representation for assembler and object files\n  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang<value>\n                          Trivial automatic variable initialization to zero is only here for benchmarks, it'll eventually be removed, and I'm OK with that because I'm only using it to benchmark\n  -E                      Only run the preprocessor\n  -faddrsig               Emit an address-significance table\n  -faligned-allocation    Enable C++17 aligned allocation functions\n  -fallow-editor-placeholders\n                          Treat editor placeholders as valid source code\n  -fansi-escape-codes     Use ANSI escape codes for diagnostics\n  -fapinotes-cache-path=<directory>\n                          Does nothing; API notes are no longer cached separately from modules\n  -fapinotes-modules      Enable module-based external API notes support\n  -fapinotes-swift-version=<version>\n                          Specify the Swift version to use when filtering API notes\n  -fapinotes              Enable external API notes support\n  -fapple-kext            Use Apple's kernel extensions ABI\n  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling\n  -fapplication-extension Restrict code to those available for App Extensions\n  -fblocks                Enable the 'blocks' language feature\n  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler\n  -fbuild-session-file=<file>\n                          Use the last modification time of <file> as the build session timestamp\n  -fbuild-session-timestamp=<time since Epoch in seconds>\n                          Time when the current build session started\n  -fbuiltin-module-map    Load the clang builtins module map file.\n  -fc++-static-destructors\n                          Enable C++ static destructor registration (the default)\n  -fcf-protection=<value> Instrument control-flow architecture protection. Options: return, branch, full, none.\n  -fcf-protection         Enable cf-protection in 'full' mode\n  -fchar8_t               Enable C++ builtin type char8_t\n  -fclang-abi-compat=<version>\n                          Attempt to match the ABI of Clang <version>\n  -fcolor-diagnostics     Use colors in diagnostics\n  -fcomment-block-commands=<arg>\n                          Treat each comma separated argument in <arg> as a documentation comment block command\n  -fcomplete-member-pointers\n                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fcoroutines-ts         Enable support for the C++ Coroutines TS\n  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis\n  -fcuda-approx-transcendentals\n                          Use approximate transcendental functions\n  -fcuda-flush-denormals-to-zero\n                          Flush denormal floating point values to zero in CUDA device mode.\n  -fcuda-rdc              Generate relocatable device code, also known as separate compilation mode.\n  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces.\n  -fcxx-exceptions        Enable C++ exceptions\n  -fdata-sections         Place each data in its own section (ELF Only)\n  -fdebug-info-for-profiling\n                          Emit extra debug info to make sample profile more accurate.\n  -fdebug-macro           Emit macro debug information\n  -fdebug-prefix-map=<value>\n                          remap file source paths in debug info\n  -fdebug-types-section   Place debug types in their own section (ELF Only)\n  -fdeclspec              Allow __declspec as a keyword\n  -fdelayed-template-parsing\n                          Parse templated function definitions at the end of the translation unit\n  -fdelete-null-pointer-checks\n                          Treat usage of null pointers as undefined behavior.\n  -fdiagnostics-absolute-paths\n                          Print absolute paths in diagnostics\n  -fdiagnostics-hotness-threshold=<number>\n                          Prevent optimization remarks from being output if they do not have at least this profile count\n  -fdiagnostics-parseable-fixits\n                          Print fix-its in machine parseable form\n  -fdiagnostics-print-source-range-info\n                          Print source range spans in numeric form\n  -fdiagnostics-show-hotness\n                          Enable profile hotness information in diagnostic line\n  -fdiagnostics-show-note-include-stack\n                          Display include stacks for diagnostic notes\n  -fdiagnostics-show-option\n                          Print option name with mappable diagnostics\n  -fdiagnostics-show-template-tree\n                          Print a template comparison tree for differing templates\n  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)\n  -fdiscard-value-names   Discard value names in LLVM IR\n  -fdollars-in-identifiers\n                          Allow '$' in identifiers\n  -fdouble-square-bracket-attributes\n                          Enable '[[]]' attributes in all C and C++ language modes\n  -fdwarf-exceptions      Use DWARF style exceptions\n  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker\n  -fembed-bitcode=<option>\n                          Embed LLVM bitcode (option: off, all, bitcode, marker)\n  -fembed-bitcode         Embed LLVM IR bitcode as data\n  -femit-all-decls        Emit all declarations, even if unused\n  -femulated-tls          Use emutls functions to access thread_local variables\n  -fenable-matrix         Enable matrix data type and related builtin functions\n  -fexceptions            Enable support for exception handling\n  -fexperimental-isel     Enables the experimental global instruction selector\n  -fexperimental-new-pass-manager\n                          Enables an experimental new pass manager in LLVM.\n  -ffast-math             Allow aggressive, lossy floating-point optimizations\n  -ffine-grained-bitfield-accesses\n                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.\n  -ffixed-point           Enable fixed point types\n  -ffixed-r19             Reserve register r19 (Hexagon only)\n  -ffixed-r9              Reserve the r9 register (ARM only)\n  -ffixed-x18             Reserve the x18 register (AArch64 only)\n  -ffixed-x20             Reserve the x20 register (AArch64 only)\n  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization\n  -fforce-enable-int128   Enable support for int128_t type\n  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)\n  -ffreestanding          Assert that the compilation takes place in a freestanding environment\n  -ffunction-sections     Place each function in its own section (ELF Only)\n  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard\n  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime\n  -fgnu89-inline          Use the gnu89 inline semantics\n  -fimplicit-module-maps  Implicitly search the file system for module map files.\n  -finline-functions      Inline suitable functions\n  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline\n  -finstrument-function-entry-bare\n                          Instrument function entry only, after inlining, without arguments to the instrumentation call\n  -finstrument-functions-after-inlining\n                          Like -finstrument-functions, but insert the calls after inlining\n  -finstrument-functions  Generate calls to instrument function entry and exit\n  -fintegrated-as         Enable the integrated assembler\n  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)\n  -flto=<value>           Set LTO mode to either 'full' or 'thin'\n  -flto                   Enable LTO in 'full' mode\n  -fmath-errno            Require math functions to indicate errors by setting errno\n  -fmax-type-align=<value>\n                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment\n  -fmerge-all-constants   Allow merging of constants\n  -fmodule-file=[<name>=]<file>\n                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.\n  -fmodule-map-file=<file>\n                          Load this module map file\n  -fmodule-name=<name>    Specify the name of the module to build\n  -fmodules-cache-path=<directory>\n                          Specify the module cache path\n  -fmodules-decluse       Require declaration of modules used within a module\n  -fmodules-disable-diagnostic-validation\n                          Disable validation of the diagnostic options when loading the module\n  -fmodules-ignore-macro=<value>\n                          Ignore the definition of the given macro when building and loading modules\n  -fmodules-prune-after=<seconds>\n                          Specify the interval (in seconds) after which a module file will be considered unused\n  -fmodules-prune-interval=<seconds>\n                          Specify the interval (in seconds) between attempts to prune the module cache\n  -fmodules-search-all    Search even non-imported modules to resolve references\n  -fmodules-strict-decluse\n                          Like -fmodules-decluse but requires all headers to be in modules\n  -fmodules-ts            Enable support for the C++ Modules TS\n  -fmodules-user-build-path <directory>\n                          Specify the module user build path\n  -fmodules-validate-once-per-build-session\n                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session\n  -fmodules-validate-system-headers\n                          Validate the system headers that a module depends on when loading the module\n  -fmodules               Enable the 'modules' language feature\n  -fms-compatibility-version=<value>\n                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fms-compatibility      Enable full Microsoft Visual C++ compatibility\n  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler\n  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'\n  -fno-access-control     Disable C++ access control\n  -fno-addrsig            Don't emit an address-significance table\n  -fno-apinotes-modules   Disable module-based external API notes support\n  -fno-apinotes           Disable external API notes support\n  -fno-assume-sane-operator-new\n                          Don't assume that C++'s global operator new can't alias any pointer\n  -fno-autolink           Disable generation of linker directives for automatic library linking\n  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function\n  -fno-builtin            Disable implicit builtin knowledge of functions\n  -fno-c++-static-destructors\n                          Disable C++ static destructor registration\n  -fno-char8_t            Disable C++ builtin type char8_t\n  -fno-common             Compile common globals like normal definitions\n  -fno-complete-member-pointers\n                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings\n  -fno-coverage-mapping   Disable code coverage analysis\n  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash\n  -fno-debug-info-for-profiling\n                          Do not emit extra debug info for sample profiler.\n  -fno-debug-macro        Do not emit macro debug information\n  -fno-declspec           Disallow __declspec as a keyword\n  -fno-delayed-template-parsing\n                          Disable delayed template parsing\n  -fno-delete-null-pointer-checks\n                          Do not treat usage of null pointers as undefined behavior.\n  -fno-diagnostics-fixit-info\n                          Do not include fixit information in diagnostics\n  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'\n  -fno-discard-value-names\n                          Do not discard value names in LLVM IR\n  -fno-dollars-in-identifiers\n                          Disallow '$' in identifiers\n  -fno-double-square-bracket-attributes\n                          Disable '[[]]' attributes in all C and C++ language modes\n  -fno-elide-constructors Disable C++ copy constructor elision\n  -fno-elide-type         Do not elide types when printing diagnostics\n  -fno-experimental-isel  Disables the experimental global instruction selector\n  -fno-experimental-new-pass-manager\n                          Disables an experimental new pass manager in LLVM.\n  -fno-fine-grained-bitfield-accesses\n                          Use large-integer access for consecutive bitfield runs.\n  -fno-fixed-point        Disable fixed point types\n  -fno-force-enable-int128\n                          Disable support for int128_t type\n  -fno-gnu-inline-asm     Disable GNU style inline asm\n  -fno-integrated-as      Disable the integrated assembler\n  -fno-jump-tables        Do not use jump tables for lowering switches\n  -fno-lax-vector-conversions\n                          Disallow implicit conversions between vectors with a different number of elements or different element types\n  -fno-lto                Disable LTO mode (default)\n  -fno-merge-all-constants\n                          Disallow merging of constants\n  -fno-objc-infer-related-result-type\n                          do not infer Objective-C related result type based on method family\n  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators\n  -fno-plt                Do not use the PLT to make function calls\n  -fno-preserve-as-comments\n                          Do not preserve comments in inline assembly\n  -fno-profile-generate   Disable generation of profile instrumentation.\n  -fno-profile-instr-generate\n                          Disable generation of profile instrumentation.\n  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization\n  -fno-register-global-dtors-with-atexit\n                          Don't use atexit or __cxa_atexit to register global destructors\n  -fno-reroll-loops       Turn off loop reroller\n  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags\n  -fno-rtti-data          Control emission of RTTI data\n  -fno-rtti               Disable generation of rtti information\n  -fno-sanitize-address-poison-class-member-array-new-cookie\n                          Disable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fno-sanitize-address-use-after-scope\n                          Disable use-after-scope detection in AddressSanitizer\n  -fno-sanitize-blacklist Don't use blacklist file for sanitizers\n  -fno-sanitize-cfi-cross-dso\n                          Disable control flow integrity (CFI) checks for cross-DSO calls.\n  -fno-sanitize-coverage=<value>\n                          Disable specified features of coverage instrumentation for Sanitizers\n  -fno-sanitize-memory-track-origins\n                          Disable origins tracking in MemorySanitizer\n  -fno-sanitize-memory-use-after-dtor\n                          Disable use-after-destroy detection in MemorySanitizer\n  -fno-sanitize-recover=<value>\n                          Disable recovery for specified sanitizers\n  -fno-sanitize-stats     Disable sanitizer statistics gathering.\n  -fno-sanitize-thread-atomics\n                          Disable atomic operations instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-func-entry-exit\n                          Disable function entry/exit instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-memory-access\n                          Disable memory access instrumentation in ThreadSanitizer\n  -fno-sanitize-trap=<value>\n                          Disable trapping for specified sanitizers\n  -fno-short-wchar        Force wchar_t to be an unsigned int\n  -fno-show-column        Do not include column number on diagnostics\n  -fno-show-source-location\n                          Do not include source location information with diagnostics\n  -fno-signed-char        Char is unsigned\n  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros\n  -fno-spell-checking     Disable spell-checking\n  -fno-stack-check        Disable stack checking\n  -fno-stack-protector    Disable the use of stack protectors\n  -fno-stack-size-section Don't emit section containing metadata on function stack sizes\n  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary\n  -fno-strict-float-cast-overflow\n                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions\n  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe\n  -fno-trigraphs          Do not process trigraph sequences\n  -fno-unroll-loops       Turn off loop unroller\n  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors\n  -fno-use-init-array     Don't use .init_array instead of .ctors\n  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc\n  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers\n  -fobjc-exceptions       Enable Objective-C exceptions\n  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version\n  -fobjc-weak             Enable ARC-style weak references in Objective-C\n  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.\n  -fopenmp-targets=<value>\n                          Specify comma-separated list of triples OpenMP offloading targets to be supported\n  -fopenmp                Parse OpenMP pragmas and generate parallel code.\n  -foptimization-record-file=<value>\n                          Specify the file name of any generated YAML optimization record\n  -fpack-struct=<value>   Specify the default maximum struct packing alignment\n  -fpascal-strings        Recognize and construct Pascal-style string literals\n  -fpcc-struct-return     Override the default ABI to return all structs on the stack\n  -fplt                   Use the PLT to make function calls\n  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)\n  -fprebuilt-module-path=<directory>\n                          Specify the prebuilt module path\n  -fprofile-generate=<directory>\n                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate=<file>\n                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate\n                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)\n  -fprofile-instr-use=<value>\n                          Use instrumentation data for profile-guided optimization\n  -fprofile-sample-accurate\n                          Specifies that the sample profile is accurate\n  -fprofile-sample-use=<value>\n                          Enable sample-based profile guided optimizations\n  -fprofile-use=<pathname>\n                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.\n  -fptrauth-calls         Enable signing and authentication of all indirect calls\n  -fptrauth-intrinsics    Enable pointer-authentication intrinsics\n  -fptrauth-returns       Enable signing and authentication of return addresses\n  -fptrauth-soft          Enable software lowering of pointer authentication\n  -freciprocal-math       Allow division operations to be reassociated\n  -freg-struct-return     Override the default ABI to return small structs in registers\n  -fregister-global-dtors-with-atexit\n                          Use atexit or __cxa_atexit to register global destructors\n  -frelaxed-template-template-args\n                          Enable C++17 relaxed template template argument matching\n  -freroll-loops          Turn on loop reroller\n  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags\n  -fsanitize-address-field-padding=<value>\n                          Level of field padding for AddressSanitizer\n  -fsanitize-address-globals-dead-stripping\n                          Enable linker dead stripping of globals in AddressSanitizer\n  -fsanitize-address-poison-class-member-array-new-cookie\n                          Enable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fsanitize-address-use-after-scope\n                          Enable use-after-scope detection in AddressSanitizer\n  -fsanitize-blacklist=<value>\n                          Path to blacklist file for sanitizers\n  -fsanitize-cfi-cross-dso\n                          Enable control flow integrity (CFI) checks for cross-DSO calls.\n  -fsanitize-cfi-icall-generalize-pointers\n                          Generalize pointers in CFI indirect call type signature checks\n  -fsanitize-coverage=<value>\n                          Specify the type of coverage instrumentation for Sanitizers\n  -fsanitize-memory-track-origins=<value>\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-track-origins\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-use-after-dtor\n                          Enable use-after-destroy detection in MemorySanitizer\n  -fsanitize-recover=<value>\n                          Enable recovery for specified sanitizers\n  -fsanitize-stats        Enable sanitizer statistics gathering.\n  -fsanitize-thread-atomics\n                          Enable atomic operations instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-func-entry-exit\n                          Enable function entry/exit instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-memory-access\n                          Enable memory access instrumentation in ThreadSanitizer (default)\n  -fsanitize-trap=<value> Enable trapping for specified sanitizers\n  -fsanitize-undefined-strip-path-components=<number>\n                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.\n  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks\n  -fsave-optimization-record\n                          Generate a YAML optimization record file\n  -fseh-exceptions        Use SEH style exceptions\n  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values\n  -fshort-wchar           Force wchar_t to be a short unsigned int\n  -fshow-overloads=<value>\n                          Which overload candidates to show when overload resolution fails: best|all; defaults to all\n  -fsized-deallocation    Enable C++14 sized global deallocation functions\n  -fsjlj-exceptions       Use SjLj style exceptions\n  -fslp-vectorize         Enable the superword-level parallelism vectorization passes\n  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n  -fstack-check           Enable stack checking\n  -fstack-protector-all   Force the usage of stack protectors for all functions\n  -fstack-protector-strong\n                          Use a strong heuristic to apply stack protectors to functions\n  -fstack-protector       Enable stack protectors for functions potentially vulnerable to stack smashing\n  -fstack-size-section    Emit section containing metadata on function stack sizes\n  -fstandalone-debug      Emit full debug info for all types used by the program\n  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range\n  -fstrict-float-cast-overflow\n                          Assume that overflowing float-to-int casts are undefined (default)\n  -fstrict-return         Always treat control flow paths that fall off the end of a non-void function as unreachable\n  -fstrict-vtable-pointers\n                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects\n  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index\n  -ftrap-function=<value> Issue call to specified function rather than a trap instruction\n  -ftrapv-handler=<function name>\n                          Specify the function to be called on overflow\n  -ftrapv                 Trap on integer overflow\n  -ftrigraphs             Process trigraph sequences\n  -ftrivial-auto-var-init=<value>\n                          Initialize trivial automatic stack variables: uninitialized (default) | pattern\n  -funique-section-names  Use unique names for text and data sections (ELF Only)\n  -funroll-loops          Turn on loop unroller\n  -fuse-init-array        Use .init_array instead of .ctors\n  -fveclib=<value>        Use the given vector functions library\n  -fvectorize             Enable the loop vectorization passes\n  -fvisibility-inlines-hidden\n                          Give inline C++ member functions hidden visibility by default\n  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default\n  -fvisibility=<value>    Set the default symbol visibility for all global declarations\n  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto\n  -fwrapv                 Treat signed integer overflow as two's complement\n  -fwritable-strings      Store string literals as writable data\n  -fxray-always-emit-customevents\n                          Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-emit-typedevents\n                          Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-instrument= <value>\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.\n  -fxray-attr-list= <value>\n                          Filename defining the list of functions/types for imbuing XRay attributes.\n  -fxray-instruction-threshold= <value>\n                          Sets the minimum function size to instrument with XRay\n  -fxray-instrumentation-bundle= <value>\n                          Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is 'all'.\n  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit\n  -fxray-link-deps        Tells clang to add the link dependencies for XRay.\n  -fxray-modes= <value>   List of modes to link in by default into XRay instrumented binaries.\n  -fxray-never-instrument= <value>\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.\n  -fzvector               Enable System z vector language extension\n  -F <value>              Add directory to framework include search path\n  --gcc-toolchain=<value> Use the gcc toolchain at the given directory\n  -gcodeview              Generate CodeView debug information\n  -gdwarf-2               Generate source-level debug information with dwarf version 2\n  -gdwarf-3               Generate source-level debug information with dwarf version 3\n  -gdwarf-4               Generate source-level debug information with dwarf version 4\n  -gdwarf-5               Generate source-level debug information with dwarf version 5\n  -gembed-source          Embed source text in DWARF debug sections\n  -gline-tables-only      Emit debug line number tables only\n  -gmodules               Generate debug info with external references to clang modules or precompiled headers\n  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections\n  -gz=<value>             DWARF debug sections compression type\n  -gz                     DWARF debug sections compression type\n  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)\n  -g                      Generate source-level debug information\n  --help-hidden           Display help for hidden options\n  -help                   Display available options\n  --hip-device-lib-path=<value>\n                          HIP device library path\n  --hip-device-lib=<value>\n                          HIP device library\n  --hip-link              Link clang-offload-bundler bundles for HIP\n  -H                      Show header includes and nesting depth\n  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path\n  -iapinotes-modules <directory>\n                          Add directory to the API notes search path referenced by module name\n  -idirafter <value>      Add directory to AFTER include search path\n  -iframeworkwithsysroot <directory>\n                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot\n  -iframework <value>     Add directory to SYSTEM framework search path\n  -imacros <file>         Include macros from file before parsing\n  -include-pch <file>     Include precompiled header file\n  -include <file>         Include file before parsing\n  -index-header-map       Make the next included directory (-I or -F) an indexer header map\n  -index-ignore-system-symbols\n                          Ignore symbols from system headers\n  -index-record-codegen-name\n                          Record the codegen name for symbols\n  -index-store-path <value>\n                          Enable indexing with the specified data store path\n  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix\n  -iquote <directory>     Add directory to QUOTE include search path\n  -isysroot <dir>         Set the system root directory (usually /)\n  -isystem-after <directory>\n                          Add directory to end of the SYSTEM include search path\n  -isystem <directory>    Add directory to SYSTEM include search path\n  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system\n  -iwithprefixbefore <dir>\n                          Set directory to include search path with prefix\n  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix\n  -iwithsysroot <directory>\n                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot\n  -I <dir>                Add directory to include search path\n  -L <dir>                Add directory to library search path\n  -mabicalls              Enable SVR4-style position-independent code (Mips only)\n  -malign-double          Align doubles to two words in structs (x86 only)\n  -mbackchain             Link stack frames through backchain on System Z\n  -mcrc                   Allow use of CRC instructions (ARM/Mips only)\n  -MD                     Write a depfile containing user and system headers\n  -meabi <value>          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)\n  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)\n  -mexecute-only          Disallow generation of data access to code sections (ARM only)\n  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n  -mfentry                Insert calls to fentry at function entry (x86 only)\n  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mfp32                  Use 32-bit floating point registers (MIPS only)\n  -mfp64                  Use 64-bit floating point registers (MIPS only)\n  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>\n  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64 only)\n  -mglobal-merge          Enable merging of globals\n  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -MG                     Add missing headers to depfile\n  -mhvx-length=<value>    Set Hexagon Vector Length\n  -mhvx=<value>           Enable Hexagon Vector eXtensions\n  -mhvx                   Enable Hexagon Vector eXtensions\n  -miamcu                 Use Intel MCU ABI\n  --migrate               Run the migrator\n  -mincremental-linker-compatible\n                          (integrated-as) Emit an object file which can be used with an incremental linker\n  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation\n  -mios-version-min=<value>\n                          Set iOS deployment target\n  -MJ <value>             Write a compilation database entry per input\n  -mllvm <value>          Additional arguments to forward to LLVM's option processing\n  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)\n  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.\n  -mmacosx-version-min=<value>\n                          Set Mac OS X deployment target\n  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.\n  -MMD                    Write a depfile containing user headers\n  -mmemops                Enable generation of memop instructions\n  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard\n  -mmsa                   Enable MSA ASE (MIPS only)\n  -mmt                    Enable MT ASE (MIPS only)\n  -MM                     Like -MMD, but also implies -E and writes to stdout by default\n  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)\n  -mno-crc                Disallow use of CRC instructions (Mips only)\n  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)\n  -mno-execute-only       Allow generation of data access to code sections (ARM only)\n  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n  -mno-fix-cortex-a53-835769\n                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mno-global-merge       Disable merging of globals\n  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -mno-hvx                Disable Hexagon Vector eXtensions\n  -mno-implicit-float     Don't generate implicit floating point instructions\n  -mno-incremental-linker-compatible\n                          (integrated-as) Emit an object file which cannot be used with an incremental linker\n  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)\n  -mno-long-calls         Restore the default behaviour of not generating long calls\n  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.\n  -mno-memops             Disable generation of memop instructions\n  -mno-movt               Disallow use of movt/movw pairs (ARM only)\n  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard\n  -mno-msa                Disable MSA ASE (MIPS only)\n  -mno-mt                 Disable MT ASE (MIPS only)\n  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.\n  -mno-nvj                Disable generation of new-value jumps\n  -mno-nvs                Disable generation of new-value stores\n  -mno-outline            Disable function outlining (AArch64 only)\n  -mno-packets            Disable generation of instruction packets\n  -mno-relax              Disable linker relaxation\n  -mno-restrict-it        Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode\n  -mno-stack-arg-probe    Disable stack probes which are enabled by default\n  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)\n  -mno-xnack              Disable XNACK (AMDGPU only)\n  -mnocrc                 Disallow use of CRC instructions (ARM only)\n  -mnvj                   Enable generation of new-value jumps\n  -mnvs                   Enable generation of new-value stores\n  -module-dependency-dir <value>\n                          Directory to dump module dependencies to\n  -module-file-info       Provide information about a particular module file\n  -momit-leaf-frame-pointer\n                          Omit frame pointer setup for leaf functions\n  -moutline               Enable function outlining (AArch64 only)\n  -mpackets               Enable generation of instruction packets\n  -mpie-copy-relocations  Use copy relocations support for PIE builds\n  -mprefer-vector-width=<value>\n                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.\n  -MP                     Create phony target for each dependency (other than main file)\n  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility\n  -MQ <value>             Specify name of main file output to quote in depfile\n  -mrelax-all             (integrated-as) Relax all machine instructions\n  -mrelax                 Enable linker relaxation\n  -mrestrict-it           Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.\n  -mrtd                   Make StdCall calling convention the default\n  -msoft-float            Use software floating point\n  -mstack-alignment=<value>\n                          Set the stack alignment\n  -mstack-arg-probe       Enable stack probes\n  -mstack-probe-size=<value>\n                          Set the stack probe size\n  -mstackrealign          Force realign the stack at entry to every function\n  -mthread-model <value>  The thread model to use, e.g. posix, single (posix by default)\n  -mtp=<value>            Read thread pointer from coprocessor register (ARM only)\n  -MT <value>             Specify name of main file output in depfile\n  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)\n  -MV                     Use NMake/Jom format for the depfile\n  -mxnack                 Enable XNACK (AMDGPU only)\n  -M                      Like -MD, but also implies -E and writes to stdout by default\n  --no-cuda-gpu-arch=<value>\n                          Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. 'all' resets the list to its default value.\n  --no-cuda-include-ptx=<value>\n                          Do not include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.\n  --no-system-header-prefix=<prefix>\n                          Treat all #include paths starting with <prefix> as not including a system header.\n  -nobuiltininc           Disable builtin #include directories\n  -nostdinc++             Disable standard #include directories for the C++ standard library\n  -ObjC++                 Treat source input files as Objective-C++ inputs\n  -objcmt-atomic-property Make migration to 'atomic' properties\n  -objcmt-migrate-all     Enable migration to modern ObjC\n  -objcmt-migrate-annotation\n                          Enable migration to property and method annotations\n  -objcmt-migrate-designated-init\n                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods\n  -objcmt-migrate-instancetype\n                          Enable migration to infer instancetype for method result type\n  -objcmt-migrate-literals\n                          Enable migration to modern ObjC literals\n  -objcmt-migrate-ns-macros\n                          Enable migration to NS_ENUM/NS_OPTIONS macros\n  -objcmt-migrate-property-dot-syntax\n                          Enable migration of setter/getter messages to property-dot syntax\n  -objcmt-migrate-property\n                          Enable migration to modern ObjC property\n  -objcmt-migrate-protocol-conformance\n                          Enable migration to add protocol conformance on classes\n  -objcmt-migrate-readonly-property\n                          Enable migration to modern ObjC readonly property\n  -objcmt-migrate-readwrite-property\n                          Enable migration to modern ObjC readwrite property\n  -objcmt-migrate-subscripting\n                          Enable migration to modern ObjC subscripting\n  -objcmt-ns-nonatomic-iosonly\n                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute\n  -objcmt-returns-innerpointer-property\n                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER\n  -objcmt-whitelist-dir-path=<value>\n                          Only modify files with a filename contained in the provided directory path\n  -ObjC                   Treat source input files as Objective-C inputs\n  -o <file>               Write output to <file>\n  -pg                     Enable mcount instrumentation\n  -pipe                   Use pipes between commands, when possible\n  --precompile            Only precompile the input\n  -print-file-name=<file> Print the full library path of <file>\n  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace\n  -print-libgcc-file-name Print the library path for the currently used compiler runtime library (\"libgcc.a\" or \"libclang_rt.builtins.*.a\")\n  -print-prog-name=<name> Print the full program path of <name>\n  -print-resource-dir     Print the resource directory pathname\n  -print-search-dirs      Print the paths used for finding libraries and programs\n  -pthread                Support POSIX threads in generated code\n  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)\n  -P                      Disable linemarker output in -E mode\n  -Qn                     Do not emit metadata containing compiler name and version\n  -Qunused-arguments      Don't emit warning for unused driver arguments\n  -Qy                     Emit metadata containing compiler name and version\n  -relocatable-pch        Whether to build a relocatable precompiled header\n  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++\n  -rewrite-objc           Rewrite Objective-C source to C++\n  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression\n  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression\n  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression\n  -rtlib=<value>          Compiler runtime library to use\n  -R<remark>              Enable the specified remark\n  -save-stats=<value>     Save llvm statistics.\n  -save-stats             Save llvm statistics.\n  -save-temps=<value>     Save intermediate compilation results.\n  -save-temps             Save intermediate compilation results\n  -serialize-diagnostics <value>\n                          Serialize compiler diagnostics to a file\n  -std=<value>            Language standard to compile for\n  -stdlib=<value>         C++ standard library to use\n  --system-header-prefix=<prefix>\n                          Treat all #include paths starting with <prefix> as including a system header.\n  -S                      Only run preprocess and compilation steps\n  -target-variant <value> Generate code that may run on a particular variant of the deployment target\n  --target=<value>        Generate code for the given target\n  -Tbss <addr>            Set starting address of BSS to <addr>\n  -Tdata <addr>           Set starting address of DATA to <addr>\n  -time                   Time individual commands\n  -traditional-cpp        Enable some traditional CPP emulation\n  -trigraphs              Process trigraph sequences\n  -Ttext <addr>           Set starting address of TEXT to <addr>\n  -T <script>             Specify <script> as linker script\n  -undef                  undef all system defines\n  -U <macro>              Undefine macro <macro>\n  --verify-debug-info     Verify the binary representation of debug output\n  -verify-pch             Load and verify that a pre-compiled header file is not stale\n  --version               Print version information\n  -v                      Show commands to run and use verbose output\n  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler\n  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED\n  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker\n  -working-directory <value>\n                          Resolve file paths relative to the specified directory\n  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor\n  -W<warning>             Enable the specified warning\n  -w                      Suppress all warnings\n  -Xanalyzer <arg>        Pass <arg> to the static analyzer\n  -Xassembler <arg>       Pass <arg> to the assembler\n  -Xclang <arg>           Pass <arg> to the clang compiler\n  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation\n  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler\n  -Xlinker <arg>          Pass <arg> to the linker\n  -Xopenmp-target=<triple> <arg>\n                          Pass <arg> to the target offloading toolchain identified by <triple>.\n  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.\n  -Xpreprocessor <arg>    Pass <arg> to the preprocessor\n  -x <language>           Treat subsequent input files as having type <language>\n  -z <arg>                Pass -z <arg> to the linker\n```\n","source":"_posts/iOS/Languages/CAlians/Compiler/g++.md","raw":"---\ntitle: G++\nabbrlink: 5058467e\ndate: 2021-04-20 00:00:00\ntags:\n---\n\nMacBook-P:~ sumian$ g++ --help\n\n```shell\nOVERVIEW: clang LLVM compiler\n\nUSAGE: clang [options] <inputs>\n\nOPTIONS:\n  -###                    Print (but do not run) the commands to run for this compilation\n  --analyzer-output <value>\n                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).\n  --analyze               Run the static analyzer\n  -arcmt-migrate-emit-errors\n                          Emit ARC errors even if the migrator can fix them\n  -arcmt-migrate-report-output <value>\n                          Output path for the plist report\n  -B <dir>                Add <dir> to search path for binaries and object files used implicitly\n  -CC                     Include comments from within macros in preprocessed output\n  -cfguard                Emit tables required for Windows Control Flow Guard.\n  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.\n  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.\n  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.\n  -cl-fp32-correctly-rounded-divide-sqrt\n                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.\n  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.\n  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.\n  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.\n  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.\n  -cl-single-precision-constant\n                          OpenCL only. Treat double precision floating-point constant as single precision constant.\n  -cl-std=<value>         OpenCL language standard to compile for.\n  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.\n  -cl-uniform-work-group-size\n                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel\n  -cl-unsafe-math-optimizations\n                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.\n  --config <value>        Specifies configuration file\n  --cuda-compile-host-device\n                          Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.\n  --cuda-device-only      Compile CUDA code for device only\n  --cuda-gpu-arch=<value> CUDA GPU architecture (e.g. sm_35).  May be specified more than once.\n  --cuda-host-only        Compile CUDA code for host only.  Has no effect on non-CUDA compilations.\n  --cuda-include-ptx=<value>\n                          Include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --cuda-noopt-device-debug\n                          Enable device-side debug info generation. Disables ptxas optimizations.\n  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation\n  --cuda-path=<value>     CUDA installation path\n  -cxx-isystem <directory>\n                          Add directory to the C++ SYSTEM include search path\n  -C                      Include comments in preprocessed output\n  -c                      Only run preprocess, compile, and assemble steps\n  -dD                     Print macro definitions in -E mode in addition to normal output\n  -dependency-dot <value> Filename to write DOT-formatted header dependencies to\n  -dependency-file <value>\n                          Filename (or -) to write dependency output to\n  -dI                     Print include directives in -E mode in addition to normal output\n  -dM                     Print macro definitions in -E mode instead of normal output\n  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)\n  -emit-ast               Emit Clang AST files for source inputs\n  -emit-llvm              Use the LLVM representation for assembler and object files\n  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang<value>\n                          Trivial automatic variable initialization to zero is only here for benchmarks, it'll eventually be removed, and I'm OK with that because I'm only using it to benchmark\n  -E                      Only run the preprocessor\n  -faddrsig               Emit an address-significance table\n  -faligned-allocation    Enable C++17 aligned allocation functions\n  -fallow-editor-placeholders\n                          Treat editor placeholders as valid source code\n  -fansi-escape-codes     Use ANSI escape codes for diagnostics\n  -fapinotes-cache-path=<directory>\n                          Does nothing; API notes are no longer cached separately from modules\n  -fapinotes-modules      Enable module-based external API notes support\n  -fapinotes-swift-version=<version>\n                          Specify the Swift version to use when filtering API notes\n  -fapinotes              Enable external API notes support\n  -fapple-kext            Use Apple's kernel extensions ABI\n  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling\n  -fapplication-extension Restrict code to those available for App Extensions\n  -fblocks                Enable the 'blocks' language feature\n  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler\n  -fbuild-session-file=<file>\n                          Use the last modification time of <file> as the build session timestamp\n  -fbuild-session-timestamp=<time since Epoch in seconds>\n                          Time when the current build session started\n  -fbuiltin-module-map    Load the clang builtins module map file.\n  -fc++-static-destructors\n                          Enable C++ static destructor registration (the default)\n  -fcf-protection=<value> Instrument control-flow architecture protection. Options: return, branch, full, none.\n  -fcf-protection         Enable cf-protection in 'full' mode\n  -fchar8_t               Enable C++ builtin type char8_t\n  -fclang-abi-compat=<version>\n                          Attempt to match the ABI of Clang <version>\n  -fcolor-diagnostics     Use colors in diagnostics\n  -fcomment-block-commands=<arg>\n                          Treat each comma separated argument in <arg> as a documentation comment block command\n  -fcomplete-member-pointers\n                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fcoroutines-ts         Enable support for the C++ Coroutines TS\n  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis\n  -fcuda-approx-transcendentals\n                          Use approximate transcendental functions\n  -fcuda-flush-denormals-to-zero\n                          Flush denormal floating point values to zero in CUDA device mode.\n  -fcuda-rdc              Generate relocatable device code, also known as separate compilation mode.\n  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces.\n  -fcxx-exceptions        Enable C++ exceptions\n  -fdata-sections         Place each data in its own section (ELF Only)\n  -fdebug-info-for-profiling\n                          Emit extra debug info to make sample profile more accurate.\n  -fdebug-macro           Emit macro debug information\n  -fdebug-prefix-map=<value>\n                          remap file source paths in debug info\n  -fdebug-types-section   Place debug types in their own section (ELF Only)\n  -fdeclspec              Allow __declspec as a keyword\n  -fdelayed-template-parsing\n                          Parse templated function definitions at the end of the translation unit\n  -fdelete-null-pointer-checks\n                          Treat usage of null pointers as undefined behavior.\n  -fdiagnostics-absolute-paths\n                          Print absolute paths in diagnostics\n  -fdiagnostics-hotness-threshold=<number>\n                          Prevent optimization remarks from being output if they do not have at least this profile count\n  -fdiagnostics-parseable-fixits\n                          Print fix-its in machine parseable form\n  -fdiagnostics-print-source-range-info\n                          Print source range spans in numeric form\n  -fdiagnostics-show-hotness\n                          Enable profile hotness information in diagnostic line\n  -fdiagnostics-show-note-include-stack\n                          Display include stacks for diagnostic notes\n  -fdiagnostics-show-option\n                          Print option name with mappable diagnostics\n  -fdiagnostics-show-template-tree\n                          Print a template comparison tree for differing templates\n  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)\n  -fdiscard-value-names   Discard value names in LLVM IR\n  -fdollars-in-identifiers\n                          Allow '$' in identifiers\n  -fdouble-square-bracket-attributes\n                          Enable '[[]]' attributes in all C and C++ language modes\n  -fdwarf-exceptions      Use DWARF style exceptions\n  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker\n  -fembed-bitcode=<option>\n                          Embed LLVM bitcode (option: off, all, bitcode, marker)\n  -fembed-bitcode         Embed LLVM IR bitcode as data\n  -femit-all-decls        Emit all declarations, even if unused\n  -femulated-tls          Use emutls functions to access thread_local variables\n  -fenable-matrix         Enable matrix data type and related builtin functions\n  -fexceptions            Enable support for exception handling\n  -fexperimental-isel     Enables the experimental global instruction selector\n  -fexperimental-new-pass-manager\n                          Enables an experimental new pass manager in LLVM.\n  -ffast-math             Allow aggressive, lossy floating-point optimizations\n  -ffine-grained-bitfield-accesses\n                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.\n  -ffixed-point           Enable fixed point types\n  -ffixed-r19             Reserve register r19 (Hexagon only)\n  -ffixed-r9              Reserve the r9 register (ARM only)\n  -ffixed-x18             Reserve the x18 register (AArch64 only)\n  -ffixed-x20             Reserve the x20 register (AArch64 only)\n  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization\n  -fforce-enable-int128   Enable support for int128_t type\n  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)\n  -ffreestanding          Assert that the compilation takes place in a freestanding environment\n  -ffunction-sections     Place each function in its own section (ELF Only)\n  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard\n  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime\n  -fgnu89-inline          Use the gnu89 inline semantics\n  -fimplicit-module-maps  Implicitly search the file system for module map files.\n  -finline-functions      Inline suitable functions\n  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline\n  -finstrument-function-entry-bare\n                          Instrument function entry only, after inlining, without arguments to the instrumentation call\n  -finstrument-functions-after-inlining\n                          Like -finstrument-functions, but insert the calls after inlining\n  -finstrument-functions  Generate calls to instrument function entry and exit\n  -fintegrated-as         Enable the integrated assembler\n  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)\n  -flto=<value>           Set LTO mode to either 'full' or 'thin'\n  -flto                   Enable LTO in 'full' mode\n  -fmath-errno            Require math functions to indicate errors by setting errno\n  -fmax-type-align=<value>\n                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment\n  -fmerge-all-constants   Allow merging of constants\n  -fmodule-file=[<name>=]<file>\n                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.\n  -fmodule-map-file=<file>\n                          Load this module map file\n  -fmodule-name=<name>    Specify the name of the module to build\n  -fmodules-cache-path=<directory>\n                          Specify the module cache path\n  -fmodules-decluse       Require declaration of modules used within a module\n  -fmodules-disable-diagnostic-validation\n                          Disable validation of the diagnostic options when loading the module\n  -fmodules-ignore-macro=<value>\n                          Ignore the definition of the given macro when building and loading modules\n  -fmodules-prune-after=<seconds>\n                          Specify the interval (in seconds) after which a module file will be considered unused\n  -fmodules-prune-interval=<seconds>\n                          Specify the interval (in seconds) between attempts to prune the module cache\n  -fmodules-search-all    Search even non-imported modules to resolve references\n  -fmodules-strict-decluse\n                          Like -fmodules-decluse but requires all headers to be in modules\n  -fmodules-ts            Enable support for the C++ Modules TS\n  -fmodules-user-build-path <directory>\n                          Specify the module user build path\n  -fmodules-validate-once-per-build-session\n                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session\n  -fmodules-validate-system-headers\n                          Validate the system headers that a module depends on when loading the module\n  -fmodules               Enable the 'modules' language feature\n  -fms-compatibility-version=<value>\n                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fms-compatibility      Enable full Microsoft Visual C++ compatibility\n  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler\n  -fmsc-version=<value>   Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'\n  -fno-access-control     Disable C++ access control\n  -fno-addrsig            Don't emit an address-significance table\n  -fno-apinotes-modules   Disable module-based external API notes support\n  -fno-apinotes           Disable external API notes support\n  -fno-assume-sane-operator-new\n                          Don't assume that C++'s global operator new can't alias any pointer\n  -fno-autolink           Disable generation of linker directives for automatic library linking\n  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function\n  -fno-builtin            Disable implicit builtin knowledge of functions\n  -fno-c++-static-destructors\n                          Disable C++ static destructor registration\n  -fno-char8_t            Disable C++ builtin type char8_t\n  -fno-common             Compile common globals like normal definitions\n  -fno-complete-member-pointers\n                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI\n  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings\n  -fno-coverage-mapping   Disable code coverage analysis\n  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash\n  -fno-debug-info-for-profiling\n                          Do not emit extra debug info for sample profiler.\n  -fno-debug-macro        Do not emit macro debug information\n  -fno-declspec           Disallow __declspec as a keyword\n  -fno-delayed-template-parsing\n                          Disable delayed template parsing\n  -fno-delete-null-pointer-checks\n                          Do not treat usage of null pointers as undefined behavior.\n  -fno-diagnostics-fixit-info\n                          Do not include fixit information in diagnostics\n  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'\n  -fno-discard-value-names\n                          Do not discard value names in LLVM IR\n  -fno-dollars-in-identifiers\n                          Disallow '$' in identifiers\n  -fno-double-square-bracket-attributes\n                          Disable '[[]]' attributes in all C and C++ language modes\n  -fno-elide-constructors Disable C++ copy constructor elision\n  -fno-elide-type         Do not elide types when printing diagnostics\n  -fno-experimental-isel  Disables the experimental global instruction selector\n  -fno-experimental-new-pass-manager\n                          Disables an experimental new pass manager in LLVM.\n  -fno-fine-grained-bitfield-accesses\n                          Use large-integer access for consecutive bitfield runs.\n  -fno-fixed-point        Disable fixed point types\n  -fno-force-enable-int128\n                          Disable support for int128_t type\n  -fno-gnu-inline-asm     Disable GNU style inline asm\n  -fno-integrated-as      Disable the integrated assembler\n  -fno-jump-tables        Do not use jump tables for lowering switches\n  -fno-lax-vector-conversions\n                          Disallow implicit conversions between vectors with a different number of elements or different element types\n  -fno-lto                Disable LTO mode (default)\n  -fno-merge-all-constants\n                          Disallow merging of constants\n  -fno-objc-infer-related-result-type\n                          do not infer Objective-C related result type based on method family\n  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators\n  -fno-plt                Do not use the PLT to make function calls\n  -fno-preserve-as-comments\n                          Do not preserve comments in inline assembly\n  -fno-profile-generate   Disable generation of profile instrumentation.\n  -fno-profile-instr-generate\n                          Disable generation of profile instrumentation.\n  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization\n  -fno-register-global-dtors-with-atexit\n                          Don't use atexit or __cxa_atexit to register global destructors\n  -fno-reroll-loops       Turn off loop reroller\n  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags\n  -fno-rtti-data          Control emission of RTTI data\n  -fno-rtti               Disable generation of rtti information\n  -fno-sanitize-address-poison-class-member-array-new-cookie\n                          Disable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fno-sanitize-address-use-after-scope\n                          Disable use-after-scope detection in AddressSanitizer\n  -fno-sanitize-blacklist Don't use blacklist file for sanitizers\n  -fno-sanitize-cfi-cross-dso\n                          Disable control flow integrity (CFI) checks for cross-DSO calls.\n  -fno-sanitize-coverage=<value>\n                          Disable specified features of coverage instrumentation for Sanitizers\n  -fno-sanitize-memory-track-origins\n                          Disable origins tracking in MemorySanitizer\n  -fno-sanitize-memory-use-after-dtor\n                          Disable use-after-destroy detection in MemorySanitizer\n  -fno-sanitize-recover=<value>\n                          Disable recovery for specified sanitizers\n  -fno-sanitize-stats     Disable sanitizer statistics gathering.\n  -fno-sanitize-thread-atomics\n                          Disable atomic operations instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-func-entry-exit\n                          Disable function entry/exit instrumentation in ThreadSanitizer\n  -fno-sanitize-thread-memory-access\n                          Disable memory access instrumentation in ThreadSanitizer\n  -fno-sanitize-trap=<value>\n                          Disable trapping for specified sanitizers\n  -fno-short-wchar        Force wchar_t to be an unsigned int\n  -fno-show-column        Do not include column number on diagnostics\n  -fno-show-source-location\n                          Do not include source location information with diagnostics\n  -fno-signed-char        Char is unsigned\n  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros\n  -fno-spell-checking     Disable spell-checking\n  -fno-stack-check        Disable stack checking\n  -fno-stack-protector    Disable the use of stack protectors\n  -fno-stack-size-section Don't emit section containing metadata on function stack sizes\n  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary\n  -fno-strict-float-cast-overflow\n                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions\n  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe\n  -fno-trigraphs          Do not process trigraph sequences\n  -fno-unroll-loops       Turn off loop unroller\n  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors\n  -fno-use-init-array     Don't use .init_array instead of .ctors\n  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc\n  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers\n  -fobjc-exceptions       Enable Objective-C exceptions\n  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version\n  -fobjc-weak             Enable ARC-style weak references in Objective-C\n  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.\n  -fopenmp-targets=<value>\n                          Specify comma-separated list of triples OpenMP offloading targets to be supported\n  -fopenmp                Parse OpenMP pragmas and generate parallel code.\n  -foptimization-record-file=<value>\n                          Specify the file name of any generated YAML optimization record\n  -fpack-struct=<value>   Specify the default maximum struct packing alignment\n  -fpascal-strings        Recognize and construct Pascal-style string literals\n  -fpcc-struct-return     Override the default ABI to return all structs on the stack\n  -fplt                   Use the PLT to make function calls\n  -fplugin=<dsopath>      Load the named plugin (dynamic shared object)\n  -fprebuilt-module-path=<directory>\n                          Specify the prebuilt module path\n  -fprofile-generate=<directory>\n                          Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate=<file>\n                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)\n  -fprofile-instr-generate\n                          Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)\n  -fprofile-instr-use=<value>\n                          Use instrumentation data for profile-guided optimization\n  -fprofile-sample-accurate\n                          Specifies that the sample profile is accurate\n  -fprofile-sample-use=<value>\n                          Enable sample-based profile guided optimizations\n  -fprofile-use=<pathname>\n                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.\n  -fptrauth-calls         Enable signing and authentication of all indirect calls\n  -fptrauth-intrinsics    Enable pointer-authentication intrinsics\n  -fptrauth-returns       Enable signing and authentication of return addresses\n  -fptrauth-soft          Enable software lowering of pointer authentication\n  -freciprocal-math       Allow division operations to be reassociated\n  -freg-struct-return     Override the default ABI to return small structs in registers\n  -fregister-global-dtors-with-atexit\n                          Use atexit or __cxa_atexit to register global destructors\n  -frelaxed-template-template-args\n                          Enable C++17 relaxed template template argument matching\n  -freroll-loops          Turn on loop reroller\n  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags\n  -fsanitize-address-field-padding=<value>\n                          Level of field padding for AddressSanitizer\n  -fsanitize-address-globals-dead-stripping\n                          Enable linker dead stripping of globals in AddressSanitizer\n  -fsanitize-address-poison-class-member-array-new-cookie\n                          Enable poisoning array cookies when using class member operator new[] in AddressSanitizer\n  -fsanitize-address-use-after-scope\n                          Enable use-after-scope detection in AddressSanitizer\n  -fsanitize-blacklist=<value>\n                          Path to blacklist file for sanitizers\n  -fsanitize-cfi-cross-dso\n                          Enable control flow integrity (CFI) checks for cross-DSO calls.\n  -fsanitize-cfi-icall-generalize-pointers\n                          Generalize pointers in CFI indirect call type signature checks\n  -fsanitize-coverage=<value>\n                          Specify the type of coverage instrumentation for Sanitizers\n  -fsanitize-memory-track-origins=<value>\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-track-origins\n                          Enable origins tracking in MemorySanitizer\n  -fsanitize-memory-use-after-dtor\n                          Enable use-after-destroy detection in MemorySanitizer\n  -fsanitize-recover=<value>\n                          Enable recovery for specified sanitizers\n  -fsanitize-stats        Enable sanitizer statistics gathering.\n  -fsanitize-thread-atomics\n                          Enable atomic operations instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-func-entry-exit\n                          Enable function entry/exit instrumentation in ThreadSanitizer (default)\n  -fsanitize-thread-memory-access\n                          Enable memory access instrumentation in ThreadSanitizer (default)\n  -fsanitize-trap=<value> Enable trapping for specified sanitizers\n  -fsanitize-undefined-strip-path-components=<number>\n                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.\n  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks\n  -fsave-optimization-record\n                          Generate a YAML optimization record file\n  -fseh-exceptions        Use SEH style exceptions\n  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values\n  -fshort-wchar           Force wchar_t to be a short unsigned int\n  -fshow-overloads=<value>\n                          Which overload candidates to show when overload resolution fails: best|all; defaults to all\n  -fsized-deallocation    Enable C++14 sized global deallocation functions\n  -fsjlj-exceptions       Use SjLj style exceptions\n  -fslp-vectorize         Enable the superword-level parallelism vectorization passes\n  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n  -fstack-check           Enable stack checking\n  -fstack-protector-all   Force the usage of stack protectors for all functions\n  -fstack-protector-strong\n                          Use a strong heuristic to apply stack protectors to functions\n  -fstack-protector       Enable stack protectors for functions potentially vulnerable to stack smashing\n  -fstack-size-section    Emit section containing metadata on function stack sizes\n  -fstandalone-debug      Emit full debug info for all types used by the program\n  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range\n  -fstrict-float-cast-overflow\n                          Assume that overflowing float-to-int casts are undefined (default)\n  -fstrict-return         Always treat control flow paths that fall off the end of a non-void function as unreachable\n  -fstrict-vtable-pointers\n                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects\n  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index\n  -ftrap-function=<value> Issue call to specified function rather than a trap instruction\n  -ftrapv-handler=<function name>\n                          Specify the function to be called on overflow\n  -ftrapv                 Trap on integer overflow\n  -ftrigraphs             Process trigraph sequences\n  -ftrivial-auto-var-init=<value>\n                          Initialize trivial automatic stack variables: uninitialized (default) | pattern\n  -funique-section-names  Use unique names for text and data sections (ELF Only)\n  -funroll-loops          Turn on loop unroller\n  -fuse-init-array        Use .init_array instead of .ctors\n  -fveclib=<value>        Use the given vector functions library\n  -fvectorize             Enable the loop vectorization passes\n  -fvisibility-inlines-hidden\n                          Give inline C++ member functions hidden visibility by default\n  -fvisibility-ms-compat  Give global types 'default' visibility and global functions and variables 'hidden' visibility by default\n  -fvisibility=<value>    Set the default symbol visibility for all global declarations\n  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto\n  -fwrapv                 Treat signed integer overflow as two's complement\n  -fwritable-strings      Store string literals as writable data\n  -fxray-always-emit-customevents\n                          Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-emit-typedevents\n                          Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented.\n  -fxray-always-instrument= <value>\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.\n  -fxray-attr-list= <value>\n                          Filename defining the list of functions/types for imbuing XRay attributes.\n  -fxray-instruction-threshold= <value>\n                          Sets the minimum function size to instrument with XRay\n  -fxray-instrumentation-bundle= <value>\n                          Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is 'all'.\n  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit\n  -fxray-link-deps        Tells clang to add the link dependencies for XRay.\n  -fxray-modes= <value>   List of modes to link in by default into XRay instrumented binaries.\n  -fxray-never-instrument= <value>\n                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.\n  -fzvector               Enable System z vector language extension\n  -F <value>              Add directory to framework include search path\n  --gcc-toolchain=<value> Use the gcc toolchain at the given directory\n  -gcodeview              Generate CodeView debug information\n  -gdwarf-2               Generate source-level debug information with dwarf version 2\n  -gdwarf-3               Generate source-level debug information with dwarf version 3\n  -gdwarf-4               Generate source-level debug information with dwarf version 4\n  -gdwarf-5               Generate source-level debug information with dwarf version 5\n  -gembed-source          Embed source text in DWARF debug sections\n  -gline-tables-only      Emit debug line number tables only\n  -gmodules               Generate debug info with external references to clang modules or precompiled headers\n  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections\n  -gz=<value>             DWARF debug sections compression type\n  -gz                     DWARF debug sections compression type\n  -G <size>               Put objects of at most <size> bytes into small data section (MIPS / Hexagon)\n  -g                      Generate source-level debug information\n  --help-hidden           Display help for hidden options\n  -help                   Display available options\n  --hip-device-lib-path=<value>\n                          HIP device library path\n  --hip-device-lib=<value>\n                          HIP device library\n  --hip-link              Link clang-offload-bundler bundles for HIP\n  -H                      Show header includes and nesting depth\n  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path\n  -iapinotes-modules <directory>\n                          Add directory to the API notes search path referenced by module name\n  -idirafter <value>      Add directory to AFTER include search path\n  -iframeworkwithsysroot <directory>\n                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot\n  -iframework <value>     Add directory to SYSTEM framework search path\n  -imacros <file>         Include macros from file before parsing\n  -include-pch <file>     Include precompiled header file\n  -include <file>         Include file before parsing\n  -index-header-map       Make the next included directory (-I or -F) an indexer header map\n  -index-ignore-system-symbols\n                          Ignore symbols from system headers\n  -index-record-codegen-name\n                          Record the codegen name for symbols\n  -index-store-path <value>\n                          Enable indexing with the specified data store path\n  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix\n  -iquote <directory>     Add directory to QUOTE include search path\n  -isysroot <dir>         Set the system root directory (usually /)\n  -isystem-after <directory>\n                          Add directory to end of the SYSTEM include search path\n  -isystem <directory>    Add directory to SYSTEM include search path\n  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system\n  -iwithprefixbefore <dir>\n                          Set directory to include search path with prefix\n  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix\n  -iwithsysroot <directory>\n                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot\n  -I <dir>                Add directory to include search path\n  -L <dir>                Add directory to library search path\n  -mabicalls              Enable SVR4-style position-independent code (Mips only)\n  -malign-double          Align doubles to two words in structs (x86 only)\n  -mbackchain             Link stack frames through backchain on System Z\n  -mcrc                   Allow use of CRC instructions (ARM/Mips only)\n  -MD                     Write a depfile containing user and system headers\n  -meabi <value>          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)\n  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)\n  -mexecute-only          Disallow generation of data access to code sections (ARM only)\n  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n  -mfentry                Insert calls to fentry at function entry (x86 only)\n  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mfp32                  Use 32-bit floating point registers (MIPS only)\n  -mfp64                  Use 64-bit floating point registers (MIPS only)\n  -MF <file>              Write depfile output from -MMD, -MD, -MM, or -M to <file>\n  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64 only)\n  -mglobal-merge          Enable merging of globals\n  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -MG                     Add missing headers to depfile\n  -mhvx-length=<value>    Set Hexagon Vector Length\n  -mhvx=<value>           Enable Hexagon Vector eXtensions\n  -mhvx                   Enable Hexagon Vector eXtensions\n  -miamcu                 Use Intel MCU ABI\n  --migrate               Run the migrator\n  -mincremental-linker-compatible\n                          (integrated-as) Emit an object file which can be used with an incremental linker\n  -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation\n  -mios-version-min=<value>\n                          Set iOS deployment target\n  -MJ <value>             Write a compilation database entry per input\n  -mllvm <value>          Additional arguments to forward to LLVM's option processing\n  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)\n  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.\n  -mmacosx-version-min=<value>\n                          Set Mac OS X deployment target\n  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.\n  -MMD                    Write a depfile containing user headers\n  -mmemops                Enable generation of memop instructions\n  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard\n  -mmsa                   Enable MSA ASE (MIPS only)\n  -mmt                    Enable MT ASE (MIPS only)\n  -MM                     Like -MMD, but also implies -E and writes to stdout by default\n  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)\n  -mno-crc                Disallow use of CRC instructions (Mips only)\n  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)\n  -mno-execute-only       Allow generation of data access to code sections (ARM only)\n  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n  -mno-fix-cortex-a53-835769\n                          Don't workaround Cortex-A53 erratum 835769 (AArch64 only)\n  -mno-global-merge       Disable merging of globals\n  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)\n  -mno-hvx                Disable Hexagon Vector eXtensions\n  -mno-implicit-float     Don't generate implicit floating point instructions\n  -mno-incremental-linker-compatible\n                          (integrated-as) Emit an object file which cannot be used with an incremental linker\n  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)\n  -mno-long-calls         Restore the default behaviour of not generating long calls\n  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.\n  -mno-memops             Disable generation of memop instructions\n  -mno-movt               Disallow use of movt/movw pairs (ARM only)\n  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard\n  -mno-msa                Disable MSA ASE (MIPS only)\n  -mno-mt                 Disable MT ASE (MIPS only)\n  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.\n  -mno-nvj                Disable generation of new-value jumps\n  -mno-nvs                Disable generation of new-value stores\n  -mno-outline            Disable function outlining (AArch64 only)\n  -mno-packets            Disable generation of instruction packets\n  -mno-relax              Disable linker relaxation\n  -mno-restrict-it        Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode\n  -mno-stack-arg-probe    Disable stack probes which are enabled by default\n  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)\n  -mno-xnack              Disable XNACK (AMDGPU only)\n  -mnocrc                 Disallow use of CRC instructions (ARM only)\n  -mnvj                   Enable generation of new-value jumps\n  -mnvs                   Enable generation of new-value stores\n  -module-dependency-dir <value>\n                          Directory to dump module dependencies to\n  -module-file-info       Provide information about a particular module file\n  -momit-leaf-frame-pointer\n                          Omit frame pointer setup for leaf functions\n  -moutline               Enable function outlining (AArch64 only)\n  -mpackets               Enable generation of instruction packets\n  -mpie-copy-relocations  Use copy relocations support for PIE builds\n  -mprefer-vector-width=<value>\n                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.\n  -MP                     Create phony target for each dependency (other than main file)\n  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility\n  -MQ <value>             Specify name of main file output to quote in depfile\n  -mrelax-all             (integrated-as) Relax all machine instructions\n  -mrelax                 Enable linker relaxation\n  -mrestrict-it           Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.\n  -mrtd                   Make StdCall calling convention the default\n  -msoft-float            Use software floating point\n  -mstack-alignment=<value>\n                          Set the stack alignment\n  -mstack-arg-probe       Enable stack probes\n  -mstack-probe-size=<value>\n                          Set the stack probe size\n  -mstackrealign          Force realign the stack at entry to every function\n  -mthread-model <value>  The thread model to use, e.g. posix, single (posix by default)\n  -mtp=<value>            Read thread pointer from coprocessor register (ARM only)\n  -MT <value>             Specify name of main file output in depfile\n  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)\n  -MV                     Use NMake/Jom format for the depfile\n  -mxnack                 Enable XNACK (AMDGPU only)\n  -M                      Like -MD, but also implies -E and writes to stdout by default\n  --no-cuda-gpu-arch=<value>\n                          Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. 'all' resets the list to its default value.\n  --no-cuda-include-ptx=<value>\n                          Do not include PTX for the follwing GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n  --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.\n  --no-system-header-prefix=<prefix>\n                          Treat all #include paths starting with <prefix> as not including a system header.\n  -nobuiltininc           Disable builtin #include directories\n  -nostdinc++             Disable standard #include directories for the C++ standard library\n  -ObjC++                 Treat source input files as Objective-C++ inputs\n  -objcmt-atomic-property Make migration to 'atomic' properties\n  -objcmt-migrate-all     Enable migration to modern ObjC\n  -objcmt-migrate-annotation\n                          Enable migration to property and method annotations\n  -objcmt-migrate-designated-init\n                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods\n  -objcmt-migrate-instancetype\n                          Enable migration to infer instancetype for method result type\n  -objcmt-migrate-literals\n                          Enable migration to modern ObjC literals\n  -objcmt-migrate-ns-macros\n                          Enable migration to NS_ENUM/NS_OPTIONS macros\n  -objcmt-migrate-property-dot-syntax\n                          Enable migration of setter/getter messages to property-dot syntax\n  -objcmt-migrate-property\n                          Enable migration to modern ObjC property\n  -objcmt-migrate-protocol-conformance\n                          Enable migration to add protocol conformance on classes\n  -objcmt-migrate-readonly-property\n                          Enable migration to modern ObjC readonly property\n  -objcmt-migrate-readwrite-property\n                          Enable migration to modern ObjC readwrite property\n  -objcmt-migrate-subscripting\n                          Enable migration to modern ObjC subscripting\n  -objcmt-ns-nonatomic-iosonly\n                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute\n  -objcmt-returns-innerpointer-property\n                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER\n  -objcmt-whitelist-dir-path=<value>\n                          Only modify files with a filename contained in the provided directory path\n  -ObjC                   Treat source input files as Objective-C inputs\n  -o <file>               Write output to <file>\n  -pg                     Enable mcount instrumentation\n  -pipe                   Use pipes between commands, when possible\n  --precompile            Only precompile the input\n  -print-file-name=<file> Print the full library path of <file>\n  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace\n  -print-libgcc-file-name Print the library path for the currently used compiler runtime library (\"libgcc.a\" or \"libclang_rt.builtins.*.a\")\n  -print-prog-name=<name> Print the full program path of <name>\n  -print-resource-dir     Print the resource directory pathname\n  -print-search-dirs      Print the paths used for finding libraries and programs\n  -pthread                Support POSIX threads in generated code\n  --ptxas-path=<value>    Path to ptxas (used for compiling CUDA code)\n  -P                      Disable linemarker output in -E mode\n  -Qn                     Do not emit metadata containing compiler name and version\n  -Qunused-arguments      Don't emit warning for unused driver arguments\n  -Qy                     Emit metadata containing compiler name and version\n  -relocatable-pch        Whether to build a relocatable precompiled header\n  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++\n  -rewrite-objc           Rewrite Objective-C source to C++\n  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression\n  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression\n  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression\n  -rtlib=<value>          Compiler runtime library to use\n  -R<remark>              Enable the specified remark\n  -save-stats=<value>     Save llvm statistics.\n  -save-stats             Save llvm statistics.\n  -save-temps=<value>     Save intermediate compilation results.\n  -save-temps             Save intermediate compilation results\n  -serialize-diagnostics <value>\n                          Serialize compiler diagnostics to a file\n  -std=<value>            Language standard to compile for\n  -stdlib=<value>         C++ standard library to use\n  --system-header-prefix=<prefix>\n                          Treat all #include paths starting with <prefix> as including a system header.\n  -S                      Only run preprocess and compilation steps\n  -target-variant <value> Generate code that may run on a particular variant of the deployment target\n  --target=<value>        Generate code for the given target\n  -Tbss <addr>            Set starting address of BSS to <addr>\n  -Tdata <addr>           Set starting address of DATA to <addr>\n  -time                   Time individual commands\n  -traditional-cpp        Enable some traditional CPP emulation\n  -trigraphs              Process trigraph sequences\n  -Ttext <addr>           Set starting address of TEXT to <addr>\n  -T <script>             Specify <script> as linker script\n  -undef                  undef all system defines\n  -U <macro>              Undefine macro <macro>\n  --verify-debug-info     Verify the binary representation of debug output\n  -verify-pch             Load and verify that a pre-compiled header file is not stale\n  --version               Print version information\n  -v                      Show commands to run and use verbose output\n  -Wa,<arg>               Pass the comma separated arguments in <arg> to the assembler\n  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED\n  -Wl,<arg>               Pass the comma separated arguments in <arg> to the linker\n  -working-directory <value>\n                          Resolve file paths relative to the specified directory\n  -Wp,<arg>               Pass the comma separated arguments in <arg> to the preprocessor\n  -W<warning>             Enable the specified warning\n  -w                      Suppress all warnings\n  -Xanalyzer <arg>        Pass <arg> to the static analyzer\n  -Xassembler <arg>       Pass <arg> to the assembler\n  -Xclang <arg>           Pass <arg> to the clang compiler\n  -Xcuda-fatbinary <arg>  Pass <arg> to fatbinary invocation\n  -Xcuda-ptxas <arg>      Pass <arg> to the ptxas assembler\n  -Xlinker <arg>          Pass <arg> to the linker\n  -Xopenmp-target=<triple> <arg>\n                          Pass <arg> to the target offloading toolchain identified by <triple>.\n  -Xopenmp-target <arg>   Pass <arg> to the target offloading toolchain.\n  -Xpreprocessor <arg>    Pass <arg> to the preprocessor\n  -x <language>           Treat subsequent input files as having type <language>\n  -z <arg>                Pass -z <arg> to the linker\n```\n","slug":"iOS/Languages/CAlians/Compiler/g++","published":1,"updated":"2021-09-16T06:42:30.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktv5rn50005giu9kex0w5tib","content":"<p>MacBook-P:~ sumian$ g++ –help</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OVERVIEW: clang LLVM compiler</span><br><span class=\"line\"></span><br><span class=\"line\">USAGE: clang [options] &lt;inputs&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS:</span><br><span class=\"line\"><span class=\"meta\">  -#</span><span class=\"bash\"><span class=\"comment\">##                    Print (but do not run) the commands to run for this compilation</span></span></span><br><span class=\"line\">  --analyzer-output &lt;value&gt;</span><br><span class=\"line\">                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).</span><br><span class=\"line\">  --analyze               Run the static analyzer</span><br><span class=\"line\">  -arcmt-migrate-emit-errors</span><br><span class=\"line\">                          Emit ARC errors even if the migrator can fix them</span><br><span class=\"line\">  -arcmt-migrate-report-output &lt;value&gt;</span><br><span class=\"line\">                          Output path for the plist report</span><br><span class=\"line\">  -B &lt;dir&gt;                Add &lt;dir&gt; to search path for binaries and object files used implicitly</span><br><span class=\"line\">  -CC                     Include comments from within macros in preprocessed output</span><br><span class=\"line\">  -cfguard                Emit tables required for Windows Control Flow Guard.</span><br><span class=\"line\">  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.</span><br><span class=\"line\">  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.</span><br><span class=\"line\">  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.</span><br><span class=\"line\">  -cl-fp32-correctly-rounded-divide-sqrt</span><br><span class=\"line\">                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.</span><br><span class=\"line\">  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.</span><br><span class=\"line\">  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.</span><br><span class=\"line\">  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.</span><br><span class=\"line\">  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.</span><br><span class=\"line\">  -cl-single-precision-constant</span><br><span class=\"line\">                          OpenCL only. Treat double precision floating-point constant as single precision constant.</span><br><span class=\"line\">  -cl-std=&lt;value&gt;         OpenCL language standard to compile for.</span><br><span class=\"line\">  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.</span><br><span class=\"line\">  -cl-uniform-work-group-size</span><br><span class=\"line\">                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel</span><br><span class=\"line\">  -cl-unsafe-math-optimizations</span><br><span class=\"line\">                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.</span><br><span class=\"line\">  --config &lt;value&gt;        Specifies configuration file</span><br><span class=\"line\">  --cuda-compile-host-device</span><br><span class=\"line\">                          Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.</span><br><span class=\"line\">  --cuda-device-only      Compile CUDA code for device only</span><br><span class=\"line\">  --cuda-gpu-arch=&lt;value&gt; CUDA GPU architecture (e.g. sm_35).  May be specified more than once.</span><br><span class=\"line\">  --cuda-host-only        Compile CUDA code for host only.  Has no effect on non-CUDA compilations.</span><br><span class=\"line\">  --cuda-include-ptx=&lt;value&gt;</span><br><span class=\"line\">                          Include PTX for the follwing GPU architecture (e.g. sm_35) or &#x27;all&#x27;. May be specified more than once.</span><br><span class=\"line\">  --cuda-noopt-device-debug</span><br><span class=\"line\">                          Enable device-side debug info generation. Disables ptxas optimizations.</span><br><span class=\"line\">  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation</span><br><span class=\"line\">  --cuda-path=&lt;value&gt;     CUDA installation path</span><br><span class=\"line\">  -cxx-isystem &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to the C++ SYSTEM include search path</span><br><span class=\"line\">  -C                      Include comments in preprocessed output</span><br><span class=\"line\">  -c                      Only run preprocess, compile, and assemble steps</span><br><span class=\"line\">  -dD                     Print macro definitions in -E mode in addition to normal output</span><br><span class=\"line\">  -dependency-dot &lt;value&gt; Filename to write DOT-formatted header dependencies to</span><br><span class=\"line\">  -dependency-file &lt;value&gt;</span><br><span class=\"line\">                          Filename (or -) to write dependency output to</span><br><span class=\"line\">  -dI                     Print include directives in -E mode in addition to normal output</span><br><span class=\"line\">  -dM                     Print macro definitions in -E mode instead of normal output</span><br><span class=\"line\">  -D &lt;macro&gt;=&lt;value&gt;      Define &lt;macro&gt; to &lt;value&gt; (or 1 if &lt;value&gt; omitted)</span><br><span class=\"line\">  -emit-ast               Emit Clang AST files for source inputs</span><br><span class=\"line\">  -emit-llvm              Use the LLVM representation for assembler and object files</span><br><span class=\"line\">  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang&lt;value&gt;</span><br><span class=\"line\">                          Trivial automatic variable initialization to zero is only here for benchmarks, it&#x27;ll eventually be removed, and I&#x27;m OK with that because I&#x27;m only using it to benchmark</span><br><span class=\"line\">  -E                      Only run the preprocessor</span><br><span class=\"line\">  -faddrsig               Emit an address-significance table</span><br><span class=\"line\">  -faligned-allocation    Enable C++17 aligned allocation functions</span><br><span class=\"line\">  -fallow-editor-placeholders</span><br><span class=\"line\">                          Treat editor placeholders as valid source code</span><br><span class=\"line\">  -fansi-escape-codes     Use ANSI escape codes for diagnostics</span><br><span class=\"line\">  -fapinotes-cache-path=&lt;directory&gt;</span><br><span class=\"line\">                          Does nothing; API notes are no longer cached separately from modules</span><br><span class=\"line\">  -fapinotes-modules      Enable module-based external API notes support</span><br><span class=\"line\">  -fapinotes-swift-version=&lt;version&gt;</span><br><span class=\"line\">                          Specify the Swift version to use when filtering API notes</span><br><span class=\"line\">  -fapinotes              Enable external API notes support</span><br><span class=\"line\">  -fapple-kext            Use Apple&#x27;s kernel extensions ABI</span><br><span class=\"line\">  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling</span><br><span class=\"line\">  -fapplication-extension Restrict code to those available for App Extensions</span><br><span class=\"line\">  -fblocks                Enable the &#x27;blocks&#x27; language feature</span><br><span class=\"line\">  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler</span><br><span class=\"line\">  -fbuild-session-file=&lt;file&gt;</span><br><span class=\"line\">                          Use the last modification time of &lt;file&gt; as the build session timestamp</span><br><span class=\"line\">  -fbuild-session-timestamp=&lt;time since Epoch in seconds&gt;</span><br><span class=\"line\">                          Time when the current build session started</span><br><span class=\"line\">  -fbuiltin-module-map    Load the clang builtins module map file.</span><br><span class=\"line\">  -fc++-static-destructors</span><br><span class=\"line\">                          Enable C++ static destructor registration (the default)</span><br><span class=\"line\">  -fcf-protection=&lt;value&gt; Instrument control-flow architecture protection. Options: return, branch, full, none.</span><br><span class=\"line\">  -fcf-protection         Enable cf-protection in &#x27;full&#x27; mode</span><br><span class=\"line\">  -fchar8_t               Enable C++ builtin type char8_t</span><br><span class=\"line\">  -fclang-abi-compat=&lt;version&gt;</span><br><span class=\"line\">                          Attempt to match the ABI of Clang &lt;version&gt;</span><br><span class=\"line\">  -fcolor-diagnostics     Use colors in diagnostics</span><br><span class=\"line\">  -fcomment-block-commands=&lt;arg&gt;</span><br><span class=\"line\">                          Treat each comma separated argument in &lt;arg&gt; as a documentation comment block command</span><br><span class=\"line\">  -fcomplete-member-pointers</span><br><span class=\"line\">                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI</span><br><span class=\"line\">  -fcoroutines-ts         Enable support for the C++ Coroutines TS</span><br><span class=\"line\">  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis</span><br><span class=\"line\">  -fcuda-approx-transcendentals</span><br><span class=\"line\">                          Use approximate transcendental functions</span><br><span class=\"line\">  -fcuda-flush-denormals-to-zero</span><br><span class=\"line\">                          Flush denormal floating point values to zero in CUDA device mode.</span><br><span class=\"line\">  -fcuda-rdc              Generate relocatable device code, also known as separate compilation mode.</span><br><span class=\"line\">  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces.</span><br><span class=\"line\">  -fcxx-exceptions        Enable C++ exceptions</span><br><span class=\"line\">  -fdata-sections         Place each data in its own section (ELF Only)</span><br><span class=\"line\">  -fdebug-info-for-profiling</span><br><span class=\"line\">                          Emit extra debug info to make sample profile more accurate.</span><br><span class=\"line\">  -fdebug-macro           Emit macro debug information</span><br><span class=\"line\">  -fdebug-prefix-map=&lt;value&gt;</span><br><span class=\"line\">                          remap file source paths in debug info</span><br><span class=\"line\">  -fdebug-types-section   Place debug types in their own section (ELF Only)</span><br><span class=\"line\">  -fdeclspec              Allow __declspec as a keyword</span><br><span class=\"line\">  -fdelayed-template-parsing</span><br><span class=\"line\">                          Parse templated function definitions at the end of the translation unit</span><br><span class=\"line\">  -fdelete-null-pointer-checks</span><br><span class=\"line\">                          Treat usage of null pointers as undefined behavior.</span><br><span class=\"line\">  -fdiagnostics-absolute-paths</span><br><span class=\"line\">                          Print absolute paths in diagnostics</span><br><span class=\"line\">  -fdiagnostics-hotness-threshold=&lt;number&gt;</span><br><span class=\"line\">                          Prevent optimization remarks from being output if they do not have at least this profile count</span><br><span class=\"line\">  -fdiagnostics-parseable-fixits</span><br><span class=\"line\">                          Print fix-its in machine parseable form</span><br><span class=\"line\">  -fdiagnostics-print-source-range-info</span><br><span class=\"line\">                          Print source range spans in numeric form</span><br><span class=\"line\">  -fdiagnostics-show-hotness</span><br><span class=\"line\">                          Enable profile hotness information in diagnostic line</span><br><span class=\"line\">  -fdiagnostics-show-note-include-stack</span><br><span class=\"line\">                          Display include stacks for diagnostic notes</span><br><span class=\"line\">  -fdiagnostics-show-option</span><br><span class=\"line\">                          Print option name with mappable diagnostics</span><br><span class=\"line\">  -fdiagnostics-show-template-tree</span><br><span class=\"line\">                          Print a template comparison tree for differing templates</span><br><span class=\"line\">  -fdigraphs              Enable alternative token representations &#x27;&lt;:&#x27;, &#x27;:&gt;&#x27;, &#x27;&lt;%&#x27;, &#x27;%&gt;&#x27;, &#x27;%:&#x27;, &#x27;%:%:&#x27; (default)</span><br><span class=\"line\">  -fdiscard-value-names   Discard value names in LLVM IR</span><br><span class=\"line\">  -fdollars-in-identifiers</span><br><span class=\"line\">                          Allow &#x27;$&#x27; in identifiers</span><br><span class=\"line\">  -fdouble-square-bracket-attributes</span><br><span class=\"line\">                          Enable &#x27;[[]]&#x27; attributes in all C and C++ language modes</span><br><span class=\"line\">  -fdwarf-exceptions      Use DWARF style exceptions</span><br><span class=\"line\">  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker</span><br><span class=\"line\">  -fembed-bitcode=&lt;option&gt;</span><br><span class=\"line\">                          Embed LLVM bitcode (option: off, all, bitcode, marker)</span><br><span class=\"line\">  -fembed-bitcode         Embed LLVM IR bitcode as data</span><br><span class=\"line\">  -femit-all-decls        Emit all declarations, even if unused</span><br><span class=\"line\">  -femulated-tls          Use emutls functions to access thread_local variables</span><br><span class=\"line\">  -fenable-matrix         Enable matrix data type and related builtin functions</span><br><span class=\"line\">  -fexceptions            Enable support for exception handling</span><br><span class=\"line\">  -fexperimental-isel     Enables the experimental global instruction selector</span><br><span class=\"line\">  -fexperimental-new-pass-manager</span><br><span class=\"line\">                          Enables an experimental new pass manager in LLVM.</span><br><span class=\"line\">  -ffast-math             Allow aggressive, lossy floating-point optimizations</span><br><span class=\"line\">  -ffine-grained-bitfield-accesses</span><br><span class=\"line\">                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.</span><br><span class=\"line\">  -ffixed-point           Enable fixed point types</span><br><span class=\"line\">  -ffixed-r19             Reserve register r19 (Hexagon only)</span><br><span class=\"line\">  -ffixed-r9              Reserve the r9 register (ARM only)</span><br><span class=\"line\">  -ffixed-x18             Reserve the x18 register (AArch64 only)</span><br><span class=\"line\">  -ffixed-x20             Reserve the x20 register (AArch64 only)</span><br><span class=\"line\">  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization</span><br><span class=\"line\">  -fforce-enable-int128   Enable support for int128_t type</span><br><span class=\"line\">  -ffp-contract=&lt;value&gt;   Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)</span><br><span class=\"line\">  -ffreestanding          Assert that the compilation takes place in a freestanding environment</span><br><span class=\"line\">  -ffunction-sections     Place each function in its own section (ELF Only)</span><br><span class=\"line\">  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard</span><br><span class=\"line\">  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime</span><br><span class=\"line\">  -fgnu89-inline          Use the gnu89 inline semantics</span><br><span class=\"line\">  -fimplicit-module-maps  Implicitly search the file system for module map files.</span><br><span class=\"line\">  -finline-functions      Inline suitable functions</span><br><span class=\"line\">  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline</span><br><span class=\"line\">  -finstrument-function-entry-bare</span><br><span class=\"line\">                          Instrument function entry only, after inlining, without arguments to the instrumentation call</span><br><span class=\"line\">  -finstrument-functions-after-inlining</span><br><span class=\"line\">                          Like -finstrument-functions, but insert the calls after inlining</span><br><span class=\"line\">  -finstrument-functions  Generate calls to instrument function entry and exit</span><br><span class=\"line\">  -fintegrated-as         Enable the integrated assembler</span><br><span class=\"line\">  -flto-jobs=&lt;value&gt;      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)</span><br><span class=\"line\">  -flto=&lt;value&gt;           Set LTO mode to either &#x27;full&#x27; or &#x27;thin&#x27;</span><br><span class=\"line\">  -flto                   Enable LTO in &#x27;full&#x27; mode</span><br><span class=\"line\">  -fmath-errno            Require math functions to indicate errors by setting errno</span><br><span class=\"line\">  -fmax-type-align=&lt;value&gt;</span><br><span class=\"line\">                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment</span><br><span class=\"line\">  -fmerge-all-constants   Allow merging of constants</span><br><span class=\"line\">  -fmodule-file=[&lt;name&gt;=]&lt;file&gt;</span><br><span class=\"line\">                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.</span><br><span class=\"line\">  -fmodule-map-file=&lt;file&gt;</span><br><span class=\"line\">                          Load this module map file</span><br><span class=\"line\">  -fmodule-name=&lt;name&gt;    Specify the name of the module to build</span><br><span class=\"line\">  -fmodules-cache-path=&lt;directory&gt;</span><br><span class=\"line\">                          Specify the module cache path</span><br><span class=\"line\">  -fmodules-decluse       Require declaration of modules used within a module</span><br><span class=\"line\">  -fmodules-disable-diagnostic-validation</span><br><span class=\"line\">                          Disable validation of the diagnostic options when loading the module</span><br><span class=\"line\">  -fmodules-ignore-macro=&lt;value&gt;</span><br><span class=\"line\">                          Ignore the definition of the given macro when building and loading modules</span><br><span class=\"line\">  -fmodules-prune-after=&lt;seconds&gt;</span><br><span class=\"line\">                          Specify the interval (in seconds) after which a module file will be considered unused</span><br><span class=\"line\">  -fmodules-prune-interval=&lt;seconds&gt;</span><br><span class=\"line\">                          Specify the interval (in seconds) between attempts to prune the module cache</span><br><span class=\"line\">  -fmodules-search-all    Search even non-imported modules to resolve references</span><br><span class=\"line\">  -fmodules-strict-decluse</span><br><span class=\"line\">                          Like -fmodules-decluse but requires all headers to be in modules</span><br><span class=\"line\">  -fmodules-ts            Enable support for the C++ Modules TS</span><br><span class=\"line\">  -fmodules-user-build-path &lt;directory&gt;</span><br><span class=\"line\">                          Specify the module user build path</span><br><span class=\"line\">  -fmodules-validate-once-per-build-session</span><br><span class=\"line\">                          Don&#x27;t verify input files for the modules if the module has been successfully validated or loaded during this build session</span><br><span class=\"line\">  -fmodules-validate-system-headers</span><br><span class=\"line\">                          Validate the system headers that a module depends on when loading the module</span><br><span class=\"line\">  -fmodules               Enable the &#x27;modules&#x27; language feature</span><br><span class=\"line\">  -fms-compatibility-version=&lt;value&gt;</span><br><span class=\"line\">                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don&#x27;t define it (default))</span><br><span class=\"line\">  -fms-compatibility      Enable full Microsoft Visual C++ compatibility</span><br><span class=\"line\">  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler</span><br><span class=\"line\">  -fmsc-version=&lt;value&gt;   Microsoft compiler version number to report in _MSC_VER (0 = don&#x27;t define it (default))</span><br><span class=\"line\">  -fnew-alignment=&lt;align&gt; Specifies the largest alignment guaranteed by &#x27;::operator new(size_t)&#x27;</span><br><span class=\"line\">  -fno-access-control     Disable C++ access control</span><br><span class=\"line\">  -fno-addrsig            Don&#x27;t emit an address-significance table</span><br><span class=\"line\">  -fno-apinotes-modules   Disable module-based external API notes support</span><br><span class=\"line\">  -fno-apinotes           Disable external API notes support</span><br><span class=\"line\">  -fno-assume-sane-operator-new</span><br><span class=\"line\">                          Don&#x27;t assume that C++&#x27;s global operator new can&#x27;t alias any pointer</span><br><span class=\"line\">  -fno-autolink           Disable generation of linker directives for automatic library linking</span><br><span class=\"line\">  -fno-builtin-&lt;value&gt;    Disable implicit builtin knowledge of a specific function</span><br><span class=\"line\">  -fno-builtin            Disable implicit builtin knowledge of functions</span><br><span class=\"line\">  -fno-c++-static-destructors</span><br><span class=\"line\">                          Disable C++ static destructor registration</span><br><span class=\"line\">  -fno-char8_t            Disable C++ builtin type char8_t</span><br><span class=\"line\">  -fno-common             Compile common globals like normal definitions</span><br><span class=\"line\">  -fno-complete-member-pointers</span><br><span class=\"line\">                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI</span><br><span class=\"line\">  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings</span><br><span class=\"line\">  -fno-coverage-mapping   Disable code coverage analysis</span><br><span class=\"line\">  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash</span><br><span class=\"line\">  -fno-debug-info-for-profiling</span><br><span class=\"line\">                          Do not emit extra debug info for sample profiler.</span><br><span class=\"line\">  -fno-debug-macro        Do not emit macro debug information</span><br><span class=\"line\">  -fno-declspec           Disallow __declspec as a keyword</span><br><span class=\"line\">  -fno-delayed-template-parsing</span><br><span class=\"line\">                          Disable delayed template parsing</span><br><span class=\"line\">  -fno-delete-null-pointer-checks</span><br><span class=\"line\">                          Do not treat usage of null pointers as undefined behavior.</span><br><span class=\"line\">  -fno-diagnostics-fixit-info</span><br><span class=\"line\">                          Do not include fixit information in diagnostics</span><br><span class=\"line\">  -fno-digraphs           Disallow alternative token representations &#x27;&lt;:&#x27;, &#x27;:&gt;&#x27;, &#x27;&lt;%&#x27;, &#x27;%&gt;&#x27;, &#x27;%:&#x27;, &#x27;%:%:&#x27;</span><br><span class=\"line\">  -fno-discard-value-names</span><br><span class=\"line\">                          Do not discard value names in LLVM IR</span><br><span class=\"line\">  -fno-dollars-in-identifiers</span><br><span class=\"line\">                          Disallow &#x27;$&#x27; in identifiers</span><br><span class=\"line\">  -fno-double-square-bracket-attributes</span><br><span class=\"line\">                          Disable &#x27;[[]]&#x27; attributes in all C and C++ language modes</span><br><span class=\"line\">  -fno-elide-constructors Disable C++ copy constructor elision</span><br><span class=\"line\">  -fno-elide-type         Do not elide types when printing diagnostics</span><br><span class=\"line\">  -fno-experimental-isel  Disables the experimental global instruction selector</span><br><span class=\"line\">  -fno-experimental-new-pass-manager</span><br><span class=\"line\">                          Disables an experimental new pass manager in LLVM.</span><br><span class=\"line\">  -fno-fine-grained-bitfield-accesses</span><br><span class=\"line\">                          Use large-integer access for consecutive bitfield runs.</span><br><span class=\"line\">  -fno-fixed-point        Disable fixed point types</span><br><span class=\"line\">  -fno-force-enable-int128</span><br><span class=\"line\">                          Disable support for int128_t type</span><br><span class=\"line\">  -fno-gnu-inline-asm     Disable GNU style inline asm</span><br><span class=\"line\">  -fno-integrated-as      Disable the integrated assembler</span><br><span class=\"line\">  -fno-jump-tables        Do not use jump tables for lowering switches</span><br><span class=\"line\">  -fno-lax-vector-conversions</span><br><span class=\"line\">                          Disallow implicit conversions between vectors with a different number of elements or different element types</span><br><span class=\"line\">  -fno-lto                Disable LTO mode (default)</span><br><span class=\"line\">  -fno-merge-all-constants</span><br><span class=\"line\">                          Disallow merging of constants</span><br><span class=\"line\">  -fno-objc-infer-related-result-type</span><br><span class=\"line\">                          do not infer Objective-C related result type based on method family</span><br><span class=\"line\">  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators</span><br><span class=\"line\">  -fno-plt                Do not use the PLT to make function calls</span><br><span class=\"line\">  -fno-preserve-as-comments</span><br><span class=\"line\">                          Do not preserve comments in inline assembly</span><br><span class=\"line\">  -fno-profile-generate   Disable generation of profile instrumentation.</span><br><span class=\"line\">  -fno-profile-instr-generate</span><br><span class=\"line\">                          Disable generation of profile instrumentation.</span><br><span class=\"line\">  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization</span><br><span class=\"line\">  -fno-register-global-dtors-with-atexit</span><br><span class=\"line\">                          Don&#x27;t use atexit or __cxa_atexit to register global destructors</span><br><span class=\"line\">  -fno-reroll-loops       Turn off loop reroller</span><br><span class=\"line\">  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags</span><br><span class=\"line\">  -fno-rtti-data          Control emission of RTTI data</span><br><span class=\"line\">  -fno-rtti               Disable generation of rtti information</span><br><span class=\"line\">  -fno-sanitize-address-poison-class-member-array-new-cookie</span><br><span class=\"line\">                          Disable poisoning array cookies when using class member operator new[] in AddressSanitizer</span><br><span class=\"line\">  -fno-sanitize-address-use-after-scope</span><br><span class=\"line\">                          Disable use-after-scope detection in AddressSanitizer</span><br><span class=\"line\">  -fno-sanitize-blacklist Don&#x27;t use blacklist file for sanitizers</span><br><span class=\"line\">  -fno-sanitize-cfi-cross-dso</span><br><span class=\"line\">                          Disable control flow integrity (CFI) checks for cross-DSO calls.</span><br><span class=\"line\">  -fno-sanitize-coverage=&lt;value&gt;</span><br><span class=\"line\">                          Disable specified features of coverage instrumentation for Sanitizers</span><br><span class=\"line\">  -fno-sanitize-memory-track-origins</span><br><span class=\"line\">                          Disable origins tracking in MemorySanitizer</span><br><span class=\"line\">  -fno-sanitize-memory-use-after-dtor</span><br><span class=\"line\">                          Disable use-after-destroy detection in MemorySanitizer</span><br><span class=\"line\">  -fno-sanitize-recover=&lt;value&gt;</span><br><span class=\"line\">                          Disable recovery for specified sanitizers</span><br><span class=\"line\">  -fno-sanitize-stats     Disable sanitizer statistics gathering.</span><br><span class=\"line\">  -fno-sanitize-thread-atomics</span><br><span class=\"line\">                          Disable atomic operations instrumentation in ThreadSanitizer</span><br><span class=\"line\">  -fno-sanitize-thread-func-entry-exit</span><br><span class=\"line\">                          Disable function entry/exit instrumentation in ThreadSanitizer</span><br><span class=\"line\">  -fno-sanitize-thread-memory-access</span><br><span class=\"line\">                          Disable memory access instrumentation in ThreadSanitizer</span><br><span class=\"line\">  -fno-sanitize-trap=&lt;value&gt;</span><br><span class=\"line\">                          Disable trapping for specified sanitizers</span><br><span class=\"line\">  -fno-short-wchar        Force wchar_t to be an unsigned int</span><br><span class=\"line\">  -fno-show-column        Do not include column number on diagnostics</span><br><span class=\"line\">  -fno-show-source-location</span><br><span class=\"line\">                          Do not include source location information with diagnostics</span><br><span class=\"line\">  -fno-signed-char        Char is unsigned</span><br><span class=\"line\">  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros</span><br><span class=\"line\">  -fno-spell-checking     Disable spell-checking</span><br><span class=\"line\">  -fno-stack-check        Disable stack checking</span><br><span class=\"line\">  -fno-stack-protector    Disable the use of stack protectors</span><br><span class=\"line\">  -fno-stack-size-section Don&#x27;t emit section containing metadata on function stack sizes</span><br><span class=\"line\">  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary</span><br><span class=\"line\">  -fno-strict-float-cast-overflow</span><br><span class=\"line\">                          Relax language rules and try to match the behavior of the target&#x27;s native float-to-int conversion instructions</span><br><span class=\"line\">  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe</span><br><span class=\"line\">  -fno-trigraphs          Do not process trigraph sequences</span><br><span class=\"line\">  -fno-unroll-loops       Turn off loop unroller</span><br><span class=\"line\">  -fno-use-cxa-atexit     Don&#x27;t use __cxa_atexit for calling destructors</span><br><span class=\"line\">  -fno-use-init-array     Don&#x27;t use .init_array instead of .ctors</span><br><span class=\"line\">  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc</span><br><span class=\"line\">  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers</span><br><span class=\"line\">  -fobjc-exceptions       Enable Objective-C exceptions</span><br><span class=\"line\">  -fobjc-runtime=&lt;value&gt;  Specify the target Objective-C runtime kind and version</span><br><span class=\"line\">  -fobjc-weak             Enable ARC-style weak references in Objective-C</span><br><span class=\"line\">  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.</span><br><span class=\"line\">  -fopenmp-targets=&lt;value&gt;</span><br><span class=\"line\">                          Specify comma-separated list of triples OpenMP offloading targets to be supported</span><br><span class=\"line\">  -fopenmp                Parse OpenMP pragmas and generate parallel code.</span><br><span class=\"line\">  -foptimization-record-file=&lt;value&gt;</span><br><span class=\"line\">                          Specify the file name of any generated YAML optimization record</span><br><span class=\"line\">  -fpack-struct=&lt;value&gt;   Specify the default maximum struct packing alignment</span><br><span class=\"line\">  -fpascal-strings        Recognize and construct Pascal-style string literals</span><br><span class=\"line\">  -fpcc-struct-return     Override the default ABI to return all structs on the stack</span><br><span class=\"line\">  -fplt                   Use the PLT to make function calls</span><br><span class=\"line\">  -fplugin=&lt;dsopath&gt;      Load the named plugin (dynamic shared object)</span><br><span class=\"line\">  -fprebuilt-module-path=&lt;directory&gt;</span><br><span class=\"line\">                          Specify the prebuilt module path</span><br><span class=\"line\">  -fprofile-generate=&lt;directory&gt;</span><br><span class=\"line\">                          Generate instrumented code to collect execution counts into &lt;directory&gt;/default.profraw (overridden by LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-instr-generate=&lt;file&gt;</span><br><span class=\"line\">                          Generate instrumented code to collect execution counts into &lt;file&gt; (overridden by LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-instr-generate</span><br><span class=\"line\">                          Generate instrumented code to collect execution counts into default.profraw file (overridden by &#x27;=&#x27; form of option or LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-instr-use=&lt;value&gt;</span><br><span class=\"line\">                          Use instrumentation data for profile-guided optimization</span><br><span class=\"line\">  -fprofile-sample-accurate</span><br><span class=\"line\">                          Specifies that the sample profile is accurate</span><br><span class=\"line\">  -fprofile-sample-use=&lt;value&gt;</span><br><span class=\"line\">                          Enable sample-based profile guided optimizations</span><br><span class=\"line\">  -fprofile-use=&lt;pathname&gt;</span><br><span class=\"line\">                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from &lt;pathname&gt;/default.profdata. Otherwise, it reads from file &lt;pathname&gt;.</span><br><span class=\"line\">  -fptrauth-calls         Enable signing and authentication of all indirect calls</span><br><span class=\"line\">  -fptrauth-intrinsics    Enable pointer-authentication intrinsics</span><br><span class=\"line\">  -fptrauth-returns       Enable signing and authentication of return addresses</span><br><span class=\"line\">  -fptrauth-soft          Enable software lowering of pointer authentication</span><br><span class=\"line\">  -freciprocal-math       Allow division operations to be reassociated</span><br><span class=\"line\">  -freg-struct-return     Override the default ABI to return small structs in registers</span><br><span class=\"line\">  -fregister-global-dtors-with-atexit</span><br><span class=\"line\">                          Use atexit or __cxa_atexit to register global destructors</span><br><span class=\"line\">  -frelaxed-template-template-args</span><br><span class=\"line\">                          Enable C++17 relaxed template template argument matching</span><br><span class=\"line\">  -freroll-loops          Turn on loop reroller</span><br><span class=\"line\">  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags</span><br><span class=\"line\">  -fsanitize-address-field-padding=&lt;value&gt;</span><br><span class=\"line\">                          Level of field padding for AddressSanitizer</span><br><span class=\"line\">  -fsanitize-address-globals-dead-stripping</span><br><span class=\"line\">                          Enable linker dead stripping of globals in AddressSanitizer</span><br><span class=\"line\">  -fsanitize-address-poison-class-member-array-new-cookie</span><br><span class=\"line\">                          Enable poisoning array cookies when using class member operator new[] in AddressSanitizer</span><br><span class=\"line\">  -fsanitize-address-use-after-scope</span><br><span class=\"line\">                          Enable use-after-scope detection in AddressSanitizer</span><br><span class=\"line\">  -fsanitize-blacklist=&lt;value&gt;</span><br><span class=\"line\">                          Path to blacklist file for sanitizers</span><br><span class=\"line\">  -fsanitize-cfi-cross-dso</span><br><span class=\"line\">                          Enable control flow integrity (CFI) checks for cross-DSO calls.</span><br><span class=\"line\">  -fsanitize-cfi-icall-generalize-pointers</span><br><span class=\"line\">                          Generalize pointers in CFI indirect call type signature checks</span><br><span class=\"line\">  -fsanitize-coverage=&lt;value&gt;</span><br><span class=\"line\">                          Specify the type of coverage instrumentation for Sanitizers</span><br><span class=\"line\">  -fsanitize-memory-track-origins=&lt;value&gt;</span><br><span class=\"line\">                          Enable origins tracking in MemorySanitizer</span><br><span class=\"line\">  -fsanitize-memory-track-origins</span><br><span class=\"line\">                          Enable origins tracking in MemorySanitizer</span><br><span class=\"line\">  -fsanitize-memory-use-after-dtor</span><br><span class=\"line\">                          Enable use-after-destroy detection in MemorySanitizer</span><br><span class=\"line\">  -fsanitize-recover=&lt;value&gt;</span><br><span class=\"line\">                          Enable recovery for specified sanitizers</span><br><span class=\"line\">  -fsanitize-stats        Enable sanitizer statistics gathering.</span><br><span class=\"line\">  -fsanitize-thread-atomics</span><br><span class=\"line\">                          Enable atomic operations instrumentation in ThreadSanitizer (default)</span><br><span class=\"line\">  -fsanitize-thread-func-entry-exit</span><br><span class=\"line\">                          Enable function entry/exit instrumentation in ThreadSanitizer (default)</span><br><span class=\"line\">  -fsanitize-thread-memory-access</span><br><span class=\"line\">                          Enable memory access instrumentation in ThreadSanitizer (default)</span><br><span class=\"line\">  -fsanitize-trap=&lt;value&gt; Enable trapping for specified sanitizers</span><br><span class=\"line\">  -fsanitize-undefined-strip-path-components=&lt;number&gt;</span><br><span class=\"line\">                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.</span><br><span class=\"line\">  -fsanitize=&lt;check&gt;      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks</span><br><span class=\"line\">  -fsave-optimization-record</span><br><span class=\"line\">                          Generate a YAML optimization record file</span><br><span class=\"line\">  -fseh-exceptions        Use SEH style exceptions</span><br><span class=\"line\">  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values</span><br><span class=\"line\">  -fshort-wchar           Force wchar_t to be a short unsigned int</span><br><span class=\"line\">  -fshow-overloads=&lt;value&gt;</span><br><span class=\"line\">                          Which overload candidates to show when overload resolution fails: best|all; defaults to all</span><br><span class=\"line\">  -fsized-deallocation    Enable C++14 sized global deallocation functions</span><br><span class=\"line\">  -fsjlj-exceptions       Use SjLj style exceptions</span><br><span class=\"line\">  -fslp-vectorize         Enable the superword-level parallelism vectorization passes</span><br><span class=\"line\">  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF</span><br><span class=\"line\">  -fstack-check           Enable stack checking</span><br><span class=\"line\">  -fstack-protector-all   Force the usage of stack protectors for all functions</span><br><span class=\"line\">  -fstack-protector-strong</span><br><span class=\"line\">                          Use a strong heuristic to apply stack protectors to functions</span><br><span class=\"line\">  -fstack-protector       Enable stack protectors for functions potentially vulnerable to stack smashing</span><br><span class=\"line\">  -fstack-size-section    Emit section containing metadata on function stack sizes</span><br><span class=\"line\">  -fstandalone-debug      Emit full debug info for all types used by the program</span><br><span class=\"line\">  -fstrict-enums          Enable optimizations based on the strict definition of an enum&#x27;s value range</span><br><span class=\"line\">  -fstrict-float-cast-overflow</span><br><span class=\"line\">                          Assume that overflowing float-to-int casts are undefined (default)</span><br><span class=\"line\">  -fstrict-return         Always treat control flow paths that fall off the end of a non-void function as unreachable</span><br><span class=\"line\">  -fstrict-vtable-pointers</span><br><span class=\"line\">                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects</span><br><span class=\"line\">  -fthinlto-index=&lt;value&gt; Perform ThinLTO importing using provided function summary index</span><br><span class=\"line\">  -ftrap-function=&lt;value&gt; Issue call to specified function rather than a trap instruction</span><br><span class=\"line\">  -ftrapv-handler=&lt;function name&gt;</span><br><span class=\"line\">                          Specify the function to be called on overflow</span><br><span class=\"line\">  -ftrapv                 Trap on integer overflow</span><br><span class=\"line\">  -ftrigraphs             Process trigraph sequences</span><br><span class=\"line\">  -ftrivial-auto-var-init=&lt;value&gt;</span><br><span class=\"line\">                          Initialize trivial automatic stack variables: uninitialized (default) | pattern</span><br><span class=\"line\">  -funique-section-names  Use unique names for text and data sections (ELF Only)</span><br><span class=\"line\">  -funroll-loops          Turn on loop unroller</span><br><span class=\"line\">  -fuse-init-array        Use .init_array instead of .ctors</span><br><span class=\"line\">  -fveclib=&lt;value&gt;        Use the given vector functions library</span><br><span class=\"line\">  -fvectorize             Enable the loop vectorization passes</span><br><span class=\"line\">  -fvisibility-inlines-hidden</span><br><span class=\"line\">                          Give inline C++ member functions hidden visibility by default</span><br><span class=\"line\">  -fvisibility-ms-compat  Give global types &#x27;default&#x27; visibility and global functions and variables &#x27;hidden&#x27; visibility by default</span><br><span class=\"line\">  -fvisibility=&lt;value&gt;    Set the default symbol visibility for all global declarations</span><br><span class=\"line\">  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto</span><br><span class=\"line\">  -fwrapv                 Treat signed integer overflow as two&#x27;s complement</span><br><span class=\"line\">  -fwritable-strings      Store string literals as writable data</span><br><span class=\"line\">  -fxray-always-emit-customevents</span><br><span class=\"line\">                          Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.</span><br><span class=\"line\">  -fxray-always-emit-typedevents</span><br><span class=\"line\">                          Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented.</span><br><span class=\"line\">  -fxray-always-instrument= &lt;value&gt;</span><br><span class=\"line\">                          DEPRECATED: Filename defining the whitelist for imbuing the &#x27;always instrument&#x27; XRay attribute.</span><br><span class=\"line\">  -fxray-attr-list= &lt;value&gt;</span><br><span class=\"line\">                          Filename defining the list of functions/types for imbuing XRay attributes.</span><br><span class=\"line\">  -fxray-instruction-threshold= &lt;value&gt;</span><br><span class=\"line\">                          Sets the minimum function size to instrument with XRay</span><br><span class=\"line\">  -fxray-instrumentation-bundle= &lt;value&gt;</span><br><span class=\"line\">                          Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is &#x27;all&#x27;.</span><br><span class=\"line\">  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit</span><br><span class=\"line\">  -fxray-link-deps        Tells clang to add the link dependencies for XRay.</span><br><span class=\"line\">  -fxray-modes= &lt;value&gt;   List of modes to link in by default into XRay instrumented binaries.</span><br><span class=\"line\">  -fxray-never-instrument= &lt;value&gt;</span><br><span class=\"line\">                          DEPRECATED: Filename defining the whitelist for imbuing the &#x27;never instrument&#x27; XRay attribute.</span><br><span class=\"line\">  -fzvector               Enable System z vector language extension</span><br><span class=\"line\">  -F &lt;value&gt;              Add directory to framework include search path</span><br><span class=\"line\">  --gcc-toolchain=&lt;value&gt; Use the gcc toolchain at the given directory</span><br><span class=\"line\">  -gcodeview              Generate CodeView debug information</span><br><span class=\"line\">  -gdwarf-2               Generate source-level debug information with dwarf version 2</span><br><span class=\"line\">  -gdwarf-3               Generate source-level debug information with dwarf version 3</span><br><span class=\"line\">  -gdwarf-4               Generate source-level debug information with dwarf version 4</span><br><span class=\"line\">  -gdwarf-5               Generate source-level debug information with dwarf version 5</span><br><span class=\"line\">  -gembed-source          Embed source text in DWARF debug sections</span><br><span class=\"line\">  -gline-tables-only      Emit debug line number tables only</span><br><span class=\"line\">  -gmodules               Generate debug info with external references to clang modules or precompiled headers</span><br><span class=\"line\">  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections</span><br><span class=\"line\">  -gz=&lt;value&gt;             DWARF debug sections compression type</span><br><span class=\"line\">  -gz                     DWARF debug sections compression type</span><br><span class=\"line\">  -G &lt;size&gt;               Put objects of at most &lt;size&gt; bytes into small data section (MIPS / Hexagon)</span><br><span class=\"line\">  -g                      Generate source-level debug information</span><br><span class=\"line\">  --help-hidden           Display help for hidden options</span><br><span class=\"line\">  -help                   Display available options</span><br><span class=\"line\">  --hip-device-lib-path=&lt;value&gt;</span><br><span class=\"line\">                          HIP device library path</span><br><span class=\"line\">  --hip-device-lib=&lt;value&gt;</span><br><span class=\"line\">                          HIP device library</span><br><span class=\"line\">  --hip-link              Link clang-offload-bundler bundles for HIP</span><br><span class=\"line\">  -H                      Show header includes and nesting depth</span><br><span class=\"line\">  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path</span><br><span class=\"line\">  -iapinotes-modules &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to the API notes search path referenced by module name</span><br><span class=\"line\">  -idirafter &lt;value&gt;      Add directory to AFTER include search path</span><br><span class=\"line\">  -iframeworkwithsysroot &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot</span><br><span class=\"line\">  -iframework &lt;value&gt;     Add directory to SYSTEM framework search path</span><br><span class=\"line\">  -imacros &lt;file&gt;         Include macros from file before parsing</span><br><span class=\"line\">  -include-pch &lt;file&gt;     Include precompiled header file</span><br><span class=\"line\">  -include &lt;file&gt;         Include file before parsing</span><br><span class=\"line\">  -index-header-map       Make the next included directory (-I or -F) an indexer header map</span><br><span class=\"line\">  -index-ignore-system-symbols</span><br><span class=\"line\">                          Ignore symbols from system headers</span><br><span class=\"line\">  -index-record-codegen-name</span><br><span class=\"line\">                          Record the codegen name for symbols</span><br><span class=\"line\">  -index-store-path &lt;value&gt;</span><br><span class=\"line\">                          Enable indexing with the specified data store path</span><br><span class=\"line\">  -iprefix &lt;dir&gt;          Set the -iwithprefix/-iwithprefixbefore prefix</span><br><span class=\"line\">  -iquote &lt;directory&gt;     Add directory to QUOTE include search path</span><br><span class=\"line\">  -isysroot &lt;dir&gt;         Set the system root directory (usually /)</span><br><span class=\"line\">  -isystem-after &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to end of the SYSTEM include search path</span><br><span class=\"line\">  -isystem &lt;directory&gt;    Add directory to SYSTEM include search path</span><br><span class=\"line\">  -ivfsoverlay &lt;value&gt;    Overlay the virtual filesystem described by file over the real file system</span><br><span class=\"line\">  -iwithprefixbefore &lt;dir&gt;</span><br><span class=\"line\">                          Set directory to include search path with prefix</span><br><span class=\"line\">  -iwithprefix &lt;dir&gt;      Set directory to SYSTEM include search path with prefix</span><br><span class=\"line\">  -iwithsysroot &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot</span><br><span class=\"line\">  -I &lt;dir&gt;                Add directory to include search path</span><br><span class=\"line\">  -L &lt;dir&gt;                Add directory to library search path</span><br><span class=\"line\">  -mabicalls              Enable SVR4-style position-independent code (Mips only)</span><br><span class=\"line\">  -malign-double          Align doubles to two words in structs (x86 only)</span><br><span class=\"line\">  -mbackchain             Link stack frames through backchain on System Z</span><br><span class=\"line\">  -mcrc                   Allow use of CRC instructions (ARM/Mips only)</span><br><span class=\"line\">  -MD                     Write a depfile containing user and system headers</span><br><span class=\"line\">  -meabi &lt;value&gt;          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)</span><br><span class=\"line\">  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mexecute-only          Disallow generation of data access to code sections (ARM only)</span><br><span class=\"line\">  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mfentry                Insert calls to fentry at function entry (x86 only)</span><br><span class=\"line\">  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)</span><br><span class=\"line\">  -mfp32                  Use 32-bit floating point registers (MIPS only)</span><br><span class=\"line\">  -mfp64                  Use 64-bit floating point registers (MIPS only)</span><br><span class=\"line\">  -MF &lt;file&gt;              Write depfile output from -MMD, -MD, -MM, or -M to &lt;file&gt;</span><br><span class=\"line\">  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64 only)</span><br><span class=\"line\">  -mglobal-merge          Enable merging of globals</span><br><span class=\"line\">  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)</span><br><span class=\"line\">  -MG                     Add missing headers to depfile</span><br><span class=\"line\">  -mhvx-length=&lt;value&gt;    Set Hexagon Vector Length</span><br><span class=\"line\">  -mhvx=&lt;value&gt;           Enable Hexagon Vector eXtensions</span><br><span class=\"line\">  -mhvx                   Enable Hexagon Vector eXtensions</span><br><span class=\"line\">  -miamcu                 Use Intel MCU ABI</span><br><span class=\"line\">  --migrate               Run the migrator</span><br><span class=\"line\">  -mincremental-linker-compatible</span><br><span class=\"line\">                          (integrated-as) Emit an object file which can be used with an incremental linker</span><br><span class=\"line\">  -mindirect-jump=&lt;value&gt; Change indirect jump instructions to inhibit speculation</span><br><span class=\"line\">  -mios-version-min=&lt;value&gt;</span><br><span class=\"line\">                          Set iOS deployment target</span><br><span class=\"line\">  -MJ &lt;value&gt;             Write a compilation database entry per input</span><br><span class=\"line\">  -mllvm &lt;value&gt;          Additional arguments to forward to LLVM&#x27;s option processing</span><br><span class=\"line\">  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)</span><br><span class=\"line\">  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.</span><br><span class=\"line\">  -mmacosx-version-min=&lt;value&gt;</span><br><span class=\"line\">                          Set Mac OS X deployment target</span><br><span class=\"line\">  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.</span><br><span class=\"line\">  -MMD                    Write a depfile containing user headers</span><br><span class=\"line\">  -mmemops                Enable generation of memop instructions</span><br><span class=\"line\">  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard</span><br><span class=\"line\">  -mmsa                   Enable MSA ASE (MIPS only)</span><br><span class=\"line\">  -mmt                    Enable MT ASE (MIPS only)</span><br><span class=\"line\">  -MM                     Like -MMD, but also implies -E and writes to stdout by default</span><br><span class=\"line\">  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)</span><br><span class=\"line\">  -mno-crc                Disallow use of CRC instructions (Mips only)</span><br><span class=\"line\">  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mno-execute-only       Allow generation of data access to code sections (ARM only)</span><br><span class=\"line\">  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mno-fix-cortex-a53-835769</span><br><span class=\"line\">                          Don&#x27;t workaround Cortex-A53 erratum 835769 (AArch64 only)</span><br><span class=\"line\">  -mno-global-merge       Disable merging of globals</span><br><span class=\"line\">  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)</span><br><span class=\"line\">  -mno-hvx                Disable Hexagon Vector eXtensions</span><br><span class=\"line\">  -mno-implicit-float     Don&#x27;t generate implicit floating point instructions</span><br><span class=\"line\">  -mno-incremental-linker-compatible</span><br><span class=\"line\">                          (integrated-as) Emit an object file which cannot be used with an incremental linker</span><br><span class=\"line\">  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)</span><br><span class=\"line\">  -mno-long-calls         Restore the default behaviour of not generating long calls</span><br><span class=\"line\">  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.</span><br><span class=\"line\">  -mno-memops             Disable generation of memop instructions</span><br><span class=\"line\">  -mno-movt               Disallow use of movt/movw pairs (ARM only)</span><br><span class=\"line\">  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard</span><br><span class=\"line\">  -mno-msa                Disable MSA ASE (MIPS only)</span><br><span class=\"line\">  -mno-mt                 Disable MT ASE (MIPS only)</span><br><span class=\"line\">  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.</span><br><span class=\"line\">  -mno-nvj                Disable generation of new-value jumps</span><br><span class=\"line\">  -mno-nvs                Disable generation of new-value stores</span><br><span class=\"line\">  -mno-outline            Disable function outlining (AArch64 only)</span><br><span class=\"line\">  -mno-packets            Disable generation of instruction packets</span><br><span class=\"line\">  -mno-relax              Disable linker relaxation</span><br><span class=\"line\">  -mno-restrict-it        Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode</span><br><span class=\"line\">  -mno-stack-arg-probe    Disable stack probes which are enabled by default</span><br><span class=\"line\">  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)</span><br><span class=\"line\">  -mno-xnack              Disable XNACK (AMDGPU only)</span><br><span class=\"line\">  -mnocrc                 Disallow use of CRC instructions (ARM only)</span><br><span class=\"line\">  -mnvj                   Enable generation of new-value jumps</span><br><span class=\"line\">  -mnvs                   Enable generation of new-value stores</span><br><span class=\"line\">  -module-dependency-dir &lt;value&gt;</span><br><span class=\"line\">                          Directory to dump module dependencies to</span><br><span class=\"line\">  -module-file-info       Provide information about a particular module file</span><br><span class=\"line\">  -momit-leaf-frame-pointer</span><br><span class=\"line\">                          Omit frame pointer setup for leaf functions</span><br><span class=\"line\">  -moutline               Enable function outlining (AArch64 only)</span><br><span class=\"line\">  -mpackets               Enable generation of instruction packets</span><br><span class=\"line\">  -mpie-copy-relocations  Use copy relocations support for PIE builds</span><br><span class=\"line\">  -mprefer-vector-width=&lt;value&gt;</span><br><span class=\"line\">                          Specifies preferred vector width for auto-vectorization. Defaults to &#x27;none&#x27; which allows target specific decisions.</span><br><span class=\"line\">  -MP                     Create phony target for each dependency (other than main file)</span><br><span class=\"line\">  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility</span><br><span class=\"line\">  -MQ &lt;value&gt;             Specify name of main file output to quote in depfile</span><br><span class=\"line\">  -mrelax-all             (integrated-as) Relax all machine instructions</span><br><span class=\"line\">  -mrelax                 Enable linker relaxation</span><br><span class=\"line\">  -mrestrict-it           Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.</span><br><span class=\"line\">  -mrtd                   Make StdCall calling convention the default</span><br><span class=\"line\">  -msoft-float            Use software floating point</span><br><span class=\"line\">  -mstack-alignment=&lt;value&gt;</span><br><span class=\"line\">                          Set the stack alignment</span><br><span class=\"line\">  -mstack-arg-probe       Enable stack probes</span><br><span class=\"line\">  -mstack-probe-size=&lt;value&gt;</span><br><span class=\"line\">                          Set the stack probe size</span><br><span class=\"line\">  -mstackrealign          Force realign the stack at entry to every function</span><br><span class=\"line\">  -mthread-model &lt;value&gt;  The thread model to use, e.g. posix, single (posix by default)</span><br><span class=\"line\">  -mtp=&lt;value&gt;            Read thread pointer from coprocessor register (ARM only)</span><br><span class=\"line\">  -MT &lt;value&gt;             Specify name of main file output in depfile</span><br><span class=\"line\">  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)</span><br><span class=\"line\">  -MV                     Use NMake/Jom format for the depfile</span><br><span class=\"line\">  -mxnack                 Enable XNACK (AMDGPU only)</span><br><span class=\"line\">  -M                      Like -MD, but also implies -E and writes to stdout by default</span><br><span class=\"line\">  --no-cuda-gpu-arch=&lt;value&gt;</span><br><span class=\"line\">                          Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. &#x27;all&#x27; resets the list to its default value.</span><br><span class=\"line\">  --no-cuda-include-ptx=&lt;value&gt;</span><br><span class=\"line\">                          Do not include PTX for the follwing GPU architecture (e.g. sm_35) or &#x27;all&#x27;. May be specified more than once.</span><br><span class=\"line\">  --no-cuda-version-check Don&#x27;t error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.</span><br><span class=\"line\">  --no-system-header-prefix=&lt;prefix&gt;</span><br><span class=\"line\">                          Treat all #include paths starting with &lt;prefix&gt; as not including a system header.</span><br><span class=\"line\">  -nobuiltininc           Disable builtin #include directories</span><br><span class=\"line\">  -nostdinc++             Disable standard #include directories for the C++ standard library</span><br><span class=\"line\">  -ObjC++                 Treat source input files as Objective-C++ inputs</span><br><span class=\"line\">  -objcmt-atomic-property Make migration to &#x27;atomic&#x27; properties</span><br><span class=\"line\">  -objcmt-migrate-all     Enable migration to modern ObjC</span><br><span class=\"line\">  -objcmt-migrate-annotation</span><br><span class=\"line\">                          Enable migration to property and method annotations</span><br><span class=\"line\">  -objcmt-migrate-designated-init</span><br><span class=\"line\">                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods</span><br><span class=\"line\">  -objcmt-migrate-instancetype</span><br><span class=\"line\">                          Enable migration to infer instancetype for method result type</span><br><span class=\"line\">  -objcmt-migrate-literals</span><br><span class=\"line\">                          Enable migration to modern ObjC literals</span><br><span class=\"line\">  -objcmt-migrate-ns-macros</span><br><span class=\"line\">                          Enable migration to NS_ENUM/NS_OPTIONS macros</span><br><span class=\"line\">  -objcmt-migrate-property-dot-syntax</span><br><span class=\"line\">                          Enable migration of setter/getter messages to property-dot syntax</span><br><span class=\"line\">  -objcmt-migrate-property</span><br><span class=\"line\">                          Enable migration to modern ObjC property</span><br><span class=\"line\">  -objcmt-migrate-protocol-conformance</span><br><span class=\"line\">                          Enable migration to add protocol conformance on classes</span><br><span class=\"line\">  -objcmt-migrate-readonly-property</span><br><span class=\"line\">                          Enable migration to modern ObjC readonly property</span><br><span class=\"line\">  -objcmt-migrate-readwrite-property</span><br><span class=\"line\">                          Enable migration to modern ObjC readwrite property</span><br><span class=\"line\">  -objcmt-migrate-subscripting</span><br><span class=\"line\">                          Enable migration to modern ObjC subscripting</span><br><span class=\"line\">  -objcmt-ns-nonatomic-iosonly</span><br><span class=\"line\">                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property&#x27;s &#x27;atomic&#x27; attribute</span><br><span class=\"line\">  -objcmt-returns-innerpointer-property</span><br><span class=\"line\">                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER</span><br><span class=\"line\">  -objcmt-whitelist-dir-path=&lt;value&gt;</span><br><span class=\"line\">                          Only modify files with a filename contained in the provided directory path</span><br><span class=\"line\">  -ObjC                   Treat source input files as Objective-C inputs</span><br><span class=\"line\">  -o &lt;file&gt;               Write output to &lt;file&gt;</span><br><span class=\"line\">  -pg                     Enable mcount instrumentation</span><br><span class=\"line\">  -pipe                   Use pipes between commands, when possible</span><br><span class=\"line\">  --precompile            Only precompile the input</span><br><span class=\"line\">  -print-file-name=&lt;file&gt; Print the full library path of &lt;file&gt;</span><br><span class=\"line\">  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace</span><br><span class=\"line\">  -print-libgcc-file-name Print the library path for the currently used compiler runtime library (&quot;libgcc.a&quot; or &quot;libclang_rt.builtins.*.a&quot;)</span><br><span class=\"line\">  -print-prog-name=&lt;name&gt; Print the full program path of &lt;name&gt;</span><br><span class=\"line\">  -print-resource-dir     Print the resource directory pathname</span><br><span class=\"line\">  -print-search-dirs      Print the paths used for finding libraries and programs</span><br><span class=\"line\">  -pthread                Support POSIX threads in generated code</span><br><span class=\"line\">  --ptxas-path=&lt;value&gt;    Path to ptxas (used for compiling CUDA code)</span><br><span class=\"line\">  -P                      Disable linemarker output in -E mode</span><br><span class=\"line\">  -Qn                     Do not emit metadata containing compiler name and version</span><br><span class=\"line\">  -Qunused-arguments      Don&#x27;t emit warning for unused driver arguments</span><br><span class=\"line\">  -Qy                     Emit metadata containing compiler name and version</span><br><span class=\"line\">  -relocatable-pch        Whether to build a relocatable precompiled header</span><br><span class=\"line\">  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++</span><br><span class=\"line\">  -rewrite-objc           Rewrite Objective-C source to C++</span><br><span class=\"line\">  -Rpass-analysis=&lt;value&gt; Report transformation analysis from optimization passes whose name matches the given POSIX regular expression</span><br><span class=\"line\">  -Rpass-missed=&lt;value&gt;   Report missed transformations by optimization passes whose name matches the given POSIX regular expression</span><br><span class=\"line\">  -Rpass=&lt;value&gt;          Report transformations performed by optimization passes whose name matches the given POSIX regular expression</span><br><span class=\"line\">  -rtlib=&lt;value&gt;          Compiler runtime library to use</span><br><span class=\"line\">  -R&lt;remark&gt;              Enable the specified remark</span><br><span class=\"line\">  -save-stats=&lt;value&gt;     Save llvm statistics.</span><br><span class=\"line\">  -save-stats             Save llvm statistics.</span><br><span class=\"line\">  -save-temps=&lt;value&gt;     Save intermediate compilation results.</span><br><span class=\"line\">  -save-temps             Save intermediate compilation results</span><br><span class=\"line\">  -serialize-diagnostics &lt;value&gt;</span><br><span class=\"line\">                          Serialize compiler diagnostics to a file</span><br><span class=\"line\">  -std=&lt;value&gt;            Language standard to compile for</span><br><span class=\"line\">  -stdlib=&lt;value&gt;         C++ standard library to use</span><br><span class=\"line\">  --system-header-prefix=&lt;prefix&gt;</span><br><span class=\"line\">                          Treat all #include paths starting with &lt;prefix&gt; as including a system header.</span><br><span class=\"line\">  -S                      Only run preprocess and compilation steps</span><br><span class=\"line\">  -target-variant &lt;value&gt; Generate code that may run on a particular variant of the deployment target</span><br><span class=\"line\">  --target=&lt;value&gt;        Generate code for the given target</span><br><span class=\"line\">  -Tbss &lt;addr&gt;            Set starting address of BSS to &lt;addr&gt;</span><br><span class=\"line\">  -Tdata &lt;addr&gt;           Set starting address of DATA to &lt;addr&gt;</span><br><span class=\"line\">  -time                   Time individual commands</span><br><span class=\"line\">  -traditional-cpp        Enable some traditional CPP emulation</span><br><span class=\"line\">  -trigraphs              Process trigraph sequences</span><br><span class=\"line\">  -Ttext &lt;addr&gt;           Set starting address of TEXT to &lt;addr&gt;</span><br><span class=\"line\">  -T &lt;script&gt;             Specify &lt;script&gt; as linker script</span><br><span class=\"line\">  -undef                  undef all system defines</span><br><span class=\"line\">  -U &lt;macro&gt;              Undefine macro &lt;macro&gt;</span><br><span class=\"line\">  --verify-debug-info     Verify the binary representation of debug output</span><br><span class=\"line\">  -verify-pch             Load and verify that a pre-compiled header file is not stale</span><br><span class=\"line\">  --version               Print version information</span><br><span class=\"line\">  -v                      Show commands to run and use verbose output</span><br><span class=\"line\">  -Wa,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the assembler</span><br><span class=\"line\">  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED</span><br><span class=\"line\">  -Wl,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the linker</span><br><span class=\"line\">  -working-directory &lt;value&gt;</span><br><span class=\"line\">                          Resolve file paths relative to the specified directory</span><br><span class=\"line\">  -Wp,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the preprocessor</span><br><span class=\"line\">  -W&lt;warning&gt;             Enable the specified warning</span><br><span class=\"line\">  -w                      Suppress all warnings</span><br><span class=\"line\">  -Xanalyzer &lt;arg&gt;        Pass &lt;arg&gt; to the static analyzer</span><br><span class=\"line\">  -Xassembler &lt;arg&gt;       Pass &lt;arg&gt; to the assembler</span><br><span class=\"line\">  -Xclang &lt;arg&gt;           Pass &lt;arg&gt; to the clang compiler</span><br><span class=\"line\">  -Xcuda-fatbinary &lt;arg&gt;  Pass &lt;arg&gt; to fatbinary invocation</span><br><span class=\"line\">  -Xcuda-ptxas &lt;arg&gt;      Pass &lt;arg&gt; to the ptxas assembler</span><br><span class=\"line\">  -Xlinker &lt;arg&gt;          Pass &lt;arg&gt; to the linker</span><br><span class=\"line\">  -Xopenmp-target=&lt;triple&gt; &lt;arg&gt;</span><br><span class=\"line\">                          Pass &lt;arg&gt; to the target offloading toolchain identified by &lt;triple&gt;.</span><br><span class=\"line\">  -Xopenmp-target &lt;arg&gt;   Pass &lt;arg&gt; to the target offloading toolchain.</span><br><span class=\"line\">  -Xpreprocessor &lt;arg&gt;    Pass &lt;arg&gt; to the preprocessor</span><br><span class=\"line\">  -x &lt;language&gt;           Treat subsequent input files as having type &lt;language&gt;</span><br><span class=\"line\">  -z &lt;arg&gt;                Pass -z &lt;arg&gt; to the linker</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>MacBook-P:~ sumian$ g++ –help</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OVERVIEW: clang LLVM compiler</span><br><span class=\"line\"></span><br><span class=\"line\">USAGE: clang [options] &lt;inputs&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS:</span><br><span class=\"line\"><span class=\"meta\">  -#</span><span class=\"bash\"><span class=\"comment\">##                    Print (but do not run) the commands to run for this compilation</span></span></span><br><span class=\"line\">  --analyzer-output &lt;value&gt;</span><br><span class=\"line\">                          Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).</span><br><span class=\"line\">  --analyze               Run the static analyzer</span><br><span class=\"line\">  -arcmt-migrate-emit-errors</span><br><span class=\"line\">                          Emit ARC errors even if the migrator can fix them</span><br><span class=\"line\">  -arcmt-migrate-report-output &lt;value&gt;</span><br><span class=\"line\">                          Output path for the plist report</span><br><span class=\"line\">  -B &lt;dir&gt;                Add &lt;dir&gt; to search path for binaries and object files used implicitly</span><br><span class=\"line\">  -CC                     Include comments from within macros in preprocessed output</span><br><span class=\"line\">  -cfguard                Emit tables required for Windows Control Flow Guard.</span><br><span class=\"line\">  -cl-denorms-are-zero    OpenCL only. Allow denormals to be flushed to zero.</span><br><span class=\"line\">  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.</span><br><span class=\"line\">  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.</span><br><span class=\"line\">  -cl-fp32-correctly-rounded-divide-sqrt</span><br><span class=\"line\">                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.</span><br><span class=\"line\">  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.</span><br><span class=\"line\">  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.</span><br><span class=\"line\">  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.</span><br><span class=\"line\">  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.</span><br><span class=\"line\">  -cl-single-precision-constant</span><br><span class=\"line\">                          OpenCL only. Treat double precision floating-point constant as single precision constant.</span><br><span class=\"line\">  -cl-std=&lt;value&gt;         OpenCL language standard to compile for.</span><br><span class=\"line\">  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.</span><br><span class=\"line\">  -cl-uniform-work-group-size</span><br><span class=\"line\">                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel</span><br><span class=\"line\">  -cl-unsafe-math-optimizations</span><br><span class=\"line\">                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.</span><br><span class=\"line\">  --config &lt;value&gt;        Specifies configuration file</span><br><span class=\"line\">  --cuda-compile-host-device</span><br><span class=\"line\">                          Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.</span><br><span class=\"line\">  --cuda-device-only      Compile CUDA code for device only</span><br><span class=\"line\">  --cuda-gpu-arch=&lt;value&gt; CUDA GPU architecture (e.g. sm_35).  May be specified more than once.</span><br><span class=\"line\">  --cuda-host-only        Compile CUDA code for host only.  Has no effect on non-CUDA compilations.</span><br><span class=\"line\">  --cuda-include-ptx=&lt;value&gt;</span><br><span class=\"line\">                          Include PTX for the follwing GPU architecture (e.g. sm_35) or &#x27;all&#x27;. May be specified more than once.</span><br><span class=\"line\">  --cuda-noopt-device-debug</span><br><span class=\"line\">                          Enable device-side debug info generation. Disables ptxas optimizations.</span><br><span class=\"line\">  --cuda-path-ignore-env  Ignore environment variables to detect CUDA installation</span><br><span class=\"line\">  --cuda-path=&lt;value&gt;     CUDA installation path</span><br><span class=\"line\">  -cxx-isystem &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to the C++ SYSTEM include search path</span><br><span class=\"line\">  -C                      Include comments in preprocessed output</span><br><span class=\"line\">  -c                      Only run preprocess, compile, and assemble steps</span><br><span class=\"line\">  -dD                     Print macro definitions in -E mode in addition to normal output</span><br><span class=\"line\">  -dependency-dot &lt;value&gt; Filename to write DOT-formatted header dependencies to</span><br><span class=\"line\">  -dependency-file &lt;value&gt;</span><br><span class=\"line\">                          Filename (or -) to write dependency output to</span><br><span class=\"line\">  -dI                     Print include directives in -E mode in addition to normal output</span><br><span class=\"line\">  -dM                     Print macro definitions in -E mode instead of normal output</span><br><span class=\"line\">  -D &lt;macro&gt;=&lt;value&gt;      Define &lt;macro&gt; to &lt;value&gt; (or 1 if &lt;value&gt; omitted)</span><br><span class=\"line\">  -emit-ast               Emit Clang AST files for source inputs</span><br><span class=\"line\">  -emit-llvm              Use the LLVM representation for assembler and object files</span><br><span class=\"line\">  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang&lt;value&gt;</span><br><span class=\"line\">                          Trivial automatic variable initialization to zero is only here for benchmarks, it&#x27;ll eventually be removed, and I&#x27;m OK with that because I&#x27;m only using it to benchmark</span><br><span class=\"line\">  -E                      Only run the preprocessor</span><br><span class=\"line\">  -faddrsig               Emit an address-significance table</span><br><span class=\"line\">  -faligned-allocation    Enable C++17 aligned allocation functions</span><br><span class=\"line\">  -fallow-editor-placeholders</span><br><span class=\"line\">                          Treat editor placeholders as valid source code</span><br><span class=\"line\">  -fansi-escape-codes     Use ANSI escape codes for diagnostics</span><br><span class=\"line\">  -fapinotes-cache-path=&lt;directory&gt;</span><br><span class=\"line\">                          Does nothing; API notes are no longer cached separately from modules</span><br><span class=\"line\">  -fapinotes-modules      Enable module-based external API notes support</span><br><span class=\"line\">  -fapinotes-swift-version=&lt;version&gt;</span><br><span class=\"line\">                          Specify the Swift version to use when filtering API notes</span><br><span class=\"line\">  -fapinotes              Enable external API notes support</span><br><span class=\"line\">  -fapple-kext            Use Apple&#x27;s kernel extensions ABI</span><br><span class=\"line\">  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling</span><br><span class=\"line\">  -fapplication-extension Restrict code to those available for App Extensions</span><br><span class=\"line\">  -fblocks                Enable the &#x27;blocks&#x27; language feature</span><br><span class=\"line\">  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler</span><br><span class=\"line\">  -fbuild-session-file=&lt;file&gt;</span><br><span class=\"line\">                          Use the last modification time of &lt;file&gt; as the build session timestamp</span><br><span class=\"line\">  -fbuild-session-timestamp=&lt;time since Epoch in seconds&gt;</span><br><span class=\"line\">                          Time when the current build session started</span><br><span class=\"line\">  -fbuiltin-module-map    Load the clang builtins module map file.</span><br><span class=\"line\">  -fc++-static-destructors</span><br><span class=\"line\">                          Enable C++ static destructor registration (the default)</span><br><span class=\"line\">  -fcf-protection=&lt;value&gt; Instrument control-flow architecture protection. Options: return, branch, full, none.</span><br><span class=\"line\">  -fcf-protection         Enable cf-protection in &#x27;full&#x27; mode</span><br><span class=\"line\">  -fchar8_t               Enable C++ builtin type char8_t</span><br><span class=\"line\">  -fclang-abi-compat=&lt;version&gt;</span><br><span class=\"line\">                          Attempt to match the ABI of Clang &lt;version&gt;</span><br><span class=\"line\">  -fcolor-diagnostics     Use colors in diagnostics</span><br><span class=\"line\">  -fcomment-block-commands=&lt;arg&gt;</span><br><span class=\"line\">                          Treat each comma separated argument in &lt;arg&gt; as a documentation comment block command</span><br><span class=\"line\">  -fcomplete-member-pointers</span><br><span class=\"line\">                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI</span><br><span class=\"line\">  -fcoroutines-ts         Enable support for the C++ Coroutines TS</span><br><span class=\"line\">  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis</span><br><span class=\"line\">  -fcuda-approx-transcendentals</span><br><span class=\"line\">                          Use approximate transcendental functions</span><br><span class=\"line\">  -fcuda-flush-denormals-to-zero</span><br><span class=\"line\">                          Flush denormal floating point values to zero in CUDA device mode.</span><br><span class=\"line\">  -fcuda-rdc              Generate relocatable device code, also known as separate compilation mode.</span><br><span class=\"line\">  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces.</span><br><span class=\"line\">  -fcxx-exceptions        Enable C++ exceptions</span><br><span class=\"line\">  -fdata-sections         Place each data in its own section (ELF Only)</span><br><span class=\"line\">  -fdebug-info-for-profiling</span><br><span class=\"line\">                          Emit extra debug info to make sample profile more accurate.</span><br><span class=\"line\">  -fdebug-macro           Emit macro debug information</span><br><span class=\"line\">  -fdebug-prefix-map=&lt;value&gt;</span><br><span class=\"line\">                          remap file source paths in debug info</span><br><span class=\"line\">  -fdebug-types-section   Place debug types in their own section (ELF Only)</span><br><span class=\"line\">  -fdeclspec              Allow __declspec as a keyword</span><br><span class=\"line\">  -fdelayed-template-parsing</span><br><span class=\"line\">                          Parse templated function definitions at the end of the translation unit</span><br><span class=\"line\">  -fdelete-null-pointer-checks</span><br><span class=\"line\">                          Treat usage of null pointers as undefined behavior.</span><br><span class=\"line\">  -fdiagnostics-absolute-paths</span><br><span class=\"line\">                          Print absolute paths in diagnostics</span><br><span class=\"line\">  -fdiagnostics-hotness-threshold=&lt;number&gt;</span><br><span class=\"line\">                          Prevent optimization remarks from being output if they do not have at least this profile count</span><br><span class=\"line\">  -fdiagnostics-parseable-fixits</span><br><span class=\"line\">                          Print fix-its in machine parseable form</span><br><span class=\"line\">  -fdiagnostics-print-source-range-info</span><br><span class=\"line\">                          Print source range spans in numeric form</span><br><span class=\"line\">  -fdiagnostics-show-hotness</span><br><span class=\"line\">                          Enable profile hotness information in diagnostic line</span><br><span class=\"line\">  -fdiagnostics-show-note-include-stack</span><br><span class=\"line\">                          Display include stacks for diagnostic notes</span><br><span class=\"line\">  -fdiagnostics-show-option</span><br><span class=\"line\">                          Print option name with mappable diagnostics</span><br><span class=\"line\">  -fdiagnostics-show-template-tree</span><br><span class=\"line\">                          Print a template comparison tree for differing templates</span><br><span class=\"line\">  -fdigraphs              Enable alternative token representations &#x27;&lt;:&#x27;, &#x27;:&gt;&#x27;, &#x27;&lt;%&#x27;, &#x27;%&gt;&#x27;, &#x27;%:&#x27;, &#x27;%:%:&#x27; (default)</span><br><span class=\"line\">  -fdiscard-value-names   Discard value names in LLVM IR</span><br><span class=\"line\">  -fdollars-in-identifiers</span><br><span class=\"line\">                          Allow &#x27;$&#x27; in identifiers</span><br><span class=\"line\">  -fdouble-square-bracket-attributes</span><br><span class=\"line\">                          Enable &#x27;[[]]&#x27; attributes in all C and C++ language modes</span><br><span class=\"line\">  -fdwarf-exceptions      Use DWARF style exceptions</span><br><span class=\"line\">  -fembed-bitcode-marker  Embed placeholder LLVM IR data as a marker</span><br><span class=\"line\">  -fembed-bitcode=&lt;option&gt;</span><br><span class=\"line\">                          Embed LLVM bitcode (option: off, all, bitcode, marker)</span><br><span class=\"line\">  -fembed-bitcode         Embed LLVM IR bitcode as data</span><br><span class=\"line\">  -femit-all-decls        Emit all declarations, even if unused</span><br><span class=\"line\">  -femulated-tls          Use emutls functions to access thread_local variables</span><br><span class=\"line\">  -fenable-matrix         Enable matrix data type and related builtin functions</span><br><span class=\"line\">  -fexceptions            Enable support for exception handling</span><br><span class=\"line\">  -fexperimental-isel     Enables the experimental global instruction selector</span><br><span class=\"line\">  -fexperimental-new-pass-manager</span><br><span class=\"line\">                          Enables an experimental new pass manager in LLVM.</span><br><span class=\"line\">  -ffast-math             Allow aggressive, lossy floating-point optimizations</span><br><span class=\"line\">  -ffine-grained-bitfield-accesses</span><br><span class=\"line\">                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.</span><br><span class=\"line\">  -ffixed-point           Enable fixed point types</span><br><span class=\"line\">  -ffixed-r19             Reserve register r19 (Hexagon only)</span><br><span class=\"line\">  -ffixed-r9              Reserve the r9 register (ARM only)</span><br><span class=\"line\">  -ffixed-x18             Reserve the x18 register (AArch64 only)</span><br><span class=\"line\">  -ffixed-x20             Reserve the x20 register (AArch64 only)</span><br><span class=\"line\">  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization</span><br><span class=\"line\">  -fforce-enable-int128   Enable support for int128_t type</span><br><span class=\"line\">  -ffp-contract=&lt;value&gt;   Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)</span><br><span class=\"line\">  -ffreestanding          Assert that the compilation takes place in a freestanding environment</span><br><span class=\"line\">  -ffunction-sections     Place each function in its own section (ELF Only)</span><br><span class=\"line\">  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard</span><br><span class=\"line\">  -fgnu-runtime           Generate output compatible with the standard GNU Objective-C runtime</span><br><span class=\"line\">  -fgnu89-inline          Use the gnu89 inline semantics</span><br><span class=\"line\">  -fimplicit-module-maps  Implicitly search the file system for module map files.</span><br><span class=\"line\">  -finline-functions      Inline suitable functions</span><br><span class=\"line\">  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline</span><br><span class=\"line\">  -finstrument-function-entry-bare</span><br><span class=\"line\">                          Instrument function entry only, after inlining, without arguments to the instrumentation call</span><br><span class=\"line\">  -finstrument-functions-after-inlining</span><br><span class=\"line\">                          Like -finstrument-functions, but insert the calls after inlining</span><br><span class=\"line\">  -finstrument-functions  Generate calls to instrument function entry and exit</span><br><span class=\"line\">  -fintegrated-as         Enable the integrated assembler</span><br><span class=\"line\">  -flto-jobs=&lt;value&gt;      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)</span><br><span class=\"line\">  -flto=&lt;value&gt;           Set LTO mode to either &#x27;full&#x27; or &#x27;thin&#x27;</span><br><span class=\"line\">  -flto                   Enable LTO in &#x27;full&#x27; mode</span><br><span class=\"line\">  -fmath-errno            Require math functions to indicate errors by setting errno</span><br><span class=\"line\">  -fmax-type-align=&lt;value&gt;</span><br><span class=\"line\">                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment</span><br><span class=\"line\">  -fmerge-all-constants   Allow merging of constants</span><br><span class=\"line\">  -fmodule-file=[&lt;name&gt;=]&lt;file&gt;</span><br><span class=\"line\">                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.</span><br><span class=\"line\">  -fmodule-map-file=&lt;file&gt;</span><br><span class=\"line\">                          Load this module map file</span><br><span class=\"line\">  -fmodule-name=&lt;name&gt;    Specify the name of the module to build</span><br><span class=\"line\">  -fmodules-cache-path=&lt;directory&gt;</span><br><span class=\"line\">                          Specify the module cache path</span><br><span class=\"line\">  -fmodules-decluse       Require declaration of modules used within a module</span><br><span class=\"line\">  -fmodules-disable-diagnostic-validation</span><br><span class=\"line\">                          Disable validation of the diagnostic options when loading the module</span><br><span class=\"line\">  -fmodules-ignore-macro=&lt;value&gt;</span><br><span class=\"line\">                          Ignore the definition of the given macro when building and loading modules</span><br><span class=\"line\">  -fmodules-prune-after=&lt;seconds&gt;</span><br><span class=\"line\">                          Specify the interval (in seconds) after which a module file will be considered unused</span><br><span class=\"line\">  -fmodules-prune-interval=&lt;seconds&gt;</span><br><span class=\"line\">                          Specify the interval (in seconds) between attempts to prune the module cache</span><br><span class=\"line\">  -fmodules-search-all    Search even non-imported modules to resolve references</span><br><span class=\"line\">  -fmodules-strict-decluse</span><br><span class=\"line\">                          Like -fmodules-decluse but requires all headers to be in modules</span><br><span class=\"line\">  -fmodules-ts            Enable support for the C++ Modules TS</span><br><span class=\"line\">  -fmodules-user-build-path &lt;directory&gt;</span><br><span class=\"line\">                          Specify the module user build path</span><br><span class=\"line\">  -fmodules-validate-once-per-build-session</span><br><span class=\"line\">                          Don&#x27;t verify input files for the modules if the module has been successfully validated or loaded during this build session</span><br><span class=\"line\">  -fmodules-validate-system-headers</span><br><span class=\"line\">                          Validate the system headers that a module depends on when loading the module</span><br><span class=\"line\">  -fmodules               Enable the &#x27;modules&#x27; language feature</span><br><span class=\"line\">  -fms-compatibility-version=&lt;value&gt;</span><br><span class=\"line\">                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don&#x27;t define it (default))</span><br><span class=\"line\">  -fms-compatibility      Enable full Microsoft Visual C++ compatibility</span><br><span class=\"line\">  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler</span><br><span class=\"line\">  -fmsc-version=&lt;value&gt;   Microsoft compiler version number to report in _MSC_VER (0 = don&#x27;t define it (default))</span><br><span class=\"line\">  -fnew-alignment=&lt;align&gt; Specifies the largest alignment guaranteed by &#x27;::operator new(size_t)&#x27;</span><br><span class=\"line\">  -fno-access-control     Disable C++ access control</span><br><span class=\"line\">  -fno-addrsig            Don&#x27;t emit an address-significance table</span><br><span class=\"line\">  -fno-apinotes-modules   Disable module-based external API notes support</span><br><span class=\"line\">  -fno-apinotes           Disable external API notes support</span><br><span class=\"line\">  -fno-assume-sane-operator-new</span><br><span class=\"line\">                          Don&#x27;t assume that C++&#x27;s global operator new can&#x27;t alias any pointer</span><br><span class=\"line\">  -fno-autolink           Disable generation of linker directives for automatic library linking</span><br><span class=\"line\">  -fno-builtin-&lt;value&gt;    Disable implicit builtin knowledge of a specific function</span><br><span class=\"line\">  -fno-builtin            Disable implicit builtin knowledge of functions</span><br><span class=\"line\">  -fno-c++-static-destructors</span><br><span class=\"line\">                          Disable C++ static destructor registration</span><br><span class=\"line\">  -fno-char8_t            Disable C++ builtin type char8_t</span><br><span class=\"line\">  -fno-common             Compile common globals like normal definitions</span><br><span class=\"line\">  -fno-complete-member-pointers</span><br><span class=\"line\">                          Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI</span><br><span class=\"line\">  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings</span><br><span class=\"line\">  -fno-coverage-mapping   Disable code coverage analysis</span><br><span class=\"line\">  -fno-crash-diagnostics  Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash</span><br><span class=\"line\">  -fno-debug-info-for-profiling</span><br><span class=\"line\">                          Do not emit extra debug info for sample profiler.</span><br><span class=\"line\">  -fno-debug-macro        Do not emit macro debug information</span><br><span class=\"line\">  -fno-declspec           Disallow __declspec as a keyword</span><br><span class=\"line\">  -fno-delayed-template-parsing</span><br><span class=\"line\">                          Disable delayed template parsing</span><br><span class=\"line\">  -fno-delete-null-pointer-checks</span><br><span class=\"line\">                          Do not treat usage of null pointers as undefined behavior.</span><br><span class=\"line\">  -fno-diagnostics-fixit-info</span><br><span class=\"line\">                          Do not include fixit information in diagnostics</span><br><span class=\"line\">  -fno-digraphs           Disallow alternative token representations &#x27;&lt;:&#x27;, &#x27;:&gt;&#x27;, &#x27;&lt;%&#x27;, &#x27;%&gt;&#x27;, &#x27;%:&#x27;, &#x27;%:%:&#x27;</span><br><span class=\"line\">  -fno-discard-value-names</span><br><span class=\"line\">                          Do not discard value names in LLVM IR</span><br><span class=\"line\">  -fno-dollars-in-identifiers</span><br><span class=\"line\">                          Disallow &#x27;$&#x27; in identifiers</span><br><span class=\"line\">  -fno-double-square-bracket-attributes</span><br><span class=\"line\">                          Disable &#x27;[[]]&#x27; attributes in all C and C++ language modes</span><br><span class=\"line\">  -fno-elide-constructors Disable C++ copy constructor elision</span><br><span class=\"line\">  -fno-elide-type         Do not elide types when printing diagnostics</span><br><span class=\"line\">  -fno-experimental-isel  Disables the experimental global instruction selector</span><br><span class=\"line\">  -fno-experimental-new-pass-manager</span><br><span class=\"line\">                          Disables an experimental new pass manager in LLVM.</span><br><span class=\"line\">  -fno-fine-grained-bitfield-accesses</span><br><span class=\"line\">                          Use large-integer access for consecutive bitfield runs.</span><br><span class=\"line\">  -fno-fixed-point        Disable fixed point types</span><br><span class=\"line\">  -fno-force-enable-int128</span><br><span class=\"line\">                          Disable support for int128_t type</span><br><span class=\"line\">  -fno-gnu-inline-asm     Disable GNU style inline asm</span><br><span class=\"line\">  -fno-integrated-as      Disable the integrated assembler</span><br><span class=\"line\">  -fno-jump-tables        Do not use jump tables for lowering switches</span><br><span class=\"line\">  -fno-lax-vector-conversions</span><br><span class=\"line\">                          Disallow implicit conversions between vectors with a different number of elements or different element types</span><br><span class=\"line\">  -fno-lto                Disable LTO mode (default)</span><br><span class=\"line\">  -fno-merge-all-constants</span><br><span class=\"line\">                          Disallow merging of constants</span><br><span class=\"line\">  -fno-objc-infer-related-result-type</span><br><span class=\"line\">                          do not infer Objective-C related result type based on method family</span><br><span class=\"line\">  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators</span><br><span class=\"line\">  -fno-plt                Do not use the PLT to make function calls</span><br><span class=\"line\">  -fno-preserve-as-comments</span><br><span class=\"line\">                          Do not preserve comments in inline assembly</span><br><span class=\"line\">  -fno-profile-generate   Disable generation of profile instrumentation.</span><br><span class=\"line\">  -fno-profile-instr-generate</span><br><span class=\"line\">                          Disable generation of profile instrumentation.</span><br><span class=\"line\">  -fno-profile-instr-use  Disable using instrumentation data for profile-guided optimization</span><br><span class=\"line\">  -fno-register-global-dtors-with-atexit</span><br><span class=\"line\">                          Don&#x27;t use atexit or __cxa_atexit to register global destructors</span><br><span class=\"line\">  -fno-reroll-loops       Turn off loop reroller</span><br><span class=\"line\">  -fno-rtlib-add-rpath    Do not add -rpath with architecture-specific resource directory to the linker flags</span><br><span class=\"line\">  -fno-rtti-data          Control emission of RTTI data</span><br><span class=\"line\">  -fno-rtti               Disable generation of rtti information</span><br><span class=\"line\">  -fno-sanitize-address-poison-class-member-array-new-cookie</span><br><span class=\"line\">                          Disable poisoning array cookies when using class member operator new[] in AddressSanitizer</span><br><span class=\"line\">  -fno-sanitize-address-use-after-scope</span><br><span class=\"line\">                          Disable use-after-scope detection in AddressSanitizer</span><br><span class=\"line\">  -fno-sanitize-blacklist Don&#x27;t use blacklist file for sanitizers</span><br><span class=\"line\">  -fno-sanitize-cfi-cross-dso</span><br><span class=\"line\">                          Disable control flow integrity (CFI) checks for cross-DSO calls.</span><br><span class=\"line\">  -fno-sanitize-coverage=&lt;value&gt;</span><br><span class=\"line\">                          Disable specified features of coverage instrumentation for Sanitizers</span><br><span class=\"line\">  -fno-sanitize-memory-track-origins</span><br><span class=\"line\">                          Disable origins tracking in MemorySanitizer</span><br><span class=\"line\">  -fno-sanitize-memory-use-after-dtor</span><br><span class=\"line\">                          Disable use-after-destroy detection in MemorySanitizer</span><br><span class=\"line\">  -fno-sanitize-recover=&lt;value&gt;</span><br><span class=\"line\">                          Disable recovery for specified sanitizers</span><br><span class=\"line\">  -fno-sanitize-stats     Disable sanitizer statistics gathering.</span><br><span class=\"line\">  -fno-sanitize-thread-atomics</span><br><span class=\"line\">                          Disable atomic operations instrumentation in ThreadSanitizer</span><br><span class=\"line\">  -fno-sanitize-thread-func-entry-exit</span><br><span class=\"line\">                          Disable function entry/exit instrumentation in ThreadSanitizer</span><br><span class=\"line\">  -fno-sanitize-thread-memory-access</span><br><span class=\"line\">                          Disable memory access instrumentation in ThreadSanitizer</span><br><span class=\"line\">  -fno-sanitize-trap=&lt;value&gt;</span><br><span class=\"line\">                          Disable trapping for specified sanitizers</span><br><span class=\"line\">  -fno-short-wchar        Force wchar_t to be an unsigned int</span><br><span class=\"line\">  -fno-show-column        Do not include column number on diagnostics</span><br><span class=\"line\">  -fno-show-source-location</span><br><span class=\"line\">                          Do not include source location information with diagnostics</span><br><span class=\"line\">  -fno-signed-char        Char is unsigned</span><br><span class=\"line\">  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros</span><br><span class=\"line\">  -fno-spell-checking     Disable spell-checking</span><br><span class=\"line\">  -fno-stack-check        Disable stack checking</span><br><span class=\"line\">  -fno-stack-protector    Disable the use of stack protectors</span><br><span class=\"line\">  -fno-stack-size-section Don&#x27;t emit section containing metadata on function stack sizes</span><br><span class=\"line\">  -fno-standalone-debug   Limit debug information produced to reduce size of debug binary</span><br><span class=\"line\">  -fno-strict-float-cast-overflow</span><br><span class=\"line\">                          Relax language rules and try to match the behavior of the target&#x27;s native float-to-int conversion instructions</span><br><span class=\"line\">  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe</span><br><span class=\"line\">  -fno-trigraphs          Do not process trigraph sequences</span><br><span class=\"line\">  -fno-unroll-loops       Turn off loop unroller</span><br><span class=\"line\">  -fno-use-cxa-atexit     Don&#x27;t use __cxa_atexit for calling destructors</span><br><span class=\"line\">  -fno-use-init-array     Don&#x27;t use .init_array instead of .ctors</span><br><span class=\"line\">  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc</span><br><span class=\"line\">  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers</span><br><span class=\"line\">  -fobjc-exceptions       Enable Objective-C exceptions</span><br><span class=\"line\">  -fobjc-runtime=&lt;value&gt;  Specify the target Objective-C runtime kind and version</span><br><span class=\"line\">  -fobjc-weak             Enable ARC-style weak references in Objective-C</span><br><span class=\"line\">  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.</span><br><span class=\"line\">  -fopenmp-targets=&lt;value&gt;</span><br><span class=\"line\">                          Specify comma-separated list of triples OpenMP offloading targets to be supported</span><br><span class=\"line\">  -fopenmp                Parse OpenMP pragmas and generate parallel code.</span><br><span class=\"line\">  -foptimization-record-file=&lt;value&gt;</span><br><span class=\"line\">                          Specify the file name of any generated YAML optimization record</span><br><span class=\"line\">  -fpack-struct=&lt;value&gt;   Specify the default maximum struct packing alignment</span><br><span class=\"line\">  -fpascal-strings        Recognize and construct Pascal-style string literals</span><br><span class=\"line\">  -fpcc-struct-return     Override the default ABI to return all structs on the stack</span><br><span class=\"line\">  -fplt                   Use the PLT to make function calls</span><br><span class=\"line\">  -fplugin=&lt;dsopath&gt;      Load the named plugin (dynamic shared object)</span><br><span class=\"line\">  -fprebuilt-module-path=&lt;directory&gt;</span><br><span class=\"line\">                          Specify the prebuilt module path</span><br><span class=\"line\">  -fprofile-generate=&lt;directory&gt;</span><br><span class=\"line\">                          Generate instrumented code to collect execution counts into &lt;directory&gt;/default.profraw (overridden by LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-generate      Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-instr-generate=&lt;file&gt;</span><br><span class=\"line\">                          Generate instrumented code to collect execution counts into &lt;file&gt; (overridden by LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-instr-generate</span><br><span class=\"line\">                          Generate instrumented code to collect execution counts into default.profraw file (overridden by &#x27;=&#x27; form of option or LLVM_PROFILE_FILE env var)</span><br><span class=\"line\">  -fprofile-instr-use=&lt;value&gt;</span><br><span class=\"line\">                          Use instrumentation data for profile-guided optimization</span><br><span class=\"line\">  -fprofile-sample-accurate</span><br><span class=\"line\">                          Specifies that the sample profile is accurate</span><br><span class=\"line\">  -fprofile-sample-use=&lt;value&gt;</span><br><span class=\"line\">                          Enable sample-based profile guided optimizations</span><br><span class=\"line\">  -fprofile-use=&lt;pathname&gt;</span><br><span class=\"line\">                          Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from &lt;pathname&gt;/default.profdata. Otherwise, it reads from file &lt;pathname&gt;.</span><br><span class=\"line\">  -fptrauth-calls         Enable signing and authentication of all indirect calls</span><br><span class=\"line\">  -fptrauth-intrinsics    Enable pointer-authentication intrinsics</span><br><span class=\"line\">  -fptrauth-returns       Enable signing and authentication of return addresses</span><br><span class=\"line\">  -fptrauth-soft          Enable software lowering of pointer authentication</span><br><span class=\"line\">  -freciprocal-math       Allow division operations to be reassociated</span><br><span class=\"line\">  -freg-struct-return     Override the default ABI to return small structs in registers</span><br><span class=\"line\">  -fregister-global-dtors-with-atexit</span><br><span class=\"line\">                          Use atexit or __cxa_atexit to register global destructors</span><br><span class=\"line\">  -frelaxed-template-template-args</span><br><span class=\"line\">                          Enable C++17 relaxed template template argument matching</span><br><span class=\"line\">  -freroll-loops          Turn on loop reroller</span><br><span class=\"line\">  -frtlib-add-rpath       Add -rpath with architecture-specific resource directory to the linker flags</span><br><span class=\"line\">  -fsanitize-address-field-padding=&lt;value&gt;</span><br><span class=\"line\">                          Level of field padding for AddressSanitizer</span><br><span class=\"line\">  -fsanitize-address-globals-dead-stripping</span><br><span class=\"line\">                          Enable linker dead stripping of globals in AddressSanitizer</span><br><span class=\"line\">  -fsanitize-address-poison-class-member-array-new-cookie</span><br><span class=\"line\">                          Enable poisoning array cookies when using class member operator new[] in AddressSanitizer</span><br><span class=\"line\">  -fsanitize-address-use-after-scope</span><br><span class=\"line\">                          Enable use-after-scope detection in AddressSanitizer</span><br><span class=\"line\">  -fsanitize-blacklist=&lt;value&gt;</span><br><span class=\"line\">                          Path to blacklist file for sanitizers</span><br><span class=\"line\">  -fsanitize-cfi-cross-dso</span><br><span class=\"line\">                          Enable control flow integrity (CFI) checks for cross-DSO calls.</span><br><span class=\"line\">  -fsanitize-cfi-icall-generalize-pointers</span><br><span class=\"line\">                          Generalize pointers in CFI indirect call type signature checks</span><br><span class=\"line\">  -fsanitize-coverage=&lt;value&gt;</span><br><span class=\"line\">                          Specify the type of coverage instrumentation for Sanitizers</span><br><span class=\"line\">  -fsanitize-memory-track-origins=&lt;value&gt;</span><br><span class=\"line\">                          Enable origins tracking in MemorySanitizer</span><br><span class=\"line\">  -fsanitize-memory-track-origins</span><br><span class=\"line\">                          Enable origins tracking in MemorySanitizer</span><br><span class=\"line\">  -fsanitize-memory-use-after-dtor</span><br><span class=\"line\">                          Enable use-after-destroy detection in MemorySanitizer</span><br><span class=\"line\">  -fsanitize-recover=&lt;value&gt;</span><br><span class=\"line\">                          Enable recovery for specified sanitizers</span><br><span class=\"line\">  -fsanitize-stats        Enable sanitizer statistics gathering.</span><br><span class=\"line\">  -fsanitize-thread-atomics</span><br><span class=\"line\">                          Enable atomic operations instrumentation in ThreadSanitizer (default)</span><br><span class=\"line\">  -fsanitize-thread-func-entry-exit</span><br><span class=\"line\">                          Enable function entry/exit instrumentation in ThreadSanitizer (default)</span><br><span class=\"line\">  -fsanitize-thread-memory-access</span><br><span class=\"line\">                          Enable memory access instrumentation in ThreadSanitizer (default)</span><br><span class=\"line\">  -fsanitize-trap=&lt;value&gt; Enable trapping for specified sanitizers</span><br><span class=\"line\">  -fsanitize-undefined-strip-path-components=&lt;number&gt;</span><br><span class=\"line\">                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.</span><br><span class=\"line\">  -fsanitize=&lt;check&gt;      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks</span><br><span class=\"line\">  -fsave-optimization-record</span><br><span class=\"line\">                          Generate a YAML optimization record file</span><br><span class=\"line\">  -fseh-exceptions        Use SEH style exceptions</span><br><span class=\"line\">  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values</span><br><span class=\"line\">  -fshort-wchar           Force wchar_t to be a short unsigned int</span><br><span class=\"line\">  -fshow-overloads=&lt;value&gt;</span><br><span class=\"line\">                          Which overload candidates to show when overload resolution fails: best|all; defaults to all</span><br><span class=\"line\">  -fsized-deallocation    Enable C++14 sized global deallocation functions</span><br><span class=\"line\">  -fsjlj-exceptions       Use SjLj style exceptions</span><br><span class=\"line\">  -fslp-vectorize         Enable the superword-level parallelism vectorization passes</span><br><span class=\"line\">  -fsplit-dwarf-inlining  Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF</span><br><span class=\"line\">  -fstack-check           Enable stack checking</span><br><span class=\"line\">  -fstack-protector-all   Force the usage of stack protectors for all functions</span><br><span class=\"line\">  -fstack-protector-strong</span><br><span class=\"line\">                          Use a strong heuristic to apply stack protectors to functions</span><br><span class=\"line\">  -fstack-protector       Enable stack protectors for functions potentially vulnerable to stack smashing</span><br><span class=\"line\">  -fstack-size-section    Emit section containing metadata on function stack sizes</span><br><span class=\"line\">  -fstandalone-debug      Emit full debug info for all types used by the program</span><br><span class=\"line\">  -fstrict-enums          Enable optimizations based on the strict definition of an enum&#x27;s value range</span><br><span class=\"line\">  -fstrict-float-cast-overflow</span><br><span class=\"line\">                          Assume that overflowing float-to-int casts are undefined (default)</span><br><span class=\"line\">  -fstrict-return         Always treat control flow paths that fall off the end of a non-void function as unreachable</span><br><span class=\"line\">  -fstrict-vtable-pointers</span><br><span class=\"line\">                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects</span><br><span class=\"line\">  -fthinlto-index=&lt;value&gt; Perform ThinLTO importing using provided function summary index</span><br><span class=\"line\">  -ftrap-function=&lt;value&gt; Issue call to specified function rather than a trap instruction</span><br><span class=\"line\">  -ftrapv-handler=&lt;function name&gt;</span><br><span class=\"line\">                          Specify the function to be called on overflow</span><br><span class=\"line\">  -ftrapv                 Trap on integer overflow</span><br><span class=\"line\">  -ftrigraphs             Process trigraph sequences</span><br><span class=\"line\">  -ftrivial-auto-var-init=&lt;value&gt;</span><br><span class=\"line\">                          Initialize trivial automatic stack variables: uninitialized (default) | pattern</span><br><span class=\"line\">  -funique-section-names  Use unique names for text and data sections (ELF Only)</span><br><span class=\"line\">  -funroll-loops          Turn on loop unroller</span><br><span class=\"line\">  -fuse-init-array        Use .init_array instead of .ctors</span><br><span class=\"line\">  -fveclib=&lt;value&gt;        Use the given vector functions library</span><br><span class=\"line\">  -fvectorize             Enable the loop vectorization passes</span><br><span class=\"line\">  -fvisibility-inlines-hidden</span><br><span class=\"line\">                          Give inline C++ member functions hidden visibility by default</span><br><span class=\"line\">  -fvisibility-ms-compat  Give global types &#x27;default&#x27; visibility and global functions and variables &#x27;hidden&#x27; visibility by default</span><br><span class=\"line\">  -fvisibility=&lt;value&gt;    Set the default symbol visibility for all global declarations</span><br><span class=\"line\">  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto</span><br><span class=\"line\">  -fwrapv                 Treat signed integer overflow as two&#x27;s complement</span><br><span class=\"line\">  -fwritable-strings      Store string literals as writable data</span><br><span class=\"line\">  -fxray-always-emit-customevents</span><br><span class=\"line\">                          Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.</span><br><span class=\"line\">  -fxray-always-emit-typedevents</span><br><span class=\"line\">                          Determine whether to always emit __xray_typedevent(...) calls even if the function it appears in is not always instrumented.</span><br><span class=\"line\">  -fxray-always-instrument= &lt;value&gt;</span><br><span class=\"line\">                          DEPRECATED: Filename defining the whitelist for imbuing the &#x27;always instrument&#x27; XRay attribute.</span><br><span class=\"line\">  -fxray-attr-list= &lt;value&gt;</span><br><span class=\"line\">                          Filename defining the list of functions/types for imbuing XRay attributes.</span><br><span class=\"line\">  -fxray-instruction-threshold= &lt;value&gt;</span><br><span class=\"line\">                          Sets the minimum function size to instrument with XRay</span><br><span class=\"line\">  -fxray-instrumentation-bundle= &lt;value&gt;</span><br><span class=\"line\">                          Select which XRay instrumentation points to emit. Options: all, none, function, custom. Default is &#x27;all&#x27;.</span><br><span class=\"line\">  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit</span><br><span class=\"line\">  -fxray-link-deps        Tells clang to add the link dependencies for XRay.</span><br><span class=\"line\">  -fxray-modes= &lt;value&gt;   List of modes to link in by default into XRay instrumented binaries.</span><br><span class=\"line\">  -fxray-never-instrument= &lt;value&gt;</span><br><span class=\"line\">                          DEPRECATED: Filename defining the whitelist for imbuing the &#x27;never instrument&#x27; XRay attribute.</span><br><span class=\"line\">  -fzvector               Enable System z vector language extension</span><br><span class=\"line\">  -F &lt;value&gt;              Add directory to framework include search path</span><br><span class=\"line\">  --gcc-toolchain=&lt;value&gt; Use the gcc toolchain at the given directory</span><br><span class=\"line\">  -gcodeview              Generate CodeView debug information</span><br><span class=\"line\">  -gdwarf-2               Generate source-level debug information with dwarf version 2</span><br><span class=\"line\">  -gdwarf-3               Generate source-level debug information with dwarf version 3</span><br><span class=\"line\">  -gdwarf-4               Generate source-level debug information with dwarf version 4</span><br><span class=\"line\">  -gdwarf-5               Generate source-level debug information with dwarf version 5</span><br><span class=\"line\">  -gembed-source          Embed source text in DWARF debug sections</span><br><span class=\"line\">  -gline-tables-only      Emit debug line number tables only</span><br><span class=\"line\">  -gmodules               Generate debug info with external references to clang modules or precompiled headers</span><br><span class=\"line\">  -gno-embed-source       Restore the default behavior of not embedding source text in DWARF debug sections</span><br><span class=\"line\">  -gz=&lt;value&gt;             DWARF debug sections compression type</span><br><span class=\"line\">  -gz                     DWARF debug sections compression type</span><br><span class=\"line\">  -G &lt;size&gt;               Put objects of at most &lt;size&gt; bytes into small data section (MIPS / Hexagon)</span><br><span class=\"line\">  -g                      Generate source-level debug information</span><br><span class=\"line\">  --help-hidden           Display help for hidden options</span><br><span class=\"line\">  -help                   Display available options</span><br><span class=\"line\">  --hip-device-lib-path=&lt;value&gt;</span><br><span class=\"line\">                          HIP device library path</span><br><span class=\"line\">  --hip-device-lib=&lt;value&gt;</span><br><span class=\"line\">                          HIP device library</span><br><span class=\"line\">  --hip-link              Link clang-offload-bundler bundles for HIP</span><br><span class=\"line\">  -H                      Show header includes and nesting depth</span><br><span class=\"line\">  -I-                     Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path</span><br><span class=\"line\">  -iapinotes-modules &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to the API notes search path referenced by module name</span><br><span class=\"line\">  -idirafter &lt;value&gt;      Add directory to AFTER include search path</span><br><span class=\"line\">  -iframeworkwithsysroot &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot</span><br><span class=\"line\">  -iframework &lt;value&gt;     Add directory to SYSTEM framework search path</span><br><span class=\"line\">  -imacros &lt;file&gt;         Include macros from file before parsing</span><br><span class=\"line\">  -include-pch &lt;file&gt;     Include precompiled header file</span><br><span class=\"line\">  -include &lt;file&gt;         Include file before parsing</span><br><span class=\"line\">  -index-header-map       Make the next included directory (-I or -F) an indexer header map</span><br><span class=\"line\">  -index-ignore-system-symbols</span><br><span class=\"line\">                          Ignore symbols from system headers</span><br><span class=\"line\">  -index-record-codegen-name</span><br><span class=\"line\">                          Record the codegen name for symbols</span><br><span class=\"line\">  -index-store-path &lt;value&gt;</span><br><span class=\"line\">                          Enable indexing with the specified data store path</span><br><span class=\"line\">  -iprefix &lt;dir&gt;          Set the -iwithprefix/-iwithprefixbefore prefix</span><br><span class=\"line\">  -iquote &lt;directory&gt;     Add directory to QUOTE include search path</span><br><span class=\"line\">  -isysroot &lt;dir&gt;         Set the system root directory (usually /)</span><br><span class=\"line\">  -isystem-after &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to end of the SYSTEM include search path</span><br><span class=\"line\">  -isystem &lt;directory&gt;    Add directory to SYSTEM include search path</span><br><span class=\"line\">  -ivfsoverlay &lt;value&gt;    Overlay the virtual filesystem described by file over the real file system</span><br><span class=\"line\">  -iwithprefixbefore &lt;dir&gt;</span><br><span class=\"line\">                          Set directory to include search path with prefix</span><br><span class=\"line\">  -iwithprefix &lt;dir&gt;      Set directory to SYSTEM include search path with prefix</span><br><span class=\"line\">  -iwithsysroot &lt;directory&gt;</span><br><span class=\"line\">                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot</span><br><span class=\"line\">  -I &lt;dir&gt;                Add directory to include search path</span><br><span class=\"line\">  -L &lt;dir&gt;                Add directory to library search path</span><br><span class=\"line\">  -mabicalls              Enable SVR4-style position-independent code (Mips only)</span><br><span class=\"line\">  -malign-double          Align doubles to two words in structs (x86 only)</span><br><span class=\"line\">  -mbackchain             Link stack frames through backchain on System Z</span><br><span class=\"line\">  -mcrc                   Allow use of CRC instructions (ARM/Mips only)</span><br><span class=\"line\">  -MD                     Write a depfile containing user and system headers</span><br><span class=\"line\">  -meabi &lt;value&gt;          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)</span><br><span class=\"line\">  -membedded-data         Place constants in the .rodata section instead of the .sdata section even if they meet the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mexecute-only          Disallow generation of data access to code sections (ARM only)</span><br><span class=\"line\">  -mextern-sdata          Assume that externally defined data is in the small data if it meets the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mfentry                Insert calls to fentry at function entry (x86 only)</span><br><span class=\"line\">  -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)</span><br><span class=\"line\">  -mfp32                  Use 32-bit floating point registers (MIPS only)</span><br><span class=\"line\">  -mfp64                  Use 64-bit floating point registers (MIPS only)</span><br><span class=\"line\">  -MF &lt;file&gt;              Write depfile output from -MMD, -MD, -MM, or -M to &lt;file&gt;</span><br><span class=\"line\">  -mgeneral-regs-only     Generate code which only uses the general purpose registers (AArch64 only)</span><br><span class=\"line\">  -mglobal-merge          Enable merging of globals</span><br><span class=\"line\">  -mgpopt                 Use GP relative accesses for symbols known to be in a small data section (MIPS)</span><br><span class=\"line\">  -MG                     Add missing headers to depfile</span><br><span class=\"line\">  -mhvx-length=&lt;value&gt;    Set Hexagon Vector Length</span><br><span class=\"line\">  -mhvx=&lt;value&gt;           Enable Hexagon Vector eXtensions</span><br><span class=\"line\">  -mhvx                   Enable Hexagon Vector eXtensions</span><br><span class=\"line\">  -miamcu                 Use Intel MCU ABI</span><br><span class=\"line\">  --migrate               Run the migrator</span><br><span class=\"line\">  -mincremental-linker-compatible</span><br><span class=\"line\">                          (integrated-as) Emit an object file which can be used with an incremental linker</span><br><span class=\"line\">  -mindirect-jump=&lt;value&gt; Change indirect jump instructions to inhibit speculation</span><br><span class=\"line\">  -mios-version-min=&lt;value&gt;</span><br><span class=\"line\">                          Set iOS deployment target</span><br><span class=\"line\">  -MJ &lt;value&gt;             Write a compilation database entry per input</span><br><span class=\"line\">  -mllvm &lt;value&gt;          Additional arguments to forward to LLVM&#x27;s option processing</span><br><span class=\"line\">  -mlocal-sdata           Extend the -G behaviour to object local data (MIPS)</span><br><span class=\"line\">  -mlong-calls            Generate branches with extended addressability, usually via indirect jumps.</span><br><span class=\"line\">  -mmacosx-version-min=&lt;value&gt;</span><br><span class=\"line\">                          Set Mac OS X deployment target</span><br><span class=\"line\">  -mmadd4                 Enable the generation of 4-operand madd.s, madd.d and related instructions.</span><br><span class=\"line\">  -MMD                    Write a depfile containing user headers</span><br><span class=\"line\">  -mmemops                Enable generation of memop instructions</span><br><span class=\"line\">  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard</span><br><span class=\"line\">  -mmsa                   Enable MSA ASE (MIPS only)</span><br><span class=\"line\">  -mmt                    Enable MT ASE (MIPS only)</span><br><span class=\"line\">  -MM                     Like -MMD, but also implies -E and writes to stdout by default</span><br><span class=\"line\">  -mno-abicalls           Disable SVR4-style position-independent code (Mips only)</span><br><span class=\"line\">  -mno-crc                Disallow use of CRC instructions (Mips only)</span><br><span class=\"line\">  -mno-embedded-data      Do not place constants in the .rodata section instead of the .sdata if they meet the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mno-execute-only       Allow generation of data access to code sections (ARM only)</span><br><span class=\"line\">  -mno-extern-sdata       Do not assume that externally defined data is in the small data if it meets the -G &lt;size&gt; threshold (MIPS)</span><br><span class=\"line\">  -mno-fix-cortex-a53-835769</span><br><span class=\"line\">                          Don&#x27;t workaround Cortex-A53 erratum 835769 (AArch64 only)</span><br><span class=\"line\">  -mno-global-merge       Disable merging of globals</span><br><span class=\"line\">  -mno-gpopt              Do not use GP relative accesses for symbols known to be in a small data section (MIPS)</span><br><span class=\"line\">  -mno-hvx                Disable Hexagon Vector eXtensions</span><br><span class=\"line\">  -mno-implicit-float     Don&#x27;t generate implicit floating point instructions</span><br><span class=\"line\">  -mno-incremental-linker-compatible</span><br><span class=\"line\">                          (integrated-as) Emit an object file which cannot be used with an incremental linker</span><br><span class=\"line\">  -mno-local-sdata        Do not extend the -G behaviour to object local data (MIPS)</span><br><span class=\"line\">  -mno-long-calls         Restore the default behaviour of not generating long calls</span><br><span class=\"line\">  -mno-madd4              Disable the generation of 4-operand madd.s, madd.d and related instructions.</span><br><span class=\"line\">  -mno-memops             Disable generation of memop instructions</span><br><span class=\"line\">  -mno-movt               Disallow use of movt/movw pairs (ARM only)</span><br><span class=\"line\">  -mno-ms-bitfields       Do not set the default structure layout to be compatible with the Microsoft compiler standard</span><br><span class=\"line\">  -mno-msa                Disable MSA ASE (MIPS only)</span><br><span class=\"line\">  -mno-mt                 Disable MT ASE (MIPS only)</span><br><span class=\"line\">  -mno-neg-immediates     Disallow converting instructions with negative immediates to their negation or inversion.</span><br><span class=\"line\">  -mno-nvj                Disable generation of new-value jumps</span><br><span class=\"line\">  -mno-nvs                Disable generation of new-value stores</span><br><span class=\"line\">  -mno-outline            Disable function outlining (AArch64 only)</span><br><span class=\"line\">  -mno-packets            Disable generation of instruction packets</span><br><span class=\"line\">  -mno-relax              Disable linker relaxation</span><br><span class=\"line\">  -mno-restrict-it        Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode</span><br><span class=\"line\">  -mno-stack-arg-probe    Disable stack probes which are enabled by default</span><br><span class=\"line\">  -mno-unaligned-access   Force all memory accesses to be aligned (AArch32/AArch64 only)</span><br><span class=\"line\">  -mno-xnack              Disable XNACK (AMDGPU only)</span><br><span class=\"line\">  -mnocrc                 Disallow use of CRC instructions (ARM only)</span><br><span class=\"line\">  -mnvj                   Enable generation of new-value jumps</span><br><span class=\"line\">  -mnvs                   Enable generation of new-value stores</span><br><span class=\"line\">  -module-dependency-dir &lt;value&gt;</span><br><span class=\"line\">                          Directory to dump module dependencies to</span><br><span class=\"line\">  -module-file-info       Provide information about a particular module file</span><br><span class=\"line\">  -momit-leaf-frame-pointer</span><br><span class=\"line\">                          Omit frame pointer setup for leaf functions</span><br><span class=\"line\">  -moutline               Enable function outlining (AArch64 only)</span><br><span class=\"line\">  -mpackets               Enable generation of instruction packets</span><br><span class=\"line\">  -mpie-copy-relocations  Use copy relocations support for PIE builds</span><br><span class=\"line\">  -mprefer-vector-width=&lt;value&gt;</span><br><span class=\"line\">                          Specifies preferred vector width for auto-vectorization. Defaults to &#x27;none&#x27; which allows target specific decisions.</span><br><span class=\"line\">  -MP                     Create phony target for each dependency (other than main file)</span><br><span class=\"line\">  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility</span><br><span class=\"line\">  -MQ &lt;value&gt;             Specify name of main file output to quote in depfile</span><br><span class=\"line\">  -mrelax-all             (integrated-as) Relax all machine instructions</span><br><span class=\"line\">  -mrelax                 Enable linker relaxation</span><br><span class=\"line\">  -mrestrict-it           Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.</span><br><span class=\"line\">  -mrtd                   Make StdCall calling convention the default</span><br><span class=\"line\">  -msoft-float            Use software floating point</span><br><span class=\"line\">  -mstack-alignment=&lt;value&gt;</span><br><span class=\"line\">                          Set the stack alignment</span><br><span class=\"line\">  -mstack-arg-probe       Enable stack probes</span><br><span class=\"line\">  -mstack-probe-size=&lt;value&gt;</span><br><span class=\"line\">                          Set the stack probe size</span><br><span class=\"line\">  -mstackrealign          Force realign the stack at entry to every function</span><br><span class=\"line\">  -mthread-model &lt;value&gt;  The thread model to use, e.g. posix, single (posix by default)</span><br><span class=\"line\">  -mtp=&lt;value&gt;            Read thread pointer from coprocessor register (ARM only)</span><br><span class=\"line\">  -MT &lt;value&gt;             Specify name of main file output in depfile</span><br><span class=\"line\">  -munaligned-access      Allow memory accesses to be unaligned (AArch32/AArch64 only)</span><br><span class=\"line\">  -MV                     Use NMake/Jom format for the depfile</span><br><span class=\"line\">  -mxnack                 Enable XNACK (AMDGPU only)</span><br><span class=\"line\">  -M                      Like -MD, but also implies -E and writes to stdout by default</span><br><span class=\"line\">  --no-cuda-gpu-arch=&lt;value&gt;</span><br><span class=\"line\">                          Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. &#x27;all&#x27; resets the list to its default value.</span><br><span class=\"line\">  --no-cuda-include-ptx=&lt;value&gt;</span><br><span class=\"line\">                          Do not include PTX for the follwing GPU architecture (e.g. sm_35) or &#x27;all&#x27;. May be specified more than once.</span><br><span class=\"line\">  --no-cuda-version-check Don&#x27;t error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.</span><br><span class=\"line\">  --no-system-header-prefix=&lt;prefix&gt;</span><br><span class=\"line\">                          Treat all #include paths starting with &lt;prefix&gt; as not including a system header.</span><br><span class=\"line\">  -nobuiltininc           Disable builtin #include directories</span><br><span class=\"line\">  -nostdinc++             Disable standard #include directories for the C++ standard library</span><br><span class=\"line\">  -ObjC++                 Treat source input files as Objective-C++ inputs</span><br><span class=\"line\">  -objcmt-atomic-property Make migration to &#x27;atomic&#x27; properties</span><br><span class=\"line\">  -objcmt-migrate-all     Enable migration to modern ObjC</span><br><span class=\"line\">  -objcmt-migrate-annotation</span><br><span class=\"line\">                          Enable migration to property and method annotations</span><br><span class=\"line\">  -objcmt-migrate-designated-init</span><br><span class=\"line\">                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods</span><br><span class=\"line\">  -objcmt-migrate-instancetype</span><br><span class=\"line\">                          Enable migration to infer instancetype for method result type</span><br><span class=\"line\">  -objcmt-migrate-literals</span><br><span class=\"line\">                          Enable migration to modern ObjC literals</span><br><span class=\"line\">  -objcmt-migrate-ns-macros</span><br><span class=\"line\">                          Enable migration to NS_ENUM/NS_OPTIONS macros</span><br><span class=\"line\">  -objcmt-migrate-property-dot-syntax</span><br><span class=\"line\">                          Enable migration of setter/getter messages to property-dot syntax</span><br><span class=\"line\">  -objcmt-migrate-property</span><br><span class=\"line\">                          Enable migration to modern ObjC property</span><br><span class=\"line\">  -objcmt-migrate-protocol-conformance</span><br><span class=\"line\">                          Enable migration to add protocol conformance on classes</span><br><span class=\"line\">  -objcmt-migrate-readonly-property</span><br><span class=\"line\">                          Enable migration to modern ObjC readonly property</span><br><span class=\"line\">  -objcmt-migrate-readwrite-property</span><br><span class=\"line\">                          Enable migration to modern ObjC readwrite property</span><br><span class=\"line\">  -objcmt-migrate-subscripting</span><br><span class=\"line\">                          Enable migration to modern ObjC subscripting</span><br><span class=\"line\">  -objcmt-ns-nonatomic-iosonly</span><br><span class=\"line\">                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property&#x27;s &#x27;atomic&#x27; attribute</span><br><span class=\"line\">  -objcmt-returns-innerpointer-property</span><br><span class=\"line\">                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER</span><br><span class=\"line\">  -objcmt-whitelist-dir-path=&lt;value&gt;</span><br><span class=\"line\">                          Only modify files with a filename contained in the provided directory path</span><br><span class=\"line\">  -ObjC                   Treat source input files as Objective-C inputs</span><br><span class=\"line\">  -o &lt;file&gt;               Write output to &lt;file&gt;</span><br><span class=\"line\">  -pg                     Enable mcount instrumentation</span><br><span class=\"line\">  -pipe                   Use pipes between commands, when possible</span><br><span class=\"line\">  --precompile            Only precompile the input</span><br><span class=\"line\">  -print-file-name=&lt;file&gt; Print the full library path of &lt;file&gt;</span><br><span class=\"line\">  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace</span><br><span class=\"line\">  -print-libgcc-file-name Print the library path for the currently used compiler runtime library (&quot;libgcc.a&quot; or &quot;libclang_rt.builtins.*.a&quot;)</span><br><span class=\"line\">  -print-prog-name=&lt;name&gt; Print the full program path of &lt;name&gt;</span><br><span class=\"line\">  -print-resource-dir     Print the resource directory pathname</span><br><span class=\"line\">  -print-search-dirs      Print the paths used for finding libraries and programs</span><br><span class=\"line\">  -pthread                Support POSIX threads in generated code</span><br><span class=\"line\">  --ptxas-path=&lt;value&gt;    Path to ptxas (used for compiling CUDA code)</span><br><span class=\"line\">  -P                      Disable linemarker output in -E mode</span><br><span class=\"line\">  -Qn                     Do not emit metadata containing compiler name and version</span><br><span class=\"line\">  -Qunused-arguments      Don&#x27;t emit warning for unused driver arguments</span><br><span class=\"line\">  -Qy                     Emit metadata containing compiler name and version</span><br><span class=\"line\">  -relocatable-pch        Whether to build a relocatable precompiled header</span><br><span class=\"line\">  -rewrite-legacy-objc    Rewrite Legacy Objective-C source to C++</span><br><span class=\"line\">  -rewrite-objc           Rewrite Objective-C source to C++</span><br><span class=\"line\">  -Rpass-analysis=&lt;value&gt; Report transformation analysis from optimization passes whose name matches the given POSIX regular expression</span><br><span class=\"line\">  -Rpass-missed=&lt;value&gt;   Report missed transformations by optimization passes whose name matches the given POSIX regular expression</span><br><span class=\"line\">  -Rpass=&lt;value&gt;          Report transformations performed by optimization passes whose name matches the given POSIX regular expression</span><br><span class=\"line\">  -rtlib=&lt;value&gt;          Compiler runtime library to use</span><br><span class=\"line\">  -R&lt;remark&gt;              Enable the specified remark</span><br><span class=\"line\">  -save-stats=&lt;value&gt;     Save llvm statistics.</span><br><span class=\"line\">  -save-stats             Save llvm statistics.</span><br><span class=\"line\">  -save-temps=&lt;value&gt;     Save intermediate compilation results.</span><br><span class=\"line\">  -save-temps             Save intermediate compilation results</span><br><span class=\"line\">  -serialize-diagnostics &lt;value&gt;</span><br><span class=\"line\">                          Serialize compiler diagnostics to a file</span><br><span class=\"line\">  -std=&lt;value&gt;            Language standard to compile for</span><br><span class=\"line\">  -stdlib=&lt;value&gt;         C++ standard library to use</span><br><span class=\"line\">  --system-header-prefix=&lt;prefix&gt;</span><br><span class=\"line\">                          Treat all #include paths starting with &lt;prefix&gt; as including a system header.</span><br><span class=\"line\">  -S                      Only run preprocess and compilation steps</span><br><span class=\"line\">  -target-variant &lt;value&gt; Generate code that may run on a particular variant of the deployment target</span><br><span class=\"line\">  --target=&lt;value&gt;        Generate code for the given target</span><br><span class=\"line\">  -Tbss &lt;addr&gt;            Set starting address of BSS to &lt;addr&gt;</span><br><span class=\"line\">  -Tdata &lt;addr&gt;           Set starting address of DATA to &lt;addr&gt;</span><br><span class=\"line\">  -time                   Time individual commands</span><br><span class=\"line\">  -traditional-cpp        Enable some traditional CPP emulation</span><br><span class=\"line\">  -trigraphs              Process trigraph sequences</span><br><span class=\"line\">  -Ttext &lt;addr&gt;           Set starting address of TEXT to &lt;addr&gt;</span><br><span class=\"line\">  -T &lt;script&gt;             Specify &lt;script&gt; as linker script</span><br><span class=\"line\">  -undef                  undef all system defines</span><br><span class=\"line\">  -U &lt;macro&gt;              Undefine macro &lt;macro&gt;</span><br><span class=\"line\">  --verify-debug-info     Verify the binary representation of debug output</span><br><span class=\"line\">  -verify-pch             Load and verify that a pre-compiled header file is not stale</span><br><span class=\"line\">  --version               Print version information</span><br><span class=\"line\">  -v                      Show commands to run and use verbose output</span><br><span class=\"line\">  -Wa,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the assembler</span><br><span class=\"line\">  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED</span><br><span class=\"line\">  -Wl,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the linker</span><br><span class=\"line\">  -working-directory &lt;value&gt;</span><br><span class=\"line\">                          Resolve file paths relative to the specified directory</span><br><span class=\"line\">  -Wp,&lt;arg&gt;               Pass the comma separated arguments in &lt;arg&gt; to the preprocessor</span><br><span class=\"line\">  -W&lt;warning&gt;             Enable the specified warning</span><br><span class=\"line\">  -w                      Suppress all warnings</span><br><span class=\"line\">  -Xanalyzer &lt;arg&gt;        Pass &lt;arg&gt; to the static analyzer</span><br><span class=\"line\">  -Xassembler &lt;arg&gt;       Pass &lt;arg&gt; to the assembler</span><br><span class=\"line\">  -Xclang &lt;arg&gt;           Pass &lt;arg&gt; to the clang compiler</span><br><span class=\"line\">  -Xcuda-fatbinary &lt;arg&gt;  Pass &lt;arg&gt; to fatbinary invocation</span><br><span class=\"line\">  -Xcuda-ptxas &lt;arg&gt;      Pass &lt;arg&gt; to the ptxas assembler</span><br><span class=\"line\">  -Xlinker &lt;arg&gt;          Pass &lt;arg&gt; to the linker</span><br><span class=\"line\">  -Xopenmp-target=&lt;triple&gt; &lt;arg&gt;</span><br><span class=\"line\">                          Pass &lt;arg&gt; to the target offloading toolchain identified by &lt;triple&gt;.</span><br><span class=\"line\">  -Xopenmp-target &lt;arg&gt;   Pass &lt;arg&gt; to the target offloading toolchain.</span><br><span class=\"line\">  -Xpreprocessor &lt;arg&gt;    Pass &lt;arg&gt; to the preprocessor</span><br><span class=\"line\">  -x &lt;language&gt;           Treat subsequent input files as having type &lt;language&gt;</span><br><span class=\"line\">  -z &lt;arg&gt;                Pass -z &lt;arg&gt; to the linker</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/iOS/Frameworks/FramworkProgramme/universal_link.png","post":"cktv5rn070017iu9kfhna9bwy","slug":"universal_link.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS/FrameWorks/FramworkProgramme.md","post":"cktv5rmz8000diu9k029l0zye","slug":"FramworkProgramme.md","modified":1,"renderable":1},{"_id":"source/_posts/iOS/FrameWorks/FramworkProgramme/universal_link.png","post":"cktv5rmz8000diu9k029l0zye","slug":"FramworkProgramme/universal_link.png","modified":1,"renderable":1},{"_id":"source/_posts/iOS/ProjectManager/CI/Jira/Jira.md","post":"cktv5rn2j002ciu9kbl6g22ym","slug":"Jira/Jira.md","modified":1,"renderable":1},{"_id":"source/_posts/iOS/ProjectManager/CI/Jenkins/Jenkins.md","post":"cktv5rn2j002ciu9kbl6g22ym","slug":"Jenkins/Jenkins.md","modified":1,"renderable":1},{"_id":"source/_posts/iOS/ProjectManager/CI/Applestore Connect/App Store Connect API.md","post":"cktv5rn2j002ciu9kbl6g22ym","slug":"Applestore Connect/App Store Connect API.md","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cktv5rn070017iu9kfhna9bwy","tag_id":"cktv5rn090019iu9k1skc1mtd","_id":"cktv5rn0k001aiu9k6xkici0a"},{"post_id":"cktv5rn1z001oiu9k604o0skg","tag_id":"cktv5rn20001qiu9kcm9k3xa3","_id":"cktv5rn22001uiu9k42qlge9b"},{"post_id":"cktv5rn4g004qiu9kah9vedyn","tag_id":"cktv5rn4i004siu9kaopyav6h","_id":"cktv5rn4k004wiu9k6pi4eo87"}],"Tag":[{"name":"Framwork","_id":"cktv5rn090019iu9k1skc1mtd"},{"name":"蓝牙协议","_id":"cktv5rn20001qiu9kcm9k3xa3"},{"name":"React-Native Navigation","_id":"cktv5rn4i004siu9kaopyav6h"}]}}